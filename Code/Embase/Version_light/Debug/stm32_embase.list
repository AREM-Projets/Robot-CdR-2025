
stm32_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017378  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b18  08017548  08017548  00018548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001234  08019060  08019060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d70  0801a294  0801a294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b004  0801b004  0001d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b004  0801b004  0001c004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b00c  0801b00c  0001c00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801b010  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000200  0801b210  0001d200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0801b210  0001d720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e57  00000000  00000000  0001d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003894  00000000  00000000  00046087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc8  00000000  00000000  00049920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018b4  00000000  00000000  0004b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281e8  00000000  00000000  0004d19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc56  00000000  00000000  00075384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e49c8  00000000  00000000  00091fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001769a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0a0  00000000  00000000  001769e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00181a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017530 	.word	0x08017530

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08017530 	.word	0x08017530

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f001 b8f6 	b.w	8001eac <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <selfrel_offset31>:
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	bf4c      	ite	mi
 8000f9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000f9e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fa2:	4418      	add	r0, r3
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <search_EIT_table>:
 8000fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fac:	b349      	cbz	r1, 8001002 <search_EIT_table+0x5a>
 8000fae:	1e4f      	subs	r7, r1, #1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4615      	mov	r5, r2
 8000fb4:	463e      	mov	r6, r7
 8000fb6:	f04f 0900 	mov.w	r9, #0
 8000fba:	eb09 0106 	add.w	r1, r9, r6
 8000fbe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fc2:	1049      	asrs	r1, r1, #1
 8000fc4:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000fc8:	4640      	mov	r0, r8
 8000fca:	f7ff ffe3 	bl	8000f94 <selfrel_offset31>
 8000fce:	428f      	cmp	r7, r1
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000fd6:	d00f      	beq.n	8000ff8 <search_EIT_table+0x50>
 8000fd8:	3008      	adds	r0, #8
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	4420      	add	r0, r4
 8000fde:	d807      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000fe0:	f7ff ffd8 	bl	8000f94 <selfrel_offset31>
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d208      	bcs.n	8000ffc <search_EIT_table+0x54>
 8000fea:	f101 0901 	add.w	r9, r1, #1
 8000fee:	e7e4      	b.n	8000fba <search_EIT_table+0x12>
 8000ff0:	4589      	cmp	r9, r1
 8000ff2:	d006      	beq.n	8001002 <search_EIT_table+0x5a>
 8000ff4:	1e4e      	subs	r6, r1, #1
 8000ff6:	e7e0      	b.n	8000fba <search_EIT_table+0x12>
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	d8f9      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001002:	f04f 0800 	mov.w	r8, #0
 8001006:	4640      	mov	r0, r8
 8001008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800100c <__gnu_unwind_get_pr_addr>:
 800100c:	2801      	cmp	r0, #1
 800100e:	d007      	beq.n	8001020 <__gnu_unwind_get_pr_addr+0x14>
 8001010:	2802      	cmp	r0, #2
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x18>
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__gnu_unwind_get_pr_addr+0x1c>)
 8001016:	2800      	cmp	r0, #0
 8001018:	bf0c      	ite	eq
 800101a:	4618      	moveq	r0, r3
 800101c:	2000      	movne	r0, #0
 800101e:	4770      	bx	lr
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <__gnu_unwind_get_pr_addr+0x20>)
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <__gnu_unwind_get_pr_addr+0x24>)
 8001026:	4770      	bx	lr
 8001028:	080016d5 	.word	0x080016d5
 800102c:	080016d9 	.word	0x080016d9
 8001030:	080016dd 	.word	0x080016dd

08001034 <get_eit_entry>:
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <get_eit_entry+0x88>)
 8001038:	b083      	sub	sp, #12
 800103a:	4604      	mov	r4, r0
 800103c:	1e8d      	subs	r5, r1, #2
 800103e:	b31b      	cbz	r3, 8001088 <get_eit_entry+0x54>
 8001040:	a901      	add	r1, sp, #4
 8001042:	4628      	mov	r0, r5
 8001044:	f3af 8000 	nop.w
 8001048:	b388      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	462a      	mov	r2, r5
 800104e:	f7ff ffab 	bl	8000fa8 <search_EIT_table>
 8001052:	4601      	mov	r1, r0
 8001054:	b358      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 8001056:	f7ff ff9d 	bl	8000f94 <selfrel_offset31>
 800105a:	684b      	ldr	r3, [r1, #4]
 800105c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800105e:	2b01      	cmp	r3, #1
 8001060:	d028      	beq.n	80010b4 <get_eit_entry+0x80>
 8001062:	2b00      	cmp	r3, #0
 8001064:	f101 0004 	add.w	r0, r1, #4
 8001068:	db1f      	blt.n	80010aa <get_eit_entry+0x76>
 800106a:	f7ff ff93 	bl	8000f94 <selfrel_offset31>
 800106e:	2300      	movs	r3, #0
 8001070:	6523      	str	r3, [r4, #80]	@ 0x50
 8001072:	6803      	ldr	r3, [r0, #0]
 8001074:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0d      	blt.n	8001096 <get_eit_entry+0x62>
 800107a:	f7ff ff8b 	bl	8000f94 <selfrel_offset31>
 800107e:	4603      	mov	r3, r0
 8001080:	2000      	movs	r0, #0
 8001082:	6123      	str	r3, [r4, #16]
 8001084:	b003      	add	sp, #12
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <get_eit_entry+0x8c>)
 800108a:	490e      	ldr	r1, [pc, #56]	@ (80010c4 <get_eit_entry+0x90>)
 800108c:	1ac9      	subs	r1, r1, r3
 800108e:	10c9      	asrs	r1, r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	9101      	str	r1, [sp, #4]
 8001094:	e7da      	b.n	800104c <get_eit_entry+0x18>
 8001096:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800109a:	f7ff ffb7 	bl	800100c <__gnu_unwind_get_pr_addr>
 800109e:	4603      	mov	r3, r0
 80010a0:	b128      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 80010a2:	2000      	movs	r0, #0
 80010a4:	6123      	str	r3, [r4, #16]
 80010a6:	b003      	add	sp, #12
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	2301      	movs	r3, #1
 80010ac:	e7e0      	b.n	8001070 <get_eit_entry+0x3c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	2009      	movs	r0, #9
 80010b2:	e7e6      	b.n	8001082 <get_eit_entry+0x4e>
 80010b4:	2300      	movs	r3, #0
 80010b6:	2005      	movs	r0, #5
 80010b8:	e7e3      	b.n	8001082 <get_eit_entry+0x4e>
 80010ba:	bf00      	nop
 80010bc:	00000000 	.word	0x00000000
 80010c0:	0801a294 	.word	0x0801a294
 80010c4:	0801b004 	.word	0x0801b004

080010c8 <restore_non_core_regs>:
 80010c8:	6803      	ldr	r3, [r0, #0]
 80010ca:	07da      	lsls	r2, r3, #31
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	d406      	bmi.n	80010e0 <restore_non_core_regs+0x18>
 80010d2:	079b      	lsls	r3, r3, #30
 80010d4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80010d8:	d509      	bpl.n	80010ee <restore_non_core_regs+0x26>
 80010da:	f000 fc69 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	0759      	lsls	r1, r3, #29
 80010e2:	d509      	bpl.n	80010f8 <restore_non_core_regs+0x30>
 80010e4:	071a      	lsls	r2, r3, #28
 80010e6:	d50e      	bpl.n	8001106 <restore_non_core_regs+0x3e>
 80010e8:	06db      	lsls	r3, r3, #27
 80010ea:	d513      	bpl.n	8001114 <restore_non_core_regs+0x4c>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	f000 fc57 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	0759      	lsls	r1, r3, #29
 80010f6:	d4f5      	bmi.n	80010e4 <restore_non_core_regs+0x1c>
 80010f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010fc:	f000 fc60 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	071a      	lsls	r2, r3, #28
 8001104:	d4f0      	bmi.n	80010e8 <restore_non_core_regs+0x20>
 8001106:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800110a:	f000 fc61 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	06db      	lsls	r3, r3, #27
 8001112:	d4eb      	bmi.n	80010ec <restore_non_core_regs+0x24>
 8001114:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800111c:	f000 bc9c 	b.w	8001a58 <__gnu_Unwind_Restore_WMMXC>

08001120 <__gnu_unwind_24bit.constprop.0>:
 8001120:	2009      	movs	r0, #9
 8001122:	4770      	bx	lr

08001124 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001124:	4603      	mov	r3, r0
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	b100      	cbz	r0, 800112c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800112a:	4418      	add	r0, r3
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_DebugHook>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <unwind_phase2>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	4604      	mov	r4, r0
 8001138:	460e      	mov	r6, r1
 800113a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff79 	bl	8001034 <get_eit_entry>
 8001142:	4605      	mov	r5, r0
 8001144:	b988      	cbnz	r0, 800116a <unwind_phase2+0x36>
 8001146:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001148:	6162      	str	r2, [r4, #20]
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	4632      	mov	r2, r6
 800114e:	4621      	mov	r1, r4
 8001150:	2001      	movs	r0, #1
 8001152:	4798      	blx	r3
 8001154:	2808      	cmp	r0, #8
 8001156:	d0f0      	beq.n	800113a <unwind_phase2+0x6>
 8001158:	2807      	cmp	r0, #7
 800115a:	d106      	bne.n	800116a <unwind_phase2+0x36>
 800115c:	4628      	mov	r0, r5
 800115e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001160:	f7ff ffe6 	bl	8001130 <_Unwind_DebugHook>
 8001164:	1d30      	adds	r0, r6, #4
 8001166:	f000 fc0f 	bl	8001988 <__restore_core_regs>
 800116a:	f013 fb7d 	bl	8014868 <abort>
 800116e:	bf00      	nop

08001170 <unwind_phase2_forced>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	1d0d      	adds	r5, r1, #4
 8001176:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800117a:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800117e:	4607      	mov	r7, r0
 8001180:	4614      	mov	r4, r2
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001188:	f10d 0c0c 	add.w	ip, sp, #12
 800118c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a0:	ae02      	add	r6, sp, #8
 80011a2:	f04f 0e00 	mov.w	lr, #0
 80011a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011aa:	f8c6 e000 	str.w	lr, [r6]
 80011ae:	e020      	b.n	80011f2 <unwind_phase2_forced+0x82>
 80011b0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011b8:	4631      	mov	r1, r6
 80011ba:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011bc:	f014 fa79 	bl	80156b2 <memcpy>
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80011c4:	4639      	mov	r1, r7
 80011c6:	4650      	mov	r0, sl
 80011c8:	4798      	blx	r3
 80011ca:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80011cc:	6473      	str	r3, [r6, #68]	@ 0x44
 80011ce:	4621      	mov	r1, r4
 80011d0:	e9cd 6900 	strd	r6, r9, [sp]
 80011d4:	4605      	mov	r5, r0
 80011d6:	463b      	mov	r3, r7
 80011d8:	463a      	mov	r2, r7
 80011da:	2001      	movs	r0, #1
 80011dc:	47c0      	blx	r8
 80011de:	4604      	mov	r4, r0
 80011e0:	bb18      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 80011e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011e6:	a97a      	add	r1, sp, #488	@ 0x1e8
 80011e8:	4630      	mov	r0, r6
 80011ea:	f014 fa62 	bl	80156b2 <memcpy>
 80011ee:	2d08      	cmp	r5, #8
 80011f0:	d119      	bne.n	8001226 <unwind_phase2_forced+0xb6>
 80011f2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011f4:	4638      	mov	r0, r7
 80011f6:	f7ff ff1d 	bl	8001034 <get_eit_entry>
 80011fa:	3409      	adds	r4, #9
 80011fc:	fa5f fa84 	uxtb.w	sl, r4
 8001200:	4605      	mov	r5, r0
 8001202:	2800      	cmp	r0, #0
 8001204:	d0d4      	beq.n	80011b0 <unwind_phase2_forced+0x40>
 8001206:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001208:	6473      	str	r3, [r6, #68]	@ 0x44
 800120a:	463a      	mov	r2, r7
 800120c:	e9cd 6900 	strd	r6, r9, [sp]
 8001210:	463b      	mov	r3, r7
 8001212:	f04a 0110 	orr.w	r1, sl, #16
 8001216:	2001      	movs	r0, #1
 8001218:	47c0      	blx	r8
 800121a:	b930      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 800121c:	4628      	mov	r0, r5
 800121e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	2d07      	cmp	r5, #7
 8001228:	d005      	beq.n	8001236 <unwind_phase2_forced+0xc6>
 800122a:	2509      	movs	r5, #9
 800122c:	4628      	mov	r0, r5
 800122e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	4620      	mov	r0, r4
 8001238:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800123a:	f7ff ff79 	bl	8001130 <_Unwind_DebugHook>
 800123e:	a803      	add	r0, sp, #12
 8001240:	f000 fba2 	bl	8001988 <__restore_core_regs>

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800124c:	640b      	str	r3, [r1, #64]	@ 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	@ 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed1 	bl	8001034 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	@ 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff13 	bl	80010c8 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff43 	bl	8001134 <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e758      	b.n	8001170 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	@ 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff26 	bl	8001134 <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80012ec:	f7ff ff20 	bl	8001130 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb49 	bl	8001988 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3a 	bl	8001170 <unwind_phase2_forced>
 80012fc:	f013 fab4 	bl	8014868 <abort>
 8001300:	f013 fab2 	bl	8014868 <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800130a:	640a      	str	r2, [r1, #64]	@ 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e72f      	b.n	8001170 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d010      	beq.n	800134a <_Unwind_VRS_Get+0x26>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b983      	cbnz	r3, 800134e <_Unwind_VRS_Get+0x2a>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80e      	bhi.n	800134e <_Unwind_VRS_Get+0x2a>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf8c      	ite	hi
 8001344:	2002      	movhi	r0, #2
 8001346:	2001      	movls	r0, #1
 8001348:	4770      	bx	lr
 800134a:	4608      	mov	r0, r1
 800134c:	4770      	bx	lr
 800134e:	2002      	movs	r0, #2
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d010      	beq.n	8001396 <_Unwind_VRS_Set+0x26>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b983      	cbnz	r3, 800139a <_Unwind_VRS_Set+0x2a>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80e      	bhi.n	800139a <_Unwind_VRS_Set+0x2a>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf8c      	ite	hi
 8001390:	2002      	movhi	r0, #2
 8001392:	2001      	movls	r0, #1
 8001394:	4770      	bx	lr
 8001396:	4608      	mov	r0, r1
 8001398:	4770      	bx	lr
 800139a:	2002      	movs	r0, #2
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	@ 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	@ 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	@ 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0a 	bl	8001034 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	@ 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	@ 0x58
 8001430:	f7ff fe4a 	bl	80010c8 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	4693      	mov	fp, r2
 8001442:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001444:	b089      	sub	sp, #36	@ 0x24
 8001446:	460d      	mov	r5, r1
 8001448:	f852 1b04 	ldr.w	r1, [r2], #4
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	f000 0c03 	and.w	ip, r0, #3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d079      	beq.n	800154a <__gnu_unwind_pr_common+0x10e>
 8001456:	0c0c      	lsrs	r4, r1, #16
 8001458:	f88d 401d 	strb.w	r4, [sp, #29]
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	b2e4      	uxtb	r4, r4
 8001460:	9105      	str	r1, [sp, #20]
 8001462:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001466:	2102      	movs	r1, #2
 8001468:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800146a:	f88d 101c 	strb.w	r1, [sp, #28]
 800146e:	f1bc 0f02 	cmp.w	ip, #2
 8001472:	bf08      	it	eq
 8001474:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001476:	f017 0701 	ands.w	r7, r7, #1
 800147a:	d00c      	beq.n	8001496 <__gnu_unwind_pr_common+0x5a>
 800147c:	a905      	add	r1, sp, #20
 800147e:	4658      	mov	r0, fp
 8001480:	f000 fb84 	bl	8001b8c <__gnu_unwind_execute>
 8001484:	b918      	cbnz	r0, 800148e <__gnu_unwind_pr_common+0x52>
 8001486:	2008      	movs	r0, #8
 8001488:	b009      	add	sp, #36	@ 0x24
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148e:	2009      	movs	r0, #9
 8001490:	b009      	add	sp, #36	@ 0x24
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001496:	6816      	ldr	r6, [r2, #0]
 8001498:	2e00      	cmp	r6, #0
 800149a:	d0ef      	beq.n	800147c <__gnu_unwind_pr_common+0x40>
 800149c:	f000 0108 	and.w	r1, r0, #8
 80014a0:	9101      	str	r1, [sp, #4]
 80014a2:	46b2      	mov	sl, r6
 80014a4:	9702      	str	r7, [sp, #8]
 80014a6:	4664      	mov	r4, ip
 80014a8:	4699      	mov	r9, r3
 80014aa:	f1b9 0f02 	cmp.w	r9, #2
 80014ae:	d048      	beq.n	8001542 <__gnu_unwind_pr_common+0x106>
 80014b0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014b4:	8856      	ldrh	r6, [r2, #2]
 80014b6:	f102 0804 	add.w	r8, r2, #4
 80014ba:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014bc:	f026 0301 	bic.w	r3, r6, #1
 80014c0:	210f      	movs	r1, #15
 80014c2:	4658      	mov	r0, fp
 80014c4:	189f      	adds	r7, r3, r2
 80014c6:	f7ff ff45 	bl	8001354 <_Unwind_GetGR>
 80014ca:	4287      	cmp	r7, r0
 80014cc:	d837      	bhi.n	800153e <__gnu_unwind_pr_common+0x102>
 80014ce:	f02a 0201 	bic.w	r2, sl, #1
 80014d2:	443a      	add	r2, r7
 80014d4:	4282      	cmp	r2, r0
 80014d6:	bf94      	ite	ls
 80014d8:	2200      	movls	r2, #0
 80014da:	2201      	movhi	r2, #1
 80014dc:	0073      	lsls	r3, r6, #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d047      	beq.n	800157e <__gnu_unwind_pr_common+0x142>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d031      	beq.n	8001556 <__gnu_unwind_pr_common+0x11a>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cb      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 80014f6:	b114      	cbz	r4, 80014fe <__gnu_unwind_pr_common+0xc2>
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	f040 80c9 	bne.w	8001690 <__gnu_unwind_pr_common+0x254>
 80014fe:	f108 0204 	add.w	r2, r8, #4
 8001502:	f8d2 a000 	ldr.w	sl, [r2]
 8001506:	f1ba 0f00 	cmp.w	sl, #0
 800150a:	d1ce      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150c:	a905      	add	r1, sp, #20
 800150e:	4658      	mov	r0, fp
 8001510:	9f02      	ldr	r7, [sp, #8]
 8001512:	f000 fb3b 	bl	8001b8c <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1b9      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 800151a:	2f00      	cmp	r7, #0
 800151c:	d0b3      	beq.n	8001486 <__gnu_unwind_pr_common+0x4a>
 800151e:	210f      	movs	r1, #15
 8001520:	4658      	mov	r0, fp
 8001522:	f7ff ff17 	bl	8001354 <_Unwind_GetGR>
 8001526:	210e      	movs	r1, #14
 8001528:	4602      	mov	r2, r0
 800152a:	4658      	mov	r0, fp
 800152c:	f7ff ff38 	bl	80013a0 <_Unwind_SetGR>
 8001530:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <__gnu_unwind_pr_common+0x294>)
 8001532:	210f      	movs	r1, #15
 8001534:	4658      	mov	r0, fp
 8001536:	f7ff ff33 	bl	80013a0 <_Unwind_SetGR>
 800153a:	2007      	movs	r0, #7
 800153c:	e7a8      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 800153e:	2200      	movs	r2, #0
 8001540:	e7cc      	b.n	80014dc <__gnu_unwind_pr_common+0xa0>
 8001542:	6856      	ldr	r6, [r2, #4]
 8001544:	f102 0808 	add.w	r8, r2, #8
 8001548:	e7b7      	b.n	80014ba <__gnu_unwind_pr_common+0x7e>
 800154a:	0209      	lsls	r1, r1, #8
 800154c:	9105      	str	r1, [sp, #20]
 800154e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001552:	2103      	movs	r1, #3
 8001554:	e788      	b.n	8001468 <__gnu_unwind_pr_common+0x2c>
 8001556:	f8d8 6000 	ldr.w	r6, [r8]
 800155a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800155e:	2c00      	cmp	r4, #0
 8001560:	d144      	bne.n	80015ec <__gnu_unwind_pr_common+0x1b0>
 8001562:	b122      	cbz	r2, 800156e <__gnu_unwind_pr_common+0x132>
 8001564:	9a01      	ldr	r2, [sp, #4]
 8001566:	2a00      	cmp	r2, #0
 8001568:	d05a      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d058      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156e:	2e00      	cmp	r6, #0
 8001570:	da01      	bge.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001572:	f108 0804 	add.w	r8, r8, #4
 8001576:	3301      	adds	r3, #1
 8001578:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 800157c:	e7c1      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 800157e:	b9ec      	cbnz	r4, 80015bc <__gnu_unwind_pr_common+0x180>
 8001580:	b1ca      	cbz	r2, 80015b6 <__gnu_unwind_pr_common+0x17a>
 8001582:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001586:	f8d8 2000 	ldr.w	r2, [r8]
 800158a:	1c99      	adds	r1, r3, #2
 800158c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001590:	f43f af7d 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 8001594:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001598:	3301      	adds	r3, #1
 800159a:	9104      	str	r1, [sp, #16]
 800159c:	f000 808b 	beq.w	80016b6 <__gnu_unwind_pr_common+0x27a>
 80015a0:	f108 0004 	add.w	r0, r8, #4
 80015a4:	f7ff fdbe 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015a8:	ab04      	add	r3, sp, #16
 80015aa:	4601      	mov	r1, r0
 80015ac:	4628      	mov	r0, r5
 80015ae:	f010 fd5b 	bl	8012068 <__cxa_type_match>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d157      	bne.n	8001666 <__gnu_unwind_pr_common+0x22a>
 80015b6:	f108 0208 	add.w	r2, r8, #8
 80015ba:	e7a2      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80015bc:	210d      	movs	r1, #13
 80015be:	4658      	mov	r0, fp
 80015c0:	f7ff fec8 	bl	8001354 <_Unwind_GetGR>
 80015c4:	6a2b      	ldr	r3, [r5, #32]
 80015c6:	4283      	cmp	r3, r0
 80015c8:	d1f5      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015cc:	4598      	cmp	r8, r3
 80015ce:	d1f2      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7ff fcdf 	bl	8000f94 <selfrel_offset31>
 80015d6:	210f      	movs	r1, #15
 80015d8:	4602      	mov	r2, r0
 80015da:	4658      	mov	r0, fp
 80015dc:	f7ff fee0 	bl	80013a0 <_Unwind_SetGR>
 80015e0:	462a      	mov	r2, r5
 80015e2:	2100      	movs	r1, #0
 80015e4:	4658      	mov	r0, fp
 80015e6:	f7ff fedb 	bl	80013a0 <_Unwind_SetGR>
 80015ea:	e7a6      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80015ec:	210d      	movs	r1, #13
 80015ee:	4658      	mov	r0, fp
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	f7ff feaf 	bl	8001354 <_Unwind_GetGR>
 80015f6:	6a2a      	ldr	r2, [r5, #32]
 80015f8:	9b03      	ldr	r3, [sp, #12]
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d1b7      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 80015fe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001600:	4590      	cmp	r8, r2
 8001602:	d1b4      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 8001604:	2700      	movs	r7, #0
 8001606:	2204      	movs	r2, #4
 8001608:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800160c:	4442      	add	r2, r8
 800160e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001610:	636a      	str	r2, [r5, #52]	@ 0x34
 8001612:	f8d8 2000 	ldr.w	r2, [r8]
 8001616:	42ba      	cmp	r2, r7
 8001618:	db55      	blt.n	80016c6 <__gnu_unwind_pr_common+0x28a>
 800161a:	2201      	movs	r2, #1
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	e7aa      	b.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001620:	9403      	str	r4, [sp, #12]
 8001622:	f108 0a04 	add.w	sl, r8, #4
 8001626:	2600      	movs	r6, #0
 8001628:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800162c:	461c      	mov	r4, r3
 800162e:	e00d      	b.n	800164c <__gnu_unwind_pr_common+0x210>
 8001630:	4650      	mov	r0, sl
 8001632:	9704      	str	r7, [sp, #16]
 8001634:	f7ff fd76 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001638:	2200      	movs	r2, #0
 800163a:	4601      	mov	r1, r0
 800163c:	ab04      	add	r3, sp, #16
 800163e:	4628      	mov	r0, r5
 8001640:	3601      	adds	r6, #1
 8001642:	f10a 0a04 	add.w	sl, sl, #4
 8001646:	f010 fd0f 	bl	8012068 <__cxa_type_match>
 800164a:	b9e0      	cbnz	r0, 8001686 <__gnu_unwind_pr_common+0x24a>
 800164c:	42a6      	cmp	r6, r4
 800164e:	d1ef      	bne.n	8001630 <__gnu_unwind_pr_common+0x1f4>
 8001650:	210d      	movs	r1, #13
 8001652:	4658      	mov	r0, fp
 8001654:	f7ff fe7e 	bl	8001354 <_Unwind_GetGR>
 8001658:	9b04      	ldr	r3, [sp, #16]
 800165a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800165e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8001662:	2006      	movs	r0, #6
 8001664:	e714      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001666:	4604      	mov	r4, r0
 8001668:	210d      	movs	r1, #13
 800166a:	4658      	mov	r0, fp
 800166c:	f7ff fe72 	bl	8001354 <_Unwind_GetGR>
 8001670:	9e04      	ldr	r6, [sp, #16]
 8001672:	6228      	str	r0, [r5, #32]
 8001674:	2c02      	cmp	r4, #2
 8001676:	bf04      	itt	eq
 8001678:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 800167a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800167e:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001682:	2006      	movs	r0, #6
 8001684:	e704      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001686:	4623      	mov	r3, r4
 8001688:	f8d8 6000 	ldr.w	r6, [r8]
 800168c:	9c03      	ldr	r4, [sp, #12]
 800168e:	e76e      	b.n	800156e <__gnu_unwind_pr_common+0x132>
 8001690:	4640      	mov	r0, r8
 8001692:	f7ff fc7f 	bl	8000f94 <selfrel_offset31>
 8001696:	f108 0204 	add.w	r2, r8, #4
 800169a:	4604      	mov	r4, r0
 800169c:	63aa      	str	r2, [r5, #56]	@ 0x38
 800169e:	4628      	mov	r0, r5
 80016a0:	f010 fd40 	bl	8012124 <__cxa_begin_cleanup>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	f43f aef2 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 80016aa:	4622      	mov	r2, r4
 80016ac:	210f      	movs	r1, #15
 80016ae:	4658      	mov	r0, fp
 80016b0:	f7ff fe76 	bl	80013a0 <_Unwind_SetGR>
 80016b4:	e741      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80016b6:	460c      	mov	r4, r1
 80016b8:	4658      	mov	r0, fp
 80016ba:	210d      	movs	r1, #13
 80016bc:	f7ff fe4a 	bl	8001354 <_Unwind_GetGR>
 80016c0:	4626      	mov	r6, r4
 80016c2:	6228      	str	r0, [r5, #32]
 80016c4:	e7db      	b.n	800167e <__gnu_unwind_pr_common+0x242>
 80016c6:	1c58      	adds	r0, r3, #1
 80016c8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80016cc:	e781      	b.n	80015d2 <__gnu_unwind_pr_common+0x196>
 80016ce:	bf00      	nop
 80016d0:	08012893 	.word	0x08012893

080016d4 <__aeabi_unwind_cpp_pr0>:
 80016d4:	2300      	movs	r3, #0
 80016d6:	e6b1      	b.n	800143c <__gnu_unwind_pr_common>

080016d8 <__aeabi_unwind_cpp_pr1>:
 80016d8:	2301      	movs	r3, #1
 80016da:	e6af      	b.n	800143c <__gnu_unwind_pr_common>

080016dc <__aeabi_unwind_cpp_pr2>:
 80016dc:	2302      	movs	r3, #2
 80016de:	e6ad      	b.n	800143c <__gnu_unwind_pr_common>

080016e0 <_Unwind_VRS_Pop>:
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	4606      	mov	r6, r0
 80016e6:	b0c3      	sub	sp, #268	@ 0x10c
 80016e8:	4615      	mov	r5, r2
 80016ea:	461c      	mov	r4, r3
 80016ec:	2904      	cmp	r1, #4
 80016ee:	f200 80d1 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 80016f2:	e8df f001 	tbb	[pc, r1]
 80016f6:	51ac      	.short	0x51ac
 80016f8:	2acf      	.short	0x2acf
 80016fa:	03          	.byte	0x03
 80016fb:	00          	.byte	0x00
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	f040 80c9 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001702:	2a10      	cmp	r2, #16
 8001704:	f200 80c6 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001708:	6803      	ldr	r3, [r0, #0]
 800170a:	06dc      	lsls	r4, r3, #27
 800170c:	f100 80e7 	bmi.w	80018de <_Unwind_VRS_Pop+0x1fe>
 8001710:	af20      	add	r7, sp, #128	@ 0x80
 8001712:	4638      	mov	r0, r7
 8001714:	f000 f9aa 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 8001718:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800171a:	4639      	mov	r1, r7
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 0c01 	mov.w	ip, #1
 8001722:	fa0c f203 	lsl.w	r2, ip, r3
 8001726:	422a      	tst	r2, r5
 8001728:	4620      	mov	r0, r4
 800172a:	f103 0301 	add.w	r3, r3, #1
 800172e:	d003      	beq.n	8001738 <_Unwind_VRS_Pop+0x58>
 8001730:	f850 2b04 	ldr.w	r2, [r0], #4
 8001734:	600a      	str	r2, [r1, #0]
 8001736:	4604      	mov	r4, r0
 8001738:	2b04      	cmp	r3, #4
 800173a:	f101 0104 	add.w	r1, r1, #4
 800173e:	d1f0      	bne.n	8001722 <_Unwind_VRS_Pop+0x42>
 8001740:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001742:	4638      	mov	r0, r7
 8001744:	f000 f988 	bl	8001a58 <__gnu_Unwind_Restore_WMMXC>
 8001748:	e099      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800174a:	2c03      	cmp	r4, #3
 800174c:	f040 80a2 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001750:	b294      	uxth	r4, r2
 8001752:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001756:	2b10      	cmp	r3, #16
 8001758:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800175c:	f200 809a 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	071f      	lsls	r7, r3, #28
 8001764:	f100 80c3 	bmi.w	80018ee <_Unwind_VRS_Pop+0x20e>
 8001768:	af20      	add	r7, sp, #128	@ 0x80
 800176a:	4638      	mov	r0, r7
 800176c:	f000 f952 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 8001770:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001772:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001776:	b154      	cbz	r4, 800178e <_Unwind_VRS_Pop+0xae>
 8001778:	460b      	mov	r3, r1
 800177a:	1ad0      	subs	r0, r2, r3
 800177c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001780:	00e4      	lsls	r4, r4, #3
 8001782:	581d      	ldr	r5, [r3, r0]
 8001784:	f843 5b04 	str.w	r5, [r3], #4
 8001788:	428b      	cmp	r3, r1
 800178a:	d1fa      	bne.n	8001782 <_Unwind_VRS_Pop+0xa2>
 800178c:	4422      	add	r2, r4
 800178e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001790:	4638      	mov	r0, r7
 8001792:	f000 f91d 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 8001796:	e072      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001798:	2c01      	cmp	r4, #1
 800179a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800179e:	b295      	uxth	r5, r2
 80017a0:	d071      	beq.n	8001886 <_Unwind_VRS_Pop+0x1a6>
 80017a2:	2c05      	cmp	r4, #5
 80017a4:	d176      	bne.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017a6:	eb08 0905 	add.w	r9, r8, r5
 80017aa:	f1b9 0f20 	cmp.w	r9, #32
 80017ae:	d871      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017b0:	f1b8 0f0f 	cmp.w	r8, #15
 80017b4:	d872      	bhi.n	800189c <_Unwind_VRS_Pop+0x1bc>
 80017b6:	f1b9 0f10 	cmp.w	r9, #16
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	f200 809f 	bhi.w	80018fe <_Unwind_VRS_Pop+0x21e>
 80017c0:	07d9      	lsls	r1, r3, #31
 80017c2:	d508      	bpl.n	80017d6 <_Unwind_VRS_Pop+0xf6>
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	4630      	mov	r0, r6
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f840 3b48 	str.w	r3, [r0], #72
 80017d2:	f000 f8f1 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017d6:	af20      	add	r7, sp, #128	@ 0x80
 80017d8:	4638      	mov	r0, r7
 80017da:	f000 f8ed 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017de:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	f000 80b9 	beq.w	8001958 <_Unwind_VRS_Pop+0x278>
 80017e6:	006d      	lsls	r5, r5, #1
 80017e8:	1e6a      	subs	r2, r5, #1
 80017ea:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 80017ee:	2500      	movs	r5, #0
 80017f0:	3201      	adds	r2, #1
 80017f2:	3904      	subs	r1, #4
 80017f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80017f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80017fc:	f841 0f04 	str.w	r0, [r1, #4]!
 8001800:	4293      	cmp	r3, r2
 8001802:	d1f9      	bne.n	80017f8 <_Unwind_VRS_Pop+0x118>
 8001804:	2d00      	cmp	r5, #0
 8001806:	f000 80a1 	beq.w	800194c <_Unwind_VRS_Pop+0x26c>
 800180a:	4641      	mov	r1, r8
 800180c:	2910      	cmp	r1, #16
 800180e:	bf38      	it	cc
 8001810:	2110      	movcc	r1, #16
 8001812:	006b      	lsls	r3, r5, #1
 8001814:	3910      	subs	r1, #16
 8001816:	466f      	mov	r7, sp
 8001818:	3b01      	subs	r3, #1
 800181a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800181e:	3301      	adds	r3, #1
 8001820:	3904      	subs	r1, #4
 8001822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001826:	f852 0b04 	ldr.w	r0, [r2], #4
 800182a:	f841 0f04 	str.w	r0, [r1, #4]!
 800182e:	429a      	cmp	r2, r3
 8001830:	d1f9      	bne.n	8001826 <_Unwind_VRS_Pop+0x146>
 8001832:	2c01      	cmp	r4, #1
 8001834:	f000 8088 	beq.w	8001948 <_Unwind_VRS_Pop+0x268>
 8001838:	f1b8 0f0f 	cmp.w	r8, #15
 800183c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800183e:	d802      	bhi.n	8001846 <_Unwind_VRS_Pop+0x166>
 8001840:	a820      	add	r0, sp, #128	@ 0x80
 8001842:	f000 f8b5 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 8001846:	4638      	mov	r0, r7
 8001848:	f000 f8ba 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800184c:	e017      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800184e:	bb0c      	cbnz	r4, 8001894 <_Unwind_VRS_Pop+0x1b4>
 8001850:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001852:	4623      	mov	r3, r4
 8001854:	fa1f fc82 	uxth.w	ip, r2
 8001858:	2401      	movs	r4, #1
 800185a:	1d37      	adds	r7, r6, #4
 800185c:	fa04 f103 	lsl.w	r1, r4, r3
 8001860:	ea11 0f0c 	tst.w	r1, ip
 8001864:	4602      	mov	r2, r0
 8001866:	d004      	beq.n	8001872 <_Unwind_VRS_Pop+0x192>
 8001868:	f852 1b04 	ldr.w	r1, [r2], #4
 800186c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8001870:	4610      	mov	r0, r2
 8001872:	3301      	adds	r3, #1
 8001874:	2b10      	cmp	r3, #16
 8001876:	d1f1      	bne.n	800185c <_Unwind_VRS_Pop+0x17c>
 8001878:	04ac      	lsls	r4, r5, #18
 800187a:	d400      	bmi.n	800187e <_Unwind_VRS_Pop+0x19e>
 800187c:	63b0      	str	r0, [r6, #56]	@ 0x38
 800187e:	2000      	movs	r0, #0
 8001880:	b043      	add	sp, #268	@ 0x10c
 8001882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001886:	eb08 0305 	add.w	r3, r8, r5
 800188a:	2b10      	cmp	r3, #16
 800188c:	d802      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 800188e:	f1b8 0f10 	cmp.w	r8, #16
 8001892:	d114      	bne.n	80018be <_Unwind_VRS_Pop+0x1de>
 8001894:	2002      	movs	r0, #2
 8001896:	b043      	add	sp, #268	@ 0x10c
 8001898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800189c:	2d00      	cmp	r5, #0
 800189e:	d0ee      	beq.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	075a      	lsls	r2, r3, #29
 80018a4:	d45c      	bmi.n	8001960 <_Unwind_VRS_Pop+0x280>
 80018a6:	466f      	mov	r7, sp
 80018a8:	4638      	mov	r0, r7
 80018aa:	f000 f88d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ae:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018b0:	006b      	lsls	r3, r5, #1
 80018b2:	f1a8 0110 	sub.w	r1, r8, #16
 80018b6:	3b01      	subs	r3, #1
 80018b8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018bc:	e7af      	b.n	800181e <_Unwind_VRS_Pop+0x13e>
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	07da      	lsls	r2, r3, #31
 80018c2:	d459      	bmi.n	8001978 <_Unwind_VRS_Pop+0x298>
 80018c4:	af20      	add	r7, sp, #128	@ 0x80
 80018c6:	4638      	mov	r0, r7
 80018c8:	f000 f86e 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 80018cc:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	d189      	bne.n	80017e6 <_Unwind_VRS_Pop+0x106>
 80018d2:	3304      	adds	r3, #4
 80018d4:	63b3      	str	r3, [r6, #56]	@ 0x38
 80018d6:	4638      	mov	r0, r7
 80018d8:	f000 f862 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80018dc:	e7cf      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018de:	f023 0310 	bic.w	r3, r3, #16
 80018e2:	6003      	str	r3, [r0, #0]
 80018e4:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80018e8:	f000 f8c0 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 80018ec:	e710      	b.n	8001710 <_Unwind_VRS_Pop+0x30>
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	6003      	str	r3, [r0, #0]
 80018f4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 80018f8:	f000 f88c 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 80018fc:	e734      	b.n	8001768 <_Unwind_VRS_Pop+0x88>
 80018fe:	07d9      	lsls	r1, r3, #31
 8001900:	d508      	bpl.n	8001914 <_Unwind_VRS_Pop+0x234>
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f840 3b48 	str.w	r3, [r0], #72
 800190e:	f000 f853 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	0758      	lsls	r0, r3, #29
 8001916:	d506      	bpl.n	8001926 <_Unwind_VRS_Pop+0x246>
 8001918:	4630      	mov	r0, r6
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	f840 3bd0 	str.w	r3, [r0], #208
 8001922:	f000 f851 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001926:	af20      	add	r7, sp, #128	@ 0x80
 8001928:	4638      	mov	r0, r7
 800192a:	f000 f845 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 800192e:	4668      	mov	r0, sp
 8001930:	f000 f84a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001934:	f1c8 0210 	rsb	r2, r8, #16
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800193c:	f1a9 0510 	sub.w	r5, r9, #16
 8001940:	3a01      	subs	r2, #1
 8001942:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001946:	e753      	b.n	80017f0 <_Unwind_VRS_Pop+0x110>
 8001948:	af20      	add	r7, sp, #128	@ 0x80
 800194a:	e7c2      	b.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 800194c:	2c01      	cmp	r4, #1
 800194e:	d0c0      	beq.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 8001950:	f1b8 0f0f 	cmp.w	r8, #15
 8001954:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001956:	d892      	bhi.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001958:	4638      	mov	r0, r7
 800195a:	f000 f829 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 800195e:	e78e      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f840 3bd0 	str.w	r3, [r0], #208
 8001968:	466f      	mov	r7, sp
 800196a:	f000 f82d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800196e:	4638      	mov	r0, r7
 8001970:	f000 f82a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001976:	e79b      	b.n	80018b0 <_Unwind_VRS_Pop+0x1d0>
 8001978:	4630      	mov	r0, r6
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f840 3b48 	str.w	r3, [r0], #72
 8001982:	f000 f811 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 8001986:	e79d      	b.n	80018c4 <_Unwind_VRS_Pop+0x1e4>

08001988 <__restore_core_regs>:
 8001988:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800198c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001990:	469c      	mov	ip, r3
 8001992:	46a6      	mov	lr, r4
 8001994:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001998:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800199c:	46e5      	mov	sp, ip
 800199e:	bd00      	pop	{pc}

080019a0 <__gnu_Unwind_Restore_VFP>:
 80019a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Save_VFP>:
 80019a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Restore_VFP_D>:
 80019b0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <__gnu_Unwind_Save_VFP_D>:
 80019b8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Restore_WMMXD>:
 80019d0:	ecf0 0102 	ldfe	f0, [r0], #8
 80019d4:	ecf0 1102 	ldfe	f1, [r0], #8
 80019d8:	ecf0 2102 	ldfe	f2, [r0], #8
 80019dc:	ecf0 3102 	ldfe	f3, [r0], #8
 80019e0:	ecf0 4102 	ldfe	f4, [r0], #8
 80019e4:	ecf0 5102 	ldfe	f5, [r0], #8
 80019e8:	ecf0 6102 	ldfe	f6, [r0], #8
 80019ec:	ecf0 7102 	ldfe	f7, [r0], #8
 80019f0:	ecf0 8102 	ldfp	f0, [r0], #8
 80019f4:	ecf0 9102 	ldfp	f1, [r0], #8
 80019f8:	ecf0 a102 	ldfp	f2, [r0], #8
 80019fc:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a00:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a04:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a08:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a0c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <__gnu_Unwind_Save_WMMXD>:
 8001a14:	ece0 0102 	stfe	f0, [r0], #8
 8001a18:	ece0 1102 	stfe	f1, [r0], #8
 8001a1c:	ece0 2102 	stfe	f2, [r0], #8
 8001a20:	ece0 3102 	stfe	f3, [r0], #8
 8001a24:	ece0 4102 	stfe	f4, [r0], #8
 8001a28:	ece0 5102 	stfe	f5, [r0], #8
 8001a2c:	ece0 6102 	stfe	f6, [r0], #8
 8001a30:	ece0 7102 	stfe	f7, [r0], #8
 8001a34:	ece0 8102 	stfp	f0, [r0], #8
 8001a38:	ece0 9102 	stfp	f1, [r0], #8
 8001a3c:	ece0 a102 	stfp	f2, [r0], #8
 8001a40:	ece0 b102 	stfp	f3, [r0], #8
 8001a44:	ece0 c102 	stfp	f4, [r0], #8
 8001a48:	ece0 d102 	stfp	f5, [r0], #8
 8001a4c:	ece0 e102 	stfp	f6, [r0], #8
 8001a50:	ece0 f102 	stfp	f7, [r0], #8
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <__gnu_Unwind_Restore_WMMXC>:
 8001a58:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a5c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a60:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a64:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <__gnu_Unwind_Save_WMMXC>:
 8001a6c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a70:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a74:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a78:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <_Unwind_RaiseException>:
 8001a80:	46ec      	mov	ip, sp
 8001a82:	b500      	push	{lr}
 8001a84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a94:	a901      	add	r1, sp, #4
 8001a96:	f7ff fbd7 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001a9a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a9e:	b012      	add	sp, #72	@ 0x48
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <_Unwind_Resume>:
 8001aa4:	46ec      	mov	ip, sp
 8001aa6:	b500      	push	{lr}
 8001aa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ab8:	a901      	add	r1, sp, #4
 8001aba:	f7ff fc01 	bl	80012c0 <__gnu_Unwind_Resume>
 8001abe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ac2:	b012      	add	sp, #72	@ 0x48
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <_Unwind_Resume_or_Rethrow>:
 8001ac8:	46ec      	mov	ip, sp
 8001aca:	b500      	push	{lr}
 8001acc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001adc:	a901      	add	r1, sp, #4
 8001ade:	f7ff fc11 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001ae2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ae6:	b012      	add	sp, #72	@ 0x48
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <_Unwind_ForcedUnwind>:
 8001aec:	46ec      	mov	ip, sp
 8001aee:	b500      	push	{lr}
 8001af0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001af4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b00:	ab01      	add	r3, sp, #4
 8001b02:	f7ff fbd5 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b06:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b0a:	b012      	add	sp, #72	@ 0x48
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <_Unwind_Backtrace>:
 8001b10:	46ec      	mov	ip, sp
 8001b12:	b500      	push	{lr}
 8001b14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b24:	aa01      	add	r2, sp, #4
 8001b26:	f7ff fc47 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b2a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b2e:	b012      	add	sp, #72	@ 0x48
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <next_unwind_byte>:
 8001b34:	7a02      	ldrb	r2, [r0, #8]
 8001b36:	4603      	mov	r3, r0
 8001b38:	b97a      	cbnz	r2, 8001b5a <next_unwind_byte+0x26>
 8001b3a:	7a42      	ldrb	r2, [r0, #9]
 8001b3c:	b1a2      	cbz	r2, 8001b68 <next_unwind_byte+0x34>
 8001b3e:	6841      	ldr	r1, [r0, #4]
 8001b40:	3a01      	subs	r2, #1
 8001b42:	b410      	push	{r4}
 8001b44:	7242      	strb	r2, [r0, #9]
 8001b46:	6808      	ldr	r0, [r1, #0]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	1d0c      	adds	r4, r1, #4
 8001b4c:	721a      	strb	r2, [r3, #8]
 8001b4e:	0202      	lsls	r2, r0, #8
 8001b50:	605c      	str	r4, [r3, #4]
 8001b52:	0e00      	lsrs	r0, r0, #24
 8001b54:	bc10      	pop	{r4}
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	721a      	strb	r2, [r3, #8]
 8001b60:	0202      	lsls	r2, r0, #8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	0e00      	lsrs	r0, r0, #24
 8001b66:	4770      	bx	lr
 8001b68:	20b0      	movs	r0, #176	@ 0xb0
 8001b6a:	4770      	bx	lr

08001b6c <_Unwind_GetGR.constprop.0>:
 8001b6c:	b500      	push	{lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	2300      	movs	r3, #0
 8001b72:	aa03      	add	r2, sp, #12
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	220c      	movs	r2, #12
 8001b7a:	f7ff fbd3 	bl	8001324 <_Unwind_VRS_Get>
 8001b7e:	9803      	ldr	r0, [sp, #12]
 8001b80:	b005      	add	sp, #20
 8001b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b86:	bf00      	nop

08001b88 <unwind_UCB_from_context>:
 8001b88:	e7f0      	b.n	8001b6c <_Unwind_GetGR.constprop.0>
 8001b8a:	bf00      	nop

08001b8c <__gnu_unwind_execute>:
 8001b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b90:	4606      	mov	r6, r0
 8001b92:	b085      	sub	sp, #20
 8001b94:	460d      	mov	r5, r1
 8001b96:	f04f 0800 	mov.w	r8, #0
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff ffca 	bl	8001b34 <next_unwind_byte>
 8001ba0:	28b0      	cmp	r0, #176	@ 0xb0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	f000 80da 	beq.w	8001d5c <__gnu_unwind_execute+0x1d0>
 8001ba8:	0607      	lsls	r7, r0, #24
 8001baa:	d546      	bpl.n	8001c3a <__gnu_unwind_execute+0xae>
 8001bac:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bb0:	2b80      	cmp	r3, #128	@ 0x80
 8001bb2:	d05e      	beq.n	8001c72 <__gnu_unwind_execute+0xe6>
 8001bb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bb6:	d073      	beq.n	8001ca0 <__gnu_unwind_execute+0x114>
 8001bb8:	d81b      	bhi.n	8001bf2 <__gnu_unwind_execute+0x66>
 8001bba:	2b90      	cmp	r3, #144	@ 0x90
 8001bbc:	f000 809b 	beq.w	8001cf6 <__gnu_unwind_execute+0x16a>
 8001bc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bc2:	d112      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001bc4:	43c3      	mvns	r3, r0
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001bce:	411a      	asrs	r2, r3
 8001bd0:	0701      	lsls	r1, r0, #28
 8001bd2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001bd6:	d501      	bpl.n	8001bdc <__gnu_unwind_execute+0x50>
 8001bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff fd7d 	bl	80016e0 <_Unwind_VRS_Pop>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d0d7      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001bea:	2009      	movs	r0, #9
 8001bec:	b005      	add	sp, #20
 8001bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bf4:	d16d      	bne.n	8001cd2 <__gnu_unwind_execute+0x146>
 8001bf6:	28c6      	cmp	r0, #198	@ 0xc6
 8001bf8:	f000 8093 	beq.w	8001d22 <__gnu_unwind_execute+0x196>
 8001bfc:	28c7      	cmp	r0, #199	@ 0xc7
 8001bfe:	f000 80b2 	beq.w	8001d66 <__gnu_unwind_execute+0x1da>
 8001c02:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c08:	f000 80d2 	beq.w	8001db0 <__gnu_unwind_execute+0x224>
 8001c0c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c0e:	f000 80dd 	beq.w	8001dcc <__gnu_unwind_execute+0x240>
 8001c12:	28c9      	cmp	r0, #201	@ 0xc9
 8001c14:	d1e9      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c16:	4628      	mov	r0, r5
 8001c18:	f7ff ff8c 	bl	8001b34 <next_unwind_byte>
 8001c1c:	0302      	lsls	r2, r0, #12
 8001c1e:	f000 000f 	and.w	r0, r0, #15
 8001c22:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c26:	3001      	adds	r0, #1
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fd56 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d0b0      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c38:	e7d7      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c3a:	0083      	lsls	r3, r0, #2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	1d1f      	adds	r7, r3, #4
 8001c40:	f10d 090c 	add.w	r9, sp, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f8cd 9000 	str.w	r9, [sp]
 8001c4c:	220d      	movs	r2, #13
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fb68 	bl	8001324 <_Unwind_VRS_Get>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	f8cd 9000 	str.w	r9, [sp]
 8001c5a:	0660      	lsls	r0, r4, #25
 8001c5c:	bf4c      	ite	mi
 8001c5e:	1bdf      	submi	r7, r3, r7
 8001c60:	18ff      	addpl	r7, r7, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	220d      	movs	r2, #13
 8001c66:	4619      	mov	r1, r3
 8001c68:	4630      	mov	r0, r6
 8001c6a:	9703      	str	r7, [sp, #12]
 8001c6c:	f7ff fb80 	bl	8001370 <_Unwind_VRS_Set>
 8001c70:	e793      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c72:	4628      	mov	r0, r5
 8001c74:	f7ff ff5e 	bl	8001b34 <next_unwind_byte>
 8001c78:	0224      	lsls	r4, r4, #8
 8001c7a:	4320      	orrs	r0, r4
 8001c7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001c80:	d0b3      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c82:	0104      	lsls	r4, r0, #4
 8001c84:	2300      	movs	r3, #0
 8001c86:	b2a2      	uxth	r2, r4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f7ff fd28 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d1aa      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c94:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001c98:	bf18      	it	ne
 8001c9a:	f04f 0801 	movne.w	r8, #1
 8001c9e:	e77c      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001ca0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ca2:	d051      	beq.n	8001d48 <__gnu_unwind_execute+0x1bc>
 8001ca4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ca6:	f000 80ad 	beq.w	8001e04 <__gnu_unwind_execute+0x278>
 8001caa:	28b3      	cmp	r0, #179	@ 0xb3
 8001cac:	d06d      	beq.n	8001d8a <__gnu_unwind_execute+0x1fe>
 8001cae:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cb2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cb4:	d099      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cb6:	f000 0207 	and.w	r2, r0, #7
 8001cba:	3201      	adds	r2, #1
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff fd0b 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f43f af65 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cd0:	e78b      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cd2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001cd6:	2bd0      	cmp	r3, #208	@ 0xd0
 8001cd8:	d187      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cda:	f000 0207 	and.w	r2, r0, #7
 8001cde:	3201      	adds	r2, #1
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f7ff fcf9 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f43f af53 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cf4:	e779      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 030d 	and.w	r3, r0, #13
 8001cfa:	2b0d      	cmp	r3, #13
 8001cfc:	f43f af75 	beq.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d00:	af03      	add	r7, sp, #12
 8001d02:	2300      	movs	r3, #0
 8001d04:	f000 020f 	and.w	r2, r0, #15
 8001d08:	4619      	mov	r1, r3
 8001d0a:	9700      	str	r7, [sp, #0]
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7ff fb09 	bl	8001324 <_Unwind_VRS_Get>
 8001d12:	2300      	movs	r3, #0
 8001d14:	9700      	str	r7, [sp, #0]
 8001d16:	220d      	movs	r2, #13
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff fb28 	bl	8001370 <_Unwind_VRS_Set>
 8001d20:	e73b      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001d22:	4628      	mov	r0, r5
 8001d24:	f7ff ff06 	bl	8001b34 <next_unwind_byte>
 8001d28:	0302      	lsls	r2, r0, #12
 8001d2a:	f000 000f 	and.w	r0, r0, #15
 8001d2e:	3001      	adds	r0, #1
 8001d30:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d34:	2303      	movs	r3, #3
 8001d36:	4302      	orrs	r2, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff fcd0 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f43f af2a 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d46:	e750      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f7ff fef3 	bl	8001b34 <next_unwind_byte>
 8001d4e:	1e43      	subs	r3, r0, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b0e      	cmp	r3, #14
 8001d54:	4602      	mov	r2, r0
 8001d56:	f67f af41 	bls.w	8001bdc <__gnu_unwind_execute+0x50>
 8001d5a:	e746      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d5c:	f1b8 0f00 	cmp.w	r8, #0
 8001d60:	d040      	beq.n	8001de4 <__gnu_unwind_execute+0x258>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e742      	b.n	8001bec <__gnu_unwind_execute+0x60>
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fee4 	bl	8001b34 <next_unwind_byte>
 8001d6c:	1e43      	subs	r3, r0, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b0e      	cmp	r3, #14
 8001d72:	4602      	mov	r2, r0
 8001d74:	f63f af39 	bhi.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff fcaf 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af09 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d88:	e72f      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7ff fed2 	bl	8001b34 <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	3001      	adds	r0, #1
 8001d98:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4302      	orrs	r2, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff fc9c 	bl	80016e0 <_Unwind_VRS_Pop>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f43f aef6 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dae:	e71c      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001db0:	f000 020f 	and.w	r2, r0, #15
 8001db4:	3201      	adds	r2, #1
 8001db6:	2303      	movs	r3, #3
 8001db8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff fc8e 	bl	80016e0 <_Unwind_VRS_Pop>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f43f aee8 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dca:	e70e      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f7ff feb1 	bl	8001b34 <next_unwind_byte>
 8001dd2:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001dd6:	f000 030f 	and.w	r3, r0, #15
 8001dda:	3210      	adds	r2, #16
 8001ddc:	3301      	adds	r3, #1
 8001dde:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001de2:	e722      	b.n	8001c2a <__gnu_unwind_execute+0x9e>
 8001de4:	ac03      	add	r4, sp, #12
 8001de6:	4643      	mov	r3, r8
 8001de8:	4641      	mov	r1, r8
 8001dea:	220e      	movs	r2, #14
 8001dec:	9400      	str	r4, [sp, #0]
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	9400      	str	r4, [sp, #0]
 8001df6:	4643      	mov	r3, r8
 8001df8:	220f      	movs	r2, #15
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fab7 	bl	8001370 <_Unwind_VRS_Set>
 8001e02:	e7ae      	b.n	8001d62 <__gnu_unwind_execute+0x1d6>
 8001e04:	2300      	movs	r3, #0
 8001e06:	f10d 090c 	add.w	r9, sp, #12
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f8cd 9000 	str.w	r9, [sp]
 8001e12:	4630      	mov	r0, r6
 8001e14:	f7ff fa86 	bl	8001324 <_Unwind_VRS_Get>
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff fe8b 	bl	8001b34 <next_unwind_byte>
 8001e1e:	0602      	lsls	r2, r0, #24
 8001e20:	9c03      	ldr	r4, [sp, #12]
 8001e22:	f04f 0702 	mov.w	r7, #2
 8001e26:	d50b      	bpl.n	8001e40 <__gnu_unwind_execute+0x2b4>
 8001e28:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e2c:	40b8      	lsls	r0, r7
 8001e2e:	4404      	add	r4, r0
 8001e30:	4628      	mov	r0, r5
 8001e32:	9403      	str	r4, [sp, #12]
 8001e34:	f7ff fe7e 	bl	8001b34 <next_unwind_byte>
 8001e38:	0603      	lsls	r3, r0, #24
 8001e3a:	f107 0707 	add.w	r7, r7, #7
 8001e3e:	d4f3      	bmi.n	8001e28 <__gnu_unwind_execute+0x29c>
 8001e40:	fa00 f207 	lsl.w	r2, r0, r7
 8001e44:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e48:	4422      	add	r2, r4
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9203      	str	r2, [sp, #12]
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	220d      	movs	r2, #13
 8001e54:	4619      	mov	r1, r3
 8001e56:	4630      	mov	r0, r6
 8001e58:	f7ff fa8a 	bl	8001370 <_Unwind_VRS_Set>
 8001e5c:	e69d      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001e5e:	bf00      	nop

08001e60 <__gnu_unwind_frame>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	b084      	sub	sp, #16
 8001e68:	f04f 0c03 	mov.w	ip, #3
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	021c      	lsls	r4, r3, #8
 8001e70:	4608      	mov	r0, r1
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	a901      	add	r1, sp, #4
 8001e76:	9401      	str	r4, [sp, #4]
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e7e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e82:	f7ff fe83 	bl	8001b8c <__gnu_unwind_execute>
 8001e86:	b004      	add	sp, #16
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	bf00      	nop

08001e8c <_Unwind_GetRegionStart>:
 8001e8c:	b508      	push	{r3, lr}
 8001e8e:	f7ff fe7b 	bl	8001b88 <unwind_UCB_from_context>
 8001e92:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop

08001e98 <_Unwind_GetLanguageSpecificData>:
 8001e98:	b508      	push	{r3, lr}
 8001e9a:	f7ff fe75 	bl	8001b88 <unwind_UCB_from_context>
 8001e9e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ea0:	79c3      	ldrb	r3, [r0, #7]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	bf00      	nop

08001eac <__aeabi_idiv0>:
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ece:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ed8:	f00c fafa 	bl	800e4d0 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x17c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d126      	bne.n	8001f32 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f010 fc05 	bl	80126f4 <_Znaj>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e018      	b.n	8001f2a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ef8:	206c      	movs	r0, #108	@ 0x6c
 8001efa:	f010 fbea 	bl	80126d2 <_Znwj>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461c      	mov	r4, r3
 8001f02:	2501      	movs	r5, #1
 8001f04:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f12:	4620      	mov	r0, r4
 8001f14:	f000 fe4e 	bl	8002bb4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	dde3      	ble.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f30:	e054      	b.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f32:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x180>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d126      	bne.n	8001f88 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	f010 fbda 	bl	80126f4 <_Znaj>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e018      	b.n	8001f80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f4e:	206c      	movs	r0, #108	@ 0x6c
 8001f50:	f010 fbbf 	bl	80126d2 <_Znwj>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	2501      	movs	r5, #1
 8001f5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 fe95 	bl	8002c98 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	dde3      	ble.n	8001f4e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001f86:	e029      	b.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d125      	bne.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f90:	2008      	movs	r0, #8
 8001f92:	f010 fbaf 	bl	80126f4 <_Znaj>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e018      	b.n	8001fd6 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fa4:	206c      	movs	r0, #108	@ 0x6c
 8001fa6:	f010 fb94 	bl	80126d2 <_Znwj>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461c      	mov	r4, r3
 8001fae:	2501      	movs	r5, #1
 8001fb0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f000 fedc 	bl	8002d7c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	dde3      	ble.n	8001fa4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f825 	bl	8002038 <_ZNK14XNucleoIHM02A14initEv>
	        /*Do nothing*/
	    	//throw std::runtime_error("init failed");
	    }
	}
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	e017      	b.n	8002022 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x172>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ff2:	2d00      	cmp	r5, #0
 8001ff4:	d003      	beq.n	8001ffe <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14e>
 8001ff6:	216c      	movs	r1, #108	@ 0x6c
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f010 f80f 	bl	801201c <_ZdlPvj>
 8001ffe:	f010 f80f 	bl	8012020 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002002:	2d00      	cmp	r5, #0
 8002004:	d003      	beq.n	800200e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x15e>
 8002006:	216c      	movs	r1, #108	@ 0x6c
 8002008:	4620      	mov	r0, r4
 800200a:	f010 f807 	bl	801201c <_ZdlPvj>
 800200e:	f010 f807 	bl	8012020 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002012:	2d00      	cmp	r5, #0
 8002014:	d003      	beq.n	800201e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x16e>
 8002016:	216c      	movs	r1, #108	@ 0x6c
 8002018:	4620      	mov	r0, r4
 800201a:	f00f ffff 	bl	801201c <_ZdlPvj>
 800201e:	f00f ffff 	bl	8012020 <__cxa_end_cleanup>
	}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bdb0      	pop	{r4, r5, r7, pc}
 800202a:	bf00      	nop
 800202c:	200002d8 	.word	0x200002d8
 8002030:	200002d9 	.word	0x200002d9
 8002034:	200002da 	.word	0x200002da

08002038 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6998      	ldr	r0, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8b9b      	ldrh	r3, [r3, #28]
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	f00c fa40 	bl	800e4d0 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 8002050:	2001      	movs	r0, #1
 8002052:	f00b fee1 	bl	800de18 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6998      	ldr	r0, [r3, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8b9b      	ldrh	r3, [r3, #28]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f00c fa35 	bl	800e4d0 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f00b fed6 	bl	800de18 <HAL_Delay>



        return init_all_motor_drivers();
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f892 	bl	8002196 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 8002072:	4603      	mov	r3, r0
    }
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
    }
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e040      	b.n	8002124 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4608      	mov	r0, r1
 80020c4:	4798      	blx	r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d023      	beq.n	800211e <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681d      	ldr	r5, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	33cc      	adds	r3, #204	@ 0xcc
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3314      	adds	r3, #20
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4608      	mov	r0, r1
 8002114:	4798      	blx	r3
 8002116:	4603      	mov	r3, r0
 8002118:	4619      	mov	r1, r3
 800211a:	4628      	mov	r0, r5
 800211c:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b01      	cmp	r3, #1
 8002128:	ddbb      	ble.n	80020a2 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4610      	mov	r0, r2
 8002140:	4798      	blx	r3
 8002142:	4603      	mov	r3, r0
 8002144:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e01b      	b.n	8002184 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	4798      	blx	r3
 8002170:	4603      	mov	r3, r0
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	3204      	adds	r2, #4
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	3301      	adds	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	dde0      	ble.n	800214c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3310      	adds	r3, #16
    }
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bdb0      	pop	{r4, r5, r7, pc}

08002196 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e022      	b.n	80021ea <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3308      	adds	r3, #8
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	3102      	adds	r1, #2
 80021c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4798      	blx	r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e006      	b.n	80021f2 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	ddd9      	ble.n	80021a4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 80021f0:	2301      	movs	r3, #1

    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af04      	add	r7, sp, #16
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2):
    index_to_enum{back_right, back_left, front_left, front_right}, //Wiring dependant
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a4a      	ldr	r2, [pc, #296]	@ (8002338 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x13c>)
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	615a      	str	r2, [r3, #20]
    motor_direction_inverter{1.0, -1.0, 1.0, -1.0}
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a49      	ldr	r2, [pc, #292]	@ (800233c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x140>)
 8002216:	f103 0418 	add.w	r4, r3, #24
 800221a:	4613      	mov	r3, r2
 800221c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a46      	ldr	r2, [pc, #280]	@ (8002340 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x144>)
 8002226:	332c      	adds	r3, #44	@ 0x2c
 8002228:	4611      	mov	r1, r2
 800222a:	22b0      	movs	r2, #176	@ 0xb0
 800222c:	4618      	mov	r0, r3
 800222e:	f013 fa40 	bl	80156b2 <memcpy>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a42      	ldr	r2, [pc, #264]	@ (8002340 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x144>)
 8002236:	33dc      	adds	r3, #220	@ 0xdc
 8002238:	4611      	mov	r1, r2
 800223a:	22b0      	movs	r2, #176	@ 0xb0
 800223c:	4618      	mov	r0, r3
 800223e:	f013 fa38 	bl	80156b2 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800224e:	605a      	str	r2, [r3, #4]

  shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002250:	2020      	movs	r0, #32
 8002252:	f010 fa3e 	bl	80126d2 <_Znwj>
 8002256:	4603      	mov	r3, r0
 8002258:	461c      	mov	r4, r3
 800225a:	2501      	movs	r5, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002268:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800226a:	9303      	str	r3, [sp, #12]
 800226c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4620      	mov	r0, r4
 800227c:	f7ff fe18 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609c      	str	r4, [r3, #8]
  shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002284:	2020      	movs	r0, #32
 8002286:	f010 fa24 	bl	80126d2 <_Znwj>
 800228a:	4603      	mov	r3, r0
 800228c:	461c      	mov	r4, r3
 800228e:	2501      	movs	r5, #1
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 800229c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800229e:	9303      	str	r3, [sp, #12]
 80022a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff fdfe 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	60dc      	str	r4, [r3, #12]
  abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fedd 	bl	800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022c2:	6178      	str	r0, [r7, #20]
  abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fed7 	bl	800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022ce:	6138      	str	r0, [r7, #16]
  moteurs = new abstractL6470*[NMOTEURS];
 80022d0:	2010      	movs	r0, #16
 80022d2:	f010 fa0f 	bl	80126f4 <_Znaj>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	611a      	str	r2, [r3, #16]



  moteurs[front_left] = moteurs_shield_2[0]; //Wiring dependant
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	601a      	str	r2, [r3, #0]
  moteurs[front_right] = moteurs_shield_2[1]; //Wiring dependant
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	3304      	adds	r3, #4
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	6852      	ldr	r2, [r2, #4]
 80022f2:	601a      	str	r2, [r3, #0]
  moteurs[back_left] = moteurs_shield_1[1];  //Wiring dependant
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	3308      	adds	r3, #8
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6852      	ldr	r2, [r2, #4]
 80022fe:	601a      	str	r2, [r3, #0]
  moteurs[back_right] = moteurs_shield_1[0]; //Wiring dependant
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	330c      	adds	r3, #12
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	601a      	str	r2, [r3, #0]
  // shield_2->perform_prepared_actions();
  // HAL_Delay(4000);
  // motors_stop_hard();


}
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	e00f      	b.n	8002330 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x134>
  shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002310:	2d00      	cmp	r5, #0
 8002312:	d003      	beq.n	800231c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x120>
 8002314:	2120      	movs	r1, #32
 8002316:	4620      	mov	r0, r4
 8002318:	f00f fe80 	bl	801201c <_ZdlPvj>
 800231c:	f00f fe80 	bl	8012020 <__cxa_end_cleanup>
  shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002320:	2d00      	cmp	r5, #0
 8002322:	d003      	beq.n	800232c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x130>
 8002324:	2120      	movs	r1, #32
 8002326:	4620      	mov	r0, r4
 8002328:	f00f fe78 	bl	801201c <_ZdlPvj>
 800232c:	f00f fe78 	bl	8012020 <__cxa_end_cleanup>
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bdb0      	pop	{r4, r5, r7, pc}
 8002338:	08017548 	.word	0x08017548
 800233c:	0801754c 	.word	0x0801754c
 8002340:	0801755c 	.word	0x0801755c

08002344 <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 8002350:	edd7 7a00 	vldr	s15, [r7]
 8002354:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002370 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 8002358:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800235c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	3d00adfd 	.word	0x3d00adfd

08002374 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b094      	sub	sp, #80	@ 0x50
 8002378:	af00      	add	r7, sp, #0
 800237a:	6178      	str	r0, [r7, #20]
 800237c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002380:	edc7 0a03 	vstr	s1, [r7, #12]
 8002384:	ed87 1a02 	vstr	s2, [r7, #8]
 8002388:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 800238c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	f107 0210 	add.w	r2, r7, #16
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fd5f 	bl	8002e60 <_ZSt3minIfERKT_S2_S2_>
 80023a2:	4603      	mov	r3, r0
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 80023a8:	4b86      	ldr	r3, [pc, #536]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	f107 0210 	add.w	r2, r7, #16
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fd6b 	bl	8002e92 <_ZSt3maxIfERKT_S2_S2_>
 80023bc:	4603      	mov	r3, r0
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 80023c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c8:	f107 020c 	add.w	r2, r7, #12
 80023cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fd44 	bl	8002e60 <_ZSt3minIfERKT_S2_S2_>
 80023d8:	4603      	mov	r3, r0
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 80023de:	4b79      	ldr	r3, [pc, #484]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e2:	f107 020c 	add.w	r2, r7, #12
 80023e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fd50 	bl	8002e92 <_ZSt3maxIfERKT_S2_S2_>
 80023f2:	4603      	mov	r3, r0
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 80023f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023fe:	f107 0208 	add.w	r2, r7, #8
 8002402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fd29 	bl	8002e60 <_ZSt3minIfERKT_S2_S2_>
 800240e:	4603      	mov	r3, r0
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 8002414:	4b6b      	ldr	r3, [pc, #428]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
 8002418:	f107 0208 	add.w	r2, r7, #8
 800241c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fd35 	bl	8002e92 <_ZSt3maxIfERKT_S2_S2_>
 8002428:	4603      	mov	r3, r0
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 800242e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
 8002434:	1d3a      	adds	r2, r7, #4
 8002436:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fd0f 	bl	8002e60 <_ZSt3minIfERKT_S2_S2_>
 8002442:	4603      	mov	r3, r0
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 8002448:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800244c:	1d3a      	adds	r2, r7, #4
 800244e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fd1c 	bl	8002e92 <_ZSt3maxIfERKT_S2_S2_>
 800245a:	4603      	mov	r3, r0
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs droits/gauches car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL*motor_direction_inverter[front_left] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	ed93 7a06 	vldr	s14, [r3, #24]
 8002466:	edd7 7a04 	vldr	s15, [r7, #16]
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	db01      	blt.n	800247c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x108>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x10a>
 800247c:	2300      	movs	r3, #0
 800247e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR*motor_direction_inverter[front_right] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	ed93 7a07 	vldr	s14, [r3, #28]
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	db01      	blt.n	800249e <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x12a>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x12c>
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL*motor_direction_inverter[back_left] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	ed93 7a08 	vldr	s14, [r3, #32]
 80024aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	db01      	blt.n	80024c0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x14c>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x14e>
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR*motor_direction_inverter[back_right] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80024cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	db01      	blt.n	80024e2 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x16e>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x170>
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 80024e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002504:	ee17 3a90 	vmov	r3, s15
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 800250a:	edd7 7a03 	vldr	s15, [r7, #12]
 800250e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002526:	ee17 3a90 	vmov	r3, s15
 800252a:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 800252c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002530:	eeb0 7ae7 	vabs.f32	s14, s15
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002548:	ee17 3a90 	vmov	r3, s15
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 800254e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002552:	eeb0 7ae7 	vabs.f32	s14, s15
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256a:	ee17 3a90 	vmov	r3, s15
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 8002570:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002574:	2300      	movs	r3, #0
 8002576:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f000 f825 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 800257e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002582:	2301      	movs	r3, #1
 8002584:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f000 f81e 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 800258c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002590:	2302      	movs	r3, #2
 8002592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f000 f817 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 800259a:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800259e:	2303      	movs	r3, #3
 80025a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f000 f810 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd71 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fd6c 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 80025bc:	bf00      	nop
 80025be:	3750      	adds	r7, #80	@ 0x50
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	bf800000 	.word	0xbf800000

080025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	460b      	mov	r3, r1
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	4613      	mov	r3, r2
 80025dc:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	33fc      	adds	r3, #252	@ 0xfc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	79f9      	ldrb	r1, [r7, #7]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 8002610:	e011      	b.n	8002636 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4608      	mov	r0, r1
 8002634:	4798      	blx	r3
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>:
  * @param  vitesse_absolue_FR vitesse du moteur Avant droit
  * @param  vitesse_absolue_BL vitesse du moteur Arriere gauche
  * @param  vitesse_absolue_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_absolues(float vitesse_absolue_FL, float vitesse_absolue_FR, float vitesse_absolue_BL, float vitesse_absolue_BR )
{
 800263e:	b580      	push	{r7, lr}
 8002640:	ed2d 8b04 	vpush	{d8-d9}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	6178      	str	r0, [r7, #20]
 800264a:	ed87 0a04 	vstr	s0, [r7, #16]
 800264e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002652:	ed87 1a02 	vstr	s2, [r7, #8]
 8002656:	edc7 1a01 	vstr	s3, [r7, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800265a:	ed97 0a04 	vldr	s0, [r7, #16]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff fe70 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002664:	eeb0 7a40 	vmov.f32	s14, s0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002674:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002678:	ed97 0a03 	vldr	s0, [r7, #12]
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f7ff fe61 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002682:	eeb0 7a40 	vmov.f32	s14, s0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	eec7 8a27 	vdiv.f32	s17, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 8002696:	ed97 0a02 	vldr	s0, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff fe52 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026a0:	eeb0 7a40 	vmov.f32	s14, s0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b0:	ee87 9a27 	vdiv.f32	s18, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 80026b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f7ff fe43 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026be:	eef0 6a40 	vmov.f32	s13, s0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d2:	eef0 1a47 	vmov.f32	s3, s14
 80026d6:	eeb0 1a49 	vmov.f32	s2, s18
 80026da:	eef0 0a68 	vmov.f32	s1, s17
 80026de:	eeb0 0a48 	vmov.f32	s0, s16
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff fe46 	bl	8002374 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>

}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	ecbd 8b04 	vpop	{d8-d9}
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZN11BlocMoteurs16motors_stop_hardEv>:
  * Le passage a la vitesse a zero ne respecte pas les parametre de deceleration maximale du robot
  * et se realise au mieux des capacites du driver
  * (contrairement a la methode motors_stop_soft)
  */
void BlocMoteurs::motors_stop_hard()
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e014      	b.n	8002746 <_ZN11BlocMoteurs16motors_stop_hardEv+0x38>
	{
		moteurs[i]->prepare_hard_stop();
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4608      	mov	r0, r1
 800273e:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b03      	cmp	r3, #3
 800274a:	dde7      	ble.n	800271c <_ZN11BlocMoteurs16motors_stop_hardEv+0xe>
	}
    shield_1->perform_prepared_actions();
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fc9f 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc9a 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_ZN11BlocMoteurs19set_max_acc_moteursEffff>:
  * @param  acc_rad_s2_FR accéleration angulaire en rad/s^2 du moteur FR
  * @param  acc_rad_s2_BL accéleration angulaire en rad/s^2 du moteur BL
  * @param  acc_rad_s2_FR accéleration angulaire en rad/s^2 du moteur BR
  */
void BlocMoteurs::set_max_acc_moteurs(float acc_rad_s2_FL, float acc_rad_s2_FR, float acc_rad_s2_BL, float acc_rad_s2_BR)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b08c      	sub	sp, #48	@ 0x30
 8002772:	af00      	add	r7, sp, #0
 8002774:	6178      	str	r0, [r7, #20]
 8002776:	ed87 0a04 	vstr	s0, [r7, #16]
 800277a:	edc7 0a03 	vstr	s1, [r7, #12]
 800277e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002782:	edc7 1a01 	vstr	s3, [r7, #4]
unsigned int pps2[4] = {rad_to_step(acc_rad_s2_FL), rad_to_step(acc_rad_s2_FR), rad_to_step(acc_rad_s2_BL), rad_to_step(acc_rad_s2_BR)};
 8002786:	ed97 0a04 	vldr	s0, [r7, #16]
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff fdda 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002790:	eef0 7a40 	vmov.f32	s15, s0
 8002794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002798:	ee17 3a90 	vmov	r3, s15
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	ed97 0a03 	vldr	s0, [r7, #12]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff fdce 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80027a8:	eef0 7a40 	vmov.f32	s15, s0
 80027ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b0:	ee17 3a90 	vmov	r3, s15
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff fdc2 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80027c0:	eef0 7a40 	vmov.f32	s15, s0
 80027c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c8:	ee17 3a90 	vmov	r3, s15
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff fdb6 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e0:	ee17 3a90 	vmov	r3, s15
 80027e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int i = 0; i < NMOTEURS; i ++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ea:	e019      	b.n	8002820 <_ZN11BlocMoteurs19set_max_acc_moteursEffff+0xb2>
	{
		moteurs[i]->prepare_set_acceleration(pps2[i]);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	33dc      	adds	r3, #220	@ 0xdc
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	3330      	adds	r3, #48	@ 0x30
 8002810:	443b      	add	r3, r7
 8002812:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002816:	4619      	mov	r1, r3
 8002818:	4790      	blx	r2
	for( int i = 0; i < NMOTEURS; i ++)
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	3301      	adds	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002822:	2b03      	cmp	r3, #3
 8002824:	dde2      	ble.n	80027ec <_ZN11BlocMoteurs19set_max_acc_moteursEffff+0x7e>
	}
  shield_1->perform_prepared_actions();
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fc32 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
  shield_2->perform_prepared_actions();
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc2d 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 800283a:	bf00      	nop
 800283c:	3730      	adds	r7, #48	@ 0x30
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_ZN11BlocMoteurs19set_max_dec_moteursEffff>:
  * @param  dec_rad_s2_FR décéleration angulaire en rad/s^2 du moteur FR
  * @param  dec_rad_s2_BL décéleration angulaire en rad/s^2 du moteur BL
  * @param  dec_rad_s2_FR décéleration angulaire en rad/s^2 du moteur BR
  */
void BlocMoteurs::set_max_dec_moteurs(float dec_rad_s2_FL, float dec_rad_s2_FR, float dec_rad_s2_BL, float dec_rad_s2_BR)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b08c      	sub	sp, #48	@ 0x30
 8002846:	af00      	add	r7, sp, #0
 8002848:	6178      	str	r0, [r7, #20]
 800284a:	ed87 0a04 	vstr	s0, [r7, #16]
 800284e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002852:	ed87 1a02 	vstr	s2, [r7, #8]
 8002856:	edc7 1a01 	vstr	s3, [r7, #4]
unsigned int pps2[4] = {rad_to_step(dec_rad_s2_FL), rad_to_step(dec_rad_s2_FR), rad_to_step(dec_rad_s2_BL), rad_to_step(dec_rad_s2_BR)};
 800285a:	ed97 0a04 	vldr	s0, [r7, #16]
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f7ff fd70 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002864:	eef0 7a40 	vmov.f32	s15, s0
 8002868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286c:	ee17 3a90 	vmov	r3, s15
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	ed97 0a03 	vldr	s0, [r7, #12]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff fd64 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 800287c:	eef0 7a40 	vmov.f32	s15, s0
 8002880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002884:	ee17 3a90 	vmov	r3, s15
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	ed97 0a02 	vldr	s0, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff fd58 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002894:	eef0 7a40 	vmov.f32	s15, s0
 8002898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800289c:	ee17 3a90 	vmov	r3, s15
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80028a6:	6978      	ldr	r0, [r7, #20]
 80028a8:	f7ff fd4c 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80028ac:	eef0 7a40 	vmov.f32	s15, s0
 80028b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b4:	ee17 3a90 	vmov	r3, s15
 80028b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int i = 0; i < NMOTEURS; i ++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028be:	e019      	b.n	80028f4 <_ZN11BlocMoteurs19set_max_dec_moteursEffff+0xb2>
	{
		moteurs[i]->prepare_set_deceleration(pps2[i]);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	33e0      	adds	r3, #224	@ 0xe0
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	3330      	adds	r3, #48	@ 0x30
 80028e4:	443b      	add	r3, r7
 80028e6:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4790      	blx	r2
	for( int i = 0; i < NMOTEURS; i ++)
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	3301      	adds	r3, #1
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	dde2      	ble.n	80028c0 <_ZN11BlocMoteurs19set_max_dec_moteursEffff+0x7e>
	}
  shield_1->perform_prepared_actions();
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fbc8 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
  shield_2->perform_prepared_actions();
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fbc3 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 800290e:	bf00      	nop
 8002910:	3730      	adds	r7, #48	@ 0x30
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002916:	b5b0      	push	{r4, r5, r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7fd fe2f 	bl	8000584 <__aeabi_i2d>
 8002926:	4604      	mov	r4, r0
 8002928:	460d      	mov	r5, r1
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	f7fd fe2a 	bl	8000584 <__aeabi_i2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	ec43 2b11 	vmov	d1, r2, r3
 8002938:	ec45 4b10 	vmov	d0, r4, r5
 800293c:	f010 f80c 	bl	8012958 <pow>
 8002940:	eeb0 7a40 	vmov.f32	s14, s0
 8002944:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002948:	eeb0 0a47 	vmov.f32	s0, s14
 800294c:	eef0 0a67 	vmov.f32	s1, s15
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002958 <_ZN11BlocMoteurs17mesure_pas_ecouleEv>:
  *
  * @retval tableau float des 4 valeursen des pas ecoulees. Les index correspondent à l'enum motor id
  * ex : id_moteurs::front_left = 0 -> to_return[0] = nombre de pas ecoulees du moteur Avant gauche (front left)
  */
int32_t* BlocMoteurs::mesure_pas_ecoule()
{
 8002958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800295c:	b08d      	sub	sp, #52	@ 0x34
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  static uint32_t last_values[NMOTEURS] = {0,0,0,0};
  static int32_t to_return[NMOTEURS];
  
	for( int i = 0; i < NMOTEURS; i ++)
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002966:	e013      	b.n	8002990 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x38>
	{
		moteurs[i]->prepare_get_position();
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	33a0      	adds	r3, #160	@ 0xa0
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4608      	mov	r0, r1
 8002988:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 800298a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298c:	3301      	adds	r3, #1
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002992:	2b03      	cmp	r3, #3
 8002994:	dde8      	ble.n	8002968 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x10>
	}
	uint32_t* result1 = shield_1->perform_prepared_actions();
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fb7a 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 80029a0:	6238      	str	r0, [r7, #32]
	uint32_t* result2 = shield_2->perform_prepared_actions();
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fb74 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 80029ac:	61f8      	str	r0, [r7, #28]
  uint32_t results[4] = {result1[0], result1[1], result2[0], result2[1]};
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	61bb      	str	r3, [r7, #24]
	
  for( int i = 0; i < NMOTEURS; i ++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ca:	e0a2      	b.n	8002b12 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1ba>
	{
		int32_t diff = results[i] - last_values[i] ;
 80029cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3330      	adds	r3, #48	@ 0x30
 80029d2:	443b      	add	r3, r7
 80029d4:	f853 2c24 	ldr.w	r2, [r3, #-36]
 80029d8:	4953      	ldr	r1, [pc, #332]	@ (8002b28 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d0>)
 80029da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if( diff > std::pow(2,21)-1)
 80029e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029e6:	f7fd fdcd 	bl	8000584 <__aeabi_i2d>
 80029ea:	4680      	mov	r8, r0
 80029ec:	4689      	mov	r9, r1
 80029ee:	2115      	movs	r1, #21
 80029f0:	2002      	movs	r0, #2
 80029f2:	f7ff ff90 	bl	8002916 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029f6:	ec51 0b10 	vmov	r0, r1, d0
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	4b4b      	ldr	r3, [pc, #300]	@ (8002b2c <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d4>)
 8002a00:	f7fd fc72 	bl	80002e8 <__aeabi_dsub>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	2101      	movs	r1, #1
 8002a0a:	460e      	mov	r6, r1
 8002a0c:	4640      	mov	r0, r8
 8002a0e:	4649      	mov	r1, r9
 8002a10:	f7fe f8b2 	bl	8000b78 <__aeabi_dcmpgt>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0xc6>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	461e      	mov	r6, r3
 8002a1e:	b2f3      	uxtb	r3, r6
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0xf8>
		{
		  diff-=std::pow(2,22);
 8002a24:	2116      	movs	r1, #22
 8002a26:	2002      	movs	r0, #2
 8002a28:	f7ff ff75 	bl	8002916 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a2c:	ec59 8b10 	vmov	r8, r9, d0
 8002a30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a32:	f7fd fda7 	bl	8000584 <__aeabi_i2d>
 8002a36:	4642      	mov	r2, r8
 8002a38:	464b      	mov	r3, r9
 8002a3a:	f7fd fc55 	bl	80002e8 <__aeabi_dsub>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7fe f8b7 	bl	8000bb8 <__aeabi_d2iz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4e:	e034      	b.n	8002aba <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x162>

		}
		else if( diff < -std::pow(2,21) )
 8002a50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a52:	f7fd fd97 	bl	8000584 <__aeabi_i2d>
 8002a56:	4680      	mov	r8, r0
 8002a58:	4689      	mov	r9, r1
 8002a5a:	2115      	movs	r1, #21
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f7ff ff5a 	bl	8002916 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a62:	ec53 2b10 	vmov	r2, r3, d0
 8002a66:	4614      	mov	r4, r2
 8002a68:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	461e      	mov	r6, r3
 8002a70:	4622      	mov	r2, r4
 8002a72:	462b      	mov	r3, r5
 8002a74:	4640      	mov	r0, r8
 8002a76:	4649      	mov	r1, r9
 8002a78:	f7fe f860 	bl	8000b3c <__aeabi_dcmplt>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x12e>
 8002a82:	2300      	movs	r3, #0
 8002a84:	461e      	mov	r6, r3
 8002a86:	b2f3      	uxtb	r3, r6
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d016      	beq.n	8002aba <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x162>
		{
		  diff+=std::pow(2,22);
 8002a8c:	2116      	movs	r1, #22
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f7ff ff41 	bl	8002916 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a94:	ec59 8b10 	vmov	r8, r9, d0
 8002a98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a9a:	f7fd fd73 	bl	8000584 <__aeabi_i2d>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4640      	mov	r0, r8
 8002aa4:	4649      	mov	r1, r9
 8002aa6:	f7fd fc21 	bl	80002ec <__adddf3>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7fe f881 	bl	8000bb8 <__aeabi_d2iz>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		to_return[index_to_enum[i]] = motor_direction_inverter[index_to_enum[i]]*( diff);
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	4413      	add	r3, r2
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	3306      	adds	r3, #6
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	ed93 7a00 	vldr	s14, [r3]
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3314      	adds	r3, #20
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aee:	ee17 1a90 	vmov	r1, s15
 8002af2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d8>)
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		last_values[i] = results[i];
 8002af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	3330      	adds	r3, #48	@ 0x30
 8002afe:	443b      	add	r3, r7
 8002b00:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8002b04:	4908      	ldr	r1, [pc, #32]	@ (8002b28 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d0>)
 8002b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for( int i = 0; i < NMOTEURS; i ++)
 8002b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0e:	3301      	adds	r3, #1
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	f77f af59 	ble.w	80029cc <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x74>
	}
  return to_return;
 8002b1a:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d8>)

}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3734      	adds	r7, #52	@ 0x34
 8002b20:	46bd      	mov	sp, r7
 8002b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b26:	bf00      	nop
 8002b28:	2000021c 	.word	0x2000021c
 8002b2c:	3ff00000 	.word	0x3ff00000
 8002b30:	2000022c 	.word	0x2000022c

08002b34 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    initShield1[1].step_sel = step_mode;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    initShield2[0].step_sel = step_mode;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    initShield2[0].step_sel = step_mode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    bool return_value = true;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	e01c      	b.n	8002ba4 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3354      	adds	r3, #84	@ 0x54
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4798      	blx	r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f083 0301 	eor.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	dddf      	ble.n	8002b6a <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]

}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f009 fc54 	bl	800c474 <_ZN13abstractL6470C1Ev>
 8002bcc:	4a27      	ldr	r2, [pc, #156]	@ (8002c6c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	819a      	strh	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8b3a      	ldrh	r2, [r7, #24]
 8002be8:	829a      	strh	r2, [r3, #20]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c70 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002c00:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		//throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a1b      	ldr	r2, [pc, #108]	@ (8002c74 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002c06:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c78 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a1a      	ldr	r2, [pc, #104]	@ (8002c7c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002c12:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a1a      	ldr	r2, [pc, #104]	@ (8002c80 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002c18:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	b2d1      	uxtb	r1, r2
 8002c34:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002c36:	7011      	strb	r1, [r2, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002c42:	2220      	movs	r2, #32
 8002c44:	2100      	movs	r1, #0
 8002c46:	4811      	ldr	r0, [pc, #68]	@ (8002c8c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002c48:	f012 fc5f 	bl	801550a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	2100      	movs	r1, #0
 8002c50:	480f      	ldr	r0, [pc, #60]	@ (8002c90 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002c52:	f012 fc5a 	bl	801550a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002c56:	2208      	movs	r2, #8
 8002c58:	2100      	movs	r1, #0
 8002c5a:	480e      	ldr	r0, [pc, #56]	@ (8002c94 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002c5c:	f012 fc55 	bl	801550a <memset>
    }
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	08017afc 	.word	0x08017afc
 8002c70:	200002d8 	.word	0x200002d8
 8002c74:	08017dc0 	.word	0x08017dc0
 8002c78:	08017fb4 	.word	0x08017fb4
 8002c7c:	080180c0 	.word	0x080180c0
 8002c80:	080180d4 	.word	0x080180d4
 8002c84:	2000023c 	.word	0x2000023c
 8002c88:	2000023d 	.word	0x2000023d
 8002c8c:	20000240 	.word	0x20000240
 8002c90:	20000260 	.word	0x20000260
 8002c94:	20000268 	.word	0x20000268

08002c98 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	80fb      	strh	r3, [r7, #6]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f009 fbe2 	bl	800c474 <_ZN13abstractL6470C1Ev>
 8002cb0:	4a27      	ldr	r2, [pc, #156]	@ (8002d50 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	819a      	strh	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	611a      	str	r2, [r3, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8b3a      	ldrh	r2, [r7, #24]
 8002ccc:	829a      	strh	r2, [r3, #20]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002cda:	4b1e      	ldr	r3, [pc, #120]	@ (8002d54 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d54 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002ce4:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d58 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002cea:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a1b      	ldr	r2, [pc, #108]	@ (8002d5c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d60 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002d64 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002d10:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	b2d1      	uxtb	r1, r2
 8002d18:	4a13      	ldr	r2, [pc, #76]	@ (8002d68 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002d1a:	7011      	strb	r1, [r2, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002d20:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002d26:	2220      	movs	r2, #32
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4811      	ldr	r0, [pc, #68]	@ (8002d70 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002d2c:	f012 fbed 	bl	801550a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002d30:	2208      	movs	r2, #8
 8002d32:	2100      	movs	r1, #0
 8002d34:	480f      	ldr	r0, [pc, #60]	@ (8002d74 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002d36:	f012 fbe8 	bl	801550a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	480e      	ldr	r0, [pc, #56]	@ (8002d78 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002d40:	f012 fbe3 	bl	801550a <memset>
    }
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	08017890 	.word	0x08017890
 8002d54:	200002d9 	.word	0x200002d9
 8002d58:	080180e0 	.word	0x080180e0
 8002d5c:	080182d4 	.word	0x080182d4
 8002d60:	080183e0 	.word	0x080183e0
 8002d64:	080183f4 	.word	0x080183f4
 8002d68:	20000270 	.word	0x20000270
 8002d6c:	20000271 	.word	0x20000271
 8002d70:	20000274 	.word	0x20000274
 8002d74:	20000294 	.word	0x20000294
 8002d78:	2000029c 	.word	0x2000029c

08002d7c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	80fb      	strh	r3, [r7, #6]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f009 fb70 	bl	800c474 <_ZN13abstractL6470C1Ev>
 8002d94:	4a27      	ldr	r2, [pc, #156]	@ (8002e34 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	819a      	strh	r2, [r3, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	611a      	str	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8b3a      	ldrh	r2, [r7, #24]
 8002db0:	829a      	strh	r2, [r3, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002e38 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e38 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002dc8:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002dce:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e40 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e44 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a1a      	ldr	r2, [pc, #104]	@ (8002e48 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002de0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002df4:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	b2d1      	uxtb	r1, r2
 8002dfc:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002dfe:	7011      	strb	r1, [r2, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4811      	ldr	r0, [pc, #68]	@ (8002e54 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002e10:	f012 fb7b 	bl	801550a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002e14:	2208      	movs	r2, #8
 8002e16:	2100      	movs	r1, #0
 8002e18:	480f      	ldr	r0, [pc, #60]	@ (8002e58 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002e1a:	f012 fb76 	bl	801550a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002e1e:	2208      	movs	r2, #8
 8002e20:	2100      	movs	r1, #0
 8002e22:	480e      	ldr	r0, [pc, #56]	@ (8002e5c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002e24:	f012 fb71 	bl	801550a <memset>
    }
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	08017624 	.word	0x08017624
 8002e38:	200002da 	.word	0x200002da
 8002e3c:	08018400 	.word	0x08018400
 8002e40:	080185f4 	.word	0x080185f4
 8002e44:	08018700 	.word	0x08018700
 8002e48:	08018714 	.word	0x08018714
 8002e4c:	200002a4 	.word	0x200002a4
 8002e50:	200002a5 	.word	0x200002a5
 8002e54:	200002a8 	.word	0x200002a8
 8002e58:	200002c8 	.word	0x200002c8
 8002e5c:	200002d0 	.word	0x200002d0

08002e60 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	ed93 7a00 	vldr	s14, [r3]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	d501      	bpl.n	8002e84 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	e000      	b.n	8002e86 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002e84:	687b      	ldr	r3, [r7, #4]
    }
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	ed93 7a00 	vldr	s14, [r3]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d501      	bpl.n	8002eb6 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	e000      	b.n	8002eb8 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002eb6:	687b      	ldr	r3, [r7, #4]
    }
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f009 fadd 	bl	800c494 <_ZN13abstractL6470D1Ev>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	08017624 	.word	0x08017624

08002ee8 <_ZN5L6470I8shield_3ED0Ev>:
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffe7 	bl	8002ec4 <_ZN5L6470I8shield_3ED1Ev>
 8002ef6:	216c      	movs	r1, #108	@ 0x6c
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f00f f88f 	bl	801201c <_ZdlPvj>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_ZN5L6470I8shield_2ED1Ev>:
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	4a05      	ldr	r2, [pc, #20]	@ (8002f28 <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f009 fabb 	bl	800c494 <_ZN13abstractL6470D1Ev>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	08017890 	.word	0x08017890

08002f2c <_ZN5L6470I8shield_2ED0Ev>:
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ffe7 	bl	8002f08 <_ZN5L6470I8shield_2ED1Ev>
 8002f3a:	216c      	movs	r1, #108	@ 0x6c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f00f f86d 	bl	801201c <_ZdlPvj>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_ZN5L6470I8shield_1ED1Ev>:
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	4a05      	ldr	r2, [pc, #20]	@ (8002f6c <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f009 fa99 	bl	800c494 <_ZN13abstractL6470D1Ev>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	08017afc 	.word	0x08017afc

08002f70 <_ZN5L6470I8shield_1ED0Ev>:
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ffe7 	bl	8002f4c <_ZN5L6470I8shield_1ED1Ev>
 8002f7e:	216c      	movs	r1, #108	@ 0x6c
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f00f f84b 	bl	801201c <_ZdlPvj>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6839      	ldr	r1, [r7, #0]
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
 8002faa:	4603      	mov	r3, r0
    }
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
 8002fca:	4603      	mov	r3, r0
    }
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	4611      	mov	r1, r2
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
 8002ff2:	4603      	mov	r3, r0
    }
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800300c:	681c      	ldr	r4, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2100      	movs	r1, #0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
 800301e:	4603      	mov	r3, r0
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	47a0      	blx	r4
 8003026:	4603      	mov	r3, r0
    }
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003040:	681c      	ldr	r4, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2102      	movs	r1, #2
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
 8003052:	4603      	mov	r3, r0
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	47a0      	blx	r4
 800305a:	4603      	mov	r3, r0
    }
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}

08003064 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003074:	681c      	ldr	r4, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800307e:	681d      	ldr	r5, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2103      	movs	r1, #3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
 8003090:	4603      	mov	r3, r0
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	47a8      	blx	r5
 8003098:	eef0 7a40 	vmov.f32	s15, s0
 800309c:	eeb0 0a67 	vmov.f32	s0, s15
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	47a0      	blx	r4
 80030a4:	4603      	mov	r3, r0
    }
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bdb0      	pop	{r4, r5, r7, pc}

080030ae <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 80030ae:	b5b0      	push	{r4, r5, r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030be:	681c      	ldr	r4, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030c8:	681d      	ldr	r5, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2106      	movs	r1, #6
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
 80030da:	4603      	mov	r3, r0
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	47a8      	blx	r5
 80030e4:	eef0 7a40 	vmov.f32	s15, s0
 80030e8:	eeb0 0a67 	vmov.f32	s0, s15
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	47a0      	blx	r4
 80030f0:	4603      	mov	r3, r0
    }
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bdb0      	pop	{r4, r5, r7, pc}

080030fa <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 80030fa:	b5b0      	push	{r4, r5, r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800310a:	681c      	ldr	r4, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003114:	681d      	ldr	r5, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2107      	movs	r1, #7
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
 8003126:	4603      	mov	r3, r0
 8003128:	b29b      	uxth	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	47a8      	blx	r5
 8003130:	eef0 7a40 	vmov.f32	s15, s0
 8003134:	eeb0 0a67 	vmov.f32	s0, s15
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	47a0      	blx	r4
 800313c:	4603      	mov	r3, r0
    }
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bdb0      	pop	{r4, r5, r7, pc}

08003146 <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8003146:	b5b0      	push	{r4, r5, r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003156:	681c      	ldr	r4, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003160:	681d      	ldr	r5, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2104      	movs	r1, #4
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
 8003172:	4603      	mov	r3, r0
 8003174:	b29b      	uxth	r3, r3
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	47a8      	blx	r5
 800317c:	eef0 7a40 	vmov.f32	s15, s0
 8003180:	eeb0 0a67 	vmov.f32	s0, s15
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	47a0      	blx	r4
 8003188:	4603      	mov	r3, r0
    }
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bdb0      	pop	{r4, r5, r7, pc}

08003192 <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8003192:	b5b0      	push	{r4, r5, r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031a2:	681c      	ldr	r4, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80031ac:	681d      	ldr	r5, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2105      	movs	r1, #5
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
 80031be:	4603      	mov	r3, r0
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	47a8      	blx	r5
 80031c8:	eef0 7a40 	vmov.f32	s15, s0
 80031cc:	eeb0 0a67 	vmov.f32	s0, s15
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	47a0      	blx	r4
 80031d4:	4603      	mov	r3, r0
    }
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bdb0      	pop	{r4, r5, r7, pc}

080031de <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2104      	movs	r1, #4
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8003200:	2300      	movs	r3, #0
    }
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	b2d1      	uxtb	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	4798      	blx	r3
    }
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
    }
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003260:	681c      	ldr	r4, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2100      	movs	r1, #0
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	2102      	movs	r1, #2
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	47a0      	blx	r4
    }
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}

08003284 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003296:	681c      	ldr	r4, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6839      	ldr	r1, [r7, #0]
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	2102      	movs	r1, #2
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	47a0      	blx	r4
    }
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}

080032ba <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 80032ba:	b590      	push	{r4, r7, lr}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80032cc:	681c      	ldr	r4, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	ee07 2a90 	vmov	s15, r2
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	eeb0 0a67 	vmov.f32	s0, s15
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	2106      	movs	r1, #6
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	47a0      	blx	r4
        return true;
 80032f4:	2301      	movs	r3, #1
    }
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}

080032fe <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 80032fe:	b590      	push	{r4, r7, lr}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003310:	681c      	ldr	r4, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	ee07 2a90 	vmov	s15, r2
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	eeb0 0a67 	vmov.f32	s0, s15
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	2107      	movs	r1, #7
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	47a0      	blx	r4
        return true;
 8003338:	2301      	movs	r3, #1
    }
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}

08003342 <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8003342:	b590      	push	{r4, r7, lr}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003354:	681c      	ldr	r4, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	ee07 2a90 	vmov	s15, r2
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	eeb0 0a67 	vmov.f32	s0, s15
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
 8003372:	4603      	mov	r3, r0
 8003374:	461a      	mov	r2, r3
 8003376:	2104      	movs	r1, #4
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	47a0      	blx	r4
        return true;
 800337c:	2301      	movs	r3, #1
    }
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bd90      	pop	{r4, r7, pc}

08003386 <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 8003386:	b590      	push	{r4, r7, lr}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003398:	681c      	ldr	r4, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	ee07 2a90 	vmov	s15, r2
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	eeb0 0a67 	vmov.f32	s0, s15
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	2105      	movs	r1, #5
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	47a0      	blx	r4
        return true;
 80033c0:	2301      	movs	r3, #1
    }
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd90      	pop	{r4, r7, pc}

080033ca <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	2b07      	cmp	r3, #7
 80033da:	d901      	bls.n	80033e0 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80033dc:	2300      	movs	r3, #0
 80033de:	e00f      	b.n	8003400 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3380      	adds	r3, #128	@ 0x80
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	2115      	movs	r1, #21
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
        return true;
 80033fe:	2301      	movs	r3, #1
    }
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800341a:	681c      	ldr	r4, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	4603      	mov	r3, r0
 800342e:	4619      	mov	r1, r3
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	47a0      	blx	r4
    }
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}

0800343c <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 800343c:	b5b0      	push	{r4, r5, r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8003452:	681c      	ldr	r4, [r3, #0]
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 800345a:	2501      	movs	r5, #1
 800345c:	e000      	b.n	8003460 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 800345e:	2500      	movs	r5, #0
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	4798      	blx	r3
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	4629      	mov	r1, r5
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	47a0      	blx	r4
    }
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bdb0      	pop	{r4, r5, r7, pc}

08003482 <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
    }
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
    }
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80034be:	b5b0      	push	{r4, r5, r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	72fb      	strb	r3, [r7, #11]
 80034cc:	4613      	mov	r3, r2
 80034ce:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80034d8:	681c      	ldr	r4, [r3, #0]
 80034da:	7abb      	ldrb	r3, [r7, #10]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80034e0:	2501      	movs	r5, #1
 80034e2:	e000      	b.n	80034e6 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80034e4:	2500      	movs	r5, #0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	ee07 2a90 	vmov	s15, r2
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fa:	eeb0 0a67 	vmov.f32	s0, s15
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	4798      	blx	r3
 8003502:	4603      	mov	r3, r0
 8003504:	7af9      	ldrb	r1, [r7, #11]
 8003506:	462a      	mov	r2, r5
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	47a0      	blx	r4
    }
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bdb0      	pop	{r4, r5, r7, pc}

08003514 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 8003514:	b5b0      	push	{r4, r5, r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8003528:	681c      	ldr	r4, [r3, #0]
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8003530:	2501      	movs	r5, #1
 8003532:	e000      	b.n	8003536 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 8003534:	2500      	movs	r5, #0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2106      	movs	r1, #6
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	4629      	mov	r1, r5
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	47a0      	blx	r4
    }
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bdb0      	pop	{r4, r5, r7, pc}

08003558 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	460b      	mov	r3, r1
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800356e:	681c      	ldr	r4, [r3, #0]
 8003570:	7afb      	ldrb	r3, [r7, #11]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 8003576:	2501      	movs	r5, #1
 8003578:	e000      	b.n	800357c <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 800357a:	2500      	movs	r5, #0
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	ee07 2a90 	vmov	s15, r2
 800358c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003590:	eeb0 0a67 	vmov.f32	s0, s15
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	4798      	blx	r3
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	4629      	mov	r1, r5
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	47a0      	blx	r4
    }
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bdb0      	pop	{r4, r5, r7, pc}

080035aa <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	460b      	mov	r3, r1
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	7afa      	ldrb	r2, [r7, #11]
 80035c4:	2a01      	cmp	r2, #1
 80035c6:	d101      	bne.n	80035cc <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 80035c8:	2101      	movs	r1, #1
 80035ca:	e000      	b.n	80035ce <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 80035cc:	2100      	movs	r1, #0
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	4798      	blx	r3
    }
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
    }
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
    }
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
    }
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
    }
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 800365c:	bf00      	nop
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ef      	bne.n	800365e <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 800367e:	bf00      	nop
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3380      	adds	r3, #128	@ 0x80
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	2a01      	cmp	r2, #1
 80036ae:	d101      	bne.n	80036b4 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80036b0:	2201      	movs	r2, #1
 80036b2:	e000      	b.n	80036b6 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80036b4:	2200      	movs	r2, #0
 80036b6:	4611      	mov	r1, r2
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
    }
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
 80036d0:	4613      	mov	r3, r2
 80036d2:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	78ba      	ldrb	r2, [r7, #2]
 80036e0:	2a01      	cmp	r2, #1
 80036e2:	d101      	bne.n	80036e8 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80036e4:	2201      	movs	r2, #1
 80036e6:	e000      	b.n	80036ea <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80036e8:	2200      	movs	r2, #0
 80036ea:	78f9      	ldrb	r1, [r7, #3]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
    }
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
    }
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	4611      	mov	r1, r2
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2100      	movs	r1, #0
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2102      	movs	r1, #2
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2103      	movs	r1, #3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2203      	movs	r2, #3
 80037d6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2106      	movs	r1, #6
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2204      	movs	r2, #4
 80037fe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2107      	movs	r1, #7
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2205      	movs	r2, #5
 8003826:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2104      	movs	r1, #4
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2206      	movs	r2, #6
 800384e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2105      	movs	r1, #5
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2207      	movs	r2, #7
 8003876:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003894:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4906      	ldr	r1, [pc, #24]	@ (80038c0 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2208      	movs	r2, #8
 80038ae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200002a5 	.word	0x200002a5
 80038c0:	200002a8 	.word	0x200002a8

080038c4 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	b2d1      	uxtb	r1, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2200      	movs	r2, #0
 800392e:	2102      	movs	r1, #2
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2209      	movs	r2, #9
 8003938:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003956:	681c      	ldr	r4, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6839      	ldr	r1, [r7, #0]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	2102      	movs	r1, #2
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}

08003982 <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 8003982:	b590      	push	{r4, r7, lr}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003994:	681c      	ldr	r4, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	ee07 2a90 	vmov	s15, r2
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eeb0 0a67 	vmov.f32	s0, s15
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	2103      	movs	r1, #3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}

080039cc <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80039de:	681c      	ldr	r4, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	ee07 2a90 	vmov	s15, r2
 80039f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f4:	eeb0 0a67 	vmov.f32	s0, s15
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	2106      	movs	r1, #6
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd90      	pop	{r4, r7, pc}

08003a16 <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 8003a16:	b590      	push	{r4, r7, lr}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003a28:	681c      	ldr	r4, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	ee07 2a90 	vmov	s15, r2
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2107      	movs	r1, #7
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}

08003a60 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003a72:	681c      	ldr	r4, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	ee07 2a90 	vmov	s15, r2
 8003a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a88:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	2104      	movs	r1, #4
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd90      	pop	{r4, r7, pc}

08003aaa <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8003aaa:	b590      	push	{r4, r7, lr}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003abc:	681c      	ldr	r4, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	ee07 2a90 	vmov	s15, r2
 8003ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	2105      	movs	r1, #5
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003b06:	681c      	ldr	r4, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6839      	ldr	r1, [r7, #0]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd90      	pop	{r4, r7, pc}

08003b30 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8003b30:	b5b0      	push	{r4, r5, r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003b46:	681c      	ldr	r4, [r3, #0]
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8003b4e:	2501      	movs	r5, #1
 8003b50:	e000      	b.n	8003b54 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8003b52:	2500      	movs	r5, #0
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	4798      	blx	r3
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	4629      	mov	r1, r5
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bdb0      	pop	{r4, r5, r7, pc}

08003b7e <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8003bca:	b5b0      	push	{r4, r5, r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	72fb      	strb	r3, [r7, #11]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003be4:	681c      	ldr	r4, [r3, #0]
 8003be6:	7abb      	ldrb	r3, [r7, #10]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003bec:	2501      	movs	r5, #1
 8003bee:	e000      	b.n	8003bf2 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8003bf0:	2500      	movs	r5, #0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	ee07 2a90 	vmov	s15, r2
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	4798      	blx	r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	7af9      	ldrb	r1, [r7, #11]
 8003c12:	462a      	mov	r2, r5
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bdb0      	pop	{r4, r5, r7, pc}

08003c28 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 8003c28:	b5b0      	push	{r4, r5, r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003c3c:	681c      	ldr	r4, [r3, #0]
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8003c44:	2501      	movs	r5, #1
 8003c46:	e000      	b.n	8003c4a <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8003c48:	2500      	movs	r5, #0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2106      	movs	r1, #6
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4629      	mov	r1, r5
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bdb0      	pop	{r4, r5, r7, pc}

08003c74 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8003c74:	b5b0      	push	{r4, r5, r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003c8a:	681c      	ldr	r4, [r3, #0]
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8003c92:	2501      	movs	r5, #1
 8003c94:	e000      	b.n	8003c98 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8003c96:	2500      	movs	r5, #0
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	ee07 2a90 	vmov	s15, r2
 8003ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cac:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	4798      	blx	r3
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4629      	mov	r1, r5
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bdb0      	pop	{r4, r5, r7, pc}

08003cce <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	7afa      	ldrb	r2, [r7, #11]
 8003ce8:	2a01      	cmp	r2, #1
 8003cea:	d101      	bne.n	8003cf0 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8003cec:	2101      	movs	r1, #1
 8003cee:	e000      	b.n	8003cf2 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d98:	bf00      	nop
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	2a01      	cmp	r2, #1
 8003dba:	d101      	bne.n	8003dc0 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	e000      	b.n	8003dc2 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
 8003de4:	4613      	mov	r3, r2
 8003de6:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	78ba      	ldrb	r2, [r7, #2]
 8003df4:	2a01      	cmp	r2, #1
 8003df6:	d101      	bne.n	8003dfc <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003df8:	2201      	movs	r2, #1
 8003dfa:	e000      	b.n	8003dfe <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	78f9      	ldrb	r1, [r7, #3]
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
 8003e50:	4603      	mov	r3, r0
    }
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003e74:	b5b0      	push	{r4, r5, r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003e84:	3b01      	subs	r3, #1
 8003e86:	2b07      	cmp	r3, #7
 8003e88:	f200 80fe 	bhi.w	8004088 <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003eb5 	.word	0x08003eb5
 8003e98:	08003ee1 	.word	0x08003ee1
 8003e9c:	08003f0f 	.word	0x08003f0f
 8003ea0:	08003f53 	.word	0x08003f53
 8003ea4:	08003f99 	.word	0x08003f99
 8003ea8:	08003fdf 	.word	0x08003fdf
 8003eac:	08004025 	.word	0x08004025
 8003eb0:	0800406b 	.word	0x0800406b
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003ebc:	681c      	ldr	r4, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6a12      	ldr	r2, [r2, #32]
 8003ecc:	7b92      	ldrb	r2, [r2, #14]
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	47a0      	blx	r4
 8003edc:	4603      	mov	r3, r0
 8003ede:	e0d4      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003ee8:	681c      	ldr	r4, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6a12      	ldr	r2, [r2, #32]
 8003ef8:	3228      	adds	r2, #40	@ 0x28
 8003efa:	7b92      	ldrb	r2, [r2, #14]
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	4798      	blx	r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	47a0      	blx	r4
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	e0bd      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f16:	681c      	ldr	r4, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003f20:	681d      	ldr	r5, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6a12      	ldr	r2, [r2, #32]
 8003f30:	323c      	adds	r2, #60	@ 0x3c
 8003f32:	7b92      	ldrb	r2, [r2, #14]
 8003f34:	6839      	ldr	r1, [r7, #0]
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	47a8      	blx	r5
 8003f42:	eef0 7a40 	vmov.f32	s15, s0
 8003f46:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	47a0      	blx	r4
 8003f4e:	4603      	mov	r3, r0
 8003f50:	e09b      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f5a:	681c      	ldr	r4, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f64:	681d      	ldr	r5, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6a12      	ldr	r2, [r2, #32]
 8003f74:	3278      	adds	r2, #120	@ 0x78
 8003f76:	7b92      	ldrb	r2, [r2, #14]
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	4619      	mov	r1, r3
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	47a8      	blx	r5
 8003f88:	eef0 7a40 	vmov.f32	s15, s0
 8003f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	47a0      	blx	r4
 8003f94:	4603      	mov	r3, r0
 8003f96:	e078      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fa0:	681c      	ldr	r4, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003faa:	681d      	ldr	r5, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6a12      	ldr	r2, [r2, #32]
 8003fba:	328c      	adds	r2, #140	@ 0x8c
 8003fbc:	7b92      	ldrb	r2, [r2, #14]
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	47a8      	blx	r5
 8003fce:	eef0 7a40 	vmov.f32	s15, s0
 8003fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	47a0      	blx	r4
 8003fda:	4603      	mov	r3, r0
 8003fdc:	e055      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fe6:	681c      	ldr	r4, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003ff0:	681d      	ldr	r5, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6a12      	ldr	r2, [r2, #32]
 8004000:	3250      	adds	r2, #80	@ 0x50
 8004002:	7b92      	ldrb	r2, [r2, #14]
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
 800400a:	4603      	mov	r3, r0
 800400c:	b29b      	uxth	r3, r3
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	47a8      	blx	r5
 8004014:	eef0 7a40 	vmov.f32	s15, s0
 8004018:	eeb0 0a67 	vmov.f32	s0, s15
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	47a0      	blx	r4
 8004020:	4603      	mov	r3, r0
 8004022:	e032      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800402c:	681c      	ldr	r4, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004036:	681d      	ldr	r5, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6a12      	ldr	r2, [r2, #32]
 8004046:	3264      	adds	r2, #100	@ 0x64
 8004048:	7b92      	ldrb	r2, [r2, #14]
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
 8004050:	4603      	mov	r3, r0
 8004052:	b29b      	uxth	r3, r3
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	47a8      	blx	r5
 800405a:	eef0 7a40 	vmov.f32	s15, s0
 800405e:	eeb0 0a67 	vmov.f32	s0, s15
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	47a0      	blx	r4
 8004066:	4603      	mov	r3, r0
 8004068:	e00f      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2104      	movs	r1, #4
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8004080:	2301      	movs	r3, #1
 8004082:	e002      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8004088:	2300      	movs	r3, #0
        }
    }
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bdb0      	pop	{r4, r5, r7, pc}
 8004092:	bf00      	nop

08004094 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6898      	ldr	r0, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	899b      	ldrh	r3, [r3, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	4619      	mov	r1, r3
 80040a8:	f00a fa12 	bl	800e4d0 <HAL_GPIO_WritePin>
    }
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040c4:	d303      	bcc.n	80040ce <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 80040cc:	e000      	b.n	80040d0 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 80040ce:	683b      	ldr	r3, [r7, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db05      	blt.n	80040f8 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040f2:	da01      	bge.n	80040f8 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	e00c      	b.n	8004112 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 80040fe:	db06      	blt.n	800410e <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	da03      	bge.n	800410e <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800410c:	e001      	b.n	8004112 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 800410e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004134:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800414c <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8004138:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800413c:	eeb0 0a67 	vmov.f32	s0, s15
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	3c74242a 	.word	0x3c74242a

08004150 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800415c:	edd7 7a00 	vldr	s15, [r7]
 8004160:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004194 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8004164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416c:	d80a      	bhi.n	8004184 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800416e:	ed97 7a00 	vldr	s14, [r7]
 8004172:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004198 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8004176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800417a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417e:	ee17 3a90 	vmov	r3, s15
 8004182:	e000      	b.n	8004186 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	4674241b 	.word	0x4674241b
 8004198:	3c74242a 	.word	0x3c74242a

0800419c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ae:	d209      	bcs.n	80041c4 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80041d8 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 80041be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c2:	e001      	b.n	80041c8 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 80041c4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80041dc <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 80041c8:	eeb0 0a67 	vmov.f32	s0, s15
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	4168d4fe 	.word	0x4168d4fe
 80041dc:	00000000 	.word	0x00000000

080041e0 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 80041ec:	edd7 7a00 	vldr	s15, [r7]
 80041f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004224 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 80041f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	d80b      	bhi.n	8004216 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80041fe:	ed97 7a00 	vldr	s14, [r7]
 8004202:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004228 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8004206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800420a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800420e:	ee17 3a90 	vmov	r3, s15
 8004212:	b29b      	uxth	r3, r3
 8004214:	e000      	b.n	8004218 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	4768c671 	.word	0x4768c671
 8004228:	4168d4fe 	.word	0x4168d4fe

0800422c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8004238:	887b      	ldrh	r3, [r7, #2]
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800423e:	d209      	bcs.n	8004254 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8004240:	887b      	ldrh	r3, [r7, #2]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800424a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004268 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 800424e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004252:	e001      	b.n	8004258 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8004254:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800426c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 8004258:	eeb0 0a67 	vmov.f32	s0, s15
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	4168d4fe 	.word	0x4168d4fe
 800426c:	00000000 	.word	0x00000000

08004270 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800427c:	edd7 7a00 	vldr	s15, [r7]
 8004280:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80042b4 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8004284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428c:	d80b      	bhi.n	80042a6 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800428e:	ed97 7a00 	vldr	s14, [r7]
 8004292:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80042b8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 8004296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800429a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429e:	ee17 3a90 	vmov	r3, s15
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	e000      	b.n	80042a8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	4768c671 	.word	0x4768c671
 80042b8:	4168d4fe 	.word	0x4168d4fe

080042bc <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ce:	d209      	bcs.n	80042e4 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042da:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80042f8 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 80042de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042e2:	e001      	b.n	80042e8 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80042e4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80042fc <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 80042e8:	eeb0 0a67 	vmov.f32	s0, s15
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	4174240b 	.word	0x4174240b
 80042fc:	00000000 	.word	0x00000000

08004300 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800430c:	edd7 7a00 	vldr	s15, [r7]
 8004310:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004344 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8004314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431c:	d80b      	bhi.n	8004336 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800431e:	ed97 7a00 	vldr	s14, [r7]
 8004322:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004348 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8004326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800432a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432e:	ee17 3a90 	vmov	r3, s15
 8004332:	b29b      	uxth	r3, r3
 8004334:	e000      	b.n	8004338 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	4673e702 	.word	0x4673e702
 8004348:	4174240b 	.word	0x4174240b

0800434c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8004358:	887b      	ldrh	r3, [r7, #2]
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435e:	d209      	bcs.n	8004374 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8004360:	887b      	ldrh	r3, [r7, #2]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800436a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004388 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800436e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004372:	e001      	b.n	8004378 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004374:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800438c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8004378:	eeb0 0a67 	vmov.f32	s0, s15
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	3e742401 	.word	0x3e742401
 800438c:	00000000 	.word	0x00000000

08004390 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800439c:	edd7 7a00 	vldr	s15, [r7]
 80043a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80043d4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 80043a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ac:	d80b      	bhi.n	80043c6 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80043ae:	ed97 7a00 	vldr	s14, [r7]
 80043b2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80043d8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 80043b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043be:	ee17 3a90 	vmov	r3, s15
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	e000      	b.n	80043c8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	447414bf 	.word	0x447414bf
 80043d8:	3e742401 	.word	0x3e742401

080043dc <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 80043e8:	887b      	ldrh	r3, [r7, #2]
 80043ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ee:	d219      	bcs.n	8004424 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 80043f0:	887b      	ldrh	r3, [r7, #2]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc f8c6 	bl	8000584 <__aeabi_i2d>
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 80043fe:	f7fb ff75 	bl	80002ec <__adddf3>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4610      	mov	r0, r2
 8004408:	4619      	mov	r1, r3
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 8004410:	f7fc f922 	bl	8000658 <__aeabi_dmul>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f7fc fbf4 	bl	8000c08 <__aeabi_d2f>
 8004420:	4603      	mov	r3, r0
 8004422:	e001      	b.n	8004428 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 8004424:	f04f 0300 	mov.w	r3, #0
}
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eeb0 0a67 	vmov.f32	s0, s15
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	3fe00000 	.word	0x3fe00000
 800443c:	402e8000 	.word	0x402e8000

08004440 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800444c:	edd7 7a00 	vldr	s15, [r7]
 8004450:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800448c <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 8004454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445c:	d80f      	bhi.n	800447e <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800445e:	ed97 7a00 	vldr	s14, [r7]
 8004462:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004490 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 8004466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800446a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800446e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004476:	ee17 3a90 	vmov	r3, s15
 800447a:	b29b      	uxth	r3, r3
 800447c:	e000      	b.n	8004480 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	4673e180 	.word	0x4673e180
 8004490:	41740000 	.word	0x41740000

08004494 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 80044a0:	887b      	ldrh	r3, [r7, #2]
 80044a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044a6:	d209      	bcs.n	80044bc <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 80044a8:	887b      	ldrh	r3, [r7, #2]
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044b2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80044d0 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 80044b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ba:	e001      	b.n	80044c0 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80044bc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80044d4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 80044c0:	eeb0 0a67 	vmov.f32	s0, s15
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	3d7423f4 	.word	0x3d7423f4
 80044d4:	00000000 	.word	0x00000000

080044d8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 80044e4:	edd7 7a00 	vldr	s15, [r7]
 80044e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800451c <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 80044ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f4:	d80b      	bhi.n	800450e <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 80044f6:	ed97 7a00 	vldr	s14, [r7]
 80044fa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004520 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 80044fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004506:	ee17 3a90 	vmov	r3, s15
 800450a:	b29b      	uxth	r3, r3
 800450c:	e000      	b.n	8004510 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	44742023 	.word	0x44742023
 8004520:	3d7423f4 	.word	0x3d7423f4

08004524 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800453a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004550 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 800453e:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004542:	eeb0 0a67 	vmov.f32	s0, s15
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	3783956e 	.word	0x3783956e

08004554 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004560:	edd7 7a02 	vldr	s15, [r7, #8]
 8004564:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800459c <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 8004568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	d80c      	bhi.n	800458c <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004572:	ed97 7a02 	vldr	s14, [r7, #8]
 8004576:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80045a0 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 800457a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004582:	edc7 7a01 	vstr	s15, [r7, #4]
 8004586:	793b      	ldrb	r3, [r7, #4]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e000      	b.n	800458e <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	3b8311d9 	.word	0x3b8311d9
 80045a0:	3783956e 	.word	0x3783956e

080045a4 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ba:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80045d0 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 80045be:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80045c2:	eeb0 0a67 	vmov.f32	s0, s15
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	3783956e 	.word	0x3783956e

080045d4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80045e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045e4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800461c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 80045e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	d80c      	bhi.n	800460c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80045f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80045f6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004620 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 80045fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004602:	edc7 7a01 	vstr	s15, [r7, #4]
 8004606:	793b      	ldrb	r3, [r7, #4]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e000      	b.n	800460e <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	3b8311d9 	.word	0x3b8311d9
 8004620:	3783956e 	.word	0x3783956e

08004624 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004650 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800463e:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004642:	eeb0 0a67 	vmov.f32	s0, s15
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	3783956e 	.word	0x3783956e

08004654 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004660:	edd7 7a02 	vldr	s15, [r7, #8]
 8004664:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800469c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8004668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004670:	d80c      	bhi.n	800468c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004672:	ed97 7a02 	vldr	s14, [r7, #8]
 8004676:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80046a0 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800467a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800467e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004682:	edc7 7a01 	vstr	s15, [r7, #4]
 8004686:	793b      	ldrb	r3, [r7, #4]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e000      	b.n	800468e <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	3b8311d9 	.word	0x3b8311d9
 80046a0:	3783956e 	.word	0x3783956e

080046a4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	2b0f      	cmp	r3, #15
 80046b4:	d80a      	bhi.n	80046cc <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	3301      	adds	r3, #1
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80046e0 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 80046c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ca:	e001      	b.n	80046d0 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 80046cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80046e4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 80046d0:	eeb0 0a67 	vmov.f32	s0, s15
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	43bb8000 	.word	0x43bb8000
 80046e4:	00000000 	.word	0x00000000

080046e8 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80046f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80046f8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004784 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 80046fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	d836      	bhi.n	8004774 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 8004706:	ed97 7a02 	vldr	s14, [r7, #8]
 800470a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004788 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 800470e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004712:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8004716:	edd7 7a05 	vldr	s15, [r7, #20]
 800471a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004722:	793b      	ldrb	r3, [r7, #4]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800472e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004736:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 800473a:	edd7 7a04 	vldr	s15, [r7, #16]
 800473e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	d50a      	bpl.n	8004762 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800474c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004754:	edc7 7a01 	vstr	s15, [r7, #4]
 8004758:	793b      	ldrb	r3, [r7, #4]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e009      	b.n	8004776 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 8004762:	edd7 7a05 	vldr	s15, [r7, #20]
 8004766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476a:	edc7 7a01 	vstr	s15, [r7, #4]
 800476e:	793b      	ldrb	r3, [r7, #4]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	e000      	b.n	8004776 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	45bb8000 	.word	0x45bb8000
 8004788:	43bb8000 	.word	0x43bb8000

0800478c <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 8004798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800479c:	2b00      	cmp	r3, #0
 800479e:	db0a      	blt.n	80047b6 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	3301      	adds	r3, #1
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ac:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80047c8 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 80047b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047b4:	e001      	b.n	80047ba <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 80047b6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80047cc <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 80047ba:	eeb0 0a67 	vmov.f32	s0, s15
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	41fa0000 	.word	0x41fa0000
 80047cc:	00000000 	.word	0x00000000

080047d0 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 80047dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80047e0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800486c <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 80047e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ec:	d836      	bhi.n	800485c <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 80047ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80047f2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004870 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 80047f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047fa:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80047fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004806:	edc7 7a01 	vstr	s15, [r7, #4]
 800480a:	793b      	ldrb	r3, [r7, #4]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004816:	ed97 7a05 	vldr	s14, [r7, #20]
 800481a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8004822:	edd7 7a04 	vldr	s15, [r7, #16]
 8004826:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800482a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	d50a      	bpl.n	800484a <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8004834:	edd7 7a05 	vldr	s15, [r7, #20]
 8004838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004840:	793b      	ldrb	r3, [r7, #4]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	e009      	b.n	800485e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 800484a:	edd7 7a05 	vldr	s15, [r7, #20]
 800484e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004852:	edc7 7a01 	vstr	s15, [r7, #4]
 8004856:	793b      	ldrb	r3, [r7, #4]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e000      	b.n	800485e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	457a0000 	.word	0x457a0000
 8004870:	41fa0000 	.word	0x41fa0000

08004874 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3394      	adds	r3, #148	@ 0x94
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	edd2 7a05 	vldr	s15, [r2, #20]
 80048aa:	eeb0 0a67 	vmov.f32	s0, s15
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	4798      	blx	r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	461a      	mov	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	edd2 7a06 	vldr	s15, [r2, #24]
 80048cc:	eeb0 0a67 	vmov.f32	s0, s15
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	4798      	blx	r3
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	edd2 7a07 	vldr	s15, [r2, #28]
 80048ee:	eeb0 0a67 	vmov.f32	s0, s15
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	4798      	blx	r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	461a      	mov	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	edd2 7a08 	vldr	s15, [r2, #32]
 8004910:	eeb0 0a67 	vmov.f32	s0, s15
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	4798      	blx	r3
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8004932:	eeb0 0a67 	vmov.f32	s0, s15
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	4798      	blx	r3
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800494a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8004c1c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800494e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	ed93 7a00 	vldr	s14, [r3]
 8004958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004960:	edc7 7a01 	vstr	s15, [r7, #4]
 8004964:	793b      	ldrb	r3, [r7, #4]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004974:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004c1c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004978:	ee67 6a87 	vmul.f32	s13, s15, s14
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	ed93 7a00 	vldr	s14, [r3]
 8004982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498a:	edc7 7a01 	vstr	s15, [r7, #4]
 800498e:	793b      	ldrb	r3, [r7, #4]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800499e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8004c1c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80049a2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	ed93 7a00 	vldr	s14, [r3]
 80049ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80049b8:	793b      	ldrb	r3, [r7, #4]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80049c8:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8004c1c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80049cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ed93 7a00 	vldr	s14, [r3]
 80049d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049de:	edc7 7a01 	vstr	s15, [r7, #4]
 80049e2:	793b      	ldrb	r3, [r7, #4]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80049fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	4798      	blx	r3
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8004a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	4798      	blx	r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8004a40:	eeb0 0a67 	vmov.f32	s0, s15
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	4798      	blx	r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8004a62:	eeb0 0a67 	vmov.f32	s0, s15
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	4798      	blx	r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8004a90:	eeb0 0a67 	vmov.f32	s0, s15
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	4798      	blx	r3
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8004ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	4798      	blx	r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8004af8:	2104      	movs	r1, #4
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8004b0e:	2105      	movs	r1, #5
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8004b24:	2106      	movs	r1, #6
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8004b3a:	2107      	movs	r1, #7
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8004b50:	2108      	movs	r1, #8
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8004b66:	2109      	movs	r1, #9
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8004b7c:	210a      	movs	r1, #10
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004b92:	210b      	movs	r1, #11
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004ba8:	210c      	movs	r1, #12
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8004bbe:	210d      	movs	r1, #13
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8004bd4:	210e      	movs	r1, #14
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8004bea:	210f      	movs	r1, #15
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8004c00:	2110      	movs	r1, #16
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8004c16:	2111      	movs	r1, #17
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	e001      	b.n	8004c20 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 8004c1c:	43800000 	.word	0x43800000
 8004c20:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8004c32:	2113      	movs	r1, #19
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8004c48:	2114      	movs	r1, #20
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004c5e:	2116      	movs	r1, #22
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8004c74:	2117      	movs	r1, #23
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3354      	adds	r3, #84	@ 0x54
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8004c88:	4611      	mov	r1, r2
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	4798      	blx	r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f083 0301 	eor.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004cbe:	681c      	ldr	r4, [r3, #0]
 8004cc0:	7afa      	ldrb	r2, [r7, #11]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	2201      	movs	r2, #1
 8004cce:	490c      	ldr	r1, [pc, #48]	@ (8004d00 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a09      	ldr	r2, [pc, #36]	@ (8004d04 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004ce0:	4907      	ldr	r1, [pc, #28]	@ (8004d00 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a05      	ldr	r2, [pc, #20]	@ (8004d08 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004cf2:	4904      	ldr	r1, [pc, #16]	@ (8004d04 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	4798      	blx	r3
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd90      	pop	{r4, r7, pc}
 8004d00:	200002a8 	.word	0x200002a8
 8004d04:	200002c8 	.word	0x200002c8
 8004d08:	200002d0 	.word	0x200002d0

08004d0c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d20:	681c      	ldr	r4, [r3, #0]
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	2200      	movs	r2, #0
 8004d26:	9201      	str	r2, [sp, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	9200      	str	r2, [sp, #0]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	4917      	ldr	r1, [pc, #92]	@ (8004d8c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a14      	ldr	r2, [pc, #80]	@ (8004d90 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004d40:	4912      	ldr	r1, [pc, #72]	@ (8004d8c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a10      	ldr	r2, [pc, #64]	@ (8004d94 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004d52:	490f      	ldr	r1, [pc, #60]	@ (8004d90 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a19      	ldr	r1, [r3, #32]
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	7b9b      	ldrb	r3, [r3, #14]
 8004d6a:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	7bfa      	ldrb	r2, [r7, #15]
 8004d78:	4906      	ldr	r1, [pc, #24]	@ (8004d94 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	4798      	blx	r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8004d82:	68bb      	ldr	r3, [r7, #8]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd90      	pop	{r4, r7, pc}
 8004d8c:	200002a8 	.word	0x200002a8
 8004d90:	200002c8 	.word	0x200002c8
 8004d94:	200002d0 	.word	0x200002d0

08004d98 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	460b      	mov	r3, r1
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004dae:	681c      	ldr	r4, [r3, #0]
 8004db0:	7afa      	ldrb	r2, [r7, #11]
 8004db2:	2300      	movs	r3, #0
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	490c      	ldr	r1, [pc, #48]	@ (8004df0 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a09      	ldr	r2, [pc, #36]	@ (8004df4 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004dd0:	4907      	ldr	r1, [pc, #28]	@ (8004df0 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a05      	ldr	r2, [pc, #20]	@ (8004df8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004de2:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	4798      	blx	r3
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}
 8004df0:	200002a8 	.word	0x200002a8
 8004df4:	200002c8 	.word	0x200002c8
 8004df8:	200002d0 	.word	0x200002d0

08004dfc <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e10:	681c      	ldr	r4, [r3, #0]
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	2200      	movs	r2, #0
 8004e16:	9201      	str	r2, [sp, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	9200      	str	r2, [sp, #0]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	490c      	ldr	r1, [pc, #48]	@ (8004e50 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a09      	ldr	r2, [pc, #36]	@ (8004e54 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004e30:	4907      	ldr	r1, [pc, #28]	@ (8004e50 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a05      	ldr	r2, [pc, #20]	@ (8004e58 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004e42:	4904      	ldr	r1, [pc, #16]	@ (8004e54 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}
 8004e50:	200002a8 	.word	0x200002a8
 8004e54:	200002c8 	.word	0x200002c8
 8004e58:	200002d0 	.word	0x200002d0

08004e5c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	460b      	mov	r3, r1
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e72:	681c      	ldr	r4, [r3, #0]
 8004e74:	7afa      	ldrb	r2, [r7, #11]
 8004e76:	2300      	movs	r3, #0
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	2205      	movs	r2, #5
 8004e82:	490c      	ldr	r1, [pc, #48]	@ (8004eb4 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a09      	ldr	r2, [pc, #36]	@ (8004eb8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004e94:	4907      	ldr	r1, [pc, #28]	@ (8004eb4 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a05      	ldr	r2, [pc, #20]	@ (8004ebc <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004ea6:	4904      	ldr	r1, [pc, #16]	@ (8004eb8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	4798      	blx	r3
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd90      	pop	{r4, r7, pc}
 8004eb4:	200002a8 	.word	0x200002a8
 8004eb8:	200002c8 	.word	0x200002c8
 8004ebc:	200002d0 	.word	0x200002d0

08004ec0 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed0:	d21f      	bcs.n	8004f12 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004eda:	681c      	ldr	r4, [r3, #0]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2206      	movs	r2, #6
 8004ee8:	490c      	ldr	r1, [pc, #48]	@ (8004f1c <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a09      	ldr	r2, [pc, #36]	@ (8004f20 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004efa:	4908      	ldr	r1, [pc, #32]	@ (8004f1c <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a06      	ldr	r2, [pc, #24]	@ (8004f24 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004f0c:	4904      	ldr	r1, [pc, #16]	@ (8004f20 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200002a8 	.word	0x200002a8
 8004f20:	200002c8 	.word	0x200002c8
 8004f24:	200002d0 	.word	0x200002d0

08004f28 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	460b      	mov	r3, r1
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f3c:	d220      	bcs.n	8004f80 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f46:	681c      	ldr	r4, [r3, #0]
 8004f48:	7afa      	ldrb	r2, [r7, #11]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	4613      	mov	r3, r2
 8004f54:	2207      	movs	r2, #7
 8004f56:	490c      	ldr	r1, [pc, #48]	@ (8004f88 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a09      	ldr	r2, [pc, #36]	@ (8004f8c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004f68:	4907      	ldr	r1, [pc, #28]	@ (8004f88 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a05      	ldr	r2, [pc, #20]	@ (8004f90 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004f7a:	4904      	ldr	r1, [pc, #16]	@ (8004f8c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	4798      	blx	r3
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}
 8004f88:	200002a8 	.word	0x200002a8
 8004f8c:	200002c8 	.word	0x200002c8
 8004f90:	200002d0 	.word	0x200002d0

08004f94 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	72fb      	strb	r3, [r7, #11]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fae:	681c      	ldr	r4, [r3, #0]
 8004fb0:	7af9      	ldrb	r1, [r7, #11]
 8004fb2:	7abb      	ldrb	r3, [r7, #10]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	9201      	str	r2, [sp, #4]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	490c      	ldr	r1, [pc, #48]	@ (8004ff0 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a09      	ldr	r2, [pc, #36]	@ (8004ff4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004fd0:	4907      	ldr	r1, [pc, #28]	@ (8004ff0 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a05      	ldr	r2, [pc, #20]	@ (8004ff8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004fe2:	4904      	ldr	r1, [pc, #16]	@ (8004ff4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	4798      	blx	r3
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	200002a8 	.word	0x200002a8
 8004ff4:	200002c8 	.word	0x200002c8
 8004ff8:	200002d0 	.word	0x200002d0

08004ffc <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af02      	add	r7, sp, #8
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
 8005008:	4613      	mov	r3, r2
 800500a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005014:	681c      	ldr	r4, [r3, #0]
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	78bb      	ldrb	r3, [r7, #2]
 800501a:	2100      	movs	r1, #0
 800501c:	9101      	str	r1, [sp, #4]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	2209      	movs	r2, #9
 8005024:	490c      	ldr	r1, [pc, #48]	@ (8005058 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a09      	ldr	r2, [pc, #36]	@ (800505c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8005036:	4908      	ldr	r1, [pc, #32]	@ (8005058 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a06      	ldr	r2, [pc, #24]	@ (8005060 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8005048:	4904      	ldr	r1, [pc, #16]	@ (800505c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	bd90      	pop	{r4, r7, pc}
 8005056:	bf00      	nop
 8005058:	200002a8 	.word	0x200002a8
 800505c:	200002c8 	.word	0x200002c8
 8005060:	200002d0 	.word	0x200002d0

08005064 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b085      	sub	sp, #20
 8005068:	af02      	add	r7, sp, #8
 800506a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005074:	681c      	ldr	r4, [r3, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	2300      	movs	r3, #0
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2300      	movs	r3, #0
 8005080:	220a      	movs	r2, #10
 8005082:	490c      	ldr	r1, [pc, #48]	@ (80050b4 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a09      	ldr	r2, [pc, #36]	@ (80050b8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8005094:	4907      	ldr	r1, [pc, #28]	@ (80050b4 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a05      	ldr	r2, [pc, #20]	@ (80050bc <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 80050a6:	4904      	ldr	r1, [pc, #16]	@ (80050b8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4798      	blx	r3
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd90      	pop	{r4, r7, pc}
 80050b4:	200002a8 	.word	0x200002a8
 80050b8:	200002c8 	.word	0x200002c8
 80050bc:	200002d0 	.word	0x200002d0

080050c0 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050d0:	681c      	ldr	r4, [r3, #0]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	220b      	movs	r2, #11
 80050de:	490c      	ldr	r1, [pc, #48]	@ (8005110 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a09      	ldr	r2, [pc, #36]	@ (8005114 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 80050f0:	4907      	ldr	r1, [pc, #28]	@ (8005110 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a05      	ldr	r2, [pc, #20]	@ (8005118 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8005102:	4904      	ldr	r1, [pc, #16]	@ (8005114 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	4798      	blx	r3
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}
 8005110:	200002a8 	.word	0x200002a8
 8005114:	200002c8 	.word	0x200002c8
 8005118:	200002d0 	.word	0x200002d0

0800511c <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b085      	sub	sp, #20
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800512c:	681c      	ldr	r4, [r3, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	2300      	movs	r3, #0
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	220c      	movs	r2, #12
 800513a:	490c      	ldr	r1, [pc, #48]	@ (800516c <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a09      	ldr	r2, [pc, #36]	@ (8005170 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 800514c:	4907      	ldr	r1, [pc, #28]	@ (800516c <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a05      	ldr	r2, [pc, #20]	@ (8005174 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 800515e:	4904      	ldr	r1, [pc, #16]	@ (8005170 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	4798      	blx	r3
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}
 800516c:	200002a8 	.word	0x200002a8
 8005170:	200002c8 	.word	0x200002c8
 8005174:	200002d0 	.word	0x200002d0

08005178 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b085      	sub	sp, #20
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005188:	681c      	ldr	r4, [r3, #0]
 800518a:	2300      	movs	r3, #0
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	2300      	movs	r3, #0
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	220d      	movs	r2, #13
 8005196:	490c      	ldr	r1, [pc, #48]	@ (80051c8 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a09      	ldr	r2, [pc, #36]	@ (80051cc <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 80051a8:	4907      	ldr	r1, [pc, #28]	@ (80051c8 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a05      	ldr	r2, [pc, #20]	@ (80051d0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 80051ba:	4904      	ldr	r1, [pc, #16]	@ (80051cc <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd90      	pop	{r4, r7, pc}
 80051c8:	200002a8 	.word	0x200002a8
 80051cc:	200002c8 	.word	0x200002c8
 80051d0:	200002d0 	.word	0x200002d0

080051d4 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af02      	add	r7, sp, #8
 80051da:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051e4:	681c      	ldr	r4, [r3, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	2300      	movs	r3, #0
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	2300      	movs	r3, #0
 80051f0:	220e      	movs	r2, #14
 80051f2:	490c      	ldr	r1, [pc, #48]	@ (8005224 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8005204:	4907      	ldr	r1, [pc, #28]	@ (8005224 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a05      	ldr	r2, [pc, #20]	@ (800522c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8005216:	4904      	ldr	r1, [pc, #16]	@ (8005228 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4798      	blx	r3
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bd90      	pop	{r4, r7, pc}
 8005224:	200002a8 	.word	0x200002a8
 8005228:	200002c8 	.word	0x200002c8
 800522c:	200002d0 	.word	0x200002d0

08005230 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b085      	sub	sp, #20
 8005234:	af02      	add	r7, sp, #8
 8005236:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005240:	681c      	ldr	r4, [r3, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	2300      	movs	r3, #0
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2300      	movs	r3, #0
 800524c:	220f      	movs	r2, #15
 800524e:	490c      	ldr	r1, [pc, #48]	@ (8005280 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a09      	ldr	r2, [pc, #36]	@ (8005284 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005260:	4907      	ldr	r1, [pc, #28]	@ (8005280 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a05      	ldr	r2, [pc, #20]	@ (8005288 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8005272:	4904      	ldr	r1, [pc, #16]	@ (8005284 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	bd90      	pop	{r4, r7, pc}
 8005280:	200002a8 	.word	0x200002a8
 8005284:	200002c8 	.word	0x200002c8
 8005288:	200002d0 	.word	0x200002d0

0800528c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b085      	sub	sp, #20
 8005290:	af02      	add	r7, sp, #8
 8005292:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800529c:	681c      	ldr	r4, [r3, #0]
 800529e:	2300      	movs	r3, #0
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	2300      	movs	r3, #0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	2210      	movs	r2, #16
 80052aa:	490c      	ldr	r1, [pc, #48]	@ (80052dc <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80052bc:	4907      	ldr	r1, [pc, #28]	@ (80052dc <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a05      	ldr	r2, [pc, #20]	@ (80052e4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 80052ce:	4904      	ldr	r1, [pc, #16]	@ (80052e0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}
 80052dc:	200002a8 	.word	0x200002a8
 80052e0:	200002c8 	.word	0x200002c8
 80052e4:	200002d0 	.word	0x200002d0

080052e8 <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052f8:	681c      	ldr	r4, [r3, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	2300      	movs	r3, #0
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	2211      	movs	r2, #17
 8005306:	490c      	ldr	r1, [pc, #48]	@ (8005338 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a09      	ldr	r2, [pc, #36]	@ (800533c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8005318:	4907      	ldr	r1, [pc, #28]	@ (8005338 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a05      	ldr	r2, [pc, #20]	@ (8005340 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 800532a:	4904      	ldr	r1, [pc, #16]	@ (800533c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	4798      	blx	r3
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	bd90      	pop	{r4, r7, pc}
 8005338:	200002a8 	.word	0x200002a8
 800533c:	200002c8 	.word	0x200002c8
 8005340:	200002d0 	.word	0x200002d0

08005344 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b087      	sub	sp, #28
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005354:	681c      	ldr	r4, [r3, #0]
 8005356:	2300      	movs	r3, #0
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	2212      	movs	r2, #18
 8005362:	4912      	ldr	r1, [pc, #72]	@ (80053ac <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a0f      	ldr	r2, [pc, #60]	@ (80053b0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005374:	490d      	ldr	r1, [pc, #52]	@ (80053ac <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a0b      	ldr	r2, [pc, #44]	@ (80053b4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8005386:	490a      	ldr	r1, [pc, #40]	@ (80053b0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2202      	movs	r2, #2
 8005398:	4906      	ldr	r1, [pc, #24]	@ (80053b4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
 800539e:	4603      	mov	r3, r0
 80053a0:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 80053a2:	89fb      	ldrh	r3, [r7, #14]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd90      	pop	{r4, r7, pc}
 80053ac:	200002a8 	.word	0x200002a8
 80053b0:	200002c8 	.word	0x200002c8
 80053b4:	200002d0 	.word	0x200002d0

080053b8 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	460b      	mov	r3, r1
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053ce:	681c      	ldr	r4, [r3, #0]
 80053d0:	7afa      	ldrb	r2, [r7, #11]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	4613      	mov	r3, r2
 80053dc:	2201      	movs	r2, #1
 80053de:	4903      	ldr	r1, [pc, #12]	@ (80053ec <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	47a0      	blx	r4
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	200002a8 	.word	0x200002a8

080053f0 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005404:	681c      	ldr	r4, [r3, #0]
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	2200      	movs	r2, #0
 800540a:	9201      	str	r2, [sp, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	9200      	str	r2, [sp, #0]
 8005410:	2202      	movs	r2, #2
 8005412:	4903      	ldr	r1, [pc, #12]	@ (8005420 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	47a0      	blx	r4
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bd90      	pop	{r4, r7, pc}
 8005420:	200002a8 	.word	0x200002a8

08005424 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b087      	sub	sp, #28
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	460b      	mov	r3, r1
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800543a:	681c      	ldr	r4, [r3, #0]
 800543c:	7afa      	ldrb	r2, [r7, #11]
 800543e:	2300      	movs	r3, #0
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	2203      	movs	r2, #3
 800544a:	4903      	ldr	r1, [pc, #12]	@ (8005458 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	47a0      	blx	r4
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	bd90      	pop	{r4, r7, pc}
 8005458:	200002a8 	.word	0x200002a8

0800545c <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b085      	sub	sp, #20
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005470:	681c      	ldr	r4, [r3, #0]
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	2200      	movs	r2, #0
 8005476:	9201      	str	r2, [sp, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	9200      	str	r2, [sp, #0]
 800547c:	2204      	movs	r2, #4
 800547e:	4903      	ldr	r1, [pc, #12]	@ (800548c <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	47a0      	blx	r4
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bd90      	pop	{r4, r7, pc}
 800548c:	200002a8 	.word	0x200002a8

08005490 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b087      	sub	sp, #28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	460b      	mov	r3, r1
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054a6:	681c      	ldr	r4, [r3, #0]
 80054a8:	7afa      	ldrb	r2, [r7, #11]
 80054aa:	2300      	movs	r3, #0
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	4613      	mov	r3, r2
 80054b4:	2205      	movs	r2, #5
 80054b6:	4903      	ldr	r1, [pc, #12]	@ (80054c4 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	47a0      	blx	r4
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd90      	pop	{r4, r7, pc}
 80054c4:	200002a8 	.word	0x200002a8

080054c8 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054da:	681c      	ldr	r4, [r3, #0]
 80054dc:	2300      	movs	r3, #0
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	2300      	movs	r3, #0
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2206      	movs	r2, #6
 80054e8:	4903      	ldr	r1, [pc, #12]	@ (80054f8 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	47a0      	blx	r4
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd90      	pop	{r4, r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200002a8 	.word	0x200002a8

080054fc <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b087      	sub	sp, #28
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	460b      	mov	r3, r1
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005512:	681c      	ldr	r4, [r3, #0]
 8005514:	7afa      	ldrb	r2, [r7, #11]
 8005516:	2300      	movs	r3, #0
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	4613      	mov	r3, r2
 8005520:	2207      	movs	r2, #7
 8005522:	4903      	ldr	r1, [pc, #12]	@ (8005530 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	47a0      	blx	r4
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}
 8005530:	200002a8 	.word	0x200002a8

08005534 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b087      	sub	sp, #28
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	72fb      	strb	r3, [r7, #11]
 8005542:	4613      	mov	r3, r2
 8005544:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800554e:	681c      	ldr	r4, [r3, #0]
 8005550:	7af9      	ldrb	r1, [r7, #11]
 8005552:	7abb      	ldrb	r3, [r7, #10]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	9201      	str	r2, [sp, #4]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	460b      	mov	r3, r1
 800555c:	2208      	movs	r2, #8
 800555e:	4903      	ldr	r1, [pc, #12]	@ (800556c <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	47a0      	blx	r4
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}
 800556c:	200002a8 	.word	0x200002a8

08005570 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b085      	sub	sp, #20
 8005574:	af02      	add	r7, sp, #8
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]
 800557c:	4613      	mov	r3, r2
 800557e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005588:	681c      	ldr	r4, [r3, #0]
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	78bb      	ldrb	r3, [r7, #2]
 800558e:	2100      	movs	r1, #0
 8005590:	9101      	str	r1, [sp, #4]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	2209      	movs	r2, #9
 8005598:	4903      	ldr	r1, [pc, #12]	@ (80055a8 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	47a0      	blx	r4
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200002a8 	.word	0x200002a8

080055ac <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80055bc:	681c      	ldr	r4, [r3, #0]
 80055be:	2300      	movs	r3, #0
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	2300      	movs	r3, #0
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	220a      	movs	r2, #10
 80055ca:	4903      	ldr	r1, [pc, #12]	@ (80055d8 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	47a0      	blx	r4
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd90      	pop	{r4, r7, pc}
 80055d8:	200002a8 	.word	0x200002a8

080055dc <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b085      	sub	sp, #20
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80055ec:	681c      	ldr	r4, [r3, #0]
 80055ee:	2300      	movs	r3, #0
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	220b      	movs	r2, #11
 80055fa:	4903      	ldr	r1, [pc, #12]	@ (8005608 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	47a0      	blx	r4
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bd90      	pop	{r4, r7, pc}
 8005608:	200002a8 	.word	0x200002a8

0800560c <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b085      	sub	sp, #20
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800561c:	681c      	ldr	r4, [r3, #0]
 800561e:	2300      	movs	r3, #0
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	2300      	movs	r3, #0
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	2300      	movs	r3, #0
 8005628:	220c      	movs	r2, #12
 800562a:	4903      	ldr	r1, [pc, #12]	@ (8005638 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	47a0      	blx	r4
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bd90      	pop	{r4, r7, pc}
 8005638:	200002a8 	.word	0x200002a8

0800563c <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b085      	sub	sp, #20
 8005640:	af02      	add	r7, sp, #8
 8005642:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800564c:	681c      	ldr	r4, [r3, #0]
 800564e:	2300      	movs	r3, #0
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	2300      	movs	r3, #0
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	2300      	movs	r3, #0
 8005658:	220d      	movs	r2, #13
 800565a:	4903      	ldr	r1, [pc, #12]	@ (8005668 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	47a0      	blx	r4
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	bd90      	pop	{r4, r7, pc}
 8005668:	200002a8 	.word	0x200002a8

0800566c <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b085      	sub	sp, #20
 8005670:	af02      	add	r7, sp, #8
 8005672:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800567c:	681c      	ldr	r4, [r3, #0]
 800567e:	2300      	movs	r3, #0
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	2300      	movs	r3, #0
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	2300      	movs	r3, #0
 8005688:	220e      	movs	r2, #14
 800568a:	4903      	ldr	r1, [pc, #12]	@ (8005698 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	47a0      	blx	r4
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bd90      	pop	{r4, r7, pc}
 8005698:	200002a8 	.word	0x200002a8

0800569c <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b085      	sub	sp, #20
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80056ac:	681c      	ldr	r4, [r3, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	2300      	movs	r3, #0
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	2300      	movs	r3, #0
 80056b8:	220f      	movs	r2, #15
 80056ba:	4903      	ldr	r1, [pc, #12]	@ (80056c8 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	47a0      	blx	r4
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd90      	pop	{r4, r7, pc}
 80056c8:	200002a8 	.word	0x200002a8

080056cc <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80056dc:	681c      	ldr	r4, [r3, #0]
 80056de:	2300      	movs	r3, #0
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	2300      	movs	r3, #0
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	2210      	movs	r2, #16
 80056ea:	4903      	ldr	r1, [pc, #12]	@ (80056f8 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	47a0      	blx	r4
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd90      	pop	{r4, r7, pc}
 80056f8:	200002a8 	.word	0x200002a8

080056fc <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b085      	sub	sp, #20
 8005700:	af02      	add	r7, sp, #8
 8005702:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800570c:	681c      	ldr	r4, [r3, #0]
 800570e:	2300      	movs	r3, #0
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	2300      	movs	r3, #0
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2300      	movs	r3, #0
 8005718:	2211      	movs	r2, #17
 800571a:	4903      	ldr	r1, [pc, #12]	@ (8005728 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	47a0      	blx	r4
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bd90      	pop	{r4, r7, pc}
 8005728:	200002a8 	.word	0x200002a8

0800572c <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b085      	sub	sp, #20
 8005730:	af02      	add	r7, sp, #8
 8005732:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800573c:	681c      	ldr	r4, [r3, #0]
 800573e:	2300      	movs	r3, #0
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	2300      	movs	r3, #0
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	2300      	movs	r3, #0
 8005748:	2212      	movs	r2, #18
 800574a:	4903      	ldr	r1, [pc, #12]	@ (8005758 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	47a0      	blx	r4
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	bd90      	pop	{r4, r7, pc}
 8005758:	200002a8 	.word	0x200002a8

0800575c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a09      	ldr	r2, [pc, #36]	@ (8005794 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005770:	4909      	ldr	r1, [pc, #36]	@ (8005798 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a06      	ldr	r2, [pc, #24]	@ (800579c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8005782:	4904      	ldr	r1, [pc, #16]	@ (8005794 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	200002c8 	.word	0x200002c8
 8005798:	200002a8 	.word	0x200002a8
 800579c:	200002d0 	.word	0x200002d0

080057a0 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b089      	sub	sp, #36	@ 0x24
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80057ac:	4b17      	ldr	r3, [pc, #92]	@ (800580c <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	75fb      	strb	r3, [r7, #23]
 80057b6:	e020      	b.n	80057fa <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80057c0:	681c      	ldr	r4, [r3, #0]
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	461a      	mov	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	1899      	adds	r1, r3, r2
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	461a      	mov	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	441a      	add	r2, r3
 80057d6:	230a      	movs	r3, #10
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	2302      	movs	r3, #2
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80057e0:	2300      	movs	r3, #0
 80057e2:	75bb      	strb	r3, [r7, #22]
 80057e4:	e003      	b.n	80057ee <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 80057e6:	bf00      	nop
 80057e8:	7dbb      	ldrb	r3, [r7, #22]
 80057ea:	3301      	adds	r3, #1
 80057ec:	75bb      	strb	r3, [r7, #22]
 80057ee:	7dbb      	ldrb	r3, [r7, #22]
 80057f0:	2b7c      	cmp	r3, #124	@ 0x7c
 80057f2:	d9f8      	bls.n	80057e6 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	3301      	adds	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d9db      	bls.n	80057b8 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8005800:	bf00      	nop
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	bd90      	pop	{r4, r7, pc}
 800580a:	bf00      	nop
 800580c:	200002a5 	.word	0x200002a5

08005810 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005822:	2301      	movs	r3, #1
 8005824:	74fb      	strb	r3, [r7, #19]
 8005826:	e016      	b.n	8005856 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	461a      	mov	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	7f1b      	ldrb	r3, [r3, #28]
 8005832:	4413      	add	r3, r2
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	4413      	add	r3, r2
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	79fa      	ldrb	r2, [r7, #7]
 800583e:	7cfb      	ldrb	r3, [r7, #19]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	461a      	mov	r2, r3
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	3301      	adds	r3, #1
 8005854:	74fb      	strb	r3, [r7, #19]
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d9e5      	bls.n	8005828 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800585c:	697b      	ldr	r3, [r7, #20]
}
 800585e:	4618      	mov	r0, r3
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2118      	movs	r1, #24
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
 800588c:	4602      	mov	r2, r0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005892:	b292      	uxth	r2, r2
 8005894:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	2b0e      	cmp	r3, #14
 800589a:	f200 8099 	bhi.w	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 800589e:	a201      	add	r2, pc, #4	@ (adr r2, 80058a4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058e1 	.word	0x080058e1
 80058a8:	080058f1 	.word	0x080058f1
 80058ac:	08005901 	.word	0x08005901
 80058b0:	08005911 	.word	0x08005911
 80058b4:	08005921 	.word	0x08005921
 80058b8:	08005931 	.word	0x08005931
 80058bc:	08005941 	.word	0x08005941
 80058c0:	08005951 	.word	0x08005951
 80058c4:	08005961 	.word	0x08005961
 80058c8:	08005971 	.word	0x08005971
 80058cc:	08005981 	.word	0x08005981
 80058d0:	08005991 	.word	0x08005991
 80058d4:	080059a1 	.word	0x080059a1
 80058d8:	080059b1 	.word	0x080059b1
 80058dc:	080059c1 	.word	0x080059c1
      state = pL6470_StatusRegister->HiZ;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	73fb      	strb	r3, [r7, #15]
      break;
 80058ee:	e06f      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	73fb      	strb	r3, [r7, #15]
      break;
 80058fe:	e067      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	73fb      	strb	r3, [r7, #15]
      break;
 800590e:	e05f      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800591a:	b2db      	uxtb	r3, r3
 800591c:	73fb      	strb	r3, [r7, #15]
      break;
 800591e:	e057      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800592a:	b2db      	uxtb	r3, r3
 800592c:	73fb      	strb	r3, [r7, #15]
      break;
 800592e:	e04f      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800593a:	b2db      	uxtb	r3, r3
 800593c:	73fb      	strb	r3, [r7, #15]
      break;
 800593e:	e047      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800594a:	b2db      	uxtb	r3, r3
 800594c:	73fb      	strb	r3, [r7, #15]
      break;
 800594e:	e03f      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800595a:	b2db      	uxtb	r3, r3
 800595c:	73fb      	strb	r3, [r7, #15]
      break;
 800595e:	e037      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800596a:	b2db      	uxtb	r3, r3
 800596c:	73fb      	strb	r3, [r7, #15]
      break;
 800596e:	e02f      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	73fb      	strb	r3, [r7, #15]
      break;
 800597e:	e027      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	73fb      	strb	r3, [r7, #15]
      break;
 800598e:	e01f      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800599a:	b2db      	uxtb	r3, r3
 800599c:	73fb      	strb	r3, [r7, #15]
      break;
 800599e:	e017      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	73fb      	strb	r3, [r7, #15]
      break;
 80059ae:	e00f      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	73fb      	strb	r3, [r7, #15]
      break;
 80059be:	e007      	b.n	80059d0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	73fb      	strb	r3, [r7, #15]
      break;
 80059ce:	bf00      	nop
  return state;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop

080059dc <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	2b18      	cmp	r3, #24
 80059ec:	d809      	bhi.n	8005a02 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a19      	ldr	r1, [r3, #32]
 80059f2:	78fa      	ldrb	r2, [r7, #3]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	3301      	adds	r3, #1
 8005a00:	e000      	b.n	8005a04 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
 8005a1e:	e01a      	b.n	8005a56 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	4413      	add	r3, r2
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	4413      	add	r3, r2
 8005a34:	2200      	movs	r2, #0
 8005a36:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	4413      	add	r3, r2
 8005a40:	2200      	movs	r2, #0
 8005a42:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	3301      	adds	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d9e1      	bls.n	8005a20 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	4613      	mov	r3, r2
 8005a78:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	7f1b      	ldrb	r3, [r3, #28]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	4413      	add	r3, r2
 8005a84:	79fa      	ldrb	r2, [r7, #7]
 8005a86:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	7f1b      	ldrb	r3, [r3, #28]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4413      	add	r3, r2
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	7f1b      	ldrb	r3, [r3, #28]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	7f1b      	ldrb	r3, [r3, #28]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	4413      	add	r3, r2
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	60da      	str	r2, [r3, #12]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8005ad0:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b14 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8005af6:	681c      	ldr	r4, [r3, #0]
 8005af8:	79fa      	ldrb	r2, [r7, #7]
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	47a0      	blx	r4
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd90      	pop	{r4, r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200002a5 	.word	0x200002a5

08005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	75bb      	strb	r3, [r7, #22]
 8005b2c:	e013      	b.n	8005b56 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
 8005b32:	e00a      	b.n	8005b4a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8005b34:	7d7b      	ldrb	r3, [r7, #21]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	757a      	strb	r2, [r7, #21]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4413      	add	r3, r2
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	3301      	adds	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d9f1      	bls.n	8005b34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005b50:	7dbb      	ldrb	r3, [r7, #22]
 8005b52:	3301      	adds	r3, #1
 8005b54:	75bb      	strb	r3, [r7, #22]
 8005b56:	7dbb      	ldrb	r3, [r7, #22]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d9e8      	bls.n	8005b2e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75fb      	strb	r3, [r7, #23]
 8005b60:	e1f1      	b.n	8005f46 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	440b      	add	r3, r1
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	4619      	mov	r1, r3
 8005b72:	460b      	mov	r3, r1
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	1a5b      	subs	r3, r3, r1
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	441a      	add	r2, r3
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	440b      	add	r3, r1
 8005b82:	7b12      	ldrb	r2, [r2, #12]
 8005b84:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b12      	cmp	r3, #18
 8005b92:	f200 81d5 	bhi.w	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8005b96:	a201      	add	r2, pc, #4	@ (adr r2, 8005b9c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005f41 	.word	0x08005f41
 8005ba0:	08005be9 	.word	0x08005be9
 8005ba4:	08005c71 	.word	0x08005c71
 8005ba8:	08005ca1 	.word	0x08005ca1
 8005bac:	08005d09 	.word	0x08005d09
 8005bb0:	08005d37 	.word	0x08005d37
 8005bb4:	08005d9f 	.word	0x08005d9f
 8005bb8:	08005ddb 	.word	0x08005ddb
 8005bbc:	08005e43 	.word	0x08005e43
 8005bc0:	08005edf 	.word	0x08005edf
 8005bc4:	08005f41 	.word	0x08005f41
 8005bc8:	08005f41 	.word	0x08005f41
 8005bcc:	08005f41 	.word	0x08005f41
 8005bd0:	08005f41 	.word	0x08005f41
 8005bd4:	08005f41 	.word	0x08005f41
 8005bd8:	08005f41 	.word	0x08005f41
 8005bdc:	08005f41 	.word	0x08005f41
 8005be0:	08005f41 	.word	0x08005f41
 8005be4:	08005f41 	.word	0x08005f41
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	7819      	ldrb	r1, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a18      	ldr	r0, [r3, #32]
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4403      	add	r3, r0
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4403      	add	r3, r0
 8005c10:	430a      	orrs	r2, r1
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a19      	ldr	r1, [r3, #32]
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	7b9b      	ldrb	r3, [r3, #14]
 8005c30:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005c32:	2301      	movs	r3, #1
 8005c34:	75bb      	strb	r3, [r7, #22]
 8005c36:	e016      	b.n	8005c66 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	4413      	add	r3, r2
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	7d39      	ldrb	r1, [r7, #20]
 8005c44:	7dbb      	ldrb	r3, [r7, #22]
 8005c46:	1acb      	subs	r3, r1, r3
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	fa22 f103 	lsr.w	r1, r2, r3
 8005c4e:	7dbb      	ldrb	r3, [r7, #22]
 8005c50:	005a      	lsls	r2, r3, #1
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	4413      	add	r3, r2
 8005c56:	461a      	mov	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	b2ca      	uxtb	r2, r1
 8005c5e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005c60:	7dbb      	ldrb	r3, [r7, #22]
 8005c62:	3301      	adds	r3, #1
 8005c64:	75bb      	strb	r3, [r7, #22]
 8005c66:	7d3a      	ldrb	r2, [r7, #20]
 8005c68:	7dbb      	ldrb	r3, [r7, #22]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d2e4      	bcs.n	8005c38 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8005c6e:	e167      	b.n	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	7819      	ldrb	r1, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a18      	ldr	r0, [r3, #32]
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4413      	add	r3, r2
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4403      	add	r3, r0
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4403      	add	r3, r0
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
      break;
 8005c9e:	e14f      	b.n	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	7819      	ldrb	r1, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4413      	add	r3, r2
 8005cbc:	4403      	add	r3, r0
 8005cbe:	7a1a      	ldrb	r2, [r3, #8]
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	4403      	add	r3, r0
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75bb      	strb	r3, [r7, #22]
 8005cd0:	e016      	b.n	8005d00 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	4413      	add	r3, r2
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	7dbb      	ldrb	r3, [r7, #22]
 8005cde:	f1c3 0303 	rsb	r3, r3, #3
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	fa22 f103 	lsr.w	r1, r2, r3
 8005ce8:	7dbb      	ldrb	r3, [r7, #22]
 8005cea:	005a      	lsls	r2, r3, #1
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	4413      	add	r3, r2
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	b2ca      	uxtb	r2, r1
 8005cf8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005cfa:	7dbb      	ldrb	r3, [r7, #22]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	75bb      	strb	r3, [r7, #22]
 8005d00:	7dbb      	ldrb	r3, [r7, #22]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d9e5      	bls.n	8005cd2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8005d06:	e11b      	b.n	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	7819      	ldrb	r1, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	4403      	add	r3, r0
 8005d26:	7a1a      	ldrb	r2, [r3, #8]
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4403      	add	r3, r0
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]
      break;
 8005d34:	e104      	b.n	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	7819      	ldrb	r1, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	4413      	add	r3, r2
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4413      	add	r3, r2
 8005d52:	4403      	add	r3, r0
 8005d54:	7a1a      	ldrb	r2, [r3, #8]
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4403      	add	r3, r0
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005d62:	2301      	movs	r3, #1
 8005d64:	75bb      	strb	r3, [r7, #22]
 8005d66:	e016      	b.n	8005d96 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	4413      	add	r3, r2
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	7dbb      	ldrb	r3, [r7, #22]
 8005d74:	f1c3 0303 	rsb	r3, r3, #3
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	fa22 f103 	lsr.w	r1, r2, r3
 8005d7e:	7dbb      	ldrb	r3, [r7, #22]
 8005d80:	005a      	lsls	r2, r3, #1
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	4413      	add	r3, r2
 8005d86:	461a      	mov	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	b2ca      	uxtb	r2, r1
 8005d8e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005d90:	7dbb      	ldrb	r3, [r7, #22]
 8005d92:	3301      	adds	r3, #1
 8005d94:	75bb      	strb	r3, [r7, #22]
 8005d96:	7dbb      	ldrb	r3, [r7, #22]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d9e5      	bls.n	8005d68 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005d9c:	e0d0      	b.n	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005d9e:	2301      	movs	r3, #1
 8005da0:	75bb      	strb	r3, [r7, #22]
 8005da2:	e016      	b.n	8005dd2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	4413      	add	r3, r2
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	7dbb      	ldrb	r3, [r7, #22]
 8005db0:	f1c3 0303 	rsb	r3, r3, #3
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	fa22 f103 	lsr.w	r1, r2, r3
 8005dba:	7dbb      	ldrb	r3, [r7, #22]
 8005dbc:	005a      	lsls	r2, r3, #1
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	b2ca      	uxtb	r2, r1
 8005dca:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005dcc:	7dbb      	ldrb	r3, [r7, #22]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	75bb      	strb	r3, [r7, #22]
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d9e5      	bls.n	8005da4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005dd8:	e0b2      	b.n	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	4413      	add	r3, r2
 8005de0:	7819      	ldrb	r1, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4413      	add	r3, r2
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4413      	add	r3, r2
 8005df6:	4403      	add	r3, r0
 8005df8:	7a1a      	ldrb	r2, [r3, #8]
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4403      	add	r3, r0
 8005e00:	430a      	orrs	r2, r1
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005e06:	2301      	movs	r3, #1
 8005e08:	75bb      	strb	r3, [r7, #22]
 8005e0a:	e016      	b.n	8005e3a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	4413      	add	r3, r2
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	7dbb      	ldrb	r3, [r7, #22]
 8005e18:	f1c3 0303 	rsb	r3, r3, #3
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	fa22 f103 	lsr.w	r1, r2, r3
 8005e22:	7dbb      	ldrb	r3, [r7, #22]
 8005e24:	005a      	lsls	r2, r3, #1
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	4413      	add	r3, r2
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4413      	add	r3, r2
 8005e30:	b2ca      	uxtb	r2, r1
 8005e32:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005e34:	7dbb      	ldrb	r3, [r7, #22]
 8005e36:	3301      	adds	r3, #1
 8005e38:	75bb      	strb	r3, [r7, #22]
 8005e3a:	7dbb      	ldrb	r3, [r7, #22]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d9e5      	bls.n	8005e0c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005e40:	e07e      	b.n	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4413      	add	r3, r2
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	b259      	sxtb	r1, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	4413      	add	r3, r2
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	4403      	add	r3, r0
 8005e62:	791b      	ldrb	r3, [r3, #4]
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	b259      	sxtb	r1, r3
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	4413      	add	r3, r2
 8005e72:	b2ca      	uxtb	r2, r1
 8005e74:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	7819      	ldrb	r1, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4413      	add	r3, r2
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4413      	add	r3, r2
 8005e92:	4403      	add	r3, r0
 8005e94:	7a1a      	ldrb	r2, [r3, #8]
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4403      	add	r3, r0
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	75bb      	strb	r3, [r7, #22]
 8005ea6:	e016      	b.n	8005ed6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4413      	add	r3, r2
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	7dbb      	ldrb	r3, [r7, #22]
 8005eb4:	f1c3 0303 	rsb	r3, r3, #3
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	fa22 f103 	lsr.w	r1, r2, r3
 8005ebe:	7dbb      	ldrb	r3, [r7, #22]
 8005ec0:	005a      	lsls	r2, r3, #1
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4413      	add	r3, r2
 8005ecc:	b2ca      	uxtb	r2, r1
 8005ece:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005ed0:	7dbb      	ldrb	r3, [r7, #22]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	75bb      	strb	r3, [r7, #22]
 8005ed6:	7dbb      	ldrb	r3, [r7, #22]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d9e5      	bls.n	8005ea8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005edc:	e030      	b.n	8005f40 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b259      	sxtb	r1, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	4403      	add	r3, r0
 8005efe:	791b      	ldrb	r3, [r3, #4]
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	b25b      	sxtb	r3, r3
 8005f04:	430b      	orrs	r3, r1
 8005f06:	b259      	sxtb	r1, r3
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	b2ca      	uxtb	r2, r1
 8005f10:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	7819      	ldrb	r1, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	4413      	add	r3, r2
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	4403      	add	r3, r0
 8005f30:	7a1a      	ldrb	r2, [r3, #8]
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4403      	add	r3, r0
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
      break;
 8005f3e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	3301      	adds	r3, #1
 8005f44:	75fb      	strb	r3, [r7, #23]
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	f67f ae0a 	bls.w	8005b62 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005f68:	edd7 7a00 	vldr	s15, [r7]
 8005f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f74:	db1e      	blt.n	8005fb4 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005f76:	edd7 7a00 	vldr	s15, [r7]
 8005f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f7e:	ee17 2a90 	vmov	r2, s15
 8005f82:	edd7 7a00 	vldr	s15, [r7]
 8005f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f8e:	ed97 7a00 	vldr	s14, [r7]
 8005f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa2:	bf4c      	ite	mi
 8005fa4:	2301      	movmi	r3, #1
 8005fa6:	2300      	movpl	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f083 0301 	eor.w	r3, r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	e01a      	b.n	8005fea <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005fb4:	edd7 7a00 	vldr	s15, [r7]
 8005fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fbc:	ee17 2a90 	vmov	r2, s15
 8005fc0:	edd7 7a00 	vldr	s15, [r7]
 8005fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fcc:	ed97 7a00 	vldr	s14, [r7]
 8005fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fd4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8005fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe0:	d501      	bpl.n	8005fe6 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	1ad3      	subs	r3, r2, r3
        }
    }
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	4613      	mov	r3, r2
 8006002:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6918      	ldr	r0, [r3, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8a9b      	ldrh	r3, [r3, #20]
 800600c:	2200      	movs	r2, #0
 800600e:	4619      	mov	r1, r3
 8006010:	f008 fa5e 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6998      	ldr	r0, [r3, #24]
 8006018:	88fa      	ldrh	r2, [r7, #6]
 800601a:	2364      	movs	r3, #100	@ 0x64
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	f009 fa86 	bl	800f52e <HAL_SPI_Receive>
 8006022:	4603      	mov	r3, r0
 8006024:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6918      	ldr	r0, [r3, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8a9b      	ldrh	r3, [r3, #20]
 800602e:	2201      	movs	r2, #1
 8006030:	4619      	mov	r1, r3
 8006032:	f008 fa4d 	bl	800e4d0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8006040:	2300      	movs	r3, #0
    }
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	4613      	mov	r3, r2
 8006056:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6918      	ldr	r0, [r3, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8a9b      	ldrh	r3, [r3, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	4619      	mov	r1, r3
 8006064:	f008 fa34 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6998      	ldr	r0, [r3, #24]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	2364      	movs	r3, #100	@ 0x64
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	f009 f920 	bl	800f2b6 <HAL_SPI_Transmit>
 8006076:	4603      	mov	r3, r0
 8006078:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6918      	ldr	r0, [r3, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8a9b      	ldrh	r3, [r3, #20]
 8006082:	2201      	movs	r2, #1
 8006084:	4619      	mov	r1, r3
 8006086:	f008 fa23 	bl	800e4d0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8006094:	2300      	movs	r3, #0
    }
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800609e:	b580      	push	{r7, lr}
 80060a0:	b088      	sub	sp, #32
 80060a2:	af02      	add	r7, sp, #8
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6918      	ldr	r0, [r3, #16]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8a9b      	ldrh	r3, [r3, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	4619      	mov	r1, r3
 80060b8:	f008 fa0a 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6998      	ldr	r0, [r3, #24]
 80060c0:	887b      	ldrh	r3, [r7, #2]
 80060c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80060c6:	9200      	str	r2, [sp, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	f009 fb40 	bl	800f750 <HAL_SPI_TransmitReceive>
 80060d0:	4603      	mov	r3, r0
 80060d2:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6918      	ldr	r0, [r3, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8a9b      	ldrh	r3, [r3, #20]
 80060e2:	2201      	movs	r2, #1
 80060e4:	4619      	mov	r1, r3
 80060e6:	f008 f9f3 	bl	800e4d0 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e008      	b.n	8006100 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6918      	ldr	r0, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8a9b      	ldrh	r3, [r3, #20]
 80060f6:	2201      	movs	r2, #1
 80060f8:	4619      	mov	r1, r3
 80060fa:	f008 f9e9 	bl	800e4d0 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 80060fe:	2300      	movs	r3, #0
    }
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800611e:	681c      	ldr	r4, [r3, #0]
 8006120:	887b      	ldrh	r3, [r7, #2]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	47a0      	blx	r4
    }
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	bd90      	pop	{r4, r7, pc}

08006132 <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
 800614c:	4603      	mov	r3, r0
    }
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
 800616c:	4603      	mov	r3, r0
    }
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	4611      	mov	r1, r2
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
 8006194:	4603      	mov	r3, r0
    }
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 800619e:	b590      	push	{r4, r7, lr}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80061ae:	681c      	ldr	r4, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2100      	movs	r1, #0
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
 80061c0:	4603      	mov	r3, r0
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	47a0      	blx	r4
 80061c8:	4603      	mov	r3, r0
    }
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd90      	pop	{r4, r7, pc}

080061d2 <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 80061d2:	b590      	push	{r4, r7, lr}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80061e2:	681c      	ldr	r4, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2102      	movs	r1, #2
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
 80061f4:	4603      	mov	r3, r0
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	47a0      	blx	r4
 80061fc:	4603      	mov	r3, r0
    }
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}

08006206 <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8006206:	b5b0      	push	{r4, r5, r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006216:	681c      	ldr	r4, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006220:	681d      	ldr	r5, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2103      	movs	r1, #3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
 8006232:	4603      	mov	r3, r0
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	47a8      	blx	r5
 800623a:	eef0 7a40 	vmov.f32	s15, s0
 800623e:	eeb0 0a67 	vmov.f32	s0, s15
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	47a0      	blx	r4
 8006246:	4603      	mov	r3, r0
    }
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bdb0      	pop	{r4, r5, r7, pc}

08006250 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8006250:	b5b0      	push	{r4, r5, r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006260:	681c      	ldr	r4, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800626a:	681d      	ldr	r5, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2106      	movs	r1, #6
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	4798      	blx	r3
 800627c:	4603      	mov	r3, r0
 800627e:	b29b      	uxth	r3, r3
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	47a8      	blx	r5
 8006286:	eef0 7a40 	vmov.f32	s15, s0
 800628a:	eeb0 0a67 	vmov.f32	s0, s15
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	47a0      	blx	r4
 8006292:	4603      	mov	r3, r0
    }
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bdb0      	pop	{r4, r5, r7, pc}

0800629c <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 800629c:	b5b0      	push	{r4, r5, r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062ac:	681c      	ldr	r4, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80062b6:	681d      	ldr	r5, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2107      	movs	r1, #7
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	4798      	blx	r3
 80062c8:	4603      	mov	r3, r0
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	47a8      	blx	r5
 80062d2:	eef0 7a40 	vmov.f32	s15, s0
 80062d6:	eeb0 0a67 	vmov.f32	s0, s15
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	47a0      	blx	r4
 80062de:	4603      	mov	r3, r0
    }
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bdb0      	pop	{r4, r5, r7, pc}

080062e8 <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 80062e8:	b5b0      	push	{r4, r5, r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062f8:	681c      	ldr	r4, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006302:	681d      	ldr	r5, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2104      	movs	r1, #4
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	4798      	blx	r3
 8006314:	4603      	mov	r3, r0
 8006316:	b29b      	uxth	r3, r3
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	47a8      	blx	r5
 800631e:	eef0 7a40 	vmov.f32	s15, s0
 8006322:	eeb0 0a67 	vmov.f32	s0, s15
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	47a0      	blx	r4
 800632a:	4603      	mov	r3, r0
    }
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bdb0      	pop	{r4, r5, r7, pc}

08006334 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8006334:	b5b0      	push	{r4, r5, r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006344:	681c      	ldr	r4, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800634e:	681d      	ldr	r5, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2105      	movs	r1, #5
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
 8006360:	4603      	mov	r3, r0
 8006362:	b29b      	uxth	r3, r3
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	47a8      	blx	r5
 800636a:	eef0 7a40 	vmov.f32	s15, s0
 800636e:	eeb0 0a67 	vmov.f32	s0, s15
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	47a0      	blx	r4
 8006376:	4603      	mov	r3, r0
    }
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bdb0      	pop	{r4, r5, r7, pc}

08006380 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2104      	movs	r1, #4
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
 8006398:	4603      	mov	r3, r0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 80063a2:	2300      	movs	r3, #0
    }
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	b2d1      	uxtb	r1, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	4798      	blx	r3
    }
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
    }
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 80063f2:	b590      	push	{r4, r7, lr}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006402:	681c      	ldr	r4, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2100      	movs	r1, #0
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	2102      	movs	r1, #2
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	47a0      	blx	r4
    }
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	bd90      	pop	{r4, r7, pc}

08006426 <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 8006426:	b590      	push	{r4, r7, lr}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006438:	681c      	ldr	r4, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
 800644a:	4603      	mov	r3, r0
 800644c:	461a      	mov	r2, r3
 800644e:	2102      	movs	r1, #2
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	47a0      	blx	r4
    }
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	bd90      	pop	{r4, r7, pc}

0800645c <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800646e:	681c      	ldr	r4, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	ee07 2a90 	vmov	s15, r2
 8006480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006484:	eeb0 0a67 	vmov.f32	s0, s15
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	2106      	movs	r1, #6
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	47a0      	blx	r4
        return true;
 8006496:	2301      	movs	r3, #1
    }
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bd90      	pop	{r4, r7, pc}

080064a0 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80064b2:	681c      	ldr	r4, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	ee07 2a90 	vmov	s15, r2
 80064c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c8:	eeb0 0a67 	vmov.f32	s0, s15
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
 80064d0:	4603      	mov	r3, r0
 80064d2:	461a      	mov	r2, r3
 80064d4:	2107      	movs	r1, #7
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	47a0      	blx	r4
        return true;
 80064da:	2301      	movs	r3, #1
    }
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd90      	pop	{r4, r7, pc}

080064e4 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80064f6:	681c      	ldr	r4, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	ee07 2a90 	vmov	s15, r2
 8006508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650c:	eeb0 0a67 	vmov.f32	s0, s15
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	4603      	mov	r3, r0
 8006516:	461a      	mov	r2, r3
 8006518:	2104      	movs	r1, #4
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	47a0      	blx	r4
        return true;
 800651e:	2301      	movs	r3, #1
    }
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bd90      	pop	{r4, r7, pc}

08006528 <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800653a:	681c      	ldr	r4, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	ee07 2a90 	vmov	s15, r2
 800654c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006550:	eeb0 0a67 	vmov.f32	s0, s15
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
 8006558:	4603      	mov	r3, r0
 800655a:	461a      	mov	r2, r3
 800655c:	2105      	movs	r1, #5
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	47a0      	blx	r4
        return true;
 8006562:	2301      	movs	r3, #1
    }
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	bd90      	pop	{r4, r7, pc}

0800656c <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	2b07      	cmp	r3, #7
 800657c:	d901      	bls.n	8006582 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 800657e:	2300      	movs	r3, #0
 8006580:	e00f      	b.n	80065a2 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3380      	adds	r3, #128	@ 0x80
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	2115      	movs	r1, #21
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
        return true;
 80065a0:	2301      	movs	r3, #1
    }
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 80065aa:	b590      	push	{r4, r7, lr}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80065bc:	681c      	ldr	r4, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	47a0      	blx	r4
    }
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}

080065de <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80065de:	b5b0      	push	{r4, r5, r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	4613      	mov	r3, r2
 80065ea:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80065f4:	681c      	ldr	r4, [r3, #0]
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 80065fc:	2501      	movs	r5, #1
 80065fe:	e000      	b.n	8006602 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 8006600:	2500      	movs	r5, #0
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	4798      	blx	r3
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	4629      	mov	r1, r5
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	47a0      	blx	r4
    }
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bdb0      	pop	{r4, r5, r7, pc}

08006624 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
    }
 800663a:	bf00      	nop
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
    }
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8006660:	b5b0      	push	{r4, r5, r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	72fb      	strb	r3, [r7, #11]
 800666e:	4613      	mov	r3, r2
 8006670:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800667a:	681c      	ldr	r4, [r3, #0]
 800667c:	7abb      	ldrb	r3, [r7, #10]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006682:	2501      	movs	r5, #1
 8006684:	e000      	b.n	8006688 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006686:	2500      	movs	r5, #0
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	ee07 2a90 	vmov	s15, r2
 8006698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669c:	eeb0 0a67 	vmov.f32	s0, s15
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	4798      	blx	r3
 80066a4:	4603      	mov	r3, r0
 80066a6:	7af9      	ldrb	r1, [r7, #11]
 80066a8:	462a      	mov	r2, r5
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	47a0      	blx	r4
    }
 80066ae:	bf00      	nop
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bdb0      	pop	{r4, r5, r7, pc}

080066b6 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 80066b6:	b5b0      	push	{r4, r5, r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80066ca:	681c      	ldr	r4, [r3, #0]
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 80066d2:	2501      	movs	r5, #1
 80066d4:	e000      	b.n	80066d8 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 80066d6:	2500      	movs	r5, #0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2106      	movs	r1, #6
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	4798      	blx	r3
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	4629      	mov	r1, r5
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	47a0      	blx	r4
    }
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bdb0      	pop	{r4, r5, r7, pc}

080066fa <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80066fa:	b5b0      	push	{r4, r5, r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	460b      	mov	r3, r1
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006710:	681c      	ldr	r4, [r3, #0]
 8006712:	7afb      	ldrb	r3, [r7, #11]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 8006718:	2501      	movs	r5, #1
 800671a:	e000      	b.n	800671e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 800671c:	2500      	movs	r5, #0
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	ee07 2a90 	vmov	s15, r2
 800672e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006732:	eeb0 0a67 	vmov.f32	s0, s15
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	4798      	blx	r3
 800673a:	4603      	mov	r3, r0
 800673c:	461a      	mov	r2, r3
 800673e:	4629      	mov	r1, r5
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	47a0      	blx	r4
    }
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bdb0      	pop	{r4, r5, r7, pc}

0800674c <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	460b      	mov	r3, r1
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	7afa      	ldrb	r2, [r7, #11]
 8006766:	2a01      	cmp	r2, #1
 8006768:	d101      	bne.n	800676e <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 800676a:	2101      	movs	r1, #1
 800676c:	e000      	b.n	8006770 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 800676e:	2100      	movs	r1, #0
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	4798      	blx	r3
    }
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 800677e:	b580      	push	{r7, lr}
 8006780:	b082      	sub	sp, #8
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
    }
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
    }
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
    }
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
    }
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80067fe:	bf00      	nop
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2101      	movs	r1, #1
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf0c      	ite	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	2300      	movne	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1ef      	bne.n	8006800 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3380      	adds	r3, #128	@ 0x80
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	2a01      	cmp	r2, #1
 8006850:	d101      	bne.n	8006856 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8006852:	2201      	movs	r2, #1
 8006854:	e000      	b.n	8006858 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8006856:	2200      	movs	r2, #0
 8006858:	4611      	mov	r1, r2
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
    }
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
 8006872:	4613      	mov	r3, r2
 8006874:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	78ba      	ldrb	r2, [r7, #2]
 8006882:	2a01      	cmp	r2, #1
 8006884:	d101      	bne.n	800688a <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006886:	2201      	movs	r2, #1
 8006888:	e000      	b.n	800688c <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800688a:	2200      	movs	r2, #0
 800688c:	78f9      	ldrb	r1, [r7, #3]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
    }
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
    }
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068d6:	bf00      	nop
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	4611      	mov	r1, r2
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2100      	movs	r1, #0
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2102      	movs	r1, #2
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2103      	movs	r1, #3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2203      	movs	r2, #3
 8006978:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2106      	movs	r1, #6
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2204      	movs	r2, #4
 80069a0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2107      	movs	r1, #7
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2205      	movs	r2, #5
 80069c8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069cc:	bf00      	nop
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2104      	movs	r1, #4
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2206      	movs	r2, #6
 80069f0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2105      	movs	r1, #5
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2207      	movs	r2, #7
 8006a18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a5c <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8006a34:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4906      	ldr	r1, [pc, #24]	@ (8006a60 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a52:	bf00      	nop
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000271 	.word	0x20000271
 8006a60:	20000274 	.word	0x20000274

08006a64 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	b2d1      	uxtb	r1, r2
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a8c:	bf00      	nop
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2200      	movs	r2, #0
 8006ace:	2102      	movs	r1, #2
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2209      	movs	r2, #9
 8006ad8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006af6:	681c      	ldr	r4, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd90      	pop	{r4, r7, pc}

08006b22 <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8006b22:	b590      	push	{r4, r7, lr}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006b34:	681c      	ldr	r4, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	ee07 2a90 	vmov	s15, r2
 8006b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	461a      	mov	r2, r3
 8006b56:	2103      	movs	r1, #3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd90      	pop	{r4, r7, pc}

08006b6c <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006b7e:	681c      	ldr	r4, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	ee07 2a90 	vmov	s15, r2
 8006b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b94:	eeb0 0a67 	vmov.f32	s0, s15
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	2106      	movs	r1, #6
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd90      	pop	{r4, r7, pc}

08006bb6 <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8006bb6:	b590      	push	{r4, r7, lr}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006bc8:	681c      	ldr	r4, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	ee07 2a90 	vmov	s15, r2
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eeb0 0a67 	vmov.f32	s0, s15
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	2107      	movs	r1, #7
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd90      	pop	{r4, r7, pc}

08006c00 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8006c00:	b590      	push	{r4, r7, lr}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006c12:	681c      	ldr	r4, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	ee07 2a90 	vmov	s15, r2
 8006c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c28:	eeb0 0a67 	vmov.f32	s0, s15
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
 8006c30:	4603      	mov	r3, r0
 8006c32:	461a      	mov	r2, r3
 8006c34:	2104      	movs	r1, #4
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd90      	pop	{r4, r7, pc}

08006c4a <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8006c4a:	b590      	push	{r4, r7, lr}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006c5c:	681c      	ldr	r4, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	ee07 2a90 	vmov	s15, r2
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	eeb0 0a67 	vmov.f32	s0, s15
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2105      	movs	r1, #5
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd90      	pop	{r4, r7, pc}

08006c94 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8006ca6:	681c      	ldr	r4, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd90      	pop	{r4, r7, pc}

08006cd0 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006cd0:	b5b0      	push	{r4, r5, r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8006ce6:	681c      	ldr	r4, [r3, #0]
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8006cee:	2501      	movs	r5, #1
 8006cf0:	e000      	b.n	8006cf4 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	4798      	blx	r3
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	4629      	mov	r1, r5
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bdb0      	pop	{r4, r5, r7, pc}

08006d1e <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006d6a:	b5b0      	push	{r4, r5, r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	607b      	str	r3, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	72fb      	strb	r3, [r7, #11]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006d84:	681c      	ldr	r4, [r3, #0]
 8006d86:	7abb      	ldrb	r3, [r7, #10]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006d8c:	2501      	movs	r5, #1
 8006d8e:	e000      	b.n	8006d92 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006d90:	2500      	movs	r5, #0
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	ee07 2a90 	vmov	s15, r2
 8006da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da6:	eeb0 0a67 	vmov.f32	s0, s15
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	4798      	blx	r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	7af9      	ldrb	r1, [r7, #11]
 8006db2:	462a      	mov	r2, r5
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}

08006dc8 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006dc8:	b5b0      	push	{r4, r5, r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006ddc:	681c      	ldr	r4, [r3, #0]
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006de4:	2501      	movs	r5, #1
 8006de6:	e000      	b.n	8006dea <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006de8:	2500      	movs	r5, #0
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2106      	movs	r1, #6
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4629      	mov	r1, r5
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bdb0      	pop	{r4, r5, r7, pc}

08006e14 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006e14:	b5b0      	push	{r4, r5, r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006e2a:	681c      	ldr	r4, [r3, #0]
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006e32:	2501      	movs	r5, #1
 8006e34:	e000      	b.n	8006e38 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006e36:	2500      	movs	r5, #0
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	ee07 2a90 	vmov	s15, r2
 8006e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	4798      	blx	r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	461a      	mov	r2, r3
 8006e58:	4629      	mov	r1, r5
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bdb0      	pop	{r4, r5, r7, pc}

08006e6e <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	460b      	mov	r3, r1
 8006e78:	607a      	str	r2, [r7, #4]
 8006e7a:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	7afa      	ldrb	r2, [r7, #11]
 8006e88:	2a01      	cmp	r2, #1
 8006e8a:	d101      	bne.n	8006e90 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	e000      	b.n	8006e92 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006e90:	2100      	movs	r1, #0
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	78fa      	ldrb	r2, [r7, #3]
 8006f58:	2a01      	cmp	r2, #1
 8006f5a:	d101      	bne.n	8006f60 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	e000      	b.n	8006f62 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006f60:	2200      	movs	r2, #0
 8006f62:	4611      	mov	r1, r2
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
 8006f84:	4613      	mov	r3, r2
 8006f86:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	78ba      	ldrb	r2, [r7, #2]
 8006f94:	2a01      	cmp	r2, #1
 8006f96:	d101      	bne.n	8006f9c <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006f98:	2201      	movs	r2, #1
 8006f9a:	e000      	b.n	8006f9e <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	78f9      	ldrb	r1, [r7, #3]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	4798      	blx	r3
 8006ff0:	4603      	mov	r3, r0
    }
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8007014:	b5b0      	push	{r4, r5, r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8007024:	3b01      	subs	r3, #1
 8007026:	2b07      	cmp	r3, #7
 8007028:	f200 80fe 	bhi.w	8007228 <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 800702c:	a201      	add	r2, pc, #4	@ (adr r2, 8007034 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007055 	.word	0x08007055
 8007038:	08007081 	.word	0x08007081
 800703c:	080070af 	.word	0x080070af
 8007040:	080070f3 	.word	0x080070f3
 8007044:	08007139 	.word	0x08007139
 8007048:	0800717f 	.word	0x0800717f
 800704c:	080071c5 	.word	0x080071c5
 8007050:	0800720b 	.word	0x0800720b
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800705c:	681c      	ldr	r4, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6a12      	ldr	r2, [r2, #32]
 800706c:	7b92      	ldrb	r2, [r2, #14]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	4798      	blx	r3
 8007074:	4603      	mov	r3, r0
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	47a0      	blx	r4
 800707c:	4603      	mov	r3, r0
 800707e:	e0d4      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8007088:	681c      	ldr	r4, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6a12      	ldr	r2, [r2, #32]
 8007098:	3228      	adds	r2, #40	@ 0x28
 800709a:	7b92      	ldrb	r2, [r2, #14]
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	47a0      	blx	r4
 80070aa:	4603      	mov	r3, r0
 80070ac:	e0bd      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80070b6:	681c      	ldr	r4, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80070c0:	681d      	ldr	r5, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6a12      	ldr	r2, [r2, #32]
 80070d0:	323c      	adds	r2, #60	@ 0x3c
 80070d2:	7b92      	ldrb	r2, [r2, #14]
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	47a8      	blx	r5
 80070e2:	eef0 7a40 	vmov.f32	s15, s0
 80070e6:	eeb0 0a67 	vmov.f32	s0, s15
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	47a0      	blx	r4
 80070ee:	4603      	mov	r3, r0
 80070f0:	e09b      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80070fa:	681c      	ldr	r4, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007104:	681d      	ldr	r5, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6a12      	ldr	r2, [r2, #32]
 8007114:	3278      	adds	r2, #120	@ 0x78
 8007116:	7b92      	ldrb	r2, [r2, #14]
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	4603      	mov	r3, r0
 8007120:	b29b      	uxth	r3, r3
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	47a8      	blx	r5
 8007128:	eef0 7a40 	vmov.f32	s15, s0
 800712c:	eeb0 0a67 	vmov.f32	s0, s15
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	47a0      	blx	r4
 8007134:	4603      	mov	r3, r0
 8007136:	e078      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007140:	681c      	ldr	r4, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800714a:	681d      	ldr	r5, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6a12      	ldr	r2, [r2, #32]
 800715a:	328c      	adds	r2, #140	@ 0x8c
 800715c:	7b92      	ldrb	r2, [r2, #14]
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
 8007164:	4603      	mov	r3, r0
 8007166:	b29b      	uxth	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	47a8      	blx	r5
 800716e:	eef0 7a40 	vmov.f32	s15, s0
 8007172:	eeb0 0a67 	vmov.f32	s0, s15
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	47a0      	blx	r4
 800717a:	4603      	mov	r3, r0
 800717c:	e055      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007186:	681c      	ldr	r4, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8007190:	681d      	ldr	r5, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6a12      	ldr	r2, [r2, #32]
 80071a0:	3250      	adds	r2, #80	@ 0x50
 80071a2:	7b92      	ldrb	r2, [r2, #14]
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
 80071aa:	4603      	mov	r3, r0
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	47a8      	blx	r5
 80071b4:	eef0 7a40 	vmov.f32	s15, s0
 80071b8:	eeb0 0a67 	vmov.f32	s0, s15
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	47a0      	blx	r4
 80071c0:	4603      	mov	r3, r0
 80071c2:	e032      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071cc:	681c      	ldr	r4, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80071d6:	681d      	ldr	r5, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6a12      	ldr	r2, [r2, #32]
 80071e6:	3264      	adds	r2, #100	@ 0x64
 80071e8:	7b92      	ldrb	r2, [r2, #14]
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	47a8      	blx	r5
 80071fa:	eef0 7a40 	vmov.f32	s15, s0
 80071fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	47a0      	blx	r4
 8007206:	4603      	mov	r3, r0
 8007208:	e00f      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2104      	movs	r1, #4
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
 800721a:	4603      	mov	r3, r0
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8007220:	2301      	movs	r3, #1
 8007222:	e002      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8007224:	2300      	movs	r3, #0
 8007226:	e000      	b.n	800722a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8007228:	2300      	movs	r3, #0
    }
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bdb0      	pop	{r4, r5, r7, pc}
 8007232:	bf00      	nop

08007234 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6898      	ldr	r0, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	899b      	ldrh	r3, [r3, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	4619      	mov	r1, r3
 8007248:	f007 f942 	bl	800e4d0 <HAL_GPIO_WritePin>
    }
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007264:	d303      	bcc.n	800726e <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800726c:	e000      	b.n	8007270 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800726e:	683b      	ldr	r3, [r7, #0]
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	db05      	blt.n	8007298 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007292:	da01      	bge.n	8007298 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	e00c      	b.n	80072b2 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800729e:	db06      	blt.n	80072ae <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	da03      	bge.n	80072ae <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 80072ac:	e001      	b.n	80072b2 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 80072ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
	...

080072c0 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80072ec <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 80072d8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80072dc:	eeb0 0a67 	vmov.f32	s0, s15
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	3c74242a 	.word	0x3c74242a

080072f0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 80072fc:	edd7 7a00 	vldr	s15, [r7]
 8007300:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007334 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 8007304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730c:	d80a      	bhi.n	8007324 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800730e:	ed97 7a00 	vldr	s14, [r7]
 8007312:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007338 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 8007316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800731a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731e:	ee17 3a90 	vmov	r3, s15
 8007322:	e000      	b.n	8007326 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	4674241b 	.word	0x4674241b
 8007338:	3c74242a 	.word	0x3c74242a

0800733c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 8007348:	887b      	ldrh	r3, [r7, #2]
 800734a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734e:	d209      	bcs.n	8007364 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8007350:	887b      	ldrh	r3, [r7, #2]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800735a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007378 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 800735e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007362:	e001      	b.n	8007368 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8007364:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800737c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 8007368:	eeb0 0a67 	vmov.f32	s0, s15
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	4168d4fe 	.word	0x4168d4fe
 800737c:	00000000 	.word	0x00000000

08007380 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800738c:	edd7 7a00 	vldr	s15, [r7]
 8007390:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80073c4 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 8007394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	d80b      	bhi.n	80073b6 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800739e:	ed97 7a00 	vldr	s14, [r7]
 80073a2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80073c8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 80073a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ae:	ee17 3a90 	vmov	r3, s15
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	e000      	b.n	80073b8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	4768c671 	.word	0x4768c671
 80073c8:	4168d4fe 	.word	0x4168d4fe

080073cc <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 80073d8:	887b      	ldrh	r3, [r7, #2]
 80073da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073de:	d209      	bcs.n	80073f4 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 80073e0:	887b      	ldrh	r3, [r7, #2]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ea:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007408 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 80073ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073f2:	e001      	b.n	80073f8 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80073f4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800740c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 80073f8:	eeb0 0a67 	vmov.f32	s0, s15
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	4168d4fe 	.word	0x4168d4fe
 800740c:	00000000 	.word	0x00000000

08007410 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800741c:	edd7 7a00 	vldr	s15, [r7]
 8007420:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007454 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 8007424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742c:	d80b      	bhi.n	8007446 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800742e:	ed97 7a00 	vldr	s14, [r7]
 8007432:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007458 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 8007436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800743a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743e:	ee17 3a90 	vmov	r3, s15
 8007442:	b29b      	uxth	r3, r3
 8007444:	e000      	b.n	8007448 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	4768c671 	.word	0x4768c671
 8007458:	4168d4fe 	.word	0x4168d4fe

0800745c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8007468:	887b      	ldrh	r3, [r7, #2]
 800746a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800746e:	d209      	bcs.n	8007484 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8007470:	887b      	ldrh	r3, [r7, #2]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800747a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007498 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800747e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007482:	e001      	b.n	8007488 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007484:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800749c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8007488:	eeb0 0a67 	vmov.f32	s0, s15
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	4174240b 	.word	0x4174240b
 800749c:	00000000 	.word	0x00000000

080074a0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 80074ac:	edd7 7a00 	vldr	s15, [r7]
 80074b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80074e4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 80074b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074bc:	d80b      	bhi.n	80074d6 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80074be:	ed97 7a00 	vldr	s14, [r7]
 80074c2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80074e8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 80074c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ce:	ee17 3a90 	vmov	r3, s15
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	e000      	b.n	80074d8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	4673e702 	.word	0x4673e702
 80074e8:	4174240b 	.word	0x4174240b

080074ec <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80074f8:	887b      	ldrh	r3, [r7, #2]
 80074fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074fe:	d209      	bcs.n	8007514 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8007500:	887b      	ldrh	r3, [r7, #2]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800750a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007528 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800750e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007512:	e001      	b.n	8007518 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007514:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800752c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8007518:	eeb0 0a67 	vmov.f32	s0, s15
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	3e742401 	.word	0x3e742401
 800752c:	00000000 	.word	0x00000000

08007530 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800753c:	edd7 7a00 	vldr	s15, [r7]
 8007540:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007574 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 8007544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754c:	d80b      	bhi.n	8007566 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800754e:	ed97 7a00 	vldr	s14, [r7]
 8007552:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007578 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 8007556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800755a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800755e:	ee17 3a90 	vmov	r3, s15
 8007562:	b29b      	uxth	r3, r3
 8007564:	e000      	b.n	8007568 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	447414bf 	.word	0x447414bf
 8007578:	3e742401 	.word	0x3e742401

0800757c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8007588:	887b      	ldrh	r3, [r7, #2]
 800758a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800758e:	d219      	bcs.n	80075c4 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007590:	887b      	ldrh	r3, [r7, #2]
 8007592:	4618      	mov	r0, r3
 8007594:	f7f8 fff6 	bl	8000584 <__aeabi_i2d>
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	4b0e      	ldr	r3, [pc, #56]	@ (80075d8 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800759e:	f7f8 fea5 	bl	80002ec <__adddf3>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4610      	mov	r0, r2
 80075a8:	4619      	mov	r1, r3
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	4b0b      	ldr	r3, [pc, #44]	@ (80075dc <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 80075b0:	f7f9 f852 	bl	8000658 <__aeabi_dmul>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4610      	mov	r0, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	f7f9 fb24 	bl	8000c08 <__aeabi_d2f>
 80075c0:	4603      	mov	r3, r0
 80075c2:	e001      	b.n	80075c8 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 80075c4:	f04f 0300 	mov.w	r3, #0
}
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eeb0 0a67 	vmov.f32	s0, s15
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	3fe00000 	.word	0x3fe00000
 80075dc:	402e8000 	.word	0x402e8000

080075e0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80075ec:	edd7 7a00 	vldr	s15, [r7]
 80075f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800762c <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 80075f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fc:	d80f      	bhi.n	800761e <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80075fe:	ed97 7a00 	vldr	s14, [r7]
 8007602:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8007630 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 8007606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800760a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800760e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007616:	ee17 3a90 	vmov	r3, s15
 800761a:	b29b      	uxth	r3, r3
 800761c:	e000      	b.n	8007620 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	4673e180 	.word	0x4673e180
 8007630:	41740000 	.word	0x41740000

08007634 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8007640:	887b      	ldrh	r3, [r7, #2]
 8007642:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007646:	d209      	bcs.n	800765c <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8007648:	887b      	ldrh	r3, [r7, #2]
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007652:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007670 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8007656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800765a:	e001      	b.n	8007660 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800765c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007674 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8007660:	eeb0 0a67 	vmov.f32	s0, s15
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	3d7423f4 	.word	0x3d7423f4
 8007674:	00000000 	.word	0x00000000

08007678 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8007684:	edd7 7a00 	vldr	s15, [r7]
 8007688:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80076bc <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 800768c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007694:	d80b      	bhi.n	80076ae <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8007696:	ed97 7a00 	vldr	s14, [r7]
 800769a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80076c0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 800769e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a6:	ee17 3a90 	vmov	r3, s15
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	e000      	b.n	80076b0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	44742023 	.word	0x44742023
 80076c0:	3d7423f4 	.word	0x3d7423f4

080076c4 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076da:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80076f0 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 80076de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80076e2:	eeb0 0a67 	vmov.f32	s0, s15
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	3783956e 	.word	0x3783956e

080076f4 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8007700:	edd7 7a02 	vldr	s15, [r7, #8]
 8007704:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800773c <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 8007708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800770c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007710:	d80c      	bhi.n	800772c <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007712:	ed97 7a02 	vldr	s14, [r7, #8]
 8007716:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007740 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 800771a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800771e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007722:	edc7 7a01 	vstr	s15, [r7, #4]
 8007726:	793b      	ldrb	r3, [r7, #4]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	e000      	b.n	800772e <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	3b8311d9 	.word	0x3b8311d9
 8007740:	3783956e 	.word	0x3783956e

08007744 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800775a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007770 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800775e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007762:	eeb0 0a67 	vmov.f32	s0, s15
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	3783956e 	.word	0x3783956e

08007774 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8007780:	edd7 7a02 	vldr	s15, [r7, #8]
 8007784:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80077bc <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8007788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800778c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007790:	d80c      	bhi.n	80077ac <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007792:	ed97 7a02 	vldr	s14, [r7, #8]
 8007796:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80077c0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800779a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800779e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80077a6:	793b      	ldrb	r3, [r7, #4]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e000      	b.n	80077ae <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	3b8311d9 	.word	0x3b8311d9
 80077c0:	3783956e 	.word	0x3783956e

080077c4 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077da:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80077f0 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80077de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80077e2:	eeb0 0a67 	vmov.f32	s0, s15
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	3783956e 	.word	0x3783956e

080077f4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8007800:	edd7 7a02 	vldr	s15, [r7, #8]
 8007804:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800783c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8007808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800780c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007810:	d80c      	bhi.n	800782c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007812:	ed97 7a02 	vldr	s14, [r7, #8]
 8007816:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007840 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800781a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800781e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007822:	edc7 7a01 	vstr	s15, [r7, #4]
 8007826:	793b      	ldrb	r3, [r7, #4]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	e000      	b.n	800782e <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	3b8311d9 	.word	0x3b8311d9
 8007840:	3783956e 	.word	0x3783956e

08007844 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d80a      	bhi.n	800786c <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	3301      	adds	r3, #1
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007862:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007880 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 8007866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800786a:	e001      	b.n	8007870 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800786c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007884 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 8007870:	eeb0 0a67 	vmov.f32	s0, s15
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	43bb8000 	.word	0x43bb8000
 8007884:	00000000 	.word	0x00000000

08007888 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8007894:	edd7 7a02 	vldr	s15, [r7, #8]
 8007898:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007924 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 800789c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a4:	d836      	bhi.n	8007914 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 80078a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80078aa:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007928 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 80078ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078b2:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80078b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80078ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078be:	edc7 7a01 	vstr	s15, [r7, #4]
 80078c2:	793b      	ldrb	r3, [r7, #4]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80078d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078d6:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 80078da:	edd7 7a04 	vldr	s15, [r7, #16]
 80078de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ea:	d50a      	bpl.n	8007902 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80078ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80078f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80078f8:	793b      	ldrb	r3, [r7, #4]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	e009      	b.n	8007916 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 8007902:	edd7 7a05 	vldr	s15, [r7, #20]
 8007906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800790a:	edc7 7a01 	vstr	s15, [r7, #4]
 800790e:	793b      	ldrb	r3, [r7, #4]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	e000      	b.n	8007916 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	45bb8000 	.word	0x45bb8000
 8007928:	43bb8000 	.word	0x43bb8000

0800792c <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 8007938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800793c:	2b00      	cmp	r3, #0
 800793e:	db0a      	blt.n	8007956 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	3301      	adds	r3, #1
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800794c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007968 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 8007950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007954:	e001      	b.n	800795a <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 8007956:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800796c <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 800795a:	eeb0 0a67 	vmov.f32	s0, s15
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	41fa0000 	.word	0x41fa0000
 800796c:	00000000 	.word	0x00000000

08007970 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800797c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007980:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007a0c <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 8007984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798c:	d836      	bhi.n	80079fc <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800798e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007992:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007a10 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 8007996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800799a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800799e:	edd7 7a05 	vldr	s15, [r7, #20]
 80079a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80079aa:	793b      	ldrb	r3, [r7, #4]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80079ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079be:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 80079c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80079c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d2:	d50a      	bpl.n	80079ea <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80079d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80079d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80079e0:	793b      	ldrb	r3, [r7, #4]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	e009      	b.n	80079fe <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 80079ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80079ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80079f6:	793b      	ldrb	r3, [r7, #4]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	e000      	b.n	80079fe <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	457a0000 	.word	0x457a0000
 8007a10:	41fa0000 	.word	0x41fa0000

08007a14 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
  reset_device();
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3394      	adds	r3, #148	@ 0x94
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3
  get_status();
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	330c      	adds	r3, #12
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	edd2 7a05 	vldr	s15, [r2, #20]
 8007a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	4798      	blx	r3
 8007a52:	4603      	mov	r3, r0
 8007a54:	461a      	mov	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	edd2 7a06 	vldr	s15, [r2, #24]
 8007a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	4798      	blx	r3
 8007a74:	4603      	mov	r3, r0
 8007a76:	461a      	mov	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	edd2 7a07 	vldr	s15, [r2, #28]
 8007a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	4798      	blx	r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	461a      	mov	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	edd2 7a08 	vldr	s15, [r2, #32]
 8007ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	4798      	blx	r3
 8007ab8:	4603      	mov	r3, r0
 8007aba:	461a      	mov	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8007ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	4798      	blx	r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	461a      	mov	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007aea:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007dbc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007aee:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	ed93 7a00 	vldr	s14, [r3]
 8007af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b00:	edc7 7a01 	vstr	s15, [r7, #4]
 8007b04:	793b      	ldrb	r3, [r7, #4]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007b14:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007dbc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007b18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	ed93 7a00 	vldr	s14, [r3]
 8007b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8007b2e:	793b      	ldrb	r3, [r7, #4]
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007b3e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8007dbc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007b42:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	ed93 7a00 	vldr	s14, [r3]
 8007b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b54:	edc7 7a01 	vstr	s15, [r7, #4]
 8007b58:	793b      	ldrb	r3, [r7, #4]
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8007b68:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8007dbc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007b6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	ed93 7a00 	vldr	s14, [r3]
 8007b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b7e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007b82:	793b      	ldrb	r3, [r7, #4]
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8007b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	4798      	blx	r3
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8007bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	4798      	blx	r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8007be0:	eeb0 0a67 	vmov.f32	s0, s15
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	4798      	blx	r3
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8007c02:	eeb0 0a67 	vmov.f32	s0, s15
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8007c30:	eeb0 0a67 	vmov.f32	s0, s15
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	4798      	blx	r3
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8007c52:	eeb0 0a67 	vmov.f32	s0, s15
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	4798      	blx	r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8007c98:	2104      	movs	r1, #4
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8007cae:	2105      	movs	r1, #5
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8007cc4:	2106      	movs	r1, #6
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8007cda:	2107      	movs	r1, #7
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8007cf0:	2108      	movs	r1, #8
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8007d06:	2109      	movs	r1, #9
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8007d1c:	210a      	movs	r1, #10
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007d32:	210b      	movs	r1, #11
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007d48:	210c      	movs	r1, #12
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8007d5e:	210d      	movs	r1, #13
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8007d74:	210e      	movs	r1, #14
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8007d8a:	210f      	movs	r1, #15
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8007da0:	2110      	movs	r1, #16
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8007db6:	2111      	movs	r1, #17
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	e001      	b.n	8007dc0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007dbc:	43800000 	.word	0x43800000
 8007dc0:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8007dd2:	2113      	movs	r1, #19
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8007de8:	2114      	movs	r1, #20
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007dfe:	2116      	movs	r1, #22
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8007e14:	2117      	movs	r1, #23
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3354      	adds	r3, #84	@ 0x54
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8007e28:	4611      	mov	r1, r2
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	4798      	blx	r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f083 0301 	eor.w	r3, r3, #1
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	460b      	mov	r3, r1
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e5e:	681c      	ldr	r4, [r3, #0]
 8007e60:	7afa      	ldrb	r2, [r7, #11]
 8007e62:	2300      	movs	r3, #0
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	490c      	ldr	r1, [pc, #48]	@ (8007ea0 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a09      	ldr	r2, [pc, #36]	@ (8007ea4 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007e80:	4907      	ldr	r1, [pc, #28]	@ (8007ea0 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a05      	ldr	r2, [pc, #20]	@ (8007ea8 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007e92:	4904      	ldr	r1, [pc, #16]	@ (8007ea4 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	4798      	blx	r3
}
 8007e98:	bf00      	nop
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd90      	pop	{r4, r7, pc}
 8007ea0:	20000274 	.word	0x20000274
 8007ea4:	20000294 	.word	0x20000294
 8007ea8:	2000029c 	.word	0x2000029c

08007eac <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ec0:	681c      	ldr	r4, [r3, #0]
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	9201      	str	r2, [sp, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	9200      	str	r2, [sp, #0]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	4917      	ldr	r1, [pc, #92]	@ (8007f2c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a14      	ldr	r2, [pc, #80]	@ (8007f30 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007ee0:	4912      	ldr	r1, [pc, #72]	@ (8007f2c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a10      	ldr	r2, [pc, #64]	@ (8007f34 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007ef2:	490f      	ldr	r1, [pc, #60]	@ (8007f30 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a19      	ldr	r1, [r3, #32]
 8007efc:	78fa      	ldrb	r2, [r7, #3]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	7b9b      	ldrb	r3, [r3, #14]
 8007f0a:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	7bfa      	ldrb	r2, [r7, #15]
 8007f18:	4906      	ldr	r1, [pc, #24]	@ (8007f34 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007f22:	68bb      	ldr	r3, [r7, #8]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd90      	pop	{r4, r7, pc}
 8007f2c:	20000274 	.word	0x20000274
 8007f30:	20000294 	.word	0x20000294
 8007f34:	2000029c 	.word	0x2000029c

08007f38 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007f38:	b590      	push	{r4, r7, lr}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	460b      	mov	r3, r1
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f4e:	681c      	ldr	r4, [r3, #0]
 8007f50:	7afa      	ldrb	r2, [r7, #11]
 8007f52:	2300      	movs	r3, #0
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	490c      	ldr	r1, [pc, #48]	@ (8007f90 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a09      	ldr	r2, [pc, #36]	@ (8007f94 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007f70:	4907      	ldr	r1, [pc, #28]	@ (8007f90 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a05      	ldr	r2, [pc, #20]	@ (8007f98 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007f82:	4904      	ldr	r1, [pc, #16]	@ (8007f94 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	4798      	blx	r3
}
 8007f88:	bf00      	nop
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd90      	pop	{r4, r7, pc}
 8007f90:	20000274 	.word	0x20000274
 8007f94:	20000294 	.word	0x20000294
 8007f98:	2000029c 	.word	0x2000029c

08007f9c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007fb0:	681c      	ldr	r4, [r3, #0]
 8007fb2:	78fb      	ldrb	r3, [r7, #3]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	9201      	str	r2, [sp, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	9200      	str	r2, [sp, #0]
 8007fbc:	2204      	movs	r2, #4
 8007fbe:	490c      	ldr	r1, [pc, #48]	@ (8007ff0 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a09      	ldr	r2, [pc, #36]	@ (8007ff4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007fd0:	4907      	ldr	r1, [pc, #28]	@ (8007ff0 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a05      	ldr	r2, [pc, #20]	@ (8007ff8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007fe2:	4904      	ldr	r1, [pc, #16]	@ (8007ff4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd90      	pop	{r4, r7, pc}
 8007ff0:	20000274 	.word	0x20000274
 8007ff4:	20000294 	.word	0x20000294
 8007ff8:	2000029c 	.word	0x2000029c

08007ffc <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af02      	add	r7, sp, #8
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	460b      	mov	r3, r1
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008012:	681c      	ldr	r4, [r3, #0]
 8008014:	7afa      	ldrb	r2, [r7, #11]
 8008016:	2300      	movs	r3, #0
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	2205      	movs	r2, #5
 8008022:	490c      	ldr	r1, [pc, #48]	@ (8008054 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a09      	ldr	r2, [pc, #36]	@ (8008058 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8008034:	4907      	ldr	r1, [pc, #28]	@ (8008054 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a05      	ldr	r2, [pc, #20]	@ (800805c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8008046:	4904      	ldr	r1, [pc, #16]	@ (8008058 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	4798      	blx	r3
}
 800804c:	bf00      	nop
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	bd90      	pop	{r4, r7, pc}
 8008054:	20000274 	.word	0x20000274
 8008058:	20000294 	.word	0x20000294
 800805c:	2000029c 	.word	0x2000029c

08008060 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8008060:	b590      	push	{r4, r7, lr}
 8008062:	b085      	sub	sp, #20
 8008064:	af02      	add	r7, sp, #8
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008070:	d21f      	bcs.n	80080b2 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800807a:	681c      	ldr	r4, [r3, #0]
 800807c:	2300      	movs	r3, #0
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	2300      	movs	r3, #0
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2206      	movs	r2, #6
 8008088:	490c      	ldr	r1, [pc, #48]	@ (80080bc <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a09      	ldr	r2, [pc, #36]	@ (80080c0 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 800809a:	4908      	ldr	r1, [pc, #32]	@ (80080bc <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a06      	ldr	r2, [pc, #24]	@ (80080c4 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 80080ac:	4904      	ldr	r1, [pc, #16]	@ (80080c0 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd90      	pop	{r4, r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000274 	.word	0x20000274
 80080c0:	20000294 	.word	0x20000294
 80080c4:	2000029c 	.word	0x2000029c

080080c8 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80080c8:	b590      	push	{r4, r7, lr}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	460b      	mov	r3, r1
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080dc:	d220      	bcs.n	8008120 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080e6:	681c      	ldr	r4, [r3, #0]
 80080e8:	7afa      	ldrb	r2, [r7, #11]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	4613      	mov	r3, r2
 80080f4:	2207      	movs	r2, #7
 80080f6:	490c      	ldr	r1, [pc, #48]	@ (8008128 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a09      	ldr	r2, [pc, #36]	@ (800812c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8008108:	4907      	ldr	r1, [pc, #28]	@ (8008128 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a05      	ldr	r2, [pc, #20]	@ (8008130 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800811a:	4904      	ldr	r1, [pc, #16]	@ (800812c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	4798      	blx	r3
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bd90      	pop	{r4, r7, pc}
 8008128:	20000274 	.word	0x20000274
 800812c:	20000294 	.word	0x20000294
 8008130:	2000029c 	.word	0x2000029c

08008134 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008134:	b590      	push	{r4, r7, lr}
 8008136:	b087      	sub	sp, #28
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	72fb      	strb	r3, [r7, #11]
 8008142:	4613      	mov	r3, r2
 8008144:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800814e:	681c      	ldr	r4, [r3, #0]
 8008150:	7af9      	ldrb	r1, [r7, #11]
 8008152:	7abb      	ldrb	r3, [r7, #10]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	9201      	str	r2, [sp, #4]
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	460b      	mov	r3, r1
 800815c:	2208      	movs	r2, #8
 800815e:	490c      	ldr	r1, [pc, #48]	@ (8008190 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a09      	ldr	r2, [pc, #36]	@ (8008194 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8008170:	4907      	ldr	r1, [pc, #28]	@ (8008190 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a05      	ldr	r2, [pc, #20]	@ (8008198 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8008182:	4904      	ldr	r1, [pc, #16]	@ (8008194 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	4798      	blx	r3
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	bd90      	pop	{r4, r7, pc}
 8008190:	20000274 	.word	0x20000274
 8008194:	20000294 	.word	0x20000294
 8008198:	2000029c 	.word	0x2000029c

0800819c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800819c:	b590      	push	{r4, r7, lr}
 800819e:	b085      	sub	sp, #20
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
 80081a8:	4613      	mov	r3, r2
 80081aa:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081b4:	681c      	ldr	r4, [r3, #0]
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	78bb      	ldrb	r3, [r7, #2]
 80081ba:	2100      	movs	r1, #0
 80081bc:	9101      	str	r1, [sp, #4]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	4613      	mov	r3, r2
 80081c2:	2209      	movs	r2, #9
 80081c4:	490c      	ldr	r1, [pc, #48]	@ (80081f8 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a09      	ldr	r2, [pc, #36]	@ (80081fc <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 80081d6:	4908      	ldr	r1, [pc, #32]	@ (80081f8 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a06      	ldr	r2, [pc, #24]	@ (8008200 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 80081e8:	4904      	ldr	r1, [pc, #16]	@ (80081fc <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd90      	pop	{r4, r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000274 	.word	0x20000274
 80081fc:	20000294 	.word	0x20000294
 8008200:	2000029c 	.word	0x2000029c

08008204 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8008204:	b590      	push	{r4, r7, lr}
 8008206:	b085      	sub	sp, #20
 8008208:	af02      	add	r7, sp, #8
 800820a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008214:	681c      	ldr	r4, [r3, #0]
 8008216:	2300      	movs	r3, #0
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	2300      	movs	r3, #0
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	2300      	movs	r3, #0
 8008220:	220a      	movs	r2, #10
 8008222:	490c      	ldr	r1, [pc, #48]	@ (8008254 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a09      	ldr	r2, [pc, #36]	@ (8008258 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8008234:	4907      	ldr	r1, [pc, #28]	@ (8008254 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a05      	ldr	r2, [pc, #20]	@ (800825c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 8008246:	4904      	ldr	r1, [pc, #16]	@ (8008258 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	4798      	blx	r3
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	bd90      	pop	{r4, r7, pc}
 8008254:	20000274 	.word	0x20000274
 8008258:	20000294 	.word	0x20000294
 800825c:	2000029c 	.word	0x2000029c

08008260 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8008260:	b590      	push	{r4, r7, lr}
 8008262:	b085      	sub	sp, #20
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008270:	681c      	ldr	r4, [r3, #0]
 8008272:	2300      	movs	r3, #0
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	2300      	movs	r3, #0
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	2300      	movs	r3, #0
 800827c:	220b      	movs	r2, #11
 800827e:	490c      	ldr	r1, [pc, #48]	@ (80082b0 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a09      	ldr	r2, [pc, #36]	@ (80082b4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008290:	4907      	ldr	r1, [pc, #28]	@ (80082b0 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a05      	ldr	r2, [pc, #20]	@ (80082b8 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 80082a2:	4904      	ldr	r1, [pc, #16]	@ (80082b4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd90      	pop	{r4, r7, pc}
 80082b0:	20000274 	.word	0x20000274
 80082b4:	20000294 	.word	0x20000294
 80082b8:	2000029c 	.word	0x2000029c

080082bc <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b085      	sub	sp, #20
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082cc:	681c      	ldr	r4, [r3, #0]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	2300      	movs	r3, #0
 80082d8:	220c      	movs	r2, #12
 80082da:	490c      	ldr	r1, [pc, #48]	@ (800830c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a09      	ldr	r2, [pc, #36]	@ (8008310 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 80082ec:	4907      	ldr	r1, [pc, #28]	@ (800830c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a05      	ldr	r2, [pc, #20]	@ (8008314 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 80082fe:	4904      	ldr	r1, [pc, #16]	@ (8008310 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	bd90      	pop	{r4, r7, pc}
 800830c:	20000274 	.word	0x20000274
 8008310:	20000294 	.word	0x20000294
 8008314:	2000029c 	.word	0x2000029c

08008318 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b085      	sub	sp, #20
 800831c:	af02      	add	r7, sp, #8
 800831e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008328:	681c      	ldr	r4, [r3, #0]
 800832a:	2300      	movs	r3, #0
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	2300      	movs	r3, #0
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	2300      	movs	r3, #0
 8008334:	220d      	movs	r2, #13
 8008336:	490c      	ldr	r1, [pc, #48]	@ (8008368 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a09      	ldr	r2, [pc, #36]	@ (800836c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8008348:	4907      	ldr	r1, [pc, #28]	@ (8008368 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a05      	ldr	r2, [pc, #20]	@ (8008370 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 800835a:	4904      	ldr	r1, [pc, #16]	@ (800836c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	4798      	blx	r3
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	bd90      	pop	{r4, r7, pc}
 8008368:	20000274 	.word	0x20000274
 800836c:	20000294 	.word	0x20000294
 8008370:	2000029c 	.word	0x2000029c

08008374 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b085      	sub	sp, #20
 8008378:	af02      	add	r7, sp, #8
 800837a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008384:	681c      	ldr	r4, [r3, #0]
 8008386:	2300      	movs	r3, #0
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	2300      	movs	r3, #0
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2300      	movs	r3, #0
 8008390:	220e      	movs	r2, #14
 8008392:	490c      	ldr	r1, [pc, #48]	@ (80083c4 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a09      	ldr	r2, [pc, #36]	@ (80083c8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 80083a4:	4907      	ldr	r1, [pc, #28]	@ (80083c4 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a05      	ldr	r2, [pc, #20]	@ (80083cc <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 80083b6:	4904      	ldr	r1, [pc, #16]	@ (80083c8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd90      	pop	{r4, r7, pc}
 80083c4:	20000274 	.word	0x20000274
 80083c8:	20000294 	.word	0x20000294
 80083cc:	2000029c 	.word	0x2000029c

080083d0 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 80083d0:	b590      	push	{r4, r7, lr}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083e0:	681c      	ldr	r4, [r3, #0]
 80083e2:	2300      	movs	r3, #0
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	2300      	movs	r3, #0
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	2300      	movs	r3, #0
 80083ec:	220f      	movs	r2, #15
 80083ee:	490c      	ldr	r1, [pc, #48]	@ (8008420 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a09      	ldr	r2, [pc, #36]	@ (8008424 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8008400:	4907      	ldr	r1, [pc, #28]	@ (8008420 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a05      	ldr	r2, [pc, #20]	@ (8008428 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 8008412:	4904      	ldr	r1, [pc, #16]	@ (8008424 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	4798      	blx	r3
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bd90      	pop	{r4, r7, pc}
 8008420:	20000274 	.word	0x20000274
 8008424:	20000294 	.word	0x20000294
 8008428:	2000029c 	.word	0x2000029c

0800842c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b085      	sub	sp, #20
 8008430:	af02      	add	r7, sp, #8
 8008432:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800843c:	681c      	ldr	r4, [r3, #0]
 800843e:	2300      	movs	r3, #0
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	2300      	movs	r3, #0
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	2210      	movs	r2, #16
 800844a:	490c      	ldr	r1, [pc, #48]	@ (800847c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a09      	ldr	r2, [pc, #36]	@ (8008480 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 800845c:	4907      	ldr	r1, [pc, #28]	@ (800847c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a05      	ldr	r2, [pc, #20]	@ (8008484 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 800846e:	4904      	ldr	r1, [pc, #16]	@ (8008480 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	4798      	blx	r3
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bd90      	pop	{r4, r7, pc}
 800847c:	20000274 	.word	0x20000274
 8008480:	20000294 	.word	0x20000294
 8008484:	2000029c 	.word	0x2000029c

08008488 <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8008488:	b590      	push	{r4, r7, lr}
 800848a:	b085      	sub	sp, #20
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008498:	681c      	ldr	r4, [r3, #0]
 800849a:	2300      	movs	r3, #0
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	2300      	movs	r3, #0
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	2300      	movs	r3, #0
 80084a4:	2211      	movs	r2, #17
 80084a6:	490c      	ldr	r1, [pc, #48]	@ (80084d8 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a09      	ldr	r2, [pc, #36]	@ (80084dc <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 80084b8:	4907      	ldr	r1, [pc, #28]	@ (80084d8 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a05      	ldr	r2, [pc, #20]	@ (80084e0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 80084ca:	4904      	ldr	r1, [pc, #16]	@ (80084dc <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd90      	pop	{r4, r7, pc}
 80084d8:	20000274 	.word	0x20000274
 80084dc:	20000294 	.word	0x20000294
 80084e0:	2000029c 	.word	0x2000029c

080084e4 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084f4:	681c      	ldr	r4, [r3, #0]
 80084f6:	2300      	movs	r3, #0
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	2300      	movs	r3, #0
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	2300      	movs	r3, #0
 8008500:	2212      	movs	r2, #18
 8008502:	4912      	ldr	r1, [pc, #72]	@ (800854c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a0f      	ldr	r2, [pc, #60]	@ (8008550 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8008514:	490d      	ldr	r1, [pc, #52]	@ (800854c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a0b      	ldr	r2, [pc, #44]	@ (8008554 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8008526:	490a      	ldr	r1, [pc, #40]	@ (8008550 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2202      	movs	r2, #2
 8008538:	4906      	ldr	r1, [pc, #24]	@ (8008554 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8008542:	89fb      	ldrh	r3, [r7, #14]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	bd90      	pop	{r4, r7, pc}
 800854c:	20000274 	.word	0x20000274
 8008550:	20000294 	.word	0x20000294
 8008554:	2000029c 	.word	0x2000029c

08008558 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8008558:	b590      	push	{r4, r7, lr}
 800855a:	b087      	sub	sp, #28
 800855c:	af02      	add	r7, sp, #8
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	460b      	mov	r3, r1
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800856e:	681c      	ldr	r4, [r3, #0]
 8008570:	7afa      	ldrb	r2, [r7, #11]
 8008572:	2300      	movs	r3, #0
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	2201      	movs	r2, #1
 800857e:	4903      	ldr	r1, [pc, #12]	@ (800858c <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	47a0      	blx	r4
}
 8008584:	bf00      	nop
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	bd90      	pop	{r4, r7, pc}
 800858c:	20000274 	.word	0x20000274

08008590 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008590:	b590      	push	{r4, r7, lr}
 8008592:	b085      	sub	sp, #20
 8008594:	af02      	add	r7, sp, #8
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085a4:	681c      	ldr	r4, [r3, #0]
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	2200      	movs	r2, #0
 80085aa:	9201      	str	r2, [sp, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	9200      	str	r2, [sp, #0]
 80085b0:	2202      	movs	r2, #2
 80085b2:	4903      	ldr	r1, [pc, #12]	@ (80085c0 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	47a0      	blx	r4
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd90      	pop	{r4, r7, pc}
 80085c0:	20000274 	.word	0x20000274

080085c4 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80085c4:	b590      	push	{r4, r7, lr}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	460b      	mov	r3, r1
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085da:	681c      	ldr	r4, [r3, #0]
 80085dc:	7afa      	ldrb	r2, [r7, #11]
 80085de:	2300      	movs	r3, #0
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	4613      	mov	r3, r2
 80085e8:	2203      	movs	r2, #3
 80085ea:	4903      	ldr	r1, [pc, #12]	@ (80085f8 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	47a0      	blx	r4
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd90      	pop	{r4, r7, pc}
 80085f8:	20000274 	.word	0x20000274

080085fc <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b085      	sub	sp, #20
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008610:	681c      	ldr	r4, [r3, #0]
 8008612:	78fb      	ldrb	r3, [r7, #3]
 8008614:	2200      	movs	r2, #0
 8008616:	9201      	str	r2, [sp, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	9200      	str	r2, [sp, #0]
 800861c:	2204      	movs	r2, #4
 800861e:	4903      	ldr	r1, [pc, #12]	@ (800862c <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	47a0      	blx	r4
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bd90      	pop	{r4, r7, pc}
 800862c:	20000274 	.word	0x20000274

08008630 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b087      	sub	sp, #28
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	460b      	mov	r3, r1
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008646:	681c      	ldr	r4, [r3, #0]
 8008648:	7afa      	ldrb	r2, [r7, #11]
 800864a:	2300      	movs	r3, #0
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	4613      	mov	r3, r2
 8008654:	2205      	movs	r2, #5
 8008656:	4903      	ldr	r1, [pc, #12]	@ (8008664 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	47a0      	blx	r4
}
 800865c:	bf00      	nop
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	bd90      	pop	{r4, r7, pc}
 8008664:	20000274 	.word	0x20000274

08008668 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8008668:	b590      	push	{r4, r7, lr}
 800866a:	b085      	sub	sp, #20
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800867a:	681c      	ldr	r4, [r3, #0]
 800867c:	2300      	movs	r3, #0
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	2300      	movs	r3, #0
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2206      	movs	r2, #6
 8008688:	4903      	ldr	r1, [pc, #12]	@ (8008698 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	47a0      	blx	r4
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	bd90      	pop	{r4, r7, pc}
 8008696:	bf00      	nop
 8008698:	20000274 	.word	0x20000274

0800869c <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b087      	sub	sp, #28
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	460b      	mov	r3, r1
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80086b2:	681c      	ldr	r4, [r3, #0]
 80086b4:	7afa      	ldrb	r2, [r7, #11]
 80086b6:	2300      	movs	r3, #0
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	4613      	mov	r3, r2
 80086c0:	2207      	movs	r2, #7
 80086c2:	4903      	ldr	r1, [pc, #12]	@ (80086d0 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	47a0      	blx	r4
}
 80086c8:	bf00      	nop
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd90      	pop	{r4, r7, pc}
 80086d0:	20000274 	.word	0x20000274

080086d4 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80086d4:	b590      	push	{r4, r7, lr}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af02      	add	r7, sp, #8
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	72fb      	strb	r3, [r7, #11]
 80086e2:	4613      	mov	r3, r2
 80086e4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80086ee:	681c      	ldr	r4, [r3, #0]
 80086f0:	7af9      	ldrb	r1, [r7, #11]
 80086f2:	7abb      	ldrb	r3, [r7, #10]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	9201      	str	r2, [sp, #4]
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	460b      	mov	r3, r1
 80086fc:	2208      	movs	r2, #8
 80086fe:	4903      	ldr	r1, [pc, #12]	@ (800870c <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	47a0      	blx	r4
}
 8008704:	bf00      	nop
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	bd90      	pop	{r4, r7, pc}
 800870c:	20000274 	.word	0x20000274

08008710 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8008710:	b590      	push	{r4, r7, lr}
 8008712:	b085      	sub	sp, #20
 8008714:	af02      	add	r7, sp, #8
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
 800871c:	4613      	mov	r3, r2
 800871e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008728:	681c      	ldr	r4, [r3, #0]
 800872a:	78fa      	ldrb	r2, [r7, #3]
 800872c:	78bb      	ldrb	r3, [r7, #2]
 800872e:	2100      	movs	r1, #0
 8008730:	9101      	str	r1, [sp, #4]
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	4613      	mov	r3, r2
 8008736:	2209      	movs	r2, #9
 8008738:	4903      	ldr	r1, [pc, #12]	@ (8008748 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	47a0      	blx	r4
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	bd90      	pop	{r4, r7, pc}
 8008746:	bf00      	nop
 8008748:	20000274 	.word	0x20000274

0800874c <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800874c:	b590      	push	{r4, r7, lr}
 800874e:	b085      	sub	sp, #20
 8008750:	af02      	add	r7, sp, #8
 8008752:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800875c:	681c      	ldr	r4, [r3, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	2300      	movs	r3, #0
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	2300      	movs	r3, #0
 8008768:	220a      	movs	r2, #10
 800876a:	4903      	ldr	r1, [pc, #12]	@ (8008778 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	47a0      	blx	r4
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	bd90      	pop	{r4, r7, pc}
 8008778:	20000274 	.word	0x20000274

0800877c <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800877c:	b590      	push	{r4, r7, lr}
 800877e:	b085      	sub	sp, #20
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800878c:	681c      	ldr	r4, [r3, #0]
 800878e:	2300      	movs	r3, #0
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	2300      	movs	r3, #0
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	2300      	movs	r3, #0
 8008798:	220b      	movs	r2, #11
 800879a:	4903      	ldr	r1, [pc, #12]	@ (80087a8 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	47a0      	blx	r4
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd90      	pop	{r4, r7, pc}
 80087a8:	20000274 	.word	0x20000274

080087ac <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80087bc:	681c      	ldr	r4, [r3, #0]
 80087be:	2300      	movs	r3, #0
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	2300      	movs	r3, #0
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	2300      	movs	r3, #0
 80087c8:	220c      	movs	r2, #12
 80087ca:	4903      	ldr	r1, [pc, #12]	@ (80087d8 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	47a0      	blx	r4
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd90      	pop	{r4, r7, pc}
 80087d8:	20000274 	.word	0x20000274

080087dc <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80087dc:	b590      	push	{r4, r7, lr}
 80087de:	b085      	sub	sp, #20
 80087e0:	af02      	add	r7, sp, #8
 80087e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80087ec:	681c      	ldr	r4, [r3, #0]
 80087ee:	2300      	movs	r3, #0
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	2300      	movs	r3, #0
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	220d      	movs	r2, #13
 80087fa:	4903      	ldr	r1, [pc, #12]	@ (8008808 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	47a0      	blx	r4
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	bd90      	pop	{r4, r7, pc}
 8008808:	20000274 	.word	0x20000274

0800880c <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800880c:	b590      	push	{r4, r7, lr}
 800880e:	b085      	sub	sp, #20
 8008810:	af02      	add	r7, sp, #8
 8008812:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800881c:	681c      	ldr	r4, [r3, #0]
 800881e:	2300      	movs	r3, #0
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	2300      	movs	r3, #0
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	2300      	movs	r3, #0
 8008828:	220e      	movs	r2, #14
 800882a:	4903      	ldr	r1, [pc, #12]	@ (8008838 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	47a0      	blx	r4
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bd90      	pop	{r4, r7, pc}
 8008838:	20000274 	.word	0x20000274

0800883c <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800883c:	b590      	push	{r4, r7, lr}
 800883e:	b085      	sub	sp, #20
 8008840:	af02      	add	r7, sp, #8
 8008842:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800884c:	681c      	ldr	r4, [r3, #0]
 800884e:	2300      	movs	r3, #0
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	2300      	movs	r3, #0
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	2300      	movs	r3, #0
 8008858:	220f      	movs	r2, #15
 800885a:	4903      	ldr	r1, [pc, #12]	@ (8008868 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	47a0      	blx	r4
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	bd90      	pop	{r4, r7, pc}
 8008868:	20000274 	.word	0x20000274

0800886c <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b085      	sub	sp, #20
 8008870:	af02      	add	r7, sp, #8
 8008872:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800887c:	681c      	ldr	r4, [r3, #0]
 800887e:	2300      	movs	r3, #0
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	2300      	movs	r3, #0
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2300      	movs	r3, #0
 8008888:	2210      	movs	r2, #16
 800888a:	4903      	ldr	r1, [pc, #12]	@ (8008898 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	47a0      	blx	r4
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	bd90      	pop	{r4, r7, pc}
 8008898:	20000274 	.word	0x20000274

0800889c <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b085      	sub	sp, #20
 80088a0:	af02      	add	r7, sp, #8
 80088a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80088ac:	681c      	ldr	r4, [r3, #0]
 80088ae:	2300      	movs	r3, #0
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	2300      	movs	r3, #0
 80088b8:	2211      	movs	r2, #17
 80088ba:	4903      	ldr	r1, [pc, #12]	@ (80088c8 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	47a0      	blx	r4
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd90      	pop	{r4, r7, pc}
 80088c8:	20000274 	.word	0x20000274

080088cc <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 80088cc:	b590      	push	{r4, r7, lr}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80088dc:	681c      	ldr	r4, [r3, #0]
 80088de:	2300      	movs	r3, #0
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	2300      	movs	r3, #0
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	2300      	movs	r3, #0
 80088e8:	2212      	movs	r2, #18
 80088ea:	4903      	ldr	r1, [pc, #12]	@ (80088f8 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	47a0      	blx	r4
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd90      	pop	{r4, r7, pc}
 80088f8:	20000274 	.word	0x20000274

080088fc <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a09      	ldr	r2, [pc, #36]	@ (8008934 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008910:	4909      	ldr	r1, [pc, #36]	@ (8008938 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a06      	ldr	r2, [pc, #24]	@ (800893c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8008922:	4904      	ldr	r1, [pc, #16]	@ (8008934 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8008928:	4b04      	ldr	r3, [pc, #16]	@ (800893c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20000294 	.word	0x20000294
 8008938:	20000274 	.word	0x20000274
 800893c:	2000029c 	.word	0x2000029c

08008940 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8008940:	b590      	push	{r4, r7, lr}
 8008942:	b089      	sub	sp, #36	@ 0x24
 8008944:	af02      	add	r7, sp, #8
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800894c:	4b17      	ldr	r3, [pc, #92]	@ (80089ac <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800894e:	2200      	movs	r2, #0
 8008950:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008952:	2300      	movs	r3, #0
 8008954:	75fb      	strb	r3, [r7, #23]
 8008956:	e020      	b.n	800899a <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008960:	681c      	ldr	r4, [r3, #0]
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	461a      	mov	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	1899      	adds	r1, r3, r2
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	461a      	mov	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	441a      	add	r2, r3
 8008976:	230a      	movs	r3, #10
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	2302      	movs	r3, #2
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8008980:	2300      	movs	r3, #0
 8008982:	75bb      	strb	r3, [r7, #22]
 8008984:	e003      	b.n	800898e <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8008986:	bf00      	nop
 8008988:	7dbb      	ldrb	r3, [r7, #22]
 800898a:	3301      	adds	r3, #1
 800898c:	75bb      	strb	r3, [r7, #22]
 800898e:	7dbb      	ldrb	r3, [r7, #22]
 8008990:	2b7c      	cmp	r3, #124	@ 0x7c
 8008992:	d9f8      	bls.n	8008986 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	3301      	adds	r3, #1
 8008998:	75fb      	strb	r3, [r7, #23]
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d9db      	bls.n	8008958 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 80089a0:	bf00      	nop
}
 80089a2:	bf00      	nop
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd90      	pop	{r4, r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000271 	.word	0x20000271

080089b0 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80089c2:	2301      	movs	r3, #1
 80089c4:	74fb      	strb	r3, [r7, #19]
 80089c6:	e016      	b.n	80089f6 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80089c8:	7cfb      	ldrb	r3, [r7, #19]
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	461a      	mov	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	7f1b      	ldrb	r3, [r3, #28]
 80089d2:	4413      	add	r3, r2
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	4413      	add	r3, r2
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	4619      	mov	r1, r3
 80089dc:	79fa      	ldrb	r2, [r7, #7]
 80089de:	7cfb      	ldrb	r3, [r7, #19]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	fa01 f303 	lsl.w	r3, r1, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80089f0:	7cfb      	ldrb	r3, [r7, #19]
 80089f2:	3301      	adds	r3, #1
 80089f4:	74fb      	strb	r3, [r7, #19]
 80089f6:	7cfb      	ldrb	r3, [r7, #19]
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d9e5      	bls.n	80089c8 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80089fc:	697b      	ldr	r3, [r7, #20]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
	...

08008a0c <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2118      	movs	r1, #24
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a32:	b292      	uxth	r2, r2
 8008a34:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	2b0e      	cmp	r3, #14
 8008a3a:	f200 8099 	bhi.w	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 8008a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a44 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a81 	.word	0x08008a81
 8008a48:	08008a91 	.word	0x08008a91
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008ab1 	.word	0x08008ab1
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008ad1 	.word	0x08008ad1
 8008a5c:	08008ae1 	.word	0x08008ae1
 8008a60:	08008af1 	.word	0x08008af1
 8008a64:	08008b01 	.word	0x08008b01
 8008a68:	08008b11 	.word	0x08008b11
 8008a6c:	08008b21 	.word	0x08008b21
 8008a70:	08008b31 	.word	0x08008b31
 8008a74:	08008b41 	.word	0x08008b41
 8008a78:	08008b51 	.word	0x08008b51
 8008a7c:	08008b61 	.word	0x08008b61
      state = pL6470_StatusRegister->HiZ;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8e:	e06f      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9e:	e067      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	73fb      	strb	r3, [r7, #15]
      break;
 8008aae:	e05f      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	73fb      	strb	r3, [r7, #15]
      break;
 8008abe:	e057      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ace:	e04f      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ade:	e047      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	73fb      	strb	r3, [r7, #15]
      break;
 8008aee:	e03f      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	73fb      	strb	r3, [r7, #15]
      break;
 8008afe:	e037      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0e:	e02f      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b14:	785b      	ldrb	r3, [r3, #1]
 8008b16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1e:	e027      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b24:	785b      	ldrb	r3, [r3, #1]
 8008b26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b2e:	e01f      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b34:	785b      	ldrb	r3, [r3, #1]
 8008b36:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3e:	e017      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b44:	785b      	ldrb	r3, [r3, #1]
 8008b46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4e:	e00f      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b5e:	e007      	b.n	8008b70 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6e:	bf00      	nop
  return state;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop

08008b7c <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8008b88:	78fb      	ldrb	r3, [r7, #3]
 8008b8a:	2b18      	cmp	r3, #24
 8008b8c:	d809      	bhi.n	8008ba2 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a19      	ldr	r1, [r3, #32]
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
 8008bbe:	e01a      	b.n	8008bf6 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	4413      	add	r3, r2
 8008be0:	2200      	movs	r2, #0
 8008be2:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	4413      	add	r3, r2
 8008bec:	2200      	movs	r2, #0
 8008bee:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	73fb      	strb	r3, [r7, #15]
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d9e1      	bls.n	8008bc0 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008c0a:	b480      	push	{r7}
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	603b      	str	r3, [r7, #0]
 8008c16:	4613      	mov	r3, r2
 8008c18:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	7f1b      	ldrb	r3, [r3, #28]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	4413      	add	r3, r2
 8008c24:	79fa      	ldrb	r2, [r7, #7]
 8008c26:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	7f1b      	ldrb	r3, [r3, #28]
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	4413      	add	r3, r2
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	7f1b      	ldrb	r3, [r3, #28]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	4413      	add	r3, r2
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	7f1b      	ldrb	r3, [r3, #28]
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	60da      	str	r2, [r3, #12]
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008c60:	b590      	push	{r4, r7, lr}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af02      	add	r7, sp, #8
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8008c70:	4b10      	ldr	r3, [pc, #64]	@ (8008cb4 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10a      	bne.n	8008c8e <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8008c78:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb4 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68b9      	ldr	r1, [r7, #8]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8008c96:	681c      	ldr	r4, [r3, #0]
 8008c98:	79fa      	ldrb	r2, [r7, #7]
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	47a0      	blx	r4
}
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd90      	pop	{r4, r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000271 	.word	0x20000271

08008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008cc8:	2300      	movs	r3, #0
 8008cca:	75bb      	strb	r3, [r7, #22]
 8008ccc:	e013      	b.n	8008cf6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]
 8008cd2:	e00a      	b.n	8008cea <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8008cd4:	7d7b      	ldrb	r3, [r7, #21]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	757a      	strb	r2, [r7, #21]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4413      	add	r3, r2
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d9f1      	bls.n	8008cd4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008cf0:	7dbb      	ldrb	r3, [r7, #22]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	75bb      	strb	r3, [r7, #22]
 8008cf6:	7dbb      	ldrb	r3, [r7, #22]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d9e8      	bls.n	8008cce <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	75fb      	strb	r3, [r7, #23]
 8008d00:	e1f1      	b.n	80090e6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	440b      	add	r3, r1
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	4619      	mov	r1, r3
 8008d12:	460b      	mov	r3, r1
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	1a5b      	subs	r3, r3, r1
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	441a      	add	r2, r3
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	440b      	add	r3, r1
 8008d22:	7b12      	ldrb	r2, [r2, #12]
 8008d24:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b12      	cmp	r3, #18
 8008d32:	f200 81d5 	bhi.w	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8008d36:	a201      	add	r2, pc, #4	@ (adr r2, 8008d3c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	080090e1 	.word	0x080090e1
 8008d40:	08008d89 	.word	0x08008d89
 8008d44:	08008e11 	.word	0x08008e11
 8008d48:	08008e41 	.word	0x08008e41
 8008d4c:	08008ea9 	.word	0x08008ea9
 8008d50:	08008ed7 	.word	0x08008ed7
 8008d54:	08008f3f 	.word	0x08008f3f
 8008d58:	08008f7b 	.word	0x08008f7b
 8008d5c:	08008fe3 	.word	0x08008fe3
 8008d60:	0800907f 	.word	0x0800907f
 8008d64:	080090e1 	.word	0x080090e1
 8008d68:	080090e1 	.word	0x080090e1
 8008d6c:	080090e1 	.word	0x080090e1
 8008d70:	080090e1 	.word	0x080090e1
 8008d74:	080090e1 	.word	0x080090e1
 8008d78:	080090e1 	.word	0x080090e1
 8008d7c:	080090e1 	.word	0x080090e1
 8008d80:	080090e1 	.word	0x080090e1
 8008d84:	080090e1 	.word	0x080090e1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	7819      	ldrb	r1, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a18      	ldr	r0, [r3, #32]
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	011b      	lsls	r3, r3, #4
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4403      	add	r3, r0
 8008da8:	781a      	ldrb	r2, [r3, #0]
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	4403      	add	r3, r0
 8008db0:	430a      	orrs	r2, r1
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6a19      	ldr	r1, [r3, #32]
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	440b      	add	r3, r1
 8008dce:	7b9b      	ldrb	r3, [r3, #14]
 8008dd0:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75bb      	strb	r3, [r7, #22]
 8008dd6:	e016      	b.n	8008e06 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	4413      	add	r3, r2
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	7d39      	ldrb	r1, [r7, #20]
 8008de4:	7dbb      	ldrb	r3, [r7, #22]
 8008de6:	1acb      	subs	r3, r1, r3
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	fa22 f103 	lsr.w	r1, r2, r3
 8008dee:	7dbb      	ldrb	r3, [r7, #22]
 8008df0:	005a      	lsls	r2, r3, #1
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	4413      	add	r3, r2
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	b2ca      	uxtb	r2, r1
 8008dfe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008e00:	7dbb      	ldrb	r3, [r7, #22]
 8008e02:	3301      	adds	r3, #1
 8008e04:	75bb      	strb	r3, [r7, #22]
 8008e06:	7d3a      	ldrb	r2, [r7, #20]
 8008e08:	7dbb      	ldrb	r3, [r7, #22]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d2e4      	bcs.n	8008dd8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008e0e:	e167      	b.n	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	4413      	add	r3, r2
 8008e16:	7819      	ldrb	r1, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a18      	ldr	r0, [r3, #32]
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	4413      	add	r3, r2
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4403      	add	r3, r0
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	4403      	add	r3, r0
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]
      break;
 8008e3e:	e14f      	b.n	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4413      	add	r3, r2
 8008e46:	7819      	ldrb	r1, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	4413      	add	r3, r2
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	00db      	lsls	r3, r3, #3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	4403      	add	r3, r0
 8008e5e:	7a1a      	ldrb	r2, [r3, #8]
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4403      	add	r3, r0
 8008e66:	430a      	orrs	r2, r1
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	75bb      	strb	r3, [r7, #22]
 8008e70:	e016      	b.n	8008ea0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4413      	add	r3, r2
 8008e7a:	689a      	ldr	r2, [r3, #8]
 8008e7c:	7dbb      	ldrb	r3, [r7, #22]
 8008e7e:	f1c3 0303 	rsb	r3, r3, #3
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	fa22 f103 	lsr.w	r1, r2, r3
 8008e88:	7dbb      	ldrb	r3, [r7, #22]
 8008e8a:	005a      	lsls	r2, r3, #1
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	4413      	add	r3, r2
 8008e90:	461a      	mov	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4413      	add	r3, r2
 8008e96:	b2ca      	uxtb	r2, r1
 8008e98:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e9a:	7dbb      	ldrb	r3, [r7, #22]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	75bb      	strb	r3, [r7, #22]
 8008ea0:	7dbb      	ldrb	r3, [r7, #22]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d9e5      	bls.n	8008e72 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008ea6:	e11b      	b.n	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	7819      	ldrb	r1, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	4413      	add	r3, r2
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	4413      	add	r3, r2
 8008ec4:	4403      	add	r3, r0
 8008ec6:	7a1a      	ldrb	r2, [r3, #8]
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4403      	add	r3, r0
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	b2d2      	uxtb	r2, r2
 8008ed2:	701a      	strb	r2, [r3, #0]
      break;
 8008ed4:	e104      	b.n	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	7819      	ldrb	r1, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	4413      	add	r3, r2
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4403      	add	r3, r0
 8008ef4:	7a1a      	ldrb	r2, [r3, #8]
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4403      	add	r3, r0
 8008efc:	430a      	orrs	r2, r1
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008f02:	2301      	movs	r3, #1
 8008f04:	75bb      	strb	r3, [r7, #22]
 8008f06:	e016      	b.n	8008f36 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	4413      	add	r3, r2
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	7dbb      	ldrb	r3, [r7, #22]
 8008f14:	f1c3 0303 	rsb	r3, r3, #3
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	fa22 f103 	lsr.w	r1, r2, r3
 8008f1e:	7dbb      	ldrb	r3, [r7, #22]
 8008f20:	005a      	lsls	r2, r3, #1
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	4413      	add	r3, r2
 8008f26:	461a      	mov	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	b2ca      	uxtb	r2, r1
 8008f2e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008f30:	7dbb      	ldrb	r3, [r7, #22]
 8008f32:	3301      	adds	r3, #1
 8008f34:	75bb      	strb	r3, [r7, #22]
 8008f36:	7dbb      	ldrb	r3, [r7, #22]
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d9e5      	bls.n	8008f08 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008f3c:	e0d0      	b.n	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008f3e:	2301      	movs	r3, #1
 8008f40:	75bb      	strb	r3, [r7, #22]
 8008f42:	e016      	b.n	8008f72 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	011b      	lsls	r3, r3, #4
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	7dbb      	ldrb	r3, [r7, #22]
 8008f50:	f1c3 0303 	rsb	r3, r3, #3
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	fa22 f103 	lsr.w	r1, r2, r3
 8008f5a:	7dbb      	ldrb	r3, [r7, #22]
 8008f5c:	005a      	lsls	r2, r3, #1
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	4413      	add	r3, r2
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	b2ca      	uxtb	r2, r1
 8008f6a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008f6c:	7dbb      	ldrb	r3, [r7, #22]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	75bb      	strb	r3, [r7, #22]
 8008f72:	7dbb      	ldrb	r3, [r7, #22]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d9e5      	bls.n	8008f44 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008f78:	e0b2      	b.n	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	4413      	add	r3, r2
 8008f80:	7819      	ldrb	r1, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	011b      	lsls	r3, r3, #4
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	4413      	add	r3, r2
 8008f96:	4403      	add	r3, r0
 8008f98:	7a1a      	ldrb	r2, [r3, #8]
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	4403      	add	r3, r0
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	b2d2      	uxtb	r2, r2
 8008fa4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	75bb      	strb	r3, [r7, #22]
 8008faa:	e016      	b.n	8008fda <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	7dbb      	ldrb	r3, [r7, #22]
 8008fb8:	f1c3 0303 	rsb	r3, r3, #3
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	fa22 f103 	lsr.w	r1, r2, r3
 8008fc2:	7dbb      	ldrb	r3, [r7, #22]
 8008fc4:	005a      	lsls	r2, r3, #1
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	4413      	add	r3, r2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4413      	add	r3, r2
 8008fd0:	b2ca      	uxtb	r2, r1
 8008fd2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008fd4:	7dbb      	ldrb	r3, [r7, #22]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	75bb      	strb	r3, [r7, #22]
 8008fda:	7dbb      	ldrb	r3, [r7, #22]
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d9e5      	bls.n	8008fac <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008fe0:	e07e      	b.n	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	b259      	sxtb	r1, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	4403      	add	r3, r0
 8009002:	791b      	ldrb	r3, [r3, #4]
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	b25b      	sxtb	r3, r3
 8009008:	430b      	orrs	r3, r1
 800900a:	b259      	sxtb	r1, r3
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	4413      	add	r3, r2
 8009012:	b2ca      	uxtb	r2, r1
 8009014:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	4413      	add	r3, r2
 800901c:	7819      	ldrb	r1, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	4413      	add	r3, r2
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	4613      	mov	r3, r2
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	4413      	add	r3, r2
 8009032:	4403      	add	r3, r0
 8009034:	7a1a      	ldrb	r2, [r3, #8]
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	4403      	add	r3, r0
 800903c:	430a      	orrs	r2, r1
 800903e:	b2d2      	uxtb	r2, r2
 8009040:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8009042:	2301      	movs	r3, #1
 8009044:	75bb      	strb	r3, [r7, #22]
 8009046:	e016      	b.n	8009076 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	011b      	lsls	r3, r3, #4
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	4413      	add	r3, r2
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	7dbb      	ldrb	r3, [r7, #22]
 8009054:	f1c3 0303 	rsb	r3, r3, #3
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	fa22 f103 	lsr.w	r1, r2, r3
 800905e:	7dbb      	ldrb	r3, [r7, #22]
 8009060:	005a      	lsls	r2, r3, #1
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	4413      	add	r3, r2
 8009066:	461a      	mov	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4413      	add	r3, r2
 800906c:	b2ca      	uxtb	r2, r1
 800906e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8009070:	7dbb      	ldrb	r3, [r7, #22]
 8009072:	3301      	adds	r3, #1
 8009074:	75bb      	strb	r3, [r7, #22]
 8009076:	7dbb      	ldrb	r3, [r7, #22]
 8009078:	2b03      	cmp	r3, #3
 800907a:	d9e5      	bls.n	8009048 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800907c:	e030      	b.n	80090e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4413      	add	r3, r2
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	b259      	sxtb	r1, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	4413      	add	r3, r2
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	4403      	add	r3, r0
 800909e:	791b      	ldrb	r3, [r3, #4]
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	b25b      	sxtb	r3, r3
 80090a4:	430b      	orrs	r3, r1
 80090a6:	b259      	sxtb	r1, r3
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	4413      	add	r3, r2
 80090ae:	b2ca      	uxtb	r2, r1
 80090b0:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	4413      	add	r3, r2
 80090b8:	7819      	ldrb	r1, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	4413      	add	r3, r2
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	4613      	mov	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	4413      	add	r3, r2
 80090ce:	4403      	add	r3, r0
 80090d0:	7a1a      	ldrb	r2, [r3, #8]
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4403      	add	r3, r0
 80090d8:	430a      	orrs	r2, r1
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]
      break;
 80090de:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	3301      	adds	r3, #1
 80090e4:	75fb      	strb	r3, [r7, #23]
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	f67f ae0a 	bls.w	8008d02 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 80090ee:	bf00      	nop
 80090f0:	bf00      	nop
 80090f2:	371c      	adds	r7, #28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8009108:	edd7 7a00 	vldr	s15, [r7]
 800910c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009114:	db1e      	blt.n	8009154 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8009116:	edd7 7a00 	vldr	s15, [r7]
 800911a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800911e:	ee17 2a90 	vmov	r2, s15
 8009122:	edd7 7a00 	vldr	s15, [r7]
 8009126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800912a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800912e:	ed97 7a00 	vldr	s14, [r7]
 8009132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009136:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800913a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800913e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009142:	bf4c      	ite	mi
 8009144:	2301      	movmi	r3, #1
 8009146:	2300      	movpl	r3, #0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f083 0301 	eor.w	r3, r3, #1
 800914e:	b2db      	uxtb	r3, r3
 8009150:	4413      	add	r3, r2
 8009152:	e01a      	b.n	800918a <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8009154:	edd7 7a00 	vldr	s15, [r7]
 8009158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800915c:	ee17 2a90 	vmov	r2, s15
 8009160:	edd7 7a00 	vldr	s15, [r7]
 8009164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800916c:	ed97 7a00 	vldr	s14, [r7]
 8009170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009174:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8009178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800917c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009180:	d501      	bpl.n	8009186 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8009186:	2300      	movs	r3, #0
 8009188:	1ad3      	subs	r3, r2, r3
    }
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8009196:	b580      	push	{r7, lr}
 8009198:	b086      	sub	sp, #24
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	4613      	mov	r3, r2
 80091a2:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6918      	ldr	r0, [r3, #16]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8a9b      	ldrh	r3, [r3, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	4619      	mov	r1, r3
 80091b0:	f005 f98e 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6998      	ldr	r0, [r3, #24]
 80091b8:	88fa      	ldrh	r2, [r7, #6]
 80091ba:	2364      	movs	r3, #100	@ 0x64
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	f006 f9b6 	bl	800f52e <HAL_SPI_Receive>
 80091c2:	4603      	mov	r3, r0
 80091c4:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6918      	ldr	r0, [r3, #16]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8a9b      	ldrh	r3, [r3, #20]
 80091ce:	2201      	movs	r2, #1
 80091d0:	4619      	mov	r1, r3
 80091d2:	f005 f97d 	bl	800e4d0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e000      	b.n	80091e2 <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 80091e0:	2300      	movs	r3, #0
    }
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4613      	mov	r3, r2
 80091f6:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6918      	ldr	r0, [r3, #16]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8a9b      	ldrh	r3, [r3, #20]
 8009200:	2200      	movs	r2, #0
 8009202:	4619      	mov	r1, r3
 8009204:	f005 f964 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6998      	ldr	r0, [r3, #24]
 800920c:	88fa      	ldrh	r2, [r7, #6]
 800920e:	2364      	movs	r3, #100	@ 0x64
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	f006 f850 	bl	800f2b6 <HAL_SPI_Transmit>
 8009216:	4603      	mov	r3, r0
 8009218:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6918      	ldr	r0, [r3, #16]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	8a9b      	ldrh	r3, [r3, #20]
 8009222:	2201      	movs	r2, #1
 8009224:	4619      	mov	r1, r3
 8009226:	f005 f953 	bl	800e4d0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8009234:	2300      	movs	r3, #0
    }
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800923e:	b580      	push	{r7, lr}
 8009240:	b088      	sub	sp, #32
 8009242:	af02      	add	r7, sp, #8
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	607a      	str	r2, [r7, #4]
 800924a:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6918      	ldr	r0, [r3, #16]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8a9b      	ldrh	r3, [r3, #20]
 8009254:	2200      	movs	r2, #0
 8009256:	4619      	mov	r1, r3
 8009258:	f005 f93a 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6998      	ldr	r0, [r3, #24]
 8009260:	887b      	ldrh	r3, [r7, #2]
 8009262:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009266:	9200      	str	r2, [sp, #0]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	f006 fa70 	bl	800f750 <HAL_SPI_TransmitReceive>
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d009      	beq.n	800928e <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6918      	ldr	r0, [r3, #16]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8a9b      	ldrh	r3, [r3, #20]
 8009282:	2201      	movs	r2, #1
 8009284:	4619      	mov	r1, r3
 8009286:	f005 f923 	bl	800e4d0 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e008      	b.n	80092a0 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6918      	ldr	r0, [r3, #16]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8a9b      	ldrh	r3, [r3, #20]
 8009296:	2201      	movs	r2, #1
 8009298:	4619      	mov	r1, r3
 800929a:	f005 f919 	bl	800e4d0 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800929e:	2300      	movs	r3, #0
    }
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80092be:	681c      	ldr	r4, [r3, #0]
 80092c0:	887b      	ldrh	r3, [r7, #2]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	47a0      	blx	r4
    }
 80092ca:	bf00      	nop
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd90      	pop	{r4, r7, pc}

080092d2 <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
 80092ec:	4603      	mov	r3, r0
    }
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3
 800930c:	4603      	mov	r3, r0
    }
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	b2d2      	uxtb	r2, r2
 800932e:	4611      	mov	r1, r2
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	4798      	blx	r3
 8009334:	4603      	mov	r3, r0
    }
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 800933e:	b590      	push	{r4, r7, lr}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800934e:	681c      	ldr	r4, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2100      	movs	r1, #0
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
 8009360:	4603      	mov	r3, r0
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	47a0      	blx	r4
 8009368:	4603      	mov	r3, r0
    }
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	bd90      	pop	{r4, r7, pc}

08009372 <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 8009372:	b590      	push	{r4, r7, lr}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009382:	681c      	ldr	r4, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2102      	movs	r1, #2
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	4798      	blx	r3
 8009394:	4603      	mov	r3, r0
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	47a0      	blx	r4
 800939c:	4603      	mov	r3, r0
    }
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd90      	pop	{r4, r7, pc}

080093a6 <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 80093a6:	b5b0      	push	{r4, r5, r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80093b6:	681c      	ldr	r4, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80093c0:	681d      	ldr	r5, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2103      	movs	r1, #3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	4798      	blx	r3
 80093d2:	4603      	mov	r3, r0
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	47a8      	blx	r5
 80093da:	eef0 7a40 	vmov.f32	s15, s0
 80093de:	eeb0 0a67 	vmov.f32	s0, s15
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	47a0      	blx	r4
 80093e6:	4603      	mov	r3, r0
    }
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bdb0      	pop	{r4, r5, r7, pc}

080093f0 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 80093f0:	b5b0      	push	{r4, r5, r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009400:	681c      	ldr	r4, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800940a:	681d      	ldr	r5, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2106      	movs	r1, #6
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	4798      	blx	r3
 800941c:	4603      	mov	r3, r0
 800941e:	b29b      	uxth	r3, r3
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	47a8      	blx	r5
 8009426:	eef0 7a40 	vmov.f32	s15, s0
 800942a:	eeb0 0a67 	vmov.f32	s0, s15
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	47a0      	blx	r4
 8009432:	4603      	mov	r3, r0
    }
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bdb0      	pop	{r4, r5, r7, pc}

0800943c <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 800943c:	b5b0      	push	{r4, r5, r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800944c:	681c      	ldr	r4, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009456:	681d      	ldr	r5, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2107      	movs	r1, #7
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	4798      	blx	r3
 8009468:	4603      	mov	r3, r0
 800946a:	b29b      	uxth	r3, r3
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	47a8      	blx	r5
 8009472:	eef0 7a40 	vmov.f32	s15, s0
 8009476:	eeb0 0a67 	vmov.f32	s0, s15
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	47a0      	blx	r4
 800947e:	4603      	mov	r3, r0
    }
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bdb0      	pop	{r4, r5, r7, pc}

08009488 <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8009488:	b5b0      	push	{r4, r5, r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009498:	681c      	ldr	r4, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80094a2:	681d      	ldr	r5, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2104      	movs	r1, #4
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
 80094b4:	4603      	mov	r3, r0
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	47a8      	blx	r5
 80094be:	eef0 7a40 	vmov.f32	s15, s0
 80094c2:	eeb0 0a67 	vmov.f32	s0, s15
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	47a0      	blx	r4
 80094ca:	4603      	mov	r3, r0
    }
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bdb0      	pop	{r4, r5, r7, pc}

080094d4 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 80094d4:	b5b0      	push	{r4, r5, r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80094e4:	681c      	ldr	r4, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80094ee:	681d      	ldr	r5, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2105      	movs	r1, #5
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	4798      	blx	r3
 8009500:	4603      	mov	r3, r0
 8009502:	b29b      	uxth	r3, r3
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	47a8      	blx	r5
 800950a:	eef0 7a40 	vmov.f32	s15, s0
 800950e:	eeb0 0a67 	vmov.f32	s0, s15
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	47a0      	blx	r4
 8009516:	4603      	mov	r3, r0
    }
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bdb0      	pop	{r4, r5, r7, pc}

08009520 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2104      	movs	r1, #4
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
 8009538:	4603      	mov	r3, r0
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 800953e:	2301      	movs	r3, #1
 8009540:	e000      	b.n	8009544 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 8009542:	2300      	movs	r3, #0
    }
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	b2d1      	uxtb	r1, r2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	4798      	blx	r3
    }
 800956c:	bf00      	nop
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
    }
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 8009592:	b590      	push	{r4, r7, lr}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80095a2:	681c      	ldr	r4, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2100      	movs	r1, #0
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	4798      	blx	r3
 80095b4:	4603      	mov	r3, r0
 80095b6:	461a      	mov	r2, r3
 80095b8:	2102      	movs	r1, #2
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	47a0      	blx	r4
    }
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd90      	pop	{r4, r7, pc}

080095c6 <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 80095c6:	b590      	push	{r4, r7, lr}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80095d8:	681c      	ldr	r4, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
 80095ea:	4603      	mov	r3, r0
 80095ec:	461a      	mov	r2, r3
 80095ee:	2102      	movs	r1, #2
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	47a0      	blx	r4
    }
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd90      	pop	{r4, r7, pc}

080095fc <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80095fc:	b590      	push	{r4, r7, lr}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800960e:	681c      	ldr	r4, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	ee07 2a90 	vmov	s15, r2
 8009620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009624:	eeb0 0a67 	vmov.f32	s0, s15
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	4798      	blx	r3
 800962c:	4603      	mov	r3, r0
 800962e:	461a      	mov	r2, r3
 8009630:	2106      	movs	r1, #6
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	47a0      	blx	r4
        return true;
 8009636:	2301      	movs	r3, #1
    }
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	bd90      	pop	{r4, r7, pc}

08009640 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8009640:	b590      	push	{r4, r7, lr}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009652:	681c      	ldr	r4, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	ee07 2a90 	vmov	s15, r2
 8009664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009668:	eeb0 0a67 	vmov.f32	s0, s15
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
 8009670:	4603      	mov	r3, r0
 8009672:	461a      	mov	r2, r3
 8009674:	2107      	movs	r1, #7
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	47a0      	blx	r4
        return true;
 800967a:	2301      	movs	r3, #1
    }
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	bd90      	pop	{r4, r7, pc}

08009684 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8009684:	b590      	push	{r4, r7, lr}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009696:	681c      	ldr	r4, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	ee07 2a90 	vmov	s15, r2
 80096a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ac:	eeb0 0a67 	vmov.f32	s0, s15
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	4798      	blx	r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	2104      	movs	r1, #4
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	47a0      	blx	r4
        return true;
 80096be:	2301      	movs	r3, #1
    }
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd90      	pop	{r4, r7, pc}

080096c8 <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 80096c8:	b590      	push	{r4, r7, lr}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80096da:	681c      	ldr	r4, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	ee07 2a90 	vmov	s15, r2
 80096ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f0:	eeb0 0a67 	vmov.f32	s0, s15
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	4798      	blx	r3
 80096f8:	4603      	mov	r3, r0
 80096fa:	461a      	mov	r2, r3
 80096fc:	2105      	movs	r1, #5
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	47a0      	blx	r4
        return true;
 8009702:	2301      	movs	r3, #1
    }
 8009704:	4618      	mov	r0, r3
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	bd90      	pop	{r4, r7, pc}

0800970c <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	2b07      	cmp	r3, #7
 800971c:	d901      	bls.n	8009722 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 800971e:	2300      	movs	r3, #0
 8009720:	e00f      	b.n	8009742 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3380      	adds	r3, #128	@ 0x80
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	78fa      	ldrb	r2, [r7, #3]
 800973a:	2115      	movs	r1, #21
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	4798      	blx	r3
        return true;
 8009740:	2301      	movs	r3, #1
    }
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 800974a:	b590      	push	{r4, r7, lr}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800975c:	681c      	ldr	r4, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
 800976e:	4603      	mov	r3, r0
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	47a0      	blx	r4
    }
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	bd90      	pop	{r4, r7, pc}

0800977e <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 800977e:	b5b0      	push	{r4, r5, r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	4613      	mov	r3, r2
 800978a:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8009794:	681c      	ldr	r4, [r3, #0]
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d101      	bne.n	80097a0 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 800979c:	2501      	movs	r5, #1
 800979e:	e000      	b.n	80097a2 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 80097a0:	2500      	movs	r5, #0
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	4798      	blx	r3
 80097b2:	4603      	mov	r3, r0
 80097b4:	461a      	mov	r2, r3
 80097b6:	4629      	mov	r1, r5
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	47a0      	blx	r4
    }
 80097bc:	bf00      	nop
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bdb0      	pop	{r4, r5, r7, pc}

080097c4 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	4798      	blx	r3
    }
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	4798      	blx	r3
    }
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8009800:	b5b0      	push	{r4, r5, r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	607b      	str	r3, [r7, #4]
 800980a:	460b      	mov	r3, r1
 800980c:	72fb      	strb	r3, [r7, #11]
 800980e:	4613      	mov	r3, r2
 8009810:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800981a:	681c      	ldr	r4, [r3, #0]
 800981c:	7abb      	ldrb	r3, [r7, #10]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009822:	2501      	movs	r5, #1
 8009824:	e000      	b.n	8009828 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009826:	2500      	movs	r5, #0
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	ee07 2a90 	vmov	s15, r2
 8009838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983c:	eeb0 0a67 	vmov.f32	s0, s15
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	4798      	blx	r3
 8009844:	4603      	mov	r3, r0
 8009846:	7af9      	ldrb	r1, [r7, #11]
 8009848:	462a      	mov	r2, r5
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	47a0      	blx	r4
    }
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bdb0      	pop	{r4, r5, r7, pc}

08009856 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8009856:	b5b0      	push	{r4, r5, r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	460b      	mov	r3, r1
 8009860:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800986a:	681c      	ldr	r4, [r3, #0]
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 8009872:	2501      	movs	r5, #1
 8009874:	e000      	b.n	8009878 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 8009876:	2500      	movs	r5, #0
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2106      	movs	r1, #6
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
 8009888:	4603      	mov	r3, r0
 800988a:	461a      	mov	r2, r3
 800988c:	4629      	mov	r1, r5
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	47a0      	blx	r4
    }
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bdb0      	pop	{r4, r5, r7, pc}

0800989a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800989a:	b5b0      	push	{r4, r5, r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	460b      	mov	r3, r1
 80098a4:	607a      	str	r2, [r7, #4]
 80098a6:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80098b0:	681c      	ldr	r4, [r3, #0]
 80098b2:	7afb      	ldrb	r3, [r7, #11]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d101      	bne.n	80098bc <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 80098b8:	2501      	movs	r5, #1
 80098ba:	e000      	b.n	80098be <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 80098bc:	2500      	movs	r5, #0
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	ee07 2a90 	vmov	s15, r2
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	eeb0 0a67 	vmov.f32	s0, s15
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	4798      	blx	r3
 80098da:	4603      	mov	r3, r0
 80098dc:	461a      	mov	r2, r3
 80098de:	4629      	mov	r1, r5
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	47a0      	blx	r4
    }
 80098e4:	bf00      	nop
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bdb0      	pop	{r4, r5, r7, pc}

080098ec <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	460b      	mov	r3, r1
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	7afa      	ldrb	r2, [r7, #11]
 8009906:	2a01      	cmp	r2, #1
 8009908:	d101      	bne.n	800990e <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 800990a:	2101      	movs	r1, #1
 800990c:	e000      	b.n	8009910 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 800990e:	2100      	movs	r1, #0
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	4798      	blx	r3
    }
 8009916:	bf00      	nop
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	4798      	blx	r3
    }
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
    }
 8009952:	bf00      	nop
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	4798      	blx	r3
    }
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	4798      	blx	r3
    }
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 800999e:	bf00      	nop
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2101      	movs	r1, #1
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	bf0c      	ite	eq
 80099b6:	2301      	moveq	r3, #1
 80099b8:	2300      	movne	r3, #0
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1ef      	bne.n	80099a0 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3380      	adds	r3, #128	@ 0x80
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	2a01      	cmp	r2, #1
 80099f0:	d101      	bne.n	80099f6 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80099f2:	2201      	movs	r2, #1
 80099f4:	e000      	b.n	80099f8 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80099f6:	2200      	movs	r2, #0
 80099f8:	4611      	mov	r1, r2
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	4798      	blx	r3
    }
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70fb      	strb	r3, [r7, #3]
 8009a12:	4613      	mov	r3, r2
 8009a14:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	78ba      	ldrb	r2, [r7, #2]
 8009a22:	2a01      	cmp	r2, #1
 8009a24:	d101      	bne.n	8009a2a <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009a26:	2201      	movs	r2, #1
 8009a28:	e000      	b.n	8009a2c <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	78f9      	ldrb	r1, [r7, #3]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	4798      	blx	r3
    }
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	4798      	blx	r3
    }
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	4611      	mov	r1, r2
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2100      	movs	r1, #0
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2102      	movs	r1, #2
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2103      	movs	r1, #3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2203      	movs	r2, #3
 8009b18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2106      	movs	r1, #6
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2204      	movs	r2, #4
 8009b40:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2107      	movs	r1, #7
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2205      	movs	r2, #5
 8009b68:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2104      	movs	r1, #4
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2206      	movs	r2, #6
 8009b90:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2105      	movs	r1, #5
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2207      	movs	r2, #7
 8009bb8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8009bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8009bfc <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10a      	bne.n	8009bea <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8009bd4:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4906      	ldr	r1, [pc, #24]	@ (8009c00 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2208      	movs	r2, #8
 8009bee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bf2:	bf00      	nop
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	2000023d 	.word	0x2000023d
 8009c00:	20000240 	.word	0x20000240

08009c04 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	b2d1      	uxtb	r1, r2
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c2c:	bf00      	nop
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2102      	movs	r1, #2
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2209      	movs	r2, #9
 8009c78:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8009c84:	b590      	push	{r4, r7, lr}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009c96:	681c      	ldr	r4, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	4798      	blx	r3
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	2102      	movs	r1, #2
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009cba:	bf00      	nop
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd90      	pop	{r4, r7, pc}

08009cc2 <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8009cc2:	b590      	push	{r4, r7, lr}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009cd4:	681c      	ldr	r4, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	ee07 2a90 	vmov	s15, r2
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	eeb0 0a67 	vmov.f32	s0, s15
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	4798      	blx	r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	2103      	movs	r1, #3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd90      	pop	{r4, r7, pc}

08009d0c <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009d1e:	681c      	ldr	r4, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	ee07 2a90 	vmov	s15, r2
 8009d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d34:	eeb0 0a67 	vmov.f32	s0, s15
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	4798      	blx	r3
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	2106      	movs	r1, #6
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd90      	pop	{r4, r7, pc}

08009d56 <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8009d56:	b590      	push	{r4, r7, lr}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009d68:	681c      	ldr	r4, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	ee07 2a90 	vmov	s15, r2
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	4798      	blx	r3
 8009d86:	4603      	mov	r3, r0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	2107      	movs	r1, #7
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd90      	pop	{r4, r7, pc}

08009da0 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009da0:	b590      	push	{r4, r7, lr}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009db2:	681c      	ldr	r4, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	ee07 2a90 	vmov	s15, r2
 8009dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	4798      	blx	r3
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	2104      	movs	r1, #4
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd90      	pop	{r4, r7, pc}

08009dea <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8009dea:	b590      	push	{r4, r7, lr}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009dfc:	681c      	ldr	r4, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	ee07 2a90 	vmov	s15, r2
 8009e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e12:	eeb0 0a67 	vmov.f32	s0, s15
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	4798      	blx	r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	2105      	movs	r1, #5
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd90      	pop	{r4, r7, pc}

08009e34 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009e34:	b590      	push	{r4, r7, lr}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8009e46:	681c      	ldr	r4, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	4798      	blx	r3
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd90      	pop	{r4, r7, pc}

08009e70 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009e70:	b5b0      	push	{r4, r5, r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009e86:	681c      	ldr	r4, [r3, #0]
 8009e88:	79fb      	ldrb	r3, [r7, #7]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d101      	bne.n	8009e92 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009e8e:	2501      	movs	r5, #1
 8009e90:	e000      	b.n	8009e94 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009e92:	2500      	movs	r5, #0
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	4798      	blx	r3
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bdb0      	pop	{r4, r5, r7, pc}

08009ebe <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009f0a:	b5b0      	push	{r4, r5, r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	607b      	str	r3, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	72fb      	strb	r3, [r7, #11]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009f24:	681c      	ldr	r4, [r3, #0]
 8009f26:	7abb      	ldrb	r3, [r7, #10]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d101      	bne.n	8009f30 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009f2c:	2501      	movs	r5, #1
 8009f2e:	e000      	b.n	8009f32 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009f30:	2500      	movs	r5, #0
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	ee07 2a90 	vmov	s15, r2
 8009f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f46:	eeb0 0a67 	vmov.f32	s0, s15
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	4798      	blx	r3
 8009f4e:	4603      	mov	r3, r0
 8009f50:	7af9      	ldrb	r1, [r7, #11]
 8009f52:	462a      	mov	r2, r5
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bdb0      	pop	{r4, r5, r7, pc}

08009f68 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009f68:	b5b0      	push	{r4, r5, r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009f7c:	681c      	ldr	r4, [r3, #0]
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d101      	bne.n	8009f88 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009f84:	2501      	movs	r5, #1
 8009f86:	e000      	b.n	8009f8a <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009f88:	2500      	movs	r5, #0
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2106      	movs	r1, #6
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	4798      	blx	r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bdb0      	pop	{r4, r5, r7, pc}

08009fb4 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009fb4:	b5b0      	push	{r4, r5, r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009fca:	681c      	ldr	r4, [r3, #0]
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009fd2:	2501      	movs	r5, #1
 8009fd4:	e000      	b.n	8009fd8 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009fd6:	2500      	movs	r5, #0
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	ee07 2a90 	vmov	s15, r2
 8009fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fec:	eeb0 0a67 	vmov.f32	s0, s15
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	4798      	blx	r3
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a006:	bf00      	nop
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bdb0      	pop	{r4, r5, r7, pc}

0800a00e <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	460b      	mov	r3, r1
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	7afa      	ldrb	r2, [r7, #11]
 800a028:	2a01      	cmp	r2, #1
 800a02a:	d101      	bne.n	800a030 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 800a02c:	2101      	movs	r1, #1
 800a02e:	e000      	b.n	800a032 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 800a030:	2100      	movs	r1, #0
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	78fa      	ldrb	r2, [r7, #3]
 800a0f8:	2a01      	cmp	r2, #1
 800a0fa:	d101      	bne.n	800a100 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	e000      	b.n	800a102 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 800a100:	2200      	movs	r2, #0
 800a102:	4611      	mov	r1, r2
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	70fb      	strb	r3, [r7, #3]
 800a124:	4613      	mov	r3, r2
 800a126:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	78ba      	ldrb	r2, [r7, #2]
 800a134:	2a01      	cmp	r2, #1
 800a136:	d101      	bne.n	800a13c <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800a138:	2201      	movs	r2, #1
 800a13a:	e000      	b.n	800a13e <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800a13c:	2200      	movs	r2, #0
 800a13e:	78f9      	ldrb	r1, [r7, #3]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	4798      	blx	r3
 800a190:	4603      	mov	r3, r0
    }
 800a192:	4618      	mov	r0, r3
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
        return prepared_action;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 800a1b4:	b5b0      	push	{r4, r5, r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	2b07      	cmp	r3, #7
 800a1c8:	f200 80fe 	bhi.w	800a3c8 <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 800a1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 800a1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d2:	bf00      	nop
 800a1d4:	0800a1f5 	.word	0x0800a1f5
 800a1d8:	0800a221 	.word	0x0800a221
 800a1dc:	0800a24f 	.word	0x0800a24f
 800a1e0:	0800a293 	.word	0x0800a293
 800a1e4:	0800a2d9 	.word	0x0800a2d9
 800a1e8:	0800a31f 	.word	0x0800a31f
 800a1ec:	0800a365 	.word	0x0800a365
 800a1f0:	0800a3ab 	.word	0x0800a3ab
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800a1fc:	681c      	ldr	r4, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	6a12      	ldr	r2, [r2, #32]
 800a20c:	7b92      	ldrb	r2, [r2, #14]
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	4798      	blx	r3
 800a214:	4603      	mov	r3, r0
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	47a0      	blx	r4
 800a21c:	4603      	mov	r3, r0
 800a21e:	e0d4      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800a228:	681c      	ldr	r4, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	6a12      	ldr	r2, [r2, #32]
 800a238:	3228      	adds	r2, #40	@ 0x28
 800a23a:	7b92      	ldrb	r2, [r2, #14]
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	4798      	blx	r3
 800a242:	4603      	mov	r3, r0
 800a244:	4619      	mov	r1, r3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	47a0      	blx	r4
 800a24a:	4603      	mov	r3, r0
 800a24c:	e0bd      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a256:	681c      	ldr	r4, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800a260:	681d      	ldr	r5, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	6a12      	ldr	r2, [r2, #32]
 800a270:	323c      	adds	r2, #60	@ 0x3c
 800a272:	7b92      	ldrb	r2, [r2, #14]
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	4798      	blx	r3
 800a27a:	4603      	mov	r3, r0
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	47a8      	blx	r5
 800a282:	eef0 7a40 	vmov.f32	s15, s0
 800a286:	eeb0 0a67 	vmov.f32	s0, s15
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	47a0      	blx	r4
 800a28e:	4603      	mov	r3, r0
 800a290:	e09b      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a29a:	681c      	ldr	r4, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2a4:	681d      	ldr	r5, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	6a12      	ldr	r2, [r2, #32]
 800a2b4:	3278      	adds	r2, #120	@ 0x78
 800a2b6:	7b92      	ldrb	r2, [r2, #14]
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	4798      	blx	r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	47a8      	blx	r5
 800a2c8:	eef0 7a40 	vmov.f32	s15, s0
 800a2cc:	eeb0 0a67 	vmov.f32	s0, s15
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	47a0      	blx	r4
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	e078      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a2e0:	681c      	ldr	r4, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a2ea:	681d      	ldr	r5, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6a12      	ldr	r2, [r2, #32]
 800a2fa:	328c      	adds	r2, #140	@ 0x8c
 800a2fc:	7b92      	ldrb	r2, [r2, #14]
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	4798      	blx	r3
 800a304:	4603      	mov	r3, r0
 800a306:	b29b      	uxth	r3, r3
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	47a8      	blx	r5
 800a30e:	eef0 7a40 	vmov.f32	s15, s0
 800a312:	eeb0 0a67 	vmov.f32	s0, s15
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	47a0      	blx	r4
 800a31a:	4603      	mov	r3, r0
 800a31c:	e055      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a326:	681c      	ldr	r4, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a330:	681d      	ldr	r5, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6a12      	ldr	r2, [r2, #32]
 800a340:	3250      	adds	r2, #80	@ 0x50
 800a342:	7b92      	ldrb	r2, [r2, #14]
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	4798      	blx	r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	47a8      	blx	r5
 800a354:	eef0 7a40 	vmov.f32	s15, s0
 800a358:	eeb0 0a67 	vmov.f32	s0, s15
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	47a0      	blx	r4
 800a360:	4603      	mov	r3, r0
 800a362:	e032      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a36c:	681c      	ldr	r4, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a376:	681d      	ldr	r5, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	6a12      	ldr	r2, [r2, #32]
 800a386:	3264      	adds	r2, #100	@ 0x64
 800a388:	7b92      	ldrb	r2, [r2, #14]
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	4798      	blx	r3
 800a390:	4603      	mov	r3, r0
 800a392:	b29b      	uxth	r3, r3
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	47a8      	blx	r5
 800a39a:	eef0 7a40 	vmov.f32	s15, s0
 800a39e:	eeb0 0a67 	vmov.f32	s0, s15
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	47a0      	blx	r4
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	e00f      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2104      	movs	r1, #4
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	4798      	blx	r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d101      	bne.n	800a3c4 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e002      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	e000      	b.n	800a3ca <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a3c8:	2300      	movs	r3, #0
    }
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a3d2:	bf00      	nop

0800a3d4 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6898      	ldr	r0, [r3, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	899b      	ldrh	r3, [r3, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	f004 f872 	bl	800e4d0 <HAL_GPIO_WritePin>
    }
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a404:	d303      	bcc.n	800a40e <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800a40c:	e000      	b.n	800a410 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a40e:	683b      	ldr	r3, [r7, #0]
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	db05      	blt.n	800a438 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a432:	da01      	bge.n	800a438 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	e00c      	b.n	800a452 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800a43e:	db06      	blt.n	800a44e <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	da03      	bge.n	800a44e <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800a44c:	e001      	b.n	800a452 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a44e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	ee07 3a90 	vmov	s15, r3
 800a470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a474:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a48c <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a478:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a47c:	eeb0 0a67 	vmov.f32	s0, s15
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	3c74242a 	.word	0x3c74242a

0800a490 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a49c:	edd7 7a00 	vldr	s15, [r7]
 800a4a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a4d4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a4a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ac:	d80a      	bhi.n	800a4c4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a4ae:	ed97 7a00 	vldr	s14, [r7]
 800a4b2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a4d8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a4b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4be:	ee17 3a90 	vmov	r3, s15
 800a4c2:	e000      	b.n	800a4c6 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	4674241b 	.word	0x4674241b
 800a4d8:	3c74242a 	.word	0x3c74242a

0800a4dc <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a4e8:	887b      	ldrh	r3, [r7, #2]
 800a4ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4ee:	d209      	bcs.n	800a504 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a4f0:	887b      	ldrh	r3, [r7, #2]
 800a4f2:	ee07 3a90 	vmov	s15, r3
 800a4f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4fa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a518 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a4fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a502:	e001      	b.n	800a508 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a504:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a51c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a508:	eeb0 0a67 	vmov.f32	s0, s15
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	4168d4fe 	.word	0x4168d4fe
 800a51c:	00000000 	.word	0x00000000

0800a520 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a52c:	edd7 7a00 	vldr	s15, [r7]
 800a530:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a564 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a534:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a53c:	d80b      	bhi.n	800a556 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a53e:	ed97 7a00 	vldr	s14, [r7]
 800a542:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a568 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a54a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a54e:	ee17 3a90 	vmov	r3, s15
 800a552:	b29b      	uxth	r3, r3
 800a554:	e000      	b.n	800a558 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	4768c671 	.word	0x4768c671
 800a568:	4168d4fe 	.word	0x4168d4fe

0800a56c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a578:	887b      	ldrh	r3, [r7, #2]
 800a57a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a57e:	d209      	bcs.n	800a594 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a580:	887b      	ldrh	r3, [r7, #2]
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a58a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a5a8 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a58e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a592:	e001      	b.n	800a598 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a594:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a5ac <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a598:	eeb0 0a67 	vmov.f32	s0, s15
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	4168d4fe 	.word	0x4168d4fe
 800a5ac:	00000000 	.word	0x00000000

0800a5b0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a5bc:	edd7 7a00 	vldr	s15, [r7]
 800a5c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a5f4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a5c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5cc:	d80b      	bhi.n	800a5e6 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a5ce:	ed97 7a00 	vldr	s14, [r7]
 800a5d2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a5f8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a5d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5de:	ee17 3a90 	vmov	r3, s15
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	e000      	b.n	800a5e8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	4768c671 	.word	0x4768c671
 800a5f8:	4168d4fe 	.word	0x4168d4fe

0800a5fc <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a608:	887b      	ldrh	r3, [r7, #2]
 800a60a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a60e:	d209      	bcs.n	800a624 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a610:	887b      	ldrh	r3, [r7, #2]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a61a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a638 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a61e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a622:	e001      	b.n	800a628 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a624:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a63c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a628:	eeb0 0a67 	vmov.f32	s0, s15
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	4174240b 	.word	0x4174240b
 800a63c:	00000000 	.word	0x00000000

0800a640 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a64c:	edd7 7a00 	vldr	s15, [r7]
 800a650:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a684 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a654:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65c:	d80b      	bhi.n	800a676 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a65e:	ed97 7a00 	vldr	s14, [r7]
 800a662:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a688 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a66a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a66e:	ee17 3a90 	vmov	r3, s15
 800a672:	b29b      	uxth	r3, r3
 800a674:	e000      	b.n	800a678 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	4673e702 	.word	0x4673e702
 800a688:	4174240b 	.word	0x4174240b

0800a68c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a698:	887b      	ldrh	r3, [r7, #2]
 800a69a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a69e:	d209      	bcs.n	800a6b4 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a6a0:	887b      	ldrh	r3, [r7, #2]
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6aa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a6c8 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a6ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6b2:	e001      	b.n	800a6b8 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a6b4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a6cc <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a6b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	3e742401 	.word	0x3e742401
 800a6cc:	00000000 	.word	0x00000000

0800a6d0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a6dc:	edd7 7a00 	vldr	s15, [r7]
 800a6e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a714 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a6e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ec:	d80b      	bhi.n	800a706 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a6ee:	ed97 7a00 	vldr	s14, [r7]
 800a6f2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a718 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a6f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6fe:	ee17 3a90 	vmov	r3, s15
 800a702:	b29b      	uxth	r3, r3
 800a704:	e000      	b.n	800a708 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	447414bf 	.word	0x447414bf
 800a718:	3e742401 	.word	0x3e742401

0800a71c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a728:	887b      	ldrh	r3, [r7, #2]
 800a72a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a72e:	d219      	bcs.n	800a764 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a730:	887b      	ldrh	r3, [r7, #2]
 800a732:	4618      	mov	r0, r3
 800a734:	f7f5 ff26 	bl	8000584 <__aeabi_i2d>
 800a738:	f04f 0200 	mov.w	r2, #0
 800a73c:	4b0e      	ldr	r3, [pc, #56]	@ (800a778 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a73e:	f7f5 fdd5 	bl	80002ec <__adddf3>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	4610      	mov	r0, r2
 800a748:	4619      	mov	r1, r3
 800a74a:	f04f 0200 	mov.w	r2, #0
 800a74e:	4b0b      	ldr	r3, [pc, #44]	@ (800a77c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a750:	f7f5 ff82 	bl	8000658 <__aeabi_dmul>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4610      	mov	r0, r2
 800a75a:	4619      	mov	r1, r3
 800a75c:	f7f6 fa54 	bl	8000c08 <__aeabi_d2f>
 800a760:	4603      	mov	r3, r0
 800a762:	e001      	b.n	800a768 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a764:	f04f 0300 	mov.w	r3, #0
}
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eeb0 0a67 	vmov.f32	s0, s15
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	3fe00000 	.word	0x3fe00000
 800a77c:	402e8000 	.word	0x402e8000

0800a780 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a78c:	edd7 7a00 	vldr	s15, [r7]
 800a790:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a7cc <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a794:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79c:	d80f      	bhi.n	800a7be <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a79e:	ed97 7a00 	vldr	s14, [r7]
 800a7a2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800a7d0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a7a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a7ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7b6:	ee17 3a90 	vmov	r3, s15
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	e000      	b.n	800a7c0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	4673e180 	.word	0x4673e180
 800a7d0:	41740000 	.word	0x41740000

0800a7d4 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a7e0:	887b      	ldrh	r3, [r7, #2]
 800a7e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7e6:	d209      	bcs.n	800a7fc <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a7e8:	887b      	ldrh	r3, [r7, #2]
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7f2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a810 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a7f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7fa:	e001      	b.n	800a800 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a7fc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a814 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a800:	eeb0 0a67 	vmov.f32	s0, s15
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	3d7423f4 	.word	0x3d7423f4
 800a814:	00000000 	.word	0x00000000

0800a818 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a824:	edd7 7a00 	vldr	s15, [r7]
 800a828:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a85c <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a82c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a834:	d80b      	bhi.n	800a84e <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a836:	ed97 7a00 	vldr	s14, [r7]
 800a83a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a860 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a83e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a846:	ee17 3a90 	vmov	r3, s15
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	e000      	b.n	800a850 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	44742023 	.word	0x44742023
 800a860:	3d7423f4 	.word	0x3d7423f4

0800a864 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a87a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a890 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a87e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a882:	eeb0 0a67 	vmov.f32	s0, s15
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	3783956e 	.word	0x3783956e

0800a894 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a8a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a8a4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a8dc <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a8a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b0:	d80c      	bhi.n	800a8cc <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a8b2:	ed97 7a02 	vldr	s14, [r7, #8]
 800a8b6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a8e0 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a8ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8c2:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8c6:	793b      	ldrb	r3, [r7, #4]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	e000      	b.n	800a8ce <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	3b8311d9 	.word	0x3b8311d9
 800a8e0:	3783956e 	.word	0x3783956e

0800a8e4 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	ee07 3a90 	vmov	s15, r3
 800a8f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8fa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a910 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a8fe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a902:	eeb0 0a67 	vmov.f32	s0, s15
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	3783956e 	.word	0x3783956e

0800a914 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a920:	edd7 7a02 	vldr	s15, [r7, #8]
 800a924:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a95c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a930:	d80c      	bhi.n	800a94c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a932:	ed97 7a02 	vldr	s14, [r7, #8]
 800a936:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a960 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a93a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a93e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a942:	edc7 7a01 	vstr	s15, [r7, #4]
 800a946:	793b      	ldrb	r3, [r7, #4]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	e000      	b.n	800a94e <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	3b8311d9 	.word	0x3b8311d9
 800a960:	3783956e 	.word	0x3783956e

0800a964 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a97a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a990 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a97e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a982:	eeb0 0a67 	vmov.f32	s0, s15
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	3783956e 	.word	0x3783956e

0800a994 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a9a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a9a4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a9dc <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a9a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b0:	d80c      	bhi.n	800a9cc <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a9b2:	ed97 7a02 	vldr	s14, [r7, #8]
 800a9b6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a9e0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a9ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a9be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c2:	edc7 7a01 	vstr	s15, [r7, #4]
 800a9c6:	793b      	ldrb	r3, [r7, #4]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	e000      	b.n	800a9ce <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	3b8311d9 	.word	0x3b8311d9
 800a9e0:	3783956e 	.word	0x3783956e

0800a9e4 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	2b0f      	cmp	r3, #15
 800a9f4:	d80a      	bhi.n	800aa0c <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a9f6:	78fb      	ldrb	r3, [r7, #3]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa02:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800aa20 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800aa06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa0a:	e001      	b.n	800aa10 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800aa0c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800aa24 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800aa10:	eeb0 0a67 	vmov.f32	s0, s15
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	43bb8000 	.word	0x43bb8000
 800aa24:	00000000 	.word	0x00000000

0800aa28 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800aa34:	edd7 7a02 	vldr	s15, [r7, #8]
 800aa38:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800aac4 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800aa3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa44:	d836      	bhi.n	800aab4 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800aa46:	ed97 7a02 	vldr	s14, [r7, #8]
 800aa4a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800aac8 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800aa4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa52:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800aa56:	edd7 7a05 	vldr	s15, [r7, #20]
 800aa5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa5e:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa62:	793b      	ldrb	r3, [r7, #4]
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa6e:	ed97 7a05 	vldr	s14, [r7, #20]
 800aa72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa76:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800aa7a:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800aa82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8a:	d50a      	bpl.n	800aaa2 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800aa8c:	edd7 7a05 	vldr	s15, [r7, #20]
 800aa90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa94:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa98:	793b      	ldrb	r3, [r7, #4]
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	e009      	b.n	800aab6 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800aaa2:	edd7 7a05 	vldr	s15, [r7, #20]
 800aaa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaaa:	edc7 7a01 	vstr	s15, [r7, #4]
 800aaae:	793b      	ldrb	r3, [r7, #4]
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	e000      	b.n	800aab6 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	45bb8000 	.word	0x45bb8000
 800aac8:	43bb8000 	.word	0x43bb8000

0800aacc <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800aad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	db0a      	blt.n	800aaf6 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	3301      	adds	r3, #1
 800aae4:	ee07 3a90 	vmov	s15, r3
 800aae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaec:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800ab08 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800aaf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaf4:	e001      	b.n	800aafa <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800aaf6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800ab0c <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800aafa:	eeb0 0a67 	vmov.f32	s0, s15
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	41fa0000 	.word	0x41fa0000
 800ab0c:	00000000 	.word	0x00000000

0800ab10 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800ab1c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ab20:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800abac <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800ab24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab2c:	d836      	bhi.n	800ab9c <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800ab2e:	ed97 7a02 	vldr	s14, [r7, #8]
 800ab32:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800abb0 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800ab36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab3a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800ab3e:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab46:	edc7 7a01 	vstr	s15, [r7, #4]
 800ab4a:	793b      	ldrb	r3, [r7, #4]
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab56:	ed97 7a05 	vldr	s14, [r7, #20]
 800ab5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab5e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800ab62:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ab6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab72:	d50a      	bpl.n	800ab8a <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800ab74:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab7c:	edc7 7a01 	vstr	s15, [r7, #4]
 800ab80:	793b      	ldrb	r3, [r7, #4]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	3b01      	subs	r3, #1
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	e009      	b.n	800ab9e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800ab8a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab92:	edc7 7a01 	vstr	s15, [r7, #4]
 800ab96:	793b      	ldrb	r3, [r7, #4]
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	e000      	b.n	800ab9e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	457a0000 	.word	0x457a0000
 800abb0:	41fa0000 	.word	0x41fa0000

0800abb4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
  reset_device();
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3394      	adds	r3, #148	@ 0x94
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	4798      	blx	r3
  get_status();
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	330c      	adds	r3, #12
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	edd2 7a05 	vldr	s15, [r2, #20]
 800abea:	eeb0 0a67 	vmov.f32	s0, s15
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	4798      	blx	r3
 800abf2:	4603      	mov	r3, r0
 800abf4:	461a      	mov	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	edd2 7a06 	vldr	s15, [r2, #24]
 800ac0c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	4798      	blx	r3
 800ac14:	4603      	mov	r3, r0
 800ac16:	461a      	mov	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	edd2 7a07 	vldr	s15, [r2, #28]
 800ac2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	4798      	blx	r3
 800ac36:	4603      	mov	r3, r0
 800ac38:	461a      	mov	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	edd2 7a08 	vldr	s15, [r2, #32]
 800ac50:	eeb0 0a67 	vmov.f32	s0, s15
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	4798      	blx	r3
 800ac58:	4603      	mov	r3, r0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800ac72:	eeb0 0a67 	vmov.f32	s0, s15
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	4798      	blx	r3
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ac8a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800af5c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800ac8e:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	ed93 7a00 	vldr	s14, [r3]
 800ac98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aca0:	edc7 7a01 	vstr	s15, [r7, #4]
 800aca4:	793b      	ldrb	r3, [r7, #4]
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800acb4:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800af5c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800acb8:	ee67 6a87 	vmul.f32	s13, s15, s14
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	ed93 7a00 	vldr	s14, [r3]
 800acc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acca:	edc7 7a01 	vstr	s15, [r7, #4]
 800acce:	793b      	ldrb	r3, [r7, #4]
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800acde:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800af5c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800ace2:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	ed93 7a00 	vldr	s14, [r3]
 800acec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acf4:	edc7 7a01 	vstr	s15, [r7, #4]
 800acf8:	793b      	ldrb	r3, [r7, #4]
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800ad08:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800af5c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800ad0c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	ed93 7a00 	vldr	s14, [r3]
 800ad16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad1e:	edc7 7a01 	vstr	s15, [r7, #4]
 800ad22:	793b      	ldrb	r3, [r7, #4]
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800ad3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	4798      	blx	r3
 800ad44:	4603      	mov	r3, r0
 800ad46:	461a      	mov	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800ad5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	4798      	blx	r3
 800ad66:	4603      	mov	r3, r0
 800ad68:	461a      	mov	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800ad80:	eeb0 0a67 	vmov.f32	s0, s15
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	4798      	blx	r3
 800ad88:	4603      	mov	r3, r0
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800ada2:	eeb0 0a67 	vmov.f32	s0, s15
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	4798      	blx	r3
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800add0:	eeb0 0a67 	vmov.f32	s0, s15
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	4798      	blx	r3
 800add8:	4603      	mov	r3, r0
 800adda:	461a      	mov	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800adf2:	eeb0 0a67 	vmov.f32	s0, s15
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	4798      	blx	r3
 800adfa:	4603      	mov	r3, r0
 800adfc:	461a      	mov	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800ae38:	2104      	movs	r1, #4
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800ae4e:	2105      	movs	r1, #5
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800ae64:	2106      	movs	r1, #6
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800ae7a:	2107      	movs	r1, #7
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800ae90:	2108      	movs	r1, #8
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800aea6:	2109      	movs	r1, #9
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800aebc:	210a      	movs	r1, #10
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800aed2:	210b      	movs	r1, #11
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800aee8:	210c      	movs	r1, #12
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800aefe:	210d      	movs	r1, #13
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800af14:	210e      	movs	r1, #14
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800af2a:	210f      	movs	r1, #15
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800af40:	2110      	movs	r1, #16
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800af56:	2111      	movs	r1, #17
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	e001      	b.n	800af60 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800af5c:	43800000 	.word	0x43800000
 800af60:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800af72:	2113      	movs	r1, #19
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800af88:	2114      	movs	r1, #20
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800af9e:	2116      	movs	r1, #22
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800afb4:	2117      	movs	r1, #23
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3354      	adds	r3, #84	@ 0x54
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800afc8:	4611      	mov	r1, r2
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	4798      	blx	r3
 800afce:	4603      	mov	r3, r0
 800afd0:	f083 0301 	eor.w	r3, r3, #1
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e000      	b.n	800afe0 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800afe8:	b590      	push	{r4, r7, lr}
 800afea:	b087      	sub	sp, #28
 800afec:	af02      	add	r7, sp, #8
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	460b      	mov	r3, r1
 800aff2:	607a      	str	r2, [r7, #4]
 800aff4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800affe:	681c      	ldr	r4, [r3, #0]
 800b000:	7afa      	ldrb	r2, [r7, #11]
 800b002:	2300      	movs	r3, #0
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4613      	mov	r3, r2
 800b00c:	2201      	movs	r2, #1
 800b00e:	490c      	ldr	r1, [pc, #48]	@ (800b040 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a09      	ldr	r2, [pc, #36]	@ (800b044 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800b020:	4907      	ldr	r1, [pc, #28]	@ (800b040 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a05      	ldr	r2, [pc, #20]	@ (800b048 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800b032:	4904      	ldr	r1, [pc, #16]	@ (800b044 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	4798      	blx	r3
}
 800b038:	bf00      	nop
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd90      	pop	{r4, r7, pc}
 800b040:	20000240 	.word	0x20000240
 800b044:	20000260 	.word	0x20000260
 800b048:	20000268 	.word	0x20000268

0800b04c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800b04c:	b590      	push	{r4, r7, lr}
 800b04e:	b087      	sub	sp, #28
 800b050:	af02      	add	r7, sp, #8
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b060:	681c      	ldr	r4, [r3, #0]
 800b062:	78fb      	ldrb	r3, [r7, #3]
 800b064:	2200      	movs	r2, #0
 800b066:	9201      	str	r2, [sp, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	9200      	str	r2, [sp, #0]
 800b06c:	2202      	movs	r2, #2
 800b06e:	4917      	ldr	r1, [pc, #92]	@ (800b0cc <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a14      	ldr	r2, [pc, #80]	@ (800b0d0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800b080:	4912      	ldr	r1, [pc, #72]	@ (800b0cc <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a10      	ldr	r2, [pc, #64]	@ (800b0d4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800b092:	490f      	ldr	r1, [pc, #60]	@ (800b0d0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a19      	ldr	r1, [r3, #32]
 800b09c:	78fa      	ldrb	r2, [r7, #3]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	440b      	add	r3, r1
 800b0a8:	7b9b      	ldrb	r3, [r3, #14]
 800b0aa:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	7bfa      	ldrb	r2, [r7, #15]
 800b0b8:	4906      	ldr	r1, [pc, #24]	@ (800b0d4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	4798      	blx	r3
 800b0be:	4603      	mov	r3, r0
 800b0c0:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800b0c2:	68bb      	ldr	r3, [r7, #8]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd90      	pop	{r4, r7, pc}
 800b0cc:	20000240 	.word	0x20000240
 800b0d0:	20000260 	.word	0x20000260
 800b0d4:	20000268 	.word	0x20000268

0800b0d8 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b0d8:	b590      	push	{r4, r7, lr}
 800b0da:	b087      	sub	sp, #28
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	607a      	str	r2, [r7, #4]
 800b0e4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b0ee:	681c      	ldr	r4, [r3, #0]
 800b0f0:	7afa      	ldrb	r2, [r7, #11]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	490c      	ldr	r1, [pc, #48]	@ (800b130 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a09      	ldr	r2, [pc, #36]	@ (800b134 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800b110:	4907      	ldr	r1, [pc, #28]	@ (800b130 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a05      	ldr	r2, [pc, #20]	@ (800b138 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800b122:	4904      	ldr	r1, [pc, #16]	@ (800b134 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	4798      	blx	r3
}
 800b128:	bf00      	nop
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd90      	pop	{r4, r7, pc}
 800b130:	20000240 	.word	0x20000240
 800b134:	20000260 	.word	0x20000260
 800b138:	20000268 	.word	0x20000268

0800b13c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800b13c:	b590      	push	{r4, r7, lr}
 800b13e:	b085      	sub	sp, #20
 800b140:	af02      	add	r7, sp, #8
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b150:	681c      	ldr	r4, [r3, #0]
 800b152:	78fb      	ldrb	r3, [r7, #3]
 800b154:	2200      	movs	r2, #0
 800b156:	9201      	str	r2, [sp, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	9200      	str	r2, [sp, #0]
 800b15c:	2204      	movs	r2, #4
 800b15e:	490c      	ldr	r1, [pc, #48]	@ (800b190 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a09      	ldr	r2, [pc, #36]	@ (800b194 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800b170:	4907      	ldr	r1, [pc, #28]	@ (800b190 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a05      	ldr	r2, [pc, #20]	@ (800b198 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800b182:	4904      	ldr	r1, [pc, #16]	@ (800b194 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd90      	pop	{r4, r7, pc}
 800b190:	20000240 	.word	0x20000240
 800b194:	20000260 	.word	0x20000260
 800b198:	20000268 	.word	0x20000268

0800b19c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b19c:	b590      	push	{r4, r7, lr}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af02      	add	r7, sp, #8
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1b2:	681c      	ldr	r4, [r3, #0]
 800b1b4:	7afa      	ldrb	r2, [r7, #11]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	2205      	movs	r2, #5
 800b1c2:	490c      	ldr	r1, [pc, #48]	@ (800b1f4 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a09      	ldr	r2, [pc, #36]	@ (800b1f8 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800b1d4:	4907      	ldr	r1, [pc, #28]	@ (800b1f4 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a05      	ldr	r2, [pc, #20]	@ (800b1fc <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800b1e6:	4904      	ldr	r1, [pc, #16]	@ (800b1f8 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	4798      	blx	r3
}
 800b1ec:	bf00      	nop
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd90      	pop	{r4, r7, pc}
 800b1f4:	20000240 	.word	0x20000240
 800b1f8:	20000260 	.word	0x20000260
 800b1fc:	20000268 	.word	0x20000268

0800b200 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800b200:	b590      	push	{r4, r7, lr}
 800b202:	b085      	sub	sp, #20
 800b204:	af02      	add	r7, sp, #8
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b210:	d21f      	bcs.n	800b252 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b21a:	681c      	ldr	r4, [r3, #0]
 800b21c:	2300      	movs	r3, #0
 800b21e:	9301      	str	r3, [sp, #4]
 800b220:	2300      	movs	r3, #0
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2206      	movs	r2, #6
 800b228:	490c      	ldr	r1, [pc, #48]	@ (800b25c <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a09      	ldr	r2, [pc, #36]	@ (800b260 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b23a:	4908      	ldr	r1, [pc, #32]	@ (800b25c <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a06      	ldr	r2, [pc, #24]	@ (800b264 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800b24c:	4904      	ldr	r1, [pc, #16]	@ (800b260 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	bd90      	pop	{r4, r7, pc}
 800b25a:	bf00      	nop
 800b25c:	20000240 	.word	0x20000240
 800b260:	20000260 	.word	0x20000260
 800b264:	20000268 	.word	0x20000268

0800b268 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b268:	b590      	push	{r4, r7, lr}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af02      	add	r7, sp, #8
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	460b      	mov	r3, r1
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b27c:	d220      	bcs.n	800b2c0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b286:	681c      	ldr	r4, [r3, #0]
 800b288:	7afa      	ldrb	r2, [r7, #11]
 800b28a:	2300      	movs	r3, #0
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4613      	mov	r3, r2
 800b294:	2207      	movs	r2, #7
 800b296:	490c      	ldr	r1, [pc, #48]	@ (800b2c8 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a09      	ldr	r2, [pc, #36]	@ (800b2cc <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b2a8:	4907      	ldr	r1, [pc, #28]	@ (800b2c8 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a05      	ldr	r2, [pc, #20]	@ (800b2d0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800b2ba:	4904      	ldr	r1, [pc, #16]	@ (800b2cc <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	4798      	blx	r3
}
 800b2c0:	bf00      	nop
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd90      	pop	{r4, r7, pc}
 800b2c8:	20000240 	.word	0x20000240
 800b2cc:	20000260 	.word	0x20000260
 800b2d0:	20000268 	.word	0x20000268

0800b2d4 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b2d4:	b590      	push	{r4, r7, lr}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af02      	add	r7, sp, #8
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	607b      	str	r3, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	72fb      	strb	r3, [r7, #11]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2ee:	681c      	ldr	r4, [r3, #0]
 800b2f0:	7af9      	ldrb	r1, [r7, #11]
 800b2f2:	7abb      	ldrb	r3, [r7, #10]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	9201      	str	r2, [sp, #4]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	2208      	movs	r2, #8
 800b2fe:	490c      	ldr	r1, [pc, #48]	@ (800b330 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a09      	ldr	r2, [pc, #36]	@ (800b334 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b310:	4907      	ldr	r1, [pc, #28]	@ (800b330 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a05      	ldr	r2, [pc, #20]	@ (800b338 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800b322:	4904      	ldr	r1, [pc, #16]	@ (800b334 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	4798      	blx	r3
}
 800b328:	bf00      	nop
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd90      	pop	{r4, r7, pc}
 800b330:	20000240 	.word	0x20000240
 800b334:	20000260 	.word	0x20000260
 800b338:	20000268 	.word	0x20000268

0800b33c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b33c:	b590      	push	{r4, r7, lr}
 800b33e:	b085      	sub	sp, #20
 800b340:	af02      	add	r7, sp, #8
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
 800b348:	4613      	mov	r3, r2
 800b34a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b354:	681c      	ldr	r4, [r3, #0]
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	78bb      	ldrb	r3, [r7, #2]
 800b35a:	2100      	movs	r1, #0
 800b35c:	9101      	str	r1, [sp, #4]
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	4613      	mov	r3, r2
 800b362:	2209      	movs	r2, #9
 800b364:	490c      	ldr	r1, [pc, #48]	@ (800b398 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a09      	ldr	r2, [pc, #36]	@ (800b39c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b376:	4908      	ldr	r1, [pc, #32]	@ (800b398 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a06      	ldr	r2, [pc, #24]	@ (800b3a0 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b388:	4904      	ldr	r1, [pc, #16]	@ (800b39c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4798      	blx	r3
}
 800b38e:	bf00      	nop
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	bd90      	pop	{r4, r7, pc}
 800b396:	bf00      	nop
 800b398:	20000240 	.word	0x20000240
 800b39c:	20000260 	.word	0x20000260
 800b3a0:	20000268 	.word	0x20000268

0800b3a4 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b3a4:	b590      	push	{r4, r7, lr}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af02      	add	r7, sp, #8
 800b3aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3b4:	681c      	ldr	r4, [r3, #0]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	9301      	str	r3, [sp, #4]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	220a      	movs	r2, #10
 800b3c2:	490c      	ldr	r1, [pc, #48]	@ (800b3f4 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a09      	ldr	r2, [pc, #36]	@ (800b3f8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b3d4:	4907      	ldr	r1, [pc, #28]	@ (800b3f4 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a05      	ldr	r2, [pc, #20]	@ (800b3fc <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b3e6:	4904      	ldr	r1, [pc, #16]	@ (800b3f8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	4798      	blx	r3
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd90      	pop	{r4, r7, pc}
 800b3f4:	20000240 	.word	0x20000240
 800b3f8:	20000260 	.word	0x20000260
 800b3fc:	20000268 	.word	0x20000268

0800b400 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b400:	b590      	push	{r4, r7, lr}
 800b402:	b085      	sub	sp, #20
 800b404:	af02      	add	r7, sp, #8
 800b406:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b410:	681c      	ldr	r4, [r3, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	2300      	movs	r3, #0
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	2300      	movs	r3, #0
 800b41c:	220b      	movs	r2, #11
 800b41e:	490c      	ldr	r1, [pc, #48]	@ (800b450 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a09      	ldr	r2, [pc, #36]	@ (800b454 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b430:	4907      	ldr	r1, [pc, #28]	@ (800b450 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a05      	ldr	r2, [pc, #20]	@ (800b458 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b442:	4904      	ldr	r1, [pc, #16]	@ (800b454 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	4798      	blx	r3
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd90      	pop	{r4, r7, pc}
 800b450:	20000240 	.word	0x20000240
 800b454:	20000260 	.word	0x20000260
 800b458:	20000268 	.word	0x20000268

0800b45c <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b45c:	b590      	push	{r4, r7, lr}
 800b45e:	b085      	sub	sp, #20
 800b460:	af02      	add	r7, sp, #8
 800b462:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b46c:	681c      	ldr	r4, [r3, #0]
 800b46e:	2300      	movs	r3, #0
 800b470:	9301      	str	r3, [sp, #4]
 800b472:	2300      	movs	r3, #0
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	2300      	movs	r3, #0
 800b478:	220c      	movs	r2, #12
 800b47a:	490c      	ldr	r1, [pc, #48]	@ (800b4ac <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a09      	ldr	r2, [pc, #36]	@ (800b4b0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b48c:	4907      	ldr	r1, [pc, #28]	@ (800b4ac <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a05      	ldr	r2, [pc, #20]	@ (800b4b4 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b49e:	4904      	ldr	r1, [pc, #16]	@ (800b4b0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	4798      	blx	r3
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd90      	pop	{r4, r7, pc}
 800b4ac:	20000240 	.word	0x20000240
 800b4b0:	20000260 	.word	0x20000260
 800b4b4:	20000268 	.word	0x20000268

0800b4b8 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b4b8:	b590      	push	{r4, r7, lr}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4c8:	681c      	ldr	r4, [r3, #0]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	220d      	movs	r2, #13
 800b4d6:	490c      	ldr	r1, [pc, #48]	@ (800b508 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a09      	ldr	r2, [pc, #36]	@ (800b50c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b4e8:	4907      	ldr	r1, [pc, #28]	@ (800b508 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a05      	ldr	r2, [pc, #20]	@ (800b510 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b4fa:	4904      	ldr	r1, [pc, #16]	@ (800b50c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	4798      	blx	r3
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	bd90      	pop	{r4, r7, pc}
 800b508:	20000240 	.word	0x20000240
 800b50c:	20000260 	.word	0x20000260
 800b510:	20000268 	.word	0x20000268

0800b514 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b085      	sub	sp, #20
 800b518:	af02      	add	r7, sp, #8
 800b51a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b524:	681c      	ldr	r4, [r3, #0]
 800b526:	2300      	movs	r3, #0
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	2300      	movs	r3, #0
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	2300      	movs	r3, #0
 800b530:	220e      	movs	r2, #14
 800b532:	490c      	ldr	r1, [pc, #48]	@ (800b564 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a09      	ldr	r2, [pc, #36]	@ (800b568 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b544:	4907      	ldr	r1, [pc, #28]	@ (800b564 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a05      	ldr	r2, [pc, #20]	@ (800b56c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b556:	4904      	ldr	r1, [pc, #16]	@ (800b568 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	4798      	blx	r3
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	bd90      	pop	{r4, r7, pc}
 800b564:	20000240 	.word	0x20000240
 800b568:	20000260 	.word	0x20000260
 800b56c:	20000268 	.word	0x20000268

0800b570 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b570:	b590      	push	{r4, r7, lr}
 800b572:	b085      	sub	sp, #20
 800b574:	af02      	add	r7, sp, #8
 800b576:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b580:	681c      	ldr	r4, [r3, #0]
 800b582:	2300      	movs	r3, #0
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	2300      	movs	r3, #0
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	2300      	movs	r3, #0
 800b58c:	220f      	movs	r2, #15
 800b58e:	490c      	ldr	r1, [pc, #48]	@ (800b5c0 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a09      	ldr	r2, [pc, #36]	@ (800b5c4 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b5a0:	4907      	ldr	r1, [pc, #28]	@ (800b5c0 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a05      	ldr	r2, [pc, #20]	@ (800b5c8 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b5b2:	4904      	ldr	r1, [pc, #16]	@ (800b5c4 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	4798      	blx	r3
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd90      	pop	{r4, r7, pc}
 800b5c0:	20000240 	.word	0x20000240
 800b5c4:	20000260 	.word	0x20000260
 800b5c8:	20000268 	.word	0x20000268

0800b5cc <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b5cc:	b590      	push	{r4, r7, lr}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af02      	add	r7, sp, #8
 800b5d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5dc:	681c      	ldr	r4, [r3, #0]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9301      	str	r3, [sp, #4]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2210      	movs	r2, #16
 800b5ea:	490c      	ldr	r1, [pc, #48]	@ (800b61c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a09      	ldr	r2, [pc, #36]	@ (800b620 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b5fc:	4907      	ldr	r1, [pc, #28]	@ (800b61c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a05      	ldr	r2, [pc, #20]	@ (800b624 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b60e:	4904      	ldr	r1, [pc, #16]	@ (800b620 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	4798      	blx	r3
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd90      	pop	{r4, r7, pc}
 800b61c:	20000240 	.word	0x20000240
 800b620:	20000260 	.word	0x20000260
 800b624:	20000268 	.word	0x20000268

0800b628 <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b628:	b590      	push	{r4, r7, lr}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af02      	add	r7, sp, #8
 800b62e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b638:	681c      	ldr	r4, [r3, #0]
 800b63a:	2300      	movs	r3, #0
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	2300      	movs	r3, #0
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	2300      	movs	r3, #0
 800b644:	2211      	movs	r2, #17
 800b646:	490c      	ldr	r1, [pc, #48]	@ (800b678 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a09      	ldr	r2, [pc, #36]	@ (800b67c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b658:	4907      	ldr	r1, [pc, #28]	@ (800b678 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a05      	ldr	r2, [pc, #20]	@ (800b680 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b66a:	4904      	ldr	r1, [pc, #16]	@ (800b67c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	4798      	blx	r3
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	bd90      	pop	{r4, r7, pc}
 800b678:	20000240 	.word	0x20000240
 800b67c:	20000260 	.word	0x20000260
 800b680:	20000268 	.word	0x20000268

0800b684 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b684:	b590      	push	{r4, r7, lr}
 800b686:	b087      	sub	sp, #28
 800b688:	af02      	add	r7, sp, #8
 800b68a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b694:	681c      	ldr	r4, [r3, #0]
 800b696:	2300      	movs	r3, #0
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	2300      	movs	r3, #0
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	2212      	movs	r2, #18
 800b6a2:	4912      	ldr	r1, [pc, #72]	@ (800b6ec <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a0f      	ldr	r2, [pc, #60]	@ (800b6f0 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b6b4:	490d      	ldr	r1, [pc, #52]	@ (800b6ec <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a0b      	ldr	r2, [pc, #44]	@ (800b6f4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b6c6:	490a      	ldr	r1, [pc, #40]	@ (800b6f0 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	4906      	ldr	r1, [pc, #24]	@ (800b6f4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	4798      	blx	r3
 800b6de:	4603      	mov	r3, r0
 800b6e0:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b6e2:	89fb      	ldrh	r3, [r7, #14]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd90      	pop	{r4, r7, pc}
 800b6ec:	20000240 	.word	0x20000240
 800b6f0:	20000260 	.word	0x20000260
 800b6f4:	20000268 	.word	0x20000268

0800b6f8 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b6f8:	b590      	push	{r4, r7, lr}
 800b6fa:	b087      	sub	sp, #28
 800b6fc:	af02      	add	r7, sp, #8
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	460b      	mov	r3, r1
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b70e:	681c      	ldr	r4, [r3, #0]
 800b710:	7afa      	ldrb	r2, [r7, #11]
 800b712:	2300      	movs	r3, #0
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	4613      	mov	r3, r2
 800b71c:	2201      	movs	r2, #1
 800b71e:	4903      	ldr	r1, [pc, #12]	@ (800b72c <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	47a0      	blx	r4
}
 800b724:	bf00      	nop
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd90      	pop	{r4, r7, pc}
 800b72c:	20000240 	.word	0x20000240

0800b730 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b730:	b590      	push	{r4, r7, lr}
 800b732:	b085      	sub	sp, #20
 800b734:	af02      	add	r7, sp, #8
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b744:	681c      	ldr	r4, [r3, #0]
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	2200      	movs	r2, #0
 800b74a:	9201      	str	r2, [sp, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	9200      	str	r2, [sp, #0]
 800b750:	2202      	movs	r2, #2
 800b752:	4903      	ldr	r1, [pc, #12]	@ (800b760 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	47a0      	blx	r4
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd90      	pop	{r4, r7, pc}
 800b760:	20000240 	.word	0x20000240

0800b764 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b764:	b590      	push	{r4, r7, lr}
 800b766:	b087      	sub	sp, #28
 800b768:	af02      	add	r7, sp, #8
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	460b      	mov	r3, r1
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b77a:	681c      	ldr	r4, [r3, #0]
 800b77c:	7afa      	ldrb	r2, [r7, #11]
 800b77e:	2300      	movs	r3, #0
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	4613      	mov	r3, r2
 800b788:	2203      	movs	r2, #3
 800b78a:	4903      	ldr	r1, [pc, #12]	@ (800b798 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	47a0      	blx	r4
}
 800b790:	bf00      	nop
 800b792:	3714      	adds	r7, #20
 800b794:	46bd      	mov	sp, r7
 800b796:	bd90      	pop	{r4, r7, pc}
 800b798:	20000240 	.word	0x20000240

0800b79c <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b79c:	b590      	push	{r4, r7, lr}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af02      	add	r7, sp, #8
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7b0:	681c      	ldr	r4, [r3, #0]
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	9201      	str	r2, [sp, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	9200      	str	r2, [sp, #0]
 800b7bc:	2204      	movs	r2, #4
 800b7be:	4903      	ldr	r1, [pc, #12]	@ (800b7cc <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	47a0      	blx	r4
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd90      	pop	{r4, r7, pc}
 800b7cc:	20000240 	.word	0x20000240

0800b7d0 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b7d0:	b590      	push	{r4, r7, lr}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7e6:	681c      	ldr	r4, [r3, #0]
 800b7e8:	7afa      	ldrb	r2, [r7, #11]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	2205      	movs	r2, #5
 800b7f6:	4903      	ldr	r1, [pc, #12]	@ (800b804 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	47a0      	blx	r4
}
 800b7fc:	bf00      	nop
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	bd90      	pop	{r4, r7, pc}
 800b804:	20000240 	.word	0x20000240

0800b808 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b808:	b590      	push	{r4, r7, lr}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af02      	add	r7, sp, #8
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b81a:	681c      	ldr	r4, [r3, #0]
 800b81c:	2300      	movs	r3, #0
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	2300      	movs	r3, #0
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2206      	movs	r2, #6
 800b828:	4903      	ldr	r1, [pc, #12]	@ (800b838 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	47a0      	blx	r4
}
 800b82e:	bf00      	nop
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	bd90      	pop	{r4, r7, pc}
 800b836:	bf00      	nop
 800b838:	20000240 	.word	0x20000240

0800b83c <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b83c:	b590      	push	{r4, r7, lr}
 800b83e:	b087      	sub	sp, #28
 800b840:	af02      	add	r7, sp, #8
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	460b      	mov	r3, r1
 800b846:	607a      	str	r2, [r7, #4]
 800b848:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b852:	681c      	ldr	r4, [r3, #0]
 800b854:	7afa      	ldrb	r2, [r7, #11]
 800b856:	2300      	movs	r3, #0
 800b858:	9301      	str	r3, [sp, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	4613      	mov	r3, r2
 800b860:	2207      	movs	r2, #7
 800b862:	4903      	ldr	r1, [pc, #12]	@ (800b870 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	47a0      	blx	r4
}
 800b868:	bf00      	nop
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd90      	pop	{r4, r7, pc}
 800b870:	20000240 	.word	0x20000240

0800b874 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b087      	sub	sp, #28
 800b878:	af02      	add	r7, sp, #8
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	607b      	str	r3, [r7, #4]
 800b87e:	460b      	mov	r3, r1
 800b880:	72fb      	strb	r3, [r7, #11]
 800b882:	4613      	mov	r3, r2
 800b884:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b88e:	681c      	ldr	r4, [r3, #0]
 800b890:	7af9      	ldrb	r1, [r7, #11]
 800b892:	7abb      	ldrb	r3, [r7, #10]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	9201      	str	r2, [sp, #4]
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	460b      	mov	r3, r1
 800b89c:	2208      	movs	r2, #8
 800b89e:	4903      	ldr	r1, [pc, #12]	@ (800b8ac <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	47a0      	blx	r4
}
 800b8a4:	bf00      	nop
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd90      	pop	{r4, r7, pc}
 800b8ac:	20000240 	.word	0x20000240

0800b8b0 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b8b0:	b590      	push	{r4, r7, lr}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af02      	add	r7, sp, #8
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	70fb      	strb	r3, [r7, #3]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b8c8:	681c      	ldr	r4, [r3, #0]
 800b8ca:	78fa      	ldrb	r2, [r7, #3]
 800b8cc:	78bb      	ldrb	r3, [r7, #2]
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	9101      	str	r1, [sp, #4]
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	2209      	movs	r2, #9
 800b8d8:	4903      	ldr	r1, [pc, #12]	@ (800b8e8 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	47a0      	blx	r4
}
 800b8de:	bf00      	nop
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd90      	pop	{r4, r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20000240 	.word	0x20000240

0800b8ec <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b8ec:	b590      	push	{r4, r7, lr}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af02      	add	r7, sp, #8
 800b8f2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b8fc:	681c      	ldr	r4, [r3, #0]
 800b8fe:	2300      	movs	r3, #0
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	2300      	movs	r3, #0
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	2300      	movs	r3, #0
 800b908:	220a      	movs	r2, #10
 800b90a:	4903      	ldr	r1, [pc, #12]	@ (800b918 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	47a0      	blx	r4
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	bd90      	pop	{r4, r7, pc}
 800b918:	20000240 	.word	0x20000240

0800b91c <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b91c:	b590      	push	{r4, r7, lr}
 800b91e:	b085      	sub	sp, #20
 800b920:	af02      	add	r7, sp, #8
 800b922:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b92c:	681c      	ldr	r4, [r3, #0]
 800b92e:	2300      	movs	r3, #0
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	2300      	movs	r3, #0
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	2300      	movs	r3, #0
 800b938:	220b      	movs	r2, #11
 800b93a:	4903      	ldr	r1, [pc, #12]	@ (800b948 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	47a0      	blx	r4
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	bd90      	pop	{r4, r7, pc}
 800b948:	20000240 	.word	0x20000240

0800b94c <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b94c:	b590      	push	{r4, r7, lr}
 800b94e:	b085      	sub	sp, #20
 800b950:	af02      	add	r7, sp, #8
 800b952:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b95c:	681c      	ldr	r4, [r3, #0]
 800b95e:	2300      	movs	r3, #0
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	2300      	movs	r3, #0
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	2300      	movs	r3, #0
 800b968:	220c      	movs	r2, #12
 800b96a:	4903      	ldr	r1, [pc, #12]	@ (800b978 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	47a0      	blx	r4
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	bd90      	pop	{r4, r7, pc}
 800b978:	20000240 	.word	0x20000240

0800b97c <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b97c:	b590      	push	{r4, r7, lr}
 800b97e:	b085      	sub	sp, #20
 800b980:	af02      	add	r7, sp, #8
 800b982:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b98c:	681c      	ldr	r4, [r3, #0]
 800b98e:	2300      	movs	r3, #0
 800b990:	9301      	str	r3, [sp, #4]
 800b992:	2300      	movs	r3, #0
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	2300      	movs	r3, #0
 800b998:	220d      	movs	r2, #13
 800b99a:	4903      	ldr	r1, [pc, #12]	@ (800b9a8 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	47a0      	blx	r4
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd90      	pop	{r4, r7, pc}
 800b9a8:	20000240 	.word	0x20000240

0800b9ac <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af02      	add	r7, sp, #8
 800b9b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b9bc:	681c      	ldr	r4, [r3, #0]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	220e      	movs	r2, #14
 800b9ca:	4903      	ldr	r1, [pc, #12]	@ (800b9d8 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	47a0      	blx	r4
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd90      	pop	{r4, r7, pc}
 800b9d8:	20000240 	.word	0x20000240

0800b9dc <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b9dc:	b590      	push	{r4, r7, lr}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af02      	add	r7, sp, #8
 800b9e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b9ec:	681c      	ldr	r4, [r3, #0]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	220f      	movs	r2, #15
 800b9fa:	4903      	ldr	r1, [pc, #12]	@ (800ba08 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	47a0      	blx	r4
}
 800ba00:	bf00      	nop
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd90      	pop	{r4, r7, pc}
 800ba08:	20000240 	.word	0x20000240

0800ba0c <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800ba0c:	b590      	push	{r4, r7, lr}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af02      	add	r7, sp, #8
 800ba12:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ba1c:	681c      	ldr	r4, [r3, #0]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	2300      	movs	r3, #0
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	2300      	movs	r3, #0
 800ba28:	2210      	movs	r2, #16
 800ba2a:	4903      	ldr	r1, [pc, #12]	@ (800ba38 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	47a0      	blx	r4
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd90      	pop	{r4, r7, pc}
 800ba38:	20000240 	.word	0x20000240

0800ba3c <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800ba3c:	b590      	push	{r4, r7, lr}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af02      	add	r7, sp, #8
 800ba42:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ba4c:	681c      	ldr	r4, [r3, #0]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	2300      	movs	r3, #0
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	2300      	movs	r3, #0
 800ba58:	2211      	movs	r2, #17
 800ba5a:	4903      	ldr	r1, [pc, #12]	@ (800ba68 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	47a0      	blx	r4
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd90      	pop	{r4, r7, pc}
 800ba68:	20000240 	.word	0x20000240

0800ba6c <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800ba6c:	b590      	push	{r4, r7, lr}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af02      	add	r7, sp, #8
 800ba72:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ba7c:	681c      	ldr	r4, [r3, #0]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	2300      	movs	r3, #0
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	2300      	movs	r3, #0
 800ba88:	2212      	movs	r2, #18
 800ba8a:	4903      	ldr	r1, [pc, #12]	@ (800ba98 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	47a0      	blx	r4
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd90      	pop	{r4, r7, pc}
 800ba98:	20000240 	.word	0x20000240

0800ba9c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a09      	ldr	r2, [pc, #36]	@ (800bad4 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800bab0:	4909      	ldr	r1, [pc, #36]	@ (800bad8 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a06      	ldr	r2, [pc, #24]	@ (800badc <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800bac2:	4904      	ldr	r1, [pc, #16]	@ (800bad4 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800bac8:	4b04      	ldr	r3, [pc, #16]	@ (800badc <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000260 	.word	0x20000260
 800bad8:	20000240 	.word	0x20000240
 800badc:	20000268 	.word	0x20000268

0800bae0 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800bae0:	b590      	push	{r4, r7, lr}
 800bae2:	b089      	sub	sp, #36	@ 0x24
 800bae4:	af02      	add	r7, sp, #8
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800baec:	4b17      	ldr	r3, [pc, #92]	@ (800bb4c <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800baee:	2200      	movs	r2, #0
 800baf0:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800baf2:	2300      	movs	r3, #0
 800baf4:	75fb      	strb	r3, [r7, #23]
 800baf6:	e020      	b.n	800bb3a <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bb00:	681c      	ldr	r4, [r3, #0]
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	461a      	mov	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	1899      	adds	r1, r3, r2
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	461a      	mov	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	441a      	add	r2, r3
 800bb16:	230a      	movs	r3, #10
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800bb20:	2300      	movs	r3, #0
 800bb22:	75bb      	strb	r3, [r7, #22]
 800bb24:	e003      	b.n	800bb2e <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800bb26:	bf00      	nop
 800bb28:	7dbb      	ldrb	r3, [r7, #22]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	75bb      	strb	r3, [r7, #22]
 800bb2e:	7dbb      	ldrb	r3, [r7, #22]
 800bb30:	2b7c      	cmp	r3, #124	@ 0x7c
 800bb32:	d9f8      	bls.n	800bb26 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
 800bb36:	3301      	adds	r3, #1
 800bb38:	75fb      	strb	r3, [r7, #23]
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d9db      	bls.n	800baf8 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800bb40:	bf00      	nop
}
 800bb42:	bf00      	nop
 800bb44:	371c      	adds	r7, #28
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd90      	pop	{r4, r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	2000023d 	.word	0x2000023d

0800bb50 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800bb50:	b480      	push	{r7}
 800bb52:	b087      	sub	sp, #28
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800bb62:	2301      	movs	r3, #1
 800bb64:	74fb      	strb	r3, [r7, #19]
 800bb66:	e016      	b.n	800bb96 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800bb68:	7cfb      	ldrb	r3, [r7, #19]
 800bb6a:	005b      	lsls	r3, r3, #1
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	7f1b      	ldrb	r3, [r3, #28]
 800bb72:	4413      	add	r3, r2
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	4413      	add	r3, r2
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	79fa      	ldrb	r2, [r7, #7]
 800bb7e:	7cfb      	ldrb	r3, [r7, #19]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	fa01 f303 	lsl.w	r3, r1, r3
 800bb88:	461a      	mov	r2, r3
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800bb90:	7cfb      	ldrb	r3, [r7, #19]
 800bb92:	3301      	adds	r3, #1
 800bb94:	74fb      	strb	r3, [r7, #19]
 800bb96:	7cfb      	ldrb	r3, [r7, #19]
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d9e5      	bls.n	800bb68 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800bb9c:	697b      	ldr	r3, [r7, #20]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
	...

0800bbac <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2118      	movs	r1, #24
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	4798      	blx	r3
 800bbcc:	4602      	mov	r2, r0
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbd2:	b292      	uxth	r2, r2
 800bbd4:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	2b0e      	cmp	r3, #14
 800bbda:	f200 8099 	bhi.w	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800bbde:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800bbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe4:	0800bc21 	.word	0x0800bc21
 800bbe8:	0800bc31 	.word	0x0800bc31
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bc51 	.word	0x0800bc51
 800bbf4:	0800bc61 	.word	0x0800bc61
 800bbf8:	0800bc71 	.word	0x0800bc71
 800bbfc:	0800bc81 	.word	0x0800bc81
 800bc00:	0800bc91 	.word	0x0800bc91
 800bc04:	0800bca1 	.word	0x0800bca1
 800bc08:	0800bcb1 	.word	0x0800bcb1
 800bc0c:	0800bcc1 	.word	0x0800bcc1
 800bc10:	0800bcd1 	.word	0x0800bcd1
 800bc14:	0800bce1 	.word	0x0800bce1
 800bc18:	0800bcf1 	.word	0x0800bcf1
 800bc1c:	0800bd01 	.word	0x0800bd01
      state = pL6470_StatusRegister->HiZ;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc2e:	e06f      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc3e:	e067      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc4e:	e05f      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc5e:	e057      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc6e:	e04f      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc7e:	e047      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc8e:	e03f      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc94:	785b      	ldrb	r3, [r3, #1]
 800bc96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc9e:	e037      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bca4:	785b      	ldrb	r3, [r3, #1]
 800bca6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	73fb      	strb	r3, [r7, #15]
      break;
 800bcae:	e02f      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcb4:	785b      	ldrb	r3, [r3, #1]
 800bcb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbe:	e027      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcc4:	785b      	ldrb	r3, [r3, #1]
 800bcc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	73fb      	strb	r3, [r7, #15]
      break;
 800bcce:	e01f      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcd4:	785b      	ldrb	r3, [r3, #1]
 800bcd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	73fb      	strb	r3, [r7, #15]
      break;
 800bcde:	e017      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bce4:	785b      	ldrb	r3, [r3, #1]
 800bce6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	73fb      	strb	r3, [r7, #15]
      break;
 800bcee:	e00f      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	73fb      	strb	r3, [r7, #15]
      break;
 800bcfe:	e007      	b.n	800bd10 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd04:	785b      	ldrb	r3, [r3, #1]
 800bd06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd0e:	bf00      	nop
  return state;
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop

0800bd1c <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800bd28:	78fb      	ldrb	r3, [r7, #3]
 800bd2a:	2b18      	cmp	r3, #24
 800bd2c:	d809      	bhi.n	800bd42 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a19      	ldr	r1, [r3, #32]
 800bd32:	78fa      	ldrb	r2, [r7, #3]
 800bd34:	4613      	mov	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	440b      	add	r3, r1
 800bd3e:	3301      	adds	r3, #1
 800bd40:	e000      	b.n	800bd44 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	73fb      	strb	r3, [r7, #15]
 800bd5e:	e01a      	b.n	800bd96 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800bd60:	7bfb      	ldrb	r3, [r7, #15]
 800bd62:	011b      	lsls	r3, r3, #4
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	4413      	add	r3, r2
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
 800bd6e:	011b      	lsls	r3, r3, #4
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	4413      	add	r3, r2
 800bd74:	2200      	movs	r2, #0
 800bd76:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	4413      	add	r3, r2
 800bd80:	2200      	movs	r2, #0
 800bd82:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	011b      	lsls	r3, r3, #4
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	3301      	adds	r3, #1
 800bd94:	73fb      	strb	r3, [r7, #15]
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d9e1      	bls.n	800bd60 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800bd9c:	bf00      	nop
 800bd9e:	bf00      	nop
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bdaa:	b480      	push	{r7}
 800bdac:	b085      	sub	sp, #20
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	603b      	str	r3, [r7, #0]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	7f1b      	ldrb	r3, [r3, #28]
 800bdbe:	011b      	lsls	r3, r3, #4
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	79fa      	ldrb	r2, [r7, #7]
 800bdc6:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	7f1b      	ldrb	r3, [r3, #28]
 800bdcc:	011b      	lsls	r3, r3, #4
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	7f1b      	ldrb	r3, [r3, #28]
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	4413      	add	r3, r2
 800bde0:	69ba      	ldr	r2, [r7, #24]
 800bde2:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	7f1b      	ldrb	r3, [r3, #28]
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	4413      	add	r3, r2
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	60da      	str	r2, [r3, #12]
}
 800bdf2:	bf00      	nop
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
	...

0800be00 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800be00:	b590      	push	{r4, r7, lr}
 800be02:	b087      	sub	sp, #28
 800be04:	af02      	add	r7, sp, #8
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	603b      	str	r3, [r7, #0]
 800be0c:	4613      	mov	r3, r2
 800be0e:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800be10:	4b10      	ldr	r3, [pc, #64]	@ (800be54 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800be18:	4b0e      	ldr	r3, [pc, #56]	@ (800be54 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800be1a:	2201      	movs	r2, #1
 800be1c:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68b9      	ldr	r1, [r7, #8]
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800be36:	681c      	ldr	r4, [r3, #0]
 800be38:	79fa      	ldrb	r2, [r7, #7]
 800be3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	6a3b      	ldr	r3, [r7, #32]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	47a0      	blx	r4
}
 800be4a:	bf00      	nop
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd90      	pop	{r4, r7, pc}
 800be52:	bf00      	nop
 800be54:	2000023d 	.word	0x2000023d

0800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800be68:	2300      	movs	r3, #0
 800be6a:	75bb      	strb	r3, [r7, #22]
 800be6c:	e013      	b.n	800be96 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800be6e:	2300      	movs	r3, #0
 800be70:	75fb      	strb	r3, [r7, #23]
 800be72:	e00a      	b.n	800be8a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800be74:	7d7b      	ldrb	r3, [r7, #21]
 800be76:	1c5a      	adds	r2, r3, #1
 800be78:	757a      	strb	r2, [r7, #21]
 800be7a:	461a      	mov	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4413      	add	r3, r2
 800be80:	2200      	movs	r2, #0
 800be82:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	3301      	adds	r3, #1
 800be88:	75fb      	strb	r3, [r7, #23]
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d9f1      	bls.n	800be74 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800be90:	7dbb      	ldrb	r3, [r7, #22]
 800be92:	3301      	adds	r3, #1
 800be94:	75bb      	strb	r3, [r7, #22]
 800be96:	7dbb      	ldrb	r3, [r7, #22]
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d9e8      	bls.n	800be6e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800be9c:	2300      	movs	r3, #0
 800be9e:	75fb      	strb	r3, [r7, #23]
 800bea0:	e1f1      	b.n	800c286 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bea6:	7dfb      	ldrb	r3, [r7, #23]
 800bea8:	011b      	lsls	r3, r3, #4
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	440b      	add	r3, r1
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	4619      	mov	r1, r3
 800beb2:	460b      	mov	r3, r1
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	1a5b      	subs	r3, r3, r1
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	441a      	add	r2, r3
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	440b      	add	r3, r1
 800bec2:	7b12      	ldrb	r2, [r2, #12]
 800bec4:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	011b      	lsls	r3, r3, #4
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	4413      	add	r3, r2
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b12      	cmp	r3, #18
 800bed2:	f200 81d5 	bhi.w	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800bed6:	a201      	add	r2, pc, #4	@ (adr r2, 800bedc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800c281 	.word	0x0800c281
 800bee0:	0800bf29 	.word	0x0800bf29
 800bee4:	0800bfb1 	.word	0x0800bfb1
 800bee8:	0800bfe1 	.word	0x0800bfe1
 800beec:	0800c049 	.word	0x0800c049
 800bef0:	0800c077 	.word	0x0800c077
 800bef4:	0800c0df 	.word	0x0800c0df
 800bef8:	0800c11b 	.word	0x0800c11b
 800befc:	0800c183 	.word	0x0800c183
 800bf00:	0800c21f 	.word	0x0800c21f
 800bf04:	0800c281 	.word	0x0800c281
 800bf08:	0800c281 	.word	0x0800c281
 800bf0c:	0800c281 	.word	0x0800c281
 800bf10:	0800c281 	.word	0x0800c281
 800bf14:	0800c281 	.word	0x0800c281
 800bf18:	0800c281 	.word	0x0800c281
 800bf1c:	0800c281 	.word	0x0800c281
 800bf20:	0800c281 	.word	0x0800c281
 800bf24:	0800c281 	.word	0x0800c281
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	7819      	ldrb	r1, [r3, #0]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6a18      	ldr	r0, [r3, #32]
 800bf34:	7dfb      	ldrb	r3, [r7, #23]
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4403      	add	r3, r0
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	4403      	add	r3, r0
 800bf50:	430a      	orrs	r2, r1
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6a19      	ldr	r1, [r3, #32]
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	011b      	lsls	r3, r3, #4
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	4613      	mov	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	440b      	add	r3, r1
 800bf6e:	7b9b      	ldrb	r3, [r3, #14]
 800bf70:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bf72:	2301      	movs	r3, #1
 800bf74:	75bb      	strb	r3, [r7, #22]
 800bf76:	e016      	b.n	800bfa6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	4413      	add	r3, r2
 800bf80:	689a      	ldr	r2, [r3, #8]
 800bf82:	7d39      	ldrb	r1, [r7, #20]
 800bf84:	7dbb      	ldrb	r3, [r7, #22]
 800bf86:	1acb      	subs	r3, r1, r3
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	fa22 f103 	lsr.w	r1, r2, r3
 800bf8e:	7dbb      	ldrb	r3, [r7, #22]
 800bf90:	005a      	lsls	r2, r3, #1
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	4413      	add	r3, r2
 800bf96:	461a      	mov	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	b2ca      	uxtb	r2, r1
 800bf9e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bfa0:	7dbb      	ldrb	r3, [r7, #22]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	75bb      	strb	r3, [r7, #22]
 800bfa6:	7d3a      	ldrb	r2, [r7, #20]
 800bfa8:	7dbb      	ldrb	r3, [r7, #22]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d2e4      	bcs.n	800bf78 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800bfae:	e167      	b.n	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	7819      	ldrb	r1, [r3, #0]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6a18      	ldr	r0, [r3, #32]
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	011b      	lsls	r3, r3, #4
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4403      	add	r3, r0
 800bfd0:	781a      	ldrb	r2, [r3, #0]
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	4403      	add	r3, r0
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	b2d2      	uxtb	r2, r2
 800bfdc:	701a      	strb	r2, [r3, #0]
      break;
 800bfde:	e14f      	b.n	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	7819      	ldrb	r1, [r3, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
 800bfee:	011b      	lsls	r3, r3, #4
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	4413      	add	r3, r2
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	4613      	mov	r3, r2
 800bff8:	00db      	lsls	r3, r3, #3
 800bffa:	4413      	add	r3, r2
 800bffc:	4403      	add	r3, r0
 800bffe:	7a1a      	ldrb	r2, [r3, #8]
 800c000:	7dfb      	ldrb	r3, [r7, #23]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	4403      	add	r3, r0
 800c006:	430a      	orrs	r2, r1
 800c008:	b2d2      	uxtb	r2, r2
 800c00a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c00c:	2301      	movs	r3, #1
 800c00e:	75bb      	strb	r3, [r7, #22]
 800c010:	e016      	b.n	800c040 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	011b      	lsls	r3, r3, #4
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	4413      	add	r3, r2
 800c01a:	689a      	ldr	r2, [r3, #8]
 800c01c:	7dbb      	ldrb	r3, [r7, #22]
 800c01e:	f1c3 0303 	rsb	r3, r3, #3
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	fa22 f103 	lsr.w	r1, r2, r3
 800c028:	7dbb      	ldrb	r3, [r7, #22]
 800c02a:	005a      	lsls	r2, r3, #1
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
 800c02e:	4413      	add	r3, r2
 800c030:	461a      	mov	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4413      	add	r3, r2
 800c036:	b2ca      	uxtb	r2, r1
 800c038:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c03a:	7dbb      	ldrb	r3, [r7, #22]
 800c03c:	3301      	adds	r3, #1
 800c03e:	75bb      	strb	r3, [r7, #22]
 800c040:	7dbb      	ldrb	r3, [r7, #22]
 800c042:	2b03      	cmp	r3, #3
 800c044:	d9e5      	bls.n	800c012 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800c046:	e11b      	b.n	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800c048:	7dfb      	ldrb	r3, [r7, #23]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	7819      	ldrb	r1, [r3, #0]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c054:	7dfb      	ldrb	r3, [r7, #23]
 800c056:	011b      	lsls	r3, r3, #4
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	4413      	add	r3, r2
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	4613      	mov	r3, r2
 800c060:	00db      	lsls	r3, r3, #3
 800c062:	4413      	add	r3, r2
 800c064:	4403      	add	r3, r0
 800c066:	7a1a      	ldrb	r2, [r3, #8]
 800c068:	7dfb      	ldrb	r3, [r7, #23]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	4403      	add	r3, r0
 800c06e:	430a      	orrs	r2, r1
 800c070:	b2d2      	uxtb	r2, r2
 800c072:	701a      	strb	r2, [r3, #0]
      break;
 800c074:	e104      	b.n	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800c076:	7dfb      	ldrb	r3, [r7, #23]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	7819      	ldrb	r1, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	011b      	lsls	r3, r3, #4
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	4413      	add	r3, r2
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	4613      	mov	r3, r2
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	4413      	add	r3, r2
 800c092:	4403      	add	r3, r0
 800c094:	7a1a      	ldrb	r2, [r3, #8]
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	4403      	add	r3, r0
 800c09c:	430a      	orrs	r2, r1
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	75bb      	strb	r3, [r7, #22]
 800c0a6:	e016      	b.n	800c0d6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	689a      	ldr	r2, [r3, #8]
 800c0b2:	7dbb      	ldrb	r3, [r7, #22]
 800c0b4:	f1c3 0303 	rsb	r3, r3, #3
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	fa22 f103 	lsr.w	r1, r2, r3
 800c0be:	7dbb      	ldrb	r3, [r7, #22]
 800c0c0:	005a      	lsls	r2, r3, #1
 800c0c2:	7dfb      	ldrb	r3, [r7, #23]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	b2ca      	uxtb	r2, r1
 800c0ce:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c0d0:	7dbb      	ldrb	r3, [r7, #22]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	75bb      	strb	r3, [r7, #22]
 800c0d6:	7dbb      	ldrb	r3, [r7, #22]
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d9e5      	bls.n	800c0a8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800c0dc:	e0d0      	b.n	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c0de:	2301      	movs	r3, #1
 800c0e0:	75bb      	strb	r3, [r7, #22]
 800c0e2:	e016      	b.n	800c112 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	011b      	lsls	r3, r3, #4
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	7dbb      	ldrb	r3, [r7, #22]
 800c0f0:	f1c3 0303 	rsb	r3, r3, #3
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	fa22 f103 	lsr.w	r1, r2, r3
 800c0fa:	7dbb      	ldrb	r3, [r7, #22]
 800c0fc:	005a      	lsls	r2, r3, #1
 800c0fe:	7dfb      	ldrb	r3, [r7, #23]
 800c100:	4413      	add	r3, r2
 800c102:	461a      	mov	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4413      	add	r3, r2
 800c108:	b2ca      	uxtb	r2, r1
 800c10a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c10c:	7dbb      	ldrb	r3, [r7, #22]
 800c10e:	3301      	adds	r3, #1
 800c110:	75bb      	strb	r3, [r7, #22]
 800c112:	7dbb      	ldrb	r3, [r7, #22]
 800c114:	2b03      	cmp	r3, #3
 800c116:	d9e5      	bls.n	800c0e4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800c118:	e0b2      	b.n	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	4413      	add	r3, r2
 800c120:	7819      	ldrb	r1, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c126:	7dfb      	ldrb	r3, [r7, #23]
 800c128:	011b      	lsls	r3, r3, #4
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	4413      	add	r3, r2
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	4613      	mov	r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	4413      	add	r3, r2
 800c136:	4403      	add	r3, r0
 800c138:	7a1a      	ldrb	r2, [r3, #8]
 800c13a:	7dfb      	ldrb	r3, [r7, #23]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	4403      	add	r3, r0
 800c140:	430a      	orrs	r2, r1
 800c142:	b2d2      	uxtb	r2, r2
 800c144:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c146:	2301      	movs	r3, #1
 800c148:	75bb      	strb	r3, [r7, #22]
 800c14a:	e016      	b.n	800c17a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800c14c:	7dfb      	ldrb	r3, [r7, #23]
 800c14e:	011b      	lsls	r3, r3, #4
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	4413      	add	r3, r2
 800c154:	689a      	ldr	r2, [r3, #8]
 800c156:	7dbb      	ldrb	r3, [r7, #22]
 800c158:	f1c3 0303 	rsb	r3, r3, #3
 800c15c:	00db      	lsls	r3, r3, #3
 800c15e:	fa22 f103 	lsr.w	r1, r2, r3
 800c162:	7dbb      	ldrb	r3, [r7, #22]
 800c164:	005a      	lsls	r2, r3, #1
 800c166:	7dfb      	ldrb	r3, [r7, #23]
 800c168:	4413      	add	r3, r2
 800c16a:	461a      	mov	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4413      	add	r3, r2
 800c170:	b2ca      	uxtb	r2, r1
 800c172:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c174:	7dbb      	ldrb	r3, [r7, #22]
 800c176:	3301      	adds	r3, #1
 800c178:	75bb      	strb	r3, [r7, #22]
 800c17a:	7dbb      	ldrb	r3, [r7, #22]
 800c17c:	2b03      	cmp	r3, #3
 800c17e:	d9e5      	bls.n	800c14c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800c180:	e07e      	b.n	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800c182:	7dfb      	ldrb	r3, [r7, #23]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	4413      	add	r3, r2
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	b259      	sxtb	r1, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	011b      	lsls	r3, r3, #4
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	4413      	add	r3, r2
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	4613      	mov	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	4403      	add	r3, r0
 800c1a2:	791b      	ldrb	r3, [r3, #4]
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	b25b      	sxtb	r3, r3
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	b259      	sxtb	r1, r3
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	b2ca      	uxtb	r2, r1
 800c1b4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c1b6:	7dfb      	ldrb	r3, [r7, #23]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	7819      	ldrb	r1, [r3, #0]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c1c2:	7dfb      	ldrb	r3, [r7, #23]
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	689a      	ldr	r2, [r3, #8]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	4413      	add	r3, r2
 800c1d2:	4403      	add	r3, r0
 800c1d4:	7a1a      	ldrb	r2, [r3, #8]
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	4403      	add	r3, r0
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	b2d2      	uxtb	r2, r2
 800c1e0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	75bb      	strb	r3, [r7, #22]
 800c1e6:	e016      	b.n	800c216 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800c1e8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ea:	011b      	lsls	r3, r3, #4
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	7dbb      	ldrb	r3, [r7, #22]
 800c1f4:	f1c3 0303 	rsb	r3, r3, #3
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	fa22 f103 	lsr.w	r1, r2, r3
 800c1fe:	7dbb      	ldrb	r3, [r7, #22]
 800c200:	005a      	lsls	r2, r3, #1
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	4413      	add	r3, r2
 800c206:	461a      	mov	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4413      	add	r3, r2
 800c20c:	b2ca      	uxtb	r2, r1
 800c20e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c210:	7dbb      	ldrb	r3, [r7, #22]
 800c212:	3301      	adds	r3, #1
 800c214:	75bb      	strb	r3, [r7, #22]
 800c216:	7dbb      	ldrb	r3, [r7, #22]
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d9e5      	bls.n	800c1e8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800c21c:	e030      	b.n	800c280 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	4413      	add	r3, r2
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	b259      	sxtb	r1, r3
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
 800c22e:	011b      	lsls	r3, r3, #4
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	4413      	add	r3, r2
 800c234:	685a      	ldr	r2, [r3, #4]
 800c236:	4613      	mov	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	4403      	add	r3, r0
 800c23e:	791b      	ldrb	r3, [r3, #4]
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	b25b      	sxtb	r3, r3
 800c244:	430b      	orrs	r3, r1
 800c246:	b259      	sxtb	r1, r3
 800c248:	7dfb      	ldrb	r3, [r7, #23]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	4413      	add	r3, r2
 800c24e:	b2ca      	uxtb	r2, r1
 800c250:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	4413      	add	r3, r2
 800c258:	7819      	ldrb	r1, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	011b      	lsls	r3, r3, #4
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	4413      	add	r3, r2
 800c266:	689a      	ldr	r2, [r3, #8]
 800c268:	4613      	mov	r3, r2
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	4413      	add	r3, r2
 800c26e:	4403      	add	r3, r0
 800c270:	7a1a      	ldrb	r2, [r3, #8]
 800c272:	7dfb      	ldrb	r3, [r7, #23]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	4403      	add	r3, r0
 800c278:	430a      	orrs	r2, r1
 800c27a:	b2d2      	uxtb	r2, r2
 800c27c:	701a      	strb	r2, [r3, #0]
      break;
 800c27e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	3301      	adds	r3, #1
 800c284:	75fb      	strb	r3, [r7, #23]
 800c286:	7dfb      	ldrb	r3, [r7, #23]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	f67f ae0a 	bls.w	800bea2 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800c28e:	bf00      	nop
 800c290:	bf00      	nop
 800c292:	371c      	adds	r7, #28
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800c2a8:	edd7 7a00 	vldr	s15, [r7]
 800c2ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b4:	db1e      	blt.n	800c2f4 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800c2b6:	edd7 7a00 	vldr	s15, [r7]
 800c2ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2be:	ee17 2a90 	vmov	r2, s15
 800c2c2:	edd7 7a00 	vldr	s15, [r7]
 800c2c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ce:	ed97 7a00 	vldr	s14, [r7]
 800c2d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c2da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e2:	bf4c      	ite	mi
 800c2e4:	2301      	movmi	r3, #1
 800c2e6:	2300      	movpl	r3, #0
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	f083 0301 	eor.w	r3, r3, #1
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	4413      	add	r3, r2
 800c2f2:	e01a      	b.n	800c32a <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800c2f4:	edd7 7a00 	vldr	s15, [r7]
 800c2f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2fc:	ee17 2a90 	vmov	r2, s15
 800c300:	edd7 7a00 	vldr	s15, [r7]
 800c304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c30c:	ed97 7a00 	vldr	s14, [r7]
 800c310:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c314:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c320:	d501      	bpl.n	800c326 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800c326:	2300      	movs	r3, #0
 800c328:	1ad3      	subs	r3, r2, r3
    }
 800c32a:	4618      	mov	r0, r3
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800c336:	b580      	push	{r7, lr}
 800c338:	b086      	sub	sp, #24
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	4613      	mov	r3, r2
 800c342:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6918      	ldr	r0, [r3, #16]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	8a9b      	ldrh	r3, [r3, #20]
 800c34c:	2200      	movs	r2, #0
 800c34e:	4619      	mov	r1, r3
 800c350:	f002 f8be 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6998      	ldr	r0, [r3, #24]
 800c358:	88fa      	ldrh	r2, [r7, #6]
 800c35a:	2364      	movs	r3, #100	@ 0x64
 800c35c:	68b9      	ldr	r1, [r7, #8]
 800c35e:	f003 f8e6 	bl	800f52e <HAL_SPI_Receive>
 800c362:	4603      	mov	r3, r0
 800c364:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6918      	ldr	r0, [r3, #16]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	8a9b      	ldrh	r3, [r3, #20]
 800c36e:	2201      	movs	r2, #1
 800c370:	4619      	mov	r1, r3
 800c372:	f002 f8ad 	bl	800e4d0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e000      	b.n	800c382 <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c380:	2300      	movs	r3, #0
    }
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b086      	sub	sp, #24
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	4613      	mov	r3, r2
 800c396:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6918      	ldr	r0, [r3, #16]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	8a9b      	ldrh	r3, [r3, #20]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	f002 f894 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6998      	ldr	r0, [r3, #24]
 800c3ac:	88fa      	ldrh	r2, [r7, #6]
 800c3ae:	2364      	movs	r3, #100	@ 0x64
 800c3b0:	68b9      	ldr	r1, [r7, #8]
 800c3b2:	f002 ff80 	bl	800f2b6 <HAL_SPI_Transmit>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6918      	ldr	r0, [r3, #16]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	8a9b      	ldrh	r3, [r3, #20]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	f002 f883 	bl	800e4d0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e000      	b.n	800c3d6 <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c3d4:	2300      	movs	r3, #0
    }
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b088      	sub	sp, #32
 800c3e2:	af02      	add	r7, sp, #8
 800c3e4:	60f8      	str	r0, [r7, #12]
 800c3e6:	60b9      	str	r1, [r7, #8]
 800c3e8:	607a      	str	r2, [r7, #4]
 800c3ea:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6918      	ldr	r0, [r3, #16]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	8a9b      	ldrh	r3, [r3, #20]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	f002 f86a 	bl	800e4d0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	6998      	ldr	r0, [r3, #24]
 800c400:	887b      	ldrh	r3, [r7, #2]
 800c402:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c406:	9200      	str	r2, [sp, #0]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	f003 f9a0 	bl	800f750 <HAL_SPI_TransmitReceive>
 800c410:	4603      	mov	r3, r0
 800c412:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d009      	beq.n	800c42e <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6918      	ldr	r0, [r3, #16]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	8a9b      	ldrh	r3, [r3, #20]
 800c422:	2201      	movs	r2, #1
 800c424:	4619      	mov	r1, r3
 800c426:	f002 f853 	bl	800e4d0 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e008      	b.n	800c440 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6918      	ldr	r0, [r3, #16]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	8a9b      	ldrh	r3, [r3, #20]
 800c436:	2201      	movs	r2, #1
 800c438:	4619      	mov	r1, r3
 800c43a:	f002 f849 	bl	800e4d0 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c43e:	2300      	movs	r3, #0
    }
 800c440:	4618      	mov	r0, r3
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
 800c454:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c45e:	681c      	ldr	r4, [r3, #0]
 800c460:	887b      	ldrh	r3, [r7, #2]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	6879      	ldr	r1, [r7, #4]
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	47a0      	blx	r4
    }
 800c46a:	bf00      	nop
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd90      	pop	{r4, r7, pc}
	...

0800c474 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	4a04      	ldr	r2, [pc, #16]	@ (800c490 <_ZN13abstractL6470C1Ev+0x1c>)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
{

}
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	08018728 	.word	0x08018728

0800c494 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	4a04      	ldr	r2, [pc, #16]	@ (800c4b0 <_ZN13abstractL6470D1Ev+0x1c>)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	601a      	str	r2, [r3, #0]
{

}
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	08018728 	.word	0x08018728
 800c4b4:	00000000 	.word	0x00000000

0800c4b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800c4b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	b0a7      	sub	sp, #156	@ 0x9c
 800c4be:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800c4c0:	f001 fc38 	bl	800dd34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800c4c4:	f000 f9c8 	bl	800c858 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800c4c8:	f000 fd94 	bl	800cff4 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800c4cc:	f000 fd36 	bl	800cf3c <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 800c4d0:	f000 fb64 	bl	800cb9c <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 800c4d4:	f000 fa42 	bl	800c95c <_ZL12MX_SPI1_Initv>
	MX_SPI2_Init();
 800c4d8:	f000 fa7c 	bl	800c9d4 <_ZL12MX_SPI2_Initv>
	MX_TIM1_Init();
 800c4dc:	f000 fab6 	bl	800ca4c <_ZL12MX_TIM1_Initv>
	MX_TIM4_Init();
 800c4e0:	f000 fbec 	bl	800ccbc <_ZL12MX_TIM4_Initv>
	MX_TIM8_Init();
 800c4e4:	f000 fc92 	bl	800ce0c <_ZL12MX_TIM8_Initv>
	MX_USART3_UART_Init();
 800c4e8:	f000 fd56 	bl	800cf98 <_ZL19MX_USART3_UART_Initv>
	MX_TIM6_Init();
 800c4ec:	f000 fc4e 	bl	800cd8c <_ZL12MX_TIM6_Initv>
	/* USER CODE BEGIN 2 */

	//Start Timer2 interrupt (every 20 ms here)
	HAL_TIM_Base_Start_IT(&htim2);
 800c4f0:	48bb      	ldr	r0, [pc, #748]	@ (800c7e0 <main+0x328>)
 800c4f2:	f003 fd61 	bl	800ffb8 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	49ba      	ldr	r1, [pc, #744]	@ (800c7e4 <main+0x32c>)
 800c4fa:	48bb      	ldr	r0, [pc, #748]	@ (800c7e8 <main+0x330>)
 800c4fc:	f004 fd81 	bl	8011002 <HAL_UART_Receive_IT>


	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
			reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
			reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port,
			ssel2_Pin);
 800c500:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 800c504:	f006 f8e5 	bl	80126d2 <_Znwj>
 800c508:	4603      	mov	r3, r0
 800c50a:	461c      	mov	r4, r3
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c50c:	2501      	movs	r5, #1
			ssel2_Pin);
 800c50e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c512:	9305      	str	r3, [sp, #20]
 800c514:	4bb5      	ldr	r3, [pc, #724]	@ (800c7ec <main+0x334>)
 800c516:	9304      	str	r3, [sp, #16]
 800c518:	2310      	movs	r3, #16
 800c51a:	9303      	str	r3, [sp, #12]
 800c51c:	4bb4      	ldr	r3, [pc, #720]	@ (800c7f0 <main+0x338>)
 800c51e:	9302      	str	r3, [sp, #8]
 800c520:	2310      	movs	r3, #16
 800c522:	9301      	str	r3, [sp, #4]
 800c524:	4bb1      	ldr	r3, [pc, #708]	@ (800c7ec <main+0x334>)
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	2320      	movs	r3, #32
 800c52a:	4ab1      	ldr	r2, [pc, #708]	@ (800c7f0 <main+0x338>)
 800c52c:	49b1      	ldr	r1, [pc, #708]	@ (800c7f4 <main+0x33c>)
 800c52e:	4620      	mov	r0, r4
 800c530:	f7f5 fe64 	bl	80021fc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c534:	4bb0      	ldr	r3, [pc, #704]	@ (800c7f8 <main+0x340>)
 800c536:	601c      	str	r4, [r3, #0]

	moteurs->set_microstepping_mode(step_mode_t::STEPPER_STEP_MODE);
 800c538:	4baf      	ldr	r3, [pc, #700]	@ (800c7f8 <main+0x340>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2105      	movs	r1, #5
 800c53e:	4618      	mov	r0, r3
 800c540:	f7f6 faf8 	bl	8002b34 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
	moteurs->set_max_acc_moteurs(MAXACC, MAXACC, MAXACC, MAXACC);
 800c544:	4bac      	ldr	r3, [pc, #688]	@ (800c7f8 <main+0x340>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 800c54c:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800c550:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800c554:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800c558:	4618      	mov	r0, r3
 800c55a:	f7f6 f908 	bl	800276e <_ZN11BlocMoteurs19set_max_acc_moteursEffff>
	moteurs->set_max_dec_moteurs(MAXACC, MAXACC, MAXACC, MAXACC);
 800c55e:	4ba6      	ldr	r3, [pc, #664]	@ (800c7f8 <main+0x340>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 800c566:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800c56a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800c56e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800c572:	4618      	mov	r0, r3
 800c574:	f7f6 f965 	bl	8002842 <_ZN11BlocMoteurs19set_max_dec_moteursEffff>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if(transmit_pos) {
 800c578:	4ba0      	ldr	r3, [pc, #640]	@ (800c7fc <main+0x344>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0fa      	beq.n	800c578 <main+0xc0>
			transmit_pos = false;
 800c582:	4b9e      	ldr	r3, [pc, #632]	@ (800c7fc <main+0x344>)
 800c584:	2200      	movs	r2, #0
 800c586:	701a      	strb	r2, [r3, #0]

			//calcul du deplacement
			mesures = moteurs->mesure_pas_ecoule();
 800c588:	4b9b      	ldr	r3, [pc, #620]	@ (800c7f8 <main+0x340>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7f6 f9e3 	bl	8002958 <_ZN11BlocMoteurs17mesure_pas_ecouleEv>
 800c592:	4603      	mov	r3, r0
 800c594:	4a9a      	ldr	r2, [pc, #616]	@ (800c800 <main+0x348>)
 800c596:	6013      	str	r3, [r2, #0]
			double dm1 = (double)(mesures[3]*distance_per_elementary_step);
 800c598:	4b99      	ldr	r3, [pc, #612]	@ (800c800 <main+0x348>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	330c      	adds	r3, #12
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7f3 ffef 	bl	8000584 <__aeabi_i2d>
 800c5a6:	4b97      	ldr	r3, [pc, #604]	@ (800c804 <main+0x34c>)
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	f7f4 f854 	bl	8000658 <__aeabi_dmul>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			double dm2 = (double)(mesures[2]*distance_per_elementary_step);
 800c5b8:	4b91      	ldr	r3, [pc, #580]	@ (800c800 <main+0x348>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3308      	adds	r3, #8
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7f3 ffdf 	bl	8000584 <__aeabi_i2d>
 800c5c6:	4b8f      	ldr	r3, [pc, #572]	@ (800c804 <main+0x34c>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f4 f844 	bl	8000658 <__aeabi_dmul>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
			double dm3 = (double)(mesures[0]*distance_per_elementary_step);
 800c5d8:	4b89      	ldr	r3, [pc, #548]	@ (800c800 <main+0x348>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7f3 ffd0 	bl	8000584 <__aeabi_i2d>
 800c5e4:	4b87      	ldr	r3, [pc, #540]	@ (800c804 <main+0x34c>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f4 f835 	bl	8000658 <__aeabi_dmul>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			//deplacement dans le referentiel robot
			deplacement[0] = cos(M_PI/6) * (dm3 + dm1);			//dx
 800c5f6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800c5fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c5fe:	f7f3 fe75 	bl	80002ec <__adddf3>
 800c602:	4602      	mov	r2, r0
 800c604:	460b      	mov	r3, r1
 800c606:	4610      	mov	r0, r2
 800c608:	4619      	mov	r1, r3
 800c60a:	a371      	add	r3, pc, #452	@ (adr r3, 800c7d0 <main+0x318>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	f7f4 f822 	bl	8000658 <__aeabi_dmul>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	497b      	ldr	r1, [pc, #492]	@ (800c808 <main+0x350>)
 800c61a:	e9c1 2300 	strd	r2, r3, [r1]
			deplacement[1] = sin(M_PI/6) * (dm3 - dm1) - dm2;	//dy
 800c61e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800c622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c626:	f7f3 fe5f 	bl	80002e8 <__aeabi_dsub>
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	4610      	mov	r0, r2
 800c630:	4619      	mov	r1, r3
 800c632:	f04f 32ff 	mov.w	r2, #4294967295
 800c636:	4b75      	ldr	r3, [pc, #468]	@ (800c80c <main+0x354>)
 800c638:	f7f4 f80e 	bl	8000658 <__aeabi_dmul>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4610      	mov	r0, r2
 800c642:	4619      	mov	r1, r3
 800c644:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c648:	f7f3 fe4e 	bl	80002e8 <__aeabi_dsub>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	496d      	ldr	r1, [pc, #436]	@ (800c808 <main+0x350>)
 800c652:	e9c1 2302 	strd	r2, r3, [r1, #8]
			deplacement[2] = (dm3-dm1+dm2)/3 / RAYON_EMBASE;				//dtheta
 800c656:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800c65a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c65e:	f7f3 fe43 	bl	80002e8 <__aeabi_dsub>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4610      	mov	r0, r2
 800c668:	4619      	mov	r1, r3
 800c66a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c66e:	f7f3 fe3d 	bl	80002ec <__adddf3>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	4610      	mov	r0, r2
 800c678:	4619      	mov	r1, r3
 800c67a:	f04f 0200 	mov.w	r2, #0
 800c67e:	4b64      	ldr	r3, [pc, #400]	@ (800c810 <main+0x358>)
 800c680:	f7f4 f914 	bl	80008ac <__aeabi_ddiv>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	4610      	mov	r0, r2
 800c68a:	4619      	mov	r1, r3
 800c68c:	a352      	add	r3, pc, #328	@ (adr r3, 800c7d8 <main+0x320>)
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	f7f4 f90b 	bl	80008ac <__aeabi_ddiv>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	495b      	ldr	r1, [pc, #364]	@ (800c808 <main+0x350>)
 800c69c:	e9c1 2304 	strd	r2, r3, [r1, #16]

			//calcul de la position dans le referentiel table
			position[2] += deplacement[2]; //angle
 800c6a0:	4b59      	ldr	r3, [pc, #356]	@ (800c808 <main+0x350>)
 800c6a2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c6a6:	4b5b      	ldr	r3, [pc, #364]	@ (800c814 <main+0x35c>)
 800c6a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c6ac:	f7f3 fe1e 	bl	80002ec <__adddf3>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4957      	ldr	r1, [pc, #348]	@ (800c814 <main+0x35c>)
 800c6b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
			position[0] += (deplacement[0]*cos(position[2]) + deplacement[1]*sin(position[2])); //px
 800c6ba:	4b53      	ldr	r3, [pc, #332]	@ (800c808 <main+0x350>)
 800c6bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c6c0:	4b54      	ldr	r3, [pc, #336]	@ (800c814 <main+0x35c>)
 800c6c2:	ed93 7b04 	vldr	d7, [r3, #16]
 800c6c6:	eeb0 0a47 	vmov.f32	s0, s14
 800c6ca:	eef0 0a67 	vmov.f32	s1, s15
 800c6ce:	f006 f9df 	bl	8012a90 <cos>
 800c6d2:	ec53 2b10 	vmov	r2, r3, d0
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7f3 ffbd 	bl	8000658 <__aeabi_dmul>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4690      	mov	r8, r2
 800c6e4:	4699      	mov	r9, r3
 800c6e6:	4b48      	ldr	r3, [pc, #288]	@ (800c808 <main+0x350>)
 800c6e8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c6ec:	4b49      	ldr	r3, [pc, #292]	@ (800c814 <main+0x35c>)
 800c6ee:	ed93 7b04 	vldr	d7, [r3, #16]
 800c6f2:	eeb0 0a47 	vmov.f32	s0, s14
 800c6f6:	eef0 0a67 	vmov.f32	s1, s15
 800c6fa:	f006 fa1d 	bl	8012b38 <sin>
 800c6fe:	ec53 2b10 	vmov	r2, r3, d0
 800c702:	4620      	mov	r0, r4
 800c704:	4629      	mov	r1, r5
 800c706:	f7f3 ffa7 	bl	8000658 <__aeabi_dmul>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4640      	mov	r0, r8
 800c710:	4649      	mov	r1, r9
 800c712:	f7f3 fdeb 	bl	80002ec <__adddf3>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4610      	mov	r0, r2
 800c71c:	4619      	mov	r1, r3
 800c71e:	4b3d      	ldr	r3, [pc, #244]	@ (800c814 <main+0x35c>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f7f3 fde2 	bl	80002ec <__adddf3>
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	4939      	ldr	r1, [pc, #228]	@ (800c814 <main+0x35c>)
 800c72e:	e9c1 2300 	strd	r2, r3, [r1]
			position[1] += (deplacement[1]*cos(position[2]) - deplacement[0]*sin(position[2])); //py
 800c732:	4b35      	ldr	r3, [pc, #212]	@ (800c808 <main+0x350>)
 800c734:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c738:	4b36      	ldr	r3, [pc, #216]	@ (800c814 <main+0x35c>)
 800c73a:	ed93 7b04 	vldr	d7, [r3, #16]
 800c73e:	eeb0 0a47 	vmov.f32	s0, s14
 800c742:	eef0 0a67 	vmov.f32	s1, s15
 800c746:	f006 f9a3 	bl	8012a90 <cos>
 800c74a:	ec53 2b10 	vmov	r2, r3, d0
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	f7f3 ff81 	bl	8000658 <__aeabi_dmul>
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4690      	mov	r8, r2
 800c75c:	4699      	mov	r9, r3
 800c75e:	4b2a      	ldr	r3, [pc, #168]	@ (800c808 <main+0x350>)
 800c760:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c764:	4b2b      	ldr	r3, [pc, #172]	@ (800c814 <main+0x35c>)
 800c766:	ed93 7b04 	vldr	d7, [r3, #16]
 800c76a:	eeb0 0a47 	vmov.f32	s0, s14
 800c76e:	eef0 0a67 	vmov.f32	s1, s15
 800c772:	f006 f9e1 	bl	8012b38 <sin>
 800c776:	ec53 2b10 	vmov	r2, r3, d0
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f3 ff6b 	bl	8000658 <__aeabi_dmul>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	f7f3 fdad 	bl	80002e8 <__aeabi_dsub>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4610      	mov	r0, r2
 800c794:	4619      	mov	r1, r3
 800c796:	4b1f      	ldr	r3, [pc, #124]	@ (800c814 <main+0x35c>)
 800c798:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c79c:	f7f3 fda6 	bl	80002ec <__adddf3>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	491b      	ldr	r1, [pc, #108]	@ (800c814 <main+0x35c>)
 800c7a6:	e9c1 2302 	strd	r2, r3, [r1, #8]


			char message[100] = "";
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	607b      	str	r3, [r7, #4]
 800c7ae:	f107 0308 	add.w	r3, r7, #8
 800c7b2:	2260      	movs	r2, #96	@ 0x60
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f008 fea7 	bl	801550a <memset>

			sprintf(message, "%.4f %.4f %.4f\n", position[0], position[1], position[2]); // message pos
 800c7bc:	4b15      	ldr	r3, [pc, #84]	@ (800c814 <main+0x35c>)
 800c7be:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c7c2:	4b14      	ldr	r3, [pc, #80]	@ (800c814 <main+0x35c>)
 800c7c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c7c8:	4912      	ldr	r1, [pc, #72]	@ (800c814 <main+0x35c>)
 800c7ca:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800c7ce:	e023      	b.n	800c818 <main+0x360>
 800c7d0:	e8584cab 	.word	0xe8584cab
 800c7d4:	3febb67a 	.word	0x3febb67a
 800c7d8:	1eb851ec 	.word	0x1eb851ec
 800c7dc:	3fc1eb85 	.word	0x3fc1eb85
 800c7e0:	200003d4 	.word	0x200003d4
 800c7e4:	200005ba 	.word	0x200005ba
 800c7e8:	200004f4 	.word	0x200004f4
 800c7ec:	40020000 	.word	0x40020000
 800c7f0:	40020400 	.word	0x40020400
 800c7f4:	200002dc 	.word	0x200002dc
 800c7f8:	2000057c 	.word	0x2000057c
 800c7fc:	200005b8 	.word	0x200005b8
 800c800:	20000580 	.word	0x20000580
 800c804:	20000008 	.word	0x20000008
 800c808:	20000588 	.word	0x20000588
 800c80c:	3fdfffff 	.word	0x3fdfffff
 800c810:	40080000 	.word	0x40080000
 800c814:	200005a0 	.word	0x200005a0
 800c818:	1d3e      	adds	r6, r7, #4
 800c81a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c81e:	e9cd 2300 	strd	r2, r3, [sp]
 800c822:	4622      	mov	r2, r4
 800c824:	462b      	mov	r3, r5
 800c826:	490a      	ldr	r1, [pc, #40]	@ (800c850 <main+0x398>)
 800c828:	4630      	mov	r0, r6
 800c82a:	f008 fe0b 	bl	8015444 <siprintf>
			//sprintf(message, "%f %f %f\n", deplacement[0], deplacement[1], deplacement[2]); // message depl
			//sprintf(message, "%ld %ld %ld\n", mesures[3], mesures[2], mesures[0]); //message raw values
			HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), HAL_MAX_DELAY);
 800c82e:	1d39      	adds	r1, r7, #4
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
 800c834:	2264      	movs	r2, #100	@ 0x64
 800c836:	4807      	ldr	r0, [pc, #28]	@ (800c854 <main+0x39c>)
 800c838:	f004 fb51 	bl	8010ede <HAL_UART_Transmit>
		}

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 800c83c:	e69c      	b.n	800c578 <main+0xc0>
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c83e:	2d00      	cmp	r5, #0
 800c840:	d004      	beq.n	800c84c <main+0x394>
			ssel2_Pin);
 800c842:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800c846:	4620      	mov	r0, r4
 800c848:	f005 fbe8 	bl	801201c <_ZdlPvj>
 800c84c:	f005 fbe8 	bl	8012020 <__cxa_end_cleanup>
 800c850:	0801760c 	.word	0x0801760c
 800c854:	200004f4 	.word	0x200004f4

0800c858 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800c858:	b580      	push	{r7, lr}
 800c85a:	b094      	sub	sp, #80	@ 0x50
 800c85c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800c85e:	f107 031c 	add.w	r3, r7, #28
 800c862:	2234      	movs	r2, #52	@ 0x34
 800c864:	2100      	movs	r1, #0
 800c866:	4618      	mov	r0, r3
 800c868:	f008 fe4f 	bl	801550a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800c86c:	f107 0308 	add.w	r3, r7, #8
 800c870:	2200      	movs	r2, #0
 800c872:	601a      	str	r2, [r3, #0]
 800c874:	605a      	str	r2, [r3, #4]
 800c876:	609a      	str	r2, [r3, #8]
 800c878:	60da      	str	r2, [r3, #12]
 800c87a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800c87c:	2300      	movs	r3, #0
 800c87e:	607b      	str	r3, [r7, #4]
 800c880:	4b34      	ldr	r3, [pc, #208]	@ (800c954 <_Z18SystemClock_Configv+0xfc>)
 800c882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c884:	4a33      	ldr	r2, [pc, #204]	@ (800c954 <_Z18SystemClock_Configv+0xfc>)
 800c886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c88a:	6413      	str	r3, [r2, #64]	@ 0x40
 800c88c:	4b31      	ldr	r3, [pc, #196]	@ (800c954 <_Z18SystemClock_Configv+0xfc>)
 800c88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c898:	2300      	movs	r3, #0
 800c89a:	603b      	str	r3, [r7, #0]
 800c89c:	4b2e      	ldr	r3, [pc, #184]	@ (800c958 <_Z18SystemClock_Configv+0x100>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c958 <_Z18SystemClock_Configv+0x100>)
 800c8a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8a6:	6013      	str	r3, [r2, #0]
 800c8a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c958 <_Z18SystemClock_Configv+0x100>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c8b0:	603b      	str	r3, [r7, #0]
 800c8b2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c8bc:	2310      	movs	r3, #16
 800c8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800c8c8:	2308      	movs	r3, #8
 800c8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800c8cc:	23b4      	movs	r3, #180	@ 0xb4
 800c8ce:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800c8d8:	2302      	movs	r3, #2
 800c8da:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c8dc:	f107 031c 	add.w	r3, r7, #28
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f002 f9c1 	bl	800ec68 <HAL_RCC_OscConfig>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	bf14      	ite	ne
 800c8ec:	2301      	movne	r3, #1
 800c8ee:	2300      	moveq	r3, #0
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 800c8f6:	f000 fdf1 	bl	800d4dc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800c8fa:	f001 fe1b 	bl	800e534 <HAL_PWREx_EnableOverDrive>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	bf14      	ite	ne
 800c904:	2301      	movne	r3, #1
 800c906:	2300      	moveq	r3, #0
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800c90e:	f000 fde5 	bl	800d4dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800c912:	230f      	movs	r3, #15
 800c914:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c916:	2302      	movs	r3, #2
 800c918:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c91a:	2300      	movs	r3, #0
 800c91c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c91e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c922:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800c924:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c928:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800c92a:	f107 0308 	add.w	r3, r7, #8
 800c92e:	2105      	movs	r1, #5
 800c930:	4618      	mov	r0, r3
 800c932:	f001 fe4f 	bl	800e5d4 <HAL_RCC_ClockConfig>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bf14      	ite	ne
 800c93c:	2301      	movne	r3, #1
 800c93e:	2300      	moveq	r3, #0
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800c946:	f000 fdc9 	bl	800d4dc <Error_Handler>
	}
}
 800c94a:	bf00      	nop
 800c94c:	3750      	adds	r7, #80	@ 0x50
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	40023800 	.word	0x40023800
 800c958:	40007000 	.word	0x40007000

0800c95c <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800c960:	4b1a      	ldr	r3, [pc, #104]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c962:	4a1b      	ldr	r2, [pc, #108]	@ (800c9d0 <_ZL12MX_SPI1_Initv+0x74>)
 800c964:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800c966:	4b19      	ldr	r3, [pc, #100]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c968:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c96c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c96e:	4b17      	ldr	r3, [pc, #92]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c970:	2200      	movs	r2, #0
 800c972:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c974:	4b15      	ldr	r3, [pc, #84]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c976:	2200      	movs	r2, #0
 800c978:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c97a:	4b14      	ldr	r3, [pc, #80]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c97c:	2202      	movs	r2, #2
 800c97e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c980:	4b12      	ldr	r3, [pc, #72]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c982:	2201      	movs	r2, #1
 800c984:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800c986:	4b11      	ldr	r3, [pc, #68]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c98c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c98e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c990:	2210      	movs	r2, #16
 800c992:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c994:	4b0d      	ldr	r3, [pc, #52]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c996:	2200      	movs	r2, #0
 800c998:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c99a:	4b0c      	ldr	r3, [pc, #48]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800c9a6:	4b09      	ldr	r3, [pc, #36]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c9a8:	220a      	movs	r2, #10
 800c9aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800c9ac:	4807      	ldr	r0, [pc, #28]	@ (800c9cc <_ZL12MX_SPI1_Initv+0x70>)
 800c9ae:	f002 fbf9 	bl	800f1a4 <HAL_SPI_Init>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	bf14      	ite	ne
 800c9b8:	2301      	movne	r3, #1
 800c9ba:	2300      	moveq	r3, #0
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800c9c2:	f000 fd8b 	bl	800d4dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800c9c6:	bf00      	nop
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	200002dc 	.word	0x200002dc
 800c9d0:	40013000 	.word	0x40013000

0800c9d4 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800c9d8:	4b1a      	ldr	r3, [pc, #104]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800c9da:	4a1b      	ldr	r2, [pc, #108]	@ (800ca48 <_ZL12MX_SPI2_Initv+0x74>)
 800c9dc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800c9de:	4b19      	ldr	r3, [pc, #100]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800c9e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c9e4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c9e6:	4b17      	ldr	r3, [pc, #92]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c9ec:	4b15      	ldr	r3, [pc, #84]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c9f2:	4b14      	ldr	r3, [pc, #80]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c9f8:	4b12      	ldr	r3, [pc, #72]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800c9fe:	4b11      	ldr	r3, [pc, #68]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800ca00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca04:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ca06:	4b0f      	ldr	r3, [pc, #60]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ca0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800ca12:	4b0c      	ldr	r3, [pc, #48]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca18:	4b0a      	ldr	r3, [pc, #40]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 800ca1e:	4b09      	ldr	r3, [pc, #36]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800ca20:	220a      	movs	r2, #10
 800ca22:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800ca24:	4807      	ldr	r0, [pc, #28]	@ (800ca44 <_ZL12MX_SPI2_Initv+0x70>)
 800ca26:	f002 fbbd 	bl	800f1a4 <HAL_SPI_Init>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bf14      	ite	ne
 800ca30:	2301      	movne	r3, #1
 800ca32:	2300      	moveq	r3, #0
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 800ca3a:	f000 fd4f 	bl	800d4dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800ca3e:	bf00      	nop
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20000334 	.word	0x20000334
 800ca48:	40003800 	.word	0x40003800

0800ca4c <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b092      	sub	sp, #72	@ 0x48
 800ca50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800ca52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ca56:	2200      	movs	r2, #0
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800ca5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	605a      	str	r2, [r3, #4]
 800ca66:	609a      	str	r2, [r3, #8]
 800ca68:	60da      	str	r2, [r3, #12]
 800ca6a:	611a      	str	r2, [r3, #16]
 800ca6c:	615a      	str	r2, [r3, #20]
 800ca6e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800ca70:	1d3b      	adds	r3, r7, #4
 800ca72:	2220      	movs	r2, #32
 800ca74:	2100      	movs	r1, #0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f008 fd47 	bl	801550a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800ca7c:	4b45      	ldr	r3, [pc, #276]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800ca7e:	4a46      	ldr	r2, [pc, #280]	@ (800cb98 <_ZL12MX_TIM1_Initv+0x14c>)
 800ca80:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800ca82:	4b44      	ldr	r3, [pc, #272]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca88:	4b42      	ldr	r3, [pc, #264]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800ca8e:	4b41      	ldr	r3, [pc, #260]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800ca90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca94:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ca96:	4b3f      	ldr	r3, [pc, #252]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800ca9c:	4b3d      	ldr	r3, [pc, #244]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800caa2:	4b3c      	ldr	r3, [pc, #240]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800caa8:	483a      	ldr	r0, [pc, #232]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800caaa:	f003 faf5 	bl	8010098 <HAL_TIM_PWM_Init>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	bf14      	ite	ne
 800cab4:	2301      	movne	r3, #1
 800cab6:	2300      	moveq	r3, #0
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800cabe:	f000 fd0d 	bl	800d4dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cac2:	2300      	movs	r3, #0
 800cac4:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cac6:	2300      	movs	r3, #0
 800cac8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800caca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cace:	4619      	mov	r1, r3
 800cad0:	4830      	ldr	r0, [pc, #192]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800cad2:	f004 f8d5 	bl	8010c80 <HAL_TIMEx_MasterConfigSynchronization>
 800cad6:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bf14      	ite	ne
 800cadc:	2301      	movne	r3, #1
 800cade:	2300      	moveq	r3, #0
 800cae0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 800cae6:	f000 fcf9 	bl	800d4dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800caea:	2360      	movs	r3, #96	@ 0x60
 800caec:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800caf2:	2300      	movs	r3, #0
 800caf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800caf6:	2300      	movs	r3, #0
 800caf8:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800cafe:	2300      	movs	r3, #0
 800cb00:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800cb02:	2300      	movs	r3, #0
 800cb04:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800cb06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb0a:	2204      	movs	r2, #4
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4821      	ldr	r0, [pc, #132]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800cb10:	f003 fc1a 	bl	8010348 <HAL_TIM_PWM_ConfigChannel>
 800cb14:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	bf14      	ite	ne
 800cb1a:	2301      	movne	r3, #1
 800cb1c:	2300      	moveq	r3, #0
 800cb1e:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 800cb24:	f000 fcda 	bl	800d4dc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800cb28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb2c:	2208      	movs	r2, #8
 800cb2e:	4619      	mov	r1, r3
 800cb30:	4818      	ldr	r0, [pc, #96]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800cb32:	f003 fc09 	bl	8010348 <HAL_TIM_PWM_ConfigChannel>
 800cb36:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	bf14      	ite	ne
 800cb3c:	2301      	movne	r3, #1
 800cb3e:	2300      	moveq	r3, #0
 800cb40:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <_ZL12MX_TIM1_Initv+0xfe>
		Error_Handler();
 800cb46:	f000 fcc9 	bl	800d4dc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800cb5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cb62:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800cb64:	2300      	movs	r3, #0
 800cb66:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800cb68:	1d3b      	adds	r3, r7, #4
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4809      	ldr	r0, [pc, #36]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800cb6e:	f004 f903 	bl	8010d78 <HAL_TIMEx_ConfigBreakDeadTime>
 800cb72:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bf14      	ite	ne
 800cb78:	2301      	movne	r3, #1
 800cb7a:	2300      	moveq	r3, #0
 800cb7c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <_ZL12MX_TIM1_Initv+0x13a>
		Error_Handler();
 800cb82:	f000 fcab 	bl	800d4dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 800cb86:	4803      	ldr	r0, [pc, #12]	@ (800cb94 <_ZL12MX_TIM1_Initv+0x148>)
 800cb88:	f000 fe0e 	bl	800d7a8 <HAL_TIM_MspPostInit>

}
 800cb8c:	bf00      	nop
 800cb8e:	3748      	adds	r7, #72	@ 0x48
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	2000038c 	.word	0x2000038c
 800cb98:	40010000 	.word	0x40010000

0800cb9c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08e      	sub	sp, #56	@ 0x38
 800cba0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800cba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
 800cbaa:	605a      	str	r2, [r3, #4]
 800cbac:	609a      	str	r2, [r3, #8]
 800cbae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800cbb0:	f107 0320 	add.w	r3, r7, #32
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800cbba:	1d3b      	adds	r3, r7, #4
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	601a      	str	r2, [r3, #0]
 800cbc0:	605a      	str	r2, [r3, #4]
 800cbc2:	609a      	str	r2, [r3, #8]
 800cbc4:	60da      	str	r2, [r3, #12]
 800cbc6:	611a      	str	r2, [r3, #16]
 800cbc8:	615a      	str	r2, [r3, #20]
 800cbca:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800cbcc:	4b39      	ldr	r3, [pc, #228]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cbce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800cbd2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800cbd4:	4b37      	ldr	r3, [pc, #220]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cbda:	4b36      	ldr	r3, [pc, #216]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1800000;
 800cbe0:	4b34      	ldr	r3, [pc, #208]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cbe2:	4a35      	ldr	r2, [pc, #212]	@ (800ccb8 <_ZL12MX_TIM2_Initv+0x11c>)
 800cbe4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cbe6:	4b33      	ldr	r3, [pc, #204]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cbec:	4b31      	ldr	r3, [pc, #196]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cbee:	2280      	movs	r2, #128	@ 0x80
 800cbf0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800cbf2:	4830      	ldr	r0, [pc, #192]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cbf4:	f003 f990 	bl	800ff18 <HAL_TIM_Base_Init>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	bf14      	ite	ne
 800cbfe:	2301      	movne	r3, #1
 800cc00:	2300      	moveq	r3, #0
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <_ZL12MX_TIM2_Initv+0x70>
		Error_Handler();
 800cc08:	f000 fc68 	bl	800d4dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cc0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc10:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800cc12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cc16:	4619      	mov	r1, r3
 800cc18:	4826      	ldr	r0, [pc, #152]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cc1a:	f003 fc57 	bl	80104cc <HAL_TIM_ConfigClockSource>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bf14      	ite	ne
 800cc24:	2301      	movne	r3, #1
 800cc26:	2300      	moveq	r3, #0
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d001      	beq.n	800cc32 <_ZL12MX_TIM2_Initv+0x96>
		Error_Handler();
 800cc2e:	f000 fc55 	bl	800d4dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800cc32:	4820      	ldr	r0, [pc, #128]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cc34:	f003 fa30 	bl	8010098 <HAL_TIM_PWM_Init>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	bf14      	ite	ne
 800cc3e:	2301      	movne	r3, #1
 800cc40:	2300      	moveq	r3, #0
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 800cc48:	f000 fc48 	bl	800d4dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cc50:	2300      	movs	r3, #0
 800cc52:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800cc54:	f107 0320 	add.w	r3, r7, #32
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4816      	ldr	r0, [pc, #88]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cc5c:	f004 f810 	bl	8010c80 <HAL_TIMEx_MasterConfigSynchronization>
 800cc60:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	bf14      	ite	ne
 800cc66:	2301      	movne	r3, #1
 800cc68:	2300      	moveq	r3, #0
 800cc6a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <_ZL12MX_TIM2_Initv+0xd8>
		Error_Handler();
 800cc70:	f000 fc34 	bl	800d4dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cc74:	2360      	movs	r3, #96	@ 0x60
 800cc76:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cc80:	2300      	movs	r3, #0
 800cc82:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800cc84:	1d3b      	adds	r3, r7, #4
 800cc86:	2200      	movs	r2, #0
 800cc88:	4619      	mov	r1, r3
 800cc8a:	480a      	ldr	r0, [pc, #40]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cc8c:	f003 fb5c 	bl	8010348 <HAL_TIM_PWM_ConfigChannel>
 800cc90:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	bf14      	ite	ne
 800cc96:	2301      	movne	r3, #1
 800cc98:	2300      	moveq	r3, #0
 800cc9a:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d001      	beq.n	800cca4 <_ZL12MX_TIM2_Initv+0x108>
		Error_Handler();
 800cca0:	f000 fc1c 	bl	800d4dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800cca4:	4803      	ldr	r0, [pc, #12]	@ (800ccb4 <_ZL12MX_TIM2_Initv+0x118>)
 800cca6:	f000 fd7f 	bl	800d7a8 <HAL_TIM_MspPostInit>

}
 800ccaa:	bf00      	nop
 800ccac:	3738      	adds	r7, #56	@ 0x38
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	200003d4 	.word	0x200003d4
 800ccb8:	001b7740 	.word	0x001b7740

0800ccbc <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	@ 0x28
 800ccc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800ccc2:	f107 0320 	add.w	r3, r7, #32
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800cccc:	1d3b      	adds	r3, r7, #4
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	605a      	str	r2, [r3, #4]
 800ccd4:	609a      	str	r2, [r3, #8]
 800ccd6:	60da      	str	r2, [r3, #12]
 800ccd8:	611a      	str	r2, [r3, #16]
 800ccda:	615a      	str	r2, [r3, #20]
 800ccdc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800ccde:	4b29      	ldr	r3, [pc, #164]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800cce0:	4a29      	ldr	r2, [pc, #164]	@ (800cd88 <_ZL12MX_TIM4_Initv+0xcc>)
 800cce2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800cce4:	4b27      	ldr	r3, [pc, #156]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ccea:	4b26      	ldr	r3, [pc, #152]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800ccf0:	4b24      	ldr	r3, [pc, #144]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800ccf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ccf6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ccf8:	4b22      	ldr	r3, [pc, #136]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ccfe:	4b21      	ldr	r3, [pc, #132]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800cd04:	481f      	ldr	r0, [pc, #124]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800cd06:	f003 f9c7 	bl	8010098 <HAL_TIM_PWM_Init>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	bf14      	ite	ne
 800cd10:	2301      	movne	r3, #1
 800cd12:	2300      	moveq	r3, #0
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 800cd1a:	f000 fbdf 	bl	800d4dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cd22:	2300      	movs	r3, #0
 800cd24:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800cd26:	f107 0320 	add.w	r3, r7, #32
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4815      	ldr	r0, [pc, #84]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800cd2e:	f003 ffa7 	bl	8010c80 <HAL_TIMEx_MasterConfigSynchronization>
 800cd32:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bf14      	ite	ne
 800cd38:	2301      	movne	r3, #1
 800cd3a:	2300      	moveq	r3, #0
 800cd3c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 800cd42:	f000 fbcb 	bl	800d4dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cd46:	2360      	movs	r3, #96	@ 0x60
 800cd48:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cd52:	2300      	movs	r3, #0
 800cd54:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800cd56:	1d3b      	adds	r3, r7, #4
 800cd58:	2204      	movs	r2, #4
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4809      	ldr	r0, [pc, #36]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800cd5e:	f003 faf3 	bl	8010348 <HAL_TIM_PWM_ConfigChannel>
 800cd62:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	bf14      	ite	ne
 800cd68:	2301      	movne	r3, #1
 800cd6a:	2300      	moveq	r3, #0
 800cd6c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 800cd72:	f000 fbb3 	bl	800d4dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit (&htim4);
 800cd76:	4803      	ldr	r0, [pc, #12]	@ (800cd84 <_ZL12MX_TIM4_Initv+0xc8>)
 800cd78:	f000 fd16 	bl	800d7a8 <HAL_TIM_MspPostInit>

}
 800cd7c:	bf00      	nop
 800cd7e:	3728      	adds	r7, #40	@ 0x28
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	2000041c 	.word	0x2000041c
 800cd88:	40000800 	.word	0x40000800

0800cd8c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cd92:	463b      	mov	r3, r7
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800cd9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ce04 <_ZL12MX_TIM6_Initv+0x78>)
 800cd9c:	4a1a      	ldr	r2, [pc, #104]	@ (800ce08 <_ZL12MX_TIM6_Initv+0x7c>)
 800cd9e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 800cda0:	4b18      	ldr	r3, [pc, #96]	@ (800ce04 <_ZL12MX_TIM6_Initv+0x78>)
 800cda2:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800cda6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cda8:	4b16      	ldr	r3, [pc, #88]	@ (800ce04 <_ZL12MX_TIM6_Initv+0x78>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65520;
 800cdae:	4b15      	ldr	r3, [pc, #84]	@ (800ce04 <_ZL12MX_TIM6_Initv+0x78>)
 800cdb0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800cdb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cdb6:	4b13      	ldr	r3, [pc, #76]	@ (800ce04 <_ZL12MX_TIM6_Initv+0x78>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800cdbc:	4811      	ldr	r0, [pc, #68]	@ (800ce04 <_ZL12MX_TIM6_Initv+0x78>)
 800cdbe:	f003 f8ab 	bl	800ff18 <HAL_TIM_Base_Init>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bf14      	ite	ne
 800cdc8:	2301      	movne	r3, #1
 800cdca:	2300      	moveq	r3, #0
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800cdd2:	f000 fb83 	bl	800d4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cdda:	2300      	movs	r3, #0
 800cddc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800cdde:	463b      	mov	r3, r7
 800cde0:	4619      	mov	r1, r3
 800cde2:	4808      	ldr	r0, [pc, #32]	@ (800ce04 <_ZL12MX_TIM6_Initv+0x78>)
 800cde4:	f003 ff4c 	bl	8010c80 <HAL_TIMEx_MasterConfigSynchronization>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bf14      	ite	ne
 800cdee:	2301      	movne	r3, #1
 800cdf0:	2300      	moveq	r3, #0
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800cdf8:	f000 fb70 	bl	800d4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800cdfc:	bf00      	nop
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	20000464 	.word	0x20000464
 800ce08:	40001000 	.word	0x40001000

0800ce0c <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b092      	sub	sp, #72	@ 0x48
 800ce10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800ce12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ce16:	2200      	movs	r2, #0
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800ce1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	605a      	str	r2, [r3, #4]
 800ce26:	609a      	str	r2, [r3, #8]
 800ce28:	60da      	str	r2, [r3, #12]
 800ce2a:	611a      	str	r2, [r3, #16]
 800ce2c:	615a      	str	r2, [r3, #20]
 800ce2e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800ce30:	1d3b      	adds	r3, r7, #4
 800ce32:	2220      	movs	r2, #32
 800ce34:	2100      	movs	r1, #0
 800ce36:	4618      	mov	r0, r3
 800ce38:	f008 fb67 	bl	801550a <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800ce3c:	4b3d      	ldr	r3, [pc, #244]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce3e:	4a3e      	ldr	r2, [pc, #248]	@ (800cf38 <_ZL12MX_TIM8_Initv+0x12c>)
 800ce40:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800ce42:	4b3c      	ldr	r3, [pc, #240]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce48:	4b3a      	ldr	r3, [pc, #232]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800ce4e:	4b39      	ldr	r3, [pc, #228]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce54:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ce56:	4b37      	ldr	r3, [pc, #220]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800ce5c:	4b35      	ldr	r3, [pc, #212]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ce62:	4b34      	ldr	r3, [pc, #208]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800ce68:	4832      	ldr	r0, [pc, #200]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce6a:	f003 f915 	bl	8010098 <HAL_TIM_PWM_Init>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	bf14      	ite	ne
 800ce74:	2301      	movne	r3, #1
 800ce76:	2300      	moveq	r3, #0
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <_ZL12MX_TIM8_Initv+0x76>
		Error_Handler();
 800ce7e:	f000 fb2d 	bl	800d4dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ce82:	2300      	movs	r3, #0
 800ce84:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800ce8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4828      	ldr	r0, [pc, #160]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ce92:	f003 fef5 	bl	8010c80 <HAL_TIMEx_MasterConfigSynchronization>
 800ce96:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	bf14      	ite	ne
 800ce9c:	2301      	movne	r3, #1
 800ce9e:	2300      	moveq	r3, #0
 800cea0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d001      	beq.n	800ceaa <_ZL12MX_TIM8_Initv+0x9e>
		Error_Handler();
 800cea6:	f000 fb19 	bl	800d4dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ceaa:	2360      	movs	r3, #96	@ 0x60
 800ceac:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ceba:	2300      	movs	r3, #0
 800cebc:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800cebe:	2300      	movs	r3, #0
 800cec0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800cec2:	2300      	movs	r3, #0
 800cec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800cec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ceca:	2204      	movs	r2, #4
 800cecc:	4619      	mov	r1, r3
 800cece:	4819      	ldr	r0, [pc, #100]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800ced0:	f003 fa3a 	bl	8010348 <HAL_TIM_PWM_ConfigChannel>
 800ced4:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	bf14      	ite	ne
 800ceda:	2301      	movne	r3, #1
 800cedc:	2300      	moveq	r3, #0
 800cede:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <_ZL12MX_TIM8_Initv+0xdc>
		Error_Handler();
 800cee4:	f000 fafa 	bl	800d4dc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800cee8:	2300      	movs	r3, #0
 800ceea:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ceec:	2300      	movs	r3, #0
 800ceee:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800cef8:	2300      	movs	r3, #0
 800cefa:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800cefc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cf00:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800cf02:	2300      	movs	r3, #0
 800cf04:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800cf06:	1d3b      	adds	r3, r7, #4
 800cf08:	4619      	mov	r1, r3
 800cf0a:	480a      	ldr	r0, [pc, #40]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800cf0c:	f003 ff34 	bl	8010d78 <HAL_TIMEx_ConfigBreakDeadTime>
 800cf10:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bf14      	ite	ne
 800cf16:	2301      	movne	r3, #1
 800cf18:	2300      	moveq	r3, #0
 800cf1a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <_ZL12MX_TIM8_Initv+0x118>
		Error_Handler();
 800cf20:	f000 fadc 	bl	800d4dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit (&htim8);
 800cf24:	4803      	ldr	r0, [pc, #12]	@ (800cf34 <_ZL12MX_TIM8_Initv+0x128>)
 800cf26:	f000 fc3f 	bl	800d7a8 <HAL_TIM_MspPostInit>

}
 800cf2a:	bf00      	nop
 800cf2c:	3748      	adds	r7, #72	@ 0x48
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	200004ac 	.word	0x200004ac
 800cf38:	40010400 	.word	0x40010400

0800cf3c <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800cf40:	4b13      	ldr	r3, [pc, #76]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf42:	4a14      	ldr	r2, [pc, #80]	@ (800cf94 <_ZL19MX_USART2_UART_Initv+0x58>)
 800cf44:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800cf46:	4b12      	ldr	r3, [pc, #72]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cf4c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cf4e:	4b10      	ldr	r3, [pc, #64]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800cf54:	4b0e      	ldr	r3, [pc, #56]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800cf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800cf60:	4b0b      	ldr	r3, [pc, #44]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf62:	220c      	movs	r2, #12
 800cf64:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cf66:	4b0a      	ldr	r3, [pc, #40]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cf6c:	4b08      	ldr	r3, [pc, #32]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800cf72:	4807      	ldr	r0, [pc, #28]	@ (800cf90 <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf74:	f003 ff66 	bl	8010e44 <HAL_UART_Init>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	bf14      	ite	ne
 800cf7e:	2301      	movne	r3, #1
 800cf80:	2300      	moveq	r3, #0
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800cf88:	f000 faa8 	bl	800d4dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800cf8c:	bf00      	nop
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	200004f4 	.word	0x200004f4
 800cf94:	40004400 	.word	0x40004400

0800cf98 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800cf9c:	4b13      	ldr	r3, [pc, #76]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cf9e:	4a14      	ldr	r2, [pc, #80]	@ (800cff0 <_ZL19MX_USART3_UART_Initv+0x58>)
 800cfa0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800cfa2:	4b12      	ldr	r3, [pc, #72]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cfa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cfa8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800cfaa:	4b10      	ldr	r3, [pc, #64]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800cfb0:	4b0e      	ldr	r3, [pc, #56]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800cfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800cfbc:	4b0b      	ldr	r3, [pc, #44]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cfbe:	220c      	movs	r2, #12
 800cfc0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800cfc8:	4b08      	ldr	r3, [pc, #32]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800cfce:	4807      	ldr	r0, [pc, #28]	@ (800cfec <_ZL19MX_USART3_UART_Initv+0x54>)
 800cfd0:	f003 ff38 	bl	8010e44 <HAL_UART_Init>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	bf14      	ite	ne
 800cfda:	2301      	movne	r3, #1
 800cfdc:	2300      	moveq	r3, #0
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <_ZL19MX_USART3_UART_Initv+0x50>
		Error_Handler();
 800cfe4:	f000 fa7a 	bl	800d4dc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800cfe8:	bf00      	nop
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	20000538 	.word	0x20000538
 800cff0:	40004800 	.word	0x40004800

0800cff4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	@ 0x28
 800cff8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800cffa:	f107 0314 	add.w	r3, r7, #20
 800cffe:	2200      	movs	r2, #0
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	605a      	str	r2, [r3, #4]
 800d004:	609a      	str	r2, [r3, #8]
 800d006:	60da      	str	r2, [r3, #12]
 800d008:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d00a:	2300      	movs	r3, #0
 800d00c:	613b      	str	r3, [r7, #16]
 800d00e:	4b43      	ldr	r3, [pc, #268]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d012:	4a42      	ldr	r2, [pc, #264]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d014:	f043 0304 	orr.w	r3, r3, #4
 800d018:	6313      	str	r3, [r2, #48]	@ 0x30
 800d01a:	4b40      	ldr	r3, [pc, #256]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d01e:	f003 0304 	and.w	r3, r3, #4
 800d022:	613b      	str	r3, [r7, #16]
 800d024:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d026:	2300      	movs	r3, #0
 800d028:	60fb      	str	r3, [r7, #12]
 800d02a:	4b3c      	ldr	r3, [pc, #240]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d02e:	4a3b      	ldr	r2, [pc, #236]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d034:	6313      	str	r3, [r2, #48]	@ 0x30
 800d036:	4b39      	ldr	r3, [pc, #228]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d03a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d042:	2300      	movs	r3, #0
 800d044:	60bb      	str	r3, [r7, #8]
 800d046:	4b35      	ldr	r3, [pc, #212]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d04a:	4a34      	ldr	r2, [pc, #208]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d04c:	f043 0301 	orr.w	r3, r3, #1
 800d050:	6313      	str	r3, [r2, #48]	@ 0x30
 800d052:	4b32      	ldr	r3, [pc, #200]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	60bb      	str	r3, [r7, #8]
 800d05c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d05e:	2300      	movs	r3, #0
 800d060:	607b      	str	r3, [r7, #4]
 800d062:	4b2e      	ldr	r3, [pc, #184]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d066:	4a2d      	ldr	r2, [pc, #180]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d068:	f043 0302 	orr.w	r3, r3, #2
 800d06c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d06e:	4b2b      	ldr	r3, [pc, #172]	@ (800d11c <_ZL12MX_GPIO_Initv+0x128>)
 800d070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d072:	f003 0302 	and.w	r3, r3, #2
 800d076:	607b      	str	r3, [r7, #4]
 800d078:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ssel1_Pin | LD2_Pin | ssel2_Pin, GPIO_PIN_RESET);
 800d07a:	2200      	movs	r2, #0
 800d07c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800d080:	4827      	ldr	r0, [pc, #156]	@ (800d120 <_ZL12MX_GPIO_Initv+0x12c>)
 800d082:	f001 fa25 	bl	800e4d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800d086:	2200      	movs	r2, #0
 800d088:	f241 2130 	movw	r1, #4656	@ 0x1230
 800d08c:	4825      	ldr	r0, [pc, #148]	@ (800d124 <_ZL12MX_GPIO_Initv+0x130>)
 800d08e:	f001 fa1f 	bl	800e4d0 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800d092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d096:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d098:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d09c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d0a2:	f107 0314 	add.w	r3, r7, #20
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	481f      	ldr	r0, [pc, #124]	@ (800d128 <_ZL12MX_GPIO_Initv+0x134>)
 800d0aa:	f001 f87d 	bl	800e1a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d0b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800d0b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d0bc:	f107 0314 	add.w	r3, r7, #20
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	4819      	ldr	r0, [pc, #100]	@ (800d128 <_ZL12MX_GPIO_Initv+0x134>)
 800d0c4:	f001 f870 	bl	800e1a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
	GPIO_InitStruct.Pin = ssel1_Pin | LD2_Pin | ssel2_Pin;
 800d0c8:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800d0cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0da:	f107 0314 	add.w	r3, r7, #20
 800d0de:	4619      	mov	r1, r3
 800d0e0:	480f      	ldr	r0, [pc, #60]	@ (800d120 <_ZL12MX_GPIO_Initv+0x12c>)
 800d0e2:	f001 f861 	bl	800e1a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 reset_shield_2_Pin reset_shield_1_Pin PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin
 800d0e6:	f241 2330 	movw	r3, #4656	@ 0x1230
 800d0ea:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d0f8:	f107 0314 	add.w	r3, r7, #20
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	4809      	ldr	r0, [pc, #36]	@ (800d124 <_ZL12MX_GPIO_Initv+0x130>)
 800d100:	f001 f852 	bl	800e1a8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800d104:	2200      	movs	r2, #0
 800d106:	2100      	movs	r1, #0
 800d108:	2006      	movs	r0, #6
 800d10a:	f000 ff84 	bl	800e016 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d10e:	2006      	movs	r0, #6
 800d110:	f000 ff9d 	bl	800e04e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800d114:	bf00      	nop
 800d116:	3728      	adds	r7, #40	@ 0x28
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	40023800 	.word	0x40023800
 800d120:	40020000 	.word	0x40020000
 800d124:	40020400 	.word	0x40020400
 800d128:	40020800 	.word	0x40020800

0800d12c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7f3 fa25 	bl	8000584 <__aeabi_i2d>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	ec43 2b10 	vmov	d0, r2, r3
 800d142:	f005 fc79 	bl	8012a38 <sqrt>
 800d146:	eeb0 7a40 	vmov.f32	s14, s0
 800d14a:	eef0 7a60 	vmov.f32	s15, s1
 800d14e:	eeb0 0a47 	vmov.f32	s0, s14
 800d152:	eef0 0a67 	vmov.f32	s1, s15
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	0000      	movs	r0, r0
	...

0800d160 <_Z9moveSpeedddd>:

/* USER CODE BEGIN 4 */


void moveSpeed(double vx, double vy, double wz)
{
 800d160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d162:	b08d      	sub	sp, #52	@ 0x34
 800d164:	af00      	add	r7, sp, #0
 800d166:	ed87 0b04 	vstr	d0, [r7, #16]
 800d16a:	ed87 1b02 	vstr	d1, [r7, #8]
 800d16e:	ed87 2b00 	vstr	d2, [r7]
	//calcul des vitesses
	double Wm1 = -1/(2*RAYON_ROUES) * vy - sqrt(3)/(2*RAYON_ROUES) * vx + RAYON_EMBASE / RAYON_ROUES * wz;
 800d172:	a35d      	add	r3, pc, #372	@ (adr r3, 800d2e8 <_Z9moveSpeedddd+0x188>)
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d17c:	f7f3 fa6c 	bl	8000658 <__aeabi_dmul>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4614      	mov	r4, r2
 800d186:	461d      	mov	r5, r3
 800d188:	2003      	movs	r0, #3
 800d18a:	f7ff ffcf 	bl	800d12c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800d18e:	ec51 0b10 	vmov	r0, r1, d0
 800d192:	a357      	add	r3, pc, #348	@ (adr r3, 800d2f0 <_Z9moveSpeedddd+0x190>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	f7f3 fb88 	bl	80008ac <__aeabi_ddiv>
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d1a8:	f7f3 fa56 	bl	8000658 <__aeabi_dmul>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	f7f3 f898 	bl	80002e8 <__aeabi_dsub>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4614      	mov	r4, r2
 800d1be:	461d      	mov	r5, r3
 800d1c0:	a34d      	add	r3, pc, #308	@ (adr r3, 800d2f8 <_Z9moveSpeedddd+0x198>)
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1ca:	f7f3 fa45 	bl	8000658 <__aeabi_dmul>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f7f3 f889 	bl	80002ec <__adddf3>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double Wm3 = sqrt(3)/(2*RAYON_ROUES) * vx - 1/(2*RAYON_ROUES) * vy + RAYON_EMBASE / RAYON_ROUES * wz;
 800d1e2:	2003      	movs	r0, #3
 800d1e4:	f7ff ffa2 	bl	800d12c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800d1e8:	ec51 0b10 	vmov	r0, r1, d0
 800d1ec:	a340      	add	r3, pc, #256	@ (adr r3, 800d2f0 <_Z9moveSpeedddd+0x190>)
 800d1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f2:	f7f3 fb5b 	bl	80008ac <__aeabi_ddiv>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d202:	f7f3 fa29 	bl	8000658 <__aeabi_dmul>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4614      	mov	r4, r2
 800d20c:	461d      	mov	r5, r3
 800d20e:	a33c      	add	r3, pc, #240	@ (adr r3, 800d300 <_Z9moveSpeedddd+0x1a0>)
 800d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d214:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d218:	f7f3 fa1e 	bl	8000658 <__aeabi_dmul>
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	4620      	mov	r0, r4
 800d222:	4629      	mov	r1, r5
 800d224:	f7f3 f860 	bl	80002e8 <__aeabi_dsub>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4614      	mov	r4, r2
 800d22e:	461d      	mov	r5, r3
 800d230:	a331      	add	r3, pc, #196	@ (adr r3, 800d2f8 <_Z9moveSpeedddd+0x198>)
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d23a:	f7f3 fa0d 	bl	8000658 <__aeabi_dmul>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	4620      	mov	r0, r4
 800d244:	4629      	mov	r1, r5
 800d246:	f7f3 f851 	bl	80002ec <__adddf3>
 800d24a:	4602      	mov	r2, r0
 800d24c:	460b      	mov	r3, r1
 800d24e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Wm2 = (1/RAYON_ROUES * vy + RAYON_EMBASE/RAYON_ROUES*wz);//1/RAYON_ROUES * vy + RAYON_EMBASE * wz;
 800d252:	a32d      	add	r3, pc, #180	@ (adr r3, 800d308 <_Z9moveSpeedddd+0x1a8>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d25c:	f7f3 f9fc 	bl	8000658 <__aeabi_dmul>
 800d260:	4602      	mov	r2, r0
 800d262:	460b      	mov	r3, r1
 800d264:	4614      	mov	r4, r2
 800d266:	461d      	mov	r5, r3
 800d268:	a323      	add	r3, pc, #140	@ (adr r3, 800d2f8 <_Z9moveSpeedddd+0x198>)
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d272:	f7f3 f9f1 	bl	8000658 <__aeabi_dmul>
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	4620      	mov	r0, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7f3 f835 	bl	80002ec <__adddf3>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//pilotage des moteurs
	moteurs->motors_on();
 800d28a:	4b15      	ldr	r3, [pc, #84]	@ (800d2e0 <_Z9moveSpeedddd+0x180>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4618      	mov	r0, r3
 800d290:	f7f5 fa30 	bl	80026f4 <_ZN11BlocMoteurs9motors_onEv>
	moteurs->commande_vitesses_absolues(Wm3, 0, Wm2, -Wm1);
 800d294:	4b12      	ldr	r3, [pc, #72]	@ (800d2e0 <_Z9moveSpeedddd+0x180>)
 800d296:	681c      	ldr	r4, [r3, #0]
 800d298:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d29c:	f7f3 fcb4 	bl	8000c08 <__aeabi_d2f>
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d2a6:	f7f3 fcaf 	bl	8000c08 <__aeabi_d2f>
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d2b0:	f7f3 fcaa 	bl	8000c08 <__aeabi_d2f>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	ee07 3a90 	vmov	s15, r3
 800d2ba:	eef1 7a67 	vneg.f32	s15, s15
 800d2be:	eef0 1a67 	vmov.f32	s3, s15
 800d2c2:	ee01 6a10 	vmov	s2, r6
 800d2c6:	eddf 0a07 	vldr	s1, [pc, #28]	@ 800d2e4 <_Z9moveSpeedddd+0x184>
 800d2ca:	ee00 5a10 	vmov	s0, r5
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f7f5 f9b5 	bl	800263e <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>
}
 800d2d4:	bf00      	nop
 800d2d6:	3734      	adds	r7, #52	@ 0x34
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2dc:	f3af 8000 	nop.w
 800d2e0:	2000057c 	.word	0x2000057c
 800d2e4:	00000000 	.word	0x00000000
 800d2e8:	08d3dcb0 	.word	0x08d3dcb0
 800d2ec:	c0313dcb 	.word	0xc0313dcb
 800d2f0:	0e560419 	.word	0x0e560419
 800d2f4:	3fadb22d 	.word	0x3fadb22d
 800d2f8:	c234f72c 	.word	0xc234f72c
 800d2fc:	40134f72 	.word	0x40134f72
 800d300:	08d3dcb0 	.word	0x08d3dcb0
 800d304:	40313dcb 	.word	0x40313dcb
 800d308:	08d3dcb0 	.word	0x08d3dcb0
 800d30c:	40413dcb 	.word	0x40413dcb

0800d310 <_Z4stopv>:


void stop()
{
 800d310:	b580      	push	{r7, lr}
 800d312:	af00      	add	r7, sp, #0
	moteurs->motors_stop_hard();
 800d314:	4b03      	ldr	r3, [pc, #12]	@ (800d324 <_Z4stopv+0x14>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4618      	mov	r0, r3
 800d31a:	f7f5 f9f8 	bl	800270e <_ZN11BlocMoteurs16motors_stop_hardEv>
}
 800d31e:	bf00      	nop
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	2000057c 	.word	0x2000057c

0800d328 <HAL_GPIO_EXTI_Callback>:


// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	4603      	mov	r3, r0
 800d330:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800d332:	88fb      	ldrh	r3, [r7, #6]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d102      	bne.n	800d33e <HAL_GPIO_EXTI_Callback+0x16>
		// Motors are busy when pin low. Rising edge -> no longer busy
		motors_busy = false;
 800d338:	4b04      	ldr	r3, [pc, #16]	@ (800d34c <HAL_GPIO_EXTI_Callback+0x24>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	701a      	strb	r2, [r3, #0]
	}
}
 800d33e:	bf00      	nop
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	200005b9 	.word	0x200005b9

0800d350 <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a4e      	ldr	r2, [pc, #312]	@ (800d498 <HAL_UART_RxCpltCallback+0x148>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	f040 8081 	bne.w	800d466 <HAL_UART_RxCpltCallback+0x116>
	{
		switch(uart_received_char)
 800d364:	4b4d      	ldr	r3, [pc, #308]	@ (800d49c <HAL_UART_RxCpltCallback+0x14c>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	3b2e      	subs	r3, #46	@ 0x2e
 800d36a:	2b0b      	cmp	r3, #11
 800d36c:	d875      	bhi.n	800d45a <HAL_UART_RxCpltCallback+0x10a>
 800d36e:	a201      	add	r2, pc, #4	@ (adr r2, 800d374 <HAL_UART_RxCpltCallback+0x24>)
 800d370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d374:	0800d42f 	.word	0x0800d42f
 800d378:	0800d45b 	.word	0x0800d45b
 800d37c:	0800d427 	.word	0x0800d427
 800d380:	0800d45b 	.word	0x0800d45b
 800d384:	0800d3cd 	.word	0x0800d3cd
 800d388:	0800d45b 	.word	0x0800d45b
 800d38c:	0800d3df 	.word	0x0800d3df
 800d390:	0800d3a5 	.word	0x0800d3a5
 800d394:	0800d3f1 	.word	0x0800d3f1
 800d398:	0800d403 	.word	0x0800d403
 800d39c:	0800d3bb 	.word	0x0800d3bb
 800d3a0:	0800d415 	.word	0x0800d415
		{
		case '5':
			if(motors_busy) transmit_pos = true;
 800d3a4:	4b3e      	ldr	r3, [pc, #248]	@ (800d4a0 <HAL_UART_RxCpltCallback+0x150>)
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d002      	beq.n	800d3b4 <HAL_UART_RxCpltCallback+0x64>
 800d3ae:	4b3d      	ldr	r3, [pc, #244]	@ (800d4a4 <HAL_UART_RxCpltCallback+0x154>)
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	701a      	strb	r2, [r3, #0]
			stop();
 800d3b4:	f7ff ffac 	bl	800d310 <_Z4stopv>
			break;
 800d3b8:	e050      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>

		case '8':
			moveSpeed(0.1, 0, 0);
 800d3ba:	ed9f 2b2d 	vldr	d2, [pc, #180]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d3be:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d3c2:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 800d478 <HAL_UART_RxCpltCallback+0x128>
 800d3c6:	f7ff fecb 	bl	800d160 <_Z9moveSpeedddd>
			break;
 800d3ca:	e047      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>

		case '2':
			moveSpeed(-0.1, 0, 0);
 800d3cc:	ed9f 2b28 	vldr	d2, [pc, #160]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d3d0:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d3d4:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 800d480 <HAL_UART_RxCpltCallback+0x130>
 800d3d8:	f7ff fec2 	bl	800d160 <_Z9moveSpeedddd>
			break;
 800d3dc:	e03e      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>

		case '4':
			moveSpeed(0, -0.1, 0);
 800d3de:	ed9f 2b24 	vldr	d2, [pc, #144]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d3e2:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 800d480 <HAL_UART_RxCpltCallback+0x130>
 800d3e6:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d3ea:	f7ff feb9 	bl	800d160 <_Z9moveSpeedddd>
			break;
 800d3ee:	e035      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>

		case '6':
			moveSpeed(0, 0.1, 0);
 800d3f0:	ed9f 2b1f 	vldr	d2, [pc, #124]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d3f4:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 800d478 <HAL_UART_RxCpltCallback+0x128>
 800d3f8:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d3fc:	f7ff feb0 	bl	800d160 <_Z9moveSpeedddd>
			break;
 800d400:	e02c      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>

		case '7':
			moveSpeed(0, 0, -1);
 800d402:	ed9f 2b21 	vldr	d2, [pc, #132]	@ 800d488 <HAL_UART_RxCpltCallback+0x138>
 800d406:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d40a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d40e:	f7ff fea7 	bl	800d160 <_Z9moveSpeedddd>
			break;
 800d412:	e023      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>

		case '9':
			moveSpeed(0, 0, 1);
 800d414:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 800d490 <HAL_UART_RxCpltCallback+0x140>
 800d418:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d41c:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 800d470 <HAL_UART_RxCpltCallback+0x120>
 800d420:	f7ff fe9e 	bl	800d160 <_Z9moveSpeedddd>
			break;
 800d424:	e01a      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>

		case '0':
			transmit_pos = true; //trigger le calcul de la position et son envoi par uart
 800d426:	4b1f      	ldr	r3, [pc, #124]	@ (800d4a4 <HAL_UART_RxCpltCallback+0x154>)
 800d428:	2201      	movs	r2, #1
 800d42a:	701a      	strb	r2, [r3, #0]
			break;
 800d42c:	e016      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>

		case '.':
			position[0] = 0;
 800d42e:	491e      	ldr	r1, [pc, #120]	@ (800d4a8 <HAL_UART_RxCpltCallback+0x158>)
 800d430:	f04f 0200 	mov.w	r2, #0
 800d434:	f04f 0300 	mov.w	r3, #0
 800d438:	e9c1 2300 	strd	r2, r3, [r1]
			position[1] = 0;
 800d43c:	491a      	ldr	r1, [pc, #104]	@ (800d4a8 <HAL_UART_RxCpltCallback+0x158>)
 800d43e:	f04f 0200 	mov.w	r2, #0
 800d442:	f04f 0300 	mov.w	r3, #0
 800d446:	e9c1 2302 	strd	r2, r3, [r1, #8]
			position[2] = 0;
 800d44a:	4917      	ldr	r1, [pc, #92]	@ (800d4a8 <HAL_UART_RxCpltCallback+0x158>)
 800d44c:	f04f 0200 	mov.w	r2, #0
 800d450:	f04f 0300 	mov.w	r3, #0
 800d454:	e9c1 2304 	strd	r2, r3, [r1, #16]
			break;
 800d458:	e000      	b.n	800d45c <HAL_UART_RxCpltCallback+0x10c>


		default:
			break;
 800d45a:	bf00      	nop
		}

		// ALWAYS READ UART
		HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800d45c:	2201      	movs	r2, #1
 800d45e:	490f      	ldr	r1, [pc, #60]	@ (800d49c <HAL_UART_RxCpltCallback+0x14c>)
 800d460:	4812      	ldr	r0, [pc, #72]	@ (800d4ac <HAL_UART_RxCpltCallback+0x15c>)
 800d462:	f003 fdce 	bl	8011002 <HAL_UART_Receive_IT>
	}
}
 800d466:	bf00      	nop
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
	...
 800d478:	9999999a 	.word	0x9999999a
 800d47c:	3fb99999 	.word	0x3fb99999
 800d480:	9999999a 	.word	0x9999999a
 800d484:	bfb99999 	.word	0xbfb99999
 800d488:	00000000 	.word	0x00000000
 800d48c:	bff00000 	.word	0xbff00000
 800d490:	00000000 	.word	0x00000000
 800d494:	3ff00000 	.word	0x3ff00000
 800d498:	40004400 	.word	0x40004400
 800d49c:	200005ba 	.word	0x200005ba
 800d4a0:	200005b9 	.word	0x200005b9
 800d4a4:	200005b8 	.word	0x200005b8
 800d4a8:	200005a0 	.word	0x200005a0
 800d4ac:	200004f4 	.word	0x200004f4

0800d4b0 <HAL_TIM_PeriodElapsedCallback>:

//timers callbacks
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) {
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a06      	ldr	r2, [pc, #24]	@ (800d4d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d102      	bne.n	800d4c6 <HAL_TIM_PeriodElapsedCallback+0x16>
		transmit_pos = true;
 800d4c0:	4b05      	ldr	r3, [pc, #20]	@ (800d4d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	701a      	strb	r2, [r3, #0]
	}
}
 800d4c6:	bf00      	nop
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	200003d4 	.word	0x200003d4
 800d4d8:	200005b8 	.word	0x200005b8

0800d4dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800d4dc:	b480      	push	{r7}
 800d4de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d4e0:	b672      	cpsid	i
}
 800d4e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800d4e4:	bf00      	nop
 800d4e6:	e7fd      	b.n	800d4e4 <Error_Handler+0x8>

0800d4e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	607b      	str	r3, [r7, #4]
 800d4f2:	4b10      	ldr	r3, [pc, #64]	@ (800d534 <HAL_MspInit+0x4c>)
 800d4f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4f6:	4a0f      	ldr	r2, [pc, #60]	@ (800d534 <HAL_MspInit+0x4c>)
 800d4f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d4fc:	6453      	str	r3, [r2, #68]	@ 0x44
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d534 <HAL_MspInit+0x4c>)
 800d500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d506:	607b      	str	r3, [r7, #4]
 800d508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d50a:	2300      	movs	r3, #0
 800d50c:	603b      	str	r3, [r7, #0]
 800d50e:	4b09      	ldr	r3, [pc, #36]	@ (800d534 <HAL_MspInit+0x4c>)
 800d510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d512:	4a08      	ldr	r2, [pc, #32]	@ (800d534 <HAL_MspInit+0x4c>)
 800d514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d518:	6413      	str	r3, [r2, #64]	@ 0x40
 800d51a:	4b06      	ldr	r3, [pc, #24]	@ (800d534 <HAL_MspInit+0x4c>)
 800d51c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d51e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d522:	603b      	str	r3, [r7, #0]
 800d524:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800d526:	2007      	movs	r0, #7
 800d528:	f000 fd6a 	bl	800e000 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d52c:	bf00      	nop
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	40023800 	.word	0x40023800

0800d538 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b08c      	sub	sp, #48	@ 0x30
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d540:	f107 031c 	add.w	r3, r7, #28
 800d544:	2200      	movs	r2, #0
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	605a      	str	r2, [r3, #4]
 800d54a:	609a      	str	r2, [r3, #8]
 800d54c:	60da      	str	r2, [r3, #12]
 800d54e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a45      	ldr	r2, [pc, #276]	@ (800d66c <HAL_SPI_MspInit+0x134>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d14a      	bne.n	800d5f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d55a:	2300      	movs	r3, #0
 800d55c:	61bb      	str	r3, [r7, #24]
 800d55e:	4b44      	ldr	r3, [pc, #272]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d562:	4a43      	ldr	r2, [pc, #268]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d564:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d568:	6453      	str	r3, [r2, #68]	@ 0x44
 800d56a:	4b41      	ldr	r3, [pc, #260]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d56e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d572:	61bb      	str	r3, [r7, #24]
 800d574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d576:	2300      	movs	r3, #0
 800d578:	617b      	str	r3, [r7, #20]
 800d57a:	4b3d      	ldr	r3, [pc, #244]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d57c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d57e:	4a3c      	ldr	r2, [pc, #240]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d580:	f043 0301 	orr.w	r3, r3, #1
 800d584:	6313      	str	r3, [r2, #48]	@ 0x30
 800d586:	4b3a      	ldr	r3, [pc, #232]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	617b      	str	r3, [r7, #20]
 800d590:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d592:	2300      	movs	r3, #0
 800d594:	613b      	str	r3, [r7, #16]
 800d596:	4b36      	ldr	r3, [pc, #216]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d59a:	4a35      	ldr	r2, [pc, #212]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d59c:	f043 0302 	orr.w	r3, r3, #2
 800d5a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d5a2:	4b33      	ldr	r3, [pc, #204]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5a6:	f003 0302 	and.w	r3, r3, #2
 800d5aa:	613b      	str	r3, [r7, #16]
 800d5ac:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d5ae:	23c0      	movs	r3, #192	@ 0xc0
 800d5b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5b2:	2302      	movs	r3, #2
 800d5b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d5be:	2305      	movs	r3, #5
 800d5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5c2:	f107 031c 	add.w	r3, r7, #28
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	482a      	ldr	r0, [pc, #168]	@ (800d674 <HAL_SPI_MspInit+0x13c>)
 800d5ca:	f000 fded 	bl	800e1a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d5ce:	2308      	movs	r3, #8
 800d5d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5da:	2303      	movs	r3, #3
 800d5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d5de:	2305      	movs	r3, #5
 800d5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5e2:	f107 031c 	add.w	r3, r7, #28
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4823      	ldr	r0, [pc, #140]	@ (800d678 <HAL_SPI_MspInit+0x140>)
 800d5ea:	f000 fddd 	bl	800e1a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d5ee:	e038      	b.n	800d662 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a21      	ldr	r2, [pc, #132]	@ (800d67c <HAL_SPI_MspInit+0x144>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d133      	bne.n	800d662 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	60fb      	str	r3, [r7, #12]
 800d5fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d602:	4a1b      	ldr	r2, [pc, #108]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d608:	6413      	str	r3, [r2, #64]	@ 0x40
 800d60a:	4b19      	ldr	r3, [pc, #100]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d60e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d616:	2300      	movs	r3, #0
 800d618:	60bb      	str	r3, [r7, #8]
 800d61a:	4b15      	ldr	r3, [pc, #84]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d61e:	4a14      	ldr	r2, [pc, #80]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d620:	f043 0304 	orr.w	r3, r3, #4
 800d624:	6313      	str	r3, [r2, #48]	@ 0x30
 800d626:	4b12      	ldr	r3, [pc, #72]	@ (800d670 <HAL_SPI_MspInit+0x138>)
 800d628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d62a:	f003 0304 	and.w	r3, r3, #4
 800d62e:	60bb      	str	r3, [r7, #8]
 800d630:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800d632:	238c      	movs	r3, #140	@ 0x8c
 800d634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d636:	2302      	movs	r3, #2
 800d638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d63a:	2300      	movs	r3, #0
 800d63c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d63e:	2303      	movs	r3, #3
 800d640:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d642:	2305      	movs	r3, #5
 800d644:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d646:	f107 031c 	add.w	r3, r7, #28
 800d64a:	4619      	mov	r1, r3
 800d64c:	480c      	ldr	r0, [pc, #48]	@ (800d680 <HAL_SPI_MspInit+0x148>)
 800d64e:	f000 fdab 	bl	800e1a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800d652:	2200      	movs	r2, #0
 800d654:	2100      	movs	r1, #0
 800d656:	2024      	movs	r0, #36	@ 0x24
 800d658:	f000 fcdd 	bl	800e016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800d65c:	2024      	movs	r0, #36	@ 0x24
 800d65e:	f000 fcf6 	bl	800e04e <HAL_NVIC_EnableIRQ>
}
 800d662:	bf00      	nop
 800d664:	3730      	adds	r7, #48	@ 0x30
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	40013000 	.word	0x40013000
 800d670:	40023800 	.word	0x40023800
 800d674:	40020000 	.word	0x40020000
 800d678:	40020400 	.word	0x40020400
 800d67c:	40003800 	.word	0x40003800
 800d680:	40020800 	.word	0x40020800

0800d684 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800d684:	b480      	push	{r7}
 800d686:	b087      	sub	sp, #28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a1f      	ldr	r2, [pc, #124]	@ (800d710 <HAL_TIM_PWM_MspInit+0x8c>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d10e      	bne.n	800d6b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d696:	2300      	movs	r3, #0
 800d698:	617b      	str	r3, [r7, #20]
 800d69a:	4b1e      	ldr	r3, [pc, #120]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d69c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d69e:	4a1d      	ldr	r2, [pc, #116]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d6a0:	f043 0301 	orr.w	r3, r3, #1
 800d6a4:	6453      	str	r3, [r2, #68]	@ 0x44
 800d6a6:	4b1b      	ldr	r3, [pc, #108]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6aa:	f003 0301 	and.w	r3, r3, #1
 800d6ae:	617b      	str	r3, [r7, #20]
 800d6b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d6b2:	e026      	b.n	800d702 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a17      	ldr	r2, [pc, #92]	@ (800d718 <HAL_TIM_PWM_MspInit+0x94>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d10e      	bne.n	800d6dc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d6be:	2300      	movs	r3, #0
 800d6c0:	613b      	str	r3, [r7, #16]
 800d6c2:	4b14      	ldr	r3, [pc, #80]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6c6:	4a13      	ldr	r2, [pc, #76]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d6c8:	f043 0304 	orr.w	r3, r3, #4
 800d6cc:	6413      	str	r3, [r2, #64]	@ 0x40
 800d6ce:	4b11      	ldr	r3, [pc, #68]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d2:	f003 0304 	and.w	r3, r3, #4
 800d6d6:	613b      	str	r3, [r7, #16]
 800d6d8:	693b      	ldr	r3, [r7, #16]
}
 800d6da:	e012      	b.n	800d702 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a0e      	ldr	r2, [pc, #56]	@ (800d71c <HAL_TIM_PWM_MspInit+0x98>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d10d      	bne.n	800d702 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d6ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6ee:	4a09      	ldr	r2, [pc, #36]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d6f0:	f043 0302 	orr.w	r3, r3, #2
 800d6f4:	6453      	str	r3, [r2, #68]	@ 0x44
 800d6f6:	4b07      	ldr	r3, [pc, #28]	@ (800d714 <HAL_TIM_PWM_MspInit+0x90>)
 800d6f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6fa:	f003 0302 	and.w	r3, r3, #2
 800d6fe:	60fb      	str	r3, [r7, #12]
 800d700:	68fb      	ldr	r3, [r7, #12]
}
 800d702:	bf00      	nop
 800d704:	371c      	adds	r7, #28
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	40010000 	.word	0x40010000
 800d714:	40023800 	.word	0x40023800
 800d718:	40000800 	.word	0x40000800
 800d71c:	40010400 	.word	0x40010400

0800d720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d730:	d116      	bne.n	800d760 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d732:	2300      	movs	r3, #0
 800d734:	60fb      	str	r3, [r7, #12]
 800d736:	4b1a      	ldr	r3, [pc, #104]	@ (800d7a0 <HAL_TIM_Base_MspInit+0x80>)
 800d738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d73a:	4a19      	ldr	r2, [pc, #100]	@ (800d7a0 <HAL_TIM_Base_MspInit+0x80>)
 800d73c:	f043 0301 	orr.w	r3, r3, #1
 800d740:	6413      	str	r3, [r2, #64]	@ 0x40
 800d742:	4b17      	ldr	r3, [pc, #92]	@ (800d7a0 <HAL_TIM_Base_MspInit+0x80>)
 800d744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d746:	f003 0301 	and.w	r3, r3, #1
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800d74e:	2202      	movs	r2, #2
 800d750:	2100      	movs	r1, #0
 800d752:	201c      	movs	r0, #28
 800d754:	f000 fc5f 	bl	800e016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d758:	201c      	movs	r0, #28
 800d75a:	f000 fc78 	bl	800e04e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800d75e:	e01a      	b.n	800d796 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a0f      	ldr	r2, [pc, #60]	@ (800d7a4 <HAL_TIM_Base_MspInit+0x84>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d115      	bne.n	800d796 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d76a:	2300      	movs	r3, #0
 800d76c:	60bb      	str	r3, [r7, #8]
 800d76e:	4b0c      	ldr	r3, [pc, #48]	@ (800d7a0 <HAL_TIM_Base_MspInit+0x80>)
 800d770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d772:	4a0b      	ldr	r2, [pc, #44]	@ (800d7a0 <HAL_TIM_Base_MspInit+0x80>)
 800d774:	f043 0310 	orr.w	r3, r3, #16
 800d778:	6413      	str	r3, [r2, #64]	@ 0x40
 800d77a:	4b09      	ldr	r3, [pc, #36]	@ (800d7a0 <HAL_TIM_Base_MspInit+0x80>)
 800d77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d77e:	f003 0310 	and.w	r3, r3, #16
 800d782:	60bb      	str	r3, [r7, #8]
 800d784:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800d786:	2200      	movs	r2, #0
 800d788:	2100      	movs	r1, #0
 800d78a:	2036      	movs	r0, #54	@ 0x36
 800d78c:	f000 fc43 	bl	800e016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d790:	2036      	movs	r0, #54	@ 0x36
 800d792:	f000 fc5c 	bl	800e04e <HAL_NVIC_EnableIRQ>
}
 800d796:	bf00      	nop
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	40023800 	.word	0x40023800
 800d7a4:	40001000 	.word	0x40001000

0800d7a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b08c      	sub	sp, #48	@ 0x30
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7b0:	f107 031c 	add.w	r3, r7, #28
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	605a      	str	r2, [r3, #4]
 800d7ba:	609a      	str	r2, [r3, #8]
 800d7bc:	60da      	str	r2, [r3, #12]
 800d7be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a49      	ldr	r2, [pc, #292]	@ (800d8ec <HAL_TIM_MspPostInit+0x144>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d11f      	bne.n	800d80a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	61bb      	str	r3, [r7, #24]
 800d7ce:	4b48      	ldr	r3, [pc, #288]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d7d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7d2:	4a47      	ldr	r2, [pc, #284]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d7d4:	f043 0302 	orr.w	r3, r3, #2
 800d7d8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d7da:	4b45      	ldr	r3, [pc, #276]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d7dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7de:	f003 0302 	and.w	r3, r3, #2
 800d7e2:	61bb      	str	r3, [r7, #24]
 800d7e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800d7e6:	f248 0301 	movw	r3, #32769	@ 0x8001
 800d7ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d7fc:	f107 031c 	add.w	r3, r7, #28
 800d800:	4619      	mov	r1, r3
 800d802:	483c      	ldr	r0, [pc, #240]	@ (800d8f4 <HAL_TIM_MspPostInit+0x14c>)
 800d804:	f000 fcd0 	bl	800e1a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800d808:	e06c      	b.n	800d8e4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d812:	d11f      	bne.n	800d854 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d814:	2300      	movs	r3, #0
 800d816:	617b      	str	r3, [r7, #20]
 800d818:	4b35      	ldr	r3, [pc, #212]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d81a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d81c:	4a34      	ldr	r2, [pc, #208]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d81e:	f043 0301 	orr.w	r3, r3, #1
 800d822:	6313      	str	r3, [r2, #48]	@ 0x30
 800d824:	4b32      	ldr	r3, [pc, #200]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d828:	f003 0301 	and.w	r3, r3, #1
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d836:	2302      	movs	r3, #2
 800d838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d83e:	2300      	movs	r3, #0
 800d840:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d842:	2301      	movs	r3, #1
 800d844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d846:	f107 031c 	add.w	r3, r7, #28
 800d84a:	4619      	mov	r1, r3
 800d84c:	482a      	ldr	r0, [pc, #168]	@ (800d8f8 <HAL_TIM_MspPostInit+0x150>)
 800d84e:	f000 fcab 	bl	800e1a8 <HAL_GPIO_Init>
}
 800d852:	e047      	b.n	800d8e4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a28      	ldr	r2, [pc, #160]	@ (800d8fc <HAL_TIM_MspPostInit+0x154>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d11e      	bne.n	800d89c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d85e:	2300      	movs	r3, #0
 800d860:	613b      	str	r3, [r7, #16]
 800d862:	4b23      	ldr	r3, [pc, #140]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d866:	4a22      	ldr	r2, [pc, #136]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d868:	f043 0302 	orr.w	r3, r3, #2
 800d86c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d86e:	4b20      	ldr	r3, [pc, #128]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d872:	f003 0302 	and.w	r3, r3, #2
 800d876:	613b      	str	r3, [r7, #16]
 800d878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d87a:	2380      	movs	r3, #128	@ 0x80
 800d87c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d87e:	2302      	movs	r3, #2
 800d880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d882:	2300      	movs	r3, #0
 800d884:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d886:	2300      	movs	r3, #0
 800d888:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d88a:	2302      	movs	r3, #2
 800d88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d88e:	f107 031c 	add.w	r3, r7, #28
 800d892:	4619      	mov	r1, r3
 800d894:	4817      	ldr	r0, [pc, #92]	@ (800d8f4 <HAL_TIM_MspPostInit+0x14c>)
 800d896:	f000 fc87 	bl	800e1a8 <HAL_GPIO_Init>
}
 800d89a:	e023      	b.n	800d8e4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a17      	ldr	r2, [pc, #92]	@ (800d900 <HAL_TIM_MspPostInit+0x158>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d11e      	bne.n	800d8e4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	60fb      	str	r3, [r7, #12]
 800d8aa:	4b11      	ldr	r3, [pc, #68]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d8ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8ae:	4a10      	ldr	r2, [pc, #64]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d8b0:	f043 0302 	orr.w	r3, r3, #2
 800d8b4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d8b6:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f0 <HAL_TIM_MspPostInit+0x148>)
 800d8b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8ba:	f003 0302 	and.w	r3, r3, #2
 800d8be:	60fb      	str	r3, [r7, #12]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800d8c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d8c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8d8:	f107 031c 	add.w	r3, r7, #28
 800d8dc:	4619      	mov	r1, r3
 800d8de:	4805      	ldr	r0, [pc, #20]	@ (800d8f4 <HAL_TIM_MspPostInit+0x14c>)
 800d8e0:	f000 fc62 	bl	800e1a8 <HAL_GPIO_Init>
}
 800d8e4:	bf00      	nop
 800d8e6:	3730      	adds	r7, #48	@ 0x30
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	40010000 	.word	0x40010000
 800d8f0:	40023800 	.word	0x40023800
 800d8f4:	40020400 	.word	0x40020400
 800d8f8:	40020000 	.word	0x40020000
 800d8fc:	40000800 	.word	0x40000800
 800d900:	40010400 	.word	0x40010400

0800d904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b08c      	sub	sp, #48	@ 0x30
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d90c:	f107 031c 	add.w	r3, r7, #28
 800d910:	2200      	movs	r2, #0
 800d912:	601a      	str	r2, [r3, #0]
 800d914:	605a      	str	r2, [r3, #4]
 800d916:	609a      	str	r2, [r3, #8]
 800d918:	60da      	str	r2, [r3, #12]
 800d91a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a49      	ldr	r2, [pc, #292]	@ (800da48 <HAL_UART_MspInit+0x144>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d134      	bne.n	800d990 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d926:	2300      	movs	r3, #0
 800d928:	61bb      	str	r3, [r7, #24]
 800d92a:	4b48      	ldr	r3, [pc, #288]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d92e:	4a47      	ldr	r2, [pc, #284]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d934:	6413      	str	r3, [r2, #64]	@ 0x40
 800d936:	4b45      	ldr	r3, [pc, #276]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d93a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d93e:	61bb      	str	r3, [r7, #24]
 800d940:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d942:	2300      	movs	r3, #0
 800d944:	617b      	str	r3, [r7, #20]
 800d946:	4b41      	ldr	r3, [pc, #260]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d94a:	4a40      	ldr	r2, [pc, #256]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d94c:	f043 0301 	orr.w	r3, r3, #1
 800d950:	6313      	str	r3, [r2, #48]	@ 0x30
 800d952:	4b3e      	ldr	r3, [pc, #248]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d956:	f003 0301 	and.w	r3, r3, #1
 800d95a:	617b      	str	r3, [r7, #20]
 800d95c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800d95e:	230c      	movs	r3, #12
 800d960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d962:	2302      	movs	r3, #2
 800d964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d966:	2300      	movs	r3, #0
 800d968:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d96a:	2303      	movs	r3, #3
 800d96c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d96e:	2307      	movs	r3, #7
 800d970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d972:	f107 031c 	add.w	r3, r7, #28
 800d976:	4619      	mov	r1, r3
 800d978:	4835      	ldr	r0, [pc, #212]	@ (800da50 <HAL_UART_MspInit+0x14c>)
 800d97a:	f000 fc15 	bl	800e1a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d97e:	2200      	movs	r2, #0
 800d980:	2100      	movs	r1, #0
 800d982:	2026      	movs	r0, #38	@ 0x26
 800d984:	f000 fb47 	bl	800e016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d988:	2026      	movs	r0, #38	@ 0x26
 800d98a:	f000 fb60 	bl	800e04e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d98e:	e057      	b.n	800da40 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a2f      	ldr	r2, [pc, #188]	@ (800da54 <HAL_UART_MspInit+0x150>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d152      	bne.n	800da40 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d99a:	2300      	movs	r3, #0
 800d99c:	613b      	str	r3, [r7, #16]
 800d99e:	4b2b      	ldr	r3, [pc, #172]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9a2:	4a2a      	ldr	r2, [pc, #168]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d9a8:	6413      	str	r3, [r2, #64]	@ 0x40
 800d9aa:	4b28      	ldr	r3, [pc, #160]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9b2:	613b      	str	r3, [r7, #16]
 800d9b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60fb      	str	r3, [r7, #12]
 800d9ba:	4b24      	ldr	r3, [pc, #144]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9be:	4a23      	ldr	r2, [pc, #140]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9c0:	f043 0304 	orr.w	r3, r3, #4
 800d9c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9c6:	4b21      	ldr	r3, [pc, #132]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ca:	f003 0304 	and.w	r3, r3, #4
 800d9ce:	60fb      	str	r3, [r7, #12]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	60bb      	str	r3, [r7, #8]
 800d9d6:	4b1d      	ldr	r3, [pc, #116]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9da:	4a1c      	ldr	r2, [pc, #112]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9dc:	f043 0302 	orr.w	r3, r3, #2
 800d9e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9e2:	4b1a      	ldr	r3, [pc, #104]	@ (800da4c <HAL_UART_MspInit+0x148>)
 800d9e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9e6:	f003 0302 	and.w	r3, r3, #2
 800d9ea:	60bb      	str	r3, [r7, #8]
 800d9ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d9ee:	2320      	movs	r3, #32
 800d9f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9f2:	2302      	movs	r3, #2
 800d9f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d9fe:	2307      	movs	r3, #7
 800da00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800da02:	f107 031c 	add.w	r3, r7, #28
 800da06:	4619      	mov	r1, r3
 800da08:	4813      	ldr	r0, [pc, #76]	@ (800da58 <HAL_UART_MspInit+0x154>)
 800da0a:	f000 fbcd 	bl	800e1a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800da0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da14:	2302      	movs	r3, #2
 800da16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da18:	2300      	movs	r3, #0
 800da1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da1c:	2303      	movs	r3, #3
 800da1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800da20:	2307      	movs	r3, #7
 800da22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800da24:	f107 031c 	add.w	r3, r7, #28
 800da28:	4619      	mov	r1, r3
 800da2a:	480c      	ldr	r0, [pc, #48]	@ (800da5c <HAL_UART_MspInit+0x158>)
 800da2c:	f000 fbbc 	bl	800e1a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800da30:	2200      	movs	r2, #0
 800da32:	2100      	movs	r1, #0
 800da34:	2027      	movs	r0, #39	@ 0x27
 800da36:	f000 faee 	bl	800e016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800da3a:	2027      	movs	r0, #39	@ 0x27
 800da3c:	f000 fb07 	bl	800e04e <HAL_NVIC_EnableIRQ>
}
 800da40:	bf00      	nop
 800da42:	3730      	adds	r7, #48	@ 0x30
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	40004400 	.word	0x40004400
 800da4c:	40023800 	.word	0x40023800
 800da50:	40020000 	.word	0x40020000
 800da54:	40004800 	.word	0x40004800
 800da58:	40020800 	.word	0x40020800
 800da5c:	40020400 	.word	0x40020400

0800da60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800da60:	b480      	push	{r7}
 800da62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800da64:	bf00      	nop
 800da66:	e7fd      	b.n	800da64 <NMI_Handler+0x4>

0800da68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800da68:	b480      	push	{r7}
 800da6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800da6c:	bf00      	nop
 800da6e:	e7fd      	b.n	800da6c <HardFault_Handler+0x4>

0800da70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800da70:	b480      	push	{r7}
 800da72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800da74:	bf00      	nop
 800da76:	e7fd      	b.n	800da74 <MemManage_Handler+0x4>

0800da78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800da78:	b480      	push	{r7}
 800da7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800da7c:	bf00      	nop
 800da7e:	e7fd      	b.n	800da7c <BusFault_Handler+0x4>

0800da80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800da80:	b480      	push	{r7}
 800da82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800da84:	bf00      	nop
 800da86:	e7fd      	b.n	800da84 <UsageFault_Handler+0x4>

0800da88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800da88:	b480      	push	{r7}
 800da8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800da8c:	bf00      	nop
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800da96:	b480      	push	{r7}
 800da98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800da9a:	bf00      	nop
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800daa4:	b480      	push	{r7}
 800daa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800daa8:	bf00      	nop
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dab6:	f000 f98f 	bl	800ddd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800daba:	bf00      	nop
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800dac2:	2001      	movs	r0, #1
 800dac4:	f000 fd1e 	bl	800e504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800dac8:	bf00      	nop
 800daca:	bd80      	pop	{r7, pc}

0800dacc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800dad0:	4802      	ldr	r0, [pc, #8]	@ (800dadc <TIM2_IRQHandler+0x10>)
 800dad2:	f002 fb30 	bl	8010136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800dad6:	bf00      	nop
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	200003d4 	.word	0x200003d4

0800dae0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800dae4:	4802      	ldr	r0, [pc, #8]	@ (800daf0 <SPI2_IRQHandler+0x10>)
 800dae6:	f001 ffd5 	bl	800fa94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800daea:	bf00      	nop
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	20000334 	.word	0x20000334

0800daf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800daf8:	4802      	ldr	r0, [pc, #8]	@ (800db04 <USART2_IRQHandler+0x10>)
 800dafa:	f003 fab3 	bl	8011064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800dafe:	bf00      	nop
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	200004f4 	.word	0x200004f4

0800db08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800db0c:	4802      	ldr	r0, [pc, #8]	@ (800db18 <USART3_IRQHandler+0x10>)
 800db0e:	f003 faa9 	bl	8011064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800db12:	bf00      	nop
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20000538 	.word	0x20000538

0800db1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800db20:	4802      	ldr	r0, [pc, #8]	@ (800db2c <TIM6_DAC_IRQHandler+0x10>)
 800db22:	f002 fb08 	bl	8010136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800db26:	bf00      	nop
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	20000464 	.word	0x20000464

0800db30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800db30:	b480      	push	{r7}
 800db32:	af00      	add	r7, sp, #0
  return 1;
 800db34:	2301      	movs	r3, #1
}
 800db36:	4618      	mov	r0, r3
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <_kill>:

int _kill(int pid, int sig)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800db4a:	f007 fd85 	bl	8015658 <__errno>
 800db4e:	4603      	mov	r3, r0
 800db50:	2216      	movs	r2, #22
 800db52:	601a      	str	r2, [r3, #0]
  return -1;
 800db54:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <_exit>:

void _exit (int status)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800db68:	f04f 31ff 	mov.w	r1, #4294967295
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7ff ffe7 	bl	800db40 <_kill>
  while (1) {}    /* Make sure we hang here */
 800db72:	bf00      	nop
 800db74:	e7fd      	b.n	800db72 <_exit+0x12>

0800db76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	60b9      	str	r1, [r7, #8]
 800db80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db82:	2300      	movs	r3, #0
 800db84:	617b      	str	r3, [r7, #20]
 800db86:	e00a      	b.n	800db9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800db88:	f3af 8000 	nop.w
 800db8c:	4601      	mov	r1, r0
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	60ba      	str	r2, [r7, #8]
 800db94:	b2ca      	uxtb	r2, r1
 800db96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	3301      	adds	r3, #1
 800db9c:	617b      	str	r3, [r7, #20]
 800db9e:	697a      	ldr	r2, [r7, #20]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	dbf0      	blt.n	800db88 <_read+0x12>
  }

  return len;
 800dba6:	687b      	ldr	r3, [r7, #4]
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3718      	adds	r7, #24
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	617b      	str	r3, [r7, #20]
 800dbc0:	e009      	b.n	800dbd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	1c5a      	adds	r2, r3, #1
 800dbc6:	60ba      	str	r2, [r7, #8]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	dbf1      	blt.n	800dbc2 <_write+0x12>
  }
  return len;
 800dbde:	687b      	ldr	r3, [r7, #4]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <_close>:

int _close(int file)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800dbf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800dc10:	605a      	str	r2, [r3, #4]
  return 0;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <_isatty>:

int _isatty(int file)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800dc28:	2301      	movs	r3, #1
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	370c      	adds	r7, #12
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dc36:	b480      	push	{r7}
 800dc38:	b085      	sub	sp, #20
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	60f8      	str	r0, [r7, #12]
 800dc3e:	60b9      	str	r1, [r7, #8]
 800dc40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b086      	sub	sp, #24
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dc58:	4a14      	ldr	r2, [pc, #80]	@ (800dcac <_sbrk+0x5c>)
 800dc5a:	4b15      	ldr	r3, [pc, #84]	@ (800dcb0 <_sbrk+0x60>)
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dc64:	4b13      	ldr	r3, [pc, #76]	@ (800dcb4 <_sbrk+0x64>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dc6c:	4b11      	ldr	r3, [pc, #68]	@ (800dcb4 <_sbrk+0x64>)
 800dc6e:	4a12      	ldr	r2, [pc, #72]	@ (800dcb8 <_sbrk+0x68>)
 800dc70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dc72:	4b10      	ldr	r3, [pc, #64]	@ (800dcb4 <_sbrk+0x64>)
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4413      	add	r3, r2
 800dc7a:	693a      	ldr	r2, [r7, #16]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d207      	bcs.n	800dc90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dc80:	f007 fcea 	bl	8015658 <__errno>
 800dc84:	4603      	mov	r3, r0
 800dc86:	220c      	movs	r2, #12
 800dc88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dc8a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8e:	e009      	b.n	800dca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dc90:	4b08      	ldr	r3, [pc, #32]	@ (800dcb4 <_sbrk+0x64>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dc96:	4b07      	ldr	r3, [pc, #28]	@ (800dcb4 <_sbrk+0x64>)
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	4a05      	ldr	r2, [pc, #20]	@ (800dcb4 <_sbrk+0x64>)
 800dca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800dca2:	68fb      	ldr	r3, [r7, #12]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20020000 	.word	0x20020000
 800dcb0:	00000400 	.word	0x00000400
 800dcb4:	200005bc 	.word	0x200005bc
 800dcb8:	20000720 	.word	0x20000720

0800dcbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dcc0:	4b06      	ldr	r3, [pc, #24]	@ (800dcdc <SystemInit+0x20>)
 800dcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcc6:	4a05      	ldr	r2, [pc, #20]	@ (800dcdc <SystemInit+0x20>)
 800dcc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dcd0:	bf00      	nop
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	e000ed00 	.word	0xe000ed00

0800dce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	;  ldr   sp, =_estack      /* set stack pointer */
 800dce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800dd18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800dce4:	480d      	ldr	r0, [pc, #52]	@ (800dd1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800dce6:	490e      	ldr	r1, [pc, #56]	@ (800dd20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800dce8:	4a0e      	ldr	r2, [pc, #56]	@ (800dd24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800dcea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dcec:	e002      	b.n	800dcf4 <LoopCopyDataInit>

0800dcee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dcee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dcf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dcf2:	3304      	adds	r3, #4

0800dcf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dcf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dcf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dcf8:	d3f9      	bcc.n	800dcee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dcfa:	4a0b      	ldr	r2, [pc, #44]	@ (800dd28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800dcfc:	4c0b      	ldr	r4, [pc, #44]	@ (800dd2c <LoopFillZerobss+0x26>)
  movs r3, #0
 800dcfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dd00:	e001      	b.n	800dd06 <LoopFillZerobss>

0800dd02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dd02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dd04:	3204      	adds	r2, #4

0800dd06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dd06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dd08:	d3fb      	bcc.n	800dd02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800dd0a:	f7ff ffd7 	bl	800dcbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dd0e:	f007 fca9 	bl	8015664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dd12:	f7fe fbd1 	bl	800c4b8 <main>
  bx  lr    
 800dd16:	4770      	bx	lr
	;  ldr   sp, =_estack      /* set stack pointer */
 800dd18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800dd1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dd20:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800dd24:	0801b010 	.word	0x0801b010
  ldr r2, =_sbss
 800dd28:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800dd2c:	20000720 	.word	0x20000720

0800dd30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dd30:	e7fe      	b.n	800dd30 <ADC_IRQHandler>
	...

0800dd34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dd38:	4b0e      	ldr	r3, [pc, #56]	@ (800dd74 <HAL_Init+0x40>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a0d      	ldr	r2, [pc, #52]	@ (800dd74 <HAL_Init+0x40>)
 800dd3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dd42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800dd44:	4b0b      	ldr	r3, [pc, #44]	@ (800dd74 <HAL_Init+0x40>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a0a      	ldr	r2, [pc, #40]	@ (800dd74 <HAL_Init+0x40>)
 800dd4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dd4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dd50:	4b08      	ldr	r3, [pc, #32]	@ (800dd74 <HAL_Init+0x40>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a07      	ldr	r2, [pc, #28]	@ (800dd74 <HAL_Init+0x40>)
 800dd56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dd5c:	2003      	movs	r0, #3
 800dd5e:	f000 f94f 	bl	800e000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800dd62:	2000      	movs	r0, #0
 800dd64:	f000 f808 	bl	800dd78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800dd68:	f7ff fbbe 	bl	800d4e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	40023c00 	.word	0x40023c00

0800dd78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800dd80:	4b12      	ldr	r3, [pc, #72]	@ (800ddcc <HAL_InitTick+0x54>)
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	4b12      	ldr	r3, [pc, #72]	@ (800ddd0 <HAL_InitTick+0x58>)
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dd8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd92:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 f967 	bl	800e06a <HAL_SYSTICK_Config>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e00e      	b.n	800ddc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b0f      	cmp	r3, #15
 800ddaa:	d80a      	bhi.n	800ddc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ddac:	2200      	movs	r2, #0
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	f000 f92f 	bl	800e016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ddb8:	4a06      	ldr	r2, [pc, #24]	@ (800ddd4 <HAL_InitTick+0x5c>)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e000      	b.n	800ddc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	20000010 	.word	0x20000010
 800ddd0:	20000018 	.word	0x20000018
 800ddd4:	20000014 	.word	0x20000014

0800ddd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dddc:	4b06      	ldr	r3, [pc, #24]	@ (800ddf8 <HAL_IncTick+0x20>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	461a      	mov	r2, r3
 800dde2:	4b06      	ldr	r3, [pc, #24]	@ (800ddfc <HAL_IncTick+0x24>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4413      	add	r3, r2
 800dde8:	4a04      	ldr	r2, [pc, #16]	@ (800ddfc <HAL_IncTick+0x24>)
 800ddea:	6013      	str	r3, [r2, #0]
}
 800ddec:	bf00      	nop
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20000018 	.word	0x20000018
 800ddfc:	200005c0 	.word	0x200005c0

0800de00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800de00:	b480      	push	{r7}
 800de02:	af00      	add	r7, sp, #0
  return uwTick;
 800de04:	4b03      	ldr	r3, [pc, #12]	@ (800de14 <HAL_GetTick+0x14>)
 800de06:	681b      	ldr	r3, [r3, #0]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	200005c0 	.word	0x200005c0

0800de18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800de20:	f7ff ffee 	bl	800de00 <HAL_GetTick>
 800de24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de30:	d005      	beq.n	800de3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800de32:	4b0a      	ldr	r3, [pc, #40]	@ (800de5c <HAL_Delay+0x44>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	461a      	mov	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	4413      	add	r3, r2
 800de3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800de3e:	bf00      	nop
 800de40:	f7ff ffde 	bl	800de00 <HAL_GetTick>
 800de44:	4602      	mov	r2, r0
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d8f7      	bhi.n	800de40 <HAL_Delay+0x28>
  {
  }
}
 800de50:	bf00      	nop
 800de52:	bf00      	nop
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	20000018 	.word	0x20000018

0800de60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f003 0307 	and.w	r3, r3, #7
 800de6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800de70:	4b0c      	ldr	r3, [pc, #48]	@ (800dea4 <__NVIC_SetPriorityGrouping+0x44>)
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800de76:	68ba      	ldr	r2, [r7, #8]
 800de78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800de7c:	4013      	ands	r3, r2
 800de7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800de88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800de8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800de92:	4a04      	ldr	r2, [pc, #16]	@ (800dea4 <__NVIC_SetPriorityGrouping+0x44>)
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	60d3      	str	r3, [r2, #12]
}
 800de98:	bf00      	nop
 800de9a:	3714      	adds	r7, #20
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	e000ed00 	.word	0xe000ed00

0800dea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dea8:	b480      	push	{r7}
 800deaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800deac:	4b04      	ldr	r3, [pc, #16]	@ (800dec0 <__NVIC_GetPriorityGrouping+0x18>)
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	0a1b      	lsrs	r3, r3, #8
 800deb2:	f003 0307 	and.w	r3, r3, #7
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	e000ed00 	.word	0xe000ed00

0800dec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	4603      	mov	r3, r0
 800decc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	db0b      	blt.n	800deee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	f003 021f 	and.w	r2, r3, #31
 800dedc:	4907      	ldr	r1, [pc, #28]	@ (800defc <__NVIC_EnableIRQ+0x38>)
 800dede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dee2:	095b      	lsrs	r3, r3, #5
 800dee4:	2001      	movs	r0, #1
 800dee6:	fa00 f202 	lsl.w	r2, r0, r2
 800deea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800deee:	bf00      	nop
 800def0:	370c      	adds	r7, #12
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	e000e100 	.word	0xe000e100

0800df00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	6039      	str	r1, [r7, #0]
 800df0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800df0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df10:	2b00      	cmp	r3, #0
 800df12:	db0a      	blt.n	800df2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	b2da      	uxtb	r2, r3
 800df18:	490c      	ldr	r1, [pc, #48]	@ (800df4c <__NVIC_SetPriority+0x4c>)
 800df1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df1e:	0112      	lsls	r2, r2, #4
 800df20:	b2d2      	uxtb	r2, r2
 800df22:	440b      	add	r3, r1
 800df24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800df28:	e00a      	b.n	800df40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	4908      	ldr	r1, [pc, #32]	@ (800df50 <__NVIC_SetPriority+0x50>)
 800df30:	79fb      	ldrb	r3, [r7, #7]
 800df32:	f003 030f 	and.w	r3, r3, #15
 800df36:	3b04      	subs	r3, #4
 800df38:	0112      	lsls	r2, r2, #4
 800df3a:	b2d2      	uxtb	r2, r2
 800df3c:	440b      	add	r3, r1
 800df3e:	761a      	strb	r2, [r3, #24]
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	e000e100 	.word	0xe000e100
 800df50:	e000ed00 	.word	0xe000ed00

0800df54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800df54:	b480      	push	{r7}
 800df56:	b089      	sub	sp, #36	@ 0x24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f003 0307 	and.w	r3, r3, #7
 800df66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	f1c3 0307 	rsb	r3, r3, #7
 800df6e:	2b04      	cmp	r3, #4
 800df70:	bf28      	it	cs
 800df72:	2304      	movcs	r3, #4
 800df74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	3304      	adds	r3, #4
 800df7a:	2b06      	cmp	r3, #6
 800df7c:	d902      	bls.n	800df84 <NVIC_EncodePriority+0x30>
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	3b03      	subs	r3, #3
 800df82:	e000      	b.n	800df86 <NVIC_EncodePriority+0x32>
 800df84:	2300      	movs	r3, #0
 800df86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800df88:	f04f 32ff 	mov.w	r2, #4294967295
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	fa02 f303 	lsl.w	r3, r2, r3
 800df92:	43da      	mvns	r2, r3
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	401a      	ands	r2, r3
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800df9c:	f04f 31ff 	mov.w	r1, #4294967295
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	fa01 f303 	lsl.w	r3, r1, r3
 800dfa6:	43d9      	mvns	r1, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dfac:	4313      	orrs	r3, r2
         );
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3724      	adds	r7, #36	@ 0x24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
	...

0800dfbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfcc:	d301      	bcc.n	800dfd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e00f      	b.n	800dff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dfd2:	4a0a      	ldr	r2, [pc, #40]	@ (800dffc <SysTick_Config+0x40>)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dfda:	210f      	movs	r1, #15
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	f7ff ff8e 	bl	800df00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dfe4:	4b05      	ldr	r3, [pc, #20]	@ (800dffc <SysTick_Config+0x40>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dfea:	4b04      	ldr	r3, [pc, #16]	@ (800dffc <SysTick_Config+0x40>)
 800dfec:	2207      	movs	r2, #7
 800dfee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	e000e010 	.word	0xe000e010

0800e000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff ff29 	bl	800de60 <__NVIC_SetPriorityGrouping>
}
 800e00e:	bf00      	nop
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e016:	b580      	push	{r7, lr}
 800e018:	b086      	sub	sp, #24
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	4603      	mov	r3, r0
 800e01e:	60b9      	str	r1, [r7, #8]
 800e020:	607a      	str	r2, [r7, #4]
 800e022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e024:	2300      	movs	r3, #0
 800e026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e028:	f7ff ff3e 	bl	800dea8 <__NVIC_GetPriorityGrouping>
 800e02c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	68b9      	ldr	r1, [r7, #8]
 800e032:	6978      	ldr	r0, [r7, #20]
 800e034:	f7ff ff8e 	bl	800df54 <NVIC_EncodePriority>
 800e038:	4602      	mov	r2, r0
 800e03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e03e:	4611      	mov	r1, r2
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff ff5d 	bl	800df00 <__NVIC_SetPriority>
}
 800e046:	bf00      	nop
 800e048:	3718      	adds	r7, #24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	4603      	mov	r3, r0
 800e056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff ff31 	bl	800dec4 <__NVIC_EnableIRQ>
}
 800e062:	bf00      	nop
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b082      	sub	sp, #8
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff ffa2 	bl	800dfbc <SysTick_Config>
 800e078:	4603      	mov	r3, r0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e08e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e090:	f7ff feb6 	bl	800de00 <HAL_GetTick>
 800e094:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	d008      	beq.n	800e0b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2280      	movs	r2, #128	@ 0x80
 800e0a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e052      	b.n	800e15a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f022 0216 	bic.w	r2, r2, #22
 800e0c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	695a      	ldr	r2, [r3, #20]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e0d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d103      	bne.n	800e0e4 <HAL_DMA_Abort+0x62>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d007      	beq.n	800e0f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f022 0208 	bic.w	r2, r2, #8
 800e0f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f022 0201 	bic.w	r2, r2, #1
 800e102:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e104:	e013      	b.n	800e12e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e106:	f7ff fe7b 	bl	800de00 <HAL_GetTick>
 800e10a:	4602      	mov	r2, r0
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	2b05      	cmp	r3, #5
 800e112:	d90c      	bls.n	800e12e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2220      	movs	r2, #32
 800e118:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2203      	movs	r2, #3
 800e11e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800e12a:	2303      	movs	r3, #3
 800e12c:	e015      	b.n	800e15a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1e4      	bne.n	800e106 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e140:	223f      	movs	r2, #63	@ 0x3f
 800e142:	409a      	lsls	r2, r3
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e162:	b480      	push	{r7}
 800e164:	b083      	sub	sp, #12
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e170:	b2db      	uxtb	r3, r3
 800e172:	2b02      	cmp	r3, #2
 800e174:	d004      	beq.n	800e180 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2280      	movs	r2, #128	@ 0x80
 800e17a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e00c      	b.n	800e19a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2205      	movs	r2, #5
 800e184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f022 0201 	bic.w	r2, r2, #1
 800e196:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b089      	sub	sp, #36	@ 0x24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e1be:	2300      	movs	r3, #0
 800e1c0:	61fb      	str	r3, [r7, #28]
 800e1c2:	e165      	b.n	800e490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	697a      	ldr	r2, [r7, #20]
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	f040 8154 	bne.w	800e48a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	f003 0303 	and.w	r3, r3, #3
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d005      	beq.n	800e1fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e1f6:	2b02      	cmp	r3, #2
 800e1f8:	d130      	bne.n	800e25c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	005b      	lsls	r3, r3, #1
 800e204:	2203      	movs	r2, #3
 800e206:	fa02 f303 	lsl.w	r3, r2, r3
 800e20a:	43db      	mvns	r3, r3
 800e20c:	69ba      	ldr	r2, [r7, #24]
 800e20e:	4013      	ands	r3, r2
 800e210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	68da      	ldr	r2, [r3, #12]
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	005b      	lsls	r3, r3, #1
 800e21a:	fa02 f303 	lsl.w	r3, r2, r3
 800e21e:	69ba      	ldr	r2, [r7, #24]
 800e220:	4313      	orrs	r3, r2
 800e222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	69ba      	ldr	r2, [r7, #24]
 800e228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e230:	2201      	movs	r2, #1
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	fa02 f303 	lsl.w	r3, r2, r3
 800e238:	43db      	mvns	r3, r3
 800e23a:	69ba      	ldr	r2, [r7, #24]
 800e23c:	4013      	ands	r3, r2
 800e23e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	091b      	lsrs	r3, r3, #4
 800e246:	f003 0201 	and.w	r2, r3, #1
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	fa02 f303 	lsl.w	r3, r2, r3
 800e250:	69ba      	ldr	r2, [r7, #24]
 800e252:	4313      	orrs	r3, r2
 800e254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	69ba      	ldr	r2, [r7, #24]
 800e25a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	f003 0303 	and.w	r3, r3, #3
 800e264:	2b03      	cmp	r3, #3
 800e266:	d017      	beq.n	800e298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	005b      	lsls	r3, r3, #1
 800e272:	2203      	movs	r2, #3
 800e274:	fa02 f303 	lsl.w	r3, r2, r3
 800e278:	43db      	mvns	r3, r3
 800e27a:	69ba      	ldr	r2, [r7, #24]
 800e27c:	4013      	ands	r3, r2
 800e27e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	689a      	ldr	r2, [r3, #8]
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	fa02 f303 	lsl.w	r3, r2, r3
 800e28c:	69ba      	ldr	r2, [r7, #24]
 800e28e:	4313      	orrs	r3, r2
 800e290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	69ba      	ldr	r2, [r7, #24]
 800e296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	f003 0303 	and.w	r3, r3, #3
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	d123      	bne.n	800e2ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	08da      	lsrs	r2, r3, #3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3208      	adds	r2, #8
 800e2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	f003 0307 	and.w	r3, r3, #7
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	220f      	movs	r2, #15
 800e2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e2c0:	43db      	mvns	r3, r3
 800e2c2:	69ba      	ldr	r2, [r7, #24]
 800e2c4:	4013      	ands	r3, r2
 800e2c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	691a      	ldr	r2, [r3, #16]
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	f003 0307 	and.w	r3, r3, #7
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	08da      	lsrs	r2, r3, #3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	3208      	adds	r2, #8
 800e2e6:	69b9      	ldr	r1, [r7, #24]
 800e2e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	005b      	lsls	r3, r3, #1
 800e2f6:	2203      	movs	r2, #3
 800e2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e2fc:	43db      	mvns	r3, r3
 800e2fe:	69ba      	ldr	r2, [r7, #24]
 800e300:	4013      	ands	r3, r2
 800e302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	f003 0203 	and.w	r2, r3, #3
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	005b      	lsls	r3, r3, #1
 800e310:	fa02 f303 	lsl.w	r3, r2, r3
 800e314:	69ba      	ldr	r2, [r7, #24]
 800e316:	4313      	orrs	r3, r2
 800e318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	69ba      	ldr	r2, [r7, #24]
 800e31e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f000 80ae 	beq.w	800e48a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e32e:	2300      	movs	r3, #0
 800e330:	60fb      	str	r3, [r7, #12]
 800e332:	4b5d      	ldr	r3, [pc, #372]	@ (800e4a8 <HAL_GPIO_Init+0x300>)
 800e334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e336:	4a5c      	ldr	r2, [pc, #368]	@ (800e4a8 <HAL_GPIO_Init+0x300>)
 800e338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e33c:	6453      	str	r3, [r2, #68]	@ 0x44
 800e33e:	4b5a      	ldr	r3, [pc, #360]	@ (800e4a8 <HAL_GPIO_Init+0x300>)
 800e340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e34a:	4a58      	ldr	r2, [pc, #352]	@ (800e4ac <HAL_GPIO_Init+0x304>)
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	089b      	lsrs	r3, r3, #2
 800e350:	3302      	adds	r3, #2
 800e352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	f003 0303 	and.w	r3, r3, #3
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	220f      	movs	r2, #15
 800e362:	fa02 f303 	lsl.w	r3, r2, r3
 800e366:	43db      	mvns	r3, r3
 800e368:	69ba      	ldr	r2, [r7, #24]
 800e36a:	4013      	ands	r3, r2
 800e36c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a4f      	ldr	r2, [pc, #316]	@ (800e4b0 <HAL_GPIO_Init+0x308>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d025      	beq.n	800e3c2 <HAL_GPIO_Init+0x21a>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a4e      	ldr	r2, [pc, #312]	@ (800e4b4 <HAL_GPIO_Init+0x30c>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d01f      	beq.n	800e3be <HAL_GPIO_Init+0x216>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	4a4d      	ldr	r2, [pc, #308]	@ (800e4b8 <HAL_GPIO_Init+0x310>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d019      	beq.n	800e3ba <HAL_GPIO_Init+0x212>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a4c      	ldr	r2, [pc, #304]	@ (800e4bc <HAL_GPIO_Init+0x314>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d013      	beq.n	800e3b6 <HAL_GPIO_Init+0x20e>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4a4b      	ldr	r2, [pc, #300]	@ (800e4c0 <HAL_GPIO_Init+0x318>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d00d      	beq.n	800e3b2 <HAL_GPIO_Init+0x20a>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a4a      	ldr	r2, [pc, #296]	@ (800e4c4 <HAL_GPIO_Init+0x31c>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d007      	beq.n	800e3ae <HAL_GPIO_Init+0x206>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a49      	ldr	r2, [pc, #292]	@ (800e4c8 <HAL_GPIO_Init+0x320>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d101      	bne.n	800e3aa <HAL_GPIO_Init+0x202>
 800e3a6:	2306      	movs	r3, #6
 800e3a8:	e00c      	b.n	800e3c4 <HAL_GPIO_Init+0x21c>
 800e3aa:	2307      	movs	r3, #7
 800e3ac:	e00a      	b.n	800e3c4 <HAL_GPIO_Init+0x21c>
 800e3ae:	2305      	movs	r3, #5
 800e3b0:	e008      	b.n	800e3c4 <HAL_GPIO_Init+0x21c>
 800e3b2:	2304      	movs	r3, #4
 800e3b4:	e006      	b.n	800e3c4 <HAL_GPIO_Init+0x21c>
 800e3b6:	2303      	movs	r3, #3
 800e3b8:	e004      	b.n	800e3c4 <HAL_GPIO_Init+0x21c>
 800e3ba:	2302      	movs	r3, #2
 800e3bc:	e002      	b.n	800e3c4 <HAL_GPIO_Init+0x21c>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e000      	b.n	800e3c4 <HAL_GPIO_Init+0x21c>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	69fa      	ldr	r2, [r7, #28]
 800e3c6:	f002 0203 	and.w	r2, r2, #3
 800e3ca:	0092      	lsls	r2, r2, #2
 800e3cc:	4093      	lsls	r3, r2
 800e3ce:	69ba      	ldr	r2, [r7, #24]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e3d4:	4935      	ldr	r1, [pc, #212]	@ (800e4ac <HAL_GPIO_Init+0x304>)
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	089b      	lsrs	r3, r3, #2
 800e3da:	3302      	adds	r3, #2
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e3e2:	4b3a      	ldr	r3, [pc, #232]	@ (800e4cc <HAL_GPIO_Init+0x324>)
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	43db      	mvns	r3, r3
 800e3ec:	69ba      	ldr	r2, [r7, #24]
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800e3fe:	69ba      	ldr	r2, [r7, #24]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	4313      	orrs	r3, r2
 800e404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e406:	4a31      	ldr	r2, [pc, #196]	@ (800e4cc <HAL_GPIO_Init+0x324>)
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e40c:	4b2f      	ldr	r3, [pc, #188]	@ (800e4cc <HAL_GPIO_Init+0x324>)
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	43db      	mvns	r3, r3
 800e416:	69ba      	ldr	r2, [r7, #24]
 800e418:	4013      	ands	r3, r2
 800e41a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d003      	beq.n	800e430 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e430:	4a26      	ldr	r2, [pc, #152]	@ (800e4cc <HAL_GPIO_Init+0x324>)
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e436:	4b25      	ldr	r3, [pc, #148]	@ (800e4cc <HAL_GPIO_Init+0x324>)
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	43db      	mvns	r3, r3
 800e440:	69ba      	ldr	r2, [r7, #24]
 800e442:	4013      	ands	r3, r2
 800e444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800e452:	69ba      	ldr	r2, [r7, #24]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	4313      	orrs	r3, r2
 800e458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e45a:	4a1c      	ldr	r2, [pc, #112]	@ (800e4cc <HAL_GPIO_Init+0x324>)
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e460:	4b1a      	ldr	r3, [pc, #104]	@ (800e4cc <HAL_GPIO_Init+0x324>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	43db      	mvns	r3, r3
 800e46a:	69ba      	ldr	r2, [r7, #24]
 800e46c:	4013      	ands	r3, r2
 800e46e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d003      	beq.n	800e484 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800e47c:	69ba      	ldr	r2, [r7, #24]
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	4313      	orrs	r3, r2
 800e482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e484:	4a11      	ldr	r2, [pc, #68]	@ (800e4cc <HAL_GPIO_Init+0x324>)
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	3301      	adds	r3, #1
 800e48e:	61fb      	str	r3, [r7, #28]
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b0f      	cmp	r3, #15
 800e494:	f67f ae96 	bls.w	800e1c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e498:	bf00      	nop
 800e49a:	bf00      	nop
 800e49c:	3724      	adds	r7, #36	@ 0x24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop
 800e4a8:	40023800 	.word	0x40023800
 800e4ac:	40013800 	.word	0x40013800
 800e4b0:	40020000 	.word	0x40020000
 800e4b4:	40020400 	.word	0x40020400
 800e4b8:	40020800 	.word	0x40020800
 800e4bc:	40020c00 	.word	0x40020c00
 800e4c0:	40021000 	.word	0x40021000
 800e4c4:	40021400 	.word	0x40021400
 800e4c8:	40021800 	.word	0x40021800
 800e4cc:	40013c00 	.word	0x40013c00

0800e4d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	807b      	strh	r3, [r7, #2]
 800e4dc:	4613      	mov	r3, r2
 800e4de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e4e0:	787b      	ldrb	r3, [r7, #1]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d003      	beq.n	800e4ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e4e6:	887a      	ldrh	r2, [r7, #2]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e4ec:	e003      	b.n	800e4f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e4ee:	887b      	ldrh	r3, [r7, #2]
 800e4f0:	041a      	lsls	r2, r3, #16
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	619a      	str	r2, [r3, #24]
}
 800e4f6:	bf00      	nop
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
	...

0800e504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	4603      	mov	r3, r0
 800e50c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e50e:	4b08      	ldr	r3, [pc, #32]	@ (800e530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e510:	695a      	ldr	r2, [r3, #20]
 800e512:	88fb      	ldrh	r3, [r7, #6]
 800e514:	4013      	ands	r3, r2
 800e516:	2b00      	cmp	r3, #0
 800e518:	d006      	beq.n	800e528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e51a:	4a05      	ldr	r2, [pc, #20]	@ (800e530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e51c:	88fb      	ldrh	r3, [r7, #6]
 800e51e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e520:	88fb      	ldrh	r3, [r7, #6]
 800e522:	4618      	mov	r0, r3
 800e524:	f7fe ff00 	bl	800d328 <HAL_GPIO_EXTI_Callback>
  }
}
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	40013c00 	.word	0x40013c00

0800e534 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800e53a:	2300      	movs	r3, #0
 800e53c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e53e:	2300      	movs	r3, #0
 800e540:	603b      	str	r3, [r7, #0]
 800e542:	4b20      	ldr	r3, [pc, #128]	@ (800e5c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800e544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e546:	4a1f      	ldr	r2, [pc, #124]	@ (800e5c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800e548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e54c:	6413      	str	r3, [r2, #64]	@ 0x40
 800e54e:	4b1d      	ldr	r3, [pc, #116]	@ (800e5c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800e550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e55a:	4b1b      	ldr	r3, [pc, #108]	@ (800e5c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800e55c:	2201      	movs	r2, #1
 800e55e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e560:	f7ff fc4e 	bl	800de00 <HAL_GetTick>
 800e564:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e566:	e009      	b.n	800e57c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e568:	f7ff fc4a 	bl	800de00 <HAL_GetTick>
 800e56c:	4602      	mov	r2, r0
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e576:	d901      	bls.n	800e57c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800e578:	2303      	movs	r3, #3
 800e57a:	e01f      	b.n	800e5bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e57c:	4b13      	ldr	r3, [pc, #76]	@ (800e5cc <HAL_PWREx_EnableOverDrive+0x98>)
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e588:	d1ee      	bne.n	800e568 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e58a:	4b11      	ldr	r3, [pc, #68]	@ (800e5d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e58c:	2201      	movs	r2, #1
 800e58e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e590:	f7ff fc36 	bl	800de00 <HAL_GetTick>
 800e594:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e596:	e009      	b.n	800e5ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e598:	f7ff fc32 	bl	800de00 <HAL_GetTick>
 800e59c:	4602      	mov	r2, r0
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	1ad3      	subs	r3, r2, r3
 800e5a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e5a6:	d901      	bls.n	800e5ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800e5a8:	2303      	movs	r3, #3
 800e5aa:	e007      	b.n	800e5bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e5ac:	4b07      	ldr	r3, [pc, #28]	@ (800e5cc <HAL_PWREx_EnableOverDrive+0x98>)
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e5b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5b8:	d1ee      	bne.n	800e598 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	40023800 	.word	0x40023800
 800e5c8:	420e0040 	.word	0x420e0040
 800e5cc:	40007000 	.word	0x40007000
 800e5d0:	420e0044 	.word	0x420e0044

0800e5d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	e0cc      	b.n	800e782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e5e8:	4b68      	ldr	r3, [pc, #416]	@ (800e78c <HAL_RCC_ClockConfig+0x1b8>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f003 030f 	and.w	r3, r3, #15
 800e5f0:	683a      	ldr	r2, [r7, #0]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d90c      	bls.n	800e610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5f6:	4b65      	ldr	r3, [pc, #404]	@ (800e78c <HAL_RCC_ClockConfig+0x1b8>)
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	b2d2      	uxtb	r2, r2
 800e5fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5fe:	4b63      	ldr	r3, [pc, #396]	@ (800e78c <HAL_RCC_ClockConfig+0x1b8>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f003 030f 	and.w	r3, r3, #15
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d001      	beq.n	800e610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e60c:	2301      	movs	r3, #1
 800e60e:	e0b8      	b.n	800e782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f003 0302 	and.w	r3, r3, #2
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d020      	beq.n	800e65e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f003 0304 	and.w	r3, r3, #4
 800e624:	2b00      	cmp	r3, #0
 800e626:	d005      	beq.n	800e634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e628:	4b59      	ldr	r3, [pc, #356]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	4a58      	ldr	r2, [pc, #352]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e62e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f003 0308 	and.w	r3, r3, #8
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d005      	beq.n	800e64c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e640:	4b53      	ldr	r3, [pc, #332]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	4a52      	ldr	r2, [pc, #328]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e64a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e64c:	4b50      	ldr	r3, [pc, #320]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	494d      	ldr	r1, [pc, #308]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e65a:	4313      	orrs	r3, r2
 800e65c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	2b00      	cmp	r3, #0
 800e668:	d044      	beq.n	800e6f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d107      	bne.n	800e682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e672:	4b47      	ldr	r3, [pc, #284]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d119      	bne.n	800e6b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	e07f      	b.n	800e782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	2b02      	cmp	r3, #2
 800e688:	d003      	beq.n	800e692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e68e:	2b03      	cmp	r3, #3
 800e690:	d107      	bne.n	800e6a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e692:	4b3f      	ldr	r3, [pc, #252]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d109      	bne.n	800e6b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e06f      	b.n	800e782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e6a2:	4b3b      	ldr	r3, [pc, #236]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f003 0302 	and.w	r3, r3, #2
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d101      	bne.n	800e6b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e067      	b.n	800e782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e6b2:	4b37      	ldr	r3, [pc, #220]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	f023 0203 	bic.w	r2, r3, #3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	4934      	ldr	r1, [pc, #208]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e6c4:	f7ff fb9c 	bl	800de00 <HAL_GetTick>
 800e6c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e6ca:	e00a      	b.n	800e6e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e6cc:	f7ff fb98 	bl	800de00 <HAL_GetTick>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	1ad3      	subs	r3, r2, r3
 800e6d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d901      	bls.n	800e6e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e6de:	2303      	movs	r3, #3
 800e6e0:	e04f      	b.n	800e782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e6e2:	4b2b      	ldr	r3, [pc, #172]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	f003 020c 	and.w	r2, r3, #12
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d1eb      	bne.n	800e6cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e6f4:	4b25      	ldr	r3, [pc, #148]	@ (800e78c <HAL_RCC_ClockConfig+0x1b8>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f003 030f 	and.w	r3, r3, #15
 800e6fc:	683a      	ldr	r2, [r7, #0]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d20c      	bcs.n	800e71c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e702:	4b22      	ldr	r3, [pc, #136]	@ (800e78c <HAL_RCC_ClockConfig+0x1b8>)
 800e704:	683a      	ldr	r2, [r7, #0]
 800e706:	b2d2      	uxtb	r2, r2
 800e708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e70a:	4b20      	ldr	r3, [pc, #128]	@ (800e78c <HAL_RCC_ClockConfig+0x1b8>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 030f 	and.w	r3, r3, #15
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	429a      	cmp	r2, r3
 800e716:	d001      	beq.n	800e71c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e718:	2301      	movs	r3, #1
 800e71a:	e032      	b.n	800e782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f003 0304 	and.w	r3, r3, #4
 800e724:	2b00      	cmp	r3, #0
 800e726:	d008      	beq.n	800e73a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e728:	4b19      	ldr	r3, [pc, #100]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	4916      	ldr	r1, [pc, #88]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e736:	4313      	orrs	r3, r2
 800e738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f003 0308 	and.w	r3, r3, #8
 800e742:	2b00      	cmp	r3, #0
 800e744:	d009      	beq.n	800e75a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e746:	4b12      	ldr	r3, [pc, #72]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e748:	689b      	ldr	r3, [r3, #8]
 800e74a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	00db      	lsls	r3, r3, #3
 800e754:	490e      	ldr	r1, [pc, #56]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e756:	4313      	orrs	r3, r2
 800e758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e75a:	f000 f855 	bl	800e808 <HAL_RCC_GetSysClockFreq>
 800e75e:	4602      	mov	r2, r0
 800e760:	4b0b      	ldr	r3, [pc, #44]	@ (800e790 <HAL_RCC_ClockConfig+0x1bc>)
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	091b      	lsrs	r3, r3, #4
 800e766:	f003 030f 	and.w	r3, r3, #15
 800e76a:	490a      	ldr	r1, [pc, #40]	@ (800e794 <HAL_RCC_ClockConfig+0x1c0>)
 800e76c:	5ccb      	ldrb	r3, [r1, r3]
 800e76e:	fa22 f303 	lsr.w	r3, r2, r3
 800e772:	4a09      	ldr	r2, [pc, #36]	@ (800e798 <HAL_RCC_ClockConfig+0x1c4>)
 800e774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e776:	4b09      	ldr	r3, [pc, #36]	@ (800e79c <HAL_RCC_ClockConfig+0x1c8>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7ff fafc 	bl	800dd78 <HAL_InitTick>

  return HAL_OK;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	40023c00 	.word	0x40023c00
 800e790:	40023800 	.word	0x40023800
 800e794:	080189a4 	.word	0x080189a4
 800e798:	20000010 	.word	0x20000010
 800e79c:	20000014 	.word	0x20000014

0800e7a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e7a4:	4b03      	ldr	r3, [pc, #12]	@ (800e7b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	20000010 	.word	0x20000010

0800e7b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e7bc:	f7ff fff0 	bl	800e7a0 <HAL_RCC_GetHCLKFreq>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	4b05      	ldr	r3, [pc, #20]	@ (800e7d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	0a9b      	lsrs	r3, r3, #10
 800e7c8:	f003 0307 	and.w	r3, r3, #7
 800e7cc:	4903      	ldr	r1, [pc, #12]	@ (800e7dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800e7ce:	5ccb      	ldrb	r3, [r1, r3]
 800e7d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	40023800 	.word	0x40023800
 800e7dc:	080189b4 	.word	0x080189b4

0800e7e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e7e4:	f7ff ffdc 	bl	800e7a0 <HAL_RCC_GetHCLKFreq>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	4b05      	ldr	r3, [pc, #20]	@ (800e800 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	0b5b      	lsrs	r3, r3, #13
 800e7f0:	f003 0307 	and.w	r3, r3, #7
 800e7f4:	4903      	ldr	r1, [pc, #12]	@ (800e804 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e7f6:	5ccb      	ldrb	r3, [r1, r3]
 800e7f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	40023800 	.word	0x40023800
 800e804:	080189b4 	.word	0x080189b4

0800e808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e80c:	b0ae      	sub	sp, #184	@ 0xb8
 800e80e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e810:	2300      	movs	r3, #0
 800e812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800e816:	2300      	movs	r3, #0
 800e818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800e81c:	2300      	movs	r3, #0
 800e81e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800e822:	2300      	movs	r3, #0
 800e824:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800e828:	2300      	movs	r3, #0
 800e82a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e82e:	4bcb      	ldr	r3, [pc, #812]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	f003 030c 	and.w	r3, r3, #12
 800e836:	2b0c      	cmp	r3, #12
 800e838:	f200 8206 	bhi.w	800ec48 <HAL_RCC_GetSysClockFreq+0x440>
 800e83c:	a201      	add	r2, pc, #4	@ (adr r2, 800e844 <HAL_RCC_GetSysClockFreq+0x3c>)
 800e83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e842:	bf00      	nop
 800e844:	0800e879 	.word	0x0800e879
 800e848:	0800ec49 	.word	0x0800ec49
 800e84c:	0800ec49 	.word	0x0800ec49
 800e850:	0800ec49 	.word	0x0800ec49
 800e854:	0800e881 	.word	0x0800e881
 800e858:	0800ec49 	.word	0x0800ec49
 800e85c:	0800ec49 	.word	0x0800ec49
 800e860:	0800ec49 	.word	0x0800ec49
 800e864:	0800e889 	.word	0x0800e889
 800e868:	0800ec49 	.word	0x0800ec49
 800e86c:	0800ec49 	.word	0x0800ec49
 800e870:	0800ec49 	.word	0x0800ec49
 800e874:	0800ea79 	.word	0x0800ea79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e878:	4bb9      	ldr	r3, [pc, #740]	@ (800eb60 <HAL_RCC_GetSysClockFreq+0x358>)
 800e87a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800e87e:	e1e7      	b.n	800ec50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e880:	4bb8      	ldr	r3, [pc, #736]	@ (800eb64 <HAL_RCC_GetSysClockFreq+0x35c>)
 800e882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e886:	e1e3      	b.n	800ec50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e888:	4bb4      	ldr	r3, [pc, #720]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e890:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e894:	4bb1      	ldr	r3, [pc, #708]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d071      	beq.n	800e984 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e8a0:	4bae      	ldr	r3, [pc, #696]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	099b      	lsrs	r3, r3, #6
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e8ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800e8b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e8bc:	2300      	movs	r3, #0
 800e8be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e8c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e8c6:	4622      	mov	r2, r4
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	f04f 0000 	mov.w	r0, #0
 800e8ce:	f04f 0100 	mov.w	r1, #0
 800e8d2:	0159      	lsls	r1, r3, #5
 800e8d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e8d8:	0150      	lsls	r0, r2, #5
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4621      	mov	r1, r4
 800e8e0:	1a51      	subs	r1, r2, r1
 800e8e2:	6439      	str	r1, [r7, #64]	@ 0x40
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	eb63 0301 	sbc.w	r3, r3, r1
 800e8ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8ec:	f04f 0200 	mov.w	r2, #0
 800e8f0:	f04f 0300 	mov.w	r3, #0
 800e8f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800e8f8:	4649      	mov	r1, r9
 800e8fa:	018b      	lsls	r3, r1, #6
 800e8fc:	4641      	mov	r1, r8
 800e8fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e902:	4641      	mov	r1, r8
 800e904:	018a      	lsls	r2, r1, #6
 800e906:	4641      	mov	r1, r8
 800e908:	1a51      	subs	r1, r2, r1
 800e90a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e90c:	4649      	mov	r1, r9
 800e90e:	eb63 0301 	sbc.w	r3, r3, r1
 800e912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e914:	f04f 0200 	mov.w	r2, #0
 800e918:	f04f 0300 	mov.w	r3, #0
 800e91c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800e920:	4649      	mov	r1, r9
 800e922:	00cb      	lsls	r3, r1, #3
 800e924:	4641      	mov	r1, r8
 800e926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e92a:	4641      	mov	r1, r8
 800e92c:	00ca      	lsls	r2, r1, #3
 800e92e:	4610      	mov	r0, r2
 800e930:	4619      	mov	r1, r3
 800e932:	4603      	mov	r3, r0
 800e934:	4622      	mov	r2, r4
 800e936:	189b      	adds	r3, r3, r2
 800e938:	633b      	str	r3, [r7, #48]	@ 0x30
 800e93a:	462b      	mov	r3, r5
 800e93c:	460a      	mov	r2, r1
 800e93e:	eb42 0303 	adc.w	r3, r2, r3
 800e942:	637b      	str	r3, [r7, #52]	@ 0x34
 800e944:	f04f 0200 	mov.w	r2, #0
 800e948:	f04f 0300 	mov.w	r3, #0
 800e94c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e950:	4629      	mov	r1, r5
 800e952:	024b      	lsls	r3, r1, #9
 800e954:	4621      	mov	r1, r4
 800e956:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e95a:	4621      	mov	r1, r4
 800e95c:	024a      	lsls	r2, r1, #9
 800e95e:	4610      	mov	r0, r2
 800e960:	4619      	mov	r1, r3
 800e962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e966:	2200      	movs	r2, #0
 800e968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e96c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e970:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e974:	f7f2 f998 	bl	8000ca8 <__aeabi_uldivmod>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	4613      	mov	r3, r2
 800e97e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e982:	e067      	b.n	800ea54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e984:	4b75      	ldr	r3, [pc, #468]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	099b      	lsrs	r3, r3, #6
 800e98a:	2200      	movs	r2, #0
 800e98c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e990:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e994:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e99c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e99e:	2300      	movs	r3, #0
 800e9a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e9a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	462b      	mov	r3, r5
 800e9aa:	f04f 0000 	mov.w	r0, #0
 800e9ae:	f04f 0100 	mov.w	r1, #0
 800e9b2:	0159      	lsls	r1, r3, #5
 800e9b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e9b8:	0150      	lsls	r0, r2, #5
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4621      	mov	r1, r4
 800e9c0:	1a51      	subs	r1, r2, r1
 800e9c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	eb63 0301 	sbc.w	r3, r3, r1
 800e9ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9cc:	f04f 0200 	mov.w	r2, #0
 800e9d0:	f04f 0300 	mov.w	r3, #0
 800e9d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800e9d8:	4649      	mov	r1, r9
 800e9da:	018b      	lsls	r3, r1, #6
 800e9dc:	4641      	mov	r1, r8
 800e9de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e9e2:	4641      	mov	r1, r8
 800e9e4:	018a      	lsls	r2, r1, #6
 800e9e6:	4641      	mov	r1, r8
 800e9e8:	ebb2 0a01 	subs.w	sl, r2, r1
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	eb63 0b01 	sbc.w	fp, r3, r1
 800e9f2:	f04f 0200 	mov.w	r2, #0
 800e9f6:	f04f 0300 	mov.w	r3, #0
 800e9fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e9fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ea02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea06:	4692      	mov	sl, r2
 800ea08:	469b      	mov	fp, r3
 800ea0a:	4623      	mov	r3, r4
 800ea0c:	eb1a 0303 	adds.w	r3, sl, r3
 800ea10:	623b      	str	r3, [r7, #32]
 800ea12:	462b      	mov	r3, r5
 800ea14:	eb4b 0303 	adc.w	r3, fp, r3
 800ea18:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea1a:	f04f 0200 	mov.w	r2, #0
 800ea1e:	f04f 0300 	mov.w	r3, #0
 800ea22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800ea26:	4629      	mov	r1, r5
 800ea28:	028b      	lsls	r3, r1, #10
 800ea2a:	4621      	mov	r1, r4
 800ea2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ea30:	4621      	mov	r1, r4
 800ea32:	028a      	lsls	r2, r1, #10
 800ea34:	4610      	mov	r0, r2
 800ea36:	4619      	mov	r1, r3
 800ea38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ea40:	677a      	str	r2, [r7, #116]	@ 0x74
 800ea42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800ea46:	f7f2 f92f 	bl	8000ca8 <__aeabi_uldivmod>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4613      	mov	r3, r2
 800ea50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ea54:	4b41      	ldr	r3, [pc, #260]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	0c1b      	lsrs	r3, r3, #16
 800ea5a:	f003 0303 	and.w	r3, r3, #3
 800ea5e:	3301      	adds	r3, #1
 800ea60:	005b      	lsls	r3, r3, #1
 800ea62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800ea66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ea6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ea76:	e0eb      	b.n	800ec50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ea78:	4b38      	ldr	r3, [pc, #224]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ea80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ea84:	4b35      	ldr	r3, [pc, #212]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d06b      	beq.n	800eb68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ea90:	4b32      	ldr	r3, [pc, #200]	@ (800eb5c <HAL_RCC_GetSysClockFreq+0x354>)
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	099b      	lsrs	r3, r3, #6
 800ea96:	2200      	movs	r2, #0
 800ea98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ea9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ea9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ea9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa2:	663b      	str	r3, [r7, #96]	@ 0x60
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	667b      	str	r3, [r7, #100]	@ 0x64
 800eaa8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800eaac:	4622      	mov	r2, r4
 800eaae:	462b      	mov	r3, r5
 800eab0:	f04f 0000 	mov.w	r0, #0
 800eab4:	f04f 0100 	mov.w	r1, #0
 800eab8:	0159      	lsls	r1, r3, #5
 800eaba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eabe:	0150      	lsls	r0, r2, #5
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	4621      	mov	r1, r4
 800eac6:	1a51      	subs	r1, r2, r1
 800eac8:	61b9      	str	r1, [r7, #24]
 800eaca:	4629      	mov	r1, r5
 800eacc:	eb63 0301 	sbc.w	r3, r3, r1
 800ead0:	61fb      	str	r3, [r7, #28]
 800ead2:	f04f 0200 	mov.w	r2, #0
 800ead6:	f04f 0300 	mov.w	r3, #0
 800eada:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800eade:	4659      	mov	r1, fp
 800eae0:	018b      	lsls	r3, r1, #6
 800eae2:	4651      	mov	r1, sl
 800eae4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800eae8:	4651      	mov	r1, sl
 800eaea:	018a      	lsls	r2, r1, #6
 800eaec:	4651      	mov	r1, sl
 800eaee:	ebb2 0801 	subs.w	r8, r2, r1
 800eaf2:	4659      	mov	r1, fp
 800eaf4:	eb63 0901 	sbc.w	r9, r3, r1
 800eaf8:	f04f 0200 	mov.w	r2, #0
 800eafc:	f04f 0300 	mov.w	r3, #0
 800eb00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eb04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eb08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eb0c:	4690      	mov	r8, r2
 800eb0e:	4699      	mov	r9, r3
 800eb10:	4623      	mov	r3, r4
 800eb12:	eb18 0303 	adds.w	r3, r8, r3
 800eb16:	613b      	str	r3, [r7, #16]
 800eb18:	462b      	mov	r3, r5
 800eb1a:	eb49 0303 	adc.w	r3, r9, r3
 800eb1e:	617b      	str	r3, [r7, #20]
 800eb20:	f04f 0200 	mov.w	r2, #0
 800eb24:	f04f 0300 	mov.w	r3, #0
 800eb28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	024b      	lsls	r3, r1, #9
 800eb30:	4621      	mov	r1, r4
 800eb32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800eb36:	4621      	mov	r1, r4
 800eb38:	024a      	lsls	r2, r1, #9
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb42:	2200      	movs	r2, #0
 800eb44:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb46:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800eb48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800eb4c:	f7f2 f8ac 	bl	8000ca8 <__aeabi_uldivmod>
 800eb50:	4602      	mov	r2, r0
 800eb52:	460b      	mov	r3, r1
 800eb54:	4613      	mov	r3, r2
 800eb56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eb5a:	e065      	b.n	800ec28 <HAL_RCC_GetSysClockFreq+0x420>
 800eb5c:	40023800 	.word	0x40023800
 800eb60:	00f42400 	.word	0x00f42400
 800eb64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eb68:	4b3d      	ldr	r3, [pc, #244]	@ (800ec60 <HAL_RCC_GetSysClockFreq+0x458>)
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	099b      	lsrs	r3, r3, #6
 800eb6e:	2200      	movs	r2, #0
 800eb70:	4618      	mov	r0, r3
 800eb72:	4611      	mov	r1, r2
 800eb74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800eb78:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800eb82:	4642      	mov	r2, r8
 800eb84:	464b      	mov	r3, r9
 800eb86:	f04f 0000 	mov.w	r0, #0
 800eb8a:	f04f 0100 	mov.w	r1, #0
 800eb8e:	0159      	lsls	r1, r3, #5
 800eb90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eb94:	0150      	lsls	r0, r2, #5
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4641      	mov	r1, r8
 800eb9c:	1a51      	subs	r1, r2, r1
 800eb9e:	60b9      	str	r1, [r7, #8]
 800eba0:	4649      	mov	r1, r9
 800eba2:	eb63 0301 	sbc.w	r3, r3, r1
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	f04f 0200 	mov.w	r2, #0
 800ebac:	f04f 0300 	mov.w	r3, #0
 800ebb0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ebb4:	4659      	mov	r1, fp
 800ebb6:	018b      	lsls	r3, r1, #6
 800ebb8:	4651      	mov	r1, sl
 800ebba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ebbe:	4651      	mov	r1, sl
 800ebc0:	018a      	lsls	r2, r1, #6
 800ebc2:	4651      	mov	r1, sl
 800ebc4:	1a54      	subs	r4, r2, r1
 800ebc6:	4659      	mov	r1, fp
 800ebc8:	eb63 0501 	sbc.w	r5, r3, r1
 800ebcc:	f04f 0200 	mov.w	r2, #0
 800ebd0:	f04f 0300 	mov.w	r3, #0
 800ebd4:	00eb      	lsls	r3, r5, #3
 800ebd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ebda:	00e2      	lsls	r2, r4, #3
 800ebdc:	4614      	mov	r4, r2
 800ebde:	461d      	mov	r5, r3
 800ebe0:	4643      	mov	r3, r8
 800ebe2:	18e3      	adds	r3, r4, r3
 800ebe4:	603b      	str	r3, [r7, #0]
 800ebe6:	464b      	mov	r3, r9
 800ebe8:	eb45 0303 	adc.w	r3, r5, r3
 800ebec:	607b      	str	r3, [r7, #4]
 800ebee:	f04f 0200 	mov.w	r2, #0
 800ebf2:	f04f 0300 	mov.w	r3, #0
 800ebf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	028b      	lsls	r3, r1, #10
 800ebfe:	4621      	mov	r1, r4
 800ec00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ec04:	4621      	mov	r1, r4
 800ec06:	028a      	lsls	r2, r1, #10
 800ec08:	4610      	mov	r0, r2
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec10:	2200      	movs	r2, #0
 800ec12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ec16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ec1a:	f7f2 f845 	bl	8000ca8 <__aeabi_uldivmod>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	4613      	mov	r3, r2
 800ec24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ec28:	4b0d      	ldr	r3, [pc, #52]	@ (800ec60 <HAL_RCC_GetSysClockFreq+0x458>)
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	0f1b      	lsrs	r3, r3, #28
 800ec2e:	f003 0307 	and.w	r3, r3, #7
 800ec32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800ec36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ec3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ec46:	e003      	b.n	800ec50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ec48:	4b06      	ldr	r3, [pc, #24]	@ (800ec64 <HAL_RCC_GetSysClockFreq+0x45c>)
 800ec4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ec4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ec50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	37b8      	adds	r7, #184	@ 0xb8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec5e:	bf00      	nop
 800ec60:	40023800 	.word	0x40023800
 800ec64:	00f42400 	.word	0x00f42400

0800ec68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b086      	sub	sp, #24
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d101      	bne.n	800ec7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	e28d      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f003 0301 	and.w	r3, r3, #1
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 8083 	beq.w	800ed8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ec88:	4b94      	ldr	r3, [pc, #592]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	f003 030c 	and.w	r3, r3, #12
 800ec90:	2b04      	cmp	r3, #4
 800ec92:	d019      	beq.n	800ecc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ec94:	4b91      	ldr	r3, [pc, #580]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ec9c:	2b08      	cmp	r3, #8
 800ec9e:	d106      	bne.n	800ecae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800eca0:	4b8e      	ldr	r3, [pc, #568]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eca8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ecac:	d00c      	beq.n	800ecc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ecae:	4b8b      	ldr	r3, [pc, #556]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ecb0:	689b      	ldr	r3, [r3, #8]
 800ecb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ecb6:	2b0c      	cmp	r3, #12
 800ecb8:	d112      	bne.n	800ece0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ecba:	4b88      	ldr	r3, [pc, #544]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ecc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ecc6:	d10b      	bne.n	800ece0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ecc8:	4b84      	ldr	r3, [pc, #528]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d05b      	beq.n	800ed8c <HAL_RCC_OscConfig+0x124>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d157      	bne.n	800ed8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	e25a      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ece8:	d106      	bne.n	800ecf8 <HAL_RCC_OscConfig+0x90>
 800ecea:	4b7c      	ldr	r3, [pc, #496]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	4a7b      	ldr	r2, [pc, #492]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ecf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ecf4:	6013      	str	r3, [r2, #0]
 800ecf6:	e01d      	b.n	800ed34 <HAL_RCC_OscConfig+0xcc>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ed00:	d10c      	bne.n	800ed1c <HAL_RCC_OscConfig+0xb4>
 800ed02:	4b76      	ldr	r3, [pc, #472]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a75      	ldr	r2, [pc, #468]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ed0c:	6013      	str	r3, [r2, #0]
 800ed0e:	4b73      	ldr	r3, [pc, #460]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4a72      	ldr	r2, [pc, #456]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed18:	6013      	str	r3, [r2, #0]
 800ed1a:	e00b      	b.n	800ed34 <HAL_RCC_OscConfig+0xcc>
 800ed1c:	4b6f      	ldr	r3, [pc, #444]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a6e      	ldr	r2, [pc, #440]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ed26:	6013      	str	r3, [r2, #0]
 800ed28:	4b6c      	ldr	r3, [pc, #432]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a6b      	ldr	r2, [pc, #428]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ed32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d013      	beq.n	800ed64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed3c:	f7ff f860 	bl	800de00 <HAL_GetTick>
 800ed40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed42:	e008      	b.n	800ed56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ed44:	f7ff f85c 	bl	800de00 <HAL_GetTick>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	2b64      	cmp	r3, #100	@ 0x64
 800ed50:	d901      	bls.n	800ed56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ed52:	2303      	movs	r3, #3
 800ed54:	e21f      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed56:	4b61      	ldr	r3, [pc, #388]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d0f0      	beq.n	800ed44 <HAL_RCC_OscConfig+0xdc>
 800ed62:	e014      	b.n	800ed8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed64:	f7ff f84c 	bl	800de00 <HAL_GetTick>
 800ed68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed6a:	e008      	b.n	800ed7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ed6c:	f7ff f848 	bl	800de00 <HAL_GetTick>
 800ed70:	4602      	mov	r2, r0
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	2b64      	cmp	r3, #100	@ 0x64
 800ed78:	d901      	bls.n	800ed7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ed7a:	2303      	movs	r3, #3
 800ed7c:	e20b      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed7e:	4b57      	ldr	r3, [pc, #348]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1f0      	bne.n	800ed6c <HAL_RCC_OscConfig+0x104>
 800ed8a:	e000      	b.n	800ed8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f003 0302 	and.w	r3, r3, #2
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d06f      	beq.n	800ee7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ed9a:	4b50      	ldr	r3, [pc, #320]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	f003 030c 	and.w	r3, r3, #12
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d017      	beq.n	800edd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800eda6:	4b4d      	ldr	r3, [pc, #308]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800edae:	2b08      	cmp	r3, #8
 800edb0:	d105      	bne.n	800edbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800edb2:	4b4a      	ldr	r3, [pc, #296]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00b      	beq.n	800edd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800edbe:	4b47      	ldr	r3, [pc, #284]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800edc6:	2b0c      	cmp	r3, #12
 800edc8:	d11c      	bne.n	800ee04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800edca:	4b44      	ldr	r3, [pc, #272]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d116      	bne.n	800ee04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800edd6:	4b41      	ldr	r3, [pc, #260]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f003 0302 	and.w	r3, r3, #2
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d005      	beq.n	800edee <HAL_RCC_OscConfig+0x186>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d001      	beq.n	800edee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800edea:	2301      	movs	r3, #1
 800edec:	e1d3      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800edee:	4b3b      	ldr	r3, [pc, #236]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	00db      	lsls	r3, r3, #3
 800edfc:	4937      	ldr	r1, [pc, #220]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800edfe:	4313      	orrs	r3, r2
 800ee00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ee02:	e03a      	b.n	800ee7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d020      	beq.n	800ee4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ee0c:	4b34      	ldr	r3, [pc, #208]	@ (800eee0 <HAL_RCC_OscConfig+0x278>)
 800ee0e:	2201      	movs	r2, #1
 800ee10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee12:	f7fe fff5 	bl	800de00 <HAL_GetTick>
 800ee16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ee18:	e008      	b.n	800ee2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ee1a:	f7fe fff1 	bl	800de00 <HAL_GetTick>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	1ad3      	subs	r3, r2, r3
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	d901      	bls.n	800ee2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ee28:	2303      	movs	r3, #3
 800ee2a:	e1b4      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ee2c:	4b2b      	ldr	r3, [pc, #172]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f003 0302 	and.w	r3, r3, #2
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d0f0      	beq.n	800ee1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ee38:	4b28      	ldr	r3, [pc, #160]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	00db      	lsls	r3, r3, #3
 800ee46:	4925      	ldr	r1, [pc, #148]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	600b      	str	r3, [r1, #0]
 800ee4c:	e015      	b.n	800ee7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ee4e:	4b24      	ldr	r3, [pc, #144]	@ (800eee0 <HAL_RCC_OscConfig+0x278>)
 800ee50:	2200      	movs	r2, #0
 800ee52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee54:	f7fe ffd4 	bl	800de00 <HAL_GetTick>
 800ee58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ee5a:	e008      	b.n	800ee6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ee5c:	f7fe ffd0 	bl	800de00 <HAL_GetTick>
 800ee60:	4602      	mov	r2, r0
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	2b02      	cmp	r3, #2
 800ee68:	d901      	bls.n	800ee6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ee6a:	2303      	movs	r3, #3
 800ee6c:	e193      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ee6e:	4b1b      	ldr	r3, [pc, #108]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f003 0302 	and.w	r3, r3, #2
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1f0      	bne.n	800ee5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f003 0308 	and.w	r3, r3, #8
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d036      	beq.n	800eef4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	695b      	ldr	r3, [r3, #20]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d016      	beq.n	800eebc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ee8e:	4b15      	ldr	r3, [pc, #84]	@ (800eee4 <HAL_RCC_OscConfig+0x27c>)
 800ee90:	2201      	movs	r2, #1
 800ee92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee94:	f7fe ffb4 	bl	800de00 <HAL_GetTick>
 800ee98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee9a:	e008      	b.n	800eeae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ee9c:	f7fe ffb0 	bl	800de00 <HAL_GetTick>
 800eea0:	4602      	mov	r2, r0
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d901      	bls.n	800eeae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	e173      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eeae:	4b0b      	ldr	r3, [pc, #44]	@ (800eedc <HAL_RCC_OscConfig+0x274>)
 800eeb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeb2:	f003 0302 	and.w	r3, r3, #2
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d0f0      	beq.n	800ee9c <HAL_RCC_OscConfig+0x234>
 800eeba:	e01b      	b.n	800eef4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eebc:	4b09      	ldr	r3, [pc, #36]	@ (800eee4 <HAL_RCC_OscConfig+0x27c>)
 800eebe:	2200      	movs	r2, #0
 800eec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eec2:	f7fe ff9d 	bl	800de00 <HAL_GetTick>
 800eec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eec8:	e00e      	b.n	800eee8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eeca:	f7fe ff99 	bl	800de00 <HAL_GetTick>
 800eece:	4602      	mov	r2, r0
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	2b02      	cmp	r3, #2
 800eed6:	d907      	bls.n	800eee8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800eed8:	2303      	movs	r3, #3
 800eeda:	e15c      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
 800eedc:	40023800 	.word	0x40023800
 800eee0:	42470000 	.word	0x42470000
 800eee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eee8:	4b8a      	ldr	r3, [pc, #552]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800eeea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeec:	f003 0302 	and.w	r3, r3, #2
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1ea      	bne.n	800eeca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f003 0304 	and.w	r3, r3, #4
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f000 8097 	beq.w	800f030 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ef02:	2300      	movs	r3, #0
 800ef04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ef06:	4b83      	ldr	r3, [pc, #524]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d10f      	bne.n	800ef32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ef12:	2300      	movs	r3, #0
 800ef14:	60bb      	str	r3, [r7, #8]
 800ef16:	4b7f      	ldr	r3, [pc, #508]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef1a:	4a7e      	ldr	r2, [pc, #504]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef20:	6413      	str	r3, [r2, #64]	@ 0x40
 800ef22:	4b7c      	ldr	r3, [pc, #496]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ef2a:	60bb      	str	r3, [r7, #8]
 800ef2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ef32:	4b79      	ldr	r3, [pc, #484]	@ (800f118 <HAL_RCC_OscConfig+0x4b0>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d118      	bne.n	800ef70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ef3e:	4b76      	ldr	r3, [pc, #472]	@ (800f118 <HAL_RCC_OscConfig+0x4b0>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4a75      	ldr	r2, [pc, #468]	@ (800f118 <HAL_RCC_OscConfig+0x4b0>)
 800ef44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ef48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ef4a:	f7fe ff59 	bl	800de00 <HAL_GetTick>
 800ef4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ef50:	e008      	b.n	800ef64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ef52:	f7fe ff55 	bl	800de00 <HAL_GetTick>
 800ef56:	4602      	mov	r2, r0
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d901      	bls.n	800ef64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ef60:	2303      	movs	r3, #3
 800ef62:	e118      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ef64:	4b6c      	ldr	r3, [pc, #432]	@ (800f118 <HAL_RCC_OscConfig+0x4b0>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d0f0      	beq.n	800ef52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d106      	bne.n	800ef86 <HAL_RCC_OscConfig+0x31e>
 800ef78:	4b66      	ldr	r3, [pc, #408]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef7c:	4a65      	ldr	r2, [pc, #404]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef7e:	f043 0301 	orr.w	r3, r3, #1
 800ef82:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef84:	e01c      	b.n	800efc0 <HAL_RCC_OscConfig+0x358>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	689b      	ldr	r3, [r3, #8]
 800ef8a:	2b05      	cmp	r3, #5
 800ef8c:	d10c      	bne.n	800efa8 <HAL_RCC_OscConfig+0x340>
 800ef8e:	4b61      	ldr	r3, [pc, #388]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef92:	4a60      	ldr	r2, [pc, #384]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef94:	f043 0304 	orr.w	r3, r3, #4
 800ef98:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef9a:	4b5e      	ldr	r3, [pc, #376]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800ef9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef9e:	4a5d      	ldr	r2, [pc, #372]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800efa0:	f043 0301 	orr.w	r3, r3, #1
 800efa4:	6713      	str	r3, [r2, #112]	@ 0x70
 800efa6:	e00b      	b.n	800efc0 <HAL_RCC_OscConfig+0x358>
 800efa8:	4b5a      	ldr	r3, [pc, #360]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800efaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efac:	4a59      	ldr	r2, [pc, #356]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800efae:	f023 0301 	bic.w	r3, r3, #1
 800efb2:	6713      	str	r3, [r2, #112]	@ 0x70
 800efb4:	4b57      	ldr	r3, [pc, #348]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800efb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efb8:	4a56      	ldr	r2, [pc, #344]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800efba:	f023 0304 	bic.w	r3, r3, #4
 800efbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d015      	beq.n	800eff4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efc8:	f7fe ff1a 	bl	800de00 <HAL_GetTick>
 800efcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800efce:	e00a      	b.n	800efe6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800efd0:	f7fe ff16 	bl	800de00 <HAL_GetTick>
 800efd4:	4602      	mov	r2, r0
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800efde:	4293      	cmp	r3, r2
 800efe0:	d901      	bls.n	800efe6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800efe2:	2303      	movs	r3, #3
 800efe4:	e0d7      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800efe6:	4b4b      	ldr	r3, [pc, #300]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800efe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efea:	f003 0302 	and.w	r3, r3, #2
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0ee      	beq.n	800efd0 <HAL_RCC_OscConfig+0x368>
 800eff2:	e014      	b.n	800f01e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eff4:	f7fe ff04 	bl	800de00 <HAL_GetTick>
 800eff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800effa:	e00a      	b.n	800f012 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800effc:	f7fe ff00 	bl	800de00 <HAL_GetTick>
 800f000:	4602      	mov	r2, r0
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d901      	bls.n	800f012 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f00e:	2303      	movs	r3, #3
 800f010:	e0c1      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f012:	4b40      	ldr	r3, [pc, #256]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800f014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f016:	f003 0302 	and.w	r3, r3, #2
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1ee      	bne.n	800effc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f01e:	7dfb      	ldrb	r3, [r7, #23]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d105      	bne.n	800f030 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f024:	4b3b      	ldr	r3, [pc, #236]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800f026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f028:	4a3a      	ldr	r2, [pc, #232]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800f02a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f02e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	699b      	ldr	r3, [r3, #24]
 800f034:	2b00      	cmp	r3, #0
 800f036:	f000 80ad 	beq.w	800f194 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f03a:	4b36      	ldr	r3, [pc, #216]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	f003 030c 	and.w	r3, r3, #12
 800f042:	2b08      	cmp	r3, #8
 800f044:	d060      	beq.n	800f108 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	699b      	ldr	r3, [r3, #24]
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d145      	bne.n	800f0da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f04e:	4b33      	ldr	r3, [pc, #204]	@ (800f11c <HAL_RCC_OscConfig+0x4b4>)
 800f050:	2200      	movs	r2, #0
 800f052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f054:	f7fe fed4 	bl	800de00 <HAL_GetTick>
 800f058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f05a:	e008      	b.n	800f06e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f05c:	f7fe fed0 	bl	800de00 <HAL_GetTick>
 800f060:	4602      	mov	r2, r0
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	2b02      	cmp	r3, #2
 800f068:	d901      	bls.n	800f06e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800f06a:	2303      	movs	r3, #3
 800f06c:	e093      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f06e:	4b29      	ldr	r3, [pc, #164]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1f0      	bne.n	800f05c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	69da      	ldr	r2, [r3, #28]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a1b      	ldr	r3, [r3, #32]
 800f082:	431a      	orrs	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f088:	019b      	lsls	r3, r3, #6
 800f08a:	431a      	orrs	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f090:	085b      	lsrs	r3, r3, #1
 800f092:	3b01      	subs	r3, #1
 800f094:	041b      	lsls	r3, r3, #16
 800f096:	431a      	orrs	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f09c:	061b      	lsls	r3, r3, #24
 800f09e:	431a      	orrs	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0a4:	071b      	lsls	r3, r3, #28
 800f0a6:	491b      	ldr	r1, [pc, #108]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f0ac:	4b1b      	ldr	r3, [pc, #108]	@ (800f11c <HAL_RCC_OscConfig+0x4b4>)
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0b2:	f7fe fea5 	bl	800de00 <HAL_GetTick>
 800f0b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f0b8:	e008      	b.n	800f0cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f0ba:	f7fe fea1 	bl	800de00 <HAL_GetTick>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	d901      	bls.n	800f0cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	e064      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f0cc:	4b11      	ldr	r3, [pc, #68]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d0f0      	beq.n	800f0ba <HAL_RCC_OscConfig+0x452>
 800f0d8:	e05c      	b.n	800f194 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f0da:	4b10      	ldr	r3, [pc, #64]	@ (800f11c <HAL_RCC_OscConfig+0x4b4>)
 800f0dc:	2200      	movs	r2, #0
 800f0de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0e0:	f7fe fe8e 	bl	800de00 <HAL_GetTick>
 800f0e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f0e6:	e008      	b.n	800f0fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f0e8:	f7fe fe8a 	bl	800de00 <HAL_GetTick>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	2b02      	cmp	r3, #2
 800f0f4:	d901      	bls.n	800f0fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800f0f6:	2303      	movs	r3, #3
 800f0f8:	e04d      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f0fa:	4b06      	ldr	r3, [pc, #24]	@ (800f114 <HAL_RCC_OscConfig+0x4ac>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f102:	2b00      	cmp	r3, #0
 800f104:	d1f0      	bne.n	800f0e8 <HAL_RCC_OscConfig+0x480>
 800f106:	e045      	b.n	800f194 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d107      	bne.n	800f120 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800f110:	2301      	movs	r3, #1
 800f112:	e040      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
 800f114:	40023800 	.word	0x40023800
 800f118:	40007000 	.word	0x40007000
 800f11c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f120:	4b1f      	ldr	r3, [pc, #124]	@ (800f1a0 <HAL_RCC_OscConfig+0x538>)
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	699b      	ldr	r3, [r3, #24]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d030      	beq.n	800f190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f138:	429a      	cmp	r2, r3
 800f13a:	d129      	bne.n	800f190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f146:	429a      	cmp	r2, r3
 800f148:	d122      	bne.n	800f190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f150:	4013      	ands	r3, r2
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f158:	4293      	cmp	r3, r2
 800f15a:	d119      	bne.n	800f190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f166:	085b      	lsrs	r3, r3, #1
 800f168:	3b01      	subs	r3, #1
 800f16a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d10f      	bne.n	800f190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f17a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d107      	bne.n	800f190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f18a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d001      	beq.n	800f194 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	e000      	b.n	800f196 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3718      	adds	r7, #24
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	40023800 	.word	0x40023800

0800f1a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	e07b      	b.n	800f2ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d108      	bne.n	800f1d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f1c6:	d009      	beq.n	800f1dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	61da      	str	r2, [r3, #28]
 800f1ce:	e005      	b.n	800f1dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7fe f99e 	bl	800d538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2202      	movs	r2, #2
 800f200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f212:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f224:	431a      	orrs	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f22e:	431a      	orrs	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	f003 0302 	and.w	r3, r3, #2
 800f238:	431a      	orrs	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	695b      	ldr	r3, [r3, #20]
 800f23e:	f003 0301 	and.w	r3, r3, #1
 800f242:	431a      	orrs	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	699b      	ldr	r3, [r3, #24]
 800f248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f24c:	431a      	orrs	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	69db      	ldr	r3, [r3, #28]
 800f252:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f256:	431a      	orrs	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6a1b      	ldr	r3, [r3, #32]
 800f25c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f260:	ea42 0103 	orr.w	r1, r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f268:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	430a      	orrs	r2, r1
 800f272:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	699b      	ldr	r3, [r3, #24]
 800f278:	0c1b      	lsrs	r3, r3, #16
 800f27a:	f003 0104 	and.w	r1, r3, #4
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f282:	f003 0210 	and.w	r2, r3, #16
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	69da      	ldr	r2, [r3, #28]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f29c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f2ac:	2300      	movs	r3, #0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b088      	sub	sp, #32
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	60f8      	str	r0, [r7, #12]
 800f2be:	60b9      	str	r1, [r7, #8]
 800f2c0:	603b      	str	r3, [r7, #0]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d101      	bne.n	800f2d8 <HAL_SPI_Transmit+0x22>
 800f2d4:	2302      	movs	r3, #2
 800f2d6:	e126      	b.n	800f526 <HAL_SPI_Transmit+0x270>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f2e0:	f7fe fd8e 	bl	800de00 <HAL_GetTick>
 800f2e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f2e6:	88fb      	ldrh	r3, [r7, #6]
 800f2e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d002      	beq.n	800f2fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f2f6:	2302      	movs	r3, #2
 800f2f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f2fa:	e10b      	b.n	800f514 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d002      	beq.n	800f308 <HAL_SPI_Transmit+0x52>
 800f302:	88fb      	ldrh	r3, [r7, #6]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d102      	bne.n	800f30e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f308:	2301      	movs	r3, #1
 800f30a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f30c:	e102      	b.n	800f514 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2203      	movs	r2, #3
 800f312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2200      	movs	r2, #0
 800f31a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	88fa      	ldrh	r2, [r7, #6]
 800f326:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	88fa      	ldrh	r2, [r7, #6]
 800f32c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2200      	movs	r2, #0
 800f332:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2200      	movs	r2, #0
 800f338:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2200      	movs	r2, #0
 800f33e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2200      	movs	r2, #0
 800f344:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f354:	d10f      	bne.n	800f376 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f364:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f374:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f380:	2b40      	cmp	r3, #64	@ 0x40
 800f382:	d007      	beq.n	800f394 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f392:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f39c:	d14b      	bne.n	800f436 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d002      	beq.n	800f3ac <HAL_SPI_Transmit+0xf6>
 800f3a6:	8afb      	ldrh	r3, [r7, #22]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d13e      	bne.n	800f42a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3b0:	881a      	ldrh	r2, [r3, #0]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3bc:	1c9a      	adds	r2, r3, #2
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	b29a      	uxth	r2, r3
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f3d0:	e02b      	b.n	800f42a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	f003 0302 	and.w	r3, r3, #2
 800f3dc:	2b02      	cmp	r3, #2
 800f3de:	d112      	bne.n	800f406 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3e4:	881a      	ldrh	r2, [r3, #0]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3f0:	1c9a      	adds	r2, r3, #2
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f404:	e011      	b.n	800f42a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f406:	f7fe fcfb 	bl	800de00 <HAL_GetTick>
 800f40a:	4602      	mov	r2, r0
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	683a      	ldr	r2, [r7, #0]
 800f412:	429a      	cmp	r2, r3
 800f414:	d803      	bhi.n	800f41e <HAL_SPI_Transmit+0x168>
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f41c:	d102      	bne.n	800f424 <HAL_SPI_Transmit+0x16e>
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d102      	bne.n	800f42a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800f424:	2303      	movs	r3, #3
 800f426:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f428:	e074      	b.n	800f514 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f42e:	b29b      	uxth	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d1ce      	bne.n	800f3d2 <HAL_SPI_Transmit+0x11c>
 800f434:	e04c      	b.n	800f4d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d002      	beq.n	800f444 <HAL_SPI_Transmit+0x18e>
 800f43e:	8afb      	ldrh	r3, [r7, #22]
 800f440:	2b01      	cmp	r3, #1
 800f442:	d140      	bne.n	800f4c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	330c      	adds	r3, #12
 800f44e:	7812      	ldrb	r2, [r2, #0]
 800f450:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f460:	b29b      	uxth	r3, r3
 800f462:	3b01      	subs	r3, #1
 800f464:	b29a      	uxth	r2, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f46a:	e02c      	b.n	800f4c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	689b      	ldr	r3, [r3, #8]
 800f472:	f003 0302 	and.w	r3, r3, #2
 800f476:	2b02      	cmp	r3, #2
 800f478:	d113      	bne.n	800f4a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	330c      	adds	r3, #12
 800f484:	7812      	ldrb	r2, [r2, #0]
 800f486:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f48c:	1c5a      	adds	r2, r3, #1
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f496:	b29b      	uxth	r3, r3
 800f498:	3b01      	subs	r3, #1
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f4a0:	e011      	b.n	800f4c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4a2:	f7fe fcad 	bl	800de00 <HAL_GetTick>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	683a      	ldr	r2, [r7, #0]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d803      	bhi.n	800f4ba <HAL_SPI_Transmit+0x204>
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b8:	d102      	bne.n	800f4c0 <HAL_SPI_Transmit+0x20a>
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d102      	bne.n	800f4c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800f4c0:	2303      	movs	r3, #3
 800f4c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f4c4:	e026      	b.n	800f514 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1cd      	bne.n	800f46c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f4d0:	69ba      	ldr	r2, [r7, #24]
 800f4d2:	6839      	ldr	r1, [r7, #0]
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f000 fcdd 	bl	800fe94 <SPI_EndRxTxTransaction>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d002      	beq.n	800f4e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2220      	movs	r2, #32
 800f4e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10a      	bne.n	800f504 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	613b      	str	r3, [r7, #16]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	613b      	str	r3, [r7, #16]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	613b      	str	r3, [r7, #16]
 800f502:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	77fb      	strb	r3, [r7, #31]
 800f510:	e000      	b.n	800f514 <HAL_SPI_Transmit+0x25e>
  }

error:
 800f512:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2201      	movs	r2, #1
 800f518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f524:	7ffb      	ldrb	r3, [r7, #31]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3720      	adds	r7, #32
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b088      	sub	sp, #32
 800f532:	af02      	add	r7, sp, #8
 800f534:	60f8      	str	r0, [r7, #12]
 800f536:	60b9      	str	r1, [r7, #8]
 800f538:	603b      	str	r3, [r7, #0]
 800f53a:	4613      	mov	r3, r2
 800f53c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f53e:	2300      	movs	r3, #0
 800f540:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f54a:	d112      	bne.n	800f572 <HAL_SPI_Receive+0x44>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d10e      	bne.n	800f572 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2204      	movs	r2, #4
 800f558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f55c:	88fa      	ldrh	r2, [r7, #6]
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	4613      	mov	r3, r2
 800f564:	68ba      	ldr	r2, [r7, #8]
 800f566:	68b9      	ldr	r1, [r7, #8]
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f000 f8f1 	bl	800f750 <HAL_SPI_TransmitReceive>
 800f56e:	4603      	mov	r3, r0
 800f570:	e0ea      	b.n	800f748 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d101      	bne.n	800f580 <HAL_SPI_Receive+0x52>
 800f57c:	2302      	movs	r3, #2
 800f57e:	e0e3      	b.n	800f748 <HAL_SPI_Receive+0x21a>
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2201      	movs	r2, #1
 800f584:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f588:	f7fe fc3a 	bl	800de00 <HAL_GetTick>
 800f58c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f594:	b2db      	uxtb	r3, r3
 800f596:	2b01      	cmp	r3, #1
 800f598:	d002      	beq.n	800f5a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f59a:	2302      	movs	r3, #2
 800f59c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f59e:	e0ca      	b.n	800f736 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d002      	beq.n	800f5ac <HAL_SPI_Receive+0x7e>
 800f5a6:	88fb      	ldrh	r3, [r7, #6]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d102      	bne.n	800f5b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f5b0:	e0c1      	b.n	800f736 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2204      	movs	r2, #4
 800f5b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	68ba      	ldr	r2, [r7, #8]
 800f5c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	88fa      	ldrh	r2, [r7, #6]
 800f5ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	88fa      	ldrh	r2, [r7, #6]
 800f5d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f5f8:	d10f      	bne.n	800f61a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f618:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f624:	2b40      	cmp	r3, #64	@ 0x40
 800f626:	d007      	beq.n	800f638 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f636:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d162      	bne.n	800f706 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f640:	e02e      	b.n	800f6a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	f003 0301 	and.w	r3, r3, #1
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d115      	bne.n	800f67c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f103 020c 	add.w	r2, r3, #12
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f65c:	7812      	ldrb	r2, [r2, #0]
 800f65e:	b2d2      	uxtb	r2, r2
 800f660:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f666:	1c5a      	adds	r2, r3, #1
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f670:	b29b      	uxth	r3, r3
 800f672:	3b01      	subs	r3, #1
 800f674:	b29a      	uxth	r2, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f67a:	e011      	b.n	800f6a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f67c:	f7fe fbc0 	bl	800de00 <HAL_GetTick>
 800f680:	4602      	mov	r2, r0
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d803      	bhi.n	800f694 <HAL_SPI_Receive+0x166>
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f692:	d102      	bne.n	800f69a <HAL_SPI_Receive+0x16c>
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d102      	bne.n	800f6a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800f69a:	2303      	movs	r3, #3
 800f69c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f69e:	e04a      	b.n	800f736 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1cb      	bne.n	800f642 <HAL_SPI_Receive+0x114>
 800f6aa:	e031      	b.n	800f710 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	f003 0301 	and.w	r3, r3, #1
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d113      	bne.n	800f6e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	68da      	ldr	r2, [r3, #12]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6c4:	b292      	uxth	r2, r2
 800f6c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6cc:	1c9a      	adds	r2, r3, #2
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f6e0:	e011      	b.n	800f706 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6e2:	f7fe fb8d 	bl	800de00 <HAL_GetTick>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d803      	bhi.n	800f6fa <HAL_SPI_Receive+0x1cc>
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f8:	d102      	bne.n	800f700 <HAL_SPI_Receive+0x1d2>
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d102      	bne.n	800f706 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800f700:	2303      	movs	r3, #3
 800f702:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f704:	e017      	b.n	800f736 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d1cd      	bne.n	800f6ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f710:	693a      	ldr	r2, [r7, #16]
 800f712:	6839      	ldr	r1, [r7, #0]
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f000 fb57 	bl	800fdc8 <SPI_EndRxTransaction>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d002      	beq.n	800f726 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2220      	movs	r2, #32
 800f724:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d002      	beq.n	800f734 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	75fb      	strb	r3, [r7, #23]
 800f732:	e000      	b.n	800f736 <HAL_SPI_Receive+0x208>
  }

error :
 800f734:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2201      	movs	r2, #1
 800f73a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2200      	movs	r2, #0
 800f742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f746:	7dfb      	ldrb	r3, [r7, #23]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08c      	sub	sp, #48	@ 0x30
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
 800f75c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f75e:	2301      	movs	r3, #1
 800f760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f762:	2300      	movs	r3, #0
 800f764:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d101      	bne.n	800f776 <HAL_SPI_TransmitReceive+0x26>
 800f772:	2302      	movs	r3, #2
 800f774:	e18a      	b.n	800fa8c <HAL_SPI_TransmitReceive+0x33c>
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2201      	movs	r2, #1
 800f77a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f77e:	f7fe fb3f 	bl	800de00 <HAL_GetTick>
 800f782:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f78a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f794:	887b      	ldrh	r3, [r7, #2]
 800f796:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f798:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d00f      	beq.n	800f7c0 <HAL_SPI_TransmitReceive+0x70>
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f7a6:	d107      	bne.n	800f7b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d103      	bne.n	800f7b8 <HAL_SPI_TransmitReceive+0x68>
 800f7b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f7b4:	2b04      	cmp	r3, #4
 800f7b6:	d003      	beq.n	800f7c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f7be:	e15b      	b.n	800fa78 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d005      	beq.n	800f7d2 <HAL_SPI_TransmitReceive+0x82>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d002      	beq.n	800f7d2 <HAL_SPI_TransmitReceive+0x82>
 800f7cc:	887b      	ldrh	r3, [r7, #2]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d103      	bne.n	800f7da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f7d8:	e14e      	b.n	800fa78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b04      	cmp	r3, #4
 800f7e4:	d003      	beq.n	800f7ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2205      	movs	r2, #5
 800f7ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	887a      	ldrh	r2, [r7, #2]
 800f7fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	887a      	ldrh	r2, [r7, #2]
 800f804:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	887a      	ldrh	r2, [r7, #2]
 800f810:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	887a      	ldrh	r2, [r7, #2]
 800f816:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2200      	movs	r2, #0
 800f81c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f82e:	2b40      	cmp	r3, #64	@ 0x40
 800f830:	d007      	beq.n	800f842 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f84a:	d178      	bne.n	800f93e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d002      	beq.n	800f85a <HAL_SPI_TransmitReceive+0x10a>
 800f854:	8b7b      	ldrh	r3, [r7, #26]
 800f856:	2b01      	cmp	r3, #1
 800f858:	d166      	bne.n	800f928 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f85e:	881a      	ldrh	r2, [r3, #0]
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f86a:	1c9a      	adds	r2, r3, #2
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f874:	b29b      	uxth	r3, r3
 800f876:	3b01      	subs	r3, #1
 800f878:	b29a      	uxth	r2, r3
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f87e:	e053      	b.n	800f928 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	f003 0302 	and.w	r3, r3, #2
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d11b      	bne.n	800f8c6 <HAL_SPI_TransmitReceive+0x176>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f892:	b29b      	uxth	r3, r3
 800f894:	2b00      	cmp	r3, #0
 800f896:	d016      	beq.n	800f8c6 <HAL_SPI_TransmitReceive+0x176>
 800f898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d113      	bne.n	800f8c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8a2:	881a      	ldrh	r2, [r3, #0]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ae:	1c9a      	adds	r2, r3, #2
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	3b01      	subs	r3, #1
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	689b      	ldr	r3, [r3, #8]
 800f8cc:	f003 0301 	and.w	r3, r3, #1
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d119      	bne.n	800f908 <HAL_SPI_TransmitReceive+0x1b8>
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d014      	beq.n	800f908 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	68da      	ldr	r2, [r3, #12]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8e8:	b292      	uxth	r2, r2
 800f8ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8f0:	1c9a      	adds	r2, r3, #2
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f904:	2301      	movs	r3, #1
 800f906:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f908:	f7fe fa7a 	bl	800de00 <HAL_GetTick>
 800f90c:	4602      	mov	r2, r0
 800f90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f914:	429a      	cmp	r2, r3
 800f916:	d807      	bhi.n	800f928 <HAL_SPI_TransmitReceive+0x1d8>
 800f918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f91e:	d003      	beq.n	800f928 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f920:	2303      	movs	r3, #3
 800f922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800f926:	e0a7      	b.n	800fa78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1a6      	bne.n	800f880 <HAL_SPI_TransmitReceive+0x130>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f936:	b29b      	uxth	r3, r3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1a1      	bne.n	800f880 <HAL_SPI_TransmitReceive+0x130>
 800f93c:	e07c      	b.n	800fa38 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d002      	beq.n	800f94c <HAL_SPI_TransmitReceive+0x1fc>
 800f946:	8b7b      	ldrh	r3, [r7, #26]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d16b      	bne.n	800fa24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	330c      	adds	r3, #12
 800f956:	7812      	ldrb	r2, [r2, #0]
 800f958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f968:	b29b      	uxth	r3, r3
 800f96a:	3b01      	subs	r3, #1
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f972:	e057      	b.n	800fa24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	f003 0302 	and.w	r3, r3, #2
 800f97e:	2b02      	cmp	r3, #2
 800f980:	d11c      	bne.n	800f9bc <HAL_SPI_TransmitReceive+0x26c>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f986:	b29b      	uxth	r3, r3
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d017      	beq.n	800f9bc <HAL_SPI_TransmitReceive+0x26c>
 800f98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d114      	bne.n	800f9bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	330c      	adds	r3, #12
 800f99c:	7812      	ldrb	r2, [r2, #0]
 800f99e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9a4:	1c5a      	adds	r2, r3, #1
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	f003 0301 	and.w	r3, r3, #1
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d119      	bne.n	800f9fe <HAL_SPI_TransmitReceive+0x2ae>
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d014      	beq.n	800f9fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	68da      	ldr	r2, [r3, #12]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9de:	b2d2      	uxtb	r2, r2
 800f9e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	3b01      	subs	r3, #1
 800f9f4:	b29a      	uxth	r2, r3
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f9fe:	f7fe f9ff 	bl	800de00 <HAL_GetTick>
 800fa02:	4602      	mov	r2, r0
 800fa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d803      	bhi.n	800fa16 <HAL_SPI_TransmitReceive+0x2c6>
 800fa0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa14:	d102      	bne.n	800fa1c <HAL_SPI_TransmitReceive+0x2cc>
 800fa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d103      	bne.n	800fa24 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800fa1c:	2303      	movs	r3, #3
 800fa1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800fa22:	e029      	b.n	800fa78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1a2      	bne.n	800f974 <HAL_SPI_TransmitReceive+0x224>
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d19d      	bne.n	800f974 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fa38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f000 fa29 	bl	800fe94 <SPI_EndRxTxTransaction>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d006      	beq.n	800fa56 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2220      	movs	r2, #32
 800fa52:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800fa54:	e010      	b.n	800fa78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d10b      	bne.n	800fa76 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fa5e:	2300      	movs	r3, #0
 800fa60:	617b      	str	r3, [r7, #20]
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	617b      	str	r3, [r7, #20]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	617b      	str	r3, [r7, #20]
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	e000      	b.n	800fa78 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800fa76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2200      	movs	r2, #0
 800fa84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800fa88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3730      	adds	r7, #48	@ 0x30
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b088      	sub	sp, #32
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d10e      	bne.n	800fad4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d009      	beq.n	800fad4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d004      	beq.n	800fad4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	4798      	blx	r3
    return;
 800fad2:	e0ce      	b.n	800fc72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	f003 0302 	and.w	r3, r3, #2
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d009      	beq.n	800faf2 <HAL_SPI_IRQHandler+0x5e>
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d004      	beq.n	800faf2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	4798      	blx	r3
    return;
 800faf0:	e0bf      	b.n	800fc72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	f003 0320 	and.w	r3, r3, #32
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d10a      	bne.n	800fb12 <HAL_SPI_IRQHandler+0x7e>
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d105      	bne.n	800fb12 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f000 80b0 	beq.w	800fc72 <HAL_SPI_IRQHandler+0x1de>
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	f003 0320 	and.w	r3, r3, #32
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	f000 80aa 	beq.w	800fc72 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d023      	beq.n	800fb70 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	2b03      	cmp	r3, #3
 800fb32:	d011      	beq.n	800fb58 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb38:	f043 0204 	orr.w	r2, r3, #4
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb40:	2300      	movs	r3, #0
 800fb42:	617b      	str	r3, [r7, #20]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	617b      	str	r3, [r7, #20]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	617b      	str	r3, [r7, #20]
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	e00b      	b.n	800fb70 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb58:	2300      	movs	r3, #0
 800fb5a:	613b      	str	r3, [r7, #16]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	68db      	ldr	r3, [r3, #12]
 800fb62:	613b      	str	r3, [r7, #16]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	689b      	ldr	r3, [r3, #8]
 800fb6a:	613b      	str	r3, [r7, #16]
 800fb6c:	693b      	ldr	r3, [r7, #16]
        return;
 800fb6e:	e080      	b.n	800fc72 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	f003 0320 	and.w	r3, r3, #32
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d014      	beq.n	800fba4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb7e:	f043 0201 	orr.w	r2, r3, #1
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fb86:	2300      	movs	r3, #0
 800fb88:	60fb      	str	r3, [r7, #12]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	60fb      	str	r3, [r7, #12]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fba0:	601a      	str	r2, [r3, #0]
 800fba2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800fba4:	69bb      	ldr	r3, [r7, #24]
 800fba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00c      	beq.n	800fbc8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbb2:	f043 0208 	orr.w	r2, r3, #8
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fbba:	2300      	movs	r3, #0
 800fbbc:	60bb      	str	r3, [r7, #8]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	60bb      	str	r3, [r7, #8]
 800fbc6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d04f      	beq.n	800fc70 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	685a      	ldr	r2, [r3, #4]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fbde:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	f003 0302 	and.w	r3, r3, #2
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d104      	bne.n	800fbfc <HAL_SPI_IRQHandler+0x168>
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	f003 0301 	and.w	r3, r3, #1
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d034      	beq.n	800fc66 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	685a      	ldr	r2, [r3, #4]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f022 0203 	bic.w	r2, r2, #3
 800fc0a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d011      	beq.n	800fc38 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc18:	4a17      	ldr	r2, [pc, #92]	@ (800fc78 <HAL_SPI_IRQHandler+0x1e4>)
 800fc1a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fe fa9e 	bl	800e162 <HAL_DMA_Abort_IT>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d005      	beq.n	800fc38 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d016      	beq.n	800fc6e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc44:	4a0c      	ldr	r2, [pc, #48]	@ (800fc78 <HAL_SPI_IRQHandler+0x1e4>)
 800fc46:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7fe fa88 	bl	800e162 <HAL_DMA_Abort_IT>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00a      	beq.n	800fc6e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800fc64:	e003      	b.n	800fc6e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 f808 	bl	800fc7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800fc6c:	e000      	b.n	800fc70 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800fc6e:	bf00      	nop
    return;
 800fc70:	bf00      	nop
  }
}
 800fc72:	3720      	adds	r7, #32
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	0800fc91 	.word	0x0800fc91

0800fc7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f7ff ffe6 	bl	800fc7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fcb0:	bf00      	nop
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b088      	sub	sp, #32
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	603b      	str	r3, [r7, #0]
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fcc8:	f7fe f89a 	bl	800de00 <HAL_GetTick>
 800fccc:	4602      	mov	r2, r0
 800fcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd0:	1a9b      	subs	r3, r3, r2
 800fcd2:	683a      	ldr	r2, [r7, #0]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fcd8:	f7fe f892 	bl	800de00 <HAL_GetTick>
 800fcdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fcde:	4b39      	ldr	r3, [pc, #228]	@ (800fdc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	015b      	lsls	r3, r3, #5
 800fce4:	0d1b      	lsrs	r3, r3, #20
 800fce6:	69fa      	ldr	r2, [r7, #28]
 800fce8:	fb02 f303 	mul.w	r3, r2, r3
 800fcec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fcee:	e054      	b.n	800fd9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf6:	d050      	beq.n	800fd9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fcf8:	f7fe f882 	bl	800de00 <HAL_GetTick>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	69bb      	ldr	r3, [r7, #24]
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	69fa      	ldr	r2, [r7, #28]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d902      	bls.n	800fd0e <SPI_WaitFlagStateUntilTimeout+0x56>
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d13d      	bne.n	800fd8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	685a      	ldr	r2, [r3, #4]
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fd1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd26:	d111      	bne.n	800fd4c <SPI_WaitFlagStateUntilTimeout+0x94>
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	689b      	ldr	r3, [r3, #8]
 800fd2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd30:	d004      	beq.n	800fd3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	689b      	ldr	r3, [r3, #8]
 800fd36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd3a:	d107      	bne.n	800fd4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fd4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd54:	d10f      	bne.n	800fd76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fd64:	601a      	str	r2, [r3, #0]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fd74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2200      	movs	r2, #0
 800fd82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800fd86:	2303      	movs	r3, #3
 800fd88:	e017      	b.n	800fdba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fd90:	2300      	movs	r3, #0
 800fd92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	689a      	ldr	r2, [r3, #8]
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	4013      	ands	r3, r2
 800fda4:	68ba      	ldr	r2, [r7, #8]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	bf0c      	ite	eq
 800fdaa:	2301      	moveq	r3, #1
 800fdac:	2300      	movne	r3, #0
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	79fb      	ldrb	r3, [r7, #7]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d19b      	bne.n	800fcf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3720      	adds	r7, #32
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20000010 	.word	0x20000010

0800fdc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af02      	add	r7, sp, #8
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fddc:	d111      	bne.n	800fe02 <SPI_EndRxTransaction+0x3a>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fde6:	d004      	beq.n	800fdf2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fdf0:	d107      	bne.n	800fe02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fe00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fe0a:	d12a      	bne.n	800fe62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fe14:	d012      	beq.n	800fe3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	2180      	movs	r1, #128	@ 0x80
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f7ff ff49 	bl	800fcb8 <SPI_WaitFlagStateUntilTimeout>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d02d      	beq.n	800fe88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe30:	f043 0220 	orr.w	r2, r3, #32
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800fe38:	2303      	movs	r3, #3
 800fe3a:	e026      	b.n	800fe8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	2200      	movs	r2, #0
 800fe44:	2101      	movs	r1, #1
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7ff ff36 	bl	800fcb8 <SPI_WaitFlagStateUntilTimeout>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d01a      	beq.n	800fe88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe56:	f043 0220 	orr.w	r2, r3, #32
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800fe5e:	2303      	movs	r3, #3
 800fe60:	e013      	b.n	800fe8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	9300      	str	r3, [sp, #0]
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	2101      	movs	r1, #1
 800fe6c:	68f8      	ldr	r0, [r7, #12]
 800fe6e:	f7ff ff23 	bl	800fcb8 <SPI_WaitFlagStateUntilTimeout>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d007      	beq.n	800fe88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe7c:	f043 0220 	orr.w	r2, r3, #32
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fe84:	2303      	movs	r3, #3
 800fe86:	e000      	b.n	800fe8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
	...

0800fe94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b088      	sub	sp, #32
 800fe98:	af02      	add	r7, sp, #8
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fea0:	4b1b      	ldr	r3, [pc, #108]	@ (800ff10 <SPI_EndRxTxTransaction+0x7c>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a1b      	ldr	r2, [pc, #108]	@ (800ff14 <SPI_EndRxTxTransaction+0x80>)
 800fea6:	fba2 2303 	umull	r2, r3, r2, r3
 800feaa:	0d5b      	lsrs	r3, r3, #21
 800feac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800feb0:	fb02 f303 	mul.w	r3, r2, r3
 800feb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800febe:	d112      	bne.n	800fee6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	2200      	movs	r2, #0
 800fec8:	2180      	movs	r1, #128	@ 0x80
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f7ff fef4 	bl	800fcb8 <SPI_WaitFlagStateUntilTimeout>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d016      	beq.n	800ff04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feda:	f043 0220 	orr.w	r2, r3, #32
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fee2:	2303      	movs	r3, #3
 800fee4:	e00f      	b.n	800ff06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d00a      	beq.n	800ff02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	3b01      	subs	r3, #1
 800fef0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fefc:	2b80      	cmp	r3, #128	@ 0x80
 800fefe:	d0f2      	beq.n	800fee6 <SPI_EndRxTxTransaction+0x52>
 800ff00:	e000      	b.n	800ff04 <SPI_EndRxTxTransaction+0x70>
        break;
 800ff02:	bf00      	nop
  }

  return HAL_OK;
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3718      	adds	r7, #24
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	20000010 	.word	0x20000010
 800ff14:	165e9f81 	.word	0x165e9f81

0800ff18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d101      	bne.n	800ff2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ff26:	2301      	movs	r3, #1
 800ff28:	e041      	b.n	800ffae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d106      	bne.n	800ff44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7fd fbee 	bl	800d720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2202      	movs	r2, #2
 800ff48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	3304      	adds	r3, #4
 800ff54:	4619      	mov	r1, r3
 800ff56:	4610      	mov	r0, r2
 800ff58:	f000 fba8 	bl	80106ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2201      	movs	r2, #1
 800ff68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2201      	movs	r2, #1
 800ff78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2201      	movs	r2, #1
 800ff80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2201      	movs	r2, #1
 800ff88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2201      	movs	r2, #1
 800ff90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ffac:	2300      	movs	r3, #0
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
	...

0800ffb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b085      	sub	sp, #20
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d001      	beq.n	800ffd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e04e      	b.n	801006e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2202      	movs	r2, #2
 800ffd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68da      	ldr	r2, [r3, #12]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f042 0201 	orr.w	r2, r2, #1
 800ffe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a23      	ldr	r2, [pc, #140]	@ (801007c <HAL_TIM_Base_Start_IT+0xc4>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d022      	beq.n	8010038 <HAL_TIM_Base_Start_IT+0x80>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fffa:	d01d      	beq.n	8010038 <HAL_TIM_Base_Start_IT+0x80>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a1f      	ldr	r2, [pc, #124]	@ (8010080 <HAL_TIM_Base_Start_IT+0xc8>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d018      	beq.n	8010038 <HAL_TIM_Base_Start_IT+0x80>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4a1e      	ldr	r2, [pc, #120]	@ (8010084 <HAL_TIM_Base_Start_IT+0xcc>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d013      	beq.n	8010038 <HAL_TIM_Base_Start_IT+0x80>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	4a1c      	ldr	r2, [pc, #112]	@ (8010088 <HAL_TIM_Base_Start_IT+0xd0>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d00e      	beq.n	8010038 <HAL_TIM_Base_Start_IT+0x80>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a1b      	ldr	r2, [pc, #108]	@ (801008c <HAL_TIM_Base_Start_IT+0xd4>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d009      	beq.n	8010038 <HAL_TIM_Base_Start_IT+0x80>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4a19      	ldr	r2, [pc, #100]	@ (8010090 <HAL_TIM_Base_Start_IT+0xd8>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d004      	beq.n	8010038 <HAL_TIM_Base_Start_IT+0x80>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a18      	ldr	r2, [pc, #96]	@ (8010094 <HAL_TIM_Base_Start_IT+0xdc>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d111      	bne.n	801005c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	f003 0307 	and.w	r3, r3, #7
 8010042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2b06      	cmp	r3, #6
 8010048:	d010      	beq.n	801006c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f042 0201 	orr.w	r2, r2, #1
 8010058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801005a:	e007      	b.n	801006c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f042 0201 	orr.w	r2, r2, #1
 801006a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3714      	adds	r7, #20
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
 801007a:	bf00      	nop
 801007c:	40010000 	.word	0x40010000
 8010080:	40000400 	.word	0x40000400
 8010084:	40000800 	.word	0x40000800
 8010088:	40000c00 	.word	0x40000c00
 801008c:	40010400 	.word	0x40010400
 8010090:	40014000 	.word	0x40014000
 8010094:	40001800 	.word	0x40001800

08010098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	e041      	b.n	801012e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d106      	bne.n	80100c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7fd fae0 	bl	800d684 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2202      	movs	r2, #2
 80100c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	3304      	adds	r3, #4
 80100d4:	4619      	mov	r1, r3
 80100d6:	4610      	mov	r0, r2
 80100d8:	f000 fae8 	bl	80106ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2201      	movs	r2, #1
 80100e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2201      	movs	r2, #1
 80100e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2201      	movs	r2, #1
 8010108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2201      	movs	r2, #1
 8010110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2201      	movs	r2, #1
 8010118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010136:	b580      	push	{r7, lr}
 8010138:	b082      	sub	sp, #8
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	691b      	ldr	r3, [r3, #16]
 8010144:	f003 0302 	and.w	r3, r3, #2
 8010148:	2b02      	cmp	r3, #2
 801014a:	d122      	bne.n	8010192 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f003 0302 	and.w	r3, r3, #2
 8010156:	2b02      	cmp	r3, #2
 8010158:	d11b      	bne.n	8010192 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f06f 0202 	mvn.w	r2, #2
 8010162:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2201      	movs	r2, #1
 8010168:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	699b      	ldr	r3, [r3, #24]
 8010170:	f003 0303 	and.w	r3, r3, #3
 8010174:	2b00      	cmp	r3, #0
 8010176:	d003      	beq.n	8010180 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 fa78 	bl	801066e <HAL_TIM_IC_CaptureCallback>
 801017e:	e005      	b.n	801018c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 fa6a 	bl	801065a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f000 fa7b 	bl	8010682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	691b      	ldr	r3, [r3, #16]
 8010198:	f003 0304 	and.w	r3, r3, #4
 801019c:	2b04      	cmp	r3, #4
 801019e:	d122      	bne.n	80101e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	f003 0304 	and.w	r3, r3, #4
 80101aa:	2b04      	cmp	r3, #4
 80101ac:	d11b      	bne.n	80101e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f06f 0204 	mvn.w	r2, #4
 80101b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2202      	movs	r2, #2
 80101bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	699b      	ldr	r3, [r3, #24]
 80101c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d003      	beq.n	80101d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f000 fa4e 	bl	801066e <HAL_TIM_IC_CaptureCallback>
 80101d2:	e005      	b.n	80101e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 fa40 	bl	801065a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 fa51 	bl	8010682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	691b      	ldr	r3, [r3, #16]
 80101ec:	f003 0308 	and.w	r3, r3, #8
 80101f0:	2b08      	cmp	r3, #8
 80101f2:	d122      	bne.n	801023a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	f003 0308 	and.w	r3, r3, #8
 80101fe:	2b08      	cmp	r3, #8
 8010200:	d11b      	bne.n	801023a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f06f 0208 	mvn.w	r2, #8
 801020a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2204      	movs	r2, #4
 8010210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	69db      	ldr	r3, [r3, #28]
 8010218:	f003 0303 	and.w	r3, r3, #3
 801021c:	2b00      	cmp	r3, #0
 801021e:	d003      	beq.n	8010228 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 fa24 	bl	801066e <HAL_TIM_IC_CaptureCallback>
 8010226:	e005      	b.n	8010234 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fa16 	bl	801065a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f000 fa27 	bl	8010682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2200      	movs	r2, #0
 8010238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	691b      	ldr	r3, [r3, #16]
 8010240:	f003 0310 	and.w	r3, r3, #16
 8010244:	2b10      	cmp	r3, #16
 8010246:	d122      	bne.n	801028e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	f003 0310 	and.w	r3, r3, #16
 8010252:	2b10      	cmp	r3, #16
 8010254:	d11b      	bne.n	801028e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f06f 0210 	mvn.w	r2, #16
 801025e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2208      	movs	r2, #8
 8010264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	69db      	ldr	r3, [r3, #28]
 801026c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010270:	2b00      	cmp	r3, #0
 8010272:	d003      	beq.n	801027c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 f9fa 	bl	801066e <HAL_TIM_IC_CaptureCallback>
 801027a:	e005      	b.n	8010288 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 f9ec 	bl	801065a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f000 f9fd 	bl	8010682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	691b      	ldr	r3, [r3, #16]
 8010294:	f003 0301 	and.w	r3, r3, #1
 8010298:	2b01      	cmp	r3, #1
 801029a:	d10e      	bne.n	80102ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	f003 0301 	and.w	r3, r3, #1
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d107      	bne.n	80102ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f06f 0201 	mvn.w	r2, #1
 80102b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f7fd f8fb 	bl	800d4b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	691b      	ldr	r3, [r3, #16]
 80102c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102c4:	2b80      	cmp	r3, #128	@ 0x80
 80102c6:	d10e      	bne.n	80102e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102d2:	2b80      	cmp	r3, #128	@ 0x80
 80102d4:	d107      	bne.n	80102e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80102de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f000 fda5 	bl	8010e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102f0:	2b40      	cmp	r3, #64	@ 0x40
 80102f2:	d10e      	bne.n	8010312 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102fe:	2b40      	cmp	r3, #64	@ 0x40
 8010300:	d107      	bne.n	8010312 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801030a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 f9c2 	bl	8010696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	f003 0320 	and.w	r3, r3, #32
 801031c:	2b20      	cmp	r3, #32
 801031e:	d10e      	bne.n	801033e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	f003 0320 	and.w	r3, r3, #32
 801032a:	2b20      	cmp	r3, #32
 801032c:	d107      	bne.n	801033e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f06f 0220 	mvn.w	r2, #32
 8010336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 fd6f 	bl	8010e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801033e:	bf00      	nop
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
	...

08010348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801035e:	2b01      	cmp	r3, #1
 8010360:	d101      	bne.n	8010366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010362:	2302      	movs	r3, #2
 8010364:	e0ae      	b.n	80104c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2201      	movs	r2, #1
 801036a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2b0c      	cmp	r3, #12
 8010372:	f200 809f 	bhi.w	80104b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8010376:	a201      	add	r2, pc, #4	@ (adr r2, 801037c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801037c:	080103b1 	.word	0x080103b1
 8010380:	080104b5 	.word	0x080104b5
 8010384:	080104b5 	.word	0x080104b5
 8010388:	080104b5 	.word	0x080104b5
 801038c:	080103f1 	.word	0x080103f1
 8010390:	080104b5 	.word	0x080104b5
 8010394:	080104b5 	.word	0x080104b5
 8010398:	080104b5 	.word	0x080104b5
 801039c:	08010433 	.word	0x08010433
 80103a0:	080104b5 	.word	0x080104b5
 80103a4:	080104b5 	.word	0x080104b5
 80103a8:	080104b5 	.word	0x080104b5
 80103ac:	08010473 	.word	0x08010473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68b9      	ldr	r1, [r7, #8]
 80103b6:	4618      	mov	r0, r3
 80103b8:	f000 fa18 	bl	80107ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	699a      	ldr	r2, [r3, #24]
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f042 0208 	orr.w	r2, r2, #8
 80103ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	699a      	ldr	r2, [r3, #24]
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f022 0204 	bic.w	r2, r2, #4
 80103da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	6999      	ldr	r1, [r3, #24]
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	691a      	ldr	r2, [r3, #16]
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	430a      	orrs	r2, r1
 80103ec:	619a      	str	r2, [r3, #24]
      break;
 80103ee:	e064      	b.n	80104ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	68b9      	ldr	r1, [r7, #8]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f000 fa68 	bl	80108cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	699a      	ldr	r2, [r3, #24]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801040a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	699a      	ldr	r2, [r3, #24]
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801041a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6999      	ldr	r1, [r3, #24]
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	691b      	ldr	r3, [r3, #16]
 8010426:	021a      	lsls	r2, r3, #8
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	430a      	orrs	r2, r1
 801042e:	619a      	str	r2, [r3, #24]
      break;
 8010430:	e043      	b.n	80104ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	68b9      	ldr	r1, [r7, #8]
 8010438:	4618      	mov	r0, r3
 801043a:	f000 fabd 	bl	80109b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	69da      	ldr	r2, [r3, #28]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f042 0208 	orr.w	r2, r2, #8
 801044c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	69da      	ldr	r2, [r3, #28]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f022 0204 	bic.w	r2, r2, #4
 801045c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	69d9      	ldr	r1, [r3, #28]
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	691a      	ldr	r2, [r3, #16]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	430a      	orrs	r2, r1
 801046e:	61da      	str	r2, [r3, #28]
      break;
 8010470:	e023      	b.n	80104ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	68b9      	ldr	r1, [r7, #8]
 8010478:	4618      	mov	r0, r3
 801047a:	f000 fb11 	bl	8010aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	69da      	ldr	r2, [r3, #28]
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801048c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	69da      	ldr	r2, [r3, #28]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801049c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	69d9      	ldr	r1, [r3, #28]
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	691b      	ldr	r3, [r3, #16]
 80104a8:	021a      	lsls	r2, r3, #8
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	430a      	orrs	r2, r1
 80104b0:	61da      	str	r2, [r3, #28]
      break;
 80104b2:	e002      	b.n	80104ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80104b4:	2301      	movs	r3, #1
 80104b6:	75fb      	strb	r3, [r7, #23]
      break;
 80104b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2200      	movs	r2, #0
 80104be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80104c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3718      	adds	r7, #24
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d101      	bne.n	80104e8 <HAL_TIM_ConfigClockSource+0x1c>
 80104e4:	2302      	movs	r3, #2
 80104e6:	e0b4      	b.n	8010652 <HAL_TIM_ConfigClockSource+0x186>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2202      	movs	r2, #2
 80104f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801050e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	68ba      	ldr	r2, [r7, #8]
 8010516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010520:	d03e      	beq.n	80105a0 <HAL_TIM_ConfigClockSource+0xd4>
 8010522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010526:	f200 8087 	bhi.w	8010638 <HAL_TIM_ConfigClockSource+0x16c>
 801052a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801052e:	f000 8086 	beq.w	801063e <HAL_TIM_ConfigClockSource+0x172>
 8010532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010536:	d87f      	bhi.n	8010638 <HAL_TIM_ConfigClockSource+0x16c>
 8010538:	2b70      	cmp	r3, #112	@ 0x70
 801053a:	d01a      	beq.n	8010572 <HAL_TIM_ConfigClockSource+0xa6>
 801053c:	2b70      	cmp	r3, #112	@ 0x70
 801053e:	d87b      	bhi.n	8010638 <HAL_TIM_ConfigClockSource+0x16c>
 8010540:	2b60      	cmp	r3, #96	@ 0x60
 8010542:	d050      	beq.n	80105e6 <HAL_TIM_ConfigClockSource+0x11a>
 8010544:	2b60      	cmp	r3, #96	@ 0x60
 8010546:	d877      	bhi.n	8010638 <HAL_TIM_ConfigClockSource+0x16c>
 8010548:	2b50      	cmp	r3, #80	@ 0x50
 801054a:	d03c      	beq.n	80105c6 <HAL_TIM_ConfigClockSource+0xfa>
 801054c:	2b50      	cmp	r3, #80	@ 0x50
 801054e:	d873      	bhi.n	8010638 <HAL_TIM_ConfigClockSource+0x16c>
 8010550:	2b40      	cmp	r3, #64	@ 0x40
 8010552:	d058      	beq.n	8010606 <HAL_TIM_ConfigClockSource+0x13a>
 8010554:	2b40      	cmp	r3, #64	@ 0x40
 8010556:	d86f      	bhi.n	8010638 <HAL_TIM_ConfigClockSource+0x16c>
 8010558:	2b30      	cmp	r3, #48	@ 0x30
 801055a:	d064      	beq.n	8010626 <HAL_TIM_ConfigClockSource+0x15a>
 801055c:	2b30      	cmp	r3, #48	@ 0x30
 801055e:	d86b      	bhi.n	8010638 <HAL_TIM_ConfigClockSource+0x16c>
 8010560:	2b20      	cmp	r3, #32
 8010562:	d060      	beq.n	8010626 <HAL_TIM_ConfigClockSource+0x15a>
 8010564:	2b20      	cmp	r3, #32
 8010566:	d867      	bhi.n	8010638 <HAL_TIM_ConfigClockSource+0x16c>
 8010568:	2b00      	cmp	r3, #0
 801056a:	d05c      	beq.n	8010626 <HAL_TIM_ConfigClockSource+0x15a>
 801056c:	2b10      	cmp	r3, #16
 801056e:	d05a      	beq.n	8010626 <HAL_TIM_ConfigClockSource+0x15a>
 8010570:	e062      	b.n	8010638 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6818      	ldr	r0, [r3, #0]
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	6899      	ldr	r1, [r3, #8]
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	685a      	ldr	r2, [r3, #4]
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	f000 fb5d 	bl	8010c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	68ba      	ldr	r2, [r7, #8]
 801059c:	609a      	str	r2, [r3, #8]
      break;
 801059e:	e04f      	b.n	8010640 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6818      	ldr	r0, [r3, #0]
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	6899      	ldr	r1, [r3, #8]
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	685a      	ldr	r2, [r3, #4]
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	f000 fb46 	bl	8010c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	689a      	ldr	r2, [r3, #8]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80105c2:	609a      	str	r2, [r3, #8]
      break;
 80105c4:	e03c      	b.n	8010640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6818      	ldr	r0, [r3, #0]
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	6859      	ldr	r1, [r3, #4]
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	461a      	mov	r2, r3
 80105d4:	f000 faba 	bl	8010b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2150      	movs	r1, #80	@ 0x50
 80105de:	4618      	mov	r0, r3
 80105e0:	f000 fb13 	bl	8010c0a <TIM_ITRx_SetConfig>
      break;
 80105e4:	e02c      	b.n	8010640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6818      	ldr	r0, [r3, #0]
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	6859      	ldr	r1, [r3, #4]
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	461a      	mov	r2, r3
 80105f4:	f000 fad9 	bl	8010baa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2160      	movs	r1, #96	@ 0x60
 80105fe:	4618      	mov	r0, r3
 8010600:	f000 fb03 	bl	8010c0a <TIM_ITRx_SetConfig>
      break;
 8010604:	e01c      	b.n	8010640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6818      	ldr	r0, [r3, #0]
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	6859      	ldr	r1, [r3, #4]
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	461a      	mov	r2, r3
 8010614:	f000 fa9a 	bl	8010b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2140      	movs	r1, #64	@ 0x40
 801061e:	4618      	mov	r0, r3
 8010620:	f000 faf3 	bl	8010c0a <TIM_ITRx_SetConfig>
      break;
 8010624:	e00c      	b.n	8010640 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4619      	mov	r1, r3
 8010630:	4610      	mov	r0, r2
 8010632:	f000 faea 	bl	8010c0a <TIM_ITRx_SetConfig>
      break;
 8010636:	e003      	b.n	8010640 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010638:	2301      	movs	r3, #1
 801063a:	73fb      	strb	r3, [r7, #15]
      break;
 801063c:	e000      	b.n	8010640 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801063e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2201      	movs	r2, #1
 8010644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010650:	7bfb      	ldrb	r3, [r7, #15]
}
 8010652:	4618      	mov	r0, r3
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801065a:	b480      	push	{r7}
 801065c:	b083      	sub	sp, #12
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010662:	bf00      	nop
 8010664:	370c      	adds	r7, #12
 8010666:	46bd      	mov	sp, r7
 8010668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066c:	4770      	bx	lr

0801066e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801066e:	b480      	push	{r7}
 8010670:	b083      	sub	sp, #12
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010676:	bf00      	nop
 8010678:	370c      	adds	r7, #12
 801067a:	46bd      	mov	sp, r7
 801067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010680:	4770      	bx	lr

08010682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010682:	b480      	push	{r7}
 8010684:	b083      	sub	sp, #12
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801068a:	bf00      	nop
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr

08010696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010696:	b480      	push	{r7}
 8010698:	b083      	sub	sp, #12
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801069e:	bf00      	nop
 80106a0:	370c      	adds	r7, #12
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr
	...

080106ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4a40      	ldr	r2, [pc, #256]	@ (80107c0 <TIM_Base_SetConfig+0x114>)
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d013      	beq.n	80106ec <TIM_Base_SetConfig+0x40>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80106ca:	d00f      	beq.n	80106ec <TIM_Base_SetConfig+0x40>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4a3d      	ldr	r2, [pc, #244]	@ (80107c4 <TIM_Base_SetConfig+0x118>)
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d00b      	beq.n	80106ec <TIM_Base_SetConfig+0x40>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	4a3c      	ldr	r2, [pc, #240]	@ (80107c8 <TIM_Base_SetConfig+0x11c>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d007      	beq.n	80106ec <TIM_Base_SetConfig+0x40>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4a3b      	ldr	r2, [pc, #236]	@ (80107cc <TIM_Base_SetConfig+0x120>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d003      	beq.n	80106ec <TIM_Base_SetConfig+0x40>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	4a3a      	ldr	r2, [pc, #232]	@ (80107d0 <TIM_Base_SetConfig+0x124>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d108      	bne.n	80106fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	4a2f      	ldr	r2, [pc, #188]	@ (80107c0 <TIM_Base_SetConfig+0x114>)
 8010702:	4293      	cmp	r3, r2
 8010704:	d02b      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801070c:	d027      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4a2c      	ldr	r2, [pc, #176]	@ (80107c4 <TIM_Base_SetConfig+0x118>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d023      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4a2b      	ldr	r2, [pc, #172]	@ (80107c8 <TIM_Base_SetConfig+0x11c>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d01f      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4a2a      	ldr	r2, [pc, #168]	@ (80107cc <TIM_Base_SetConfig+0x120>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d01b      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	4a29      	ldr	r2, [pc, #164]	@ (80107d0 <TIM_Base_SetConfig+0x124>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d017      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4a28      	ldr	r2, [pc, #160]	@ (80107d4 <TIM_Base_SetConfig+0x128>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d013      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4a27      	ldr	r2, [pc, #156]	@ (80107d8 <TIM_Base_SetConfig+0x12c>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d00f      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4a26      	ldr	r2, [pc, #152]	@ (80107dc <TIM_Base_SetConfig+0x130>)
 8010742:	4293      	cmp	r3, r2
 8010744:	d00b      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	4a25      	ldr	r2, [pc, #148]	@ (80107e0 <TIM_Base_SetConfig+0x134>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d007      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4a24      	ldr	r2, [pc, #144]	@ (80107e4 <TIM_Base_SetConfig+0x138>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d003      	beq.n	801075e <TIM_Base_SetConfig+0xb2>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4a23      	ldr	r2, [pc, #140]	@ (80107e8 <TIM_Base_SetConfig+0x13c>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d108      	bne.n	8010770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	4313      	orrs	r3, r2
 801076e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	695b      	ldr	r3, [r3, #20]
 801077a:	4313      	orrs	r3, r2
 801077c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	689a      	ldr	r2, [r3, #8]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	681a      	ldr	r2, [r3, #0]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a0a      	ldr	r2, [pc, #40]	@ (80107c0 <TIM_Base_SetConfig+0x114>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d003      	beq.n	80107a4 <TIM_Base_SetConfig+0xf8>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4a0c      	ldr	r2, [pc, #48]	@ (80107d0 <TIM_Base_SetConfig+0x124>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d103      	bne.n	80107ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	691a      	ldr	r2, [r3, #16]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2201      	movs	r2, #1
 80107b0:	615a      	str	r2, [r3, #20]
}
 80107b2:	bf00      	nop
 80107b4:	3714      	adds	r7, #20
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	40010000 	.word	0x40010000
 80107c4:	40000400 	.word	0x40000400
 80107c8:	40000800 	.word	0x40000800
 80107cc:	40000c00 	.word	0x40000c00
 80107d0:	40010400 	.word	0x40010400
 80107d4:	40014000 	.word	0x40014000
 80107d8:	40014400 	.word	0x40014400
 80107dc:	40014800 	.word	0x40014800
 80107e0:	40001800 	.word	0x40001800
 80107e4:	40001c00 	.word	0x40001c00
 80107e8:	40002000 	.word	0x40002000

080107ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b087      	sub	sp, #28
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6a1b      	ldr	r3, [r3, #32]
 80107fa:	f023 0201 	bic.w	r2, r3, #1
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6a1b      	ldr	r3, [r3, #32]
 8010806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	699b      	ldr	r3, [r3, #24]
 8010812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801081a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f023 0303 	bic.w	r3, r3, #3
 8010822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	4313      	orrs	r3, r2
 801082c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	f023 0302 	bic.w	r3, r3, #2
 8010834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	697a      	ldr	r2, [r7, #20]
 801083c:	4313      	orrs	r3, r2
 801083e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	4a20      	ldr	r2, [pc, #128]	@ (80108c4 <TIM_OC1_SetConfig+0xd8>)
 8010844:	4293      	cmp	r3, r2
 8010846:	d003      	beq.n	8010850 <TIM_OC1_SetConfig+0x64>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	4a1f      	ldr	r2, [pc, #124]	@ (80108c8 <TIM_OC1_SetConfig+0xdc>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d10c      	bne.n	801086a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	f023 0308 	bic.w	r3, r3, #8
 8010856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	697a      	ldr	r2, [r7, #20]
 801085e:	4313      	orrs	r3, r2
 8010860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	f023 0304 	bic.w	r3, r3, #4
 8010868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4a15      	ldr	r2, [pc, #84]	@ (80108c4 <TIM_OC1_SetConfig+0xd8>)
 801086e:	4293      	cmp	r3, r2
 8010870:	d003      	beq.n	801087a <TIM_OC1_SetConfig+0x8e>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4a14      	ldr	r2, [pc, #80]	@ (80108c8 <TIM_OC1_SetConfig+0xdc>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d111      	bne.n	801089e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	695b      	ldr	r3, [r3, #20]
 801088e:	693a      	ldr	r2, [r7, #16]
 8010890:	4313      	orrs	r3, r2
 8010892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	699b      	ldr	r3, [r3, #24]
 8010898:	693a      	ldr	r2, [r7, #16]
 801089a:	4313      	orrs	r3, r2
 801089c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	693a      	ldr	r2, [r7, #16]
 80108a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	697a      	ldr	r2, [r7, #20]
 80108b6:	621a      	str	r2, [r3, #32]
}
 80108b8:	bf00      	nop
 80108ba:	371c      	adds	r7, #28
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr
 80108c4:	40010000 	.word	0x40010000
 80108c8:	40010400 	.word	0x40010400

080108cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b087      	sub	sp, #28
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6a1b      	ldr	r3, [r3, #32]
 80108da:	f023 0210 	bic.w	r2, r3, #16
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6a1b      	ldr	r3, [r3, #32]
 80108e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	699b      	ldr	r3, [r3, #24]
 80108f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	021b      	lsls	r3, r3, #8
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	4313      	orrs	r3, r2
 801090e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	f023 0320 	bic.w	r3, r3, #32
 8010916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	011b      	lsls	r3, r3, #4
 801091e:	697a      	ldr	r2, [r7, #20]
 8010920:	4313      	orrs	r3, r2
 8010922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	4a22      	ldr	r2, [pc, #136]	@ (80109b0 <TIM_OC2_SetConfig+0xe4>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d003      	beq.n	8010934 <TIM_OC2_SetConfig+0x68>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	4a21      	ldr	r2, [pc, #132]	@ (80109b4 <TIM_OC2_SetConfig+0xe8>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d10d      	bne.n	8010950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801093a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	68db      	ldr	r3, [r3, #12]
 8010940:	011b      	lsls	r3, r3, #4
 8010942:	697a      	ldr	r2, [r7, #20]
 8010944:	4313      	orrs	r3, r2
 8010946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801094e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	4a17      	ldr	r2, [pc, #92]	@ (80109b0 <TIM_OC2_SetConfig+0xe4>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d003      	beq.n	8010960 <TIM_OC2_SetConfig+0x94>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4a16      	ldr	r2, [pc, #88]	@ (80109b4 <TIM_OC2_SetConfig+0xe8>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d113      	bne.n	8010988 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801096e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	695b      	ldr	r3, [r3, #20]
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	693a      	ldr	r2, [r7, #16]
 8010978:	4313      	orrs	r3, r2
 801097a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	699b      	ldr	r3, [r3, #24]
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	693a      	ldr	r2, [r7, #16]
 8010984:	4313      	orrs	r3, r2
 8010986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	693a      	ldr	r2, [r7, #16]
 801098c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	685a      	ldr	r2, [r3, #4]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	697a      	ldr	r2, [r7, #20]
 80109a0:	621a      	str	r2, [r3, #32]
}
 80109a2:	bf00      	nop
 80109a4:	371c      	adds	r7, #28
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	40010000 	.word	0x40010000
 80109b4:	40010400 	.word	0x40010400

080109b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b087      	sub	sp, #28
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6a1b      	ldr	r3, [r3, #32]
 80109c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	69db      	ldr	r3, [r3, #28]
 80109de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f023 0303 	bic.w	r3, r3, #3
 80109ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	68fa      	ldr	r2, [r7, #12]
 80109f6:	4313      	orrs	r3, r2
 80109f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	689b      	ldr	r3, [r3, #8]
 8010a06:	021b      	lsls	r3, r3, #8
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4a21      	ldr	r2, [pc, #132]	@ (8010a98 <TIM_OC3_SetConfig+0xe0>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d003      	beq.n	8010a1e <TIM_OC3_SetConfig+0x66>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4a20      	ldr	r2, [pc, #128]	@ (8010a9c <TIM_OC3_SetConfig+0xe4>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d10d      	bne.n	8010a3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	021b      	lsls	r3, r3, #8
 8010a2c:	697a      	ldr	r2, [r7, #20]
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4a16      	ldr	r2, [pc, #88]	@ (8010a98 <TIM_OC3_SetConfig+0xe0>)
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	d003      	beq.n	8010a4a <TIM_OC3_SetConfig+0x92>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4a15      	ldr	r2, [pc, #84]	@ (8010a9c <TIM_OC3_SetConfig+0xe4>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d113      	bne.n	8010a72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	695b      	ldr	r3, [r3, #20]
 8010a5e:	011b      	lsls	r3, r3, #4
 8010a60:	693a      	ldr	r2, [r7, #16]
 8010a62:	4313      	orrs	r3, r2
 8010a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	699b      	ldr	r3, [r3, #24]
 8010a6a:	011b      	lsls	r3, r3, #4
 8010a6c:	693a      	ldr	r2, [r7, #16]
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	693a      	ldr	r2, [r7, #16]
 8010a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	697a      	ldr	r2, [r7, #20]
 8010a8a:	621a      	str	r2, [r3, #32]
}
 8010a8c:	bf00      	nop
 8010a8e:	371c      	adds	r7, #28
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr
 8010a98:	40010000 	.word	0x40010000
 8010a9c:	40010400 	.word	0x40010400

08010aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b087      	sub	sp, #28
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6a1b      	ldr	r3, [r3, #32]
 8010aae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6a1b      	ldr	r3, [r3, #32]
 8010aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	69db      	ldr	r3, [r3, #28]
 8010ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	021b      	lsls	r3, r3, #8
 8010ade:	68fa      	ldr	r2, [r7, #12]
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	031b      	lsls	r3, r3, #12
 8010af2:	693a      	ldr	r2, [r7, #16]
 8010af4:	4313      	orrs	r3, r2
 8010af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	4a12      	ldr	r2, [pc, #72]	@ (8010b44 <TIM_OC4_SetConfig+0xa4>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d003      	beq.n	8010b08 <TIM_OC4_SetConfig+0x68>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4a11      	ldr	r2, [pc, #68]	@ (8010b48 <TIM_OC4_SetConfig+0xa8>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d109      	bne.n	8010b1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	695b      	ldr	r3, [r3, #20]
 8010b14:	019b      	lsls	r3, r3, #6
 8010b16:	697a      	ldr	r2, [r7, #20]
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	697a      	ldr	r2, [r7, #20]
 8010b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	685a      	ldr	r2, [r3, #4]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	693a      	ldr	r2, [r7, #16]
 8010b34:	621a      	str	r2, [r3, #32]
}
 8010b36:	bf00      	nop
 8010b38:	371c      	adds	r7, #28
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop
 8010b44:	40010000 	.word	0x40010000
 8010b48:	40010400 	.word	0x40010400

08010b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b087      	sub	sp, #28
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6a1b      	ldr	r3, [r3, #32]
 8010b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	6a1b      	ldr	r3, [r3, #32]
 8010b62:	f023 0201 	bic.w	r2, r3, #1
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	699b      	ldr	r3, [r3, #24]
 8010b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	011b      	lsls	r3, r3, #4
 8010b7c:	693a      	ldr	r2, [r7, #16]
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	f023 030a 	bic.w	r3, r3, #10
 8010b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010b8a:	697a      	ldr	r2, [r7, #20]
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	4313      	orrs	r3, r2
 8010b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	693a      	ldr	r2, [r7, #16]
 8010b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	697a      	ldr	r2, [r7, #20]
 8010b9c:	621a      	str	r2, [r3, #32]
}
 8010b9e:	bf00      	nop
 8010ba0:	371c      	adds	r7, #28
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010baa:	b480      	push	{r7}
 8010bac:	b087      	sub	sp, #28
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	60f8      	str	r0, [r7, #12]
 8010bb2:	60b9      	str	r1, [r7, #8]
 8010bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	6a1b      	ldr	r3, [r3, #32]
 8010bba:	f023 0210 	bic.w	r2, r3, #16
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	6a1b      	ldr	r3, [r3, #32]
 8010bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	031b      	lsls	r3, r3, #12
 8010bda:	697a      	ldr	r2, [r7, #20]
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010be6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	011b      	lsls	r3, r3, #4
 8010bec:	693a      	ldr	r2, [r7, #16]
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	693a      	ldr	r2, [r7, #16]
 8010bfc:	621a      	str	r2, [r3, #32]
}
 8010bfe:	bf00      	nop
 8010c00:	371c      	adds	r7, #28
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010c0a:	b480      	push	{r7}
 8010c0c:	b085      	sub	sp, #20
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
 8010c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	689b      	ldr	r3, [r3, #8]
 8010c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010c22:	683a      	ldr	r2, [r7, #0]
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	4313      	orrs	r3, r2
 8010c28:	f043 0307 	orr.w	r3, r3, #7
 8010c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	68fa      	ldr	r2, [r7, #12]
 8010c32:	609a      	str	r2, [r3, #8]
}
 8010c34:	bf00      	nop
 8010c36:	3714      	adds	r7, #20
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b087      	sub	sp, #28
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	689b      	ldr	r3, [r3, #8]
 8010c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	021a      	lsls	r2, r3, #8
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	431a      	orrs	r2, r3
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	4313      	orrs	r3, r2
 8010c68:	697a      	ldr	r2, [r7, #20]
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	697a      	ldr	r2, [r7, #20]
 8010c72:	609a      	str	r2, [r3, #8]
}
 8010c74:	bf00      	nop
 8010c76:	371c      	adds	r7, #28
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr

08010c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010c80:	b480      	push	{r7}
 8010c82:	b085      	sub	sp, #20
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d101      	bne.n	8010c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010c94:	2302      	movs	r3, #2
 8010c96:	e05a      	b.n	8010d4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2202      	movs	r2, #2
 8010ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	68fa      	ldr	r2, [r7, #12]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	68fa      	ldr	r2, [r7, #12]
 8010cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4a21      	ldr	r2, [pc, #132]	@ (8010d5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d022      	beq.n	8010d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ce4:	d01d      	beq.n	8010d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a1d      	ldr	r2, [pc, #116]	@ (8010d60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d018      	beq.n	8010d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8010d64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d013      	beq.n	8010d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8010d68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d00e      	beq.n	8010d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4a18      	ldr	r2, [pc, #96]	@ (8010d6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d009      	beq.n	8010d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4a17      	ldr	r2, [pc, #92]	@ (8010d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d004      	beq.n	8010d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a15      	ldr	r2, [pc, #84]	@ (8010d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d10c      	bne.n	8010d3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	4313      	orrs	r3, r2
 8010d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	68ba      	ldr	r2, [r7, #8]
 8010d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2201      	movs	r2, #1
 8010d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010d4c:	2300      	movs	r3, #0
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3714      	adds	r7, #20
 8010d52:	46bd      	mov	sp, r7
 8010d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop
 8010d5c:	40010000 	.word	0x40010000
 8010d60:	40000400 	.word	0x40000400
 8010d64:	40000800 	.word	0x40000800
 8010d68:	40000c00 	.word	0x40000c00
 8010d6c:	40010400 	.word	0x40010400
 8010d70:	40014000 	.word	0x40014000
 8010d74:	40001800 	.word	0x40001800

08010d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b085      	sub	sp, #20
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010d82:	2300      	movs	r3, #0
 8010d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d101      	bne.n	8010d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010d90:	2302      	movs	r3, #2
 8010d92:	e03d      	b.n	8010e10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2201      	movs	r2, #1
 8010d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	4313      	orrs	r3, r2
 8010da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	689b      	ldr	r3, [r3, #8]
 8010db4:	4313      	orrs	r3, r2
 8010db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	4313      	orrs	r3, r2
 8010de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	695b      	ldr	r3, [r3, #20]
 8010dec:	4313      	orrs	r3, r2
 8010dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	69db      	ldr	r3, [r3, #28]
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	68fa      	ldr	r2, [r7, #12]
 8010e04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b083      	sub	sp, #12
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e24:	bf00      	nop
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e38:	bf00      	nop
 8010e3a:	370c      	adds	r7, #12
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d101      	bne.n	8010e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e52:	2301      	movs	r3, #1
 8010e54:	e03f      	b.n	8010ed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d106      	bne.n	8010e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f7fc fd4a 	bl	800d904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2224      	movs	r2, #36	@ 0x24
 8010e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	68da      	ldr	r2, [r3, #12]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 fddf 	bl	8011a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	691a      	ldr	r2, [r3, #16]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	695a      	ldr	r2, [r3, #20]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	68da      	ldr	r2, [r3, #12]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2220      	movs	r2, #32
 8010ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2220      	movs	r2, #32
 8010ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8010ed4:	2300      	movs	r3, #0
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3708      	adds	r7, #8
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b08a      	sub	sp, #40	@ 0x28
 8010ee2:	af02      	add	r7, sp, #8
 8010ee4:	60f8      	str	r0, [r7, #12]
 8010ee6:	60b9      	str	r1, [r7, #8]
 8010ee8:	603b      	str	r3, [r7, #0]
 8010eea:	4613      	mov	r3, r2
 8010eec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	2b20      	cmp	r3, #32
 8010efc:	d17c      	bne.n	8010ff8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <HAL_UART_Transmit+0x2c>
 8010f04:	88fb      	ldrh	r3, [r7, #6]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d101      	bne.n	8010f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e075      	b.n	8010ffa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d101      	bne.n	8010f1c <HAL_UART_Transmit+0x3e>
 8010f18:	2302      	movs	r3, #2
 8010f1a:	e06e      	b.n	8010ffa <HAL_UART_Transmit+0x11c>
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2200      	movs	r2, #0
 8010f28:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2221      	movs	r2, #33	@ 0x21
 8010f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010f32:	f7fc ff65 	bl	800de00 <HAL_GetTick>
 8010f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	88fa      	ldrh	r2, [r7, #6]
 8010f3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	88fa      	ldrh	r2, [r7, #6]
 8010f42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	689b      	ldr	r3, [r3, #8]
 8010f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f4c:	d108      	bne.n	8010f60 <HAL_UART_Transmit+0x82>
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	691b      	ldr	r3, [r3, #16]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d104      	bne.n	8010f60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8010f56:	2300      	movs	r3, #0
 8010f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	61bb      	str	r3, [r7, #24]
 8010f5e:	e003      	b.n	8010f68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010f64:	2300      	movs	r3, #0
 8010f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8010f70:	e02a      	b.n	8010fc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	9300      	str	r3, [sp, #0]
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	2180      	movs	r1, #128	@ 0x80
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f000 fb1f 	bl	80115c0 <UART_WaitOnFlagUntilTimeout>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	e036      	b.n	8010ffa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d10b      	bne.n	8010faa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	881b      	ldrh	r3, [r3, #0]
 8010f96:	461a      	mov	r2, r3
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	3302      	adds	r3, #2
 8010fa6:	61bb      	str	r3, [r7, #24]
 8010fa8:	e007      	b.n	8010fba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	781a      	ldrb	r2, [r3, #0]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	3b01      	subs	r3, #1
 8010fc2:	b29a      	uxth	r2, r3
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d1cf      	bne.n	8010f72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	2140      	movs	r1, #64	@ 0x40
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f000 faef 	bl	80115c0 <UART_WaitOnFlagUntilTimeout>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010fe8:	2303      	movs	r3, #3
 8010fea:	e006      	b.n	8010ffa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2220      	movs	r2, #32
 8010ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	e000      	b.n	8010ffa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010ff8:	2302      	movs	r3, #2
  }
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3720      	adds	r7, #32
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}

08011002 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b084      	sub	sp, #16
 8011006:	af00      	add	r7, sp, #0
 8011008:	60f8      	str	r0, [r7, #12]
 801100a:	60b9      	str	r1, [r7, #8]
 801100c:	4613      	mov	r3, r2
 801100e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011016:	b2db      	uxtb	r3, r3
 8011018:	2b20      	cmp	r3, #32
 801101a:	d11d      	bne.n	8011058 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d002      	beq.n	8011028 <HAL_UART_Receive_IT+0x26>
 8011022:	88fb      	ldrh	r3, [r7, #6]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d101      	bne.n	801102c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8011028:	2301      	movs	r3, #1
 801102a:	e016      	b.n	801105a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011032:	2b01      	cmp	r3, #1
 8011034:	d101      	bne.n	801103a <HAL_UART_Receive_IT+0x38>
 8011036:	2302      	movs	r3, #2
 8011038:	e00f      	b.n	801105a <HAL_UART_Receive_IT+0x58>
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2201      	movs	r2, #1
 801103e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2200      	movs	r2, #0
 8011046:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011048:	88fb      	ldrh	r3, [r7, #6]
 801104a:	461a      	mov	r2, r3
 801104c:	68b9      	ldr	r1, [r7, #8]
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f000 fb24 	bl	801169c <UART_Start_Receive_IT>
 8011054:	4603      	mov	r3, r0
 8011056:	e000      	b.n	801105a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8011058:	2302      	movs	r3, #2
  }
}
 801105a:	4618      	mov	r0, r3
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
	...

08011064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b0ba      	sub	sp, #232	@ 0xe8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	695b      	ldr	r3, [r3, #20]
 8011086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801108a:	2300      	movs	r3, #0
 801108c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8011090:	2300      	movs	r3, #0
 8011092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801109a:	f003 030f 	and.w	r3, r3, #15
 801109e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80110a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d10f      	bne.n	80110ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80110aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110ae:	f003 0320 	and.w	r3, r3, #32
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d009      	beq.n	80110ca <HAL_UART_IRQHandler+0x66>
 80110b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110ba:	f003 0320 	and.w	r3, r3, #32
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d003      	beq.n	80110ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 fc07 	bl	80118d6 <UART_Receive_IT>
      return;
 80110c8:	e256      	b.n	8011578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80110ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f000 80de 	beq.w	8011290 <HAL_UART_IRQHandler+0x22c>
 80110d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110d8:	f003 0301 	and.w	r3, r3, #1
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d106      	bne.n	80110ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80110e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f000 80d1 	beq.w	8011290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80110ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110f2:	f003 0301 	and.w	r3, r3, #1
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d00b      	beq.n	8011112 <HAL_UART_IRQHandler+0xae>
 80110fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011102:	2b00      	cmp	r3, #0
 8011104:	d005      	beq.n	8011112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801110a:	f043 0201 	orr.w	r2, r3, #1
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011116:	f003 0304 	and.w	r3, r3, #4
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00b      	beq.n	8011136 <HAL_UART_IRQHandler+0xd2>
 801111e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011122:	f003 0301 	and.w	r3, r3, #1
 8011126:	2b00      	cmp	r3, #0
 8011128:	d005      	beq.n	8011136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801112e:	f043 0202 	orr.w	r2, r3, #2
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801113a:	f003 0302 	and.w	r3, r3, #2
 801113e:	2b00      	cmp	r3, #0
 8011140:	d00b      	beq.n	801115a <HAL_UART_IRQHandler+0xf6>
 8011142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011146:	f003 0301 	and.w	r3, r3, #1
 801114a:	2b00      	cmp	r3, #0
 801114c:	d005      	beq.n	801115a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011152:	f043 0204 	orr.w	r2, r3, #4
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801115a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801115e:	f003 0308 	and.w	r3, r3, #8
 8011162:	2b00      	cmp	r3, #0
 8011164:	d011      	beq.n	801118a <HAL_UART_IRQHandler+0x126>
 8011166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801116a:	f003 0320 	and.w	r3, r3, #32
 801116e:	2b00      	cmp	r3, #0
 8011170:	d105      	bne.n	801117e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011176:	f003 0301 	and.w	r3, r3, #1
 801117a:	2b00      	cmp	r3, #0
 801117c:	d005      	beq.n	801118a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011182:	f043 0208 	orr.w	r2, r3, #8
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 81ed 	beq.w	801156e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011198:	f003 0320 	and.w	r3, r3, #32
 801119c:	2b00      	cmp	r3, #0
 801119e:	d008      	beq.n	80111b2 <HAL_UART_IRQHandler+0x14e>
 80111a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111a4:	f003 0320 	and.w	r3, r3, #32
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d002      	beq.n	80111b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 fb92 	bl	80118d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	695b      	ldr	r3, [r3, #20]
 80111b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111bc:	2b40      	cmp	r3, #64	@ 0x40
 80111be:	bf0c      	ite	eq
 80111c0:	2301      	moveq	r3, #1
 80111c2:	2300      	movne	r3, #0
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111ce:	f003 0308 	and.w	r3, r3, #8
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d103      	bne.n	80111de <HAL_UART_IRQHandler+0x17a>
 80111d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d04f      	beq.n	801127e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 fa9a 	bl	8011718 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	695b      	ldr	r3, [r3, #20]
 80111ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111ee:	2b40      	cmp	r3, #64	@ 0x40
 80111f0:	d141      	bne.n	8011276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	3314      	adds	r3, #20
 80111f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011200:	e853 3f00 	ldrex	r3, [r3]
 8011204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011208:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801120c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	3314      	adds	r3, #20
 801121a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801121e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801122a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801122e:	e841 2300 	strex	r3, r2, [r1]
 8011232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8011236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d1d9      	bne.n	80111f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011242:	2b00      	cmp	r3, #0
 8011244:	d013      	beq.n	801126e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801124a:	4a7d      	ldr	r2, [pc, #500]	@ (8011440 <HAL_UART_IRQHandler+0x3dc>)
 801124c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011252:	4618      	mov	r0, r3
 8011254:	f7fc ff85 	bl	800e162 <HAL_DMA_Abort_IT>
 8011258:	4603      	mov	r3, r0
 801125a:	2b00      	cmp	r3, #0
 801125c:	d016      	beq.n	801128c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011268:	4610      	mov	r0, r2
 801126a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801126c:	e00e      	b.n	801128c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 f990 	bl	8011594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011274:	e00a      	b.n	801128c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 f98c 	bl	8011594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801127c:	e006      	b.n	801128c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f000 f988 	bl	8011594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2200      	movs	r2, #0
 8011288:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 801128a:	e170      	b.n	801156e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801128c:	bf00      	nop
    return;
 801128e:	e16e      	b.n	801156e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011294:	2b01      	cmp	r3, #1
 8011296:	f040 814a 	bne.w	801152e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801129a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801129e:	f003 0310 	and.w	r3, r3, #16
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	f000 8143 	beq.w	801152e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80112a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112ac:	f003 0310 	and.w	r3, r3, #16
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f000 813c 	beq.w	801152e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80112b6:	2300      	movs	r3, #0
 80112b8:	60bb      	str	r3, [r7, #8]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	60bb      	str	r3, [r7, #8]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	60bb      	str	r3, [r7, #8]
 80112ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	695b      	ldr	r3, [r3, #20]
 80112d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112d6:	2b40      	cmp	r3, #64	@ 0x40
 80112d8:	f040 80b4 	bne.w	8011444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80112e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	f000 8140 	beq.w	8011572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80112f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80112fa:	429a      	cmp	r2, r3
 80112fc:	f080 8139 	bcs.w	8011572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011306:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801130c:	69db      	ldr	r3, [r3, #28]
 801130e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011312:	f000 8088 	beq.w	8011426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	330c      	adds	r3, #12
 801131c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011324:	e853 3f00 	ldrex	r3, [r3]
 8011328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801132c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	330c      	adds	r3, #12
 801133e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011342:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801134a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801134e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011352:	e841 2300 	strex	r3, r2, [r1]
 8011356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801135a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801135e:	2b00      	cmp	r3, #0
 8011360:	d1d9      	bne.n	8011316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	3314      	adds	r3, #20
 8011368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801136a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801136c:	e853 3f00 	ldrex	r3, [r3]
 8011370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011374:	f023 0301 	bic.w	r3, r3, #1
 8011378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	3314      	adds	r3, #20
 8011382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801138a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801138c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801138e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011392:	e841 2300 	strex	r3, r2, [r1]
 8011396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801139a:	2b00      	cmp	r3, #0
 801139c:	d1e1      	bne.n	8011362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	3314      	adds	r3, #20
 80113a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80113a8:	e853 3f00 	ldrex	r3, [r3]
 80113ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80113ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	3314      	adds	r3, #20
 80113be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80113c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80113c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80113c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80113ca:	e841 2300 	strex	r3, r2, [r1]
 80113ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80113d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d1e3      	bne.n	801139e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2220      	movs	r2, #32
 80113da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2200      	movs	r2, #0
 80113e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	330c      	adds	r3, #12
 80113ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113ee:	e853 3f00 	ldrex	r3, [r3]
 80113f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80113f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113f6:	f023 0310 	bic.w	r3, r3, #16
 80113fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	330c      	adds	r3, #12
 8011404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8011408:	65ba      	str	r2, [r7, #88]	@ 0x58
 801140a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801140e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011410:	e841 2300 	strex	r3, r2, [r1]
 8011414:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011418:	2b00      	cmp	r3, #0
 801141a:	d1e3      	bne.n	80113e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011420:	4618      	mov	r0, r3
 8011422:	f7fc fe2e 	bl	800e082 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801142e:	b29b      	uxth	r3, r3
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	b29b      	uxth	r3, r3
 8011434:	4619      	mov	r1, r3
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f000 f8b6 	bl	80115a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801143c:	e099      	b.n	8011572 <HAL_UART_IRQHandler+0x50e>
 801143e:	bf00      	nop
 8011440:	080117df 	.word	0x080117df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801144c:	b29b      	uxth	r3, r3
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011458:	b29b      	uxth	r3, r3
 801145a:	2b00      	cmp	r3, #0
 801145c:	f000 808b 	beq.w	8011576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011464:	2b00      	cmp	r3, #0
 8011466:	f000 8086 	beq.w	8011576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	330c      	adds	r3, #12
 8011470:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011474:	e853 3f00 	ldrex	r3, [r3]
 8011478:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801147a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801147c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011480:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	330c      	adds	r3, #12
 801148a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801148e:	647a      	str	r2, [r7, #68]	@ 0x44
 8011490:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011492:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011494:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011496:	e841 2300 	strex	r3, r2, [r1]
 801149a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801149c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d1e3      	bne.n	801146a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	3314      	adds	r3, #20
 80114a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ac:	e853 3f00 	ldrex	r3, [r3]
 80114b0:	623b      	str	r3, [r7, #32]
   return(result);
 80114b2:	6a3b      	ldr	r3, [r7, #32]
 80114b4:	f023 0301 	bic.w	r3, r3, #1
 80114b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	3314      	adds	r3, #20
 80114c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80114c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80114c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80114cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114ce:	e841 2300 	strex	r3, r2, [r1]
 80114d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80114d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1e3      	bne.n	80114a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2220      	movs	r2, #32
 80114de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	330c      	adds	r3, #12
 80114ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	e853 3f00 	ldrex	r3, [r3]
 80114f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f023 0310 	bic.w	r3, r3, #16
 80114fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	330c      	adds	r3, #12
 8011508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801150c:	61fa      	str	r2, [r7, #28]
 801150e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011510:	69b9      	ldr	r1, [r7, #24]
 8011512:	69fa      	ldr	r2, [r7, #28]
 8011514:	e841 2300 	strex	r3, r2, [r1]
 8011518:	617b      	str	r3, [r7, #20]
   return(result);
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d1e3      	bne.n	80114e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011524:	4619      	mov	r1, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 f83e 	bl	80115a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801152c:	e023      	b.n	8011576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801152e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011536:	2b00      	cmp	r3, #0
 8011538:	d009      	beq.n	801154e <HAL_UART_IRQHandler+0x4ea>
 801153a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801153e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011542:	2b00      	cmp	r3, #0
 8011544:	d003      	beq.n	801154e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 f95d 	bl	8011806 <UART_Transmit_IT>
    return;
 801154c:	e014      	b.n	8011578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801154e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00e      	beq.n	8011578 <HAL_UART_IRQHandler+0x514>
 801155a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801155e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011562:	2b00      	cmp	r3, #0
 8011564:	d008      	beq.n	8011578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 f99d 	bl	80118a6 <UART_EndTransmit_IT>
    return;
 801156c:	e004      	b.n	8011578 <HAL_UART_IRQHandler+0x514>
    return;
 801156e:	bf00      	nop
 8011570:	e002      	b.n	8011578 <HAL_UART_IRQHandler+0x514>
      return;
 8011572:	bf00      	nop
 8011574:	e000      	b.n	8011578 <HAL_UART_IRQHandler+0x514>
      return;
 8011576:	bf00      	nop
  }
}
 8011578:	37e8      	adds	r7, #232	@ 0xe8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop

08011580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011588:	bf00      	nop
 801158a:	370c      	adds	r7, #12
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801159c:	bf00      	nop
 801159e:	370c      	adds	r7, #12
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	460b      	mov	r3, r1
 80115b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80115b4:	bf00      	nop
 80115b6:	370c      	adds	r7, #12
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr

080115c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b090      	sub	sp, #64	@ 0x40
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	603b      	str	r3, [r7, #0]
 80115cc:	4613      	mov	r3, r2
 80115ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115d0:	e050      	b.n	8011674 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80115d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115d8:	d04c      	beq.n	8011674 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80115da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d007      	beq.n	80115f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80115e0:	f7fc fc0e 	bl	800de00 <HAL_GetTick>
 80115e4:	4602      	mov	r2, r0
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	1ad3      	subs	r3, r2, r3
 80115ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d241      	bcs.n	8011674 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	330c      	adds	r3, #12
 80115f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115fa:	e853 3f00 	ldrex	r3, [r3]
 80115fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011602:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	330c      	adds	r3, #12
 801160e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011610:	637a      	str	r2, [r7, #52]	@ 0x34
 8011612:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011618:	e841 2300 	strex	r3, r2, [r1]
 801161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801161e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011620:	2b00      	cmp	r3, #0
 8011622:	d1e5      	bne.n	80115f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	3314      	adds	r3, #20
 801162a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	e853 3f00 	ldrex	r3, [r3]
 8011632:	613b      	str	r3, [r7, #16]
   return(result);
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	f023 0301 	bic.w	r3, r3, #1
 801163a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	3314      	adds	r3, #20
 8011642:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011644:	623a      	str	r2, [r7, #32]
 8011646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011648:	69f9      	ldr	r1, [r7, #28]
 801164a:	6a3a      	ldr	r2, [r7, #32]
 801164c:	e841 2300 	strex	r3, r2, [r1]
 8011650:	61bb      	str	r3, [r7, #24]
   return(result);
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d1e5      	bne.n	8011624 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2220      	movs	r2, #32
 801165c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2220      	movs	r2, #32
 8011664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2200      	movs	r2, #0
 801166c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8011670:	2303      	movs	r3, #3
 8011672:	e00f      	b.n	8011694 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	4013      	ands	r3, r2
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	429a      	cmp	r2, r3
 8011682:	bf0c      	ite	eq
 8011684:	2301      	moveq	r3, #1
 8011686:	2300      	movne	r3, #0
 8011688:	b2db      	uxtb	r3, r3
 801168a:	461a      	mov	r2, r3
 801168c:	79fb      	ldrb	r3, [r7, #7]
 801168e:	429a      	cmp	r2, r3
 8011690:	d09f      	beq.n	80115d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011692:	2300      	movs	r3, #0
}
 8011694:	4618      	mov	r0, r3
 8011696:	3740      	adds	r7, #64	@ 0x40
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	4613      	mov	r3, r2
 80116a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	88fa      	ldrh	r2, [r7, #6]
 80116b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	88fa      	ldrh	r2, [r7, #6]
 80116ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2200      	movs	r2, #0
 80116c0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2222      	movs	r2, #34	@ 0x22
 80116c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	691b      	ldr	r3, [r3, #16]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d007      	beq.n	80116ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	68da      	ldr	r2, [r3, #12]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80116e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	695a      	ldr	r2, [r3, #20]
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f042 0201 	orr.w	r2, r2, #1
 80116f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	68da      	ldr	r2, [r3, #12]
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f042 0220 	orr.w	r2, r2, #32
 8011708:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3714      	adds	r7, #20
 8011710:	46bd      	mov	sp, r7
 8011712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011716:	4770      	bx	lr

08011718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011718:	b480      	push	{r7}
 801171a:	b095      	sub	sp, #84	@ 0x54
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	330c      	adds	r3, #12
 8011726:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801172a:	e853 3f00 	ldrex	r3, [r3]
 801172e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	330c      	adds	r3, #12
 801173e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011740:	643a      	str	r2, [r7, #64]	@ 0x40
 8011742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011744:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011746:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011748:	e841 2300 	strex	r3, r2, [r1]
 801174c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801174e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011750:	2b00      	cmp	r3, #0
 8011752:	d1e5      	bne.n	8011720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	3314      	adds	r3, #20
 801175a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801175c:	6a3b      	ldr	r3, [r7, #32]
 801175e:	e853 3f00 	ldrex	r3, [r3]
 8011762:	61fb      	str	r3, [r7, #28]
   return(result);
 8011764:	69fb      	ldr	r3, [r7, #28]
 8011766:	f023 0301 	bic.w	r3, r3, #1
 801176a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	3314      	adds	r3, #20
 8011772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011776:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801177a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801177c:	e841 2300 	strex	r3, r2, [r1]
 8011780:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011784:	2b00      	cmp	r3, #0
 8011786:	d1e5      	bne.n	8011754 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801178c:	2b01      	cmp	r3, #1
 801178e:	d119      	bne.n	80117c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	330c      	adds	r3, #12
 8011796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	e853 3f00 	ldrex	r3, [r3]
 801179e:	60bb      	str	r3, [r7, #8]
   return(result);
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	f023 0310 	bic.w	r3, r3, #16
 80117a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	330c      	adds	r3, #12
 80117ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80117b0:	61ba      	str	r2, [r7, #24]
 80117b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b4:	6979      	ldr	r1, [r7, #20]
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	e841 2300 	strex	r3, r2, [r1]
 80117bc:	613b      	str	r3, [r7, #16]
   return(result);
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1e5      	bne.n	8011790 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2220      	movs	r2, #32
 80117c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80117d2:	bf00      	nop
 80117d4:	3754      	adds	r7, #84	@ 0x54
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr

080117de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80117de:	b580      	push	{r7, lr}
 80117e0:	b084      	sub	sp, #16
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2200      	movs	r2, #0
 80117f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2200      	movs	r2, #0
 80117f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	f7ff fecb 	bl	8011594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117fe:	bf00      	nop
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011806:	b480      	push	{r7}
 8011808:	b085      	sub	sp, #20
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011814:	b2db      	uxtb	r3, r3
 8011816:	2b21      	cmp	r3, #33	@ 0x21
 8011818:	d13e      	bne.n	8011898 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011822:	d114      	bne.n	801184e <UART_Transmit_IT+0x48>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d110      	bne.n	801184e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6a1b      	ldr	r3, [r3, #32]
 8011830:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	881b      	ldrh	r3, [r3, #0]
 8011836:	461a      	mov	r2, r3
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011840:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6a1b      	ldr	r3, [r3, #32]
 8011846:	1c9a      	adds	r2, r3, #2
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	621a      	str	r2, [r3, #32]
 801184c:	e008      	b.n	8011860 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6a1b      	ldr	r3, [r3, #32]
 8011852:	1c59      	adds	r1, r3, #1
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	6211      	str	r1, [r2, #32]
 8011858:	781a      	ldrb	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011864:	b29b      	uxth	r3, r3
 8011866:	3b01      	subs	r3, #1
 8011868:	b29b      	uxth	r3, r3
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	4619      	mov	r1, r3
 801186e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011870:	2b00      	cmp	r3, #0
 8011872:	d10f      	bne.n	8011894 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	68da      	ldr	r2, [r3, #12]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011882:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	68da      	ldr	r2, [r3, #12]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011892:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011894:	2300      	movs	r3, #0
 8011896:	e000      	b.n	801189a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011898:	2302      	movs	r3, #2
  }
}
 801189a:	4618      	mov	r0, r3
 801189c:	3714      	adds	r7, #20
 801189e:	46bd      	mov	sp, r7
 80118a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a4:	4770      	bx	lr

080118a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80118a6:	b580      	push	{r7, lr}
 80118a8:	b082      	sub	sp, #8
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	68da      	ldr	r2, [r3, #12]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80118bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2220      	movs	r2, #32
 80118c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f7ff fe5a 	bl	8011580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80118cc:	2300      	movs	r3, #0
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3708      	adds	r7, #8
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}

080118d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80118d6:	b580      	push	{r7, lr}
 80118d8:	b08c      	sub	sp, #48	@ 0x30
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80118e4:	b2db      	uxtb	r3, r3
 80118e6:	2b22      	cmp	r3, #34	@ 0x22
 80118e8:	f040 80ab 	bne.w	8011a42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	689b      	ldr	r3, [r3, #8]
 80118f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80118f4:	d117      	bne.n	8011926 <UART_Receive_IT+0x50>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	691b      	ldr	r3, [r3, #16]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d113      	bne.n	8011926 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80118fe:	2300      	movs	r3, #0
 8011900:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011906:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	b29b      	uxth	r3, r3
 8011910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011914:	b29a      	uxth	r2, r3
 8011916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011918:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801191e:	1c9a      	adds	r2, r3, #2
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	629a      	str	r2, [r3, #40]	@ 0x28
 8011924:	e026      	b.n	8011974 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 801192c:	2300      	movs	r3, #0
 801192e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011938:	d007      	beq.n	801194a <UART_Receive_IT+0x74>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d10a      	bne.n	8011958 <UART_Receive_IT+0x82>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	691b      	ldr	r3, [r3, #16]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d106      	bne.n	8011958 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	b2da      	uxtb	r2, r3
 8011952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011954:	701a      	strb	r2, [r3, #0]
 8011956:	e008      	b.n	801196a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	b2db      	uxtb	r3, r3
 8011960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011964:	b2da      	uxtb	r2, r3
 8011966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011968:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801196e:	1c5a      	adds	r2, r3, #1
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011978:	b29b      	uxth	r3, r3
 801197a:	3b01      	subs	r3, #1
 801197c:	b29b      	uxth	r3, r3
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	4619      	mov	r1, r3
 8011982:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011984:	2b00      	cmp	r3, #0
 8011986:	d15a      	bne.n	8011a3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	68da      	ldr	r2, [r3, #12]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f022 0220 	bic.w	r2, r2, #32
 8011996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	68da      	ldr	r2, [r3, #12]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80119a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	695a      	ldr	r2, [r3, #20]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f022 0201 	bic.w	r2, r2, #1
 80119b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2220      	movs	r2, #32
 80119bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d135      	bne.n	8011a34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2200      	movs	r2, #0
 80119cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	330c      	adds	r3, #12
 80119d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	e853 3f00 	ldrex	r3, [r3]
 80119dc:	613b      	str	r3, [r7, #16]
   return(result);
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	f023 0310 	bic.w	r3, r3, #16
 80119e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	330c      	adds	r3, #12
 80119ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119ee:	623a      	str	r2, [r7, #32]
 80119f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f2:	69f9      	ldr	r1, [r7, #28]
 80119f4:	6a3a      	ldr	r2, [r7, #32]
 80119f6:	e841 2300 	strex	r3, r2, [r1]
 80119fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80119fc:	69bb      	ldr	r3, [r7, #24]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1e5      	bne.n	80119ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f003 0310 	and.w	r3, r3, #16
 8011a0c:	2b10      	cmp	r3, #16
 8011a0e:	d10a      	bne.n	8011a26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011a10:	2300      	movs	r3, #0
 8011a12:	60fb      	str	r3, [r7, #12]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	60fb      	str	r3, [r7, #12]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	60fb      	str	r3, [r7, #12]
 8011a24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f7ff fdbb 	bl	80115a8 <HAL_UARTEx_RxEventCallback>
 8011a32:	e002      	b.n	8011a3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f7fb fc8b 	bl	800d350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	e002      	b.n	8011a44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	e000      	b.n	8011a44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011a42:	2302      	movs	r3, #2
  }
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3730      	adds	r7, #48	@ 0x30
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a50:	b0c0      	sub	sp, #256	@ 0x100
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	691b      	ldr	r3, [r3, #16]
 8011a60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a68:	68d9      	ldr	r1, [r3, #12]
 8011a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	ea40 0301 	orr.w	r3, r0, r1
 8011a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a7a:	689a      	ldr	r2, [r3, #8]
 8011a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a80:	691b      	ldr	r3, [r3, #16]
 8011a82:	431a      	orrs	r2, r3
 8011a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a88:	695b      	ldr	r3, [r3, #20]
 8011a8a:	431a      	orrs	r2, r3
 8011a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a90:	69db      	ldr	r3, [r3, #28]
 8011a92:	4313      	orrs	r3, r2
 8011a94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011aa4:	f021 010c 	bic.w	r1, r1, #12
 8011aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011aac:	681a      	ldr	r2, [r3, #0]
 8011aae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011ab2:	430b      	orrs	r3, r1
 8011ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	695b      	ldr	r3, [r3, #20]
 8011abe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ac6:	6999      	ldr	r1, [r3, #24]
 8011ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	ea40 0301 	orr.w	r3, r0, r1
 8011ad2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	4b8f      	ldr	r3, [pc, #572]	@ (8011d18 <UART_SetConfig+0x2cc>)
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d005      	beq.n	8011aec <UART_SetConfig+0xa0>
 8011ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8011d1c <UART_SetConfig+0x2d0>)
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d104      	bne.n	8011af6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011aec:	f7fc fe78 	bl	800e7e0 <HAL_RCC_GetPCLK2Freq>
 8011af0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011af4:	e003      	b.n	8011afe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011af6:	f7fc fe5f 	bl	800e7b8 <HAL_RCC_GetPCLK1Freq>
 8011afa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b02:	69db      	ldr	r3, [r3, #28]
 8011b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011b08:	f040 810c 	bne.w	8011d24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011b10:	2200      	movs	r2, #0
 8011b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011b16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011b1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011b1e:	4622      	mov	r2, r4
 8011b20:	462b      	mov	r3, r5
 8011b22:	1891      	adds	r1, r2, r2
 8011b24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011b26:	415b      	adcs	r3, r3
 8011b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011b2e:	4621      	mov	r1, r4
 8011b30:	eb12 0801 	adds.w	r8, r2, r1
 8011b34:	4629      	mov	r1, r5
 8011b36:	eb43 0901 	adc.w	r9, r3, r1
 8011b3a:	f04f 0200 	mov.w	r2, #0
 8011b3e:	f04f 0300 	mov.w	r3, #0
 8011b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011b4e:	4690      	mov	r8, r2
 8011b50:	4699      	mov	r9, r3
 8011b52:	4623      	mov	r3, r4
 8011b54:	eb18 0303 	adds.w	r3, r8, r3
 8011b58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011b5c:	462b      	mov	r3, r5
 8011b5e:	eb49 0303 	adc.w	r3, r9, r3
 8011b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011b72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8011b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	18db      	adds	r3, r3, r3
 8011b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b80:	4613      	mov	r3, r2
 8011b82:	eb42 0303 	adc.w	r3, r2, r3
 8011b86:	657b      	str	r3, [r7, #84]	@ 0x54
 8011b88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011b8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011b90:	f7ef f88a 	bl	8000ca8 <__aeabi_uldivmod>
 8011b94:	4602      	mov	r2, r0
 8011b96:	460b      	mov	r3, r1
 8011b98:	4b61      	ldr	r3, [pc, #388]	@ (8011d20 <UART_SetConfig+0x2d4>)
 8011b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8011b9e:	095b      	lsrs	r3, r3, #5
 8011ba0:	011c      	lsls	r4, r3, #4
 8011ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011bac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011bb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011bb4:	4642      	mov	r2, r8
 8011bb6:	464b      	mov	r3, r9
 8011bb8:	1891      	adds	r1, r2, r2
 8011bba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011bbc:	415b      	adcs	r3, r3
 8011bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011bc4:	4641      	mov	r1, r8
 8011bc6:	eb12 0a01 	adds.w	sl, r2, r1
 8011bca:	4649      	mov	r1, r9
 8011bcc:	eb43 0b01 	adc.w	fp, r3, r1
 8011bd0:	f04f 0200 	mov.w	r2, #0
 8011bd4:	f04f 0300 	mov.w	r3, #0
 8011bd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011bdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011be4:	4692      	mov	sl, r2
 8011be6:	469b      	mov	fp, r3
 8011be8:	4643      	mov	r3, r8
 8011bea:	eb1a 0303 	adds.w	r3, sl, r3
 8011bee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011bf2:	464b      	mov	r3, r9
 8011bf4:	eb4b 0303 	adc.w	r3, fp, r3
 8011bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	2200      	movs	r2, #0
 8011c04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011c08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011c0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011c10:	460b      	mov	r3, r1
 8011c12:	18db      	adds	r3, r3, r3
 8011c14:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c16:	4613      	mov	r3, r2
 8011c18:	eb42 0303 	adc.w	r3, r2, r3
 8011c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011c22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011c26:	f7ef f83f 	bl	8000ca8 <__aeabi_uldivmod>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	4611      	mov	r1, r2
 8011c30:	4b3b      	ldr	r3, [pc, #236]	@ (8011d20 <UART_SetConfig+0x2d4>)
 8011c32:	fba3 2301 	umull	r2, r3, r3, r1
 8011c36:	095b      	lsrs	r3, r3, #5
 8011c38:	2264      	movs	r2, #100	@ 0x64
 8011c3a:	fb02 f303 	mul.w	r3, r2, r3
 8011c3e:	1acb      	subs	r3, r1, r3
 8011c40:	00db      	lsls	r3, r3, #3
 8011c42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8011c46:	4b36      	ldr	r3, [pc, #216]	@ (8011d20 <UART_SetConfig+0x2d4>)
 8011c48:	fba3 2302 	umull	r2, r3, r3, r2
 8011c4c:	095b      	lsrs	r3, r3, #5
 8011c4e:	005b      	lsls	r3, r3, #1
 8011c50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011c54:	441c      	add	r4, r3
 8011c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011c60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8011c64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011c68:	4642      	mov	r2, r8
 8011c6a:	464b      	mov	r3, r9
 8011c6c:	1891      	adds	r1, r2, r2
 8011c6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011c70:	415b      	adcs	r3, r3
 8011c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011c78:	4641      	mov	r1, r8
 8011c7a:	1851      	adds	r1, r2, r1
 8011c7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8011c7e:	4649      	mov	r1, r9
 8011c80:	414b      	adcs	r3, r1
 8011c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c84:	f04f 0200 	mov.w	r2, #0
 8011c88:	f04f 0300 	mov.w	r3, #0
 8011c8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011c90:	4659      	mov	r1, fp
 8011c92:	00cb      	lsls	r3, r1, #3
 8011c94:	4651      	mov	r1, sl
 8011c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011c9a:	4651      	mov	r1, sl
 8011c9c:	00ca      	lsls	r2, r1, #3
 8011c9e:	4610      	mov	r0, r2
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	4642      	mov	r2, r8
 8011ca6:	189b      	adds	r3, r3, r2
 8011ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011cac:	464b      	mov	r3, r9
 8011cae:	460a      	mov	r2, r1
 8011cb0:	eb42 0303 	adc.w	r3, r2, r3
 8011cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011cc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011ccc:	460b      	mov	r3, r1
 8011cce:	18db      	adds	r3, r3, r3
 8011cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	eb42 0303 	adc.w	r3, r2, r3
 8011cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011cde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8011ce2:	f7ee ffe1 	bl	8000ca8 <__aeabi_uldivmod>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4b0d      	ldr	r3, [pc, #52]	@ (8011d20 <UART_SetConfig+0x2d4>)
 8011cec:	fba3 1302 	umull	r1, r3, r3, r2
 8011cf0:	095b      	lsrs	r3, r3, #5
 8011cf2:	2164      	movs	r1, #100	@ 0x64
 8011cf4:	fb01 f303 	mul.w	r3, r1, r3
 8011cf8:	1ad3      	subs	r3, r2, r3
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	3332      	adds	r3, #50	@ 0x32
 8011cfe:	4a08      	ldr	r2, [pc, #32]	@ (8011d20 <UART_SetConfig+0x2d4>)
 8011d00:	fba2 2303 	umull	r2, r3, r2, r3
 8011d04:	095b      	lsrs	r3, r3, #5
 8011d06:	f003 0207 	and.w	r2, r3, #7
 8011d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	4422      	add	r2, r4
 8011d12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011d14:	e106      	b.n	8011f24 <UART_SetConfig+0x4d8>
 8011d16:	bf00      	nop
 8011d18:	40011000 	.word	0x40011000
 8011d1c:	40011400 	.word	0x40011400
 8011d20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011d28:	2200      	movs	r2, #0
 8011d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011d32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8011d36:	4642      	mov	r2, r8
 8011d38:	464b      	mov	r3, r9
 8011d3a:	1891      	adds	r1, r2, r2
 8011d3c:	6239      	str	r1, [r7, #32]
 8011d3e:	415b      	adcs	r3, r3
 8011d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011d46:	4641      	mov	r1, r8
 8011d48:	1854      	adds	r4, r2, r1
 8011d4a:	4649      	mov	r1, r9
 8011d4c:	eb43 0501 	adc.w	r5, r3, r1
 8011d50:	f04f 0200 	mov.w	r2, #0
 8011d54:	f04f 0300 	mov.w	r3, #0
 8011d58:	00eb      	lsls	r3, r5, #3
 8011d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011d5e:	00e2      	lsls	r2, r4, #3
 8011d60:	4614      	mov	r4, r2
 8011d62:	461d      	mov	r5, r3
 8011d64:	4643      	mov	r3, r8
 8011d66:	18e3      	adds	r3, r4, r3
 8011d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011d6c:	464b      	mov	r3, r9
 8011d6e:	eb45 0303 	adc.w	r3, r5, r3
 8011d72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011d82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011d86:	f04f 0200 	mov.w	r2, #0
 8011d8a:	f04f 0300 	mov.w	r3, #0
 8011d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011d92:	4629      	mov	r1, r5
 8011d94:	008b      	lsls	r3, r1, #2
 8011d96:	4621      	mov	r1, r4
 8011d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011d9c:	4621      	mov	r1, r4
 8011d9e:	008a      	lsls	r2, r1, #2
 8011da0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011da4:	f7ee ff80 	bl	8000ca8 <__aeabi_uldivmod>
 8011da8:	4602      	mov	r2, r0
 8011daa:	460b      	mov	r3, r1
 8011dac:	4b60      	ldr	r3, [pc, #384]	@ (8011f30 <UART_SetConfig+0x4e4>)
 8011dae:	fba3 2302 	umull	r2, r3, r3, r2
 8011db2:	095b      	lsrs	r3, r3, #5
 8011db4:	011c      	lsls	r4, r3, #4
 8011db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011dc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011dc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8011dc8:	4642      	mov	r2, r8
 8011dca:	464b      	mov	r3, r9
 8011dcc:	1891      	adds	r1, r2, r2
 8011dce:	61b9      	str	r1, [r7, #24]
 8011dd0:	415b      	adcs	r3, r3
 8011dd2:	61fb      	str	r3, [r7, #28]
 8011dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011dd8:	4641      	mov	r1, r8
 8011dda:	1851      	adds	r1, r2, r1
 8011ddc:	6139      	str	r1, [r7, #16]
 8011dde:	4649      	mov	r1, r9
 8011de0:	414b      	adcs	r3, r1
 8011de2:	617b      	str	r3, [r7, #20]
 8011de4:	f04f 0200 	mov.w	r2, #0
 8011de8:	f04f 0300 	mov.w	r3, #0
 8011dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011df0:	4659      	mov	r1, fp
 8011df2:	00cb      	lsls	r3, r1, #3
 8011df4:	4651      	mov	r1, sl
 8011df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011dfa:	4651      	mov	r1, sl
 8011dfc:	00ca      	lsls	r2, r1, #3
 8011dfe:	4610      	mov	r0, r2
 8011e00:	4619      	mov	r1, r3
 8011e02:	4603      	mov	r3, r0
 8011e04:	4642      	mov	r2, r8
 8011e06:	189b      	adds	r3, r3, r2
 8011e08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011e0c:	464b      	mov	r3, r9
 8011e0e:	460a      	mov	r2, r1
 8011e10:	eb42 0303 	adc.w	r3, r2, r3
 8011e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	2200      	movs	r2, #0
 8011e20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011e22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011e24:	f04f 0200 	mov.w	r2, #0
 8011e28:	f04f 0300 	mov.w	r3, #0
 8011e2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011e30:	4649      	mov	r1, r9
 8011e32:	008b      	lsls	r3, r1, #2
 8011e34:	4641      	mov	r1, r8
 8011e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011e3a:	4641      	mov	r1, r8
 8011e3c:	008a      	lsls	r2, r1, #2
 8011e3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011e42:	f7ee ff31 	bl	8000ca8 <__aeabi_uldivmod>
 8011e46:	4602      	mov	r2, r0
 8011e48:	460b      	mov	r3, r1
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	4b38      	ldr	r3, [pc, #224]	@ (8011f30 <UART_SetConfig+0x4e4>)
 8011e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8011e52:	095b      	lsrs	r3, r3, #5
 8011e54:	2264      	movs	r2, #100	@ 0x64
 8011e56:	fb02 f303 	mul.w	r3, r2, r3
 8011e5a:	1acb      	subs	r3, r1, r3
 8011e5c:	011b      	lsls	r3, r3, #4
 8011e5e:	3332      	adds	r3, #50	@ 0x32
 8011e60:	4a33      	ldr	r2, [pc, #204]	@ (8011f30 <UART_SetConfig+0x4e4>)
 8011e62:	fba2 2303 	umull	r2, r3, r2, r3
 8011e66:	095b      	lsrs	r3, r3, #5
 8011e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011e6c:	441c      	add	r4, r3
 8011e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011e72:	2200      	movs	r2, #0
 8011e74:	673b      	str	r3, [r7, #112]	@ 0x70
 8011e76:	677a      	str	r2, [r7, #116]	@ 0x74
 8011e78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011e7c:	4642      	mov	r2, r8
 8011e7e:	464b      	mov	r3, r9
 8011e80:	1891      	adds	r1, r2, r2
 8011e82:	60b9      	str	r1, [r7, #8]
 8011e84:	415b      	adcs	r3, r3
 8011e86:	60fb      	str	r3, [r7, #12]
 8011e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011e8c:	4641      	mov	r1, r8
 8011e8e:	1851      	adds	r1, r2, r1
 8011e90:	6039      	str	r1, [r7, #0]
 8011e92:	4649      	mov	r1, r9
 8011e94:	414b      	adcs	r3, r1
 8011e96:	607b      	str	r3, [r7, #4]
 8011e98:	f04f 0200 	mov.w	r2, #0
 8011e9c:	f04f 0300 	mov.w	r3, #0
 8011ea0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011ea4:	4659      	mov	r1, fp
 8011ea6:	00cb      	lsls	r3, r1, #3
 8011ea8:	4651      	mov	r1, sl
 8011eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011eae:	4651      	mov	r1, sl
 8011eb0:	00ca      	lsls	r2, r1, #3
 8011eb2:	4610      	mov	r0, r2
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	4642      	mov	r2, r8
 8011eba:	189b      	adds	r3, r3, r2
 8011ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011ebe:	464b      	mov	r3, r9
 8011ec0:	460a      	mov	r2, r1
 8011ec2:	eb42 0303 	adc.w	r3, r2, r3
 8011ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8011ed2:	667a      	str	r2, [r7, #100]	@ 0x64
 8011ed4:	f04f 0200 	mov.w	r2, #0
 8011ed8:	f04f 0300 	mov.w	r3, #0
 8011edc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011ee0:	4649      	mov	r1, r9
 8011ee2:	008b      	lsls	r3, r1, #2
 8011ee4:	4641      	mov	r1, r8
 8011ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011eea:	4641      	mov	r1, r8
 8011eec:	008a      	lsls	r2, r1, #2
 8011eee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011ef2:	f7ee fed9 	bl	8000ca8 <__aeabi_uldivmod>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	4b0d      	ldr	r3, [pc, #52]	@ (8011f30 <UART_SetConfig+0x4e4>)
 8011efc:	fba3 1302 	umull	r1, r3, r3, r2
 8011f00:	095b      	lsrs	r3, r3, #5
 8011f02:	2164      	movs	r1, #100	@ 0x64
 8011f04:	fb01 f303 	mul.w	r3, r1, r3
 8011f08:	1ad3      	subs	r3, r2, r3
 8011f0a:	011b      	lsls	r3, r3, #4
 8011f0c:	3332      	adds	r3, #50	@ 0x32
 8011f0e:	4a08      	ldr	r2, [pc, #32]	@ (8011f30 <UART_SetConfig+0x4e4>)
 8011f10:	fba2 2303 	umull	r2, r3, r2, r3
 8011f14:	095b      	lsrs	r3, r3, #5
 8011f16:	f003 020f 	and.w	r2, r3, #15
 8011f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4422      	add	r2, r4
 8011f22:	609a      	str	r2, [r3, #8]
}
 8011f24:	bf00      	nop
 8011f26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011f30:	51eb851f 	.word	0x51eb851f

08011f34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8011f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011f36:	2400      	movs	r4, #0
 8011f38:	2310      	movs	r3, #16
 8011f3a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011f3e:	6803      	ldr	r3, [r0, #0]
 8011f40:	4615      	mov	r5, r2
 8011f42:	699e      	ldr	r6, [r3, #24]
 8011f44:	6812      	ldr	r2, [r2, #0]
 8011f46:	466b      	mov	r3, sp
 8011f48:	e9cd 4400 	strd	r4, r4, [sp]
 8011f4c:	47b0      	blx	r6
 8011f4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f52:	f003 0306 	and.w	r3, r3, #6
 8011f56:	2b06      	cmp	r3, #6
 8011f58:	bf03      	ittte	eq
 8011f5a:	9b00      	ldreq	r3, [sp, #0]
 8011f5c:	602b      	streq	r3, [r5, #0]
 8011f5e:	2001      	moveq	r0, #1
 8011f60:	4620      	movne	r0, r4
 8011f62:	b004      	add	sp, #16
 8011f64:	bd70      	pop	{r4, r5, r6, pc}

08011f66 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8011f66:	9800      	ldr	r0, [sp, #0]
 8011f68:	4290      	cmp	r0, r2
 8011f6a:	bf0c      	ite	eq
 8011f6c:	2006      	moveq	r0, #6
 8011f6e:	2001      	movne	r0, #1
 8011f70:	4770      	bx	lr
	...

08011f74 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8011f74:	b510      	push	{r4, lr}
 8011f76:	4b03      	ldr	r3, [pc, #12]	@ (8011f84 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8011f78:	6003      	str	r3, [r0, #0]
 8011f7a:	4604      	mov	r4, r0
 8011f7c:	f000 fc3d 	bl	80127fa <_ZNSt9type_infoD1Ev>
 8011f80:	4620      	mov	r0, r4
 8011f82:	bd10      	pop	{r4, pc}
 8011f84:	080189f4 	.word	0x080189f4

08011f88 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8011f88:	b510      	push	{r4, lr}
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	f7ff fff2 	bl	8011f74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8011f90:	4620      	mov	r0, r4
 8011f92:	2108      	movs	r1, #8
 8011f94:	f000 f842 	bl	801201c <_ZdlPvj>
 8011f98:	4620      	mov	r0, r4
 8011f9a:	bd10      	pop	{r4, pc}

08011f9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8011f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa0:	461f      	mov	r7, r3
 8011fa2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8011fa6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011faa:	4598      	cmp	r8, r3
 8011fac:	4606      	mov	r6, r0
 8011fae:	4615      	mov	r5, r2
 8011fb0:	d107      	bne.n	8011fc2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8011fb2:	9907      	ldr	r1, [sp, #28]
 8011fb4:	f000 fc24 	bl	8012800 <_ZNKSt9type_info7__equalERKS_>
 8011fb8:	b118      	cbz	r0, 8011fc2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8011fba:	7165      	strb	r5, [r4, #5]
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fc2:	4639      	mov	r1, r7
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	f000 fc1b 	bl	8012800 <_ZNKSt9type_info7__equalERKS_>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d0f6      	beq.n	8011fbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8011fce:	2301      	movs	r3, #1
 8011fd0:	f8c4 8000 	str.w	r8, [r4]
 8011fd4:	7125      	strb	r5, [r4, #4]
 8011fd6:	71a3      	strb	r3, [r4, #6]
 8011fd8:	e7f0      	b.n	8011fbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08011fda <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8011fda:	b538      	push	{r3, r4, r5, lr}
 8011fdc:	4615      	mov	r5, r2
 8011fde:	461c      	mov	r4, r3
 8011fe0:	f000 fc0e 	bl	8012800 <_ZNKSt9type_info7__equalERKS_>
 8011fe4:	b120      	cbz	r0, 8011ff0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8011fe6:	2308      	movs	r3, #8
 8011fe8:	60e3      	str	r3, [r4, #12]
 8011fea:	2306      	movs	r3, #6
 8011fec:	6025      	str	r5, [r4, #0]
 8011fee:	7123      	strb	r3, [r4, #4]
 8011ff0:	bd38      	pop	{r3, r4, r5, pc}

08011ff2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8011ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff6:	4605      	mov	r5, r0
 8011ff8:	460c      	mov	r4, r1
 8011ffa:	4616      	mov	r6, r2
 8011ffc:	461f      	mov	r7, r3
 8011ffe:	f000 fbff 	bl	8012800 <_ZNKSt9type_info7__equalERKS_>
 8012002:	b948      	cbnz	r0, 8012018 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8012004:	2f03      	cmp	r7, #3
 8012006:	d807      	bhi.n	8012018 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8012008:	6823      	ldr	r3, [r4, #0]
 801200a:	4632      	mov	r2, r6
 801200c:	4629      	mov	r1, r5
 801200e:	4620      	mov	r0, r4
 8012010:	695b      	ldr	r3, [r3, #20]
 8012012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012016:	4718      	bx	r3
 8012018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801201c <_ZdlPvj>:
 801201c:	f000 bc0b 	b.w	8012836 <_ZdlPv>

08012020 <__cxa_end_cleanup>:
 8012020:	b41e      	push	{r1, r2, r3, r4}
 8012022:	f000 f89c 	bl	801215e <__gnu_end_cleanup>
 8012026:	bc1e      	pop	{r1, r2, r3, r4}
 8012028:	f7ef fd3c 	bl	8001aa4 <_Unwind_Resume>

0801202c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 801202c:	7803      	ldrb	r3, [r0, #0]
 801202e:	2b47      	cmp	r3, #71	@ 0x47
 8012030:	d117      	bne.n	8012062 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012032:	7843      	ldrb	r3, [r0, #1]
 8012034:	2b4e      	cmp	r3, #78	@ 0x4e
 8012036:	d114      	bne.n	8012062 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012038:	7883      	ldrb	r3, [r0, #2]
 801203a:	2b55      	cmp	r3, #85	@ 0x55
 801203c:	d111      	bne.n	8012062 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801203e:	78c3      	ldrb	r3, [r0, #3]
 8012040:	2b43      	cmp	r3, #67	@ 0x43
 8012042:	d10e      	bne.n	8012062 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012044:	7903      	ldrb	r3, [r0, #4]
 8012046:	2b43      	cmp	r3, #67	@ 0x43
 8012048:	d10b      	bne.n	8012062 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801204a:	7943      	ldrb	r3, [r0, #5]
 801204c:	2b2b      	cmp	r3, #43	@ 0x2b
 801204e:	d108      	bne.n	8012062 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012050:	7983      	ldrb	r3, [r0, #6]
 8012052:	2b2b      	cmp	r3, #43	@ 0x2b
 8012054:	d105      	bne.n	8012062 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012056:	79c0      	ldrb	r0, [r0, #7]
 8012058:	2801      	cmp	r0, #1
 801205a:	bf8c      	ite	hi
 801205c:	2000      	movhi	r0, #0
 801205e:	2001      	movls	r0, #1
 8012060:	4770      	bx	lr
 8012062:	2000      	movs	r0, #0
 8012064:	4770      	bx	lr
	...

08012068 <__cxa_type_match>:
 8012068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801206c:	461d      	mov	r5, r3
 801206e:	7803      	ldrb	r3, [r0, #0]
 8012070:	2b47      	cmp	r3, #71	@ 0x47
 8012072:	460e      	mov	r6, r1
 8012074:	4602      	mov	r2, r0
 8012076:	79c1      	ldrb	r1, [r0, #7]
 8012078:	d113      	bne.n	80120a2 <__cxa_type_match+0x3a>
 801207a:	7843      	ldrb	r3, [r0, #1]
 801207c:	2b4e      	cmp	r3, #78	@ 0x4e
 801207e:	d110      	bne.n	80120a2 <__cxa_type_match+0x3a>
 8012080:	7883      	ldrb	r3, [r0, #2]
 8012082:	2b55      	cmp	r3, #85	@ 0x55
 8012084:	d10d      	bne.n	80120a2 <__cxa_type_match+0x3a>
 8012086:	78c3      	ldrb	r3, [r0, #3]
 8012088:	2b43      	cmp	r3, #67	@ 0x43
 801208a:	d10a      	bne.n	80120a2 <__cxa_type_match+0x3a>
 801208c:	7903      	ldrb	r3, [r0, #4]
 801208e:	2b46      	cmp	r3, #70	@ 0x46
 8012090:	d107      	bne.n	80120a2 <__cxa_type_match+0x3a>
 8012092:	7943      	ldrb	r3, [r0, #5]
 8012094:	2b4f      	cmp	r3, #79	@ 0x4f
 8012096:	d104      	bne.n	80120a2 <__cxa_type_match+0x3a>
 8012098:	7983      	ldrb	r3, [r0, #6]
 801209a:	2b52      	cmp	r3, #82	@ 0x52
 801209c:	d101      	bne.n	80120a2 <__cxa_type_match+0x3a>
 801209e:	2900      	cmp	r1, #0
 80120a0:	d031      	beq.n	8012106 <__cxa_type_match+0x9e>
 80120a2:	4610      	mov	r0, r2
 80120a4:	f7ff ffc2 	bl	801202c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80120a8:	f080 0401 	eor.w	r4, r0, #1
 80120ac:	b2e4      	uxtb	r4, r4
 80120ae:	2300      	movs	r3, #0
 80120b0:	2000      	movs	r0, #0
 80120b2:	9001      	str	r0, [sp, #4]
 80120b4:	bb53      	cbnz	r3, 801210c <__cxa_type_match+0xa4>
 80120b6:	bb5c      	cbnz	r4, 8012110 <__cxa_type_match+0xa8>
 80120b8:	2901      	cmp	r1, #1
 80120ba:	bf0a      	itet	eq
 80120bc:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 80120c0:	f1a2 0320 	subne.w	r3, r2, #32
 80120c4:	3b78      	subeq	r3, #120	@ 0x78
 80120c6:	2901      	cmp	r1, #1
 80120c8:	bf08      	it	eq
 80120ca:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80120ce:	681c      	ldr	r4, [r3, #0]
 80120d0:	bf18      	it	ne
 80120d2:	3258      	addne	r2, #88	@ 0x58
 80120d4:	9201      	str	r2, [sp, #4]
 80120d6:	6823      	ldr	r3, [r4, #0]
 80120d8:	4620      	mov	r0, r4
 80120da:	689b      	ldr	r3, [r3, #8]
 80120dc:	4798      	blx	r3
 80120de:	b1c8      	cbz	r0, 8012114 <__cxa_type_match+0xac>
 80120e0:	9b01      	ldr	r3, [sp, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	9301      	str	r3, [sp, #4]
 80120e6:	2702      	movs	r7, #2
 80120e8:	6833      	ldr	r3, [r6, #0]
 80120ea:	aa01      	add	r2, sp, #4
 80120ec:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80120f0:	4621      	mov	r1, r4
 80120f2:	2301      	movs	r3, #1
 80120f4:	4630      	mov	r0, r6
 80120f6:	47c0      	blx	r8
 80120f8:	b170      	cbz	r0, 8012118 <__cxa_type_match+0xb0>
 80120fa:	9b01      	ldr	r3, [sp, #4]
 80120fc:	602b      	str	r3, [r5, #0]
 80120fe:	4638      	mov	r0, r7
 8012100:	b002      	add	sp, #8
 8012102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012106:	2301      	movs	r3, #1
 8012108:	460c      	mov	r4, r1
 801210a:	e7d1      	b.n	80120b0 <__cxa_type_match+0x48>
 801210c:	4c03      	ldr	r4, [pc, #12]	@ (801211c <__cxa_type_match+0xb4>)
 801210e:	e7e2      	b.n	80120d6 <__cxa_type_match+0x6e>
 8012110:	4c03      	ldr	r4, [pc, #12]	@ (8012120 <__cxa_type_match+0xb8>)
 8012112:	e7e0      	b.n	80120d6 <__cxa_type_match+0x6e>
 8012114:	2701      	movs	r7, #1
 8012116:	e7e7      	b.n	80120e8 <__cxa_type_match+0x80>
 8012118:	4607      	mov	r7, r0
 801211a:	e7f0      	b.n	80120fe <__cxa_type_match+0x96>
 801211c:	08018a38 	.word	0x08018a38
 8012120:	08018a64 	.word	0x08018a64

08012124 <__cxa_begin_cleanup>:
 8012124:	b510      	push	{r4, lr}
 8012126:	4604      	mov	r4, r0
 8012128:	f000 f834 	bl	8012194 <__cxa_get_globals>
 801212c:	4602      	mov	r2, r0
 801212e:	4620      	mov	r0, r4
 8012130:	f1a4 0120 	sub.w	r1, r4, #32
 8012134:	f7ff ff7a 	bl	801202c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012138:	b160      	cbz	r0, 8012154 <__cxa_begin_cleanup+0x30>
 801213a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801213e:	3301      	adds	r3, #1
 8012140:	2b01      	cmp	r3, #1
 8012142:	f844 3c04 	str.w	r3, [r4, #-4]
 8012146:	d103      	bne.n	8012150 <__cxa_begin_cleanup+0x2c>
 8012148:	6893      	ldr	r3, [r2, #8]
 801214a:	f844 3c08 	str.w	r3, [r4, #-8]
 801214e:	6091      	str	r1, [r2, #8]
 8012150:	2001      	movs	r0, #1
 8012152:	bd10      	pop	{r4, pc}
 8012154:	6893      	ldr	r3, [r2, #8]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d0f9      	beq.n	801214e <__cxa_begin_cleanup+0x2a>
 801215a:	f000 faa3 	bl	80126a4 <_ZSt9terminatev>

0801215e <__gnu_end_cleanup>:
 801215e:	b510      	push	{r4, lr}
 8012160:	f000 f818 	bl	8012194 <__cxa_get_globals>
 8012164:	6882      	ldr	r2, [r0, #8]
 8012166:	4601      	mov	r1, r0
 8012168:	b90a      	cbnz	r2, 801216e <__gnu_end_cleanup+0x10>
 801216a:	f000 fa9b 	bl	80126a4 <_ZSt9terminatev>
 801216e:	f102 0420 	add.w	r4, r2, #32
 8012172:	4620      	mov	r0, r4
 8012174:	f7ff ff5a 	bl	801202c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012178:	b140      	cbz	r0, 801218c <__gnu_end_cleanup+0x2e>
 801217a:	69d3      	ldr	r3, [r2, #28]
 801217c:	3b01      	subs	r3, #1
 801217e:	61d3      	str	r3, [r2, #28]
 8012180:	b913      	cbnz	r3, 8012188 <__gnu_end_cleanup+0x2a>
 8012182:	6990      	ldr	r0, [r2, #24]
 8012184:	6088      	str	r0, [r1, #8]
 8012186:	6193      	str	r3, [r2, #24]
 8012188:	4620      	mov	r0, r4
 801218a:	bd10      	pop	{r4, pc}
 801218c:	6088      	str	r0, [r1, #8]
 801218e:	e7fb      	b.n	8012188 <__gnu_end_cleanup+0x2a>

08012190 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8012190:	4770      	bx	lr
	...

08012194 <__cxa_get_globals>:
 8012194:	4800      	ldr	r0, [pc, #0]	@ (8012198 <__cxa_get_globals+0x4>)
 8012196:	4770      	bx	lr
 8012198:	200005c4 	.word	0x200005c4

0801219c <_GLOBAL__sub_I___cxa_get_globals_fast>:
 801219c:	4a02      	ldr	r2, [pc, #8]	@ (80121a8 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 801219e:	4903      	ldr	r1, [pc, #12]	@ (80121ac <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 80121a0:	4803      	ldr	r0, [pc, #12]	@ (80121b0 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 80121a2:	f000 bb43 	b.w	801282c <__aeabi_atexit>
 80121a6:	bf00      	nop
 80121a8:	20000000 	.word	0x20000000
 80121ac:	08012191 	.word	0x08012191
 80121b0:	200005c4 	.word	0x200005c4

080121b4 <_ZL12read_uleb128PKhPm>:
 80121b4:	b530      	push	{r4, r5, lr}
 80121b6:	2300      	movs	r3, #0
 80121b8:	461a      	mov	r2, r3
 80121ba:	f810 5b01 	ldrb.w	r5, [r0], #1
 80121be:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 80121c2:	4094      	lsls	r4, r2
 80121c4:	4323      	orrs	r3, r4
 80121c6:	062c      	lsls	r4, r5, #24
 80121c8:	f102 0207 	add.w	r2, r2, #7
 80121cc:	d4f5      	bmi.n	80121ba <_ZL12read_uleb128PKhPm+0x6>
 80121ce:	600b      	str	r3, [r1, #0]
 80121d0:	bd30      	pop	{r4, r5, pc}

080121d2 <_ZL12read_sleb128PKhPl>:
 80121d2:	b530      	push	{r4, r5, lr}
 80121d4:	2300      	movs	r3, #0
 80121d6:	461a      	mov	r2, r3
 80121d8:	f810 4b01 	ldrb.w	r4, [r0], #1
 80121dc:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 80121e0:	4095      	lsls	r5, r2
 80121e2:	432b      	orrs	r3, r5
 80121e4:	0625      	lsls	r5, r4, #24
 80121e6:	f102 0207 	add.w	r2, r2, #7
 80121ea:	d4f5      	bmi.n	80121d8 <_ZL12read_sleb128PKhPl+0x6>
 80121ec:	2a1f      	cmp	r2, #31
 80121ee:	d806      	bhi.n	80121fe <_ZL12read_sleb128PKhPl+0x2c>
 80121f0:	0664      	lsls	r4, r4, #25
 80121f2:	bf42      	ittt	mi
 80121f4:	f04f 34ff 	movmi.w	r4, #4294967295
 80121f8:	fa04 f202 	lslmi.w	r2, r4, r2
 80121fc:	4313      	orrmi	r3, r2
 80121fe:	600b      	str	r3, [r1, #0]
 8012200:	bd30      	pop	{r4, r5, pc}

08012202 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8012202:	2850      	cmp	r0, #80	@ 0x50
 8012204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012208:	4606      	mov	r6, r0
 801220a:	4688      	mov	r8, r1
 801220c:	4615      	mov	r5, r2
 801220e:	461f      	mov	r7, r3
 8012210:	d108      	bne.n	8012224 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8012212:	1cd0      	adds	r0, r2, #3
 8012214:	f020 0003 	bic.w	r0, r0, #3
 8012218:	f850 4b04 	ldr.w	r4, [r0], #4
 801221c:	603c      	str	r4, [r7, #0]
 801221e:	b002      	add	sp, #8
 8012220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012224:	f000 030f 	and.w	r3, r0, #15
 8012228:	2b0c      	cmp	r3, #12
 801222a:	d82e      	bhi.n	801228a <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 801222c:	e8df f003 	tbb	[pc, r3]
 8012230:	251d0725 	.word	0x251d0725
 8012234:	2d2d2d29 	.word	0x2d2d2d29
 8012238:	2521182d 	.word	0x2521182d
 801223c:	29          	.byte	0x29
 801223d:	00          	.byte	0x00
 801223e:	a901      	add	r1, sp, #4
 8012240:	4628      	mov	r0, r5
 8012242:	f7ff ffb7 	bl	80121b4 <_ZL12read_uleb128PKhPm>
 8012246:	9c01      	ldr	r4, [sp, #4]
 8012248:	2c00      	cmp	r4, #0
 801224a:	d0e7      	beq.n	801221c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 801224c:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 8012250:	2b10      	cmp	r3, #16
 8012252:	bf08      	it	eq
 8012254:	46a8      	moveq	r8, r5
 8012256:	4444      	add	r4, r8
 8012258:	0633      	lsls	r3, r6, #24
 801225a:	bf48      	it	mi
 801225c:	6824      	ldrmi	r4, [r4, #0]
 801225e:	e7dd      	b.n	801221c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8012260:	a901      	add	r1, sp, #4
 8012262:	4628      	mov	r0, r5
 8012264:	f7ff ffb5 	bl	80121d2 <_ZL12read_sleb128PKhPl>
 8012268:	e7ed      	b.n	8012246 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 801226a:	4628      	mov	r0, r5
 801226c:	f830 4b02 	ldrh.w	r4, [r0], #2
 8012270:	e7ea      	b.n	8012248 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012272:	4628      	mov	r0, r5
 8012274:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8012278:	e7e6      	b.n	8012248 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801227a:	4628      	mov	r0, r5
 801227c:	f850 4b04 	ldr.w	r4, [r0], #4
 8012280:	e7e2      	b.n	8012248 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012282:	4628      	mov	r0, r5
 8012284:	f850 4b08 	ldr.w	r4, [r0], #8
 8012288:	e7de      	b.n	8012248 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801228a:	f002 faed 	bl	8014868 <abort>

0801228e <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 801228e:	b508      	push	{r3, lr}
 8012290:	4603      	mov	r3, r0
 8012292:	2bff      	cmp	r3, #255	@ 0xff
 8012294:	4608      	mov	r0, r1
 8012296:	d00d      	beq.n	80122b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8012298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801229c:	2b30      	cmp	r3, #48	@ 0x30
 801229e:	d00f      	beq.n	80122c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 80122a0:	d804      	bhi.n	80122ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 80122a2:	2b20      	cmp	r3, #32
 80122a4:	d008      	beq.n	80122b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 80122a6:	d905      	bls.n	80122b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 80122a8:	f002 fade 	bl	8014868 <abort>
 80122ac:	2b40      	cmp	r3, #64	@ 0x40
 80122ae:	d00b      	beq.n	80122c8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 80122b0:	2b50      	cmp	r3, #80	@ 0x50
 80122b2:	d1f9      	bne.n	80122a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80122b4:	2000      	movs	r0, #0
 80122b6:	bd08      	pop	{r3, pc}
 80122b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80122bc:	f005 b935 	b.w	801752a <_Unwind_GetTextRelBase>
 80122c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80122c4:	f005 b92e 	b.w	8017524 <_Unwind_GetDataRelBase>
 80122c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80122cc:	f7ef bdde 	b.w	8001e8c <_Unwind_GetRegionStart>

080122d0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 80122d0:	b570      	push	{r4, r5, r6, lr}
 80122d2:	460c      	mov	r4, r1
 80122d4:	4601      	mov	r1, r0
 80122d6:	4620      	mov	r0, r4
 80122d8:	4615      	mov	r5, r2
 80122da:	461e      	mov	r6, r3
 80122dc:	f7ff ffd7 	bl	801228e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80122e0:	4633      	mov	r3, r6
 80122e2:	4601      	mov	r1, r0
 80122e4:	462a      	mov	r2, r5
 80122e6:	4620      	mov	r0, r4
 80122e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122ec:	f7ff bf89 	b.w	8012202 <_ZL28read_encoded_value_with_basehjPKhPj>

080122f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80122f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122f2:	460c      	mov	r4, r1
 80122f4:	4615      	mov	r5, r2
 80122f6:	4606      	mov	r6, r0
 80122f8:	b108      	cbz	r0, 80122fe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80122fa:	f7ef fdc7 	bl	8001e8c <_Unwind_GetRegionStart>
 80122fe:	4622      	mov	r2, r4
 8012300:	6028      	str	r0, [r5, #0]
 8012302:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012306:	29ff      	cmp	r1, #255	@ 0xff
 8012308:	d01c      	beq.n	8012344 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 801230a:	1d2b      	adds	r3, r5, #4
 801230c:	4630      	mov	r0, r6
 801230e:	f7ff ffdf 	bl	80122d0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012312:	4602      	mov	r2, r0
 8012314:	4610      	mov	r0, r2
 8012316:	f810 3b01 	ldrb.w	r3, [r0], #1
 801231a:	2bff      	cmp	r3, #255	@ 0xff
 801231c:	d014      	beq.n	8012348 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 801231e:	2310      	movs	r3, #16
 8012320:	752b      	strb	r3, [r5, #20]
 8012322:	a901      	add	r1, sp, #4
 8012324:	f7ff ff46 	bl	80121b4 <_ZL12read_uleb128PKhPm>
 8012328:	9b01      	ldr	r3, [sp, #4]
 801232a:	4403      	add	r3, r0
 801232c:	60eb      	str	r3, [r5, #12]
 801232e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012332:	756b      	strb	r3, [r5, #21]
 8012334:	a901      	add	r1, sp, #4
 8012336:	f7ff ff3d 	bl	80121b4 <_ZL12read_uleb128PKhPm>
 801233a:	9b01      	ldr	r3, [sp, #4]
 801233c:	4403      	add	r3, r0
 801233e:	612b      	str	r3, [r5, #16]
 8012340:	b002      	add	sp, #8
 8012342:	bd70      	pop	{r4, r5, r6, pc}
 8012344:	6068      	str	r0, [r5, #4]
 8012346:	e7e5      	b.n	8012314 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8012348:	752b      	strb	r3, [r5, #20]
 801234a:	2300      	movs	r3, #0
 801234c:	e7ee      	b.n	801232c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

0801234e <_Unwind_GetGR>:
 801234e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012350:	ab03      	add	r3, sp, #12
 8012352:	9300      	str	r3, [sp, #0]
 8012354:	2300      	movs	r3, #0
 8012356:	460a      	mov	r2, r1
 8012358:	4619      	mov	r1, r3
 801235a:	f7ee ffe3 	bl	8001324 <_Unwind_VRS_Get>
 801235e:	9803      	ldr	r0, [sp, #12]
 8012360:	b005      	add	sp, #20
 8012362:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012368 <__gxx_personality_v0>:
 8012368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	b093      	sub	sp, #76	@ 0x4c
 801236e:	2300      	movs	r3, #0
 8012370:	9307      	str	r3, [sp, #28]
 8012372:	f000 0303 	and.w	r3, r0, #3
 8012376:	2b01      	cmp	r3, #1
 8012378:	4605      	mov	r5, r0
 801237a:	460c      	mov	r4, r1
 801237c:	4616      	mov	r6, r2
 801237e:	d010      	beq.n	80123a2 <__gxx_personality_v0+0x3a>
 8012380:	2b02      	cmp	r3, #2
 8012382:	d003      	beq.n	801238c <__gxx_personality_v0+0x24>
 8012384:	2b00      	cmp	r3, #0
 8012386:	d13b      	bne.n	8012400 <__gxx_personality_v0+0x98>
 8012388:	0701      	lsls	r1, r0, #28
 801238a:	d53b      	bpl.n	8012404 <__gxx_personality_v0+0x9c>
 801238c:	4631      	mov	r1, r6
 801238e:	4620      	mov	r0, r4
 8012390:	f7ef fd66 	bl	8001e60 <__gnu_unwind_frame>
 8012394:	b118      	cbz	r0, 801239e <__gxx_personality_v0+0x36>
 8012396:	2009      	movs	r0, #9
 8012398:	b013      	add	sp, #76	@ 0x4c
 801239a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239e:	2008      	movs	r0, #8
 80123a0:	e7fa      	b.n	8012398 <__gxx_personality_v0+0x30>
 80123a2:	0702      	lsls	r2, r0, #28
 80123a4:	d523      	bpl.n	80123ee <__gxx_personality_v0+0x86>
 80123a6:	2302      	movs	r3, #2
 80123a8:	f005 0508 	and.w	r5, r5, #8
 80123ac:	431d      	orrs	r5, r3
 80123ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80123b0:	9300      	str	r3, [sp, #0]
 80123b2:	2300      	movs	r3, #0
 80123b4:	220c      	movs	r2, #12
 80123b6:	4619      	mov	r1, r3
 80123b8:	4630      	mov	r0, r6
 80123ba:	940c      	str	r4, [sp, #48]	@ 0x30
 80123bc:	f7ee ffd8 	bl	8001370 <_Unwind_VRS_Set>
 80123c0:	2d06      	cmp	r5, #6
 80123c2:	d121      	bne.n	8012408 <__gxx_personality_v0+0xa0>
 80123c4:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 80123c8:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 80123cc:	f1b8 0f00 	cmp.w	r8, #0
 80123d0:	bf0c      	ite	eq
 80123d2:	f04f 0a01 	moveq.w	sl, #1
 80123d6:	f04f 0a03 	movne.w	sl, #3
 80123da:	f015 0508 	ands.w	r5, r5, #8
 80123de:	f000 8103 	beq.w	80125e8 <__gxx_personality_v0+0x280>
 80123e2:	f1ba 0f01 	cmp.w	sl, #1
 80123e6:	f040 80fb 	bne.w	80125e0 <__gxx_personality_v0+0x278>
 80123ea:	f000 f95b 	bl	80126a4 <_ZSt9terminatev>
 80123ee:	6a0f      	ldr	r7, [r1, #32]
 80123f0:	4630      	mov	r0, r6
 80123f2:	210d      	movs	r1, #13
 80123f4:	f7ff ffab 	bl	801234e <_Unwind_GetGR>
 80123f8:	4287      	cmp	r7, r0
 80123fa:	d1d4      	bne.n	80123a6 <__gxx_personality_v0+0x3e>
 80123fc:	2306      	movs	r3, #6
 80123fe:	e7d3      	b.n	80123a8 <__gxx_personality_v0+0x40>
 8012400:	f002 fa32 	bl	8014868 <abort>
 8012404:	2301      	movs	r3, #1
 8012406:	e7cf      	b.n	80123a8 <__gxx_personality_v0+0x40>
 8012408:	4630      	mov	r0, r6
 801240a:	f7ef fd45 	bl	8001e98 <_Unwind_GetLanguageSpecificData>
 801240e:	4681      	mov	r9, r0
 8012410:	2800      	cmp	r0, #0
 8012412:	d0bb      	beq.n	801238c <__gxx_personality_v0+0x24>
 8012414:	aa0c      	add	r2, sp, #48	@ 0x30
 8012416:	4601      	mov	r1, r0
 8012418:	4630      	mov	r0, r6
 801241a:	f7ff ff69 	bl	80122f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 801241e:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 8012422:	9003      	str	r0, [sp, #12]
 8012424:	4631      	mov	r1, r6
 8012426:	4658      	mov	r0, fp
 8012428:	f7ff ff31 	bl	801228e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801242c:	210f      	movs	r1, #15
 801242e:	9002      	str	r0, [sp, #8]
 8012430:	900e      	str	r0, [sp, #56]	@ 0x38
 8012432:	4630      	mov	r0, r6
 8012434:	f7ff ff8b 	bl	801234e <_Unwind_GetGR>
 8012438:	9a03      	ldr	r2, [sp, #12]
 801243a:	f020 0801 	bic.w	r8, r0, #1
 801243e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012442:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012444:	4297      	cmp	r7, r2
 8012446:	d815      	bhi.n	8012474 <__gxx_personality_v0+0x10c>
 8012448:	2700      	movs	r7, #0
 801244a:	46b8      	mov	r8, r7
 801244c:	f04f 0a01 	mov.w	sl, #1
 8012450:	07eb      	lsls	r3, r5, #31
 8012452:	d5c2      	bpl.n	80123da <__gxx_personality_v0+0x72>
 8012454:	f1ba 0f02 	cmp.w	sl, #2
 8012458:	d098      	beq.n	801238c <__gxx_personality_v0+0x24>
 801245a:	210d      	movs	r1, #13
 801245c:	4630      	mov	r0, r6
 801245e:	9d07      	ldr	r5, [sp, #28]
 8012460:	f7ff ff75 	bl	801234e <_Unwind_GetGR>
 8012464:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 8012468:	e9c4 0508 	strd	r0, r5, [r4, #32]
 801246c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8012470:	2006      	movs	r0, #6
 8012472:	e791      	b.n	8012398 <__gxx_personality_v0+0x30>
 8012474:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 8012478:	ab08      	add	r3, sp, #32
 801247a:	4651      	mov	r1, sl
 801247c:	2000      	movs	r0, #0
 801247e:	f7ff ff27 	bl	80122d0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012482:	ab09      	add	r3, sp, #36	@ 0x24
 8012484:	4602      	mov	r2, r0
 8012486:	4651      	mov	r1, sl
 8012488:	2000      	movs	r0, #0
 801248a:	f7ff ff21 	bl	80122d0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 801248e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012490:	4602      	mov	r2, r0
 8012492:	4651      	mov	r1, sl
 8012494:	2000      	movs	r0, #0
 8012496:	f7ff ff1b 	bl	80122d0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 801249a:	a90b      	add	r1, sp, #44	@ 0x2c
 801249c:	f7ff fe8a 	bl	80121b4 <_ZL12read_uleb128PKhPm>
 80124a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124a2:	9908      	ldr	r1, [sp, #32]
 80124a4:	440b      	add	r3, r1
 80124a6:	4543      	cmp	r3, r8
 80124a8:	4602      	mov	r2, r0
 80124aa:	d84b      	bhi.n	8012544 <__gxx_personality_v0+0x1dc>
 80124ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80124ae:	440b      	add	r3, r1
 80124b0:	4543      	cmp	r3, r8
 80124b2:	d9c6      	bls.n	8012442 <__gxx_personality_v0+0xda>
 80124b4:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80124b8:	f1b8 0f00 	cmp.w	r8, #0
 80124bc:	d001      	beq.n	80124c2 <__gxx_personality_v0+0x15a>
 80124be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80124c0:	4498      	add	r8, r3
 80124c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80124c4:	b108      	cbz	r0, 80124ca <__gxx_personality_v0+0x162>
 80124c6:	3801      	subs	r0, #1
 80124c8:	4438      	add	r0, r7
 80124ca:	f1b8 0f00 	cmp.w	r8, #0
 80124ce:	f43f af5d 	beq.w	801238c <__gxx_personality_v0+0x24>
 80124d2:	2800      	cmp	r0, #0
 80124d4:	f000 80d6 	beq.w	8012684 <__gxx_personality_v0+0x31c>
 80124d8:	f015 0308 	ands.w	r3, r5, #8
 80124dc:	9304      	str	r3, [sp, #16]
 80124de:	d033      	beq.n	8012548 <__gxx_personality_v0+0x1e0>
 80124e0:	2347      	movs	r3, #71	@ 0x47
 80124e2:	7023      	strb	r3, [r4, #0]
 80124e4:	234e      	movs	r3, #78	@ 0x4e
 80124e6:	7063      	strb	r3, [r4, #1]
 80124e8:	2355      	movs	r3, #85	@ 0x55
 80124ea:	70a3      	strb	r3, [r4, #2]
 80124ec:	2343      	movs	r3, #67	@ 0x43
 80124ee:	70e3      	strb	r3, [r4, #3]
 80124f0:	2346      	movs	r3, #70	@ 0x46
 80124f2:	7123      	strb	r3, [r4, #4]
 80124f4:	234f      	movs	r3, #79	@ 0x4f
 80124f6:	7163      	strb	r3, [r4, #5]
 80124f8:	2352      	movs	r3, #82	@ 0x52
 80124fa:	71a3      	strb	r3, [r4, #6]
 80124fc:	2300      	movs	r3, #0
 80124fe:	71e3      	strb	r3, [r4, #7]
 8012500:	2300      	movs	r3, #0
 8012502:	9303      	str	r3, [sp, #12]
 8012504:	a909      	add	r1, sp, #36	@ 0x24
 8012506:	f7ff fe64 	bl	80121d2 <_ZL12read_sleb128PKhPl>
 801250a:	a90a      	add	r1, sp, #40	@ 0x28
 801250c:	9005      	str	r0, [sp, #20]
 801250e:	f7ff fe60 	bl	80121d2 <_ZL12read_sleb128PKhPl>
 8012512:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012514:	2f00      	cmp	r7, #0
 8012516:	d060      	beq.n	80125da <__gxx_personality_v0+0x272>
 8012518:	dd3a      	ble.n	8012590 <__gxx_personality_v0+0x228>
 801251a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801251e:	d033      	beq.n	8012588 <__gxx_personality_v0+0x220>
 8012520:	f00b 0307 	and.w	r3, fp, #7
 8012524:	2b04      	cmp	r3, #4
 8012526:	f63f af6b 	bhi.w	8012400 <__gxx_personality_v0+0x98>
 801252a:	a201      	add	r2, pc, #4	@ (adr r2, 8012530 <__gxx_personality_v0+0x1c8>)
 801252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012530:	0801258d 	.word	0x0801258d
 8012534:	08012401 	.word	0x08012401
 8012538:	0801255b 	.word	0x0801255b
 801253c:	0801258d 	.word	0x0801258d
 8012540:	08012585 	.word	0x08012585
 8012544:	463a      	mov	r2, r7
 8012546:	e77c      	b.n	8012442 <__gxx_personality_v0+0xda>
 8012548:	79e3      	ldrb	r3, [r4, #7]
 801254a:	2b01      	cmp	r3, #1
 801254c:	bf0c      	ite	eq
 801254e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8012552:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 8012556:	9307      	str	r3, [sp, #28]
 8012558:	e7d2      	b.n	8012500 <__gxx_personality_v0+0x198>
 801255a:	2202      	movs	r2, #2
 801255c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801255e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012560:	fb07 1212 	mls	r2, r7, r2, r1
 8012564:	4658      	mov	r0, fp
 8012566:	9902      	ldr	r1, [sp, #8]
 8012568:	f7ff fe4b 	bl	8012202 <_ZL28read_encoded_value_with_basehjPKhPj>
 801256c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801256e:	b131      	cbz	r1, 801257e <__gxx_personality_v0+0x216>
 8012570:	b33c      	cbz	r4, 80125c2 <__gxx_personality_v0+0x25a>
 8012572:	ab07      	add	r3, sp, #28
 8012574:	2200      	movs	r2, #0
 8012576:	4620      	mov	r0, r4
 8012578:	f7ff fd76 	bl	8012068 <__cxa_type_match>
 801257c:	b308      	cbz	r0, 80125c2 <__gxx_personality_v0+0x25a>
 801257e:	f04f 0a03 	mov.w	sl, #3
 8012582:	e765      	b.n	8012450 <__gxx_personality_v0+0xe8>
 8012584:	2208      	movs	r2, #8
 8012586:	e7e9      	b.n	801255c <__gxx_personality_v0+0x1f4>
 8012588:	2200      	movs	r2, #0
 801258a:	e7e7      	b.n	801255c <__gxx_personality_v0+0x1f4>
 801258c:	2204      	movs	r2, #4
 801258e:	e7e5      	b.n	801255c <__gxx_personality_v0+0x1f4>
 8012590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012592:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8012596:	1bd2      	subs	r2, r2, r7
 8012598:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 801259c:	b1c4      	cbz	r4, 80125d0 <__gxx_personality_v0+0x268>
 801259e:	9904      	ldr	r1, [sp, #16]
 80125a0:	b9b1      	cbnz	r1, 80125d0 <__gxx_personality_v0+0x268>
 80125a2:	9b07      	ldr	r3, [sp, #28]
 80125a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125a6:	f1aa 0a04 	sub.w	sl, sl, #4
 80125aa:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 80125ae:	2900      	cmp	r1, #0
 80125b0:	d0e5      	beq.n	801257e <__gxx_personality_v0+0x216>
 80125b2:	ab0b      	add	r3, sp, #44	@ 0x2c
 80125b4:	2200      	movs	r2, #0
 80125b6:	4451      	add	r1, sl
 80125b8:	4620      	mov	r0, r4
 80125ba:	f7ff fd55 	bl	8012068 <__cxa_type_match>
 80125be:	2800      	cmp	r0, #0
 80125c0:	d0f3      	beq.n	80125aa <__gxx_personality_v0+0x242>
 80125c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d059      	beq.n	801267c <__gxx_personality_v0+0x314>
 80125c8:	9b05      	ldr	r3, [sp, #20]
 80125ca:	4403      	add	r3, r0
 80125cc:	4618      	mov	r0, r3
 80125ce:	e799      	b.n	8012504 <__gxx_personality_v0+0x19c>
 80125d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d1f4      	bne.n	80125c2 <__gxx_personality_v0+0x25a>
 80125d8:	e7d1      	b.n	801257e <__gxx_personality_v0+0x216>
 80125da:	2301      	movs	r3, #1
 80125dc:	9303      	str	r3, [sp, #12]
 80125de:	e7f0      	b.n	80125c2 <__gxx_personality_v0+0x25a>
 80125e0:	2f00      	cmp	r7, #0
 80125e2:	da1f      	bge.n	8012624 <__gxx_personality_v0+0x2bc>
 80125e4:	f000 f870 	bl	80126c8 <_ZSt10unexpectedv>
 80125e8:	f1ba 0f01 	cmp.w	sl, #1
 80125ec:	d102      	bne.n	80125f4 <__gxx_personality_v0+0x28c>
 80125ee:	4620      	mov	r0, r4
 80125f0:	f000 f940 	bl	8012874 <__cxa_call_terminate>
 80125f4:	2f00      	cmp	r7, #0
 80125f6:	da15      	bge.n	8012624 <__gxx_personality_v0+0x2bc>
 80125f8:	aa0c      	add	r2, sp, #48	@ 0x30
 80125fa:	4649      	mov	r1, r9
 80125fc:	4630      	mov	r0, r6
 80125fe:	f7ff fe77 	bl	80122f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8012602:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012606:	4631      	mov	r1, r6
 8012608:	f7ff fe41 	bl	801228e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801260c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801260e:	43fa      	mvns	r2, r7
 8012610:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012614:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8012618:	bb52      	cbnz	r2, 8012670 <__gxx_personality_v0+0x308>
 801261a:	2204      	movs	r2, #4
 801261c:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 8012620:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8012624:	2300      	movs	r3, #0
 8012626:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012628:	461a      	mov	r2, r3
 801262a:	4619      	mov	r1, r3
 801262c:	9500      	str	r5, [sp, #0]
 801262e:	4630      	mov	r0, r6
 8012630:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012632:	f7ee fe9d 	bl	8001370 <_Unwind_VRS_Set>
 8012636:	2300      	movs	r3, #0
 8012638:	4619      	mov	r1, r3
 801263a:	2201      	movs	r2, #1
 801263c:	9500      	str	r5, [sp, #0]
 801263e:	4630      	mov	r0, r6
 8012640:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012642:	f7ee fe95 	bl	8001370 <_Unwind_VRS_Set>
 8012646:	210f      	movs	r1, #15
 8012648:	4630      	mov	r0, r6
 801264a:	f7ff fe80 	bl	801234e <_Unwind_GetGR>
 801264e:	f000 0001 	and.w	r0, r0, #1
 8012652:	ea40 0008 	orr.w	r0, r0, r8
 8012656:	2300      	movs	r3, #0
 8012658:	900b      	str	r0, [sp, #44]	@ 0x2c
 801265a:	9500      	str	r5, [sp, #0]
 801265c:	220f      	movs	r2, #15
 801265e:	4619      	mov	r1, r3
 8012660:	4630      	mov	r0, r6
 8012662:	f7ee fe85 	bl	8001370 <_Unwind_VRS_Set>
 8012666:	f1ba 0f02 	cmp.w	sl, #2
 801266a:	d003      	beq.n	8012674 <__gxx_personality_v0+0x30c>
 801266c:	2007      	movs	r0, #7
 801266e:	e693      	b.n	8012398 <__gxx_personality_v0+0x30>
 8012670:	3501      	adds	r5, #1
 8012672:	e7cf      	b.n	8012614 <__gxx_personality_v0+0x2ac>
 8012674:	4620      	mov	r0, r4
 8012676:	f7ff fd55 	bl	8012124 <__cxa_begin_cleanup>
 801267a:	e7f7      	b.n	801266c <__gxx_personality_v0+0x304>
 801267c:	9b03      	ldr	r3, [sp, #12]
 801267e:	2b00      	cmp	r3, #0
 8012680:	f43f ae84 	beq.w	801238c <__gxx_personality_v0+0x24>
 8012684:	2700      	movs	r7, #0
 8012686:	f04f 0a02 	mov.w	sl, #2
 801268a:	e6e1      	b.n	8012450 <__gxx_personality_v0+0xe8>

0801268c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801268c:	b508      	push	{r3, lr}
 801268e:	4780      	blx	r0
 8012690:	f002 f8ea 	bl	8014868 <abort>

08012694 <_ZSt13get_terminatev>:
 8012694:	4b02      	ldr	r3, [pc, #8]	@ (80126a0 <_ZSt13get_terminatev+0xc>)
 8012696:	6818      	ldr	r0, [r3, #0]
 8012698:	f3bf 8f5b 	dmb	ish
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	20000020 	.word	0x20000020

080126a4 <_ZSt9terminatev>:
 80126a4:	b508      	push	{r3, lr}
 80126a6:	f7ff fff5 	bl	8012694 <_ZSt13get_terminatev>
 80126aa:	f7ff ffef 	bl	801268c <_ZN10__cxxabiv111__terminateEPFvvE>

080126ae <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80126ae:	b508      	push	{r3, lr}
 80126b0:	4780      	blx	r0
 80126b2:	f7ff fff7 	bl	80126a4 <_ZSt9terminatev>
	...

080126b8 <_ZSt14get_unexpectedv>:
 80126b8:	4b02      	ldr	r3, [pc, #8]	@ (80126c4 <_ZSt14get_unexpectedv+0xc>)
 80126ba:	6818      	ldr	r0, [r3, #0]
 80126bc:	f3bf 8f5b 	dmb	ish
 80126c0:	4770      	bx	lr
 80126c2:	bf00      	nop
 80126c4:	2000001c 	.word	0x2000001c

080126c8 <_ZSt10unexpectedv>:
 80126c8:	b508      	push	{r3, lr}
 80126ca:	f7ff fff5 	bl	80126b8 <_ZSt14get_unexpectedv>
 80126ce:	f7ff ffee 	bl	80126ae <_ZN10__cxxabiv112__unexpectedEPFvvE>

080126d2 <_Znwj>:
 80126d2:	2801      	cmp	r0, #1
 80126d4:	bf38      	it	cc
 80126d6:	2001      	movcc	r0, #1
 80126d8:	b510      	push	{r4, lr}
 80126da:	4604      	mov	r4, r0
 80126dc:	4620      	mov	r0, r4
 80126de:	f002 f8cb 	bl	8014878 <malloc>
 80126e2:	b100      	cbz	r0, 80126e6 <_Znwj+0x14>
 80126e4:	bd10      	pop	{r4, pc}
 80126e6:	f000 f92f 	bl	8012948 <_ZSt15get_new_handlerv>
 80126ea:	b908      	cbnz	r0, 80126f0 <_Znwj+0x1e>
 80126ec:	f002 f8bc 	bl	8014868 <abort>
 80126f0:	4780      	blx	r0
 80126f2:	e7f3      	b.n	80126dc <_Znwj+0xa>

080126f4 <_Znaj>:
 80126f4:	f7ff bfed 	b.w	80126d2 <_Znwj>

080126f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80126f8:	b510      	push	{r4, lr}
 80126fa:	4b03      	ldr	r3, [pc, #12]	@ (8012708 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80126fc:	6003      	str	r3, [r0, #0]
 80126fe:	4604      	mov	r4, r0
 8012700:	f7ff fc38 	bl	8011f74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012704:	4620      	mov	r0, r4
 8012706:	bd10      	pop	{r4, pc}
 8012708:	08018aa8 	.word	0x08018aa8

0801270c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801270c:	b510      	push	{r4, lr}
 801270e:	4604      	mov	r4, r0
 8012710:	f7ff fff2 	bl	80126f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8012714:	4620      	mov	r0, r4
 8012716:	210c      	movs	r1, #12
 8012718:	f7ff fc80 	bl	801201c <_ZdlPvj>
 801271c:	4620      	mov	r0, r4
 801271e:	bd10      	pop	{r4, pc}

08012720 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8012720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012724:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012728:	4590      	cmp	r8, r2
 801272a:	4606      	mov	r6, r0
 801272c:	460f      	mov	r7, r1
 801272e:	4615      	mov	r5, r2
 8012730:	461c      	mov	r4, r3
 8012732:	d00b      	beq.n	801274c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8012734:	68b0      	ldr	r0, [r6, #8]
 8012736:	6803      	ldr	r3, [r0, #0]
 8012738:	f8cd 8018 	str.w	r8, [sp, #24]
 801273c:	6a1e      	ldr	r6, [r3, #32]
 801273e:	462a      	mov	r2, r5
 8012740:	4623      	mov	r3, r4
 8012742:	4639      	mov	r1, r7
 8012744:	46b4      	mov	ip, r6
 8012746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801274a:	4760      	bx	ip
 801274c:	4619      	mov	r1, r3
 801274e:	f000 f857 	bl	8012800 <_ZNKSt9type_info7__equalERKS_>
 8012752:	2800      	cmp	r0, #0
 8012754:	d0ee      	beq.n	8012734 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8012756:	2006      	movs	r0, #6
 8012758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801275c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801275c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012760:	460d      	mov	r5, r1
 8012762:	4619      	mov	r1, r3
 8012764:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8012768:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801276c:	4681      	mov	r9, r0
 801276e:	4617      	mov	r7, r2
 8012770:	4698      	mov	r8, r3
 8012772:	f000 f845 	bl	8012800 <_ZNKSt9type_info7__equalERKS_>
 8012776:	b190      	cbz	r0, 801279e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8012778:	2d00      	cmp	r5, #0
 801277a:	6034      	str	r4, [r6, #0]
 801277c:	7137      	strb	r7, [r6, #4]
 801277e:	db09      	blt.n	8012794 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8012780:	442c      	add	r4, r5
 8012782:	45a2      	cmp	sl, r4
 8012784:	bf14      	ite	ne
 8012786:	2401      	movne	r4, #1
 8012788:	2406      	moveq	r4, #6
 801278a:	71b4      	strb	r4, [r6, #6]
 801278c:	2000      	movs	r0, #0
 801278e:	b001      	add	sp, #4
 8012790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012794:	3502      	adds	r5, #2
 8012796:	d1f9      	bne.n	801278c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012798:	2301      	movs	r3, #1
 801279a:	71b3      	strb	r3, [r6, #6]
 801279c:	e7f6      	b.n	801278c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801279e:	4554      	cmp	r4, sl
 80127a0:	d106      	bne.n	80127b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80127a2:	4659      	mov	r1, fp
 80127a4:	4648      	mov	r0, r9
 80127a6:	f000 f82b 	bl	8012800 <_ZNKSt9type_info7__equalERKS_>
 80127aa:	b108      	cbz	r0, 80127b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80127ac:	7177      	strb	r7, [r6, #5]
 80127ae:	e7ed      	b.n	801278c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80127b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80127b4:	6803      	ldr	r3, [r0, #0]
 80127b6:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 80127ba:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 80127be:	69dc      	ldr	r4, [r3, #28]
 80127c0:	463a      	mov	r2, r7
 80127c2:	4643      	mov	r3, r8
 80127c4:	4629      	mov	r1, r5
 80127c6:	46a4      	mov	ip, r4
 80127c8:	b001      	add	sp, #4
 80127ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ce:	4760      	bx	ip

080127d0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80127d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127d4:	4607      	mov	r7, r0
 80127d6:	460c      	mov	r4, r1
 80127d8:	4615      	mov	r5, r2
 80127da:	461e      	mov	r6, r3
 80127dc:	f7ff fbfd 	bl	8011fda <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80127e0:	b948      	cbnz	r0, 80127f6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80127e2:	68b8      	ldr	r0, [r7, #8]
 80127e4:	6803      	ldr	r3, [r0, #0]
 80127e6:	699f      	ldr	r7, [r3, #24]
 80127e8:	462a      	mov	r2, r5
 80127ea:	4633      	mov	r3, r6
 80127ec:	4621      	mov	r1, r4
 80127ee:	46bc      	mov	ip, r7
 80127f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127f4:	4760      	bx	ip
 80127f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080127fa <_ZNSt9type_infoD1Ev>:
 80127fa:	4770      	bx	lr

080127fc <_ZNKSt9type_info14__is_pointer_pEv>:
 80127fc:	2000      	movs	r0, #0
 80127fe:	4770      	bx	lr

08012800 <_ZNKSt9type_info7__equalERKS_>:
 8012800:	4281      	cmp	r1, r0
 8012802:	b508      	push	{r3, lr}
 8012804:	d00e      	beq.n	8012824 <_ZNKSt9type_info7__equalERKS_+0x24>
 8012806:	6840      	ldr	r0, [r0, #4]
 8012808:	7803      	ldrb	r3, [r0, #0]
 801280a:	2b2a      	cmp	r3, #42	@ 0x2a
 801280c:	d00c      	beq.n	8012828 <_ZNKSt9type_info7__equalERKS_+0x28>
 801280e:	6849      	ldr	r1, [r1, #4]
 8012810:	780b      	ldrb	r3, [r1, #0]
 8012812:	2b2a      	cmp	r3, #42	@ 0x2a
 8012814:	bf08      	it	eq
 8012816:	3101      	addeq	r1, #1
 8012818:	f7ed fcfa 	bl	8000210 <strcmp>
 801281c:	fab0 f080 	clz	r0, r0
 8012820:	0940      	lsrs	r0, r0, #5
 8012822:	bd08      	pop	{r3, pc}
 8012824:	2001      	movs	r0, #1
 8012826:	e7fc      	b.n	8012822 <_ZNKSt9type_info7__equalERKS_+0x22>
 8012828:	2000      	movs	r0, #0
 801282a:	e7fa      	b.n	8012822 <_ZNKSt9type_info7__equalERKS_+0x22>

0801282c <__aeabi_atexit>:
 801282c:	460b      	mov	r3, r1
 801282e:	4601      	mov	r1, r0
 8012830:	4618      	mov	r0, r3
 8012832:	f002 b8df 	b.w	80149f4 <__cxa_atexit>

08012836 <_ZdlPv>:
 8012836:	f002 b827 	b.w	8014888 <free>

0801283a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 801283a:	7803      	ldrb	r3, [r0, #0]
 801283c:	2b47      	cmp	r3, #71	@ 0x47
 801283e:	d117      	bne.n	8012870 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012840:	7843      	ldrb	r3, [r0, #1]
 8012842:	2b4e      	cmp	r3, #78	@ 0x4e
 8012844:	d114      	bne.n	8012870 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012846:	7883      	ldrb	r3, [r0, #2]
 8012848:	2b55      	cmp	r3, #85	@ 0x55
 801284a:	d111      	bne.n	8012870 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801284c:	78c3      	ldrb	r3, [r0, #3]
 801284e:	2b43      	cmp	r3, #67	@ 0x43
 8012850:	d10e      	bne.n	8012870 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012852:	7903      	ldrb	r3, [r0, #4]
 8012854:	2b43      	cmp	r3, #67	@ 0x43
 8012856:	d10b      	bne.n	8012870 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012858:	7943      	ldrb	r3, [r0, #5]
 801285a:	2b2b      	cmp	r3, #43	@ 0x2b
 801285c:	d108      	bne.n	8012870 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801285e:	7983      	ldrb	r3, [r0, #6]
 8012860:	2b2b      	cmp	r3, #43	@ 0x2b
 8012862:	d105      	bne.n	8012870 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012864:	79c0      	ldrb	r0, [r0, #7]
 8012866:	2801      	cmp	r0, #1
 8012868:	bf8c      	ite	hi
 801286a:	2000      	movhi	r0, #0
 801286c:	2001      	movls	r0, #1
 801286e:	4770      	bx	lr
 8012870:	2000      	movs	r0, #0
 8012872:	4770      	bx	lr

08012874 <__cxa_call_terminate>:
 8012874:	b510      	push	{r4, lr}
 8012876:	4604      	mov	r4, r0
 8012878:	b148      	cbz	r0, 801288e <__cxa_call_terminate+0x1a>
 801287a:	f000 f83b 	bl	80128f4 <__cxa_begin_catch>
 801287e:	4620      	mov	r0, r4
 8012880:	f7ff ffdb 	bl	801283a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012884:	b118      	cbz	r0, 801288e <__cxa_call_terminate+0x1a>
 8012886:	f854 0c14 	ldr.w	r0, [r4, #-20]
 801288a:	f7ff feff 	bl	801268c <_ZN10__cxxabiv111__terminateEPFvvE>
 801288e:	f7ff ff09 	bl	80126a4 <_ZSt9terminatev>

08012892 <__cxa_call_unexpected>:
 8012892:	b538      	push	{r3, r4, r5, lr}
 8012894:	4602      	mov	r2, r0
 8012896:	f7ff ffd0 	bl	801283a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801289a:	4604      	mov	r4, r0
 801289c:	b140      	cbz	r0, 80128b0 <__cxa_call_unexpected+0x1e>
 801289e:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80128a2:	2500      	movs	r5, #0
 80128a4:	4610      	mov	r0, r2
 80128a6:	f000 f825 	bl	80128f4 <__cxa_begin_catch>
 80128aa:	b11d      	cbz	r5, 80128b4 <__cxa_call_unexpected+0x22>
 80128ac:	f7ff ff0c 	bl	80126c8 <_ZSt10unexpectedv>
 80128b0:	2501      	movs	r5, #1
 80128b2:	e7f7      	b.n	80128a4 <__cxa_call_unexpected+0x12>
 80128b4:	4620      	mov	r0, r4
 80128b6:	f7ff fefa 	bl	80126ae <_ZN10__cxxabiv112__unexpectedEPFvvE>

080128ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80128ba:	7803      	ldrb	r3, [r0, #0]
 80128bc:	2b47      	cmp	r3, #71	@ 0x47
 80128be:	d117      	bne.n	80128f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80128c0:	7843      	ldrb	r3, [r0, #1]
 80128c2:	2b4e      	cmp	r3, #78	@ 0x4e
 80128c4:	d114      	bne.n	80128f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80128c6:	7883      	ldrb	r3, [r0, #2]
 80128c8:	2b55      	cmp	r3, #85	@ 0x55
 80128ca:	d111      	bne.n	80128f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80128cc:	78c3      	ldrb	r3, [r0, #3]
 80128ce:	2b43      	cmp	r3, #67	@ 0x43
 80128d0:	d10e      	bne.n	80128f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80128d2:	7903      	ldrb	r3, [r0, #4]
 80128d4:	2b43      	cmp	r3, #67	@ 0x43
 80128d6:	d10b      	bne.n	80128f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80128d8:	7943      	ldrb	r3, [r0, #5]
 80128da:	2b2b      	cmp	r3, #43	@ 0x2b
 80128dc:	d108      	bne.n	80128f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80128de:	7983      	ldrb	r3, [r0, #6]
 80128e0:	2b2b      	cmp	r3, #43	@ 0x2b
 80128e2:	d105      	bne.n	80128f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80128e4:	79c0      	ldrb	r0, [r0, #7]
 80128e6:	2801      	cmp	r0, #1
 80128e8:	bf8c      	ite	hi
 80128ea:	2000      	movhi	r0, #0
 80128ec:	2001      	movls	r0, #1
 80128ee:	4770      	bx	lr
 80128f0:	2000      	movs	r0, #0
 80128f2:	4770      	bx	lr

080128f4 <__cxa_begin_catch>:
 80128f4:	b538      	push	{r3, r4, r5, lr}
 80128f6:	4604      	mov	r4, r0
 80128f8:	f7ff fc4c 	bl	8012194 <__cxa_get_globals>
 80128fc:	6805      	ldr	r5, [r0, #0]
 80128fe:	4602      	mov	r2, r0
 8012900:	4620      	mov	r0, r4
 8012902:	f1a4 0120 	sub.w	r1, r4, #32
 8012906:	f7ff ffd8 	bl	80128ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801290a:	b928      	cbnz	r0, 8012918 <__cxa_begin_catch+0x24>
 801290c:	b10d      	cbz	r5, 8012912 <__cxa_begin_catch+0x1e>
 801290e:	f7ff fec9 	bl	80126a4 <_ZSt9terminatev>
 8012912:	6011      	str	r1, [r2, #0]
 8012914:	4628      	mov	r0, r5
 8012916:	bd38      	pop	{r3, r4, r5, pc}
 8012918:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801291c:	2b00      	cmp	r3, #0
 801291e:	bfb4      	ite	lt
 8012920:	f1c3 0301 	rsblt	r3, r3, #1
 8012924:	3301      	addge	r3, #1
 8012926:	f844 3c0c 	str.w	r3, [r4, #-12]
 801292a:	6853      	ldr	r3, [r2, #4]
 801292c:	428d      	cmp	r5, r1
 801292e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012932:	6053      	str	r3, [r2, #4]
 8012934:	4620      	mov	r0, r4
 8012936:	bf1c      	itt	ne
 8012938:	f844 5c10 	strne.w	r5, [r4, #-16]
 801293c:	6011      	strne	r1, [r2, #0]
 801293e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8012940:	f7ee fce8 	bl	8001314 <_Unwind_Complete>
 8012944:	e7e6      	b.n	8012914 <__cxa_begin_catch+0x20>
	...

08012948 <_ZSt15get_new_handlerv>:
 8012948:	4b02      	ldr	r3, [pc, #8]	@ (8012954 <_ZSt15get_new_handlerv+0xc>)
 801294a:	6818      	ldr	r0, [r3, #0]
 801294c:	f3bf 8f5b 	dmb	ish
 8012950:	4770      	bx	lr
 8012952:	bf00      	nop
 8012954:	200005d0 	.word	0x200005d0

08012958 <pow>:
 8012958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801295a:	ed2d 8b02 	vpush	{d8}
 801295e:	eeb0 8a40 	vmov.f32	s16, s0
 8012962:	eef0 8a60 	vmov.f32	s17, s1
 8012966:	ec55 4b11 	vmov	r4, r5, d1
 801296a:	f000 fba5 	bl	80130b8 <__ieee754_pow>
 801296e:	4622      	mov	r2, r4
 8012970:	462b      	mov	r3, r5
 8012972:	4620      	mov	r0, r4
 8012974:	4629      	mov	r1, r5
 8012976:	ec57 6b10 	vmov	r6, r7, d0
 801297a:	f7ee f907 	bl	8000b8c <__aeabi_dcmpun>
 801297e:	2800      	cmp	r0, #0
 8012980:	d13b      	bne.n	80129fa <pow+0xa2>
 8012982:	ec51 0b18 	vmov	r0, r1, d8
 8012986:	2200      	movs	r2, #0
 8012988:	2300      	movs	r3, #0
 801298a:	f7ee f8cd 	bl	8000b28 <__aeabi_dcmpeq>
 801298e:	b1b8      	cbz	r0, 80129c0 <pow+0x68>
 8012990:	2200      	movs	r2, #0
 8012992:	2300      	movs	r3, #0
 8012994:	4620      	mov	r0, r4
 8012996:	4629      	mov	r1, r5
 8012998:	f7ee f8c6 	bl	8000b28 <__aeabi_dcmpeq>
 801299c:	2800      	cmp	r0, #0
 801299e:	d146      	bne.n	8012a2e <pow+0xd6>
 80129a0:	ec45 4b10 	vmov	d0, r4, r5
 80129a4:	f000 f91c 	bl	8012be0 <finite>
 80129a8:	b338      	cbz	r0, 80129fa <pow+0xa2>
 80129aa:	2200      	movs	r2, #0
 80129ac:	2300      	movs	r3, #0
 80129ae:	4620      	mov	r0, r4
 80129b0:	4629      	mov	r1, r5
 80129b2:	f7ee f8c3 	bl	8000b3c <__aeabi_dcmplt>
 80129b6:	b300      	cbz	r0, 80129fa <pow+0xa2>
 80129b8:	f002 fe4e 	bl	8015658 <__errno>
 80129bc:	2322      	movs	r3, #34	@ 0x22
 80129be:	e01b      	b.n	80129f8 <pow+0xa0>
 80129c0:	ec47 6b10 	vmov	d0, r6, r7
 80129c4:	f000 f90c 	bl	8012be0 <finite>
 80129c8:	b9e0      	cbnz	r0, 8012a04 <pow+0xac>
 80129ca:	eeb0 0a48 	vmov.f32	s0, s16
 80129ce:	eef0 0a68 	vmov.f32	s1, s17
 80129d2:	f000 f905 	bl	8012be0 <finite>
 80129d6:	b1a8      	cbz	r0, 8012a04 <pow+0xac>
 80129d8:	ec45 4b10 	vmov	d0, r4, r5
 80129dc:	f000 f900 	bl	8012be0 <finite>
 80129e0:	b180      	cbz	r0, 8012a04 <pow+0xac>
 80129e2:	4632      	mov	r2, r6
 80129e4:	463b      	mov	r3, r7
 80129e6:	4630      	mov	r0, r6
 80129e8:	4639      	mov	r1, r7
 80129ea:	f7ee f8cf 	bl	8000b8c <__aeabi_dcmpun>
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d0e2      	beq.n	80129b8 <pow+0x60>
 80129f2:	f002 fe31 	bl	8015658 <__errno>
 80129f6:	2321      	movs	r3, #33	@ 0x21
 80129f8:	6003      	str	r3, [r0, #0]
 80129fa:	ecbd 8b02 	vpop	{d8}
 80129fe:	ec47 6b10 	vmov	d0, r6, r7
 8012a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a04:	2200      	movs	r2, #0
 8012a06:	2300      	movs	r3, #0
 8012a08:	4630      	mov	r0, r6
 8012a0a:	4639      	mov	r1, r7
 8012a0c:	f7ee f88c 	bl	8000b28 <__aeabi_dcmpeq>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d0f2      	beq.n	80129fa <pow+0xa2>
 8012a14:	eeb0 0a48 	vmov.f32	s0, s16
 8012a18:	eef0 0a68 	vmov.f32	s1, s17
 8012a1c:	f000 f8e0 	bl	8012be0 <finite>
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d0ea      	beq.n	80129fa <pow+0xa2>
 8012a24:	ec45 4b10 	vmov	d0, r4, r5
 8012a28:	f000 f8da 	bl	8012be0 <finite>
 8012a2c:	e7c3      	b.n	80129b6 <pow+0x5e>
 8012a2e:	4f01      	ldr	r7, [pc, #4]	@ (8012a34 <pow+0xdc>)
 8012a30:	2600      	movs	r6, #0
 8012a32:	e7e2      	b.n	80129fa <pow+0xa2>
 8012a34:	3ff00000 	.word	0x3ff00000

08012a38 <sqrt>:
 8012a38:	b538      	push	{r3, r4, r5, lr}
 8012a3a:	ed2d 8b02 	vpush	{d8}
 8012a3e:	ec55 4b10 	vmov	r4, r5, d0
 8012a42:	f000 f8d9 	bl	8012bf8 <__ieee754_sqrt>
 8012a46:	4622      	mov	r2, r4
 8012a48:	462b      	mov	r3, r5
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	4629      	mov	r1, r5
 8012a4e:	eeb0 8a40 	vmov.f32	s16, s0
 8012a52:	eef0 8a60 	vmov.f32	s17, s1
 8012a56:	f7ee f899 	bl	8000b8c <__aeabi_dcmpun>
 8012a5a:	b990      	cbnz	r0, 8012a82 <sqrt+0x4a>
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	2300      	movs	r3, #0
 8012a60:	4620      	mov	r0, r4
 8012a62:	4629      	mov	r1, r5
 8012a64:	f7ee f86a 	bl	8000b3c <__aeabi_dcmplt>
 8012a68:	b158      	cbz	r0, 8012a82 <sqrt+0x4a>
 8012a6a:	f002 fdf5 	bl	8015658 <__errno>
 8012a6e:	2321      	movs	r3, #33	@ 0x21
 8012a70:	6003      	str	r3, [r0, #0]
 8012a72:	2200      	movs	r2, #0
 8012a74:	2300      	movs	r3, #0
 8012a76:	4610      	mov	r0, r2
 8012a78:	4619      	mov	r1, r3
 8012a7a:	f7ed ff17 	bl	80008ac <__aeabi_ddiv>
 8012a7e:	ec41 0b18 	vmov	d8, r0, r1
 8012a82:	eeb0 0a48 	vmov.f32	s0, s16
 8012a86:	eef0 0a68 	vmov.f32	s1, s17
 8012a8a:	ecbd 8b02 	vpop	{d8}
 8012a8e:	bd38      	pop	{r3, r4, r5, pc}

08012a90 <cos>:
 8012a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a92:	ec53 2b10 	vmov	r2, r3, d0
 8012a96:	4826      	ldr	r0, [pc, #152]	@ (8012b30 <cos+0xa0>)
 8012a98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012a9c:	4281      	cmp	r1, r0
 8012a9e:	d806      	bhi.n	8012aae <cos+0x1e>
 8012aa0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012b28 <cos+0x98>
 8012aa4:	b005      	add	sp, #20
 8012aa6:	f85d eb04 	ldr.w	lr, [sp], #4
 8012aaa:	f000 b981 	b.w	8012db0 <__kernel_cos>
 8012aae:	4821      	ldr	r0, [pc, #132]	@ (8012b34 <cos+0xa4>)
 8012ab0:	4281      	cmp	r1, r0
 8012ab2:	d908      	bls.n	8012ac6 <cos+0x36>
 8012ab4:	4610      	mov	r0, r2
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	f7ed fc16 	bl	80002e8 <__aeabi_dsub>
 8012abc:	ec41 0b10 	vmov	d0, r0, r1
 8012ac0:	b005      	add	sp, #20
 8012ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ac6:	4668      	mov	r0, sp
 8012ac8:	f001 f83a 	bl	8013b40 <__ieee754_rem_pio2>
 8012acc:	f000 0003 	and.w	r0, r0, #3
 8012ad0:	2801      	cmp	r0, #1
 8012ad2:	d00b      	beq.n	8012aec <cos+0x5c>
 8012ad4:	2802      	cmp	r0, #2
 8012ad6:	d015      	beq.n	8012b04 <cos+0x74>
 8012ad8:	b9d8      	cbnz	r0, 8012b12 <cos+0x82>
 8012ada:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ade:	ed9d 0b00 	vldr	d0, [sp]
 8012ae2:	f000 f965 	bl	8012db0 <__kernel_cos>
 8012ae6:	ec51 0b10 	vmov	r0, r1, d0
 8012aea:	e7e7      	b.n	8012abc <cos+0x2c>
 8012aec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012af0:	ed9d 0b00 	vldr	d0, [sp]
 8012af4:	f000 fa24 	bl	8012f40 <__kernel_sin>
 8012af8:	ec53 2b10 	vmov	r2, r3, d0
 8012afc:	4610      	mov	r0, r2
 8012afe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012b02:	e7db      	b.n	8012abc <cos+0x2c>
 8012b04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b08:	ed9d 0b00 	vldr	d0, [sp]
 8012b0c:	f000 f950 	bl	8012db0 <__kernel_cos>
 8012b10:	e7f2      	b.n	8012af8 <cos+0x68>
 8012b12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b16:	ed9d 0b00 	vldr	d0, [sp]
 8012b1a:	2001      	movs	r0, #1
 8012b1c:	f000 fa10 	bl	8012f40 <__kernel_sin>
 8012b20:	e7e1      	b.n	8012ae6 <cos+0x56>
 8012b22:	bf00      	nop
 8012b24:	f3af 8000 	nop.w
	...
 8012b30:	3fe921fb 	.word	0x3fe921fb
 8012b34:	7fefffff 	.word	0x7fefffff

08012b38 <sin>:
 8012b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b3a:	ec53 2b10 	vmov	r2, r3, d0
 8012b3e:	4826      	ldr	r0, [pc, #152]	@ (8012bd8 <sin+0xa0>)
 8012b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012b44:	4281      	cmp	r1, r0
 8012b46:	d807      	bhi.n	8012b58 <sin+0x20>
 8012b48:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012bd0 <sin+0x98>
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	b005      	add	sp, #20
 8012b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b54:	f000 b9f4 	b.w	8012f40 <__kernel_sin>
 8012b58:	4820      	ldr	r0, [pc, #128]	@ (8012bdc <sin+0xa4>)
 8012b5a:	4281      	cmp	r1, r0
 8012b5c:	d908      	bls.n	8012b70 <sin+0x38>
 8012b5e:	4610      	mov	r0, r2
 8012b60:	4619      	mov	r1, r3
 8012b62:	f7ed fbc1 	bl	80002e8 <__aeabi_dsub>
 8012b66:	ec41 0b10 	vmov	d0, r0, r1
 8012b6a:	b005      	add	sp, #20
 8012b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b70:	4668      	mov	r0, sp
 8012b72:	f000 ffe5 	bl	8013b40 <__ieee754_rem_pio2>
 8012b76:	f000 0003 	and.w	r0, r0, #3
 8012b7a:	2801      	cmp	r0, #1
 8012b7c:	d00c      	beq.n	8012b98 <sin+0x60>
 8012b7e:	2802      	cmp	r0, #2
 8012b80:	d011      	beq.n	8012ba6 <sin+0x6e>
 8012b82:	b9e8      	cbnz	r0, 8012bc0 <sin+0x88>
 8012b84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b88:	ed9d 0b00 	vldr	d0, [sp]
 8012b8c:	2001      	movs	r0, #1
 8012b8e:	f000 f9d7 	bl	8012f40 <__kernel_sin>
 8012b92:	ec51 0b10 	vmov	r0, r1, d0
 8012b96:	e7e6      	b.n	8012b66 <sin+0x2e>
 8012b98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b9c:	ed9d 0b00 	vldr	d0, [sp]
 8012ba0:	f000 f906 	bl	8012db0 <__kernel_cos>
 8012ba4:	e7f5      	b.n	8012b92 <sin+0x5a>
 8012ba6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012baa:	ed9d 0b00 	vldr	d0, [sp]
 8012bae:	2001      	movs	r0, #1
 8012bb0:	f000 f9c6 	bl	8012f40 <__kernel_sin>
 8012bb4:	ec53 2b10 	vmov	r2, r3, d0
 8012bb8:	4610      	mov	r0, r2
 8012bba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012bbe:	e7d2      	b.n	8012b66 <sin+0x2e>
 8012bc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bc4:	ed9d 0b00 	vldr	d0, [sp]
 8012bc8:	f000 f8f2 	bl	8012db0 <__kernel_cos>
 8012bcc:	e7f2      	b.n	8012bb4 <sin+0x7c>
 8012bce:	bf00      	nop
	...
 8012bd8:	3fe921fb 	.word	0x3fe921fb
 8012bdc:	7fefffff 	.word	0x7fefffff

08012be0 <finite>:
 8012be0:	b082      	sub	sp, #8
 8012be2:	ed8d 0b00 	vstr	d0, [sp]
 8012be6:	9801      	ldr	r0, [sp, #4]
 8012be8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012bec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012bf0:	0fc0      	lsrs	r0, r0, #31
 8012bf2:	b002      	add	sp, #8
 8012bf4:	4770      	bx	lr
	...

08012bf8 <__ieee754_sqrt>:
 8012bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	4a68      	ldr	r2, [pc, #416]	@ (8012da0 <__ieee754_sqrt+0x1a8>)
 8012bfe:	ec55 4b10 	vmov	r4, r5, d0
 8012c02:	43aa      	bics	r2, r5
 8012c04:	462b      	mov	r3, r5
 8012c06:	4621      	mov	r1, r4
 8012c08:	d110      	bne.n	8012c2c <__ieee754_sqrt+0x34>
 8012c0a:	4622      	mov	r2, r4
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	4629      	mov	r1, r5
 8012c10:	f7ed fd22 	bl	8000658 <__aeabi_dmul>
 8012c14:	4602      	mov	r2, r0
 8012c16:	460b      	mov	r3, r1
 8012c18:	4620      	mov	r0, r4
 8012c1a:	4629      	mov	r1, r5
 8012c1c:	f7ed fb66 	bl	80002ec <__adddf3>
 8012c20:	4604      	mov	r4, r0
 8012c22:	460d      	mov	r5, r1
 8012c24:	ec45 4b10 	vmov	d0, r4, r5
 8012c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c2c:	2d00      	cmp	r5, #0
 8012c2e:	dc0e      	bgt.n	8012c4e <__ieee754_sqrt+0x56>
 8012c30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012c34:	4322      	orrs	r2, r4
 8012c36:	d0f5      	beq.n	8012c24 <__ieee754_sqrt+0x2c>
 8012c38:	b19d      	cbz	r5, 8012c62 <__ieee754_sqrt+0x6a>
 8012c3a:	4622      	mov	r2, r4
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	4629      	mov	r1, r5
 8012c40:	f7ed fb52 	bl	80002e8 <__aeabi_dsub>
 8012c44:	4602      	mov	r2, r0
 8012c46:	460b      	mov	r3, r1
 8012c48:	f7ed fe30 	bl	80008ac <__aeabi_ddiv>
 8012c4c:	e7e8      	b.n	8012c20 <__ieee754_sqrt+0x28>
 8012c4e:	152a      	asrs	r2, r5, #20
 8012c50:	d115      	bne.n	8012c7e <__ieee754_sqrt+0x86>
 8012c52:	2000      	movs	r0, #0
 8012c54:	e009      	b.n	8012c6a <__ieee754_sqrt+0x72>
 8012c56:	0acb      	lsrs	r3, r1, #11
 8012c58:	3a15      	subs	r2, #21
 8012c5a:	0549      	lsls	r1, r1, #21
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d0fa      	beq.n	8012c56 <__ieee754_sqrt+0x5e>
 8012c60:	e7f7      	b.n	8012c52 <__ieee754_sqrt+0x5a>
 8012c62:	462a      	mov	r2, r5
 8012c64:	e7fa      	b.n	8012c5c <__ieee754_sqrt+0x64>
 8012c66:	005b      	lsls	r3, r3, #1
 8012c68:	3001      	adds	r0, #1
 8012c6a:	02dc      	lsls	r4, r3, #11
 8012c6c:	d5fb      	bpl.n	8012c66 <__ieee754_sqrt+0x6e>
 8012c6e:	1e44      	subs	r4, r0, #1
 8012c70:	1b12      	subs	r2, r2, r4
 8012c72:	f1c0 0420 	rsb	r4, r0, #32
 8012c76:	fa21 f404 	lsr.w	r4, r1, r4
 8012c7a:	4323      	orrs	r3, r4
 8012c7c:	4081      	lsls	r1, r0
 8012c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012c8a:	07d2      	lsls	r2, r2, #31
 8012c8c:	bf5c      	itt	pl
 8012c8e:	005b      	lslpl	r3, r3, #1
 8012c90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012c98:	bf58      	it	pl
 8012c9a:	0049      	lslpl	r1, r1, #1
 8012c9c:	2600      	movs	r6, #0
 8012c9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012ca2:	106d      	asrs	r5, r5, #1
 8012ca4:	0049      	lsls	r1, r1, #1
 8012ca6:	2016      	movs	r0, #22
 8012ca8:	4632      	mov	r2, r6
 8012caa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012cae:	1917      	adds	r7, r2, r4
 8012cb0:	429f      	cmp	r7, r3
 8012cb2:	bfde      	ittt	le
 8012cb4:	193a      	addle	r2, r7, r4
 8012cb6:	1bdb      	suble	r3, r3, r7
 8012cb8:	1936      	addle	r6, r6, r4
 8012cba:	0fcf      	lsrs	r7, r1, #31
 8012cbc:	3801      	subs	r0, #1
 8012cbe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012cc2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012cc6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012cca:	d1f0      	bne.n	8012cae <__ieee754_sqrt+0xb6>
 8012ccc:	4604      	mov	r4, r0
 8012cce:	2720      	movs	r7, #32
 8012cd0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	eb00 0e0c 	add.w	lr, r0, ip
 8012cda:	db02      	blt.n	8012ce2 <__ieee754_sqrt+0xea>
 8012cdc:	d113      	bne.n	8012d06 <__ieee754_sqrt+0x10e>
 8012cde:	458e      	cmp	lr, r1
 8012ce0:	d811      	bhi.n	8012d06 <__ieee754_sqrt+0x10e>
 8012ce2:	f1be 0f00 	cmp.w	lr, #0
 8012ce6:	eb0e 000c 	add.w	r0, lr, ip
 8012cea:	da42      	bge.n	8012d72 <__ieee754_sqrt+0x17a>
 8012cec:	2800      	cmp	r0, #0
 8012cee:	db40      	blt.n	8012d72 <__ieee754_sqrt+0x17a>
 8012cf0:	f102 0801 	add.w	r8, r2, #1
 8012cf4:	1a9b      	subs	r3, r3, r2
 8012cf6:	458e      	cmp	lr, r1
 8012cf8:	bf88      	it	hi
 8012cfa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012cfe:	eba1 010e 	sub.w	r1, r1, lr
 8012d02:	4464      	add	r4, ip
 8012d04:	4642      	mov	r2, r8
 8012d06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012d0a:	3f01      	subs	r7, #1
 8012d0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012d10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012d14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012d18:	d1dc      	bne.n	8012cd4 <__ieee754_sqrt+0xdc>
 8012d1a:	4319      	orrs	r1, r3
 8012d1c:	d01b      	beq.n	8012d56 <__ieee754_sqrt+0x15e>
 8012d1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012da4 <__ieee754_sqrt+0x1ac>
 8012d22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012da8 <__ieee754_sqrt+0x1b0>
 8012d26:	e9da 0100 	ldrd	r0, r1, [sl]
 8012d2a:	e9db 2300 	ldrd	r2, r3, [fp]
 8012d2e:	f7ed fadb 	bl	80002e8 <__aeabi_dsub>
 8012d32:	e9da 8900 	ldrd	r8, r9, [sl]
 8012d36:	4602      	mov	r2, r0
 8012d38:	460b      	mov	r3, r1
 8012d3a:	4640      	mov	r0, r8
 8012d3c:	4649      	mov	r1, r9
 8012d3e:	f7ed ff07 	bl	8000b50 <__aeabi_dcmple>
 8012d42:	b140      	cbz	r0, 8012d56 <__ieee754_sqrt+0x15e>
 8012d44:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012d48:	e9da 0100 	ldrd	r0, r1, [sl]
 8012d4c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012d50:	d111      	bne.n	8012d76 <__ieee754_sqrt+0x17e>
 8012d52:	3601      	adds	r6, #1
 8012d54:	463c      	mov	r4, r7
 8012d56:	1072      	asrs	r2, r6, #1
 8012d58:	0863      	lsrs	r3, r4, #1
 8012d5a:	07f1      	lsls	r1, r6, #31
 8012d5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012d60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012d64:	bf48      	it	mi
 8012d66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012d6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012d6e:	4618      	mov	r0, r3
 8012d70:	e756      	b.n	8012c20 <__ieee754_sqrt+0x28>
 8012d72:	4690      	mov	r8, r2
 8012d74:	e7be      	b.n	8012cf4 <__ieee754_sqrt+0xfc>
 8012d76:	f7ed fab9 	bl	80002ec <__adddf3>
 8012d7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8012d7e:	4602      	mov	r2, r0
 8012d80:	460b      	mov	r3, r1
 8012d82:	4640      	mov	r0, r8
 8012d84:	4649      	mov	r1, r9
 8012d86:	f7ed fed9 	bl	8000b3c <__aeabi_dcmplt>
 8012d8a:	b120      	cbz	r0, 8012d96 <__ieee754_sqrt+0x19e>
 8012d8c:	1ca0      	adds	r0, r4, #2
 8012d8e:	bf08      	it	eq
 8012d90:	3601      	addeq	r6, #1
 8012d92:	3402      	adds	r4, #2
 8012d94:	e7df      	b.n	8012d56 <__ieee754_sqrt+0x15e>
 8012d96:	1c63      	adds	r3, r4, #1
 8012d98:	f023 0401 	bic.w	r4, r3, #1
 8012d9c:	e7db      	b.n	8012d56 <__ieee754_sqrt+0x15e>
 8012d9e:	bf00      	nop
 8012da0:	7ff00000 	.word	0x7ff00000
 8012da4:	20000030 	.word	0x20000030
 8012da8:	20000028 	.word	0x20000028
 8012dac:	00000000 	.word	0x00000000

08012db0 <__kernel_cos>:
 8012db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db4:	ec57 6b10 	vmov	r6, r7, d0
 8012db8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012dbc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012dc0:	ed8d 1b00 	vstr	d1, [sp]
 8012dc4:	d206      	bcs.n	8012dd4 <__kernel_cos+0x24>
 8012dc6:	4630      	mov	r0, r6
 8012dc8:	4639      	mov	r1, r7
 8012dca:	f7ed fef5 	bl	8000bb8 <__aeabi_d2iz>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	f000 8088 	beq.w	8012ee4 <__kernel_cos+0x134>
 8012dd4:	4632      	mov	r2, r6
 8012dd6:	463b      	mov	r3, r7
 8012dd8:	4630      	mov	r0, r6
 8012dda:	4639      	mov	r1, r7
 8012ddc:	f7ed fc3c 	bl	8000658 <__aeabi_dmul>
 8012de0:	4b51      	ldr	r3, [pc, #324]	@ (8012f28 <__kernel_cos+0x178>)
 8012de2:	2200      	movs	r2, #0
 8012de4:	4604      	mov	r4, r0
 8012de6:	460d      	mov	r5, r1
 8012de8:	f7ed fc36 	bl	8000658 <__aeabi_dmul>
 8012dec:	a340      	add	r3, pc, #256	@ (adr r3, 8012ef0 <__kernel_cos+0x140>)
 8012dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df2:	4682      	mov	sl, r0
 8012df4:	468b      	mov	fp, r1
 8012df6:	4620      	mov	r0, r4
 8012df8:	4629      	mov	r1, r5
 8012dfa:	f7ed fc2d 	bl	8000658 <__aeabi_dmul>
 8012dfe:	a33e      	add	r3, pc, #248	@ (adr r3, 8012ef8 <__kernel_cos+0x148>)
 8012e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e04:	f7ed fa72 	bl	80002ec <__adddf3>
 8012e08:	4622      	mov	r2, r4
 8012e0a:	462b      	mov	r3, r5
 8012e0c:	f7ed fc24 	bl	8000658 <__aeabi_dmul>
 8012e10:	a33b      	add	r3, pc, #236	@ (adr r3, 8012f00 <__kernel_cos+0x150>)
 8012e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e16:	f7ed fa67 	bl	80002e8 <__aeabi_dsub>
 8012e1a:	4622      	mov	r2, r4
 8012e1c:	462b      	mov	r3, r5
 8012e1e:	f7ed fc1b 	bl	8000658 <__aeabi_dmul>
 8012e22:	a339      	add	r3, pc, #228	@ (adr r3, 8012f08 <__kernel_cos+0x158>)
 8012e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e28:	f7ed fa60 	bl	80002ec <__adddf3>
 8012e2c:	4622      	mov	r2, r4
 8012e2e:	462b      	mov	r3, r5
 8012e30:	f7ed fc12 	bl	8000658 <__aeabi_dmul>
 8012e34:	a336      	add	r3, pc, #216	@ (adr r3, 8012f10 <__kernel_cos+0x160>)
 8012e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3a:	f7ed fa55 	bl	80002e8 <__aeabi_dsub>
 8012e3e:	4622      	mov	r2, r4
 8012e40:	462b      	mov	r3, r5
 8012e42:	f7ed fc09 	bl	8000658 <__aeabi_dmul>
 8012e46:	a334      	add	r3, pc, #208	@ (adr r3, 8012f18 <__kernel_cos+0x168>)
 8012e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4c:	f7ed fa4e 	bl	80002ec <__adddf3>
 8012e50:	4622      	mov	r2, r4
 8012e52:	462b      	mov	r3, r5
 8012e54:	f7ed fc00 	bl	8000658 <__aeabi_dmul>
 8012e58:	4622      	mov	r2, r4
 8012e5a:	462b      	mov	r3, r5
 8012e5c:	f7ed fbfc 	bl	8000658 <__aeabi_dmul>
 8012e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e64:	4604      	mov	r4, r0
 8012e66:	460d      	mov	r5, r1
 8012e68:	4630      	mov	r0, r6
 8012e6a:	4639      	mov	r1, r7
 8012e6c:	f7ed fbf4 	bl	8000658 <__aeabi_dmul>
 8012e70:	460b      	mov	r3, r1
 8012e72:	4602      	mov	r2, r0
 8012e74:	4629      	mov	r1, r5
 8012e76:	4620      	mov	r0, r4
 8012e78:	f7ed fa36 	bl	80002e8 <__aeabi_dsub>
 8012e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8012f2c <__kernel_cos+0x17c>)
 8012e7e:	4598      	cmp	r8, r3
 8012e80:	4606      	mov	r6, r0
 8012e82:	460f      	mov	r7, r1
 8012e84:	d810      	bhi.n	8012ea8 <__kernel_cos+0xf8>
 8012e86:	4602      	mov	r2, r0
 8012e88:	460b      	mov	r3, r1
 8012e8a:	4650      	mov	r0, sl
 8012e8c:	4659      	mov	r1, fp
 8012e8e:	f7ed fa2b 	bl	80002e8 <__aeabi_dsub>
 8012e92:	460b      	mov	r3, r1
 8012e94:	4926      	ldr	r1, [pc, #152]	@ (8012f30 <__kernel_cos+0x180>)
 8012e96:	4602      	mov	r2, r0
 8012e98:	2000      	movs	r0, #0
 8012e9a:	f7ed fa25 	bl	80002e8 <__aeabi_dsub>
 8012e9e:	ec41 0b10 	vmov	d0, r0, r1
 8012ea2:	b003      	add	sp, #12
 8012ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea8:	4b22      	ldr	r3, [pc, #136]	@ (8012f34 <__kernel_cos+0x184>)
 8012eaa:	4921      	ldr	r1, [pc, #132]	@ (8012f30 <__kernel_cos+0x180>)
 8012eac:	4598      	cmp	r8, r3
 8012eae:	bf8c      	ite	hi
 8012eb0:	4d21      	ldrhi	r5, [pc, #132]	@ (8012f38 <__kernel_cos+0x188>)
 8012eb2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012eb6:	2400      	movs	r4, #0
 8012eb8:	4622      	mov	r2, r4
 8012eba:	462b      	mov	r3, r5
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	f7ed fa13 	bl	80002e8 <__aeabi_dsub>
 8012ec2:	4622      	mov	r2, r4
 8012ec4:	4680      	mov	r8, r0
 8012ec6:	4689      	mov	r9, r1
 8012ec8:	462b      	mov	r3, r5
 8012eca:	4650      	mov	r0, sl
 8012ecc:	4659      	mov	r1, fp
 8012ece:	f7ed fa0b 	bl	80002e8 <__aeabi_dsub>
 8012ed2:	4632      	mov	r2, r6
 8012ed4:	463b      	mov	r3, r7
 8012ed6:	f7ed fa07 	bl	80002e8 <__aeabi_dsub>
 8012eda:	4602      	mov	r2, r0
 8012edc:	460b      	mov	r3, r1
 8012ede:	4640      	mov	r0, r8
 8012ee0:	4649      	mov	r1, r9
 8012ee2:	e7da      	b.n	8012e9a <__kernel_cos+0xea>
 8012ee4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012f20 <__kernel_cos+0x170>
 8012ee8:	e7db      	b.n	8012ea2 <__kernel_cos+0xf2>
 8012eea:	bf00      	nop
 8012eec:	f3af 8000 	nop.w
 8012ef0:	be8838d4 	.word	0xbe8838d4
 8012ef4:	bda8fae9 	.word	0xbda8fae9
 8012ef8:	bdb4b1c4 	.word	0xbdb4b1c4
 8012efc:	3e21ee9e 	.word	0x3e21ee9e
 8012f00:	809c52ad 	.word	0x809c52ad
 8012f04:	3e927e4f 	.word	0x3e927e4f
 8012f08:	19cb1590 	.word	0x19cb1590
 8012f0c:	3efa01a0 	.word	0x3efa01a0
 8012f10:	16c15177 	.word	0x16c15177
 8012f14:	3f56c16c 	.word	0x3f56c16c
 8012f18:	5555554c 	.word	0x5555554c
 8012f1c:	3fa55555 	.word	0x3fa55555
 8012f20:	00000000 	.word	0x00000000
 8012f24:	3ff00000 	.word	0x3ff00000
 8012f28:	3fe00000 	.word	0x3fe00000
 8012f2c:	3fd33332 	.word	0x3fd33332
 8012f30:	3ff00000 	.word	0x3ff00000
 8012f34:	3fe90000 	.word	0x3fe90000
 8012f38:	3fd20000 	.word	0x3fd20000
 8012f3c:	00000000 	.word	0x00000000

08012f40 <__kernel_sin>:
 8012f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f44:	ec55 4b10 	vmov	r4, r5, d0
 8012f48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012f4c:	b085      	sub	sp, #20
 8012f4e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012f52:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012f56:	4680      	mov	r8, r0
 8012f58:	d205      	bcs.n	8012f66 <__kernel_sin+0x26>
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	4629      	mov	r1, r5
 8012f5e:	f7ed fe2b 	bl	8000bb8 <__aeabi_d2iz>
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d052      	beq.n	801300c <__kernel_sin+0xcc>
 8012f66:	4622      	mov	r2, r4
 8012f68:	462b      	mov	r3, r5
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	4629      	mov	r1, r5
 8012f6e:	f7ed fb73 	bl	8000658 <__aeabi_dmul>
 8012f72:	4682      	mov	sl, r0
 8012f74:	468b      	mov	fp, r1
 8012f76:	4602      	mov	r2, r0
 8012f78:	460b      	mov	r3, r1
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	4629      	mov	r1, r5
 8012f7e:	f7ed fb6b 	bl	8000658 <__aeabi_dmul>
 8012f82:	a342      	add	r3, pc, #264	@ (adr r3, 801308c <__kernel_sin+0x14c>)
 8012f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f88:	e9cd 0100 	strd	r0, r1, [sp]
 8012f8c:	4650      	mov	r0, sl
 8012f8e:	4659      	mov	r1, fp
 8012f90:	f7ed fb62 	bl	8000658 <__aeabi_dmul>
 8012f94:	a33f      	add	r3, pc, #252	@ (adr r3, 8013094 <__kernel_sin+0x154>)
 8012f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9a:	f7ed f9a5 	bl	80002e8 <__aeabi_dsub>
 8012f9e:	4652      	mov	r2, sl
 8012fa0:	465b      	mov	r3, fp
 8012fa2:	f7ed fb59 	bl	8000658 <__aeabi_dmul>
 8012fa6:	a33d      	add	r3, pc, #244	@ (adr r3, 801309c <__kernel_sin+0x15c>)
 8012fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fac:	f7ed f99e 	bl	80002ec <__adddf3>
 8012fb0:	4652      	mov	r2, sl
 8012fb2:	465b      	mov	r3, fp
 8012fb4:	f7ed fb50 	bl	8000658 <__aeabi_dmul>
 8012fb8:	a33a      	add	r3, pc, #232	@ (adr r3, 80130a4 <__kernel_sin+0x164>)
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	f7ed f993 	bl	80002e8 <__aeabi_dsub>
 8012fc2:	4652      	mov	r2, sl
 8012fc4:	465b      	mov	r3, fp
 8012fc6:	f7ed fb47 	bl	8000658 <__aeabi_dmul>
 8012fca:	a338      	add	r3, pc, #224	@ (adr r3, 80130ac <__kernel_sin+0x16c>)
 8012fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd0:	f7ed f98c 	bl	80002ec <__adddf3>
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	460f      	mov	r7, r1
 8012fd8:	f1b8 0f00 	cmp.w	r8, #0
 8012fdc:	d11b      	bne.n	8013016 <__kernel_sin+0xd6>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	4650      	mov	r0, sl
 8012fe4:	4659      	mov	r1, fp
 8012fe6:	f7ed fb37 	bl	8000658 <__aeabi_dmul>
 8012fea:	a325      	add	r3, pc, #148	@ (adr r3, 8013080 <__kernel_sin+0x140>)
 8012fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff0:	f7ed f97a 	bl	80002e8 <__aeabi_dsub>
 8012ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ff8:	f7ed fb2e 	bl	8000658 <__aeabi_dmul>
 8012ffc:	4602      	mov	r2, r0
 8012ffe:	460b      	mov	r3, r1
 8013000:	4620      	mov	r0, r4
 8013002:	4629      	mov	r1, r5
 8013004:	f7ed f972 	bl	80002ec <__adddf3>
 8013008:	4604      	mov	r4, r0
 801300a:	460d      	mov	r5, r1
 801300c:	ec45 4b10 	vmov	d0, r4, r5
 8013010:	b005      	add	sp, #20
 8013012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801301a:	4b1b      	ldr	r3, [pc, #108]	@ (8013088 <__kernel_sin+0x148>)
 801301c:	2200      	movs	r2, #0
 801301e:	f7ed fb1b 	bl	8000658 <__aeabi_dmul>
 8013022:	4632      	mov	r2, r6
 8013024:	4680      	mov	r8, r0
 8013026:	4689      	mov	r9, r1
 8013028:	463b      	mov	r3, r7
 801302a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801302e:	f7ed fb13 	bl	8000658 <__aeabi_dmul>
 8013032:	4602      	mov	r2, r0
 8013034:	460b      	mov	r3, r1
 8013036:	4640      	mov	r0, r8
 8013038:	4649      	mov	r1, r9
 801303a:	f7ed f955 	bl	80002e8 <__aeabi_dsub>
 801303e:	4652      	mov	r2, sl
 8013040:	465b      	mov	r3, fp
 8013042:	f7ed fb09 	bl	8000658 <__aeabi_dmul>
 8013046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801304a:	f7ed f94d 	bl	80002e8 <__aeabi_dsub>
 801304e:	a30c      	add	r3, pc, #48	@ (adr r3, 8013080 <__kernel_sin+0x140>)
 8013050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013054:	4606      	mov	r6, r0
 8013056:	460f      	mov	r7, r1
 8013058:	e9dd 0100 	ldrd	r0, r1, [sp]
 801305c:	f7ed fafc 	bl	8000658 <__aeabi_dmul>
 8013060:	4602      	mov	r2, r0
 8013062:	460b      	mov	r3, r1
 8013064:	4630      	mov	r0, r6
 8013066:	4639      	mov	r1, r7
 8013068:	f7ed f940 	bl	80002ec <__adddf3>
 801306c:	4602      	mov	r2, r0
 801306e:	460b      	mov	r3, r1
 8013070:	4620      	mov	r0, r4
 8013072:	4629      	mov	r1, r5
 8013074:	f7ed f938 	bl	80002e8 <__aeabi_dsub>
 8013078:	e7c6      	b.n	8013008 <__kernel_sin+0xc8>
 801307a:	bf00      	nop
 801307c:	f3af 8000 	nop.w
 8013080:	55555549 	.word	0x55555549
 8013084:	3fc55555 	.word	0x3fc55555
 8013088:	3fe00000 	.word	0x3fe00000
 801308c:	5acfd57c 	.word	0x5acfd57c
 8013090:	3de5d93a 	.word	0x3de5d93a
 8013094:	8a2b9ceb 	.word	0x8a2b9ceb
 8013098:	3e5ae5e6 	.word	0x3e5ae5e6
 801309c:	57b1fe7d 	.word	0x57b1fe7d
 80130a0:	3ec71de3 	.word	0x3ec71de3
 80130a4:	19c161d5 	.word	0x19c161d5
 80130a8:	3f2a01a0 	.word	0x3f2a01a0
 80130ac:	1110f8a6 	.word	0x1110f8a6
 80130b0:	3f811111 	.word	0x3f811111
 80130b4:	00000000 	.word	0x00000000

080130b8 <__ieee754_pow>:
 80130b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130bc:	b091      	sub	sp, #68	@ 0x44
 80130be:	ed8d 1b00 	vstr	d1, [sp]
 80130c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80130c6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80130ca:	ea5a 0001 	orrs.w	r0, sl, r1
 80130ce:	ec57 6b10 	vmov	r6, r7, d0
 80130d2:	d113      	bne.n	80130fc <__ieee754_pow+0x44>
 80130d4:	19b3      	adds	r3, r6, r6
 80130d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80130da:	4152      	adcs	r2, r2
 80130dc:	4298      	cmp	r0, r3
 80130de:	4b98      	ldr	r3, [pc, #608]	@ (8013340 <__ieee754_pow+0x288>)
 80130e0:	4193      	sbcs	r3, r2
 80130e2:	f080 84ea 	bcs.w	8013aba <__ieee754_pow+0xa02>
 80130e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130ea:	4630      	mov	r0, r6
 80130ec:	4639      	mov	r1, r7
 80130ee:	f7ed f8fd 	bl	80002ec <__adddf3>
 80130f2:	ec41 0b10 	vmov	d0, r0, r1
 80130f6:	b011      	add	sp, #68	@ 0x44
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fc:	4a91      	ldr	r2, [pc, #580]	@ (8013344 <__ieee754_pow+0x28c>)
 80130fe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013102:	4590      	cmp	r8, r2
 8013104:	463d      	mov	r5, r7
 8013106:	4633      	mov	r3, r6
 8013108:	d806      	bhi.n	8013118 <__ieee754_pow+0x60>
 801310a:	d101      	bne.n	8013110 <__ieee754_pow+0x58>
 801310c:	2e00      	cmp	r6, #0
 801310e:	d1ea      	bne.n	80130e6 <__ieee754_pow+0x2e>
 8013110:	4592      	cmp	sl, r2
 8013112:	d801      	bhi.n	8013118 <__ieee754_pow+0x60>
 8013114:	d10e      	bne.n	8013134 <__ieee754_pow+0x7c>
 8013116:	b169      	cbz	r1, 8013134 <__ieee754_pow+0x7c>
 8013118:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801311c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013120:	431d      	orrs	r5, r3
 8013122:	d1e0      	bne.n	80130e6 <__ieee754_pow+0x2e>
 8013124:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013128:	18db      	adds	r3, r3, r3
 801312a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801312e:	4152      	adcs	r2, r2
 8013130:	429d      	cmp	r5, r3
 8013132:	e7d4      	b.n	80130de <__ieee754_pow+0x26>
 8013134:	2d00      	cmp	r5, #0
 8013136:	46c3      	mov	fp, r8
 8013138:	da3a      	bge.n	80131b0 <__ieee754_pow+0xf8>
 801313a:	4a83      	ldr	r2, [pc, #524]	@ (8013348 <__ieee754_pow+0x290>)
 801313c:	4592      	cmp	sl, r2
 801313e:	d84d      	bhi.n	80131dc <__ieee754_pow+0x124>
 8013140:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013144:	4592      	cmp	sl, r2
 8013146:	f240 84c7 	bls.w	8013ad8 <__ieee754_pow+0xa20>
 801314a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801314e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013152:	2a14      	cmp	r2, #20
 8013154:	dd0f      	ble.n	8013176 <__ieee754_pow+0xbe>
 8013156:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801315a:	fa21 f402 	lsr.w	r4, r1, r2
 801315e:	fa04 f202 	lsl.w	r2, r4, r2
 8013162:	428a      	cmp	r2, r1
 8013164:	f040 84b8 	bne.w	8013ad8 <__ieee754_pow+0xa20>
 8013168:	f004 0401 	and.w	r4, r4, #1
 801316c:	f1c4 0402 	rsb	r4, r4, #2
 8013170:	2900      	cmp	r1, #0
 8013172:	d158      	bne.n	8013226 <__ieee754_pow+0x16e>
 8013174:	e00e      	b.n	8013194 <__ieee754_pow+0xdc>
 8013176:	2900      	cmp	r1, #0
 8013178:	d154      	bne.n	8013224 <__ieee754_pow+0x16c>
 801317a:	f1c2 0214 	rsb	r2, r2, #20
 801317e:	fa4a f402 	asr.w	r4, sl, r2
 8013182:	fa04 f202 	lsl.w	r2, r4, r2
 8013186:	4552      	cmp	r2, sl
 8013188:	f040 84a3 	bne.w	8013ad2 <__ieee754_pow+0xa1a>
 801318c:	f004 0401 	and.w	r4, r4, #1
 8013190:	f1c4 0402 	rsb	r4, r4, #2
 8013194:	4a6d      	ldr	r2, [pc, #436]	@ (801334c <__ieee754_pow+0x294>)
 8013196:	4592      	cmp	sl, r2
 8013198:	d12e      	bne.n	80131f8 <__ieee754_pow+0x140>
 801319a:	f1b9 0f00 	cmp.w	r9, #0
 801319e:	f280 8494 	bge.w	8013aca <__ieee754_pow+0xa12>
 80131a2:	496a      	ldr	r1, [pc, #424]	@ (801334c <__ieee754_pow+0x294>)
 80131a4:	4632      	mov	r2, r6
 80131a6:	463b      	mov	r3, r7
 80131a8:	2000      	movs	r0, #0
 80131aa:	f7ed fb7f 	bl	80008ac <__aeabi_ddiv>
 80131ae:	e7a0      	b.n	80130f2 <__ieee754_pow+0x3a>
 80131b0:	2400      	movs	r4, #0
 80131b2:	bbc1      	cbnz	r1, 8013226 <__ieee754_pow+0x16e>
 80131b4:	4a63      	ldr	r2, [pc, #396]	@ (8013344 <__ieee754_pow+0x28c>)
 80131b6:	4592      	cmp	sl, r2
 80131b8:	d1ec      	bne.n	8013194 <__ieee754_pow+0xdc>
 80131ba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80131be:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80131c2:	431a      	orrs	r2, r3
 80131c4:	f000 8479 	beq.w	8013aba <__ieee754_pow+0xa02>
 80131c8:	4b61      	ldr	r3, [pc, #388]	@ (8013350 <__ieee754_pow+0x298>)
 80131ca:	4598      	cmp	r8, r3
 80131cc:	d908      	bls.n	80131e0 <__ieee754_pow+0x128>
 80131ce:	f1b9 0f00 	cmp.w	r9, #0
 80131d2:	f2c0 8476 	blt.w	8013ac2 <__ieee754_pow+0xa0a>
 80131d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131da:	e78a      	b.n	80130f2 <__ieee754_pow+0x3a>
 80131dc:	2402      	movs	r4, #2
 80131de:	e7e8      	b.n	80131b2 <__ieee754_pow+0xfa>
 80131e0:	f1b9 0f00 	cmp.w	r9, #0
 80131e4:	f04f 0000 	mov.w	r0, #0
 80131e8:	f04f 0100 	mov.w	r1, #0
 80131ec:	da81      	bge.n	80130f2 <__ieee754_pow+0x3a>
 80131ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 80131f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80131f6:	e77c      	b.n	80130f2 <__ieee754_pow+0x3a>
 80131f8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80131fc:	d106      	bne.n	801320c <__ieee754_pow+0x154>
 80131fe:	4632      	mov	r2, r6
 8013200:	463b      	mov	r3, r7
 8013202:	4630      	mov	r0, r6
 8013204:	4639      	mov	r1, r7
 8013206:	f7ed fa27 	bl	8000658 <__aeabi_dmul>
 801320a:	e772      	b.n	80130f2 <__ieee754_pow+0x3a>
 801320c:	4a51      	ldr	r2, [pc, #324]	@ (8013354 <__ieee754_pow+0x29c>)
 801320e:	4591      	cmp	r9, r2
 8013210:	d109      	bne.n	8013226 <__ieee754_pow+0x16e>
 8013212:	2d00      	cmp	r5, #0
 8013214:	db07      	blt.n	8013226 <__ieee754_pow+0x16e>
 8013216:	ec47 6b10 	vmov	d0, r6, r7
 801321a:	b011      	add	sp, #68	@ 0x44
 801321c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013220:	f7ff bcea 	b.w	8012bf8 <__ieee754_sqrt>
 8013224:	2400      	movs	r4, #0
 8013226:	ec47 6b10 	vmov	d0, r6, r7
 801322a:	9302      	str	r3, [sp, #8]
 801322c:	f000 fe84 	bl	8013f38 <fabs>
 8013230:	9b02      	ldr	r3, [sp, #8]
 8013232:	ec51 0b10 	vmov	r0, r1, d0
 8013236:	bb53      	cbnz	r3, 801328e <__ieee754_pow+0x1d6>
 8013238:	4b44      	ldr	r3, [pc, #272]	@ (801334c <__ieee754_pow+0x294>)
 801323a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801323e:	429a      	cmp	r2, r3
 8013240:	d002      	beq.n	8013248 <__ieee754_pow+0x190>
 8013242:	f1b8 0f00 	cmp.w	r8, #0
 8013246:	d122      	bne.n	801328e <__ieee754_pow+0x1d6>
 8013248:	f1b9 0f00 	cmp.w	r9, #0
 801324c:	da05      	bge.n	801325a <__ieee754_pow+0x1a2>
 801324e:	4602      	mov	r2, r0
 8013250:	460b      	mov	r3, r1
 8013252:	2000      	movs	r0, #0
 8013254:	493d      	ldr	r1, [pc, #244]	@ (801334c <__ieee754_pow+0x294>)
 8013256:	f7ed fb29 	bl	80008ac <__aeabi_ddiv>
 801325a:	2d00      	cmp	r5, #0
 801325c:	f6bf af49 	bge.w	80130f2 <__ieee754_pow+0x3a>
 8013260:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8013264:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013268:	ea58 0804 	orrs.w	r8, r8, r4
 801326c:	d108      	bne.n	8013280 <__ieee754_pow+0x1c8>
 801326e:	4602      	mov	r2, r0
 8013270:	460b      	mov	r3, r1
 8013272:	4610      	mov	r0, r2
 8013274:	4619      	mov	r1, r3
 8013276:	f7ed f837 	bl	80002e8 <__aeabi_dsub>
 801327a:	4602      	mov	r2, r0
 801327c:	460b      	mov	r3, r1
 801327e:	e794      	b.n	80131aa <__ieee754_pow+0xf2>
 8013280:	2c01      	cmp	r4, #1
 8013282:	f47f af36 	bne.w	80130f2 <__ieee754_pow+0x3a>
 8013286:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801328a:	4619      	mov	r1, r3
 801328c:	e731      	b.n	80130f2 <__ieee754_pow+0x3a>
 801328e:	0feb      	lsrs	r3, r5, #31
 8013290:	3b01      	subs	r3, #1
 8013292:	ea53 0204 	orrs.w	r2, r3, r4
 8013296:	d102      	bne.n	801329e <__ieee754_pow+0x1e6>
 8013298:	4632      	mov	r2, r6
 801329a:	463b      	mov	r3, r7
 801329c:	e7e9      	b.n	8013272 <__ieee754_pow+0x1ba>
 801329e:	3c01      	subs	r4, #1
 80132a0:	431c      	orrs	r4, r3
 80132a2:	d016      	beq.n	80132d2 <__ieee754_pow+0x21a>
 80132a4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013330 <__ieee754_pow+0x278>
 80132a8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80132ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80132b0:	f240 8112 	bls.w	80134d8 <__ieee754_pow+0x420>
 80132b4:	4b28      	ldr	r3, [pc, #160]	@ (8013358 <__ieee754_pow+0x2a0>)
 80132b6:	459a      	cmp	sl, r3
 80132b8:	4b25      	ldr	r3, [pc, #148]	@ (8013350 <__ieee754_pow+0x298>)
 80132ba:	d916      	bls.n	80132ea <__ieee754_pow+0x232>
 80132bc:	4598      	cmp	r8, r3
 80132be:	d80b      	bhi.n	80132d8 <__ieee754_pow+0x220>
 80132c0:	f1b9 0f00 	cmp.w	r9, #0
 80132c4:	da0b      	bge.n	80132de <__ieee754_pow+0x226>
 80132c6:	2000      	movs	r0, #0
 80132c8:	b011      	add	sp, #68	@ 0x44
 80132ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ce:	f000 beef 	b.w	80140b0 <__math_oflow>
 80132d2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8013338 <__ieee754_pow+0x280>
 80132d6:	e7e7      	b.n	80132a8 <__ieee754_pow+0x1f0>
 80132d8:	f1b9 0f00 	cmp.w	r9, #0
 80132dc:	dcf3      	bgt.n	80132c6 <__ieee754_pow+0x20e>
 80132de:	2000      	movs	r0, #0
 80132e0:	b011      	add	sp, #68	@ 0x44
 80132e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e6:	f000 bedb 	b.w	80140a0 <__math_uflow>
 80132ea:	4598      	cmp	r8, r3
 80132ec:	d20c      	bcs.n	8013308 <__ieee754_pow+0x250>
 80132ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132f2:	2200      	movs	r2, #0
 80132f4:	2300      	movs	r3, #0
 80132f6:	f7ed fc21 	bl	8000b3c <__aeabi_dcmplt>
 80132fa:	3800      	subs	r0, #0
 80132fc:	bf18      	it	ne
 80132fe:	2001      	movne	r0, #1
 8013300:	f1b9 0f00 	cmp.w	r9, #0
 8013304:	daec      	bge.n	80132e0 <__ieee754_pow+0x228>
 8013306:	e7df      	b.n	80132c8 <__ieee754_pow+0x210>
 8013308:	4b10      	ldr	r3, [pc, #64]	@ (801334c <__ieee754_pow+0x294>)
 801330a:	4598      	cmp	r8, r3
 801330c:	f04f 0200 	mov.w	r2, #0
 8013310:	d924      	bls.n	801335c <__ieee754_pow+0x2a4>
 8013312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013316:	2300      	movs	r3, #0
 8013318:	f7ed fc10 	bl	8000b3c <__aeabi_dcmplt>
 801331c:	3800      	subs	r0, #0
 801331e:	bf18      	it	ne
 8013320:	2001      	movne	r0, #1
 8013322:	f1b9 0f00 	cmp.w	r9, #0
 8013326:	dccf      	bgt.n	80132c8 <__ieee754_pow+0x210>
 8013328:	e7da      	b.n	80132e0 <__ieee754_pow+0x228>
 801332a:	bf00      	nop
 801332c:	f3af 8000 	nop.w
 8013330:	00000000 	.word	0x00000000
 8013334:	3ff00000 	.word	0x3ff00000
 8013338:	00000000 	.word	0x00000000
 801333c:	bff00000 	.word	0xbff00000
 8013340:	fff00000 	.word	0xfff00000
 8013344:	7ff00000 	.word	0x7ff00000
 8013348:	433fffff 	.word	0x433fffff
 801334c:	3ff00000 	.word	0x3ff00000
 8013350:	3fefffff 	.word	0x3fefffff
 8013354:	3fe00000 	.word	0x3fe00000
 8013358:	43f00000 	.word	0x43f00000
 801335c:	4b5a      	ldr	r3, [pc, #360]	@ (80134c8 <__ieee754_pow+0x410>)
 801335e:	f7ec ffc3 	bl	80002e8 <__aeabi_dsub>
 8013362:	a351      	add	r3, pc, #324	@ (adr r3, 80134a8 <__ieee754_pow+0x3f0>)
 8013364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013368:	4604      	mov	r4, r0
 801336a:	460d      	mov	r5, r1
 801336c:	f7ed f974 	bl	8000658 <__aeabi_dmul>
 8013370:	a34f      	add	r3, pc, #316	@ (adr r3, 80134b0 <__ieee754_pow+0x3f8>)
 8013372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013376:	4606      	mov	r6, r0
 8013378:	460f      	mov	r7, r1
 801337a:	4620      	mov	r0, r4
 801337c:	4629      	mov	r1, r5
 801337e:	f7ed f96b 	bl	8000658 <__aeabi_dmul>
 8013382:	4b52      	ldr	r3, [pc, #328]	@ (80134cc <__ieee754_pow+0x414>)
 8013384:	4682      	mov	sl, r0
 8013386:	468b      	mov	fp, r1
 8013388:	2200      	movs	r2, #0
 801338a:	4620      	mov	r0, r4
 801338c:	4629      	mov	r1, r5
 801338e:	f7ed f963 	bl	8000658 <__aeabi_dmul>
 8013392:	4602      	mov	r2, r0
 8013394:	460b      	mov	r3, r1
 8013396:	a148      	add	r1, pc, #288	@ (adr r1, 80134b8 <__ieee754_pow+0x400>)
 8013398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801339c:	f7ec ffa4 	bl	80002e8 <__aeabi_dsub>
 80133a0:	4622      	mov	r2, r4
 80133a2:	462b      	mov	r3, r5
 80133a4:	f7ed f958 	bl	8000658 <__aeabi_dmul>
 80133a8:	4602      	mov	r2, r0
 80133aa:	460b      	mov	r3, r1
 80133ac:	2000      	movs	r0, #0
 80133ae:	4948      	ldr	r1, [pc, #288]	@ (80134d0 <__ieee754_pow+0x418>)
 80133b0:	f7ec ff9a 	bl	80002e8 <__aeabi_dsub>
 80133b4:	4622      	mov	r2, r4
 80133b6:	4680      	mov	r8, r0
 80133b8:	4689      	mov	r9, r1
 80133ba:	462b      	mov	r3, r5
 80133bc:	4620      	mov	r0, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	f7ed f94a 	bl	8000658 <__aeabi_dmul>
 80133c4:	4602      	mov	r2, r0
 80133c6:	460b      	mov	r3, r1
 80133c8:	4640      	mov	r0, r8
 80133ca:	4649      	mov	r1, r9
 80133cc:	f7ed f944 	bl	8000658 <__aeabi_dmul>
 80133d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80134c0 <__ieee754_pow+0x408>)
 80133d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d6:	f7ed f93f 	bl	8000658 <__aeabi_dmul>
 80133da:	4602      	mov	r2, r0
 80133dc:	460b      	mov	r3, r1
 80133de:	4650      	mov	r0, sl
 80133e0:	4659      	mov	r1, fp
 80133e2:	f7ec ff81 	bl	80002e8 <__aeabi_dsub>
 80133e6:	4602      	mov	r2, r0
 80133e8:	460b      	mov	r3, r1
 80133ea:	4680      	mov	r8, r0
 80133ec:	4689      	mov	r9, r1
 80133ee:	4630      	mov	r0, r6
 80133f0:	4639      	mov	r1, r7
 80133f2:	f7ec ff7b 	bl	80002ec <__adddf3>
 80133f6:	2400      	movs	r4, #0
 80133f8:	4632      	mov	r2, r6
 80133fa:	463b      	mov	r3, r7
 80133fc:	4620      	mov	r0, r4
 80133fe:	460d      	mov	r5, r1
 8013400:	f7ec ff72 	bl	80002e8 <__aeabi_dsub>
 8013404:	4602      	mov	r2, r0
 8013406:	460b      	mov	r3, r1
 8013408:	4640      	mov	r0, r8
 801340a:	4649      	mov	r1, r9
 801340c:	f7ec ff6c 	bl	80002e8 <__aeabi_dsub>
 8013410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013414:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013418:	2300      	movs	r3, #0
 801341a:	9304      	str	r3, [sp, #16]
 801341c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013420:	4606      	mov	r6, r0
 8013422:	460f      	mov	r7, r1
 8013424:	4652      	mov	r2, sl
 8013426:	465b      	mov	r3, fp
 8013428:	e9dd 0100 	ldrd	r0, r1, [sp]
 801342c:	f7ec ff5c 	bl	80002e8 <__aeabi_dsub>
 8013430:	4622      	mov	r2, r4
 8013432:	462b      	mov	r3, r5
 8013434:	f7ed f910 	bl	8000658 <__aeabi_dmul>
 8013438:	e9dd 2300 	ldrd	r2, r3, [sp]
 801343c:	4680      	mov	r8, r0
 801343e:	4689      	mov	r9, r1
 8013440:	4630      	mov	r0, r6
 8013442:	4639      	mov	r1, r7
 8013444:	f7ed f908 	bl	8000658 <__aeabi_dmul>
 8013448:	4602      	mov	r2, r0
 801344a:	460b      	mov	r3, r1
 801344c:	4640      	mov	r0, r8
 801344e:	4649      	mov	r1, r9
 8013450:	f7ec ff4c 	bl	80002ec <__adddf3>
 8013454:	4652      	mov	r2, sl
 8013456:	465b      	mov	r3, fp
 8013458:	4606      	mov	r6, r0
 801345a:	460f      	mov	r7, r1
 801345c:	4620      	mov	r0, r4
 801345e:	4629      	mov	r1, r5
 8013460:	f7ed f8fa 	bl	8000658 <__aeabi_dmul>
 8013464:	460b      	mov	r3, r1
 8013466:	4602      	mov	r2, r0
 8013468:	4680      	mov	r8, r0
 801346a:	4689      	mov	r9, r1
 801346c:	4630      	mov	r0, r6
 801346e:	4639      	mov	r1, r7
 8013470:	f7ec ff3c 	bl	80002ec <__adddf3>
 8013474:	4b17      	ldr	r3, [pc, #92]	@ (80134d4 <__ieee754_pow+0x41c>)
 8013476:	4299      	cmp	r1, r3
 8013478:	4604      	mov	r4, r0
 801347a:	460d      	mov	r5, r1
 801347c:	468a      	mov	sl, r1
 801347e:	468b      	mov	fp, r1
 8013480:	f340 82ef 	ble.w	8013a62 <__ieee754_pow+0x9aa>
 8013484:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013488:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801348c:	4303      	orrs	r3, r0
 801348e:	f000 81e8 	beq.w	8013862 <__ieee754_pow+0x7aa>
 8013492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013496:	2200      	movs	r2, #0
 8013498:	2300      	movs	r3, #0
 801349a:	f7ed fb4f 	bl	8000b3c <__aeabi_dcmplt>
 801349e:	3800      	subs	r0, #0
 80134a0:	bf18      	it	ne
 80134a2:	2001      	movne	r0, #1
 80134a4:	e710      	b.n	80132c8 <__ieee754_pow+0x210>
 80134a6:	bf00      	nop
 80134a8:	60000000 	.word	0x60000000
 80134ac:	3ff71547 	.word	0x3ff71547
 80134b0:	f85ddf44 	.word	0xf85ddf44
 80134b4:	3e54ae0b 	.word	0x3e54ae0b
 80134b8:	55555555 	.word	0x55555555
 80134bc:	3fd55555 	.word	0x3fd55555
 80134c0:	652b82fe 	.word	0x652b82fe
 80134c4:	3ff71547 	.word	0x3ff71547
 80134c8:	3ff00000 	.word	0x3ff00000
 80134cc:	3fd00000 	.word	0x3fd00000
 80134d0:	3fe00000 	.word	0x3fe00000
 80134d4:	408fffff 	.word	0x408fffff
 80134d8:	4bd5      	ldr	r3, [pc, #852]	@ (8013830 <__ieee754_pow+0x778>)
 80134da:	402b      	ands	r3, r5
 80134dc:	2200      	movs	r2, #0
 80134de:	b92b      	cbnz	r3, 80134ec <__ieee754_pow+0x434>
 80134e0:	4bd4      	ldr	r3, [pc, #848]	@ (8013834 <__ieee754_pow+0x77c>)
 80134e2:	f7ed f8b9 	bl	8000658 <__aeabi_dmul>
 80134e6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80134ea:	468b      	mov	fp, r1
 80134ec:	ea4f 532b 	mov.w	r3, fp, asr #20
 80134f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80134f4:	4413      	add	r3, r2
 80134f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80134f8:	4bcf      	ldr	r3, [pc, #828]	@ (8013838 <__ieee754_pow+0x780>)
 80134fa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80134fe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013502:	459b      	cmp	fp, r3
 8013504:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013508:	dd08      	ble.n	801351c <__ieee754_pow+0x464>
 801350a:	4bcc      	ldr	r3, [pc, #816]	@ (801383c <__ieee754_pow+0x784>)
 801350c:	459b      	cmp	fp, r3
 801350e:	f340 81a5 	ble.w	801385c <__ieee754_pow+0x7a4>
 8013512:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013514:	3301      	adds	r3, #1
 8013516:	930a      	str	r3, [sp, #40]	@ 0x28
 8013518:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801351c:	f04f 0a00 	mov.w	sl, #0
 8013520:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013524:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013526:	4bc6      	ldr	r3, [pc, #792]	@ (8013840 <__ieee754_pow+0x788>)
 8013528:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801352c:	ed93 7b00 	vldr	d7, [r3]
 8013530:	4629      	mov	r1, r5
 8013532:	ec53 2b17 	vmov	r2, r3, d7
 8013536:	ed8d 7b06 	vstr	d7, [sp, #24]
 801353a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801353e:	f7ec fed3 	bl	80002e8 <__aeabi_dsub>
 8013542:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013546:	4606      	mov	r6, r0
 8013548:	460f      	mov	r7, r1
 801354a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801354e:	f7ec fecd 	bl	80002ec <__adddf3>
 8013552:	4602      	mov	r2, r0
 8013554:	460b      	mov	r3, r1
 8013556:	2000      	movs	r0, #0
 8013558:	49ba      	ldr	r1, [pc, #744]	@ (8013844 <__ieee754_pow+0x78c>)
 801355a:	f7ed f9a7 	bl	80008ac <__aeabi_ddiv>
 801355e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013562:	4602      	mov	r2, r0
 8013564:	460b      	mov	r3, r1
 8013566:	4630      	mov	r0, r6
 8013568:	4639      	mov	r1, r7
 801356a:	f7ed f875 	bl	8000658 <__aeabi_dmul>
 801356e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013572:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013576:	106d      	asrs	r5, r5, #1
 8013578:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801357c:	f04f 0b00 	mov.w	fp, #0
 8013580:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013584:	4661      	mov	r1, ip
 8013586:	2200      	movs	r2, #0
 8013588:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801358c:	4658      	mov	r0, fp
 801358e:	46e1      	mov	r9, ip
 8013590:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013594:	4614      	mov	r4, r2
 8013596:	461d      	mov	r5, r3
 8013598:	f7ed f85e 	bl	8000658 <__aeabi_dmul>
 801359c:	4602      	mov	r2, r0
 801359e:	460b      	mov	r3, r1
 80135a0:	4630      	mov	r0, r6
 80135a2:	4639      	mov	r1, r7
 80135a4:	f7ec fea0 	bl	80002e8 <__aeabi_dsub>
 80135a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80135ac:	4606      	mov	r6, r0
 80135ae:	460f      	mov	r7, r1
 80135b0:	4620      	mov	r0, r4
 80135b2:	4629      	mov	r1, r5
 80135b4:	f7ec fe98 	bl	80002e8 <__aeabi_dsub>
 80135b8:	4602      	mov	r2, r0
 80135ba:	460b      	mov	r3, r1
 80135bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80135c0:	f7ec fe92 	bl	80002e8 <__aeabi_dsub>
 80135c4:	465a      	mov	r2, fp
 80135c6:	464b      	mov	r3, r9
 80135c8:	f7ed f846 	bl	8000658 <__aeabi_dmul>
 80135cc:	4602      	mov	r2, r0
 80135ce:	460b      	mov	r3, r1
 80135d0:	4630      	mov	r0, r6
 80135d2:	4639      	mov	r1, r7
 80135d4:	f7ec fe88 	bl	80002e8 <__aeabi_dsub>
 80135d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80135dc:	f7ed f83c 	bl	8000658 <__aeabi_dmul>
 80135e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80135e8:	4610      	mov	r0, r2
 80135ea:	4619      	mov	r1, r3
 80135ec:	f7ed f834 	bl	8000658 <__aeabi_dmul>
 80135f0:	a37d      	add	r3, pc, #500	@ (adr r3, 80137e8 <__ieee754_pow+0x730>)
 80135f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f6:	4604      	mov	r4, r0
 80135f8:	460d      	mov	r5, r1
 80135fa:	f7ed f82d 	bl	8000658 <__aeabi_dmul>
 80135fe:	a37c      	add	r3, pc, #496	@ (adr r3, 80137f0 <__ieee754_pow+0x738>)
 8013600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013604:	f7ec fe72 	bl	80002ec <__adddf3>
 8013608:	4622      	mov	r2, r4
 801360a:	462b      	mov	r3, r5
 801360c:	f7ed f824 	bl	8000658 <__aeabi_dmul>
 8013610:	a379      	add	r3, pc, #484	@ (adr r3, 80137f8 <__ieee754_pow+0x740>)
 8013612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013616:	f7ec fe69 	bl	80002ec <__adddf3>
 801361a:	4622      	mov	r2, r4
 801361c:	462b      	mov	r3, r5
 801361e:	f7ed f81b 	bl	8000658 <__aeabi_dmul>
 8013622:	a377      	add	r3, pc, #476	@ (adr r3, 8013800 <__ieee754_pow+0x748>)
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	f7ec fe60 	bl	80002ec <__adddf3>
 801362c:	4622      	mov	r2, r4
 801362e:	462b      	mov	r3, r5
 8013630:	f7ed f812 	bl	8000658 <__aeabi_dmul>
 8013634:	a374      	add	r3, pc, #464	@ (adr r3, 8013808 <__ieee754_pow+0x750>)
 8013636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363a:	f7ec fe57 	bl	80002ec <__adddf3>
 801363e:	4622      	mov	r2, r4
 8013640:	462b      	mov	r3, r5
 8013642:	f7ed f809 	bl	8000658 <__aeabi_dmul>
 8013646:	a372      	add	r3, pc, #456	@ (adr r3, 8013810 <__ieee754_pow+0x758>)
 8013648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364c:	f7ec fe4e 	bl	80002ec <__adddf3>
 8013650:	4622      	mov	r2, r4
 8013652:	4606      	mov	r6, r0
 8013654:	460f      	mov	r7, r1
 8013656:	462b      	mov	r3, r5
 8013658:	4620      	mov	r0, r4
 801365a:	4629      	mov	r1, r5
 801365c:	f7ec fffc 	bl	8000658 <__aeabi_dmul>
 8013660:	4602      	mov	r2, r0
 8013662:	460b      	mov	r3, r1
 8013664:	4630      	mov	r0, r6
 8013666:	4639      	mov	r1, r7
 8013668:	f7ec fff6 	bl	8000658 <__aeabi_dmul>
 801366c:	465a      	mov	r2, fp
 801366e:	4604      	mov	r4, r0
 8013670:	460d      	mov	r5, r1
 8013672:	464b      	mov	r3, r9
 8013674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013678:	f7ec fe38 	bl	80002ec <__adddf3>
 801367c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013680:	f7ec ffea 	bl	8000658 <__aeabi_dmul>
 8013684:	4622      	mov	r2, r4
 8013686:	462b      	mov	r3, r5
 8013688:	f7ec fe30 	bl	80002ec <__adddf3>
 801368c:	465a      	mov	r2, fp
 801368e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013692:	464b      	mov	r3, r9
 8013694:	4658      	mov	r0, fp
 8013696:	4649      	mov	r1, r9
 8013698:	f7ec ffde 	bl	8000658 <__aeabi_dmul>
 801369c:	4b6a      	ldr	r3, [pc, #424]	@ (8013848 <__ieee754_pow+0x790>)
 801369e:	2200      	movs	r2, #0
 80136a0:	4606      	mov	r6, r0
 80136a2:	460f      	mov	r7, r1
 80136a4:	f7ec fe22 	bl	80002ec <__adddf3>
 80136a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80136ac:	f7ec fe1e 	bl	80002ec <__adddf3>
 80136b0:	46d8      	mov	r8, fp
 80136b2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80136b6:	460d      	mov	r5, r1
 80136b8:	465a      	mov	r2, fp
 80136ba:	460b      	mov	r3, r1
 80136bc:	4640      	mov	r0, r8
 80136be:	4649      	mov	r1, r9
 80136c0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80136c4:	f7ec ffc8 	bl	8000658 <__aeabi_dmul>
 80136c8:	465c      	mov	r4, fp
 80136ca:	4680      	mov	r8, r0
 80136cc:	4689      	mov	r9, r1
 80136ce:	4b5e      	ldr	r3, [pc, #376]	@ (8013848 <__ieee754_pow+0x790>)
 80136d0:	2200      	movs	r2, #0
 80136d2:	4620      	mov	r0, r4
 80136d4:	4629      	mov	r1, r5
 80136d6:	f7ec fe07 	bl	80002e8 <__aeabi_dsub>
 80136da:	4632      	mov	r2, r6
 80136dc:	463b      	mov	r3, r7
 80136de:	f7ec fe03 	bl	80002e8 <__aeabi_dsub>
 80136e2:	4602      	mov	r2, r0
 80136e4:	460b      	mov	r3, r1
 80136e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80136ea:	f7ec fdfd 	bl	80002e8 <__aeabi_dsub>
 80136ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80136f2:	f7ec ffb1 	bl	8000658 <__aeabi_dmul>
 80136f6:	4622      	mov	r2, r4
 80136f8:	4606      	mov	r6, r0
 80136fa:	460f      	mov	r7, r1
 80136fc:	462b      	mov	r3, r5
 80136fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013702:	f7ec ffa9 	bl	8000658 <__aeabi_dmul>
 8013706:	4602      	mov	r2, r0
 8013708:	460b      	mov	r3, r1
 801370a:	4630      	mov	r0, r6
 801370c:	4639      	mov	r1, r7
 801370e:	f7ec fded 	bl	80002ec <__adddf3>
 8013712:	4606      	mov	r6, r0
 8013714:	460f      	mov	r7, r1
 8013716:	4602      	mov	r2, r0
 8013718:	460b      	mov	r3, r1
 801371a:	4640      	mov	r0, r8
 801371c:	4649      	mov	r1, r9
 801371e:	f7ec fde5 	bl	80002ec <__adddf3>
 8013722:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013726:	a33c      	add	r3, pc, #240	@ (adr r3, 8013818 <__ieee754_pow+0x760>)
 8013728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801372c:	4658      	mov	r0, fp
 801372e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013732:	460d      	mov	r5, r1
 8013734:	f7ec ff90 	bl	8000658 <__aeabi_dmul>
 8013738:	465c      	mov	r4, fp
 801373a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801373e:	4642      	mov	r2, r8
 8013740:	464b      	mov	r3, r9
 8013742:	4620      	mov	r0, r4
 8013744:	4629      	mov	r1, r5
 8013746:	f7ec fdcf 	bl	80002e8 <__aeabi_dsub>
 801374a:	4602      	mov	r2, r0
 801374c:	460b      	mov	r3, r1
 801374e:	4630      	mov	r0, r6
 8013750:	4639      	mov	r1, r7
 8013752:	f7ec fdc9 	bl	80002e8 <__aeabi_dsub>
 8013756:	a332      	add	r3, pc, #200	@ (adr r3, 8013820 <__ieee754_pow+0x768>)
 8013758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801375c:	f7ec ff7c 	bl	8000658 <__aeabi_dmul>
 8013760:	a331      	add	r3, pc, #196	@ (adr r3, 8013828 <__ieee754_pow+0x770>)
 8013762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013766:	4606      	mov	r6, r0
 8013768:	460f      	mov	r7, r1
 801376a:	4620      	mov	r0, r4
 801376c:	4629      	mov	r1, r5
 801376e:	f7ec ff73 	bl	8000658 <__aeabi_dmul>
 8013772:	4602      	mov	r2, r0
 8013774:	460b      	mov	r3, r1
 8013776:	4630      	mov	r0, r6
 8013778:	4639      	mov	r1, r7
 801377a:	f7ec fdb7 	bl	80002ec <__adddf3>
 801377e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013780:	4b32      	ldr	r3, [pc, #200]	@ (801384c <__ieee754_pow+0x794>)
 8013782:	4413      	add	r3, r2
 8013784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013788:	f7ec fdb0 	bl	80002ec <__adddf3>
 801378c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013790:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013792:	f7ec fef7 	bl	8000584 <__aeabi_i2d>
 8013796:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013798:	4b2d      	ldr	r3, [pc, #180]	@ (8013850 <__ieee754_pow+0x798>)
 801379a:	4413      	add	r3, r2
 801379c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80137a0:	4606      	mov	r6, r0
 80137a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80137a6:	460f      	mov	r7, r1
 80137a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80137ac:	f7ec fd9e 	bl	80002ec <__adddf3>
 80137b0:	4642      	mov	r2, r8
 80137b2:	464b      	mov	r3, r9
 80137b4:	f7ec fd9a 	bl	80002ec <__adddf3>
 80137b8:	4632      	mov	r2, r6
 80137ba:	463b      	mov	r3, r7
 80137bc:	f7ec fd96 	bl	80002ec <__adddf3>
 80137c0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80137c4:	4632      	mov	r2, r6
 80137c6:	463b      	mov	r3, r7
 80137c8:	4658      	mov	r0, fp
 80137ca:	460d      	mov	r5, r1
 80137cc:	f7ec fd8c 	bl	80002e8 <__aeabi_dsub>
 80137d0:	4642      	mov	r2, r8
 80137d2:	464b      	mov	r3, r9
 80137d4:	f7ec fd88 	bl	80002e8 <__aeabi_dsub>
 80137d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137dc:	f7ec fd84 	bl	80002e8 <__aeabi_dsub>
 80137e0:	465c      	mov	r4, fp
 80137e2:	4602      	mov	r2, r0
 80137e4:	e036      	b.n	8013854 <__ieee754_pow+0x79c>
 80137e6:	bf00      	nop
 80137e8:	4a454eef 	.word	0x4a454eef
 80137ec:	3fca7e28 	.word	0x3fca7e28
 80137f0:	93c9db65 	.word	0x93c9db65
 80137f4:	3fcd864a 	.word	0x3fcd864a
 80137f8:	a91d4101 	.word	0xa91d4101
 80137fc:	3fd17460 	.word	0x3fd17460
 8013800:	518f264d 	.word	0x518f264d
 8013804:	3fd55555 	.word	0x3fd55555
 8013808:	db6fabff 	.word	0xdb6fabff
 801380c:	3fdb6db6 	.word	0x3fdb6db6
 8013810:	33333303 	.word	0x33333303
 8013814:	3fe33333 	.word	0x3fe33333
 8013818:	e0000000 	.word	0xe0000000
 801381c:	3feec709 	.word	0x3feec709
 8013820:	dc3a03fd 	.word	0xdc3a03fd
 8013824:	3feec709 	.word	0x3feec709
 8013828:	145b01f5 	.word	0x145b01f5
 801382c:	be3e2fe0 	.word	0xbe3e2fe0
 8013830:	7ff00000 	.word	0x7ff00000
 8013834:	43400000 	.word	0x43400000
 8013838:	0003988e 	.word	0x0003988e
 801383c:	000bb679 	.word	0x000bb679
 8013840:	08018b08 	.word	0x08018b08
 8013844:	3ff00000 	.word	0x3ff00000
 8013848:	40080000 	.word	0x40080000
 801384c:	08018ae8 	.word	0x08018ae8
 8013850:	08018af8 	.word	0x08018af8
 8013854:	460b      	mov	r3, r1
 8013856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801385a:	e5d7      	b.n	801340c <__ieee754_pow+0x354>
 801385c:	f04f 0a01 	mov.w	sl, #1
 8013860:	e65e      	b.n	8013520 <__ieee754_pow+0x468>
 8013862:	a3b4      	add	r3, pc, #720	@ (adr r3, 8013b34 <__ieee754_pow+0xa7c>)
 8013864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013868:	4630      	mov	r0, r6
 801386a:	4639      	mov	r1, r7
 801386c:	f7ec fd3e 	bl	80002ec <__adddf3>
 8013870:	4642      	mov	r2, r8
 8013872:	e9cd 0100 	strd	r0, r1, [sp]
 8013876:	464b      	mov	r3, r9
 8013878:	4620      	mov	r0, r4
 801387a:	4629      	mov	r1, r5
 801387c:	f7ec fd34 	bl	80002e8 <__aeabi_dsub>
 8013880:	4602      	mov	r2, r0
 8013882:	460b      	mov	r3, r1
 8013884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013888:	f7ed f976 	bl	8000b78 <__aeabi_dcmpgt>
 801388c:	2800      	cmp	r0, #0
 801388e:	f47f ae00 	bne.w	8013492 <__ieee754_pow+0x3da>
 8013892:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013896:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801389a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801389e:	fa43 fa0a 	asr.w	sl, r3, sl
 80138a2:	44da      	add	sl, fp
 80138a4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80138a8:	489d      	ldr	r0, [pc, #628]	@ (8013b20 <__ieee754_pow+0xa68>)
 80138aa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80138ae:	4108      	asrs	r0, r1
 80138b0:	ea00 030a 	and.w	r3, r0, sl
 80138b4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80138b8:	f1c1 0114 	rsb	r1, r1, #20
 80138bc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80138c0:	fa4a fa01 	asr.w	sl, sl, r1
 80138c4:	f1bb 0f00 	cmp.w	fp, #0
 80138c8:	4640      	mov	r0, r8
 80138ca:	4649      	mov	r1, r9
 80138cc:	f04f 0200 	mov.w	r2, #0
 80138d0:	bfb8      	it	lt
 80138d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80138d6:	f7ec fd07 	bl	80002e8 <__aeabi_dsub>
 80138da:	4680      	mov	r8, r0
 80138dc:	4689      	mov	r9, r1
 80138de:	4632      	mov	r2, r6
 80138e0:	463b      	mov	r3, r7
 80138e2:	4640      	mov	r0, r8
 80138e4:	4649      	mov	r1, r9
 80138e6:	f7ec fd01 	bl	80002ec <__adddf3>
 80138ea:	2400      	movs	r4, #0
 80138ec:	a37c      	add	r3, pc, #496	@ (adr r3, 8013ae0 <__ieee754_pow+0xa28>)
 80138ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f2:	4620      	mov	r0, r4
 80138f4:	460d      	mov	r5, r1
 80138f6:	f7ec feaf 	bl	8000658 <__aeabi_dmul>
 80138fa:	4642      	mov	r2, r8
 80138fc:	e9cd 0100 	strd	r0, r1, [sp]
 8013900:	464b      	mov	r3, r9
 8013902:	4620      	mov	r0, r4
 8013904:	4629      	mov	r1, r5
 8013906:	f7ec fcef 	bl	80002e8 <__aeabi_dsub>
 801390a:	4602      	mov	r2, r0
 801390c:	460b      	mov	r3, r1
 801390e:	4630      	mov	r0, r6
 8013910:	4639      	mov	r1, r7
 8013912:	f7ec fce9 	bl	80002e8 <__aeabi_dsub>
 8013916:	a374      	add	r3, pc, #464	@ (adr r3, 8013ae8 <__ieee754_pow+0xa30>)
 8013918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391c:	f7ec fe9c 	bl	8000658 <__aeabi_dmul>
 8013920:	a373      	add	r3, pc, #460	@ (adr r3, 8013af0 <__ieee754_pow+0xa38>)
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	4680      	mov	r8, r0
 8013928:	4689      	mov	r9, r1
 801392a:	4620      	mov	r0, r4
 801392c:	4629      	mov	r1, r5
 801392e:	f7ec fe93 	bl	8000658 <__aeabi_dmul>
 8013932:	4602      	mov	r2, r0
 8013934:	460b      	mov	r3, r1
 8013936:	4640      	mov	r0, r8
 8013938:	4649      	mov	r1, r9
 801393a:	f7ec fcd7 	bl	80002ec <__adddf3>
 801393e:	4604      	mov	r4, r0
 8013940:	460d      	mov	r5, r1
 8013942:	4602      	mov	r2, r0
 8013944:	460b      	mov	r3, r1
 8013946:	e9dd 0100 	ldrd	r0, r1, [sp]
 801394a:	f7ec fccf 	bl	80002ec <__adddf3>
 801394e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013952:	4680      	mov	r8, r0
 8013954:	4689      	mov	r9, r1
 8013956:	f7ec fcc7 	bl	80002e8 <__aeabi_dsub>
 801395a:	4602      	mov	r2, r0
 801395c:	460b      	mov	r3, r1
 801395e:	4620      	mov	r0, r4
 8013960:	4629      	mov	r1, r5
 8013962:	f7ec fcc1 	bl	80002e8 <__aeabi_dsub>
 8013966:	4642      	mov	r2, r8
 8013968:	4606      	mov	r6, r0
 801396a:	460f      	mov	r7, r1
 801396c:	464b      	mov	r3, r9
 801396e:	4640      	mov	r0, r8
 8013970:	4649      	mov	r1, r9
 8013972:	f7ec fe71 	bl	8000658 <__aeabi_dmul>
 8013976:	a360      	add	r3, pc, #384	@ (adr r3, 8013af8 <__ieee754_pow+0xa40>)
 8013978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397c:	4604      	mov	r4, r0
 801397e:	460d      	mov	r5, r1
 8013980:	f7ec fe6a 	bl	8000658 <__aeabi_dmul>
 8013984:	a35e      	add	r3, pc, #376	@ (adr r3, 8013b00 <__ieee754_pow+0xa48>)
 8013986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801398a:	f7ec fcad 	bl	80002e8 <__aeabi_dsub>
 801398e:	4622      	mov	r2, r4
 8013990:	462b      	mov	r3, r5
 8013992:	f7ec fe61 	bl	8000658 <__aeabi_dmul>
 8013996:	a35c      	add	r3, pc, #368	@ (adr r3, 8013b08 <__ieee754_pow+0xa50>)
 8013998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801399c:	f7ec fca6 	bl	80002ec <__adddf3>
 80139a0:	4622      	mov	r2, r4
 80139a2:	462b      	mov	r3, r5
 80139a4:	f7ec fe58 	bl	8000658 <__aeabi_dmul>
 80139a8:	a359      	add	r3, pc, #356	@ (adr r3, 8013b10 <__ieee754_pow+0xa58>)
 80139aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ae:	f7ec fc9b 	bl	80002e8 <__aeabi_dsub>
 80139b2:	4622      	mov	r2, r4
 80139b4:	462b      	mov	r3, r5
 80139b6:	f7ec fe4f 	bl	8000658 <__aeabi_dmul>
 80139ba:	a357      	add	r3, pc, #348	@ (adr r3, 8013b18 <__ieee754_pow+0xa60>)
 80139bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c0:	f7ec fc94 	bl	80002ec <__adddf3>
 80139c4:	4622      	mov	r2, r4
 80139c6:	462b      	mov	r3, r5
 80139c8:	f7ec fe46 	bl	8000658 <__aeabi_dmul>
 80139cc:	4602      	mov	r2, r0
 80139ce:	460b      	mov	r3, r1
 80139d0:	4640      	mov	r0, r8
 80139d2:	4649      	mov	r1, r9
 80139d4:	f7ec fc88 	bl	80002e8 <__aeabi_dsub>
 80139d8:	4604      	mov	r4, r0
 80139da:	460d      	mov	r5, r1
 80139dc:	4602      	mov	r2, r0
 80139de:	460b      	mov	r3, r1
 80139e0:	4640      	mov	r0, r8
 80139e2:	4649      	mov	r1, r9
 80139e4:	f7ec fe38 	bl	8000658 <__aeabi_dmul>
 80139e8:	2200      	movs	r2, #0
 80139ea:	e9cd 0100 	strd	r0, r1, [sp]
 80139ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80139f2:	4620      	mov	r0, r4
 80139f4:	4629      	mov	r1, r5
 80139f6:	f7ec fc77 	bl	80002e8 <__aeabi_dsub>
 80139fa:	4602      	mov	r2, r0
 80139fc:	460b      	mov	r3, r1
 80139fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a02:	f7ec ff53 	bl	80008ac <__aeabi_ddiv>
 8013a06:	4632      	mov	r2, r6
 8013a08:	4604      	mov	r4, r0
 8013a0a:	460d      	mov	r5, r1
 8013a0c:	463b      	mov	r3, r7
 8013a0e:	4640      	mov	r0, r8
 8013a10:	4649      	mov	r1, r9
 8013a12:	f7ec fe21 	bl	8000658 <__aeabi_dmul>
 8013a16:	4632      	mov	r2, r6
 8013a18:	463b      	mov	r3, r7
 8013a1a:	f7ec fc67 	bl	80002ec <__adddf3>
 8013a1e:	4602      	mov	r2, r0
 8013a20:	460b      	mov	r3, r1
 8013a22:	4620      	mov	r0, r4
 8013a24:	4629      	mov	r1, r5
 8013a26:	f7ec fc5f 	bl	80002e8 <__aeabi_dsub>
 8013a2a:	4642      	mov	r2, r8
 8013a2c:	464b      	mov	r3, r9
 8013a2e:	f7ec fc5b 	bl	80002e8 <__aeabi_dsub>
 8013a32:	460b      	mov	r3, r1
 8013a34:	4602      	mov	r2, r0
 8013a36:	493b      	ldr	r1, [pc, #236]	@ (8013b24 <__ieee754_pow+0xa6c>)
 8013a38:	2000      	movs	r0, #0
 8013a3a:	f7ec fc55 	bl	80002e8 <__aeabi_dsub>
 8013a3e:	ec41 0b10 	vmov	d0, r0, r1
 8013a42:	ee10 3a90 	vmov	r3, s1
 8013a46:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013a4e:	da30      	bge.n	8013ab2 <__ieee754_pow+0x9fa>
 8013a50:	4650      	mov	r0, sl
 8013a52:	f000 fa79 	bl	8013f48 <scalbn>
 8013a56:	ec51 0b10 	vmov	r0, r1, d0
 8013a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a5e:	f7ff bbd2 	b.w	8013206 <__ieee754_pow+0x14e>
 8013a62:	4c31      	ldr	r4, [pc, #196]	@ (8013b28 <__ieee754_pow+0xa70>)
 8013a64:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013a68:	42a3      	cmp	r3, r4
 8013a6a:	d91a      	bls.n	8013aa2 <__ieee754_pow+0x9ea>
 8013a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8013b2c <__ieee754_pow+0xa74>)
 8013a6e:	440b      	add	r3, r1
 8013a70:	4303      	orrs	r3, r0
 8013a72:	d009      	beq.n	8013a88 <__ieee754_pow+0x9d0>
 8013a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	f7ed f85e 	bl	8000b3c <__aeabi_dcmplt>
 8013a80:	3800      	subs	r0, #0
 8013a82:	bf18      	it	ne
 8013a84:	2001      	movne	r0, #1
 8013a86:	e42b      	b.n	80132e0 <__ieee754_pow+0x228>
 8013a88:	4642      	mov	r2, r8
 8013a8a:	464b      	mov	r3, r9
 8013a8c:	f7ec fc2c 	bl	80002e8 <__aeabi_dsub>
 8013a90:	4632      	mov	r2, r6
 8013a92:	463b      	mov	r3, r7
 8013a94:	f7ed f866 	bl	8000b64 <__aeabi_dcmpge>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d1eb      	bne.n	8013a74 <__ieee754_pow+0x9bc>
 8013a9c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8013b3c <__ieee754_pow+0xa84>
 8013aa0:	e6f7      	b.n	8013892 <__ieee754_pow+0x7da>
 8013aa2:	469a      	mov	sl, r3
 8013aa4:	4b22      	ldr	r3, [pc, #136]	@ (8013b30 <__ieee754_pow+0xa78>)
 8013aa6:	459a      	cmp	sl, r3
 8013aa8:	f63f aef3 	bhi.w	8013892 <__ieee754_pow+0x7da>
 8013aac:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013ab0:	e715      	b.n	80138de <__ieee754_pow+0x826>
 8013ab2:	ec51 0b10 	vmov	r0, r1, d0
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	e7cf      	b.n	8013a5a <__ieee754_pow+0x9a2>
 8013aba:	491a      	ldr	r1, [pc, #104]	@ (8013b24 <__ieee754_pow+0xa6c>)
 8013abc:	2000      	movs	r0, #0
 8013abe:	f7ff bb18 	b.w	80130f2 <__ieee754_pow+0x3a>
 8013ac2:	2000      	movs	r0, #0
 8013ac4:	2100      	movs	r1, #0
 8013ac6:	f7ff bb14 	b.w	80130f2 <__ieee754_pow+0x3a>
 8013aca:	4630      	mov	r0, r6
 8013acc:	4639      	mov	r1, r7
 8013ace:	f7ff bb10 	b.w	80130f2 <__ieee754_pow+0x3a>
 8013ad2:	460c      	mov	r4, r1
 8013ad4:	f7ff bb5e 	b.w	8013194 <__ieee754_pow+0xdc>
 8013ad8:	2400      	movs	r4, #0
 8013ada:	f7ff bb49 	b.w	8013170 <__ieee754_pow+0xb8>
 8013ade:	bf00      	nop
 8013ae0:	00000000 	.word	0x00000000
 8013ae4:	3fe62e43 	.word	0x3fe62e43
 8013ae8:	fefa39ef 	.word	0xfefa39ef
 8013aec:	3fe62e42 	.word	0x3fe62e42
 8013af0:	0ca86c39 	.word	0x0ca86c39
 8013af4:	be205c61 	.word	0xbe205c61
 8013af8:	72bea4d0 	.word	0x72bea4d0
 8013afc:	3e663769 	.word	0x3e663769
 8013b00:	c5d26bf1 	.word	0xc5d26bf1
 8013b04:	3ebbbd41 	.word	0x3ebbbd41
 8013b08:	af25de2c 	.word	0xaf25de2c
 8013b0c:	3f11566a 	.word	0x3f11566a
 8013b10:	16bebd93 	.word	0x16bebd93
 8013b14:	3f66c16c 	.word	0x3f66c16c
 8013b18:	5555553e 	.word	0x5555553e
 8013b1c:	3fc55555 	.word	0x3fc55555
 8013b20:	fff00000 	.word	0xfff00000
 8013b24:	3ff00000 	.word	0x3ff00000
 8013b28:	4090cbff 	.word	0x4090cbff
 8013b2c:	3f6f3400 	.word	0x3f6f3400
 8013b30:	3fe00000 	.word	0x3fe00000
 8013b34:	652b82fe 	.word	0x652b82fe
 8013b38:	3c971547 	.word	0x3c971547
 8013b3c:	4090cc00 	.word	0x4090cc00

08013b40 <__ieee754_rem_pio2>:
 8013b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b44:	ec57 6b10 	vmov	r6, r7, d0
 8013b48:	4bc5      	ldr	r3, [pc, #788]	@ (8013e60 <__ieee754_rem_pio2+0x320>)
 8013b4a:	b08d      	sub	sp, #52	@ 0x34
 8013b4c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013b50:	4598      	cmp	r8, r3
 8013b52:	4604      	mov	r4, r0
 8013b54:	9704      	str	r7, [sp, #16]
 8013b56:	d807      	bhi.n	8013b68 <__ieee754_rem_pio2+0x28>
 8013b58:	2200      	movs	r2, #0
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	ed80 0b00 	vstr	d0, [r0]
 8013b60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013b64:	2500      	movs	r5, #0
 8013b66:	e028      	b.n	8013bba <__ieee754_rem_pio2+0x7a>
 8013b68:	4bbe      	ldr	r3, [pc, #760]	@ (8013e64 <__ieee754_rem_pio2+0x324>)
 8013b6a:	4598      	cmp	r8, r3
 8013b6c:	d878      	bhi.n	8013c60 <__ieee754_rem_pio2+0x120>
 8013b6e:	9b04      	ldr	r3, [sp, #16]
 8013b70:	4dbd      	ldr	r5, [pc, #756]	@ (8013e68 <__ieee754_rem_pio2+0x328>)
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	4630      	mov	r0, r6
 8013b76:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013e28 <__ieee754_rem_pio2+0x2e8>)
 8013b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7c:	4639      	mov	r1, r7
 8013b7e:	dd38      	ble.n	8013bf2 <__ieee754_rem_pio2+0xb2>
 8013b80:	f7ec fbb2 	bl	80002e8 <__aeabi_dsub>
 8013b84:	45a8      	cmp	r8, r5
 8013b86:	4606      	mov	r6, r0
 8013b88:	460f      	mov	r7, r1
 8013b8a:	d01a      	beq.n	8013bc2 <__ieee754_rem_pio2+0x82>
 8013b8c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013e30 <__ieee754_rem_pio2+0x2f0>)
 8013b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b92:	f7ec fba9 	bl	80002e8 <__aeabi_dsub>
 8013b96:	4602      	mov	r2, r0
 8013b98:	460b      	mov	r3, r1
 8013b9a:	4680      	mov	r8, r0
 8013b9c:	4689      	mov	r9, r1
 8013b9e:	4630      	mov	r0, r6
 8013ba0:	4639      	mov	r1, r7
 8013ba2:	f7ec fba1 	bl	80002e8 <__aeabi_dsub>
 8013ba6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013e30 <__ieee754_rem_pio2+0x2f0>)
 8013ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bac:	f7ec fb9c 	bl	80002e8 <__aeabi_dsub>
 8013bb0:	e9c4 8900 	strd	r8, r9, [r4]
 8013bb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013bb8:	2501      	movs	r5, #1
 8013bba:	4628      	mov	r0, r5
 8013bbc:	b00d      	add	sp, #52	@ 0x34
 8013bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bc2:	a39d      	add	r3, pc, #628	@ (adr r3, 8013e38 <__ieee754_rem_pio2+0x2f8>)
 8013bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc8:	f7ec fb8e 	bl	80002e8 <__aeabi_dsub>
 8013bcc:	a39c      	add	r3, pc, #624	@ (adr r3, 8013e40 <__ieee754_rem_pio2+0x300>)
 8013bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd2:	4606      	mov	r6, r0
 8013bd4:	460f      	mov	r7, r1
 8013bd6:	f7ec fb87 	bl	80002e8 <__aeabi_dsub>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	460b      	mov	r3, r1
 8013bde:	4680      	mov	r8, r0
 8013be0:	4689      	mov	r9, r1
 8013be2:	4630      	mov	r0, r6
 8013be4:	4639      	mov	r1, r7
 8013be6:	f7ec fb7f 	bl	80002e8 <__aeabi_dsub>
 8013bea:	a395      	add	r3, pc, #596	@ (adr r3, 8013e40 <__ieee754_rem_pio2+0x300>)
 8013bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf0:	e7dc      	b.n	8013bac <__ieee754_rem_pio2+0x6c>
 8013bf2:	f7ec fb7b 	bl	80002ec <__adddf3>
 8013bf6:	45a8      	cmp	r8, r5
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	460f      	mov	r7, r1
 8013bfc:	d018      	beq.n	8013c30 <__ieee754_rem_pio2+0xf0>
 8013bfe:	a38c      	add	r3, pc, #560	@ (adr r3, 8013e30 <__ieee754_rem_pio2+0x2f0>)
 8013c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c04:	f7ec fb72 	bl	80002ec <__adddf3>
 8013c08:	4602      	mov	r2, r0
 8013c0a:	460b      	mov	r3, r1
 8013c0c:	4680      	mov	r8, r0
 8013c0e:	4689      	mov	r9, r1
 8013c10:	4630      	mov	r0, r6
 8013c12:	4639      	mov	r1, r7
 8013c14:	f7ec fb68 	bl	80002e8 <__aeabi_dsub>
 8013c18:	a385      	add	r3, pc, #532	@ (adr r3, 8013e30 <__ieee754_rem_pio2+0x2f0>)
 8013c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1e:	f7ec fb65 	bl	80002ec <__adddf3>
 8013c22:	f04f 35ff 	mov.w	r5, #4294967295
 8013c26:	e9c4 8900 	strd	r8, r9, [r4]
 8013c2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013c2e:	e7c4      	b.n	8013bba <__ieee754_rem_pio2+0x7a>
 8013c30:	a381      	add	r3, pc, #516	@ (adr r3, 8013e38 <__ieee754_rem_pio2+0x2f8>)
 8013c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c36:	f7ec fb59 	bl	80002ec <__adddf3>
 8013c3a:	a381      	add	r3, pc, #516	@ (adr r3, 8013e40 <__ieee754_rem_pio2+0x300>)
 8013c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c40:	4606      	mov	r6, r0
 8013c42:	460f      	mov	r7, r1
 8013c44:	f7ec fb52 	bl	80002ec <__adddf3>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	460b      	mov	r3, r1
 8013c4c:	4680      	mov	r8, r0
 8013c4e:	4689      	mov	r9, r1
 8013c50:	4630      	mov	r0, r6
 8013c52:	4639      	mov	r1, r7
 8013c54:	f7ec fb48 	bl	80002e8 <__aeabi_dsub>
 8013c58:	a379      	add	r3, pc, #484	@ (adr r3, 8013e40 <__ieee754_rem_pio2+0x300>)
 8013c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5e:	e7de      	b.n	8013c1e <__ieee754_rem_pio2+0xde>
 8013c60:	4b82      	ldr	r3, [pc, #520]	@ (8013e6c <__ieee754_rem_pio2+0x32c>)
 8013c62:	4598      	cmp	r8, r3
 8013c64:	f200 80d1 	bhi.w	8013e0a <__ieee754_rem_pio2+0x2ca>
 8013c68:	f000 f966 	bl	8013f38 <fabs>
 8013c6c:	ec57 6b10 	vmov	r6, r7, d0
 8013c70:	a375      	add	r3, pc, #468	@ (adr r3, 8013e48 <__ieee754_rem_pio2+0x308>)
 8013c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c76:	4630      	mov	r0, r6
 8013c78:	4639      	mov	r1, r7
 8013c7a:	f7ec fced 	bl	8000658 <__aeabi_dmul>
 8013c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8013e70 <__ieee754_rem_pio2+0x330>)
 8013c80:	2200      	movs	r2, #0
 8013c82:	f7ec fb33 	bl	80002ec <__adddf3>
 8013c86:	f7ec ff97 	bl	8000bb8 <__aeabi_d2iz>
 8013c8a:	4605      	mov	r5, r0
 8013c8c:	f7ec fc7a 	bl	8000584 <__aeabi_i2d>
 8013c90:	4602      	mov	r2, r0
 8013c92:	460b      	mov	r3, r1
 8013c94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c98:	a363      	add	r3, pc, #396	@ (adr r3, 8013e28 <__ieee754_rem_pio2+0x2e8>)
 8013c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9e:	f7ec fcdb 	bl	8000658 <__aeabi_dmul>
 8013ca2:	4602      	mov	r2, r0
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	4630      	mov	r0, r6
 8013ca8:	4639      	mov	r1, r7
 8013caa:	f7ec fb1d 	bl	80002e8 <__aeabi_dsub>
 8013cae:	a360      	add	r3, pc, #384	@ (adr r3, 8013e30 <__ieee754_rem_pio2+0x2f0>)
 8013cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb4:	4682      	mov	sl, r0
 8013cb6:	468b      	mov	fp, r1
 8013cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cbc:	f7ec fccc 	bl	8000658 <__aeabi_dmul>
 8013cc0:	2d1f      	cmp	r5, #31
 8013cc2:	4606      	mov	r6, r0
 8013cc4:	460f      	mov	r7, r1
 8013cc6:	dc0c      	bgt.n	8013ce2 <__ieee754_rem_pio2+0x1a2>
 8013cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8013e74 <__ieee754_rem_pio2+0x334>)
 8013cca:	1e6a      	subs	r2, r5, #1
 8013ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cd0:	4543      	cmp	r3, r8
 8013cd2:	d006      	beq.n	8013ce2 <__ieee754_rem_pio2+0x1a2>
 8013cd4:	4632      	mov	r2, r6
 8013cd6:	463b      	mov	r3, r7
 8013cd8:	4650      	mov	r0, sl
 8013cda:	4659      	mov	r1, fp
 8013cdc:	f7ec fb04 	bl	80002e8 <__aeabi_dsub>
 8013ce0:	e00e      	b.n	8013d00 <__ieee754_rem_pio2+0x1c0>
 8013ce2:	463b      	mov	r3, r7
 8013ce4:	4632      	mov	r2, r6
 8013ce6:	4650      	mov	r0, sl
 8013ce8:	4659      	mov	r1, fp
 8013cea:	f7ec fafd 	bl	80002e8 <__aeabi_dsub>
 8013cee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013cf2:	9305      	str	r3, [sp, #20]
 8013cf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013cf8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8013cfc:	2b10      	cmp	r3, #16
 8013cfe:	dc02      	bgt.n	8013d06 <__ieee754_rem_pio2+0x1c6>
 8013d00:	e9c4 0100 	strd	r0, r1, [r4]
 8013d04:	e039      	b.n	8013d7a <__ieee754_rem_pio2+0x23a>
 8013d06:	a34c      	add	r3, pc, #304	@ (adr r3, 8013e38 <__ieee754_rem_pio2+0x2f8>)
 8013d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d10:	f7ec fca2 	bl	8000658 <__aeabi_dmul>
 8013d14:	4606      	mov	r6, r0
 8013d16:	460f      	mov	r7, r1
 8013d18:	4602      	mov	r2, r0
 8013d1a:	460b      	mov	r3, r1
 8013d1c:	4650      	mov	r0, sl
 8013d1e:	4659      	mov	r1, fp
 8013d20:	f7ec fae2 	bl	80002e8 <__aeabi_dsub>
 8013d24:	4602      	mov	r2, r0
 8013d26:	460b      	mov	r3, r1
 8013d28:	4680      	mov	r8, r0
 8013d2a:	4689      	mov	r9, r1
 8013d2c:	4650      	mov	r0, sl
 8013d2e:	4659      	mov	r1, fp
 8013d30:	f7ec fada 	bl	80002e8 <__aeabi_dsub>
 8013d34:	4632      	mov	r2, r6
 8013d36:	463b      	mov	r3, r7
 8013d38:	f7ec fad6 	bl	80002e8 <__aeabi_dsub>
 8013d3c:	a340      	add	r3, pc, #256	@ (adr r3, 8013e40 <__ieee754_rem_pio2+0x300>)
 8013d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d42:	4606      	mov	r6, r0
 8013d44:	460f      	mov	r7, r1
 8013d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d4a:	f7ec fc85 	bl	8000658 <__aeabi_dmul>
 8013d4e:	4632      	mov	r2, r6
 8013d50:	463b      	mov	r3, r7
 8013d52:	f7ec fac9 	bl	80002e8 <__aeabi_dsub>
 8013d56:	4602      	mov	r2, r0
 8013d58:	460b      	mov	r3, r1
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	460f      	mov	r7, r1
 8013d5e:	4640      	mov	r0, r8
 8013d60:	4649      	mov	r1, r9
 8013d62:	f7ec fac1 	bl	80002e8 <__aeabi_dsub>
 8013d66:	9a05      	ldr	r2, [sp, #20]
 8013d68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	2b31      	cmp	r3, #49	@ 0x31
 8013d70:	dc20      	bgt.n	8013db4 <__ieee754_rem_pio2+0x274>
 8013d72:	e9c4 0100 	strd	r0, r1, [r4]
 8013d76:	46c2      	mov	sl, r8
 8013d78:	46cb      	mov	fp, r9
 8013d7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013d7e:	4650      	mov	r0, sl
 8013d80:	4642      	mov	r2, r8
 8013d82:	464b      	mov	r3, r9
 8013d84:	4659      	mov	r1, fp
 8013d86:	f7ec faaf 	bl	80002e8 <__aeabi_dsub>
 8013d8a:	463b      	mov	r3, r7
 8013d8c:	4632      	mov	r2, r6
 8013d8e:	f7ec faab 	bl	80002e8 <__aeabi_dsub>
 8013d92:	9b04      	ldr	r3, [sp, #16]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013d9a:	f6bf af0e 	bge.w	8013bba <__ieee754_rem_pio2+0x7a>
 8013d9e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8013da2:	6063      	str	r3, [r4, #4]
 8013da4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013da8:	f8c4 8000 	str.w	r8, [r4]
 8013dac:	60a0      	str	r0, [r4, #8]
 8013dae:	60e3      	str	r3, [r4, #12]
 8013db0:	426d      	negs	r5, r5
 8013db2:	e702      	b.n	8013bba <__ieee754_rem_pio2+0x7a>
 8013db4:	a326      	add	r3, pc, #152	@ (adr r3, 8013e50 <__ieee754_rem_pio2+0x310>)
 8013db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dbe:	f7ec fc4b 	bl	8000658 <__aeabi_dmul>
 8013dc2:	4606      	mov	r6, r0
 8013dc4:	460f      	mov	r7, r1
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	460b      	mov	r3, r1
 8013dca:	4640      	mov	r0, r8
 8013dcc:	4649      	mov	r1, r9
 8013dce:	f7ec fa8b 	bl	80002e8 <__aeabi_dsub>
 8013dd2:	4602      	mov	r2, r0
 8013dd4:	460b      	mov	r3, r1
 8013dd6:	4682      	mov	sl, r0
 8013dd8:	468b      	mov	fp, r1
 8013dda:	4640      	mov	r0, r8
 8013ddc:	4649      	mov	r1, r9
 8013dde:	f7ec fa83 	bl	80002e8 <__aeabi_dsub>
 8013de2:	4632      	mov	r2, r6
 8013de4:	463b      	mov	r3, r7
 8013de6:	f7ec fa7f 	bl	80002e8 <__aeabi_dsub>
 8013dea:	a31b      	add	r3, pc, #108	@ (adr r3, 8013e58 <__ieee754_rem_pio2+0x318>)
 8013dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df0:	4606      	mov	r6, r0
 8013df2:	460f      	mov	r7, r1
 8013df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013df8:	f7ec fc2e 	bl	8000658 <__aeabi_dmul>
 8013dfc:	4632      	mov	r2, r6
 8013dfe:	463b      	mov	r3, r7
 8013e00:	f7ec fa72 	bl	80002e8 <__aeabi_dsub>
 8013e04:	4606      	mov	r6, r0
 8013e06:	460f      	mov	r7, r1
 8013e08:	e764      	b.n	8013cd4 <__ieee754_rem_pio2+0x194>
 8013e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8013e78 <__ieee754_rem_pio2+0x338>)
 8013e0c:	4598      	cmp	r8, r3
 8013e0e:	d935      	bls.n	8013e7c <__ieee754_rem_pio2+0x33c>
 8013e10:	4632      	mov	r2, r6
 8013e12:	463b      	mov	r3, r7
 8013e14:	4630      	mov	r0, r6
 8013e16:	4639      	mov	r1, r7
 8013e18:	f7ec fa66 	bl	80002e8 <__aeabi_dsub>
 8013e1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013e20:	e9c4 0100 	strd	r0, r1, [r4]
 8013e24:	e69e      	b.n	8013b64 <__ieee754_rem_pio2+0x24>
 8013e26:	bf00      	nop
 8013e28:	54400000 	.word	0x54400000
 8013e2c:	3ff921fb 	.word	0x3ff921fb
 8013e30:	1a626331 	.word	0x1a626331
 8013e34:	3dd0b461 	.word	0x3dd0b461
 8013e38:	1a600000 	.word	0x1a600000
 8013e3c:	3dd0b461 	.word	0x3dd0b461
 8013e40:	2e037073 	.word	0x2e037073
 8013e44:	3ba3198a 	.word	0x3ba3198a
 8013e48:	6dc9c883 	.word	0x6dc9c883
 8013e4c:	3fe45f30 	.word	0x3fe45f30
 8013e50:	2e000000 	.word	0x2e000000
 8013e54:	3ba3198a 	.word	0x3ba3198a
 8013e58:	252049c1 	.word	0x252049c1
 8013e5c:	397b839a 	.word	0x397b839a
 8013e60:	3fe921fb 	.word	0x3fe921fb
 8013e64:	4002d97b 	.word	0x4002d97b
 8013e68:	3ff921fb 	.word	0x3ff921fb
 8013e6c:	413921fb 	.word	0x413921fb
 8013e70:	3fe00000 	.word	0x3fe00000
 8013e74:	08018b18 	.word	0x08018b18
 8013e78:	7fefffff 	.word	0x7fefffff
 8013e7c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013e80:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8013e84:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013e88:	4630      	mov	r0, r6
 8013e8a:	460f      	mov	r7, r1
 8013e8c:	f7ec fe94 	bl	8000bb8 <__aeabi_d2iz>
 8013e90:	f7ec fb78 	bl	8000584 <__aeabi_i2d>
 8013e94:	4602      	mov	r2, r0
 8013e96:	460b      	mov	r3, r1
 8013e98:	4630      	mov	r0, r6
 8013e9a:	4639      	mov	r1, r7
 8013e9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013ea0:	f7ec fa22 	bl	80002e8 <__aeabi_dsub>
 8013ea4:	4b22      	ldr	r3, [pc, #136]	@ (8013f30 <__ieee754_rem_pio2+0x3f0>)
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	f7ec fbd6 	bl	8000658 <__aeabi_dmul>
 8013eac:	460f      	mov	r7, r1
 8013eae:	4606      	mov	r6, r0
 8013eb0:	f7ec fe82 	bl	8000bb8 <__aeabi_d2iz>
 8013eb4:	f7ec fb66 	bl	8000584 <__aeabi_i2d>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	460b      	mov	r3, r1
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	4639      	mov	r1, r7
 8013ec0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013ec4:	f7ec fa10 	bl	80002e8 <__aeabi_dsub>
 8013ec8:	4b19      	ldr	r3, [pc, #100]	@ (8013f30 <__ieee754_rem_pio2+0x3f0>)
 8013eca:	2200      	movs	r2, #0
 8013ecc:	f7ec fbc4 	bl	8000658 <__aeabi_dmul>
 8013ed0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013ed4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013ed8:	f04f 0803 	mov.w	r8, #3
 8013edc:	2600      	movs	r6, #0
 8013ede:	2700      	movs	r7, #0
 8013ee0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013ee4:	4632      	mov	r2, r6
 8013ee6:	463b      	mov	r3, r7
 8013ee8:	46c2      	mov	sl, r8
 8013eea:	f108 38ff 	add.w	r8, r8, #4294967295
 8013eee:	f7ec fe1b 	bl	8000b28 <__aeabi_dcmpeq>
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	d1f4      	bne.n	8013ee0 <__ieee754_rem_pio2+0x3a0>
 8013ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8013f34 <__ieee754_rem_pio2+0x3f4>)
 8013ef8:	9301      	str	r3, [sp, #4]
 8013efa:	2302      	movs	r3, #2
 8013efc:	9300      	str	r3, [sp, #0]
 8013efe:	462a      	mov	r2, r5
 8013f00:	4653      	mov	r3, sl
 8013f02:	4621      	mov	r1, r4
 8013f04:	a806      	add	r0, sp, #24
 8013f06:	f000 f8db 	bl	80140c0 <__kernel_rem_pio2>
 8013f0a:	9b04      	ldr	r3, [sp, #16]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	4605      	mov	r5, r0
 8013f10:	f6bf ae53 	bge.w	8013bba <__ieee754_rem_pio2+0x7a>
 8013f14:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013f18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013f1c:	e9c4 2300 	strd	r2, r3, [r4]
 8013f20:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013f24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013f28:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8013f2c:	e740      	b.n	8013db0 <__ieee754_rem_pio2+0x270>
 8013f2e:	bf00      	nop
 8013f30:	41700000 	.word	0x41700000
 8013f34:	08018b98 	.word	0x08018b98

08013f38 <fabs>:
 8013f38:	ec51 0b10 	vmov	r0, r1, d0
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013f42:	ec43 2b10 	vmov	d0, r2, r3
 8013f46:	4770      	bx	lr

08013f48 <scalbn>:
 8013f48:	b570      	push	{r4, r5, r6, lr}
 8013f4a:	ec55 4b10 	vmov	r4, r5, d0
 8013f4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013f52:	4606      	mov	r6, r0
 8013f54:	462b      	mov	r3, r5
 8013f56:	b991      	cbnz	r1, 8013f7e <scalbn+0x36>
 8013f58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013f5c:	4323      	orrs	r3, r4
 8013f5e:	d03d      	beq.n	8013fdc <scalbn+0x94>
 8013f60:	4b35      	ldr	r3, [pc, #212]	@ (8014038 <scalbn+0xf0>)
 8013f62:	4620      	mov	r0, r4
 8013f64:	4629      	mov	r1, r5
 8013f66:	2200      	movs	r2, #0
 8013f68:	f7ec fb76 	bl	8000658 <__aeabi_dmul>
 8013f6c:	4b33      	ldr	r3, [pc, #204]	@ (801403c <scalbn+0xf4>)
 8013f6e:	429e      	cmp	r6, r3
 8013f70:	4604      	mov	r4, r0
 8013f72:	460d      	mov	r5, r1
 8013f74:	da0f      	bge.n	8013f96 <scalbn+0x4e>
 8013f76:	a328      	add	r3, pc, #160	@ (adr r3, 8014018 <scalbn+0xd0>)
 8013f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f7c:	e01e      	b.n	8013fbc <scalbn+0x74>
 8013f7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013f82:	4291      	cmp	r1, r2
 8013f84:	d10b      	bne.n	8013f9e <scalbn+0x56>
 8013f86:	4622      	mov	r2, r4
 8013f88:	4620      	mov	r0, r4
 8013f8a:	4629      	mov	r1, r5
 8013f8c:	f7ec f9ae 	bl	80002ec <__adddf3>
 8013f90:	4604      	mov	r4, r0
 8013f92:	460d      	mov	r5, r1
 8013f94:	e022      	b.n	8013fdc <scalbn+0x94>
 8013f96:	460b      	mov	r3, r1
 8013f98:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013f9c:	3936      	subs	r1, #54	@ 0x36
 8013f9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013fa2:	4296      	cmp	r6, r2
 8013fa4:	dd0d      	ble.n	8013fc2 <scalbn+0x7a>
 8013fa6:	2d00      	cmp	r5, #0
 8013fa8:	a11d      	add	r1, pc, #116	@ (adr r1, 8014020 <scalbn+0xd8>)
 8013faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fae:	da02      	bge.n	8013fb6 <scalbn+0x6e>
 8013fb0:	a11d      	add	r1, pc, #116	@ (adr r1, 8014028 <scalbn+0xe0>)
 8013fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fb6:	a31a      	add	r3, pc, #104	@ (adr r3, 8014020 <scalbn+0xd8>)
 8013fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fbc:	f7ec fb4c 	bl	8000658 <__aeabi_dmul>
 8013fc0:	e7e6      	b.n	8013f90 <scalbn+0x48>
 8013fc2:	1872      	adds	r2, r6, r1
 8013fc4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013fc8:	428a      	cmp	r2, r1
 8013fca:	dcec      	bgt.n	8013fa6 <scalbn+0x5e>
 8013fcc:	2a00      	cmp	r2, #0
 8013fce:	dd08      	ble.n	8013fe2 <scalbn+0x9a>
 8013fd0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013fd4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013fd8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013fdc:	ec45 4b10 	vmov	d0, r4, r5
 8013fe0:	bd70      	pop	{r4, r5, r6, pc}
 8013fe2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013fe6:	da08      	bge.n	8013ffa <scalbn+0xb2>
 8013fe8:	2d00      	cmp	r5, #0
 8013fea:	a10b      	add	r1, pc, #44	@ (adr r1, 8014018 <scalbn+0xd0>)
 8013fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff0:	dac1      	bge.n	8013f76 <scalbn+0x2e>
 8013ff2:	a10f      	add	r1, pc, #60	@ (adr r1, 8014030 <scalbn+0xe8>)
 8013ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff8:	e7bd      	b.n	8013f76 <scalbn+0x2e>
 8013ffa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013ffe:	3236      	adds	r2, #54	@ 0x36
 8014000:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014004:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014008:	4620      	mov	r0, r4
 801400a:	4b0d      	ldr	r3, [pc, #52]	@ (8014040 <scalbn+0xf8>)
 801400c:	4629      	mov	r1, r5
 801400e:	2200      	movs	r2, #0
 8014010:	e7d4      	b.n	8013fbc <scalbn+0x74>
 8014012:	bf00      	nop
 8014014:	f3af 8000 	nop.w
 8014018:	c2f8f359 	.word	0xc2f8f359
 801401c:	01a56e1f 	.word	0x01a56e1f
 8014020:	8800759c 	.word	0x8800759c
 8014024:	7e37e43c 	.word	0x7e37e43c
 8014028:	8800759c 	.word	0x8800759c
 801402c:	fe37e43c 	.word	0xfe37e43c
 8014030:	c2f8f359 	.word	0xc2f8f359
 8014034:	81a56e1f 	.word	0x81a56e1f
 8014038:	43500000 	.word	0x43500000
 801403c:	ffff3cb0 	.word	0xffff3cb0
 8014040:	3c900000 	.word	0x3c900000

08014044 <with_errno>:
 8014044:	b510      	push	{r4, lr}
 8014046:	ed2d 8b02 	vpush	{d8}
 801404a:	eeb0 8a40 	vmov.f32	s16, s0
 801404e:	eef0 8a60 	vmov.f32	s17, s1
 8014052:	4604      	mov	r4, r0
 8014054:	f001 fb00 	bl	8015658 <__errno>
 8014058:	eeb0 0a48 	vmov.f32	s0, s16
 801405c:	eef0 0a68 	vmov.f32	s1, s17
 8014060:	ecbd 8b02 	vpop	{d8}
 8014064:	6004      	str	r4, [r0, #0]
 8014066:	bd10      	pop	{r4, pc}

08014068 <xflow>:
 8014068:	4603      	mov	r3, r0
 801406a:	b507      	push	{r0, r1, r2, lr}
 801406c:	ec51 0b10 	vmov	r0, r1, d0
 8014070:	b183      	cbz	r3, 8014094 <xflow+0x2c>
 8014072:	4602      	mov	r2, r0
 8014074:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014078:	e9cd 2300 	strd	r2, r3, [sp]
 801407c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014080:	f7ec faea 	bl	8000658 <__aeabi_dmul>
 8014084:	ec41 0b10 	vmov	d0, r0, r1
 8014088:	2022      	movs	r0, #34	@ 0x22
 801408a:	b003      	add	sp, #12
 801408c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014090:	f7ff bfd8 	b.w	8014044 <with_errno>
 8014094:	4602      	mov	r2, r0
 8014096:	460b      	mov	r3, r1
 8014098:	e7ee      	b.n	8014078 <xflow+0x10>
 801409a:	0000      	movs	r0, r0
 801409c:	0000      	movs	r0, r0
	...

080140a0 <__math_uflow>:
 80140a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140a8 <__math_uflow+0x8>
 80140a4:	f7ff bfe0 	b.w	8014068 <xflow>
 80140a8:	00000000 	.word	0x00000000
 80140ac:	10000000 	.word	0x10000000

080140b0 <__math_oflow>:
 80140b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140b8 <__math_oflow+0x8>
 80140b4:	f7ff bfd8 	b.w	8014068 <xflow>
 80140b8:	00000000 	.word	0x00000000
 80140bc:	70000000 	.word	0x70000000

080140c0 <__kernel_rem_pio2>:
 80140c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140c4:	ed2d 8b02 	vpush	{d8}
 80140c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80140cc:	f112 0f14 	cmn.w	r2, #20
 80140d0:	9306      	str	r3, [sp, #24]
 80140d2:	9104      	str	r1, [sp, #16]
 80140d4:	4bbe      	ldr	r3, [pc, #760]	@ (80143d0 <__kernel_rem_pio2+0x310>)
 80140d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80140d8:	9008      	str	r0, [sp, #32]
 80140da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80140de:	9300      	str	r3, [sp, #0]
 80140e0:	9b06      	ldr	r3, [sp, #24]
 80140e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80140e6:	bfa8      	it	ge
 80140e8:	1ed4      	subge	r4, r2, #3
 80140ea:	9305      	str	r3, [sp, #20]
 80140ec:	bfb2      	itee	lt
 80140ee:	2400      	movlt	r4, #0
 80140f0:	2318      	movge	r3, #24
 80140f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80140f6:	f06f 0317 	mvn.w	r3, #23
 80140fa:	fb04 3303 	mla	r3, r4, r3, r3
 80140fe:	eb03 0b02 	add.w	fp, r3, r2
 8014102:	9b00      	ldr	r3, [sp, #0]
 8014104:	9a05      	ldr	r2, [sp, #20]
 8014106:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80143c0 <__kernel_rem_pio2+0x300>
 801410a:	eb03 0802 	add.w	r8, r3, r2
 801410e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014110:	1aa7      	subs	r7, r4, r2
 8014112:	ae20      	add	r6, sp, #128	@ 0x80
 8014114:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014118:	2500      	movs	r5, #0
 801411a:	4545      	cmp	r5, r8
 801411c:	dd13      	ble.n	8014146 <__kernel_rem_pio2+0x86>
 801411e:	9b06      	ldr	r3, [sp, #24]
 8014120:	aa20      	add	r2, sp, #128	@ 0x80
 8014122:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014126:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801412a:	f04f 0800 	mov.w	r8, #0
 801412e:	9b00      	ldr	r3, [sp, #0]
 8014130:	4598      	cmp	r8, r3
 8014132:	dc31      	bgt.n	8014198 <__kernel_rem_pio2+0xd8>
 8014134:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80143c0 <__kernel_rem_pio2+0x300>
 8014138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801413c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014140:	462f      	mov	r7, r5
 8014142:	2600      	movs	r6, #0
 8014144:	e01b      	b.n	801417e <__kernel_rem_pio2+0xbe>
 8014146:	42ef      	cmn	r7, r5
 8014148:	d407      	bmi.n	801415a <__kernel_rem_pio2+0x9a>
 801414a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801414e:	f7ec fa19 	bl	8000584 <__aeabi_i2d>
 8014152:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014156:	3501      	adds	r5, #1
 8014158:	e7df      	b.n	801411a <__kernel_rem_pio2+0x5a>
 801415a:	ec51 0b18 	vmov	r0, r1, d8
 801415e:	e7f8      	b.n	8014152 <__kernel_rem_pio2+0x92>
 8014160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014164:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014168:	f7ec fa76 	bl	8000658 <__aeabi_dmul>
 801416c:	4602      	mov	r2, r0
 801416e:	460b      	mov	r3, r1
 8014170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014174:	f7ec f8ba 	bl	80002ec <__adddf3>
 8014178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801417c:	3601      	adds	r6, #1
 801417e:	9b05      	ldr	r3, [sp, #20]
 8014180:	429e      	cmp	r6, r3
 8014182:	f1a7 0708 	sub.w	r7, r7, #8
 8014186:	ddeb      	ble.n	8014160 <__kernel_rem_pio2+0xa0>
 8014188:	ed9d 7b02 	vldr	d7, [sp, #8]
 801418c:	f108 0801 	add.w	r8, r8, #1
 8014190:	ecaa 7b02 	vstmia	sl!, {d7}
 8014194:	3508      	adds	r5, #8
 8014196:	e7ca      	b.n	801412e <__kernel_rem_pio2+0x6e>
 8014198:	9b00      	ldr	r3, [sp, #0]
 801419a:	f8dd 8000 	ldr.w	r8, [sp]
 801419e:	aa0c      	add	r2, sp, #48	@ 0x30
 80141a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80141a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80141a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80141a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80141ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80141ae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80141b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80141b4:	ab98      	add	r3, sp, #608	@ 0x260
 80141b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80141ba:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80141be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80141c2:	ac0c      	add	r4, sp, #48	@ 0x30
 80141c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80141c6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80141ca:	46a1      	mov	r9, r4
 80141cc:	46c2      	mov	sl, r8
 80141ce:	f1ba 0f00 	cmp.w	sl, #0
 80141d2:	f1a5 0508 	sub.w	r5, r5, #8
 80141d6:	dc77      	bgt.n	80142c8 <__kernel_rem_pio2+0x208>
 80141d8:	4658      	mov	r0, fp
 80141da:	ed9d 0b02 	vldr	d0, [sp, #8]
 80141de:	f7ff feb3 	bl	8013f48 <scalbn>
 80141e2:	ec57 6b10 	vmov	r6, r7, d0
 80141e6:	2200      	movs	r2, #0
 80141e8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80141ec:	4630      	mov	r0, r6
 80141ee:	4639      	mov	r1, r7
 80141f0:	f7ec fa32 	bl	8000658 <__aeabi_dmul>
 80141f4:	ec41 0b10 	vmov	d0, r0, r1
 80141f8:	f000 faba 	bl	8014770 <floor>
 80141fc:	4b75      	ldr	r3, [pc, #468]	@ (80143d4 <__kernel_rem_pio2+0x314>)
 80141fe:	ec51 0b10 	vmov	r0, r1, d0
 8014202:	2200      	movs	r2, #0
 8014204:	f7ec fa28 	bl	8000658 <__aeabi_dmul>
 8014208:	4602      	mov	r2, r0
 801420a:	460b      	mov	r3, r1
 801420c:	4630      	mov	r0, r6
 801420e:	4639      	mov	r1, r7
 8014210:	f7ec f86a 	bl	80002e8 <__aeabi_dsub>
 8014214:	460f      	mov	r7, r1
 8014216:	4606      	mov	r6, r0
 8014218:	f7ec fcce 	bl	8000bb8 <__aeabi_d2iz>
 801421c:	9002      	str	r0, [sp, #8]
 801421e:	f7ec f9b1 	bl	8000584 <__aeabi_i2d>
 8014222:	4602      	mov	r2, r0
 8014224:	460b      	mov	r3, r1
 8014226:	4630      	mov	r0, r6
 8014228:	4639      	mov	r1, r7
 801422a:	f7ec f85d 	bl	80002e8 <__aeabi_dsub>
 801422e:	f1bb 0f00 	cmp.w	fp, #0
 8014232:	4606      	mov	r6, r0
 8014234:	460f      	mov	r7, r1
 8014236:	dd6c      	ble.n	8014312 <__kernel_rem_pio2+0x252>
 8014238:	f108 31ff 	add.w	r1, r8, #4294967295
 801423c:	ab0c      	add	r3, sp, #48	@ 0x30
 801423e:	9d02      	ldr	r5, [sp, #8]
 8014240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014244:	f1cb 0018 	rsb	r0, fp, #24
 8014248:	fa43 f200 	asr.w	r2, r3, r0
 801424c:	4415      	add	r5, r2
 801424e:	4082      	lsls	r2, r0
 8014250:	1a9b      	subs	r3, r3, r2
 8014252:	aa0c      	add	r2, sp, #48	@ 0x30
 8014254:	9502      	str	r5, [sp, #8]
 8014256:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801425a:	f1cb 0217 	rsb	r2, fp, #23
 801425e:	fa43 f902 	asr.w	r9, r3, r2
 8014262:	f1b9 0f00 	cmp.w	r9, #0
 8014266:	dd64      	ble.n	8014332 <__kernel_rem_pio2+0x272>
 8014268:	9b02      	ldr	r3, [sp, #8]
 801426a:	2200      	movs	r2, #0
 801426c:	3301      	adds	r3, #1
 801426e:	9302      	str	r3, [sp, #8]
 8014270:	4615      	mov	r5, r2
 8014272:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014276:	4590      	cmp	r8, r2
 8014278:	f300 80b8 	bgt.w	80143ec <__kernel_rem_pio2+0x32c>
 801427c:	f1bb 0f00 	cmp.w	fp, #0
 8014280:	dd07      	ble.n	8014292 <__kernel_rem_pio2+0x1d2>
 8014282:	f1bb 0f01 	cmp.w	fp, #1
 8014286:	f000 80bf 	beq.w	8014408 <__kernel_rem_pio2+0x348>
 801428a:	f1bb 0f02 	cmp.w	fp, #2
 801428e:	f000 80c6 	beq.w	801441e <__kernel_rem_pio2+0x35e>
 8014292:	f1b9 0f02 	cmp.w	r9, #2
 8014296:	d14c      	bne.n	8014332 <__kernel_rem_pio2+0x272>
 8014298:	4632      	mov	r2, r6
 801429a:	463b      	mov	r3, r7
 801429c:	494e      	ldr	r1, [pc, #312]	@ (80143d8 <__kernel_rem_pio2+0x318>)
 801429e:	2000      	movs	r0, #0
 80142a0:	f7ec f822 	bl	80002e8 <__aeabi_dsub>
 80142a4:	4606      	mov	r6, r0
 80142a6:	460f      	mov	r7, r1
 80142a8:	2d00      	cmp	r5, #0
 80142aa:	d042      	beq.n	8014332 <__kernel_rem_pio2+0x272>
 80142ac:	4658      	mov	r0, fp
 80142ae:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80143c8 <__kernel_rem_pio2+0x308>
 80142b2:	f7ff fe49 	bl	8013f48 <scalbn>
 80142b6:	4630      	mov	r0, r6
 80142b8:	4639      	mov	r1, r7
 80142ba:	ec53 2b10 	vmov	r2, r3, d0
 80142be:	f7ec f813 	bl	80002e8 <__aeabi_dsub>
 80142c2:	4606      	mov	r6, r0
 80142c4:	460f      	mov	r7, r1
 80142c6:	e034      	b.n	8014332 <__kernel_rem_pio2+0x272>
 80142c8:	4b44      	ldr	r3, [pc, #272]	@ (80143dc <__kernel_rem_pio2+0x31c>)
 80142ca:	2200      	movs	r2, #0
 80142cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142d0:	f7ec f9c2 	bl	8000658 <__aeabi_dmul>
 80142d4:	f7ec fc70 	bl	8000bb8 <__aeabi_d2iz>
 80142d8:	f7ec f954 	bl	8000584 <__aeabi_i2d>
 80142dc:	4b40      	ldr	r3, [pc, #256]	@ (80143e0 <__kernel_rem_pio2+0x320>)
 80142de:	2200      	movs	r2, #0
 80142e0:	4606      	mov	r6, r0
 80142e2:	460f      	mov	r7, r1
 80142e4:	f7ec f9b8 	bl	8000658 <__aeabi_dmul>
 80142e8:	4602      	mov	r2, r0
 80142ea:	460b      	mov	r3, r1
 80142ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142f0:	f7eb fffa 	bl	80002e8 <__aeabi_dsub>
 80142f4:	f7ec fc60 	bl	8000bb8 <__aeabi_d2iz>
 80142f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80142fc:	f849 0b04 	str.w	r0, [r9], #4
 8014300:	4639      	mov	r1, r7
 8014302:	4630      	mov	r0, r6
 8014304:	f7eb fff2 	bl	80002ec <__adddf3>
 8014308:	f10a 3aff 	add.w	sl, sl, #4294967295
 801430c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014310:	e75d      	b.n	80141ce <__kernel_rem_pio2+0x10e>
 8014312:	d107      	bne.n	8014324 <__kernel_rem_pio2+0x264>
 8014314:	f108 33ff 	add.w	r3, r8, #4294967295
 8014318:	aa0c      	add	r2, sp, #48	@ 0x30
 801431a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801431e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014322:	e79e      	b.n	8014262 <__kernel_rem_pio2+0x1a2>
 8014324:	4b2f      	ldr	r3, [pc, #188]	@ (80143e4 <__kernel_rem_pio2+0x324>)
 8014326:	2200      	movs	r2, #0
 8014328:	f7ec fc1c 	bl	8000b64 <__aeabi_dcmpge>
 801432c:	2800      	cmp	r0, #0
 801432e:	d143      	bne.n	80143b8 <__kernel_rem_pio2+0x2f8>
 8014330:	4681      	mov	r9, r0
 8014332:	2200      	movs	r2, #0
 8014334:	2300      	movs	r3, #0
 8014336:	4630      	mov	r0, r6
 8014338:	4639      	mov	r1, r7
 801433a:	f7ec fbf5 	bl	8000b28 <__aeabi_dcmpeq>
 801433e:	2800      	cmp	r0, #0
 8014340:	f000 80bf 	beq.w	80144c2 <__kernel_rem_pio2+0x402>
 8014344:	f108 33ff 	add.w	r3, r8, #4294967295
 8014348:	2200      	movs	r2, #0
 801434a:	9900      	ldr	r1, [sp, #0]
 801434c:	428b      	cmp	r3, r1
 801434e:	da6e      	bge.n	801442e <__kernel_rem_pio2+0x36e>
 8014350:	2a00      	cmp	r2, #0
 8014352:	f000 8089 	beq.w	8014468 <__kernel_rem_pio2+0x3a8>
 8014356:	f108 38ff 	add.w	r8, r8, #4294967295
 801435a:	ab0c      	add	r3, sp, #48	@ 0x30
 801435c:	f1ab 0b18 	sub.w	fp, fp, #24
 8014360:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d0f6      	beq.n	8014356 <__kernel_rem_pio2+0x296>
 8014368:	4658      	mov	r0, fp
 801436a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80143c8 <__kernel_rem_pio2+0x308>
 801436e:	f7ff fdeb 	bl	8013f48 <scalbn>
 8014372:	f108 0301 	add.w	r3, r8, #1
 8014376:	00da      	lsls	r2, r3, #3
 8014378:	9205      	str	r2, [sp, #20]
 801437a:	ec55 4b10 	vmov	r4, r5, d0
 801437e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014380:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80143dc <__kernel_rem_pio2+0x31c>
 8014384:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014388:	4646      	mov	r6, r8
 801438a:	f04f 0a00 	mov.w	sl, #0
 801438e:	2e00      	cmp	r6, #0
 8014390:	f280 80cf 	bge.w	8014532 <__kernel_rem_pio2+0x472>
 8014394:	4644      	mov	r4, r8
 8014396:	2c00      	cmp	r4, #0
 8014398:	f2c0 80fd 	blt.w	8014596 <__kernel_rem_pio2+0x4d6>
 801439c:	4b12      	ldr	r3, [pc, #72]	@ (80143e8 <__kernel_rem_pio2+0x328>)
 801439e:	461f      	mov	r7, r3
 80143a0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80143a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80143a6:	9306      	str	r3, [sp, #24]
 80143a8:	f04f 0a00 	mov.w	sl, #0
 80143ac:	f04f 0b00 	mov.w	fp, #0
 80143b0:	2600      	movs	r6, #0
 80143b2:	eba8 0504 	sub.w	r5, r8, r4
 80143b6:	e0e2      	b.n	801457e <__kernel_rem_pio2+0x4be>
 80143b8:	f04f 0902 	mov.w	r9, #2
 80143bc:	e754      	b.n	8014268 <__kernel_rem_pio2+0x1a8>
 80143be:	bf00      	nop
	...
 80143cc:	3ff00000 	.word	0x3ff00000
 80143d0:	08018ce0 	.word	0x08018ce0
 80143d4:	40200000 	.word	0x40200000
 80143d8:	3ff00000 	.word	0x3ff00000
 80143dc:	3e700000 	.word	0x3e700000
 80143e0:	41700000 	.word	0x41700000
 80143e4:	3fe00000 	.word	0x3fe00000
 80143e8:	08018ca0 	.word	0x08018ca0
 80143ec:	f854 3b04 	ldr.w	r3, [r4], #4
 80143f0:	b945      	cbnz	r5, 8014404 <__kernel_rem_pio2+0x344>
 80143f2:	b123      	cbz	r3, 80143fe <__kernel_rem_pio2+0x33e>
 80143f4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80143f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80143fc:	2301      	movs	r3, #1
 80143fe:	3201      	adds	r2, #1
 8014400:	461d      	mov	r5, r3
 8014402:	e738      	b.n	8014276 <__kernel_rem_pio2+0x1b6>
 8014404:	1acb      	subs	r3, r1, r3
 8014406:	e7f7      	b.n	80143f8 <__kernel_rem_pio2+0x338>
 8014408:	f108 32ff 	add.w	r2, r8, #4294967295
 801440c:	ab0c      	add	r3, sp, #48	@ 0x30
 801440e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014412:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014416:	a90c      	add	r1, sp, #48	@ 0x30
 8014418:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801441c:	e739      	b.n	8014292 <__kernel_rem_pio2+0x1d2>
 801441e:	f108 32ff 	add.w	r2, r8, #4294967295
 8014422:	ab0c      	add	r3, sp, #48	@ 0x30
 8014424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014428:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801442c:	e7f3      	b.n	8014416 <__kernel_rem_pio2+0x356>
 801442e:	a90c      	add	r1, sp, #48	@ 0x30
 8014430:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014434:	3b01      	subs	r3, #1
 8014436:	430a      	orrs	r2, r1
 8014438:	e787      	b.n	801434a <__kernel_rem_pio2+0x28a>
 801443a:	3401      	adds	r4, #1
 801443c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014440:	2a00      	cmp	r2, #0
 8014442:	d0fa      	beq.n	801443a <__kernel_rem_pio2+0x37a>
 8014444:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014446:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801444a:	eb0d 0503 	add.w	r5, sp, r3
 801444e:	9b06      	ldr	r3, [sp, #24]
 8014450:	aa20      	add	r2, sp, #128	@ 0x80
 8014452:	4443      	add	r3, r8
 8014454:	f108 0701 	add.w	r7, r8, #1
 8014458:	3d98      	subs	r5, #152	@ 0x98
 801445a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801445e:	4444      	add	r4, r8
 8014460:	42bc      	cmp	r4, r7
 8014462:	da04      	bge.n	801446e <__kernel_rem_pio2+0x3ae>
 8014464:	46a0      	mov	r8, r4
 8014466:	e6a2      	b.n	80141ae <__kernel_rem_pio2+0xee>
 8014468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801446a:	2401      	movs	r4, #1
 801446c:	e7e6      	b.n	801443c <__kernel_rem_pio2+0x37c>
 801446e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014470:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014474:	f7ec f886 	bl	8000584 <__aeabi_i2d>
 8014478:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8014740 <__kernel_rem_pio2+0x680>
 801447c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014480:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014488:	46b2      	mov	sl, r6
 801448a:	f04f 0800 	mov.w	r8, #0
 801448e:	9b05      	ldr	r3, [sp, #20]
 8014490:	4598      	cmp	r8, r3
 8014492:	dd05      	ble.n	80144a0 <__kernel_rem_pio2+0x3e0>
 8014494:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014498:	3701      	adds	r7, #1
 801449a:	eca5 7b02 	vstmia	r5!, {d7}
 801449e:	e7df      	b.n	8014460 <__kernel_rem_pio2+0x3a0>
 80144a0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80144a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80144a8:	f7ec f8d6 	bl	8000658 <__aeabi_dmul>
 80144ac:	4602      	mov	r2, r0
 80144ae:	460b      	mov	r3, r1
 80144b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144b4:	f7eb ff1a 	bl	80002ec <__adddf3>
 80144b8:	f108 0801 	add.w	r8, r8, #1
 80144bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144c0:	e7e5      	b.n	801448e <__kernel_rem_pio2+0x3ce>
 80144c2:	f1cb 0000 	rsb	r0, fp, #0
 80144c6:	ec47 6b10 	vmov	d0, r6, r7
 80144ca:	f7ff fd3d 	bl	8013f48 <scalbn>
 80144ce:	ec55 4b10 	vmov	r4, r5, d0
 80144d2:	4b9d      	ldr	r3, [pc, #628]	@ (8014748 <__kernel_rem_pio2+0x688>)
 80144d4:	2200      	movs	r2, #0
 80144d6:	4620      	mov	r0, r4
 80144d8:	4629      	mov	r1, r5
 80144da:	f7ec fb43 	bl	8000b64 <__aeabi_dcmpge>
 80144de:	b300      	cbz	r0, 8014522 <__kernel_rem_pio2+0x462>
 80144e0:	4b9a      	ldr	r3, [pc, #616]	@ (801474c <__kernel_rem_pio2+0x68c>)
 80144e2:	2200      	movs	r2, #0
 80144e4:	4620      	mov	r0, r4
 80144e6:	4629      	mov	r1, r5
 80144e8:	f7ec f8b6 	bl	8000658 <__aeabi_dmul>
 80144ec:	f7ec fb64 	bl	8000bb8 <__aeabi_d2iz>
 80144f0:	4606      	mov	r6, r0
 80144f2:	f7ec f847 	bl	8000584 <__aeabi_i2d>
 80144f6:	4b94      	ldr	r3, [pc, #592]	@ (8014748 <__kernel_rem_pio2+0x688>)
 80144f8:	2200      	movs	r2, #0
 80144fa:	f7ec f8ad 	bl	8000658 <__aeabi_dmul>
 80144fe:	460b      	mov	r3, r1
 8014500:	4602      	mov	r2, r0
 8014502:	4629      	mov	r1, r5
 8014504:	4620      	mov	r0, r4
 8014506:	f7eb feef 	bl	80002e8 <__aeabi_dsub>
 801450a:	f7ec fb55 	bl	8000bb8 <__aeabi_d2iz>
 801450e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014510:	f10b 0b18 	add.w	fp, fp, #24
 8014514:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014518:	f108 0801 	add.w	r8, r8, #1
 801451c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014520:	e722      	b.n	8014368 <__kernel_rem_pio2+0x2a8>
 8014522:	4620      	mov	r0, r4
 8014524:	4629      	mov	r1, r5
 8014526:	f7ec fb47 	bl	8000bb8 <__aeabi_d2iz>
 801452a:	ab0c      	add	r3, sp, #48	@ 0x30
 801452c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014530:	e71a      	b.n	8014368 <__kernel_rem_pio2+0x2a8>
 8014532:	ab0c      	add	r3, sp, #48	@ 0x30
 8014534:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014538:	f7ec f824 	bl	8000584 <__aeabi_i2d>
 801453c:	4622      	mov	r2, r4
 801453e:	462b      	mov	r3, r5
 8014540:	f7ec f88a 	bl	8000658 <__aeabi_dmul>
 8014544:	4652      	mov	r2, sl
 8014546:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801454a:	465b      	mov	r3, fp
 801454c:	4620      	mov	r0, r4
 801454e:	4629      	mov	r1, r5
 8014550:	f7ec f882 	bl	8000658 <__aeabi_dmul>
 8014554:	3e01      	subs	r6, #1
 8014556:	4604      	mov	r4, r0
 8014558:	460d      	mov	r5, r1
 801455a:	e718      	b.n	801438e <__kernel_rem_pio2+0x2ce>
 801455c:	9906      	ldr	r1, [sp, #24]
 801455e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8014562:	9106      	str	r1, [sp, #24]
 8014564:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8014568:	f7ec f876 	bl	8000658 <__aeabi_dmul>
 801456c:	4602      	mov	r2, r0
 801456e:	460b      	mov	r3, r1
 8014570:	4650      	mov	r0, sl
 8014572:	4659      	mov	r1, fp
 8014574:	f7eb feba 	bl	80002ec <__adddf3>
 8014578:	3601      	adds	r6, #1
 801457a:	4682      	mov	sl, r0
 801457c:	468b      	mov	fp, r1
 801457e:	9b00      	ldr	r3, [sp, #0]
 8014580:	429e      	cmp	r6, r3
 8014582:	dc01      	bgt.n	8014588 <__kernel_rem_pio2+0x4c8>
 8014584:	42b5      	cmp	r5, r6
 8014586:	dae9      	bge.n	801455c <__kernel_rem_pio2+0x49c>
 8014588:	ab48      	add	r3, sp, #288	@ 0x120
 801458a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801458e:	e9c5 ab00 	strd	sl, fp, [r5]
 8014592:	3c01      	subs	r4, #1
 8014594:	e6ff      	b.n	8014396 <__kernel_rem_pio2+0x2d6>
 8014596:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014598:	2b02      	cmp	r3, #2
 801459a:	dc0b      	bgt.n	80145b4 <__kernel_rem_pio2+0x4f4>
 801459c:	2b00      	cmp	r3, #0
 801459e:	dc39      	bgt.n	8014614 <__kernel_rem_pio2+0x554>
 80145a0:	d05d      	beq.n	801465e <__kernel_rem_pio2+0x59e>
 80145a2:	9b02      	ldr	r3, [sp, #8]
 80145a4:	f003 0007 	and.w	r0, r3, #7
 80145a8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80145ac:	ecbd 8b02 	vpop	{d8}
 80145b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145b4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80145b6:	2b03      	cmp	r3, #3
 80145b8:	d1f3      	bne.n	80145a2 <__kernel_rem_pio2+0x4e2>
 80145ba:	9b05      	ldr	r3, [sp, #20]
 80145bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80145c0:	eb0d 0403 	add.w	r4, sp, r3
 80145c4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80145c8:	4625      	mov	r5, r4
 80145ca:	46c2      	mov	sl, r8
 80145cc:	f1ba 0f00 	cmp.w	sl, #0
 80145d0:	f1a5 0508 	sub.w	r5, r5, #8
 80145d4:	dc6b      	bgt.n	80146ae <__kernel_rem_pio2+0x5ee>
 80145d6:	4645      	mov	r5, r8
 80145d8:	2d01      	cmp	r5, #1
 80145da:	f1a4 0408 	sub.w	r4, r4, #8
 80145de:	f300 8087 	bgt.w	80146f0 <__kernel_rem_pio2+0x630>
 80145e2:	9c05      	ldr	r4, [sp, #20]
 80145e4:	ab48      	add	r3, sp, #288	@ 0x120
 80145e6:	441c      	add	r4, r3
 80145e8:	2000      	movs	r0, #0
 80145ea:	2100      	movs	r1, #0
 80145ec:	f1b8 0f01 	cmp.w	r8, #1
 80145f0:	f300 809c 	bgt.w	801472c <__kernel_rem_pio2+0x66c>
 80145f4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80145f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80145fc:	f1b9 0f00 	cmp.w	r9, #0
 8014600:	f040 80a6 	bne.w	8014750 <__kernel_rem_pio2+0x690>
 8014604:	9b04      	ldr	r3, [sp, #16]
 8014606:	e9c3 7800 	strd	r7, r8, [r3]
 801460a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801460e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014612:	e7c6      	b.n	80145a2 <__kernel_rem_pio2+0x4e2>
 8014614:	9d05      	ldr	r5, [sp, #20]
 8014616:	ab48      	add	r3, sp, #288	@ 0x120
 8014618:	441d      	add	r5, r3
 801461a:	4644      	mov	r4, r8
 801461c:	2000      	movs	r0, #0
 801461e:	2100      	movs	r1, #0
 8014620:	2c00      	cmp	r4, #0
 8014622:	da35      	bge.n	8014690 <__kernel_rem_pio2+0x5d0>
 8014624:	f1b9 0f00 	cmp.w	r9, #0
 8014628:	d038      	beq.n	801469c <__kernel_rem_pio2+0x5dc>
 801462a:	4602      	mov	r2, r0
 801462c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014630:	9c04      	ldr	r4, [sp, #16]
 8014632:	e9c4 2300 	strd	r2, r3, [r4]
 8014636:	4602      	mov	r2, r0
 8014638:	460b      	mov	r3, r1
 801463a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801463e:	f7eb fe53 	bl	80002e8 <__aeabi_dsub>
 8014642:	ad4a      	add	r5, sp, #296	@ 0x128
 8014644:	2401      	movs	r4, #1
 8014646:	45a0      	cmp	r8, r4
 8014648:	da2b      	bge.n	80146a2 <__kernel_rem_pio2+0x5e2>
 801464a:	f1b9 0f00 	cmp.w	r9, #0
 801464e:	d002      	beq.n	8014656 <__kernel_rem_pio2+0x596>
 8014650:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014654:	4619      	mov	r1, r3
 8014656:	9b04      	ldr	r3, [sp, #16]
 8014658:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801465c:	e7a1      	b.n	80145a2 <__kernel_rem_pio2+0x4e2>
 801465e:	9c05      	ldr	r4, [sp, #20]
 8014660:	ab48      	add	r3, sp, #288	@ 0x120
 8014662:	441c      	add	r4, r3
 8014664:	2000      	movs	r0, #0
 8014666:	2100      	movs	r1, #0
 8014668:	f1b8 0f00 	cmp.w	r8, #0
 801466c:	da09      	bge.n	8014682 <__kernel_rem_pio2+0x5c2>
 801466e:	f1b9 0f00 	cmp.w	r9, #0
 8014672:	d002      	beq.n	801467a <__kernel_rem_pio2+0x5ba>
 8014674:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014678:	4619      	mov	r1, r3
 801467a:	9b04      	ldr	r3, [sp, #16]
 801467c:	e9c3 0100 	strd	r0, r1, [r3]
 8014680:	e78f      	b.n	80145a2 <__kernel_rem_pio2+0x4e2>
 8014682:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014686:	f7eb fe31 	bl	80002ec <__adddf3>
 801468a:	f108 38ff 	add.w	r8, r8, #4294967295
 801468e:	e7eb      	b.n	8014668 <__kernel_rem_pio2+0x5a8>
 8014690:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014694:	f7eb fe2a 	bl	80002ec <__adddf3>
 8014698:	3c01      	subs	r4, #1
 801469a:	e7c1      	b.n	8014620 <__kernel_rem_pio2+0x560>
 801469c:	4602      	mov	r2, r0
 801469e:	460b      	mov	r3, r1
 80146a0:	e7c6      	b.n	8014630 <__kernel_rem_pio2+0x570>
 80146a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80146a6:	f7eb fe21 	bl	80002ec <__adddf3>
 80146aa:	3401      	adds	r4, #1
 80146ac:	e7cb      	b.n	8014646 <__kernel_rem_pio2+0x586>
 80146ae:	ed95 7b00 	vldr	d7, [r5]
 80146b2:	ed8d 7b00 	vstr	d7, [sp]
 80146b6:	ed95 7b02 	vldr	d7, [r5, #8]
 80146ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146be:	ec53 2b17 	vmov	r2, r3, d7
 80146c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80146c6:	f7eb fe11 	bl	80002ec <__adddf3>
 80146ca:	4602      	mov	r2, r0
 80146cc:	460b      	mov	r3, r1
 80146ce:	4606      	mov	r6, r0
 80146d0:	460f      	mov	r7, r1
 80146d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146d6:	f7eb fe07 	bl	80002e8 <__aeabi_dsub>
 80146da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80146de:	f7eb fe05 	bl	80002ec <__adddf3>
 80146e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80146ea:	e9c5 6700 	strd	r6, r7, [r5]
 80146ee:	e76d      	b.n	80145cc <__kernel_rem_pio2+0x50c>
 80146f0:	ed94 7b00 	vldr	d7, [r4]
 80146f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80146f8:	ec51 0b17 	vmov	r0, r1, d7
 80146fc:	4652      	mov	r2, sl
 80146fe:	465b      	mov	r3, fp
 8014700:	ed8d 7b00 	vstr	d7, [sp]
 8014704:	f7eb fdf2 	bl	80002ec <__adddf3>
 8014708:	4602      	mov	r2, r0
 801470a:	460b      	mov	r3, r1
 801470c:	4606      	mov	r6, r0
 801470e:	460f      	mov	r7, r1
 8014710:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014714:	f7eb fde8 	bl	80002e8 <__aeabi_dsub>
 8014718:	4652      	mov	r2, sl
 801471a:	465b      	mov	r3, fp
 801471c:	f7eb fde6 	bl	80002ec <__adddf3>
 8014720:	3d01      	subs	r5, #1
 8014722:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014726:	e9c4 6700 	strd	r6, r7, [r4]
 801472a:	e755      	b.n	80145d8 <__kernel_rem_pio2+0x518>
 801472c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014730:	f7eb fddc 	bl	80002ec <__adddf3>
 8014734:	f108 38ff 	add.w	r8, r8, #4294967295
 8014738:	e758      	b.n	80145ec <__kernel_rem_pio2+0x52c>
 801473a:	bf00      	nop
 801473c:	f3af 8000 	nop.w
	...
 8014748:	41700000 	.word	0x41700000
 801474c:	3e700000 	.word	0x3e700000
 8014750:	9b04      	ldr	r3, [sp, #16]
 8014752:	9a04      	ldr	r2, [sp, #16]
 8014754:	601f      	str	r7, [r3, #0]
 8014756:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801475a:	605c      	str	r4, [r3, #4]
 801475c:	609d      	str	r5, [r3, #8]
 801475e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014762:	60d3      	str	r3, [r2, #12]
 8014764:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014768:	6110      	str	r0, [r2, #16]
 801476a:	6153      	str	r3, [r2, #20]
 801476c:	e719      	b.n	80145a2 <__kernel_rem_pio2+0x4e2>
 801476e:	bf00      	nop

08014770 <floor>:
 8014770:	ec51 0b10 	vmov	r0, r1, d0
 8014774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801477c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014780:	2e13      	cmp	r6, #19
 8014782:	460c      	mov	r4, r1
 8014784:	4605      	mov	r5, r0
 8014786:	4680      	mov	r8, r0
 8014788:	dc34      	bgt.n	80147f4 <floor+0x84>
 801478a:	2e00      	cmp	r6, #0
 801478c:	da17      	bge.n	80147be <floor+0x4e>
 801478e:	a332      	add	r3, pc, #200	@ (adr r3, 8014858 <floor+0xe8>)
 8014790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014794:	f7eb fdaa 	bl	80002ec <__adddf3>
 8014798:	2200      	movs	r2, #0
 801479a:	2300      	movs	r3, #0
 801479c:	f7ec f9ec 	bl	8000b78 <__aeabi_dcmpgt>
 80147a0:	b150      	cbz	r0, 80147b8 <floor+0x48>
 80147a2:	2c00      	cmp	r4, #0
 80147a4:	da55      	bge.n	8014852 <floor+0xe2>
 80147a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80147aa:	432c      	orrs	r4, r5
 80147ac:	2500      	movs	r5, #0
 80147ae:	42ac      	cmp	r4, r5
 80147b0:	4c2b      	ldr	r4, [pc, #172]	@ (8014860 <floor+0xf0>)
 80147b2:	bf08      	it	eq
 80147b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80147b8:	4621      	mov	r1, r4
 80147ba:	4628      	mov	r0, r5
 80147bc:	e023      	b.n	8014806 <floor+0x96>
 80147be:	4f29      	ldr	r7, [pc, #164]	@ (8014864 <floor+0xf4>)
 80147c0:	4137      	asrs	r7, r6
 80147c2:	ea01 0307 	and.w	r3, r1, r7
 80147c6:	4303      	orrs	r3, r0
 80147c8:	d01d      	beq.n	8014806 <floor+0x96>
 80147ca:	a323      	add	r3, pc, #140	@ (adr r3, 8014858 <floor+0xe8>)
 80147cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147d0:	f7eb fd8c 	bl	80002ec <__adddf3>
 80147d4:	2200      	movs	r2, #0
 80147d6:	2300      	movs	r3, #0
 80147d8:	f7ec f9ce 	bl	8000b78 <__aeabi_dcmpgt>
 80147dc:	2800      	cmp	r0, #0
 80147de:	d0eb      	beq.n	80147b8 <floor+0x48>
 80147e0:	2c00      	cmp	r4, #0
 80147e2:	bfbe      	ittt	lt
 80147e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80147e8:	4133      	asrlt	r3, r6
 80147ea:	18e4      	addlt	r4, r4, r3
 80147ec:	ea24 0407 	bic.w	r4, r4, r7
 80147f0:	2500      	movs	r5, #0
 80147f2:	e7e1      	b.n	80147b8 <floor+0x48>
 80147f4:	2e33      	cmp	r6, #51	@ 0x33
 80147f6:	dd0a      	ble.n	801480e <floor+0x9e>
 80147f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80147fc:	d103      	bne.n	8014806 <floor+0x96>
 80147fe:	4602      	mov	r2, r0
 8014800:	460b      	mov	r3, r1
 8014802:	f7eb fd73 	bl	80002ec <__adddf3>
 8014806:	ec41 0b10 	vmov	d0, r0, r1
 801480a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801480e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014812:	f04f 37ff 	mov.w	r7, #4294967295
 8014816:	40df      	lsrs	r7, r3
 8014818:	4207      	tst	r7, r0
 801481a:	d0f4      	beq.n	8014806 <floor+0x96>
 801481c:	a30e      	add	r3, pc, #56	@ (adr r3, 8014858 <floor+0xe8>)
 801481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014822:	f7eb fd63 	bl	80002ec <__adddf3>
 8014826:	2200      	movs	r2, #0
 8014828:	2300      	movs	r3, #0
 801482a:	f7ec f9a5 	bl	8000b78 <__aeabi_dcmpgt>
 801482e:	2800      	cmp	r0, #0
 8014830:	d0c2      	beq.n	80147b8 <floor+0x48>
 8014832:	2c00      	cmp	r4, #0
 8014834:	da0a      	bge.n	801484c <floor+0xdc>
 8014836:	2e14      	cmp	r6, #20
 8014838:	d101      	bne.n	801483e <floor+0xce>
 801483a:	3401      	adds	r4, #1
 801483c:	e006      	b.n	801484c <floor+0xdc>
 801483e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014842:	2301      	movs	r3, #1
 8014844:	40b3      	lsls	r3, r6
 8014846:	441d      	add	r5, r3
 8014848:	4545      	cmp	r5, r8
 801484a:	d3f6      	bcc.n	801483a <floor+0xca>
 801484c:	ea25 0507 	bic.w	r5, r5, r7
 8014850:	e7b2      	b.n	80147b8 <floor+0x48>
 8014852:	2500      	movs	r5, #0
 8014854:	462c      	mov	r4, r5
 8014856:	e7af      	b.n	80147b8 <floor+0x48>
 8014858:	8800759c 	.word	0x8800759c
 801485c:	7e37e43c 	.word	0x7e37e43c
 8014860:	bff00000 	.word	0xbff00000
 8014864:	000fffff 	.word	0x000fffff

08014868 <abort>:
 8014868:	b508      	push	{r3, lr}
 801486a:	2006      	movs	r0, #6
 801486c:	f000 fe7e 	bl	801556c <raise>
 8014870:	2001      	movs	r0, #1
 8014872:	f7f9 f975 	bl	800db60 <_exit>
	...

08014878 <malloc>:
 8014878:	4b02      	ldr	r3, [pc, #8]	@ (8014884 <malloc+0xc>)
 801487a:	4601      	mov	r1, r0
 801487c:	6818      	ldr	r0, [r3, #0]
 801487e:	f000 b82d 	b.w	80148dc <_malloc_r>
 8014882:	bf00      	nop
 8014884:	20000044 	.word	0x20000044

08014888 <free>:
 8014888:	4b02      	ldr	r3, [pc, #8]	@ (8014894 <free+0xc>)
 801488a:	4601      	mov	r1, r0
 801488c:	6818      	ldr	r0, [r3, #0]
 801488e:	f001 bd6b 	b.w	8016368 <_free_r>
 8014892:	bf00      	nop
 8014894:	20000044 	.word	0x20000044

08014898 <sbrk_aligned>:
 8014898:	b570      	push	{r4, r5, r6, lr}
 801489a:	4e0f      	ldr	r6, [pc, #60]	@ (80148d8 <sbrk_aligned+0x40>)
 801489c:	460c      	mov	r4, r1
 801489e:	6831      	ldr	r1, [r6, #0]
 80148a0:	4605      	mov	r5, r0
 80148a2:	b911      	cbnz	r1, 80148aa <sbrk_aligned+0x12>
 80148a4:	f000 feb6 	bl	8015614 <_sbrk_r>
 80148a8:	6030      	str	r0, [r6, #0]
 80148aa:	4621      	mov	r1, r4
 80148ac:	4628      	mov	r0, r5
 80148ae:	f000 feb1 	bl	8015614 <_sbrk_r>
 80148b2:	1c43      	adds	r3, r0, #1
 80148b4:	d103      	bne.n	80148be <sbrk_aligned+0x26>
 80148b6:	f04f 34ff 	mov.w	r4, #4294967295
 80148ba:	4620      	mov	r0, r4
 80148bc:	bd70      	pop	{r4, r5, r6, pc}
 80148be:	1cc4      	adds	r4, r0, #3
 80148c0:	f024 0403 	bic.w	r4, r4, #3
 80148c4:	42a0      	cmp	r0, r4
 80148c6:	d0f8      	beq.n	80148ba <sbrk_aligned+0x22>
 80148c8:	1a21      	subs	r1, r4, r0
 80148ca:	4628      	mov	r0, r5
 80148cc:	f000 fea2 	bl	8015614 <_sbrk_r>
 80148d0:	3001      	adds	r0, #1
 80148d2:	d1f2      	bne.n	80148ba <sbrk_aligned+0x22>
 80148d4:	e7ef      	b.n	80148b6 <sbrk_aligned+0x1e>
 80148d6:	bf00      	nop
 80148d8:	200005d4 	.word	0x200005d4

080148dc <_malloc_r>:
 80148dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148e0:	1ccd      	adds	r5, r1, #3
 80148e2:	f025 0503 	bic.w	r5, r5, #3
 80148e6:	3508      	adds	r5, #8
 80148e8:	2d0c      	cmp	r5, #12
 80148ea:	bf38      	it	cc
 80148ec:	250c      	movcc	r5, #12
 80148ee:	2d00      	cmp	r5, #0
 80148f0:	4606      	mov	r6, r0
 80148f2:	db01      	blt.n	80148f8 <_malloc_r+0x1c>
 80148f4:	42a9      	cmp	r1, r5
 80148f6:	d904      	bls.n	8014902 <_malloc_r+0x26>
 80148f8:	230c      	movs	r3, #12
 80148fa:	6033      	str	r3, [r6, #0]
 80148fc:	2000      	movs	r0, #0
 80148fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80149d8 <_malloc_r+0xfc>
 8014906:	f000 f869 	bl	80149dc <__malloc_lock>
 801490a:	f8d8 3000 	ldr.w	r3, [r8]
 801490e:	461c      	mov	r4, r3
 8014910:	bb44      	cbnz	r4, 8014964 <_malloc_r+0x88>
 8014912:	4629      	mov	r1, r5
 8014914:	4630      	mov	r0, r6
 8014916:	f7ff ffbf 	bl	8014898 <sbrk_aligned>
 801491a:	1c43      	adds	r3, r0, #1
 801491c:	4604      	mov	r4, r0
 801491e:	d158      	bne.n	80149d2 <_malloc_r+0xf6>
 8014920:	f8d8 4000 	ldr.w	r4, [r8]
 8014924:	4627      	mov	r7, r4
 8014926:	2f00      	cmp	r7, #0
 8014928:	d143      	bne.n	80149b2 <_malloc_r+0xd6>
 801492a:	2c00      	cmp	r4, #0
 801492c:	d04b      	beq.n	80149c6 <_malloc_r+0xea>
 801492e:	6823      	ldr	r3, [r4, #0]
 8014930:	4639      	mov	r1, r7
 8014932:	4630      	mov	r0, r6
 8014934:	eb04 0903 	add.w	r9, r4, r3
 8014938:	f000 fe6c 	bl	8015614 <_sbrk_r>
 801493c:	4581      	cmp	r9, r0
 801493e:	d142      	bne.n	80149c6 <_malloc_r+0xea>
 8014940:	6821      	ldr	r1, [r4, #0]
 8014942:	1a6d      	subs	r5, r5, r1
 8014944:	4629      	mov	r1, r5
 8014946:	4630      	mov	r0, r6
 8014948:	f7ff ffa6 	bl	8014898 <sbrk_aligned>
 801494c:	3001      	adds	r0, #1
 801494e:	d03a      	beq.n	80149c6 <_malloc_r+0xea>
 8014950:	6823      	ldr	r3, [r4, #0]
 8014952:	442b      	add	r3, r5
 8014954:	6023      	str	r3, [r4, #0]
 8014956:	f8d8 3000 	ldr.w	r3, [r8]
 801495a:	685a      	ldr	r2, [r3, #4]
 801495c:	bb62      	cbnz	r2, 80149b8 <_malloc_r+0xdc>
 801495e:	f8c8 7000 	str.w	r7, [r8]
 8014962:	e00f      	b.n	8014984 <_malloc_r+0xa8>
 8014964:	6822      	ldr	r2, [r4, #0]
 8014966:	1b52      	subs	r2, r2, r5
 8014968:	d420      	bmi.n	80149ac <_malloc_r+0xd0>
 801496a:	2a0b      	cmp	r2, #11
 801496c:	d917      	bls.n	801499e <_malloc_r+0xc2>
 801496e:	1961      	adds	r1, r4, r5
 8014970:	42a3      	cmp	r3, r4
 8014972:	6025      	str	r5, [r4, #0]
 8014974:	bf18      	it	ne
 8014976:	6059      	strne	r1, [r3, #4]
 8014978:	6863      	ldr	r3, [r4, #4]
 801497a:	bf08      	it	eq
 801497c:	f8c8 1000 	streq.w	r1, [r8]
 8014980:	5162      	str	r2, [r4, r5]
 8014982:	604b      	str	r3, [r1, #4]
 8014984:	4630      	mov	r0, r6
 8014986:	f000 f82f 	bl	80149e8 <__malloc_unlock>
 801498a:	f104 000b 	add.w	r0, r4, #11
 801498e:	1d23      	adds	r3, r4, #4
 8014990:	f020 0007 	bic.w	r0, r0, #7
 8014994:	1ac2      	subs	r2, r0, r3
 8014996:	bf1c      	itt	ne
 8014998:	1a1b      	subne	r3, r3, r0
 801499a:	50a3      	strne	r3, [r4, r2]
 801499c:	e7af      	b.n	80148fe <_malloc_r+0x22>
 801499e:	6862      	ldr	r2, [r4, #4]
 80149a0:	42a3      	cmp	r3, r4
 80149a2:	bf0c      	ite	eq
 80149a4:	f8c8 2000 	streq.w	r2, [r8]
 80149a8:	605a      	strne	r2, [r3, #4]
 80149aa:	e7eb      	b.n	8014984 <_malloc_r+0xa8>
 80149ac:	4623      	mov	r3, r4
 80149ae:	6864      	ldr	r4, [r4, #4]
 80149b0:	e7ae      	b.n	8014910 <_malloc_r+0x34>
 80149b2:	463c      	mov	r4, r7
 80149b4:	687f      	ldr	r7, [r7, #4]
 80149b6:	e7b6      	b.n	8014926 <_malloc_r+0x4a>
 80149b8:	461a      	mov	r2, r3
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	42a3      	cmp	r3, r4
 80149be:	d1fb      	bne.n	80149b8 <_malloc_r+0xdc>
 80149c0:	2300      	movs	r3, #0
 80149c2:	6053      	str	r3, [r2, #4]
 80149c4:	e7de      	b.n	8014984 <_malloc_r+0xa8>
 80149c6:	230c      	movs	r3, #12
 80149c8:	6033      	str	r3, [r6, #0]
 80149ca:	4630      	mov	r0, r6
 80149cc:	f000 f80c 	bl	80149e8 <__malloc_unlock>
 80149d0:	e794      	b.n	80148fc <_malloc_r+0x20>
 80149d2:	6005      	str	r5, [r0, #0]
 80149d4:	e7d6      	b.n	8014984 <_malloc_r+0xa8>
 80149d6:	bf00      	nop
 80149d8:	200005d8 	.word	0x200005d8

080149dc <__malloc_lock>:
 80149dc:	4801      	ldr	r0, [pc, #4]	@ (80149e4 <__malloc_lock+0x8>)
 80149de:	f000 be66 	b.w	80156ae <__retarget_lock_acquire_recursive>
 80149e2:	bf00      	nop
 80149e4:	2000071c 	.word	0x2000071c

080149e8 <__malloc_unlock>:
 80149e8:	4801      	ldr	r0, [pc, #4]	@ (80149f0 <__malloc_unlock+0x8>)
 80149ea:	f000 be61 	b.w	80156b0 <__retarget_lock_release_recursive>
 80149ee:	bf00      	nop
 80149f0:	2000071c 	.word	0x2000071c

080149f4 <__cxa_atexit>:
 80149f4:	b510      	push	{r4, lr}
 80149f6:	4604      	mov	r4, r0
 80149f8:	4804      	ldr	r0, [pc, #16]	@ (8014a0c <__cxa_atexit+0x18>)
 80149fa:	4613      	mov	r3, r2
 80149fc:	b120      	cbz	r0, 8014a08 <__cxa_atexit+0x14>
 80149fe:	460a      	mov	r2, r1
 8014a00:	2002      	movs	r0, #2
 8014a02:	4621      	mov	r1, r4
 8014a04:	f3af 8000 	nop.w
 8014a08:	bd10      	pop	{r4, pc}
 8014a0a:	bf00      	nop
 8014a0c:	00000000 	.word	0x00000000

08014a10 <__cvt>:
 8014a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a14:	ec57 6b10 	vmov	r6, r7, d0
 8014a18:	2f00      	cmp	r7, #0
 8014a1a:	460c      	mov	r4, r1
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	463b      	mov	r3, r7
 8014a20:	bfbb      	ittet	lt
 8014a22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014a26:	461f      	movlt	r7, r3
 8014a28:	2300      	movge	r3, #0
 8014a2a:	232d      	movlt	r3, #45	@ 0x2d
 8014a2c:	700b      	strb	r3, [r1, #0]
 8014a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014a30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014a34:	4691      	mov	r9, r2
 8014a36:	f023 0820 	bic.w	r8, r3, #32
 8014a3a:	bfbc      	itt	lt
 8014a3c:	4632      	movlt	r2, r6
 8014a3e:	4616      	movlt	r6, r2
 8014a40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014a44:	d005      	beq.n	8014a52 <__cvt+0x42>
 8014a46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014a4a:	d100      	bne.n	8014a4e <__cvt+0x3e>
 8014a4c:	3401      	adds	r4, #1
 8014a4e:	2102      	movs	r1, #2
 8014a50:	e000      	b.n	8014a54 <__cvt+0x44>
 8014a52:	2103      	movs	r1, #3
 8014a54:	ab03      	add	r3, sp, #12
 8014a56:	9301      	str	r3, [sp, #4]
 8014a58:	ab02      	add	r3, sp, #8
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	ec47 6b10 	vmov	d0, r6, r7
 8014a60:	4653      	mov	r3, sl
 8014a62:	4622      	mov	r2, r4
 8014a64:	f000 febc 	bl	80157e0 <_dtoa_r>
 8014a68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014a6c:	4605      	mov	r5, r0
 8014a6e:	d119      	bne.n	8014aa4 <__cvt+0x94>
 8014a70:	f019 0f01 	tst.w	r9, #1
 8014a74:	d00e      	beq.n	8014a94 <__cvt+0x84>
 8014a76:	eb00 0904 	add.w	r9, r0, r4
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	4630      	mov	r0, r6
 8014a80:	4639      	mov	r1, r7
 8014a82:	f7ec f851 	bl	8000b28 <__aeabi_dcmpeq>
 8014a86:	b108      	cbz	r0, 8014a8c <__cvt+0x7c>
 8014a88:	f8cd 900c 	str.w	r9, [sp, #12]
 8014a8c:	2230      	movs	r2, #48	@ 0x30
 8014a8e:	9b03      	ldr	r3, [sp, #12]
 8014a90:	454b      	cmp	r3, r9
 8014a92:	d31e      	bcc.n	8014ad2 <__cvt+0xc2>
 8014a94:	9b03      	ldr	r3, [sp, #12]
 8014a96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014a98:	1b5b      	subs	r3, r3, r5
 8014a9a:	4628      	mov	r0, r5
 8014a9c:	6013      	str	r3, [r2, #0]
 8014a9e:	b004      	add	sp, #16
 8014aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014aa8:	eb00 0904 	add.w	r9, r0, r4
 8014aac:	d1e5      	bne.n	8014a7a <__cvt+0x6a>
 8014aae:	7803      	ldrb	r3, [r0, #0]
 8014ab0:	2b30      	cmp	r3, #48	@ 0x30
 8014ab2:	d10a      	bne.n	8014aca <__cvt+0xba>
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	4630      	mov	r0, r6
 8014aba:	4639      	mov	r1, r7
 8014abc:	f7ec f834 	bl	8000b28 <__aeabi_dcmpeq>
 8014ac0:	b918      	cbnz	r0, 8014aca <__cvt+0xba>
 8014ac2:	f1c4 0401 	rsb	r4, r4, #1
 8014ac6:	f8ca 4000 	str.w	r4, [sl]
 8014aca:	f8da 3000 	ldr.w	r3, [sl]
 8014ace:	4499      	add	r9, r3
 8014ad0:	e7d3      	b.n	8014a7a <__cvt+0x6a>
 8014ad2:	1c59      	adds	r1, r3, #1
 8014ad4:	9103      	str	r1, [sp, #12]
 8014ad6:	701a      	strb	r2, [r3, #0]
 8014ad8:	e7d9      	b.n	8014a8e <__cvt+0x7e>

08014ada <__exponent>:
 8014ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014adc:	2900      	cmp	r1, #0
 8014ade:	bfba      	itte	lt
 8014ae0:	4249      	neglt	r1, r1
 8014ae2:	232d      	movlt	r3, #45	@ 0x2d
 8014ae4:	232b      	movge	r3, #43	@ 0x2b
 8014ae6:	2909      	cmp	r1, #9
 8014ae8:	7002      	strb	r2, [r0, #0]
 8014aea:	7043      	strb	r3, [r0, #1]
 8014aec:	dd29      	ble.n	8014b42 <__exponent+0x68>
 8014aee:	f10d 0307 	add.w	r3, sp, #7
 8014af2:	461d      	mov	r5, r3
 8014af4:	270a      	movs	r7, #10
 8014af6:	461a      	mov	r2, r3
 8014af8:	fbb1 f6f7 	udiv	r6, r1, r7
 8014afc:	fb07 1416 	mls	r4, r7, r6, r1
 8014b00:	3430      	adds	r4, #48	@ 0x30
 8014b02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014b06:	460c      	mov	r4, r1
 8014b08:	2c63      	cmp	r4, #99	@ 0x63
 8014b0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014b0e:	4631      	mov	r1, r6
 8014b10:	dcf1      	bgt.n	8014af6 <__exponent+0x1c>
 8014b12:	3130      	adds	r1, #48	@ 0x30
 8014b14:	1e94      	subs	r4, r2, #2
 8014b16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014b1a:	1c41      	adds	r1, r0, #1
 8014b1c:	4623      	mov	r3, r4
 8014b1e:	42ab      	cmp	r3, r5
 8014b20:	d30a      	bcc.n	8014b38 <__exponent+0x5e>
 8014b22:	f10d 0309 	add.w	r3, sp, #9
 8014b26:	1a9b      	subs	r3, r3, r2
 8014b28:	42ac      	cmp	r4, r5
 8014b2a:	bf88      	it	hi
 8014b2c:	2300      	movhi	r3, #0
 8014b2e:	3302      	adds	r3, #2
 8014b30:	4403      	add	r3, r0
 8014b32:	1a18      	subs	r0, r3, r0
 8014b34:	b003      	add	sp, #12
 8014b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014b3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014b40:	e7ed      	b.n	8014b1e <__exponent+0x44>
 8014b42:	2330      	movs	r3, #48	@ 0x30
 8014b44:	3130      	adds	r1, #48	@ 0x30
 8014b46:	7083      	strb	r3, [r0, #2]
 8014b48:	70c1      	strb	r1, [r0, #3]
 8014b4a:	1d03      	adds	r3, r0, #4
 8014b4c:	e7f1      	b.n	8014b32 <__exponent+0x58>
	...

08014b50 <_printf_float>:
 8014b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b54:	b08d      	sub	sp, #52	@ 0x34
 8014b56:	460c      	mov	r4, r1
 8014b58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014b5c:	4616      	mov	r6, r2
 8014b5e:	461f      	mov	r7, r3
 8014b60:	4605      	mov	r5, r0
 8014b62:	f000 fd0b 	bl	801557c <_localeconv_r>
 8014b66:	6803      	ldr	r3, [r0, #0]
 8014b68:	9304      	str	r3, [sp, #16]
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7eb fbb0 	bl	80002d0 <strlen>
 8014b70:	2300      	movs	r3, #0
 8014b72:	930a      	str	r3, [sp, #40]	@ 0x28
 8014b74:	f8d8 3000 	ldr.w	r3, [r8]
 8014b78:	9005      	str	r0, [sp, #20]
 8014b7a:	3307      	adds	r3, #7
 8014b7c:	f023 0307 	bic.w	r3, r3, #7
 8014b80:	f103 0208 	add.w	r2, r3, #8
 8014b84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014b88:	f8d4 b000 	ldr.w	fp, [r4]
 8014b8c:	f8c8 2000 	str.w	r2, [r8]
 8014b90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014b94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014b98:	9307      	str	r3, [sp, #28]
 8014b9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8014b9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014ba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ba6:	4b9c      	ldr	r3, [pc, #624]	@ (8014e18 <_printf_float+0x2c8>)
 8014ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8014bac:	f7eb ffee 	bl	8000b8c <__aeabi_dcmpun>
 8014bb0:	bb70      	cbnz	r0, 8014c10 <_printf_float+0xc0>
 8014bb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014bb6:	4b98      	ldr	r3, [pc, #608]	@ (8014e18 <_printf_float+0x2c8>)
 8014bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8014bbc:	f7eb ffc8 	bl	8000b50 <__aeabi_dcmple>
 8014bc0:	bb30      	cbnz	r0, 8014c10 <_printf_float+0xc0>
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	4640      	mov	r0, r8
 8014bc8:	4649      	mov	r1, r9
 8014bca:	f7eb ffb7 	bl	8000b3c <__aeabi_dcmplt>
 8014bce:	b110      	cbz	r0, 8014bd6 <_printf_float+0x86>
 8014bd0:	232d      	movs	r3, #45	@ 0x2d
 8014bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014bd6:	4a91      	ldr	r2, [pc, #580]	@ (8014e1c <_printf_float+0x2cc>)
 8014bd8:	4b91      	ldr	r3, [pc, #580]	@ (8014e20 <_printf_float+0x2d0>)
 8014bda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014bde:	bf94      	ite	ls
 8014be0:	4690      	movls	r8, r2
 8014be2:	4698      	movhi	r8, r3
 8014be4:	2303      	movs	r3, #3
 8014be6:	6123      	str	r3, [r4, #16]
 8014be8:	f02b 0304 	bic.w	r3, fp, #4
 8014bec:	6023      	str	r3, [r4, #0]
 8014bee:	f04f 0900 	mov.w	r9, #0
 8014bf2:	9700      	str	r7, [sp, #0]
 8014bf4:	4633      	mov	r3, r6
 8014bf6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014bf8:	4621      	mov	r1, r4
 8014bfa:	4628      	mov	r0, r5
 8014bfc:	f000 f9d2 	bl	8014fa4 <_printf_common>
 8014c00:	3001      	adds	r0, #1
 8014c02:	f040 808d 	bne.w	8014d20 <_printf_float+0x1d0>
 8014c06:	f04f 30ff 	mov.w	r0, #4294967295
 8014c0a:	b00d      	add	sp, #52	@ 0x34
 8014c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c10:	4642      	mov	r2, r8
 8014c12:	464b      	mov	r3, r9
 8014c14:	4640      	mov	r0, r8
 8014c16:	4649      	mov	r1, r9
 8014c18:	f7eb ffb8 	bl	8000b8c <__aeabi_dcmpun>
 8014c1c:	b140      	cbz	r0, 8014c30 <_printf_float+0xe0>
 8014c1e:	464b      	mov	r3, r9
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	bfbc      	itt	lt
 8014c24:	232d      	movlt	r3, #45	@ 0x2d
 8014c26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8014e24 <_printf_float+0x2d4>)
 8014c2c:	4b7e      	ldr	r3, [pc, #504]	@ (8014e28 <_printf_float+0x2d8>)
 8014c2e:	e7d4      	b.n	8014bda <_printf_float+0x8a>
 8014c30:	6863      	ldr	r3, [r4, #4]
 8014c32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014c36:	9206      	str	r2, [sp, #24]
 8014c38:	1c5a      	adds	r2, r3, #1
 8014c3a:	d13b      	bne.n	8014cb4 <_printf_float+0x164>
 8014c3c:	2306      	movs	r3, #6
 8014c3e:	6063      	str	r3, [r4, #4]
 8014c40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014c44:	2300      	movs	r3, #0
 8014c46:	6022      	str	r2, [r4, #0]
 8014c48:	9303      	str	r3, [sp, #12]
 8014c4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8014c4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014c50:	ab09      	add	r3, sp, #36	@ 0x24
 8014c52:	9300      	str	r3, [sp, #0]
 8014c54:	6861      	ldr	r1, [r4, #4]
 8014c56:	ec49 8b10 	vmov	d0, r8, r9
 8014c5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014c5e:	4628      	mov	r0, r5
 8014c60:	f7ff fed6 	bl	8014a10 <__cvt>
 8014c64:	9b06      	ldr	r3, [sp, #24]
 8014c66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014c68:	2b47      	cmp	r3, #71	@ 0x47
 8014c6a:	4680      	mov	r8, r0
 8014c6c:	d129      	bne.n	8014cc2 <_printf_float+0x172>
 8014c6e:	1cc8      	adds	r0, r1, #3
 8014c70:	db02      	blt.n	8014c78 <_printf_float+0x128>
 8014c72:	6863      	ldr	r3, [r4, #4]
 8014c74:	4299      	cmp	r1, r3
 8014c76:	dd41      	ble.n	8014cfc <_printf_float+0x1ac>
 8014c78:	f1aa 0a02 	sub.w	sl, sl, #2
 8014c7c:	fa5f fa8a 	uxtb.w	sl, sl
 8014c80:	3901      	subs	r1, #1
 8014c82:	4652      	mov	r2, sl
 8014c84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014c88:	9109      	str	r1, [sp, #36]	@ 0x24
 8014c8a:	f7ff ff26 	bl	8014ada <__exponent>
 8014c8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c90:	1813      	adds	r3, r2, r0
 8014c92:	2a01      	cmp	r2, #1
 8014c94:	4681      	mov	r9, r0
 8014c96:	6123      	str	r3, [r4, #16]
 8014c98:	dc02      	bgt.n	8014ca0 <_printf_float+0x150>
 8014c9a:	6822      	ldr	r2, [r4, #0]
 8014c9c:	07d2      	lsls	r2, r2, #31
 8014c9e:	d501      	bpl.n	8014ca4 <_printf_float+0x154>
 8014ca0:	3301      	adds	r3, #1
 8014ca2:	6123      	str	r3, [r4, #16]
 8014ca4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d0a2      	beq.n	8014bf2 <_printf_float+0xa2>
 8014cac:	232d      	movs	r3, #45	@ 0x2d
 8014cae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014cb2:	e79e      	b.n	8014bf2 <_printf_float+0xa2>
 8014cb4:	9a06      	ldr	r2, [sp, #24]
 8014cb6:	2a47      	cmp	r2, #71	@ 0x47
 8014cb8:	d1c2      	bne.n	8014c40 <_printf_float+0xf0>
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d1c0      	bne.n	8014c40 <_printf_float+0xf0>
 8014cbe:	2301      	movs	r3, #1
 8014cc0:	e7bd      	b.n	8014c3e <_printf_float+0xee>
 8014cc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014cc6:	d9db      	bls.n	8014c80 <_printf_float+0x130>
 8014cc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014ccc:	d118      	bne.n	8014d00 <_printf_float+0x1b0>
 8014cce:	2900      	cmp	r1, #0
 8014cd0:	6863      	ldr	r3, [r4, #4]
 8014cd2:	dd0b      	ble.n	8014cec <_printf_float+0x19c>
 8014cd4:	6121      	str	r1, [r4, #16]
 8014cd6:	b913      	cbnz	r3, 8014cde <_printf_float+0x18e>
 8014cd8:	6822      	ldr	r2, [r4, #0]
 8014cda:	07d0      	lsls	r0, r2, #31
 8014cdc:	d502      	bpl.n	8014ce4 <_printf_float+0x194>
 8014cde:	3301      	adds	r3, #1
 8014ce0:	440b      	add	r3, r1
 8014ce2:	6123      	str	r3, [r4, #16]
 8014ce4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014ce6:	f04f 0900 	mov.w	r9, #0
 8014cea:	e7db      	b.n	8014ca4 <_printf_float+0x154>
 8014cec:	b913      	cbnz	r3, 8014cf4 <_printf_float+0x1a4>
 8014cee:	6822      	ldr	r2, [r4, #0]
 8014cf0:	07d2      	lsls	r2, r2, #31
 8014cf2:	d501      	bpl.n	8014cf8 <_printf_float+0x1a8>
 8014cf4:	3302      	adds	r3, #2
 8014cf6:	e7f4      	b.n	8014ce2 <_printf_float+0x192>
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	e7f2      	b.n	8014ce2 <_printf_float+0x192>
 8014cfc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014d00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d02:	4299      	cmp	r1, r3
 8014d04:	db05      	blt.n	8014d12 <_printf_float+0x1c2>
 8014d06:	6823      	ldr	r3, [r4, #0]
 8014d08:	6121      	str	r1, [r4, #16]
 8014d0a:	07d8      	lsls	r0, r3, #31
 8014d0c:	d5ea      	bpl.n	8014ce4 <_printf_float+0x194>
 8014d0e:	1c4b      	adds	r3, r1, #1
 8014d10:	e7e7      	b.n	8014ce2 <_printf_float+0x192>
 8014d12:	2900      	cmp	r1, #0
 8014d14:	bfd4      	ite	le
 8014d16:	f1c1 0202 	rsble	r2, r1, #2
 8014d1a:	2201      	movgt	r2, #1
 8014d1c:	4413      	add	r3, r2
 8014d1e:	e7e0      	b.n	8014ce2 <_printf_float+0x192>
 8014d20:	6823      	ldr	r3, [r4, #0]
 8014d22:	055a      	lsls	r2, r3, #21
 8014d24:	d407      	bmi.n	8014d36 <_printf_float+0x1e6>
 8014d26:	6923      	ldr	r3, [r4, #16]
 8014d28:	4642      	mov	r2, r8
 8014d2a:	4631      	mov	r1, r6
 8014d2c:	4628      	mov	r0, r5
 8014d2e:	47b8      	blx	r7
 8014d30:	3001      	adds	r0, #1
 8014d32:	d12b      	bne.n	8014d8c <_printf_float+0x23c>
 8014d34:	e767      	b.n	8014c06 <_printf_float+0xb6>
 8014d36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014d3a:	f240 80dd 	bls.w	8014ef8 <_printf_float+0x3a8>
 8014d3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014d42:	2200      	movs	r2, #0
 8014d44:	2300      	movs	r3, #0
 8014d46:	f7eb feef 	bl	8000b28 <__aeabi_dcmpeq>
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	d033      	beq.n	8014db6 <_printf_float+0x266>
 8014d4e:	4a37      	ldr	r2, [pc, #220]	@ (8014e2c <_printf_float+0x2dc>)
 8014d50:	2301      	movs	r3, #1
 8014d52:	4631      	mov	r1, r6
 8014d54:	4628      	mov	r0, r5
 8014d56:	47b8      	blx	r7
 8014d58:	3001      	adds	r0, #1
 8014d5a:	f43f af54 	beq.w	8014c06 <_printf_float+0xb6>
 8014d5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014d62:	4543      	cmp	r3, r8
 8014d64:	db02      	blt.n	8014d6c <_printf_float+0x21c>
 8014d66:	6823      	ldr	r3, [r4, #0]
 8014d68:	07d8      	lsls	r0, r3, #31
 8014d6a:	d50f      	bpl.n	8014d8c <_printf_float+0x23c>
 8014d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d70:	4631      	mov	r1, r6
 8014d72:	4628      	mov	r0, r5
 8014d74:	47b8      	blx	r7
 8014d76:	3001      	adds	r0, #1
 8014d78:	f43f af45 	beq.w	8014c06 <_printf_float+0xb6>
 8014d7c:	f04f 0900 	mov.w	r9, #0
 8014d80:	f108 38ff 	add.w	r8, r8, #4294967295
 8014d84:	f104 0a1a 	add.w	sl, r4, #26
 8014d88:	45c8      	cmp	r8, r9
 8014d8a:	dc09      	bgt.n	8014da0 <_printf_float+0x250>
 8014d8c:	6823      	ldr	r3, [r4, #0]
 8014d8e:	079b      	lsls	r3, r3, #30
 8014d90:	f100 8103 	bmi.w	8014f9a <_printf_float+0x44a>
 8014d94:	68e0      	ldr	r0, [r4, #12]
 8014d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014d98:	4298      	cmp	r0, r3
 8014d9a:	bfb8      	it	lt
 8014d9c:	4618      	movlt	r0, r3
 8014d9e:	e734      	b.n	8014c0a <_printf_float+0xba>
 8014da0:	2301      	movs	r3, #1
 8014da2:	4652      	mov	r2, sl
 8014da4:	4631      	mov	r1, r6
 8014da6:	4628      	mov	r0, r5
 8014da8:	47b8      	blx	r7
 8014daa:	3001      	adds	r0, #1
 8014dac:	f43f af2b 	beq.w	8014c06 <_printf_float+0xb6>
 8014db0:	f109 0901 	add.w	r9, r9, #1
 8014db4:	e7e8      	b.n	8014d88 <_printf_float+0x238>
 8014db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	dc39      	bgt.n	8014e30 <_printf_float+0x2e0>
 8014dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8014e2c <_printf_float+0x2dc>)
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	4631      	mov	r1, r6
 8014dc2:	4628      	mov	r0, r5
 8014dc4:	47b8      	blx	r7
 8014dc6:	3001      	adds	r0, #1
 8014dc8:	f43f af1d 	beq.w	8014c06 <_printf_float+0xb6>
 8014dcc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014dd0:	ea59 0303 	orrs.w	r3, r9, r3
 8014dd4:	d102      	bne.n	8014ddc <_printf_float+0x28c>
 8014dd6:	6823      	ldr	r3, [r4, #0]
 8014dd8:	07d9      	lsls	r1, r3, #31
 8014dda:	d5d7      	bpl.n	8014d8c <_printf_float+0x23c>
 8014ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014de0:	4631      	mov	r1, r6
 8014de2:	4628      	mov	r0, r5
 8014de4:	47b8      	blx	r7
 8014de6:	3001      	adds	r0, #1
 8014de8:	f43f af0d 	beq.w	8014c06 <_printf_float+0xb6>
 8014dec:	f04f 0a00 	mov.w	sl, #0
 8014df0:	f104 0b1a 	add.w	fp, r4, #26
 8014df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014df6:	425b      	negs	r3, r3
 8014df8:	4553      	cmp	r3, sl
 8014dfa:	dc01      	bgt.n	8014e00 <_printf_float+0x2b0>
 8014dfc:	464b      	mov	r3, r9
 8014dfe:	e793      	b.n	8014d28 <_printf_float+0x1d8>
 8014e00:	2301      	movs	r3, #1
 8014e02:	465a      	mov	r2, fp
 8014e04:	4631      	mov	r1, r6
 8014e06:	4628      	mov	r0, r5
 8014e08:	47b8      	blx	r7
 8014e0a:	3001      	adds	r0, #1
 8014e0c:	f43f aefb 	beq.w	8014c06 <_printf_float+0xb6>
 8014e10:	f10a 0a01 	add.w	sl, sl, #1
 8014e14:	e7ee      	b.n	8014df4 <_printf_float+0x2a4>
 8014e16:	bf00      	nop
 8014e18:	7fefffff 	.word	0x7fefffff
 8014e1c:	08018cf0 	.word	0x08018cf0
 8014e20:	08018cf4 	.word	0x08018cf4
 8014e24:	08018cf8 	.word	0x08018cf8
 8014e28:	08018cfc 	.word	0x08018cfc
 8014e2c:	08018d00 	.word	0x08018d00
 8014e30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014e32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014e36:	4553      	cmp	r3, sl
 8014e38:	bfa8      	it	ge
 8014e3a:	4653      	movge	r3, sl
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	4699      	mov	r9, r3
 8014e40:	dc36      	bgt.n	8014eb0 <_printf_float+0x360>
 8014e42:	f04f 0b00 	mov.w	fp, #0
 8014e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e4a:	f104 021a 	add.w	r2, r4, #26
 8014e4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014e50:	9306      	str	r3, [sp, #24]
 8014e52:	eba3 0309 	sub.w	r3, r3, r9
 8014e56:	455b      	cmp	r3, fp
 8014e58:	dc31      	bgt.n	8014ebe <_printf_float+0x36e>
 8014e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e5c:	459a      	cmp	sl, r3
 8014e5e:	dc3a      	bgt.n	8014ed6 <_printf_float+0x386>
 8014e60:	6823      	ldr	r3, [r4, #0]
 8014e62:	07da      	lsls	r2, r3, #31
 8014e64:	d437      	bmi.n	8014ed6 <_printf_float+0x386>
 8014e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e68:	ebaa 0903 	sub.w	r9, sl, r3
 8014e6c:	9b06      	ldr	r3, [sp, #24]
 8014e6e:	ebaa 0303 	sub.w	r3, sl, r3
 8014e72:	4599      	cmp	r9, r3
 8014e74:	bfa8      	it	ge
 8014e76:	4699      	movge	r9, r3
 8014e78:	f1b9 0f00 	cmp.w	r9, #0
 8014e7c:	dc33      	bgt.n	8014ee6 <_printf_float+0x396>
 8014e7e:	f04f 0800 	mov.w	r8, #0
 8014e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e86:	f104 0b1a 	add.w	fp, r4, #26
 8014e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e8c:	ebaa 0303 	sub.w	r3, sl, r3
 8014e90:	eba3 0309 	sub.w	r3, r3, r9
 8014e94:	4543      	cmp	r3, r8
 8014e96:	f77f af79 	ble.w	8014d8c <_printf_float+0x23c>
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	465a      	mov	r2, fp
 8014e9e:	4631      	mov	r1, r6
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	47b8      	blx	r7
 8014ea4:	3001      	adds	r0, #1
 8014ea6:	f43f aeae 	beq.w	8014c06 <_printf_float+0xb6>
 8014eaa:	f108 0801 	add.w	r8, r8, #1
 8014eae:	e7ec      	b.n	8014e8a <_printf_float+0x33a>
 8014eb0:	4642      	mov	r2, r8
 8014eb2:	4631      	mov	r1, r6
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	47b8      	blx	r7
 8014eb8:	3001      	adds	r0, #1
 8014eba:	d1c2      	bne.n	8014e42 <_printf_float+0x2f2>
 8014ebc:	e6a3      	b.n	8014c06 <_printf_float+0xb6>
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	4631      	mov	r1, r6
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	9206      	str	r2, [sp, #24]
 8014ec6:	47b8      	blx	r7
 8014ec8:	3001      	adds	r0, #1
 8014eca:	f43f ae9c 	beq.w	8014c06 <_printf_float+0xb6>
 8014ece:	9a06      	ldr	r2, [sp, #24]
 8014ed0:	f10b 0b01 	add.w	fp, fp, #1
 8014ed4:	e7bb      	b.n	8014e4e <_printf_float+0x2fe>
 8014ed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014eda:	4631      	mov	r1, r6
 8014edc:	4628      	mov	r0, r5
 8014ede:	47b8      	blx	r7
 8014ee0:	3001      	adds	r0, #1
 8014ee2:	d1c0      	bne.n	8014e66 <_printf_float+0x316>
 8014ee4:	e68f      	b.n	8014c06 <_printf_float+0xb6>
 8014ee6:	9a06      	ldr	r2, [sp, #24]
 8014ee8:	464b      	mov	r3, r9
 8014eea:	4442      	add	r2, r8
 8014eec:	4631      	mov	r1, r6
 8014eee:	4628      	mov	r0, r5
 8014ef0:	47b8      	blx	r7
 8014ef2:	3001      	adds	r0, #1
 8014ef4:	d1c3      	bne.n	8014e7e <_printf_float+0x32e>
 8014ef6:	e686      	b.n	8014c06 <_printf_float+0xb6>
 8014ef8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014efc:	f1ba 0f01 	cmp.w	sl, #1
 8014f00:	dc01      	bgt.n	8014f06 <_printf_float+0x3b6>
 8014f02:	07db      	lsls	r3, r3, #31
 8014f04:	d536      	bpl.n	8014f74 <_printf_float+0x424>
 8014f06:	2301      	movs	r3, #1
 8014f08:	4642      	mov	r2, r8
 8014f0a:	4631      	mov	r1, r6
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	47b8      	blx	r7
 8014f10:	3001      	adds	r0, #1
 8014f12:	f43f ae78 	beq.w	8014c06 <_printf_float+0xb6>
 8014f16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f1a:	4631      	mov	r1, r6
 8014f1c:	4628      	mov	r0, r5
 8014f1e:	47b8      	blx	r7
 8014f20:	3001      	adds	r0, #1
 8014f22:	f43f ae70 	beq.w	8014c06 <_printf_float+0xb6>
 8014f26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f32:	f7eb fdf9 	bl	8000b28 <__aeabi_dcmpeq>
 8014f36:	b9c0      	cbnz	r0, 8014f6a <_printf_float+0x41a>
 8014f38:	4653      	mov	r3, sl
 8014f3a:	f108 0201 	add.w	r2, r8, #1
 8014f3e:	4631      	mov	r1, r6
 8014f40:	4628      	mov	r0, r5
 8014f42:	47b8      	blx	r7
 8014f44:	3001      	adds	r0, #1
 8014f46:	d10c      	bne.n	8014f62 <_printf_float+0x412>
 8014f48:	e65d      	b.n	8014c06 <_printf_float+0xb6>
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	465a      	mov	r2, fp
 8014f4e:	4631      	mov	r1, r6
 8014f50:	4628      	mov	r0, r5
 8014f52:	47b8      	blx	r7
 8014f54:	3001      	adds	r0, #1
 8014f56:	f43f ae56 	beq.w	8014c06 <_printf_float+0xb6>
 8014f5a:	f108 0801 	add.w	r8, r8, #1
 8014f5e:	45d0      	cmp	r8, sl
 8014f60:	dbf3      	blt.n	8014f4a <_printf_float+0x3fa>
 8014f62:	464b      	mov	r3, r9
 8014f64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014f68:	e6df      	b.n	8014d2a <_printf_float+0x1da>
 8014f6a:	f04f 0800 	mov.w	r8, #0
 8014f6e:	f104 0b1a 	add.w	fp, r4, #26
 8014f72:	e7f4      	b.n	8014f5e <_printf_float+0x40e>
 8014f74:	2301      	movs	r3, #1
 8014f76:	4642      	mov	r2, r8
 8014f78:	e7e1      	b.n	8014f3e <_printf_float+0x3ee>
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	464a      	mov	r2, r9
 8014f7e:	4631      	mov	r1, r6
 8014f80:	4628      	mov	r0, r5
 8014f82:	47b8      	blx	r7
 8014f84:	3001      	adds	r0, #1
 8014f86:	f43f ae3e 	beq.w	8014c06 <_printf_float+0xb6>
 8014f8a:	f108 0801 	add.w	r8, r8, #1
 8014f8e:	68e3      	ldr	r3, [r4, #12]
 8014f90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014f92:	1a5b      	subs	r3, r3, r1
 8014f94:	4543      	cmp	r3, r8
 8014f96:	dcf0      	bgt.n	8014f7a <_printf_float+0x42a>
 8014f98:	e6fc      	b.n	8014d94 <_printf_float+0x244>
 8014f9a:	f04f 0800 	mov.w	r8, #0
 8014f9e:	f104 0919 	add.w	r9, r4, #25
 8014fa2:	e7f4      	b.n	8014f8e <_printf_float+0x43e>

08014fa4 <_printf_common>:
 8014fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fa8:	4616      	mov	r6, r2
 8014faa:	4698      	mov	r8, r3
 8014fac:	688a      	ldr	r2, [r1, #8]
 8014fae:	690b      	ldr	r3, [r1, #16]
 8014fb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014fb4:	4293      	cmp	r3, r2
 8014fb6:	bfb8      	it	lt
 8014fb8:	4613      	movlt	r3, r2
 8014fba:	6033      	str	r3, [r6, #0]
 8014fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014fc0:	4607      	mov	r7, r0
 8014fc2:	460c      	mov	r4, r1
 8014fc4:	b10a      	cbz	r2, 8014fca <_printf_common+0x26>
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	6033      	str	r3, [r6, #0]
 8014fca:	6823      	ldr	r3, [r4, #0]
 8014fcc:	0699      	lsls	r1, r3, #26
 8014fce:	bf42      	ittt	mi
 8014fd0:	6833      	ldrmi	r3, [r6, #0]
 8014fd2:	3302      	addmi	r3, #2
 8014fd4:	6033      	strmi	r3, [r6, #0]
 8014fd6:	6825      	ldr	r5, [r4, #0]
 8014fd8:	f015 0506 	ands.w	r5, r5, #6
 8014fdc:	d106      	bne.n	8014fec <_printf_common+0x48>
 8014fde:	f104 0a19 	add.w	sl, r4, #25
 8014fe2:	68e3      	ldr	r3, [r4, #12]
 8014fe4:	6832      	ldr	r2, [r6, #0]
 8014fe6:	1a9b      	subs	r3, r3, r2
 8014fe8:	42ab      	cmp	r3, r5
 8014fea:	dc26      	bgt.n	801503a <_printf_common+0x96>
 8014fec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014ff0:	6822      	ldr	r2, [r4, #0]
 8014ff2:	3b00      	subs	r3, #0
 8014ff4:	bf18      	it	ne
 8014ff6:	2301      	movne	r3, #1
 8014ff8:	0692      	lsls	r2, r2, #26
 8014ffa:	d42b      	bmi.n	8015054 <_printf_common+0xb0>
 8014ffc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015000:	4641      	mov	r1, r8
 8015002:	4638      	mov	r0, r7
 8015004:	47c8      	blx	r9
 8015006:	3001      	adds	r0, #1
 8015008:	d01e      	beq.n	8015048 <_printf_common+0xa4>
 801500a:	6823      	ldr	r3, [r4, #0]
 801500c:	6922      	ldr	r2, [r4, #16]
 801500e:	f003 0306 	and.w	r3, r3, #6
 8015012:	2b04      	cmp	r3, #4
 8015014:	bf02      	ittt	eq
 8015016:	68e5      	ldreq	r5, [r4, #12]
 8015018:	6833      	ldreq	r3, [r6, #0]
 801501a:	1aed      	subeq	r5, r5, r3
 801501c:	68a3      	ldr	r3, [r4, #8]
 801501e:	bf0c      	ite	eq
 8015020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015024:	2500      	movne	r5, #0
 8015026:	4293      	cmp	r3, r2
 8015028:	bfc4      	itt	gt
 801502a:	1a9b      	subgt	r3, r3, r2
 801502c:	18ed      	addgt	r5, r5, r3
 801502e:	2600      	movs	r6, #0
 8015030:	341a      	adds	r4, #26
 8015032:	42b5      	cmp	r5, r6
 8015034:	d11a      	bne.n	801506c <_printf_common+0xc8>
 8015036:	2000      	movs	r0, #0
 8015038:	e008      	b.n	801504c <_printf_common+0xa8>
 801503a:	2301      	movs	r3, #1
 801503c:	4652      	mov	r2, sl
 801503e:	4641      	mov	r1, r8
 8015040:	4638      	mov	r0, r7
 8015042:	47c8      	blx	r9
 8015044:	3001      	adds	r0, #1
 8015046:	d103      	bne.n	8015050 <_printf_common+0xac>
 8015048:	f04f 30ff 	mov.w	r0, #4294967295
 801504c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015050:	3501      	adds	r5, #1
 8015052:	e7c6      	b.n	8014fe2 <_printf_common+0x3e>
 8015054:	18e1      	adds	r1, r4, r3
 8015056:	1c5a      	adds	r2, r3, #1
 8015058:	2030      	movs	r0, #48	@ 0x30
 801505a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801505e:	4422      	add	r2, r4
 8015060:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015064:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015068:	3302      	adds	r3, #2
 801506a:	e7c7      	b.n	8014ffc <_printf_common+0x58>
 801506c:	2301      	movs	r3, #1
 801506e:	4622      	mov	r2, r4
 8015070:	4641      	mov	r1, r8
 8015072:	4638      	mov	r0, r7
 8015074:	47c8      	blx	r9
 8015076:	3001      	adds	r0, #1
 8015078:	d0e6      	beq.n	8015048 <_printf_common+0xa4>
 801507a:	3601      	adds	r6, #1
 801507c:	e7d9      	b.n	8015032 <_printf_common+0x8e>
	...

08015080 <_printf_i>:
 8015080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015084:	7e0f      	ldrb	r7, [r1, #24]
 8015086:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015088:	2f78      	cmp	r7, #120	@ 0x78
 801508a:	4691      	mov	r9, r2
 801508c:	4680      	mov	r8, r0
 801508e:	460c      	mov	r4, r1
 8015090:	469a      	mov	sl, r3
 8015092:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015096:	d807      	bhi.n	80150a8 <_printf_i+0x28>
 8015098:	2f62      	cmp	r7, #98	@ 0x62
 801509a:	d80a      	bhi.n	80150b2 <_printf_i+0x32>
 801509c:	2f00      	cmp	r7, #0
 801509e:	f000 80d2 	beq.w	8015246 <_printf_i+0x1c6>
 80150a2:	2f58      	cmp	r7, #88	@ 0x58
 80150a4:	f000 80b9 	beq.w	801521a <_printf_i+0x19a>
 80150a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80150ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80150b0:	e03a      	b.n	8015128 <_printf_i+0xa8>
 80150b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80150b6:	2b15      	cmp	r3, #21
 80150b8:	d8f6      	bhi.n	80150a8 <_printf_i+0x28>
 80150ba:	a101      	add	r1, pc, #4	@ (adr r1, 80150c0 <_printf_i+0x40>)
 80150bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80150c0:	08015119 	.word	0x08015119
 80150c4:	0801512d 	.word	0x0801512d
 80150c8:	080150a9 	.word	0x080150a9
 80150cc:	080150a9 	.word	0x080150a9
 80150d0:	080150a9 	.word	0x080150a9
 80150d4:	080150a9 	.word	0x080150a9
 80150d8:	0801512d 	.word	0x0801512d
 80150dc:	080150a9 	.word	0x080150a9
 80150e0:	080150a9 	.word	0x080150a9
 80150e4:	080150a9 	.word	0x080150a9
 80150e8:	080150a9 	.word	0x080150a9
 80150ec:	0801522d 	.word	0x0801522d
 80150f0:	08015157 	.word	0x08015157
 80150f4:	080151e7 	.word	0x080151e7
 80150f8:	080150a9 	.word	0x080150a9
 80150fc:	080150a9 	.word	0x080150a9
 8015100:	0801524f 	.word	0x0801524f
 8015104:	080150a9 	.word	0x080150a9
 8015108:	08015157 	.word	0x08015157
 801510c:	080150a9 	.word	0x080150a9
 8015110:	080150a9 	.word	0x080150a9
 8015114:	080151ef 	.word	0x080151ef
 8015118:	6833      	ldr	r3, [r6, #0]
 801511a:	1d1a      	adds	r2, r3, #4
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	6032      	str	r2, [r6, #0]
 8015120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015124:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015128:	2301      	movs	r3, #1
 801512a:	e09d      	b.n	8015268 <_printf_i+0x1e8>
 801512c:	6833      	ldr	r3, [r6, #0]
 801512e:	6820      	ldr	r0, [r4, #0]
 8015130:	1d19      	adds	r1, r3, #4
 8015132:	6031      	str	r1, [r6, #0]
 8015134:	0606      	lsls	r6, r0, #24
 8015136:	d501      	bpl.n	801513c <_printf_i+0xbc>
 8015138:	681d      	ldr	r5, [r3, #0]
 801513a:	e003      	b.n	8015144 <_printf_i+0xc4>
 801513c:	0645      	lsls	r5, r0, #25
 801513e:	d5fb      	bpl.n	8015138 <_printf_i+0xb8>
 8015140:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015144:	2d00      	cmp	r5, #0
 8015146:	da03      	bge.n	8015150 <_printf_i+0xd0>
 8015148:	232d      	movs	r3, #45	@ 0x2d
 801514a:	426d      	negs	r5, r5
 801514c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015150:	4859      	ldr	r0, [pc, #356]	@ (80152b8 <_printf_i+0x238>)
 8015152:	230a      	movs	r3, #10
 8015154:	e011      	b.n	801517a <_printf_i+0xfa>
 8015156:	6821      	ldr	r1, [r4, #0]
 8015158:	6833      	ldr	r3, [r6, #0]
 801515a:	0608      	lsls	r0, r1, #24
 801515c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015160:	d402      	bmi.n	8015168 <_printf_i+0xe8>
 8015162:	0649      	lsls	r1, r1, #25
 8015164:	bf48      	it	mi
 8015166:	b2ad      	uxthmi	r5, r5
 8015168:	2f6f      	cmp	r7, #111	@ 0x6f
 801516a:	4853      	ldr	r0, [pc, #332]	@ (80152b8 <_printf_i+0x238>)
 801516c:	6033      	str	r3, [r6, #0]
 801516e:	bf14      	ite	ne
 8015170:	230a      	movne	r3, #10
 8015172:	2308      	moveq	r3, #8
 8015174:	2100      	movs	r1, #0
 8015176:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801517a:	6866      	ldr	r6, [r4, #4]
 801517c:	60a6      	str	r6, [r4, #8]
 801517e:	2e00      	cmp	r6, #0
 8015180:	bfa2      	ittt	ge
 8015182:	6821      	ldrge	r1, [r4, #0]
 8015184:	f021 0104 	bicge.w	r1, r1, #4
 8015188:	6021      	strge	r1, [r4, #0]
 801518a:	b90d      	cbnz	r5, 8015190 <_printf_i+0x110>
 801518c:	2e00      	cmp	r6, #0
 801518e:	d04b      	beq.n	8015228 <_printf_i+0x1a8>
 8015190:	4616      	mov	r6, r2
 8015192:	fbb5 f1f3 	udiv	r1, r5, r3
 8015196:	fb03 5711 	mls	r7, r3, r1, r5
 801519a:	5dc7      	ldrb	r7, [r0, r7]
 801519c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80151a0:	462f      	mov	r7, r5
 80151a2:	42bb      	cmp	r3, r7
 80151a4:	460d      	mov	r5, r1
 80151a6:	d9f4      	bls.n	8015192 <_printf_i+0x112>
 80151a8:	2b08      	cmp	r3, #8
 80151aa:	d10b      	bne.n	80151c4 <_printf_i+0x144>
 80151ac:	6823      	ldr	r3, [r4, #0]
 80151ae:	07df      	lsls	r7, r3, #31
 80151b0:	d508      	bpl.n	80151c4 <_printf_i+0x144>
 80151b2:	6923      	ldr	r3, [r4, #16]
 80151b4:	6861      	ldr	r1, [r4, #4]
 80151b6:	4299      	cmp	r1, r3
 80151b8:	bfde      	ittt	le
 80151ba:	2330      	movle	r3, #48	@ 0x30
 80151bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80151c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80151c4:	1b92      	subs	r2, r2, r6
 80151c6:	6122      	str	r2, [r4, #16]
 80151c8:	f8cd a000 	str.w	sl, [sp]
 80151cc:	464b      	mov	r3, r9
 80151ce:	aa03      	add	r2, sp, #12
 80151d0:	4621      	mov	r1, r4
 80151d2:	4640      	mov	r0, r8
 80151d4:	f7ff fee6 	bl	8014fa4 <_printf_common>
 80151d8:	3001      	adds	r0, #1
 80151da:	d14a      	bne.n	8015272 <_printf_i+0x1f2>
 80151dc:	f04f 30ff 	mov.w	r0, #4294967295
 80151e0:	b004      	add	sp, #16
 80151e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151e6:	6823      	ldr	r3, [r4, #0]
 80151e8:	f043 0320 	orr.w	r3, r3, #32
 80151ec:	6023      	str	r3, [r4, #0]
 80151ee:	4833      	ldr	r0, [pc, #204]	@ (80152bc <_printf_i+0x23c>)
 80151f0:	2778      	movs	r7, #120	@ 0x78
 80151f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80151f6:	6823      	ldr	r3, [r4, #0]
 80151f8:	6831      	ldr	r1, [r6, #0]
 80151fa:	061f      	lsls	r7, r3, #24
 80151fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8015200:	d402      	bmi.n	8015208 <_printf_i+0x188>
 8015202:	065f      	lsls	r7, r3, #25
 8015204:	bf48      	it	mi
 8015206:	b2ad      	uxthmi	r5, r5
 8015208:	6031      	str	r1, [r6, #0]
 801520a:	07d9      	lsls	r1, r3, #31
 801520c:	bf44      	itt	mi
 801520e:	f043 0320 	orrmi.w	r3, r3, #32
 8015212:	6023      	strmi	r3, [r4, #0]
 8015214:	b11d      	cbz	r5, 801521e <_printf_i+0x19e>
 8015216:	2310      	movs	r3, #16
 8015218:	e7ac      	b.n	8015174 <_printf_i+0xf4>
 801521a:	4827      	ldr	r0, [pc, #156]	@ (80152b8 <_printf_i+0x238>)
 801521c:	e7e9      	b.n	80151f2 <_printf_i+0x172>
 801521e:	6823      	ldr	r3, [r4, #0]
 8015220:	f023 0320 	bic.w	r3, r3, #32
 8015224:	6023      	str	r3, [r4, #0]
 8015226:	e7f6      	b.n	8015216 <_printf_i+0x196>
 8015228:	4616      	mov	r6, r2
 801522a:	e7bd      	b.n	80151a8 <_printf_i+0x128>
 801522c:	6833      	ldr	r3, [r6, #0]
 801522e:	6825      	ldr	r5, [r4, #0]
 8015230:	6961      	ldr	r1, [r4, #20]
 8015232:	1d18      	adds	r0, r3, #4
 8015234:	6030      	str	r0, [r6, #0]
 8015236:	062e      	lsls	r6, r5, #24
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	d501      	bpl.n	8015240 <_printf_i+0x1c0>
 801523c:	6019      	str	r1, [r3, #0]
 801523e:	e002      	b.n	8015246 <_printf_i+0x1c6>
 8015240:	0668      	lsls	r0, r5, #25
 8015242:	d5fb      	bpl.n	801523c <_printf_i+0x1bc>
 8015244:	8019      	strh	r1, [r3, #0]
 8015246:	2300      	movs	r3, #0
 8015248:	6123      	str	r3, [r4, #16]
 801524a:	4616      	mov	r6, r2
 801524c:	e7bc      	b.n	80151c8 <_printf_i+0x148>
 801524e:	6833      	ldr	r3, [r6, #0]
 8015250:	1d1a      	adds	r2, r3, #4
 8015252:	6032      	str	r2, [r6, #0]
 8015254:	681e      	ldr	r6, [r3, #0]
 8015256:	6862      	ldr	r2, [r4, #4]
 8015258:	2100      	movs	r1, #0
 801525a:	4630      	mov	r0, r6
 801525c:	f7ea ffe8 	bl	8000230 <memchr>
 8015260:	b108      	cbz	r0, 8015266 <_printf_i+0x1e6>
 8015262:	1b80      	subs	r0, r0, r6
 8015264:	6060      	str	r0, [r4, #4]
 8015266:	6863      	ldr	r3, [r4, #4]
 8015268:	6123      	str	r3, [r4, #16]
 801526a:	2300      	movs	r3, #0
 801526c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015270:	e7aa      	b.n	80151c8 <_printf_i+0x148>
 8015272:	6923      	ldr	r3, [r4, #16]
 8015274:	4632      	mov	r2, r6
 8015276:	4649      	mov	r1, r9
 8015278:	4640      	mov	r0, r8
 801527a:	47d0      	blx	sl
 801527c:	3001      	adds	r0, #1
 801527e:	d0ad      	beq.n	80151dc <_printf_i+0x15c>
 8015280:	6823      	ldr	r3, [r4, #0]
 8015282:	079b      	lsls	r3, r3, #30
 8015284:	d413      	bmi.n	80152ae <_printf_i+0x22e>
 8015286:	68e0      	ldr	r0, [r4, #12]
 8015288:	9b03      	ldr	r3, [sp, #12]
 801528a:	4298      	cmp	r0, r3
 801528c:	bfb8      	it	lt
 801528e:	4618      	movlt	r0, r3
 8015290:	e7a6      	b.n	80151e0 <_printf_i+0x160>
 8015292:	2301      	movs	r3, #1
 8015294:	4632      	mov	r2, r6
 8015296:	4649      	mov	r1, r9
 8015298:	4640      	mov	r0, r8
 801529a:	47d0      	blx	sl
 801529c:	3001      	adds	r0, #1
 801529e:	d09d      	beq.n	80151dc <_printf_i+0x15c>
 80152a0:	3501      	adds	r5, #1
 80152a2:	68e3      	ldr	r3, [r4, #12]
 80152a4:	9903      	ldr	r1, [sp, #12]
 80152a6:	1a5b      	subs	r3, r3, r1
 80152a8:	42ab      	cmp	r3, r5
 80152aa:	dcf2      	bgt.n	8015292 <_printf_i+0x212>
 80152ac:	e7eb      	b.n	8015286 <_printf_i+0x206>
 80152ae:	2500      	movs	r5, #0
 80152b0:	f104 0619 	add.w	r6, r4, #25
 80152b4:	e7f5      	b.n	80152a2 <_printf_i+0x222>
 80152b6:	bf00      	nop
 80152b8:	08018d02 	.word	0x08018d02
 80152bc:	08018d13 	.word	0x08018d13

080152c0 <std>:
 80152c0:	2300      	movs	r3, #0
 80152c2:	b510      	push	{r4, lr}
 80152c4:	4604      	mov	r4, r0
 80152c6:	e9c0 3300 	strd	r3, r3, [r0]
 80152ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80152ce:	6083      	str	r3, [r0, #8]
 80152d0:	8181      	strh	r1, [r0, #12]
 80152d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80152d4:	81c2      	strh	r2, [r0, #14]
 80152d6:	6183      	str	r3, [r0, #24]
 80152d8:	4619      	mov	r1, r3
 80152da:	2208      	movs	r2, #8
 80152dc:	305c      	adds	r0, #92	@ 0x5c
 80152de:	f000 f914 	bl	801550a <memset>
 80152e2:	4b0d      	ldr	r3, [pc, #52]	@ (8015318 <std+0x58>)
 80152e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80152e6:	4b0d      	ldr	r3, [pc, #52]	@ (801531c <std+0x5c>)
 80152e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80152ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015320 <std+0x60>)
 80152ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80152ee:	4b0d      	ldr	r3, [pc, #52]	@ (8015324 <std+0x64>)
 80152f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80152f2:	4b0d      	ldr	r3, [pc, #52]	@ (8015328 <std+0x68>)
 80152f4:	6224      	str	r4, [r4, #32]
 80152f6:	429c      	cmp	r4, r3
 80152f8:	d006      	beq.n	8015308 <std+0x48>
 80152fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80152fe:	4294      	cmp	r4, r2
 8015300:	d002      	beq.n	8015308 <std+0x48>
 8015302:	33d0      	adds	r3, #208	@ 0xd0
 8015304:	429c      	cmp	r4, r3
 8015306:	d105      	bne.n	8015314 <std+0x54>
 8015308:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801530c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015310:	f000 b9cc 	b.w	80156ac <__retarget_lock_init_recursive>
 8015314:	bd10      	pop	{r4, pc}
 8015316:	bf00      	nop
 8015318:	08015485 	.word	0x08015485
 801531c:	080154a7 	.word	0x080154a7
 8015320:	080154df 	.word	0x080154df
 8015324:	08015503 	.word	0x08015503
 8015328:	200005dc 	.word	0x200005dc

0801532c <stdio_exit_handler>:
 801532c:	4a02      	ldr	r2, [pc, #8]	@ (8015338 <stdio_exit_handler+0xc>)
 801532e:	4903      	ldr	r1, [pc, #12]	@ (801533c <stdio_exit_handler+0x10>)
 8015330:	4803      	ldr	r0, [pc, #12]	@ (8015340 <stdio_exit_handler+0x14>)
 8015332:	f000 b869 	b.w	8015408 <_fwalk_sglue>
 8015336:	bf00      	nop
 8015338:	20000038 	.word	0x20000038
 801533c:	08016eb9 	.word	0x08016eb9
 8015340:	20000048 	.word	0x20000048

08015344 <cleanup_stdio>:
 8015344:	6841      	ldr	r1, [r0, #4]
 8015346:	4b0c      	ldr	r3, [pc, #48]	@ (8015378 <cleanup_stdio+0x34>)
 8015348:	4299      	cmp	r1, r3
 801534a:	b510      	push	{r4, lr}
 801534c:	4604      	mov	r4, r0
 801534e:	d001      	beq.n	8015354 <cleanup_stdio+0x10>
 8015350:	f001 fdb2 	bl	8016eb8 <_fflush_r>
 8015354:	68a1      	ldr	r1, [r4, #8]
 8015356:	4b09      	ldr	r3, [pc, #36]	@ (801537c <cleanup_stdio+0x38>)
 8015358:	4299      	cmp	r1, r3
 801535a:	d002      	beq.n	8015362 <cleanup_stdio+0x1e>
 801535c:	4620      	mov	r0, r4
 801535e:	f001 fdab 	bl	8016eb8 <_fflush_r>
 8015362:	68e1      	ldr	r1, [r4, #12]
 8015364:	4b06      	ldr	r3, [pc, #24]	@ (8015380 <cleanup_stdio+0x3c>)
 8015366:	4299      	cmp	r1, r3
 8015368:	d004      	beq.n	8015374 <cleanup_stdio+0x30>
 801536a:	4620      	mov	r0, r4
 801536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015370:	f001 bda2 	b.w	8016eb8 <_fflush_r>
 8015374:	bd10      	pop	{r4, pc}
 8015376:	bf00      	nop
 8015378:	200005dc 	.word	0x200005dc
 801537c:	20000644 	.word	0x20000644
 8015380:	200006ac 	.word	0x200006ac

08015384 <global_stdio_init.part.0>:
 8015384:	b510      	push	{r4, lr}
 8015386:	4b0b      	ldr	r3, [pc, #44]	@ (80153b4 <global_stdio_init.part.0+0x30>)
 8015388:	4c0b      	ldr	r4, [pc, #44]	@ (80153b8 <global_stdio_init.part.0+0x34>)
 801538a:	4a0c      	ldr	r2, [pc, #48]	@ (80153bc <global_stdio_init.part.0+0x38>)
 801538c:	601a      	str	r2, [r3, #0]
 801538e:	4620      	mov	r0, r4
 8015390:	2200      	movs	r2, #0
 8015392:	2104      	movs	r1, #4
 8015394:	f7ff ff94 	bl	80152c0 <std>
 8015398:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801539c:	2201      	movs	r2, #1
 801539e:	2109      	movs	r1, #9
 80153a0:	f7ff ff8e 	bl	80152c0 <std>
 80153a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80153a8:	2202      	movs	r2, #2
 80153aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153ae:	2112      	movs	r1, #18
 80153b0:	f7ff bf86 	b.w	80152c0 <std>
 80153b4:	20000714 	.word	0x20000714
 80153b8:	200005dc 	.word	0x200005dc
 80153bc:	0801532d 	.word	0x0801532d

080153c0 <__sfp_lock_acquire>:
 80153c0:	4801      	ldr	r0, [pc, #4]	@ (80153c8 <__sfp_lock_acquire+0x8>)
 80153c2:	f000 b974 	b.w	80156ae <__retarget_lock_acquire_recursive>
 80153c6:	bf00      	nop
 80153c8:	2000071d 	.word	0x2000071d

080153cc <__sfp_lock_release>:
 80153cc:	4801      	ldr	r0, [pc, #4]	@ (80153d4 <__sfp_lock_release+0x8>)
 80153ce:	f000 b96f 	b.w	80156b0 <__retarget_lock_release_recursive>
 80153d2:	bf00      	nop
 80153d4:	2000071d 	.word	0x2000071d

080153d8 <__sinit>:
 80153d8:	b510      	push	{r4, lr}
 80153da:	4604      	mov	r4, r0
 80153dc:	f7ff fff0 	bl	80153c0 <__sfp_lock_acquire>
 80153e0:	6a23      	ldr	r3, [r4, #32]
 80153e2:	b11b      	cbz	r3, 80153ec <__sinit+0x14>
 80153e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153e8:	f7ff bff0 	b.w	80153cc <__sfp_lock_release>
 80153ec:	4b04      	ldr	r3, [pc, #16]	@ (8015400 <__sinit+0x28>)
 80153ee:	6223      	str	r3, [r4, #32]
 80153f0:	4b04      	ldr	r3, [pc, #16]	@ (8015404 <__sinit+0x2c>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d1f5      	bne.n	80153e4 <__sinit+0xc>
 80153f8:	f7ff ffc4 	bl	8015384 <global_stdio_init.part.0>
 80153fc:	e7f2      	b.n	80153e4 <__sinit+0xc>
 80153fe:	bf00      	nop
 8015400:	08015345 	.word	0x08015345
 8015404:	20000714 	.word	0x20000714

08015408 <_fwalk_sglue>:
 8015408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801540c:	4607      	mov	r7, r0
 801540e:	4688      	mov	r8, r1
 8015410:	4614      	mov	r4, r2
 8015412:	2600      	movs	r6, #0
 8015414:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015418:	f1b9 0901 	subs.w	r9, r9, #1
 801541c:	d505      	bpl.n	801542a <_fwalk_sglue+0x22>
 801541e:	6824      	ldr	r4, [r4, #0]
 8015420:	2c00      	cmp	r4, #0
 8015422:	d1f7      	bne.n	8015414 <_fwalk_sglue+0xc>
 8015424:	4630      	mov	r0, r6
 8015426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801542a:	89ab      	ldrh	r3, [r5, #12]
 801542c:	2b01      	cmp	r3, #1
 801542e:	d907      	bls.n	8015440 <_fwalk_sglue+0x38>
 8015430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015434:	3301      	adds	r3, #1
 8015436:	d003      	beq.n	8015440 <_fwalk_sglue+0x38>
 8015438:	4629      	mov	r1, r5
 801543a:	4638      	mov	r0, r7
 801543c:	47c0      	blx	r8
 801543e:	4306      	orrs	r6, r0
 8015440:	3568      	adds	r5, #104	@ 0x68
 8015442:	e7e9      	b.n	8015418 <_fwalk_sglue+0x10>

08015444 <siprintf>:
 8015444:	b40e      	push	{r1, r2, r3}
 8015446:	b500      	push	{lr}
 8015448:	b09c      	sub	sp, #112	@ 0x70
 801544a:	ab1d      	add	r3, sp, #116	@ 0x74
 801544c:	9002      	str	r0, [sp, #8]
 801544e:	9006      	str	r0, [sp, #24]
 8015450:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015454:	4809      	ldr	r0, [pc, #36]	@ (801547c <siprintf+0x38>)
 8015456:	9107      	str	r1, [sp, #28]
 8015458:	9104      	str	r1, [sp, #16]
 801545a:	4909      	ldr	r1, [pc, #36]	@ (8015480 <siprintf+0x3c>)
 801545c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015460:	9105      	str	r1, [sp, #20]
 8015462:	6800      	ldr	r0, [r0, #0]
 8015464:	9301      	str	r3, [sp, #4]
 8015466:	a902      	add	r1, sp, #8
 8015468:	f001 fba6 	bl	8016bb8 <_svfiprintf_r>
 801546c:	9b02      	ldr	r3, [sp, #8]
 801546e:	2200      	movs	r2, #0
 8015470:	701a      	strb	r2, [r3, #0]
 8015472:	b01c      	add	sp, #112	@ 0x70
 8015474:	f85d eb04 	ldr.w	lr, [sp], #4
 8015478:	b003      	add	sp, #12
 801547a:	4770      	bx	lr
 801547c:	20000044 	.word	0x20000044
 8015480:	ffff0208 	.word	0xffff0208

08015484 <__sread>:
 8015484:	b510      	push	{r4, lr}
 8015486:	460c      	mov	r4, r1
 8015488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801548c:	f000 f89c 	bl	80155c8 <_read_r>
 8015490:	2800      	cmp	r0, #0
 8015492:	bfab      	itete	ge
 8015494:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015496:	89a3      	ldrhlt	r3, [r4, #12]
 8015498:	181b      	addge	r3, r3, r0
 801549a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801549e:	bfac      	ite	ge
 80154a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80154a2:	81a3      	strhlt	r3, [r4, #12]
 80154a4:	bd10      	pop	{r4, pc}

080154a6 <__swrite>:
 80154a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154aa:	461f      	mov	r7, r3
 80154ac:	898b      	ldrh	r3, [r1, #12]
 80154ae:	05db      	lsls	r3, r3, #23
 80154b0:	4605      	mov	r5, r0
 80154b2:	460c      	mov	r4, r1
 80154b4:	4616      	mov	r6, r2
 80154b6:	d505      	bpl.n	80154c4 <__swrite+0x1e>
 80154b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154bc:	2302      	movs	r3, #2
 80154be:	2200      	movs	r2, #0
 80154c0:	f000 f870 	bl	80155a4 <_lseek_r>
 80154c4:	89a3      	ldrh	r3, [r4, #12]
 80154c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80154ce:	81a3      	strh	r3, [r4, #12]
 80154d0:	4632      	mov	r2, r6
 80154d2:	463b      	mov	r3, r7
 80154d4:	4628      	mov	r0, r5
 80154d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154da:	f000 b8ab 	b.w	8015634 <_write_r>

080154de <__sseek>:
 80154de:	b510      	push	{r4, lr}
 80154e0:	460c      	mov	r4, r1
 80154e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154e6:	f000 f85d 	bl	80155a4 <_lseek_r>
 80154ea:	1c43      	adds	r3, r0, #1
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	bf15      	itete	ne
 80154f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80154f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80154f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80154fa:	81a3      	strheq	r3, [r4, #12]
 80154fc:	bf18      	it	ne
 80154fe:	81a3      	strhne	r3, [r4, #12]
 8015500:	bd10      	pop	{r4, pc}

08015502 <__sclose>:
 8015502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015506:	f000 b83d 	b.w	8015584 <_close_r>

0801550a <memset>:
 801550a:	4402      	add	r2, r0
 801550c:	4603      	mov	r3, r0
 801550e:	4293      	cmp	r3, r2
 8015510:	d100      	bne.n	8015514 <memset+0xa>
 8015512:	4770      	bx	lr
 8015514:	f803 1b01 	strb.w	r1, [r3], #1
 8015518:	e7f9      	b.n	801550e <memset+0x4>

0801551a <_raise_r>:
 801551a:	291f      	cmp	r1, #31
 801551c:	b538      	push	{r3, r4, r5, lr}
 801551e:	4605      	mov	r5, r0
 8015520:	460c      	mov	r4, r1
 8015522:	d904      	bls.n	801552e <_raise_r+0x14>
 8015524:	2316      	movs	r3, #22
 8015526:	6003      	str	r3, [r0, #0]
 8015528:	f04f 30ff 	mov.w	r0, #4294967295
 801552c:	bd38      	pop	{r3, r4, r5, pc}
 801552e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015530:	b112      	cbz	r2, 8015538 <_raise_r+0x1e>
 8015532:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015536:	b94b      	cbnz	r3, 801554c <_raise_r+0x32>
 8015538:	4628      	mov	r0, r5
 801553a:	f000 f869 	bl	8015610 <_getpid_r>
 801553e:	4622      	mov	r2, r4
 8015540:	4601      	mov	r1, r0
 8015542:	4628      	mov	r0, r5
 8015544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015548:	f000 b850 	b.w	80155ec <_kill_r>
 801554c:	2b01      	cmp	r3, #1
 801554e:	d00a      	beq.n	8015566 <_raise_r+0x4c>
 8015550:	1c59      	adds	r1, r3, #1
 8015552:	d103      	bne.n	801555c <_raise_r+0x42>
 8015554:	2316      	movs	r3, #22
 8015556:	6003      	str	r3, [r0, #0]
 8015558:	2001      	movs	r0, #1
 801555a:	e7e7      	b.n	801552c <_raise_r+0x12>
 801555c:	2100      	movs	r1, #0
 801555e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015562:	4620      	mov	r0, r4
 8015564:	4798      	blx	r3
 8015566:	2000      	movs	r0, #0
 8015568:	e7e0      	b.n	801552c <_raise_r+0x12>
	...

0801556c <raise>:
 801556c:	4b02      	ldr	r3, [pc, #8]	@ (8015578 <raise+0xc>)
 801556e:	4601      	mov	r1, r0
 8015570:	6818      	ldr	r0, [r3, #0]
 8015572:	f7ff bfd2 	b.w	801551a <_raise_r>
 8015576:	bf00      	nop
 8015578:	20000044 	.word	0x20000044

0801557c <_localeconv_r>:
 801557c:	4800      	ldr	r0, [pc, #0]	@ (8015580 <_localeconv_r+0x4>)
 801557e:	4770      	bx	lr
 8015580:	20000184 	.word	0x20000184

08015584 <_close_r>:
 8015584:	b538      	push	{r3, r4, r5, lr}
 8015586:	4d06      	ldr	r5, [pc, #24]	@ (80155a0 <_close_r+0x1c>)
 8015588:	2300      	movs	r3, #0
 801558a:	4604      	mov	r4, r0
 801558c:	4608      	mov	r0, r1
 801558e:	602b      	str	r3, [r5, #0]
 8015590:	f7f8 fb2a 	bl	800dbe8 <_close>
 8015594:	1c43      	adds	r3, r0, #1
 8015596:	d102      	bne.n	801559e <_close_r+0x1a>
 8015598:	682b      	ldr	r3, [r5, #0]
 801559a:	b103      	cbz	r3, 801559e <_close_r+0x1a>
 801559c:	6023      	str	r3, [r4, #0]
 801559e:	bd38      	pop	{r3, r4, r5, pc}
 80155a0:	20000718 	.word	0x20000718

080155a4 <_lseek_r>:
 80155a4:	b538      	push	{r3, r4, r5, lr}
 80155a6:	4d07      	ldr	r5, [pc, #28]	@ (80155c4 <_lseek_r+0x20>)
 80155a8:	4604      	mov	r4, r0
 80155aa:	4608      	mov	r0, r1
 80155ac:	4611      	mov	r1, r2
 80155ae:	2200      	movs	r2, #0
 80155b0:	602a      	str	r2, [r5, #0]
 80155b2:	461a      	mov	r2, r3
 80155b4:	f7f8 fb3f 	bl	800dc36 <_lseek>
 80155b8:	1c43      	adds	r3, r0, #1
 80155ba:	d102      	bne.n	80155c2 <_lseek_r+0x1e>
 80155bc:	682b      	ldr	r3, [r5, #0]
 80155be:	b103      	cbz	r3, 80155c2 <_lseek_r+0x1e>
 80155c0:	6023      	str	r3, [r4, #0]
 80155c2:	bd38      	pop	{r3, r4, r5, pc}
 80155c4:	20000718 	.word	0x20000718

080155c8 <_read_r>:
 80155c8:	b538      	push	{r3, r4, r5, lr}
 80155ca:	4d07      	ldr	r5, [pc, #28]	@ (80155e8 <_read_r+0x20>)
 80155cc:	4604      	mov	r4, r0
 80155ce:	4608      	mov	r0, r1
 80155d0:	4611      	mov	r1, r2
 80155d2:	2200      	movs	r2, #0
 80155d4:	602a      	str	r2, [r5, #0]
 80155d6:	461a      	mov	r2, r3
 80155d8:	f7f8 facd 	bl	800db76 <_read>
 80155dc:	1c43      	adds	r3, r0, #1
 80155de:	d102      	bne.n	80155e6 <_read_r+0x1e>
 80155e0:	682b      	ldr	r3, [r5, #0]
 80155e2:	b103      	cbz	r3, 80155e6 <_read_r+0x1e>
 80155e4:	6023      	str	r3, [r4, #0]
 80155e6:	bd38      	pop	{r3, r4, r5, pc}
 80155e8:	20000718 	.word	0x20000718

080155ec <_kill_r>:
 80155ec:	b538      	push	{r3, r4, r5, lr}
 80155ee:	4d07      	ldr	r5, [pc, #28]	@ (801560c <_kill_r+0x20>)
 80155f0:	2300      	movs	r3, #0
 80155f2:	4604      	mov	r4, r0
 80155f4:	4608      	mov	r0, r1
 80155f6:	4611      	mov	r1, r2
 80155f8:	602b      	str	r3, [r5, #0]
 80155fa:	f7f8 faa1 	bl	800db40 <_kill>
 80155fe:	1c43      	adds	r3, r0, #1
 8015600:	d102      	bne.n	8015608 <_kill_r+0x1c>
 8015602:	682b      	ldr	r3, [r5, #0]
 8015604:	b103      	cbz	r3, 8015608 <_kill_r+0x1c>
 8015606:	6023      	str	r3, [r4, #0]
 8015608:	bd38      	pop	{r3, r4, r5, pc}
 801560a:	bf00      	nop
 801560c:	20000718 	.word	0x20000718

08015610 <_getpid_r>:
 8015610:	f7f8 ba8e 	b.w	800db30 <_getpid>

08015614 <_sbrk_r>:
 8015614:	b538      	push	{r3, r4, r5, lr}
 8015616:	4d06      	ldr	r5, [pc, #24]	@ (8015630 <_sbrk_r+0x1c>)
 8015618:	2300      	movs	r3, #0
 801561a:	4604      	mov	r4, r0
 801561c:	4608      	mov	r0, r1
 801561e:	602b      	str	r3, [r5, #0]
 8015620:	f7f8 fb16 	bl	800dc50 <_sbrk>
 8015624:	1c43      	adds	r3, r0, #1
 8015626:	d102      	bne.n	801562e <_sbrk_r+0x1a>
 8015628:	682b      	ldr	r3, [r5, #0]
 801562a:	b103      	cbz	r3, 801562e <_sbrk_r+0x1a>
 801562c:	6023      	str	r3, [r4, #0]
 801562e:	bd38      	pop	{r3, r4, r5, pc}
 8015630:	20000718 	.word	0x20000718

08015634 <_write_r>:
 8015634:	b538      	push	{r3, r4, r5, lr}
 8015636:	4d07      	ldr	r5, [pc, #28]	@ (8015654 <_write_r+0x20>)
 8015638:	4604      	mov	r4, r0
 801563a:	4608      	mov	r0, r1
 801563c:	4611      	mov	r1, r2
 801563e:	2200      	movs	r2, #0
 8015640:	602a      	str	r2, [r5, #0]
 8015642:	461a      	mov	r2, r3
 8015644:	f7f8 fab4 	bl	800dbb0 <_write>
 8015648:	1c43      	adds	r3, r0, #1
 801564a:	d102      	bne.n	8015652 <_write_r+0x1e>
 801564c:	682b      	ldr	r3, [r5, #0]
 801564e:	b103      	cbz	r3, 8015652 <_write_r+0x1e>
 8015650:	6023      	str	r3, [r4, #0]
 8015652:	bd38      	pop	{r3, r4, r5, pc}
 8015654:	20000718 	.word	0x20000718

08015658 <__errno>:
 8015658:	4b01      	ldr	r3, [pc, #4]	@ (8015660 <__errno+0x8>)
 801565a:	6818      	ldr	r0, [r3, #0]
 801565c:	4770      	bx	lr
 801565e:	bf00      	nop
 8015660:	20000044 	.word	0x20000044

08015664 <__libc_init_array>:
 8015664:	b570      	push	{r4, r5, r6, lr}
 8015666:	4d0d      	ldr	r5, [pc, #52]	@ (801569c <__libc_init_array+0x38>)
 8015668:	4c0d      	ldr	r4, [pc, #52]	@ (80156a0 <__libc_init_array+0x3c>)
 801566a:	1b64      	subs	r4, r4, r5
 801566c:	10a4      	asrs	r4, r4, #2
 801566e:	2600      	movs	r6, #0
 8015670:	42a6      	cmp	r6, r4
 8015672:	d109      	bne.n	8015688 <__libc_init_array+0x24>
 8015674:	4d0b      	ldr	r5, [pc, #44]	@ (80156a4 <__libc_init_array+0x40>)
 8015676:	4c0c      	ldr	r4, [pc, #48]	@ (80156a8 <__libc_init_array+0x44>)
 8015678:	f001 ff5a 	bl	8017530 <_init>
 801567c:	1b64      	subs	r4, r4, r5
 801567e:	10a4      	asrs	r4, r4, #2
 8015680:	2600      	movs	r6, #0
 8015682:	42a6      	cmp	r6, r4
 8015684:	d105      	bne.n	8015692 <__libc_init_array+0x2e>
 8015686:	bd70      	pop	{r4, r5, r6, pc}
 8015688:	f855 3b04 	ldr.w	r3, [r5], #4
 801568c:	4798      	blx	r3
 801568e:	3601      	adds	r6, #1
 8015690:	e7ee      	b.n	8015670 <__libc_init_array+0xc>
 8015692:	f855 3b04 	ldr.w	r3, [r5], #4
 8015696:	4798      	blx	r3
 8015698:	3601      	adds	r6, #1
 801569a:	e7f2      	b.n	8015682 <__libc_init_array+0x1e>
 801569c:	0801b004 	.word	0x0801b004
 80156a0:	0801b004 	.word	0x0801b004
 80156a4:	0801b004 	.word	0x0801b004
 80156a8:	0801b00c 	.word	0x0801b00c

080156ac <__retarget_lock_init_recursive>:
 80156ac:	4770      	bx	lr

080156ae <__retarget_lock_acquire_recursive>:
 80156ae:	4770      	bx	lr

080156b0 <__retarget_lock_release_recursive>:
 80156b0:	4770      	bx	lr

080156b2 <memcpy>:
 80156b2:	440a      	add	r2, r1
 80156b4:	4291      	cmp	r1, r2
 80156b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80156ba:	d100      	bne.n	80156be <memcpy+0xc>
 80156bc:	4770      	bx	lr
 80156be:	b510      	push	{r4, lr}
 80156c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156c8:	4291      	cmp	r1, r2
 80156ca:	d1f9      	bne.n	80156c0 <memcpy+0xe>
 80156cc:	bd10      	pop	{r4, pc}

080156ce <quorem>:
 80156ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d2:	6903      	ldr	r3, [r0, #16]
 80156d4:	690c      	ldr	r4, [r1, #16]
 80156d6:	42a3      	cmp	r3, r4
 80156d8:	4607      	mov	r7, r0
 80156da:	db7e      	blt.n	80157da <quorem+0x10c>
 80156dc:	3c01      	subs	r4, #1
 80156de:	f101 0814 	add.w	r8, r1, #20
 80156e2:	00a3      	lsls	r3, r4, #2
 80156e4:	f100 0514 	add.w	r5, r0, #20
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80156ee:	9301      	str	r3, [sp, #4]
 80156f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80156f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80156f8:	3301      	adds	r3, #1
 80156fa:	429a      	cmp	r2, r3
 80156fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015700:	fbb2 f6f3 	udiv	r6, r2, r3
 8015704:	d32e      	bcc.n	8015764 <quorem+0x96>
 8015706:	f04f 0a00 	mov.w	sl, #0
 801570a:	46c4      	mov	ip, r8
 801570c:	46ae      	mov	lr, r5
 801570e:	46d3      	mov	fp, sl
 8015710:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015714:	b298      	uxth	r0, r3
 8015716:	fb06 a000 	mla	r0, r6, r0, sl
 801571a:	0c02      	lsrs	r2, r0, #16
 801571c:	0c1b      	lsrs	r3, r3, #16
 801571e:	fb06 2303 	mla	r3, r6, r3, r2
 8015722:	f8de 2000 	ldr.w	r2, [lr]
 8015726:	b280      	uxth	r0, r0
 8015728:	b292      	uxth	r2, r2
 801572a:	1a12      	subs	r2, r2, r0
 801572c:	445a      	add	r2, fp
 801572e:	f8de 0000 	ldr.w	r0, [lr]
 8015732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015736:	b29b      	uxth	r3, r3
 8015738:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801573c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015740:	b292      	uxth	r2, r2
 8015742:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015746:	45e1      	cmp	r9, ip
 8015748:	f84e 2b04 	str.w	r2, [lr], #4
 801574c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015750:	d2de      	bcs.n	8015710 <quorem+0x42>
 8015752:	9b00      	ldr	r3, [sp, #0]
 8015754:	58eb      	ldr	r3, [r5, r3]
 8015756:	b92b      	cbnz	r3, 8015764 <quorem+0x96>
 8015758:	9b01      	ldr	r3, [sp, #4]
 801575a:	3b04      	subs	r3, #4
 801575c:	429d      	cmp	r5, r3
 801575e:	461a      	mov	r2, r3
 8015760:	d32f      	bcc.n	80157c2 <quorem+0xf4>
 8015762:	613c      	str	r4, [r7, #16]
 8015764:	4638      	mov	r0, r7
 8015766:	f001 f8c3 	bl	80168f0 <__mcmp>
 801576a:	2800      	cmp	r0, #0
 801576c:	db25      	blt.n	80157ba <quorem+0xec>
 801576e:	4629      	mov	r1, r5
 8015770:	2000      	movs	r0, #0
 8015772:	f858 2b04 	ldr.w	r2, [r8], #4
 8015776:	f8d1 c000 	ldr.w	ip, [r1]
 801577a:	fa1f fe82 	uxth.w	lr, r2
 801577e:	fa1f f38c 	uxth.w	r3, ip
 8015782:	eba3 030e 	sub.w	r3, r3, lr
 8015786:	4403      	add	r3, r0
 8015788:	0c12      	lsrs	r2, r2, #16
 801578a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801578e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015792:	b29b      	uxth	r3, r3
 8015794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015798:	45c1      	cmp	r9, r8
 801579a:	f841 3b04 	str.w	r3, [r1], #4
 801579e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80157a2:	d2e6      	bcs.n	8015772 <quorem+0xa4>
 80157a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80157a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80157ac:	b922      	cbnz	r2, 80157b8 <quorem+0xea>
 80157ae:	3b04      	subs	r3, #4
 80157b0:	429d      	cmp	r5, r3
 80157b2:	461a      	mov	r2, r3
 80157b4:	d30b      	bcc.n	80157ce <quorem+0x100>
 80157b6:	613c      	str	r4, [r7, #16]
 80157b8:	3601      	adds	r6, #1
 80157ba:	4630      	mov	r0, r6
 80157bc:	b003      	add	sp, #12
 80157be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c2:	6812      	ldr	r2, [r2, #0]
 80157c4:	3b04      	subs	r3, #4
 80157c6:	2a00      	cmp	r2, #0
 80157c8:	d1cb      	bne.n	8015762 <quorem+0x94>
 80157ca:	3c01      	subs	r4, #1
 80157cc:	e7c6      	b.n	801575c <quorem+0x8e>
 80157ce:	6812      	ldr	r2, [r2, #0]
 80157d0:	3b04      	subs	r3, #4
 80157d2:	2a00      	cmp	r2, #0
 80157d4:	d1ef      	bne.n	80157b6 <quorem+0xe8>
 80157d6:	3c01      	subs	r4, #1
 80157d8:	e7ea      	b.n	80157b0 <quorem+0xe2>
 80157da:	2000      	movs	r0, #0
 80157dc:	e7ee      	b.n	80157bc <quorem+0xee>
	...

080157e0 <_dtoa_r>:
 80157e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e4:	69c7      	ldr	r7, [r0, #28]
 80157e6:	b099      	sub	sp, #100	@ 0x64
 80157e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80157ec:	ec55 4b10 	vmov	r4, r5, d0
 80157f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80157f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80157f4:	4683      	mov	fp, r0
 80157f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80157f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80157fa:	b97f      	cbnz	r7, 801581c <_dtoa_r+0x3c>
 80157fc:	2010      	movs	r0, #16
 80157fe:	f7ff f83b 	bl	8014878 <malloc>
 8015802:	4602      	mov	r2, r0
 8015804:	f8cb 001c 	str.w	r0, [fp, #28]
 8015808:	b920      	cbnz	r0, 8015814 <_dtoa_r+0x34>
 801580a:	4ba7      	ldr	r3, [pc, #668]	@ (8015aa8 <_dtoa_r+0x2c8>)
 801580c:	21ef      	movs	r1, #239	@ 0xef
 801580e:	48a7      	ldr	r0, [pc, #668]	@ (8015aac <_dtoa_r+0x2cc>)
 8015810:	f001 fb94 	bl	8016f3c <__assert_func>
 8015814:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015818:	6007      	str	r7, [r0, #0]
 801581a:	60c7      	str	r7, [r0, #12]
 801581c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015820:	6819      	ldr	r1, [r3, #0]
 8015822:	b159      	cbz	r1, 801583c <_dtoa_r+0x5c>
 8015824:	685a      	ldr	r2, [r3, #4]
 8015826:	604a      	str	r2, [r1, #4]
 8015828:	2301      	movs	r3, #1
 801582a:	4093      	lsls	r3, r2
 801582c:	608b      	str	r3, [r1, #8]
 801582e:	4658      	mov	r0, fp
 8015830:	f000 fe24 	bl	801647c <_Bfree>
 8015834:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015838:	2200      	movs	r2, #0
 801583a:	601a      	str	r2, [r3, #0]
 801583c:	1e2b      	subs	r3, r5, #0
 801583e:	bfb9      	ittee	lt
 8015840:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015844:	9303      	strlt	r3, [sp, #12]
 8015846:	2300      	movge	r3, #0
 8015848:	6033      	strge	r3, [r6, #0]
 801584a:	9f03      	ldr	r7, [sp, #12]
 801584c:	4b98      	ldr	r3, [pc, #608]	@ (8015ab0 <_dtoa_r+0x2d0>)
 801584e:	bfbc      	itt	lt
 8015850:	2201      	movlt	r2, #1
 8015852:	6032      	strlt	r2, [r6, #0]
 8015854:	43bb      	bics	r3, r7
 8015856:	d112      	bne.n	801587e <_dtoa_r+0x9e>
 8015858:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801585a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801585e:	6013      	str	r3, [r2, #0]
 8015860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015864:	4323      	orrs	r3, r4
 8015866:	f000 854d 	beq.w	8016304 <_dtoa_r+0xb24>
 801586a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801586c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015ac4 <_dtoa_r+0x2e4>
 8015870:	2b00      	cmp	r3, #0
 8015872:	f000 854f 	beq.w	8016314 <_dtoa_r+0xb34>
 8015876:	f10a 0303 	add.w	r3, sl, #3
 801587a:	f000 bd49 	b.w	8016310 <_dtoa_r+0xb30>
 801587e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015882:	2200      	movs	r2, #0
 8015884:	ec51 0b17 	vmov	r0, r1, d7
 8015888:	2300      	movs	r3, #0
 801588a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801588e:	f7eb f94b 	bl	8000b28 <__aeabi_dcmpeq>
 8015892:	4680      	mov	r8, r0
 8015894:	b158      	cbz	r0, 80158ae <_dtoa_r+0xce>
 8015896:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015898:	2301      	movs	r3, #1
 801589a:	6013      	str	r3, [r2, #0]
 801589c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801589e:	b113      	cbz	r3, 80158a6 <_dtoa_r+0xc6>
 80158a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80158a2:	4b84      	ldr	r3, [pc, #528]	@ (8015ab4 <_dtoa_r+0x2d4>)
 80158a4:	6013      	str	r3, [r2, #0]
 80158a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015ac8 <_dtoa_r+0x2e8>
 80158aa:	f000 bd33 	b.w	8016314 <_dtoa_r+0xb34>
 80158ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80158b2:	aa16      	add	r2, sp, #88	@ 0x58
 80158b4:	a917      	add	r1, sp, #92	@ 0x5c
 80158b6:	4658      	mov	r0, fp
 80158b8:	f001 f8ca 	bl	8016a50 <__d2b>
 80158bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80158c0:	4681      	mov	r9, r0
 80158c2:	2e00      	cmp	r6, #0
 80158c4:	d077      	beq.n	80159b6 <_dtoa_r+0x1d6>
 80158c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80158c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80158cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80158d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80158d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80158d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80158dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80158e0:	4619      	mov	r1, r3
 80158e2:	2200      	movs	r2, #0
 80158e4:	4b74      	ldr	r3, [pc, #464]	@ (8015ab8 <_dtoa_r+0x2d8>)
 80158e6:	f7ea fcff 	bl	80002e8 <__aeabi_dsub>
 80158ea:	a369      	add	r3, pc, #420	@ (adr r3, 8015a90 <_dtoa_r+0x2b0>)
 80158ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f0:	f7ea feb2 	bl	8000658 <__aeabi_dmul>
 80158f4:	a368      	add	r3, pc, #416	@ (adr r3, 8015a98 <_dtoa_r+0x2b8>)
 80158f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158fa:	f7ea fcf7 	bl	80002ec <__adddf3>
 80158fe:	4604      	mov	r4, r0
 8015900:	4630      	mov	r0, r6
 8015902:	460d      	mov	r5, r1
 8015904:	f7ea fe3e 	bl	8000584 <__aeabi_i2d>
 8015908:	a365      	add	r3, pc, #404	@ (adr r3, 8015aa0 <_dtoa_r+0x2c0>)
 801590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801590e:	f7ea fea3 	bl	8000658 <__aeabi_dmul>
 8015912:	4602      	mov	r2, r0
 8015914:	460b      	mov	r3, r1
 8015916:	4620      	mov	r0, r4
 8015918:	4629      	mov	r1, r5
 801591a:	f7ea fce7 	bl	80002ec <__adddf3>
 801591e:	4604      	mov	r4, r0
 8015920:	460d      	mov	r5, r1
 8015922:	f7eb f949 	bl	8000bb8 <__aeabi_d2iz>
 8015926:	2200      	movs	r2, #0
 8015928:	4607      	mov	r7, r0
 801592a:	2300      	movs	r3, #0
 801592c:	4620      	mov	r0, r4
 801592e:	4629      	mov	r1, r5
 8015930:	f7eb f904 	bl	8000b3c <__aeabi_dcmplt>
 8015934:	b140      	cbz	r0, 8015948 <_dtoa_r+0x168>
 8015936:	4638      	mov	r0, r7
 8015938:	f7ea fe24 	bl	8000584 <__aeabi_i2d>
 801593c:	4622      	mov	r2, r4
 801593e:	462b      	mov	r3, r5
 8015940:	f7eb f8f2 	bl	8000b28 <__aeabi_dcmpeq>
 8015944:	b900      	cbnz	r0, 8015948 <_dtoa_r+0x168>
 8015946:	3f01      	subs	r7, #1
 8015948:	2f16      	cmp	r7, #22
 801594a:	d851      	bhi.n	80159f0 <_dtoa_r+0x210>
 801594c:	4b5b      	ldr	r3, [pc, #364]	@ (8015abc <_dtoa_r+0x2dc>)
 801594e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801595a:	f7eb f8ef 	bl	8000b3c <__aeabi_dcmplt>
 801595e:	2800      	cmp	r0, #0
 8015960:	d048      	beq.n	80159f4 <_dtoa_r+0x214>
 8015962:	3f01      	subs	r7, #1
 8015964:	2300      	movs	r3, #0
 8015966:	9312      	str	r3, [sp, #72]	@ 0x48
 8015968:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801596a:	1b9b      	subs	r3, r3, r6
 801596c:	1e5a      	subs	r2, r3, #1
 801596e:	bf44      	itt	mi
 8015970:	f1c3 0801 	rsbmi	r8, r3, #1
 8015974:	2300      	movmi	r3, #0
 8015976:	9208      	str	r2, [sp, #32]
 8015978:	bf54      	ite	pl
 801597a:	f04f 0800 	movpl.w	r8, #0
 801597e:	9308      	strmi	r3, [sp, #32]
 8015980:	2f00      	cmp	r7, #0
 8015982:	db39      	blt.n	80159f8 <_dtoa_r+0x218>
 8015984:	9b08      	ldr	r3, [sp, #32]
 8015986:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015988:	443b      	add	r3, r7
 801598a:	9308      	str	r3, [sp, #32]
 801598c:	2300      	movs	r3, #0
 801598e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015992:	2b09      	cmp	r3, #9
 8015994:	d864      	bhi.n	8015a60 <_dtoa_r+0x280>
 8015996:	2b05      	cmp	r3, #5
 8015998:	bfc4      	itt	gt
 801599a:	3b04      	subgt	r3, #4
 801599c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801599e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159a0:	f1a3 0302 	sub.w	r3, r3, #2
 80159a4:	bfcc      	ite	gt
 80159a6:	2400      	movgt	r4, #0
 80159a8:	2401      	movle	r4, #1
 80159aa:	2b03      	cmp	r3, #3
 80159ac:	d863      	bhi.n	8015a76 <_dtoa_r+0x296>
 80159ae:	e8df f003 	tbb	[pc, r3]
 80159b2:	372a      	.short	0x372a
 80159b4:	5535      	.short	0x5535
 80159b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80159ba:	441e      	add	r6, r3
 80159bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80159c0:	2b20      	cmp	r3, #32
 80159c2:	bfc1      	itttt	gt
 80159c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80159c8:	409f      	lslgt	r7, r3
 80159ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80159ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80159d2:	bfd6      	itet	le
 80159d4:	f1c3 0320 	rsble	r3, r3, #32
 80159d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80159dc:	fa04 f003 	lslle.w	r0, r4, r3
 80159e0:	f7ea fdc0 	bl	8000564 <__aeabi_ui2d>
 80159e4:	2201      	movs	r2, #1
 80159e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80159ea:	3e01      	subs	r6, #1
 80159ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80159ee:	e777      	b.n	80158e0 <_dtoa_r+0x100>
 80159f0:	2301      	movs	r3, #1
 80159f2:	e7b8      	b.n	8015966 <_dtoa_r+0x186>
 80159f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80159f6:	e7b7      	b.n	8015968 <_dtoa_r+0x188>
 80159f8:	427b      	negs	r3, r7
 80159fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80159fc:	2300      	movs	r3, #0
 80159fe:	eba8 0807 	sub.w	r8, r8, r7
 8015a02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015a04:	e7c4      	b.n	8015990 <_dtoa_r+0x1b0>
 8015a06:	2300      	movs	r3, #0
 8015a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	dc35      	bgt.n	8015a7c <_dtoa_r+0x29c>
 8015a10:	2301      	movs	r3, #1
 8015a12:	9300      	str	r3, [sp, #0]
 8015a14:	9307      	str	r3, [sp, #28]
 8015a16:	461a      	mov	r2, r3
 8015a18:	920e      	str	r2, [sp, #56]	@ 0x38
 8015a1a:	e00b      	b.n	8015a34 <_dtoa_r+0x254>
 8015a1c:	2301      	movs	r3, #1
 8015a1e:	e7f3      	b.n	8015a08 <_dtoa_r+0x228>
 8015a20:	2300      	movs	r3, #0
 8015a22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a26:	18fb      	adds	r3, r7, r3
 8015a28:	9300      	str	r3, [sp, #0]
 8015a2a:	3301      	adds	r3, #1
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	9307      	str	r3, [sp, #28]
 8015a30:	bfb8      	it	lt
 8015a32:	2301      	movlt	r3, #1
 8015a34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015a38:	2100      	movs	r1, #0
 8015a3a:	2204      	movs	r2, #4
 8015a3c:	f102 0514 	add.w	r5, r2, #20
 8015a40:	429d      	cmp	r5, r3
 8015a42:	d91f      	bls.n	8015a84 <_dtoa_r+0x2a4>
 8015a44:	6041      	str	r1, [r0, #4]
 8015a46:	4658      	mov	r0, fp
 8015a48:	f000 fcd8 	bl	80163fc <_Balloc>
 8015a4c:	4682      	mov	sl, r0
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	d13c      	bne.n	8015acc <_dtoa_r+0x2ec>
 8015a52:	4b1b      	ldr	r3, [pc, #108]	@ (8015ac0 <_dtoa_r+0x2e0>)
 8015a54:	4602      	mov	r2, r0
 8015a56:	f240 11af 	movw	r1, #431	@ 0x1af
 8015a5a:	e6d8      	b.n	801580e <_dtoa_r+0x2e>
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	e7e0      	b.n	8015a22 <_dtoa_r+0x242>
 8015a60:	2401      	movs	r4, #1
 8015a62:	2300      	movs	r3, #0
 8015a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015a68:	f04f 33ff 	mov.w	r3, #4294967295
 8015a6c:	9300      	str	r3, [sp, #0]
 8015a6e:	9307      	str	r3, [sp, #28]
 8015a70:	2200      	movs	r2, #0
 8015a72:	2312      	movs	r3, #18
 8015a74:	e7d0      	b.n	8015a18 <_dtoa_r+0x238>
 8015a76:	2301      	movs	r3, #1
 8015a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a7a:	e7f5      	b.n	8015a68 <_dtoa_r+0x288>
 8015a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a7e:	9300      	str	r3, [sp, #0]
 8015a80:	9307      	str	r3, [sp, #28]
 8015a82:	e7d7      	b.n	8015a34 <_dtoa_r+0x254>
 8015a84:	3101      	adds	r1, #1
 8015a86:	0052      	lsls	r2, r2, #1
 8015a88:	e7d8      	b.n	8015a3c <_dtoa_r+0x25c>
 8015a8a:	bf00      	nop
 8015a8c:	f3af 8000 	nop.w
 8015a90:	636f4361 	.word	0x636f4361
 8015a94:	3fd287a7 	.word	0x3fd287a7
 8015a98:	8b60c8b3 	.word	0x8b60c8b3
 8015a9c:	3fc68a28 	.word	0x3fc68a28
 8015aa0:	509f79fb 	.word	0x509f79fb
 8015aa4:	3fd34413 	.word	0x3fd34413
 8015aa8:	08018d31 	.word	0x08018d31
 8015aac:	08018d48 	.word	0x08018d48
 8015ab0:	7ff00000 	.word	0x7ff00000
 8015ab4:	08018d01 	.word	0x08018d01
 8015ab8:	3ff80000 	.word	0x3ff80000
 8015abc:	08018e40 	.word	0x08018e40
 8015ac0:	08018da0 	.word	0x08018da0
 8015ac4:	08018d2d 	.word	0x08018d2d
 8015ac8:	08018d00 	.word	0x08018d00
 8015acc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015ad0:	6018      	str	r0, [r3, #0]
 8015ad2:	9b07      	ldr	r3, [sp, #28]
 8015ad4:	2b0e      	cmp	r3, #14
 8015ad6:	f200 80a4 	bhi.w	8015c22 <_dtoa_r+0x442>
 8015ada:	2c00      	cmp	r4, #0
 8015adc:	f000 80a1 	beq.w	8015c22 <_dtoa_r+0x442>
 8015ae0:	2f00      	cmp	r7, #0
 8015ae2:	dd33      	ble.n	8015b4c <_dtoa_r+0x36c>
 8015ae4:	4bad      	ldr	r3, [pc, #692]	@ (8015d9c <_dtoa_r+0x5bc>)
 8015ae6:	f007 020f 	and.w	r2, r7, #15
 8015aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015aee:	ed93 7b00 	vldr	d7, [r3]
 8015af2:	05f8      	lsls	r0, r7, #23
 8015af4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015af8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015afc:	d516      	bpl.n	8015b2c <_dtoa_r+0x34c>
 8015afe:	4ba8      	ldr	r3, [pc, #672]	@ (8015da0 <_dtoa_r+0x5c0>)
 8015b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015b04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015b08:	f7ea fed0 	bl	80008ac <__aeabi_ddiv>
 8015b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b10:	f004 040f 	and.w	r4, r4, #15
 8015b14:	2603      	movs	r6, #3
 8015b16:	4da2      	ldr	r5, [pc, #648]	@ (8015da0 <_dtoa_r+0x5c0>)
 8015b18:	b954      	cbnz	r4, 8015b30 <_dtoa_r+0x350>
 8015b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b22:	f7ea fec3 	bl	80008ac <__aeabi_ddiv>
 8015b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b2a:	e028      	b.n	8015b7e <_dtoa_r+0x39e>
 8015b2c:	2602      	movs	r6, #2
 8015b2e:	e7f2      	b.n	8015b16 <_dtoa_r+0x336>
 8015b30:	07e1      	lsls	r1, r4, #31
 8015b32:	d508      	bpl.n	8015b46 <_dtoa_r+0x366>
 8015b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015b38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015b3c:	f7ea fd8c 	bl	8000658 <__aeabi_dmul>
 8015b40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015b44:	3601      	adds	r6, #1
 8015b46:	1064      	asrs	r4, r4, #1
 8015b48:	3508      	adds	r5, #8
 8015b4a:	e7e5      	b.n	8015b18 <_dtoa_r+0x338>
 8015b4c:	f000 80d2 	beq.w	8015cf4 <_dtoa_r+0x514>
 8015b50:	427c      	negs	r4, r7
 8015b52:	4b92      	ldr	r3, [pc, #584]	@ (8015d9c <_dtoa_r+0x5bc>)
 8015b54:	4d92      	ldr	r5, [pc, #584]	@ (8015da0 <_dtoa_r+0x5c0>)
 8015b56:	f004 020f 	and.w	r2, r4, #15
 8015b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015b66:	f7ea fd77 	bl	8000658 <__aeabi_dmul>
 8015b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b6e:	1124      	asrs	r4, r4, #4
 8015b70:	2300      	movs	r3, #0
 8015b72:	2602      	movs	r6, #2
 8015b74:	2c00      	cmp	r4, #0
 8015b76:	f040 80b2 	bne.w	8015cde <_dtoa_r+0x4fe>
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d1d3      	bne.n	8015b26 <_dtoa_r+0x346>
 8015b7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015b80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	f000 80b7 	beq.w	8015cf8 <_dtoa_r+0x518>
 8015b8a:	4b86      	ldr	r3, [pc, #536]	@ (8015da4 <_dtoa_r+0x5c4>)
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	4620      	mov	r0, r4
 8015b90:	4629      	mov	r1, r5
 8015b92:	f7ea ffd3 	bl	8000b3c <__aeabi_dcmplt>
 8015b96:	2800      	cmp	r0, #0
 8015b98:	f000 80ae 	beq.w	8015cf8 <_dtoa_r+0x518>
 8015b9c:	9b07      	ldr	r3, [sp, #28]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	f000 80aa 	beq.w	8015cf8 <_dtoa_r+0x518>
 8015ba4:	9b00      	ldr	r3, [sp, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	dd37      	ble.n	8015c1a <_dtoa_r+0x43a>
 8015baa:	1e7b      	subs	r3, r7, #1
 8015bac:	9304      	str	r3, [sp, #16]
 8015bae:	4620      	mov	r0, r4
 8015bb0:	4b7d      	ldr	r3, [pc, #500]	@ (8015da8 <_dtoa_r+0x5c8>)
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	4629      	mov	r1, r5
 8015bb6:	f7ea fd4f 	bl	8000658 <__aeabi_dmul>
 8015bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015bbe:	9c00      	ldr	r4, [sp, #0]
 8015bc0:	3601      	adds	r6, #1
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	f7ea fcde 	bl	8000584 <__aeabi_i2d>
 8015bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bcc:	f7ea fd44 	bl	8000658 <__aeabi_dmul>
 8015bd0:	4b76      	ldr	r3, [pc, #472]	@ (8015dac <_dtoa_r+0x5cc>)
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	f7ea fb8a 	bl	80002ec <__adddf3>
 8015bd8:	4605      	mov	r5, r0
 8015bda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015bde:	2c00      	cmp	r4, #0
 8015be0:	f040 808d 	bne.w	8015cfe <_dtoa_r+0x51e>
 8015be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015be8:	4b71      	ldr	r3, [pc, #452]	@ (8015db0 <_dtoa_r+0x5d0>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	f7ea fb7c 	bl	80002e8 <__aeabi_dsub>
 8015bf0:	4602      	mov	r2, r0
 8015bf2:	460b      	mov	r3, r1
 8015bf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015bf8:	462a      	mov	r2, r5
 8015bfa:	4633      	mov	r3, r6
 8015bfc:	f7ea ffbc 	bl	8000b78 <__aeabi_dcmpgt>
 8015c00:	2800      	cmp	r0, #0
 8015c02:	f040 828b 	bne.w	801611c <_dtoa_r+0x93c>
 8015c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c0a:	462a      	mov	r2, r5
 8015c0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015c10:	f7ea ff94 	bl	8000b3c <__aeabi_dcmplt>
 8015c14:	2800      	cmp	r0, #0
 8015c16:	f040 8128 	bne.w	8015e6a <_dtoa_r+0x68a>
 8015c1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015c1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015c22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	f2c0 815a 	blt.w	8015ede <_dtoa_r+0x6fe>
 8015c2a:	2f0e      	cmp	r7, #14
 8015c2c:	f300 8157 	bgt.w	8015ede <_dtoa_r+0x6fe>
 8015c30:	4b5a      	ldr	r3, [pc, #360]	@ (8015d9c <_dtoa_r+0x5bc>)
 8015c32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015c36:	ed93 7b00 	vldr	d7, [r3]
 8015c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	ed8d 7b00 	vstr	d7, [sp]
 8015c42:	da03      	bge.n	8015c4c <_dtoa_r+0x46c>
 8015c44:	9b07      	ldr	r3, [sp, #28]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	f340 8101 	ble.w	8015e4e <_dtoa_r+0x66e>
 8015c4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015c50:	4656      	mov	r6, sl
 8015c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c56:	4620      	mov	r0, r4
 8015c58:	4629      	mov	r1, r5
 8015c5a:	f7ea fe27 	bl	80008ac <__aeabi_ddiv>
 8015c5e:	f7ea ffab 	bl	8000bb8 <__aeabi_d2iz>
 8015c62:	4680      	mov	r8, r0
 8015c64:	f7ea fc8e 	bl	8000584 <__aeabi_i2d>
 8015c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c6c:	f7ea fcf4 	bl	8000658 <__aeabi_dmul>
 8015c70:	4602      	mov	r2, r0
 8015c72:	460b      	mov	r3, r1
 8015c74:	4620      	mov	r0, r4
 8015c76:	4629      	mov	r1, r5
 8015c78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015c7c:	f7ea fb34 	bl	80002e8 <__aeabi_dsub>
 8015c80:	f806 4b01 	strb.w	r4, [r6], #1
 8015c84:	9d07      	ldr	r5, [sp, #28]
 8015c86:	eba6 040a 	sub.w	r4, r6, sl
 8015c8a:	42a5      	cmp	r5, r4
 8015c8c:	4602      	mov	r2, r0
 8015c8e:	460b      	mov	r3, r1
 8015c90:	f040 8117 	bne.w	8015ec2 <_dtoa_r+0x6e2>
 8015c94:	f7ea fb2a 	bl	80002ec <__adddf3>
 8015c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c9c:	4604      	mov	r4, r0
 8015c9e:	460d      	mov	r5, r1
 8015ca0:	f7ea ff6a 	bl	8000b78 <__aeabi_dcmpgt>
 8015ca4:	2800      	cmp	r0, #0
 8015ca6:	f040 80f9 	bne.w	8015e9c <_dtoa_r+0x6bc>
 8015caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cae:	4620      	mov	r0, r4
 8015cb0:	4629      	mov	r1, r5
 8015cb2:	f7ea ff39 	bl	8000b28 <__aeabi_dcmpeq>
 8015cb6:	b118      	cbz	r0, 8015cc0 <_dtoa_r+0x4e0>
 8015cb8:	f018 0f01 	tst.w	r8, #1
 8015cbc:	f040 80ee 	bne.w	8015e9c <_dtoa_r+0x6bc>
 8015cc0:	4649      	mov	r1, r9
 8015cc2:	4658      	mov	r0, fp
 8015cc4:	f000 fbda 	bl	801647c <_Bfree>
 8015cc8:	2300      	movs	r3, #0
 8015cca:	7033      	strb	r3, [r6, #0]
 8015ccc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015cce:	3701      	adds	r7, #1
 8015cd0:	601f      	str	r7, [r3, #0]
 8015cd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f000 831d 	beq.w	8016314 <_dtoa_r+0xb34>
 8015cda:	601e      	str	r6, [r3, #0]
 8015cdc:	e31a      	b.n	8016314 <_dtoa_r+0xb34>
 8015cde:	07e2      	lsls	r2, r4, #31
 8015ce0:	d505      	bpl.n	8015cee <_dtoa_r+0x50e>
 8015ce2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015ce6:	f7ea fcb7 	bl	8000658 <__aeabi_dmul>
 8015cea:	3601      	adds	r6, #1
 8015cec:	2301      	movs	r3, #1
 8015cee:	1064      	asrs	r4, r4, #1
 8015cf0:	3508      	adds	r5, #8
 8015cf2:	e73f      	b.n	8015b74 <_dtoa_r+0x394>
 8015cf4:	2602      	movs	r6, #2
 8015cf6:	e742      	b.n	8015b7e <_dtoa_r+0x39e>
 8015cf8:	9c07      	ldr	r4, [sp, #28]
 8015cfa:	9704      	str	r7, [sp, #16]
 8015cfc:	e761      	b.n	8015bc2 <_dtoa_r+0x3e2>
 8015cfe:	4b27      	ldr	r3, [pc, #156]	@ (8015d9c <_dtoa_r+0x5bc>)
 8015d00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015d02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015d06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015d0a:	4454      	add	r4, sl
 8015d0c:	2900      	cmp	r1, #0
 8015d0e:	d053      	beq.n	8015db8 <_dtoa_r+0x5d8>
 8015d10:	4928      	ldr	r1, [pc, #160]	@ (8015db4 <_dtoa_r+0x5d4>)
 8015d12:	2000      	movs	r0, #0
 8015d14:	f7ea fdca 	bl	80008ac <__aeabi_ddiv>
 8015d18:	4633      	mov	r3, r6
 8015d1a:	462a      	mov	r2, r5
 8015d1c:	f7ea fae4 	bl	80002e8 <__aeabi_dsub>
 8015d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015d24:	4656      	mov	r6, sl
 8015d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d2a:	f7ea ff45 	bl	8000bb8 <__aeabi_d2iz>
 8015d2e:	4605      	mov	r5, r0
 8015d30:	f7ea fc28 	bl	8000584 <__aeabi_i2d>
 8015d34:	4602      	mov	r2, r0
 8015d36:	460b      	mov	r3, r1
 8015d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d3c:	f7ea fad4 	bl	80002e8 <__aeabi_dsub>
 8015d40:	3530      	adds	r5, #48	@ 0x30
 8015d42:	4602      	mov	r2, r0
 8015d44:	460b      	mov	r3, r1
 8015d46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015d4a:	f806 5b01 	strb.w	r5, [r6], #1
 8015d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015d52:	f7ea fef3 	bl	8000b3c <__aeabi_dcmplt>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	d171      	bne.n	8015e3e <_dtoa_r+0x65e>
 8015d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d5e:	4911      	ldr	r1, [pc, #68]	@ (8015da4 <_dtoa_r+0x5c4>)
 8015d60:	2000      	movs	r0, #0
 8015d62:	f7ea fac1 	bl	80002e8 <__aeabi_dsub>
 8015d66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015d6a:	f7ea fee7 	bl	8000b3c <__aeabi_dcmplt>
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	f040 8095 	bne.w	8015e9e <_dtoa_r+0x6be>
 8015d74:	42a6      	cmp	r6, r4
 8015d76:	f43f af50 	beq.w	8015c1a <_dtoa_r+0x43a>
 8015d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8015da8 <_dtoa_r+0x5c8>)
 8015d80:	2200      	movs	r2, #0
 8015d82:	f7ea fc69 	bl	8000658 <__aeabi_dmul>
 8015d86:	4b08      	ldr	r3, [pc, #32]	@ (8015da8 <_dtoa_r+0x5c8>)
 8015d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d92:	f7ea fc61 	bl	8000658 <__aeabi_dmul>
 8015d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d9a:	e7c4      	b.n	8015d26 <_dtoa_r+0x546>
 8015d9c:	08018e40 	.word	0x08018e40
 8015da0:	08018e18 	.word	0x08018e18
 8015da4:	3ff00000 	.word	0x3ff00000
 8015da8:	40240000 	.word	0x40240000
 8015dac:	401c0000 	.word	0x401c0000
 8015db0:	40140000 	.word	0x40140000
 8015db4:	3fe00000 	.word	0x3fe00000
 8015db8:	4631      	mov	r1, r6
 8015dba:	4628      	mov	r0, r5
 8015dbc:	f7ea fc4c 	bl	8000658 <__aeabi_dmul>
 8015dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015dc4:	9415      	str	r4, [sp, #84]	@ 0x54
 8015dc6:	4656      	mov	r6, sl
 8015dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015dcc:	f7ea fef4 	bl	8000bb8 <__aeabi_d2iz>
 8015dd0:	4605      	mov	r5, r0
 8015dd2:	f7ea fbd7 	bl	8000584 <__aeabi_i2d>
 8015dd6:	4602      	mov	r2, r0
 8015dd8:	460b      	mov	r3, r1
 8015dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015dde:	f7ea fa83 	bl	80002e8 <__aeabi_dsub>
 8015de2:	3530      	adds	r5, #48	@ 0x30
 8015de4:	f806 5b01 	strb.w	r5, [r6], #1
 8015de8:	4602      	mov	r2, r0
 8015dea:	460b      	mov	r3, r1
 8015dec:	42a6      	cmp	r6, r4
 8015dee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015df2:	f04f 0200 	mov.w	r2, #0
 8015df6:	d124      	bne.n	8015e42 <_dtoa_r+0x662>
 8015df8:	4bac      	ldr	r3, [pc, #688]	@ (80160ac <_dtoa_r+0x8cc>)
 8015dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015dfe:	f7ea fa75 	bl	80002ec <__adddf3>
 8015e02:	4602      	mov	r2, r0
 8015e04:	460b      	mov	r3, r1
 8015e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e0a:	f7ea feb5 	bl	8000b78 <__aeabi_dcmpgt>
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	d145      	bne.n	8015e9e <_dtoa_r+0x6be>
 8015e12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015e16:	49a5      	ldr	r1, [pc, #660]	@ (80160ac <_dtoa_r+0x8cc>)
 8015e18:	2000      	movs	r0, #0
 8015e1a:	f7ea fa65 	bl	80002e8 <__aeabi_dsub>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	460b      	mov	r3, r1
 8015e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e26:	f7ea fe89 	bl	8000b3c <__aeabi_dcmplt>
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	f43f aef5 	beq.w	8015c1a <_dtoa_r+0x43a>
 8015e30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015e32:	1e73      	subs	r3, r6, #1
 8015e34:	9315      	str	r3, [sp, #84]	@ 0x54
 8015e36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015e3a:	2b30      	cmp	r3, #48	@ 0x30
 8015e3c:	d0f8      	beq.n	8015e30 <_dtoa_r+0x650>
 8015e3e:	9f04      	ldr	r7, [sp, #16]
 8015e40:	e73e      	b.n	8015cc0 <_dtoa_r+0x4e0>
 8015e42:	4b9b      	ldr	r3, [pc, #620]	@ (80160b0 <_dtoa_r+0x8d0>)
 8015e44:	f7ea fc08 	bl	8000658 <__aeabi_dmul>
 8015e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e4c:	e7bc      	b.n	8015dc8 <_dtoa_r+0x5e8>
 8015e4e:	d10c      	bne.n	8015e6a <_dtoa_r+0x68a>
 8015e50:	4b98      	ldr	r3, [pc, #608]	@ (80160b4 <_dtoa_r+0x8d4>)
 8015e52:	2200      	movs	r2, #0
 8015e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e58:	f7ea fbfe 	bl	8000658 <__aeabi_dmul>
 8015e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015e60:	f7ea fe80 	bl	8000b64 <__aeabi_dcmpge>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	f000 8157 	beq.w	8016118 <_dtoa_r+0x938>
 8015e6a:	2400      	movs	r4, #0
 8015e6c:	4625      	mov	r5, r4
 8015e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e70:	43db      	mvns	r3, r3
 8015e72:	9304      	str	r3, [sp, #16]
 8015e74:	4656      	mov	r6, sl
 8015e76:	2700      	movs	r7, #0
 8015e78:	4621      	mov	r1, r4
 8015e7a:	4658      	mov	r0, fp
 8015e7c:	f000 fafe 	bl	801647c <_Bfree>
 8015e80:	2d00      	cmp	r5, #0
 8015e82:	d0dc      	beq.n	8015e3e <_dtoa_r+0x65e>
 8015e84:	b12f      	cbz	r7, 8015e92 <_dtoa_r+0x6b2>
 8015e86:	42af      	cmp	r7, r5
 8015e88:	d003      	beq.n	8015e92 <_dtoa_r+0x6b2>
 8015e8a:	4639      	mov	r1, r7
 8015e8c:	4658      	mov	r0, fp
 8015e8e:	f000 faf5 	bl	801647c <_Bfree>
 8015e92:	4629      	mov	r1, r5
 8015e94:	4658      	mov	r0, fp
 8015e96:	f000 faf1 	bl	801647c <_Bfree>
 8015e9a:	e7d0      	b.n	8015e3e <_dtoa_r+0x65e>
 8015e9c:	9704      	str	r7, [sp, #16]
 8015e9e:	4633      	mov	r3, r6
 8015ea0:	461e      	mov	r6, r3
 8015ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015ea6:	2a39      	cmp	r2, #57	@ 0x39
 8015ea8:	d107      	bne.n	8015eba <_dtoa_r+0x6da>
 8015eaa:	459a      	cmp	sl, r3
 8015eac:	d1f8      	bne.n	8015ea0 <_dtoa_r+0x6c0>
 8015eae:	9a04      	ldr	r2, [sp, #16]
 8015eb0:	3201      	adds	r2, #1
 8015eb2:	9204      	str	r2, [sp, #16]
 8015eb4:	2230      	movs	r2, #48	@ 0x30
 8015eb6:	f88a 2000 	strb.w	r2, [sl]
 8015eba:	781a      	ldrb	r2, [r3, #0]
 8015ebc:	3201      	adds	r2, #1
 8015ebe:	701a      	strb	r2, [r3, #0]
 8015ec0:	e7bd      	b.n	8015e3e <_dtoa_r+0x65e>
 8015ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80160b0 <_dtoa_r+0x8d0>)
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	f7ea fbc7 	bl	8000658 <__aeabi_dmul>
 8015eca:	2200      	movs	r2, #0
 8015ecc:	2300      	movs	r3, #0
 8015ece:	4604      	mov	r4, r0
 8015ed0:	460d      	mov	r5, r1
 8015ed2:	f7ea fe29 	bl	8000b28 <__aeabi_dcmpeq>
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	f43f aebb 	beq.w	8015c52 <_dtoa_r+0x472>
 8015edc:	e6f0      	b.n	8015cc0 <_dtoa_r+0x4e0>
 8015ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015ee0:	2a00      	cmp	r2, #0
 8015ee2:	f000 80db 	beq.w	801609c <_dtoa_r+0x8bc>
 8015ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ee8:	2a01      	cmp	r2, #1
 8015eea:	f300 80bf 	bgt.w	801606c <_dtoa_r+0x88c>
 8015eee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015ef0:	2a00      	cmp	r2, #0
 8015ef2:	f000 80b7 	beq.w	8016064 <_dtoa_r+0x884>
 8015ef6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015efa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015efc:	4646      	mov	r6, r8
 8015efe:	9a08      	ldr	r2, [sp, #32]
 8015f00:	2101      	movs	r1, #1
 8015f02:	441a      	add	r2, r3
 8015f04:	4658      	mov	r0, fp
 8015f06:	4498      	add	r8, r3
 8015f08:	9208      	str	r2, [sp, #32]
 8015f0a:	f000 fb6b 	bl	80165e4 <__i2b>
 8015f0e:	4605      	mov	r5, r0
 8015f10:	b15e      	cbz	r6, 8015f2a <_dtoa_r+0x74a>
 8015f12:	9b08      	ldr	r3, [sp, #32]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	dd08      	ble.n	8015f2a <_dtoa_r+0x74a>
 8015f18:	42b3      	cmp	r3, r6
 8015f1a:	9a08      	ldr	r2, [sp, #32]
 8015f1c:	bfa8      	it	ge
 8015f1e:	4633      	movge	r3, r6
 8015f20:	eba8 0803 	sub.w	r8, r8, r3
 8015f24:	1af6      	subs	r6, r6, r3
 8015f26:	1ad3      	subs	r3, r2, r3
 8015f28:	9308      	str	r3, [sp, #32]
 8015f2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f2c:	b1f3      	cbz	r3, 8015f6c <_dtoa_r+0x78c>
 8015f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	f000 80b7 	beq.w	80160a4 <_dtoa_r+0x8c4>
 8015f36:	b18c      	cbz	r4, 8015f5c <_dtoa_r+0x77c>
 8015f38:	4629      	mov	r1, r5
 8015f3a:	4622      	mov	r2, r4
 8015f3c:	4658      	mov	r0, fp
 8015f3e:	f000 fc11 	bl	8016764 <__pow5mult>
 8015f42:	464a      	mov	r2, r9
 8015f44:	4601      	mov	r1, r0
 8015f46:	4605      	mov	r5, r0
 8015f48:	4658      	mov	r0, fp
 8015f4a:	f000 fb61 	bl	8016610 <__multiply>
 8015f4e:	4649      	mov	r1, r9
 8015f50:	9004      	str	r0, [sp, #16]
 8015f52:	4658      	mov	r0, fp
 8015f54:	f000 fa92 	bl	801647c <_Bfree>
 8015f58:	9b04      	ldr	r3, [sp, #16]
 8015f5a:	4699      	mov	r9, r3
 8015f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f5e:	1b1a      	subs	r2, r3, r4
 8015f60:	d004      	beq.n	8015f6c <_dtoa_r+0x78c>
 8015f62:	4649      	mov	r1, r9
 8015f64:	4658      	mov	r0, fp
 8015f66:	f000 fbfd 	bl	8016764 <__pow5mult>
 8015f6a:	4681      	mov	r9, r0
 8015f6c:	2101      	movs	r1, #1
 8015f6e:	4658      	mov	r0, fp
 8015f70:	f000 fb38 	bl	80165e4 <__i2b>
 8015f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f76:	4604      	mov	r4, r0
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	f000 81cf 	beq.w	801631c <_dtoa_r+0xb3c>
 8015f7e:	461a      	mov	r2, r3
 8015f80:	4601      	mov	r1, r0
 8015f82:	4658      	mov	r0, fp
 8015f84:	f000 fbee 	bl	8016764 <__pow5mult>
 8015f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f8a:	2b01      	cmp	r3, #1
 8015f8c:	4604      	mov	r4, r0
 8015f8e:	f300 8095 	bgt.w	80160bc <_dtoa_r+0x8dc>
 8015f92:	9b02      	ldr	r3, [sp, #8]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f040 8087 	bne.w	80160a8 <_dtoa_r+0x8c8>
 8015f9a:	9b03      	ldr	r3, [sp, #12]
 8015f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	f040 8089 	bne.w	80160b8 <_dtoa_r+0x8d8>
 8015fa6:	9b03      	ldr	r3, [sp, #12]
 8015fa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015fac:	0d1b      	lsrs	r3, r3, #20
 8015fae:	051b      	lsls	r3, r3, #20
 8015fb0:	b12b      	cbz	r3, 8015fbe <_dtoa_r+0x7de>
 8015fb2:	9b08      	ldr	r3, [sp, #32]
 8015fb4:	3301      	adds	r3, #1
 8015fb6:	9308      	str	r3, [sp, #32]
 8015fb8:	f108 0801 	add.w	r8, r8, #1
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8015fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	f000 81b0 	beq.w	8016328 <_dtoa_r+0xb48>
 8015fc8:	6923      	ldr	r3, [r4, #16]
 8015fca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015fce:	6918      	ldr	r0, [r3, #16]
 8015fd0:	f000 fabc 	bl	801654c <__hi0bits>
 8015fd4:	f1c0 0020 	rsb	r0, r0, #32
 8015fd8:	9b08      	ldr	r3, [sp, #32]
 8015fda:	4418      	add	r0, r3
 8015fdc:	f010 001f 	ands.w	r0, r0, #31
 8015fe0:	d077      	beq.n	80160d2 <_dtoa_r+0x8f2>
 8015fe2:	f1c0 0320 	rsb	r3, r0, #32
 8015fe6:	2b04      	cmp	r3, #4
 8015fe8:	dd6b      	ble.n	80160c2 <_dtoa_r+0x8e2>
 8015fea:	9b08      	ldr	r3, [sp, #32]
 8015fec:	f1c0 001c 	rsb	r0, r0, #28
 8015ff0:	4403      	add	r3, r0
 8015ff2:	4480      	add	r8, r0
 8015ff4:	4406      	add	r6, r0
 8015ff6:	9308      	str	r3, [sp, #32]
 8015ff8:	f1b8 0f00 	cmp.w	r8, #0
 8015ffc:	dd05      	ble.n	801600a <_dtoa_r+0x82a>
 8015ffe:	4649      	mov	r1, r9
 8016000:	4642      	mov	r2, r8
 8016002:	4658      	mov	r0, fp
 8016004:	f000 fc08 	bl	8016818 <__lshift>
 8016008:	4681      	mov	r9, r0
 801600a:	9b08      	ldr	r3, [sp, #32]
 801600c:	2b00      	cmp	r3, #0
 801600e:	dd05      	ble.n	801601c <_dtoa_r+0x83c>
 8016010:	4621      	mov	r1, r4
 8016012:	461a      	mov	r2, r3
 8016014:	4658      	mov	r0, fp
 8016016:	f000 fbff 	bl	8016818 <__lshift>
 801601a:	4604      	mov	r4, r0
 801601c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801601e:	2b00      	cmp	r3, #0
 8016020:	d059      	beq.n	80160d6 <_dtoa_r+0x8f6>
 8016022:	4621      	mov	r1, r4
 8016024:	4648      	mov	r0, r9
 8016026:	f000 fc63 	bl	80168f0 <__mcmp>
 801602a:	2800      	cmp	r0, #0
 801602c:	da53      	bge.n	80160d6 <_dtoa_r+0x8f6>
 801602e:	1e7b      	subs	r3, r7, #1
 8016030:	9304      	str	r3, [sp, #16]
 8016032:	4649      	mov	r1, r9
 8016034:	2300      	movs	r3, #0
 8016036:	220a      	movs	r2, #10
 8016038:	4658      	mov	r0, fp
 801603a:	f000 fa41 	bl	80164c0 <__multadd>
 801603e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016040:	4681      	mov	r9, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	f000 8172 	beq.w	801632c <_dtoa_r+0xb4c>
 8016048:	2300      	movs	r3, #0
 801604a:	4629      	mov	r1, r5
 801604c:	220a      	movs	r2, #10
 801604e:	4658      	mov	r0, fp
 8016050:	f000 fa36 	bl	80164c0 <__multadd>
 8016054:	9b00      	ldr	r3, [sp, #0]
 8016056:	2b00      	cmp	r3, #0
 8016058:	4605      	mov	r5, r0
 801605a:	dc67      	bgt.n	801612c <_dtoa_r+0x94c>
 801605c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801605e:	2b02      	cmp	r3, #2
 8016060:	dc41      	bgt.n	80160e6 <_dtoa_r+0x906>
 8016062:	e063      	b.n	801612c <_dtoa_r+0x94c>
 8016064:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016066:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801606a:	e746      	b.n	8015efa <_dtoa_r+0x71a>
 801606c:	9b07      	ldr	r3, [sp, #28]
 801606e:	1e5c      	subs	r4, r3, #1
 8016070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016072:	42a3      	cmp	r3, r4
 8016074:	bfbf      	itttt	lt
 8016076:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016078:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801607a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801607c:	1ae3      	sublt	r3, r4, r3
 801607e:	bfb4      	ite	lt
 8016080:	18d2      	addlt	r2, r2, r3
 8016082:	1b1c      	subge	r4, r3, r4
 8016084:	9b07      	ldr	r3, [sp, #28]
 8016086:	bfbc      	itt	lt
 8016088:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801608a:	2400      	movlt	r4, #0
 801608c:	2b00      	cmp	r3, #0
 801608e:	bfb5      	itete	lt
 8016090:	eba8 0603 	sublt.w	r6, r8, r3
 8016094:	9b07      	ldrge	r3, [sp, #28]
 8016096:	2300      	movlt	r3, #0
 8016098:	4646      	movge	r6, r8
 801609a:	e730      	b.n	8015efe <_dtoa_r+0x71e>
 801609c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801609e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80160a0:	4646      	mov	r6, r8
 80160a2:	e735      	b.n	8015f10 <_dtoa_r+0x730>
 80160a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80160a6:	e75c      	b.n	8015f62 <_dtoa_r+0x782>
 80160a8:	2300      	movs	r3, #0
 80160aa:	e788      	b.n	8015fbe <_dtoa_r+0x7de>
 80160ac:	3fe00000 	.word	0x3fe00000
 80160b0:	40240000 	.word	0x40240000
 80160b4:	40140000 	.word	0x40140000
 80160b8:	9b02      	ldr	r3, [sp, #8]
 80160ba:	e780      	b.n	8015fbe <_dtoa_r+0x7de>
 80160bc:	2300      	movs	r3, #0
 80160be:	930a      	str	r3, [sp, #40]	@ 0x28
 80160c0:	e782      	b.n	8015fc8 <_dtoa_r+0x7e8>
 80160c2:	d099      	beq.n	8015ff8 <_dtoa_r+0x818>
 80160c4:	9a08      	ldr	r2, [sp, #32]
 80160c6:	331c      	adds	r3, #28
 80160c8:	441a      	add	r2, r3
 80160ca:	4498      	add	r8, r3
 80160cc:	441e      	add	r6, r3
 80160ce:	9208      	str	r2, [sp, #32]
 80160d0:	e792      	b.n	8015ff8 <_dtoa_r+0x818>
 80160d2:	4603      	mov	r3, r0
 80160d4:	e7f6      	b.n	80160c4 <_dtoa_r+0x8e4>
 80160d6:	9b07      	ldr	r3, [sp, #28]
 80160d8:	9704      	str	r7, [sp, #16]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	dc20      	bgt.n	8016120 <_dtoa_r+0x940>
 80160de:	9300      	str	r3, [sp, #0]
 80160e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160e2:	2b02      	cmp	r3, #2
 80160e4:	dd1e      	ble.n	8016124 <_dtoa_r+0x944>
 80160e6:	9b00      	ldr	r3, [sp, #0]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	f47f aec0 	bne.w	8015e6e <_dtoa_r+0x68e>
 80160ee:	4621      	mov	r1, r4
 80160f0:	2205      	movs	r2, #5
 80160f2:	4658      	mov	r0, fp
 80160f4:	f000 f9e4 	bl	80164c0 <__multadd>
 80160f8:	4601      	mov	r1, r0
 80160fa:	4604      	mov	r4, r0
 80160fc:	4648      	mov	r0, r9
 80160fe:	f000 fbf7 	bl	80168f0 <__mcmp>
 8016102:	2800      	cmp	r0, #0
 8016104:	f77f aeb3 	ble.w	8015e6e <_dtoa_r+0x68e>
 8016108:	4656      	mov	r6, sl
 801610a:	2331      	movs	r3, #49	@ 0x31
 801610c:	f806 3b01 	strb.w	r3, [r6], #1
 8016110:	9b04      	ldr	r3, [sp, #16]
 8016112:	3301      	adds	r3, #1
 8016114:	9304      	str	r3, [sp, #16]
 8016116:	e6ae      	b.n	8015e76 <_dtoa_r+0x696>
 8016118:	9c07      	ldr	r4, [sp, #28]
 801611a:	9704      	str	r7, [sp, #16]
 801611c:	4625      	mov	r5, r4
 801611e:	e7f3      	b.n	8016108 <_dtoa_r+0x928>
 8016120:	9b07      	ldr	r3, [sp, #28]
 8016122:	9300      	str	r3, [sp, #0]
 8016124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016126:	2b00      	cmp	r3, #0
 8016128:	f000 8104 	beq.w	8016334 <_dtoa_r+0xb54>
 801612c:	2e00      	cmp	r6, #0
 801612e:	dd05      	ble.n	801613c <_dtoa_r+0x95c>
 8016130:	4629      	mov	r1, r5
 8016132:	4632      	mov	r2, r6
 8016134:	4658      	mov	r0, fp
 8016136:	f000 fb6f 	bl	8016818 <__lshift>
 801613a:	4605      	mov	r5, r0
 801613c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801613e:	2b00      	cmp	r3, #0
 8016140:	d05a      	beq.n	80161f8 <_dtoa_r+0xa18>
 8016142:	6869      	ldr	r1, [r5, #4]
 8016144:	4658      	mov	r0, fp
 8016146:	f000 f959 	bl	80163fc <_Balloc>
 801614a:	4606      	mov	r6, r0
 801614c:	b928      	cbnz	r0, 801615a <_dtoa_r+0x97a>
 801614e:	4b84      	ldr	r3, [pc, #528]	@ (8016360 <_dtoa_r+0xb80>)
 8016150:	4602      	mov	r2, r0
 8016152:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016156:	f7ff bb5a 	b.w	801580e <_dtoa_r+0x2e>
 801615a:	692a      	ldr	r2, [r5, #16]
 801615c:	3202      	adds	r2, #2
 801615e:	0092      	lsls	r2, r2, #2
 8016160:	f105 010c 	add.w	r1, r5, #12
 8016164:	300c      	adds	r0, #12
 8016166:	f7ff faa4 	bl	80156b2 <memcpy>
 801616a:	2201      	movs	r2, #1
 801616c:	4631      	mov	r1, r6
 801616e:	4658      	mov	r0, fp
 8016170:	f000 fb52 	bl	8016818 <__lshift>
 8016174:	f10a 0301 	add.w	r3, sl, #1
 8016178:	9307      	str	r3, [sp, #28]
 801617a:	9b00      	ldr	r3, [sp, #0]
 801617c:	4453      	add	r3, sl
 801617e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016180:	9b02      	ldr	r3, [sp, #8]
 8016182:	f003 0301 	and.w	r3, r3, #1
 8016186:	462f      	mov	r7, r5
 8016188:	930a      	str	r3, [sp, #40]	@ 0x28
 801618a:	4605      	mov	r5, r0
 801618c:	9b07      	ldr	r3, [sp, #28]
 801618e:	4621      	mov	r1, r4
 8016190:	3b01      	subs	r3, #1
 8016192:	4648      	mov	r0, r9
 8016194:	9300      	str	r3, [sp, #0]
 8016196:	f7ff fa9a 	bl	80156ce <quorem>
 801619a:	4639      	mov	r1, r7
 801619c:	9002      	str	r0, [sp, #8]
 801619e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80161a2:	4648      	mov	r0, r9
 80161a4:	f000 fba4 	bl	80168f0 <__mcmp>
 80161a8:	462a      	mov	r2, r5
 80161aa:	9008      	str	r0, [sp, #32]
 80161ac:	4621      	mov	r1, r4
 80161ae:	4658      	mov	r0, fp
 80161b0:	f000 fbba 	bl	8016928 <__mdiff>
 80161b4:	68c2      	ldr	r2, [r0, #12]
 80161b6:	4606      	mov	r6, r0
 80161b8:	bb02      	cbnz	r2, 80161fc <_dtoa_r+0xa1c>
 80161ba:	4601      	mov	r1, r0
 80161bc:	4648      	mov	r0, r9
 80161be:	f000 fb97 	bl	80168f0 <__mcmp>
 80161c2:	4602      	mov	r2, r0
 80161c4:	4631      	mov	r1, r6
 80161c6:	4658      	mov	r0, fp
 80161c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80161ca:	f000 f957 	bl	801647c <_Bfree>
 80161ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80161d2:	9e07      	ldr	r6, [sp, #28]
 80161d4:	ea43 0102 	orr.w	r1, r3, r2
 80161d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80161da:	4319      	orrs	r1, r3
 80161dc:	d110      	bne.n	8016200 <_dtoa_r+0xa20>
 80161de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80161e2:	d029      	beq.n	8016238 <_dtoa_r+0xa58>
 80161e4:	9b08      	ldr	r3, [sp, #32]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	dd02      	ble.n	80161f0 <_dtoa_r+0xa10>
 80161ea:	9b02      	ldr	r3, [sp, #8]
 80161ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80161f0:	9b00      	ldr	r3, [sp, #0]
 80161f2:	f883 8000 	strb.w	r8, [r3]
 80161f6:	e63f      	b.n	8015e78 <_dtoa_r+0x698>
 80161f8:	4628      	mov	r0, r5
 80161fa:	e7bb      	b.n	8016174 <_dtoa_r+0x994>
 80161fc:	2201      	movs	r2, #1
 80161fe:	e7e1      	b.n	80161c4 <_dtoa_r+0x9e4>
 8016200:	9b08      	ldr	r3, [sp, #32]
 8016202:	2b00      	cmp	r3, #0
 8016204:	db04      	blt.n	8016210 <_dtoa_r+0xa30>
 8016206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016208:	430b      	orrs	r3, r1
 801620a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801620c:	430b      	orrs	r3, r1
 801620e:	d120      	bne.n	8016252 <_dtoa_r+0xa72>
 8016210:	2a00      	cmp	r2, #0
 8016212:	dded      	ble.n	80161f0 <_dtoa_r+0xa10>
 8016214:	4649      	mov	r1, r9
 8016216:	2201      	movs	r2, #1
 8016218:	4658      	mov	r0, fp
 801621a:	f000 fafd 	bl	8016818 <__lshift>
 801621e:	4621      	mov	r1, r4
 8016220:	4681      	mov	r9, r0
 8016222:	f000 fb65 	bl	80168f0 <__mcmp>
 8016226:	2800      	cmp	r0, #0
 8016228:	dc03      	bgt.n	8016232 <_dtoa_r+0xa52>
 801622a:	d1e1      	bne.n	80161f0 <_dtoa_r+0xa10>
 801622c:	f018 0f01 	tst.w	r8, #1
 8016230:	d0de      	beq.n	80161f0 <_dtoa_r+0xa10>
 8016232:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016236:	d1d8      	bne.n	80161ea <_dtoa_r+0xa0a>
 8016238:	9a00      	ldr	r2, [sp, #0]
 801623a:	2339      	movs	r3, #57	@ 0x39
 801623c:	7013      	strb	r3, [r2, #0]
 801623e:	4633      	mov	r3, r6
 8016240:	461e      	mov	r6, r3
 8016242:	3b01      	subs	r3, #1
 8016244:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016248:	2a39      	cmp	r2, #57	@ 0x39
 801624a:	d052      	beq.n	80162f2 <_dtoa_r+0xb12>
 801624c:	3201      	adds	r2, #1
 801624e:	701a      	strb	r2, [r3, #0]
 8016250:	e612      	b.n	8015e78 <_dtoa_r+0x698>
 8016252:	2a00      	cmp	r2, #0
 8016254:	dd07      	ble.n	8016266 <_dtoa_r+0xa86>
 8016256:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801625a:	d0ed      	beq.n	8016238 <_dtoa_r+0xa58>
 801625c:	9a00      	ldr	r2, [sp, #0]
 801625e:	f108 0301 	add.w	r3, r8, #1
 8016262:	7013      	strb	r3, [r2, #0]
 8016264:	e608      	b.n	8015e78 <_dtoa_r+0x698>
 8016266:	9b07      	ldr	r3, [sp, #28]
 8016268:	9a07      	ldr	r2, [sp, #28]
 801626a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801626e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016270:	4293      	cmp	r3, r2
 8016272:	d028      	beq.n	80162c6 <_dtoa_r+0xae6>
 8016274:	4649      	mov	r1, r9
 8016276:	2300      	movs	r3, #0
 8016278:	220a      	movs	r2, #10
 801627a:	4658      	mov	r0, fp
 801627c:	f000 f920 	bl	80164c0 <__multadd>
 8016280:	42af      	cmp	r7, r5
 8016282:	4681      	mov	r9, r0
 8016284:	f04f 0300 	mov.w	r3, #0
 8016288:	f04f 020a 	mov.w	r2, #10
 801628c:	4639      	mov	r1, r7
 801628e:	4658      	mov	r0, fp
 8016290:	d107      	bne.n	80162a2 <_dtoa_r+0xac2>
 8016292:	f000 f915 	bl	80164c0 <__multadd>
 8016296:	4607      	mov	r7, r0
 8016298:	4605      	mov	r5, r0
 801629a:	9b07      	ldr	r3, [sp, #28]
 801629c:	3301      	adds	r3, #1
 801629e:	9307      	str	r3, [sp, #28]
 80162a0:	e774      	b.n	801618c <_dtoa_r+0x9ac>
 80162a2:	f000 f90d 	bl	80164c0 <__multadd>
 80162a6:	4629      	mov	r1, r5
 80162a8:	4607      	mov	r7, r0
 80162aa:	2300      	movs	r3, #0
 80162ac:	220a      	movs	r2, #10
 80162ae:	4658      	mov	r0, fp
 80162b0:	f000 f906 	bl	80164c0 <__multadd>
 80162b4:	4605      	mov	r5, r0
 80162b6:	e7f0      	b.n	801629a <_dtoa_r+0xaba>
 80162b8:	9b00      	ldr	r3, [sp, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	bfcc      	ite	gt
 80162be:	461e      	movgt	r6, r3
 80162c0:	2601      	movle	r6, #1
 80162c2:	4456      	add	r6, sl
 80162c4:	2700      	movs	r7, #0
 80162c6:	4649      	mov	r1, r9
 80162c8:	2201      	movs	r2, #1
 80162ca:	4658      	mov	r0, fp
 80162cc:	f000 faa4 	bl	8016818 <__lshift>
 80162d0:	4621      	mov	r1, r4
 80162d2:	4681      	mov	r9, r0
 80162d4:	f000 fb0c 	bl	80168f0 <__mcmp>
 80162d8:	2800      	cmp	r0, #0
 80162da:	dcb0      	bgt.n	801623e <_dtoa_r+0xa5e>
 80162dc:	d102      	bne.n	80162e4 <_dtoa_r+0xb04>
 80162de:	f018 0f01 	tst.w	r8, #1
 80162e2:	d1ac      	bne.n	801623e <_dtoa_r+0xa5e>
 80162e4:	4633      	mov	r3, r6
 80162e6:	461e      	mov	r6, r3
 80162e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80162ec:	2a30      	cmp	r2, #48	@ 0x30
 80162ee:	d0fa      	beq.n	80162e6 <_dtoa_r+0xb06>
 80162f0:	e5c2      	b.n	8015e78 <_dtoa_r+0x698>
 80162f2:	459a      	cmp	sl, r3
 80162f4:	d1a4      	bne.n	8016240 <_dtoa_r+0xa60>
 80162f6:	9b04      	ldr	r3, [sp, #16]
 80162f8:	3301      	adds	r3, #1
 80162fa:	9304      	str	r3, [sp, #16]
 80162fc:	2331      	movs	r3, #49	@ 0x31
 80162fe:	f88a 3000 	strb.w	r3, [sl]
 8016302:	e5b9      	b.n	8015e78 <_dtoa_r+0x698>
 8016304:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016306:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8016364 <_dtoa_r+0xb84>
 801630a:	b11b      	cbz	r3, 8016314 <_dtoa_r+0xb34>
 801630c:	f10a 0308 	add.w	r3, sl, #8
 8016310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016312:	6013      	str	r3, [r2, #0]
 8016314:	4650      	mov	r0, sl
 8016316:	b019      	add	sp, #100	@ 0x64
 8016318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801631c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801631e:	2b01      	cmp	r3, #1
 8016320:	f77f ae37 	ble.w	8015f92 <_dtoa_r+0x7b2>
 8016324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016326:	930a      	str	r3, [sp, #40]	@ 0x28
 8016328:	2001      	movs	r0, #1
 801632a:	e655      	b.n	8015fd8 <_dtoa_r+0x7f8>
 801632c:	9b00      	ldr	r3, [sp, #0]
 801632e:	2b00      	cmp	r3, #0
 8016330:	f77f aed6 	ble.w	80160e0 <_dtoa_r+0x900>
 8016334:	4656      	mov	r6, sl
 8016336:	4621      	mov	r1, r4
 8016338:	4648      	mov	r0, r9
 801633a:	f7ff f9c8 	bl	80156ce <quorem>
 801633e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016342:	f806 8b01 	strb.w	r8, [r6], #1
 8016346:	9b00      	ldr	r3, [sp, #0]
 8016348:	eba6 020a 	sub.w	r2, r6, sl
 801634c:	4293      	cmp	r3, r2
 801634e:	ddb3      	ble.n	80162b8 <_dtoa_r+0xad8>
 8016350:	4649      	mov	r1, r9
 8016352:	2300      	movs	r3, #0
 8016354:	220a      	movs	r2, #10
 8016356:	4658      	mov	r0, fp
 8016358:	f000 f8b2 	bl	80164c0 <__multadd>
 801635c:	4681      	mov	r9, r0
 801635e:	e7ea      	b.n	8016336 <_dtoa_r+0xb56>
 8016360:	08018da0 	.word	0x08018da0
 8016364:	08018d24 	.word	0x08018d24

08016368 <_free_r>:
 8016368:	b538      	push	{r3, r4, r5, lr}
 801636a:	4605      	mov	r5, r0
 801636c:	2900      	cmp	r1, #0
 801636e:	d041      	beq.n	80163f4 <_free_r+0x8c>
 8016370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016374:	1f0c      	subs	r4, r1, #4
 8016376:	2b00      	cmp	r3, #0
 8016378:	bfb8      	it	lt
 801637a:	18e4      	addlt	r4, r4, r3
 801637c:	f7fe fb2e 	bl	80149dc <__malloc_lock>
 8016380:	4a1d      	ldr	r2, [pc, #116]	@ (80163f8 <_free_r+0x90>)
 8016382:	6813      	ldr	r3, [r2, #0]
 8016384:	b933      	cbnz	r3, 8016394 <_free_r+0x2c>
 8016386:	6063      	str	r3, [r4, #4]
 8016388:	6014      	str	r4, [r2, #0]
 801638a:	4628      	mov	r0, r5
 801638c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016390:	f7fe bb2a 	b.w	80149e8 <__malloc_unlock>
 8016394:	42a3      	cmp	r3, r4
 8016396:	d908      	bls.n	80163aa <_free_r+0x42>
 8016398:	6820      	ldr	r0, [r4, #0]
 801639a:	1821      	adds	r1, r4, r0
 801639c:	428b      	cmp	r3, r1
 801639e:	bf01      	itttt	eq
 80163a0:	6819      	ldreq	r1, [r3, #0]
 80163a2:	685b      	ldreq	r3, [r3, #4]
 80163a4:	1809      	addeq	r1, r1, r0
 80163a6:	6021      	streq	r1, [r4, #0]
 80163a8:	e7ed      	b.n	8016386 <_free_r+0x1e>
 80163aa:	461a      	mov	r2, r3
 80163ac:	685b      	ldr	r3, [r3, #4]
 80163ae:	b10b      	cbz	r3, 80163b4 <_free_r+0x4c>
 80163b0:	42a3      	cmp	r3, r4
 80163b2:	d9fa      	bls.n	80163aa <_free_r+0x42>
 80163b4:	6811      	ldr	r1, [r2, #0]
 80163b6:	1850      	adds	r0, r2, r1
 80163b8:	42a0      	cmp	r0, r4
 80163ba:	d10b      	bne.n	80163d4 <_free_r+0x6c>
 80163bc:	6820      	ldr	r0, [r4, #0]
 80163be:	4401      	add	r1, r0
 80163c0:	1850      	adds	r0, r2, r1
 80163c2:	4283      	cmp	r3, r0
 80163c4:	6011      	str	r1, [r2, #0]
 80163c6:	d1e0      	bne.n	801638a <_free_r+0x22>
 80163c8:	6818      	ldr	r0, [r3, #0]
 80163ca:	685b      	ldr	r3, [r3, #4]
 80163cc:	6053      	str	r3, [r2, #4]
 80163ce:	4408      	add	r0, r1
 80163d0:	6010      	str	r0, [r2, #0]
 80163d2:	e7da      	b.n	801638a <_free_r+0x22>
 80163d4:	d902      	bls.n	80163dc <_free_r+0x74>
 80163d6:	230c      	movs	r3, #12
 80163d8:	602b      	str	r3, [r5, #0]
 80163da:	e7d6      	b.n	801638a <_free_r+0x22>
 80163dc:	6820      	ldr	r0, [r4, #0]
 80163de:	1821      	adds	r1, r4, r0
 80163e0:	428b      	cmp	r3, r1
 80163e2:	bf04      	itt	eq
 80163e4:	6819      	ldreq	r1, [r3, #0]
 80163e6:	685b      	ldreq	r3, [r3, #4]
 80163e8:	6063      	str	r3, [r4, #4]
 80163ea:	bf04      	itt	eq
 80163ec:	1809      	addeq	r1, r1, r0
 80163ee:	6021      	streq	r1, [r4, #0]
 80163f0:	6054      	str	r4, [r2, #4]
 80163f2:	e7ca      	b.n	801638a <_free_r+0x22>
 80163f4:	bd38      	pop	{r3, r4, r5, pc}
 80163f6:	bf00      	nop
 80163f8:	200005d8 	.word	0x200005d8

080163fc <_Balloc>:
 80163fc:	b570      	push	{r4, r5, r6, lr}
 80163fe:	69c6      	ldr	r6, [r0, #28]
 8016400:	4604      	mov	r4, r0
 8016402:	460d      	mov	r5, r1
 8016404:	b976      	cbnz	r6, 8016424 <_Balloc+0x28>
 8016406:	2010      	movs	r0, #16
 8016408:	f7fe fa36 	bl	8014878 <malloc>
 801640c:	4602      	mov	r2, r0
 801640e:	61e0      	str	r0, [r4, #28]
 8016410:	b920      	cbnz	r0, 801641c <_Balloc+0x20>
 8016412:	4b18      	ldr	r3, [pc, #96]	@ (8016474 <_Balloc+0x78>)
 8016414:	4818      	ldr	r0, [pc, #96]	@ (8016478 <_Balloc+0x7c>)
 8016416:	216b      	movs	r1, #107	@ 0x6b
 8016418:	f000 fd90 	bl	8016f3c <__assert_func>
 801641c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016420:	6006      	str	r6, [r0, #0]
 8016422:	60c6      	str	r6, [r0, #12]
 8016424:	69e6      	ldr	r6, [r4, #28]
 8016426:	68f3      	ldr	r3, [r6, #12]
 8016428:	b183      	cbz	r3, 801644c <_Balloc+0x50>
 801642a:	69e3      	ldr	r3, [r4, #28]
 801642c:	68db      	ldr	r3, [r3, #12]
 801642e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016432:	b9b8      	cbnz	r0, 8016464 <_Balloc+0x68>
 8016434:	2101      	movs	r1, #1
 8016436:	fa01 f605 	lsl.w	r6, r1, r5
 801643a:	1d72      	adds	r2, r6, #5
 801643c:	0092      	lsls	r2, r2, #2
 801643e:	4620      	mov	r0, r4
 8016440:	f000 fd9a 	bl	8016f78 <_calloc_r>
 8016444:	b160      	cbz	r0, 8016460 <_Balloc+0x64>
 8016446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801644a:	e00e      	b.n	801646a <_Balloc+0x6e>
 801644c:	2221      	movs	r2, #33	@ 0x21
 801644e:	2104      	movs	r1, #4
 8016450:	4620      	mov	r0, r4
 8016452:	f000 fd91 	bl	8016f78 <_calloc_r>
 8016456:	69e3      	ldr	r3, [r4, #28]
 8016458:	60f0      	str	r0, [r6, #12]
 801645a:	68db      	ldr	r3, [r3, #12]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d1e4      	bne.n	801642a <_Balloc+0x2e>
 8016460:	2000      	movs	r0, #0
 8016462:	bd70      	pop	{r4, r5, r6, pc}
 8016464:	6802      	ldr	r2, [r0, #0]
 8016466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801646a:	2300      	movs	r3, #0
 801646c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016470:	e7f7      	b.n	8016462 <_Balloc+0x66>
 8016472:	bf00      	nop
 8016474:	08018d31 	.word	0x08018d31
 8016478:	08018db1 	.word	0x08018db1

0801647c <_Bfree>:
 801647c:	b570      	push	{r4, r5, r6, lr}
 801647e:	69c6      	ldr	r6, [r0, #28]
 8016480:	4605      	mov	r5, r0
 8016482:	460c      	mov	r4, r1
 8016484:	b976      	cbnz	r6, 80164a4 <_Bfree+0x28>
 8016486:	2010      	movs	r0, #16
 8016488:	f7fe f9f6 	bl	8014878 <malloc>
 801648c:	4602      	mov	r2, r0
 801648e:	61e8      	str	r0, [r5, #28]
 8016490:	b920      	cbnz	r0, 801649c <_Bfree+0x20>
 8016492:	4b09      	ldr	r3, [pc, #36]	@ (80164b8 <_Bfree+0x3c>)
 8016494:	4809      	ldr	r0, [pc, #36]	@ (80164bc <_Bfree+0x40>)
 8016496:	218f      	movs	r1, #143	@ 0x8f
 8016498:	f000 fd50 	bl	8016f3c <__assert_func>
 801649c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164a0:	6006      	str	r6, [r0, #0]
 80164a2:	60c6      	str	r6, [r0, #12]
 80164a4:	b13c      	cbz	r4, 80164b6 <_Bfree+0x3a>
 80164a6:	69eb      	ldr	r3, [r5, #28]
 80164a8:	6862      	ldr	r2, [r4, #4]
 80164aa:	68db      	ldr	r3, [r3, #12]
 80164ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80164b0:	6021      	str	r1, [r4, #0]
 80164b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80164b6:	bd70      	pop	{r4, r5, r6, pc}
 80164b8:	08018d31 	.word	0x08018d31
 80164bc:	08018db1 	.word	0x08018db1

080164c0 <__multadd>:
 80164c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164c4:	690d      	ldr	r5, [r1, #16]
 80164c6:	4607      	mov	r7, r0
 80164c8:	460c      	mov	r4, r1
 80164ca:	461e      	mov	r6, r3
 80164cc:	f101 0c14 	add.w	ip, r1, #20
 80164d0:	2000      	movs	r0, #0
 80164d2:	f8dc 3000 	ldr.w	r3, [ip]
 80164d6:	b299      	uxth	r1, r3
 80164d8:	fb02 6101 	mla	r1, r2, r1, r6
 80164dc:	0c1e      	lsrs	r6, r3, #16
 80164de:	0c0b      	lsrs	r3, r1, #16
 80164e0:	fb02 3306 	mla	r3, r2, r6, r3
 80164e4:	b289      	uxth	r1, r1
 80164e6:	3001      	adds	r0, #1
 80164e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80164ec:	4285      	cmp	r5, r0
 80164ee:	f84c 1b04 	str.w	r1, [ip], #4
 80164f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80164f6:	dcec      	bgt.n	80164d2 <__multadd+0x12>
 80164f8:	b30e      	cbz	r6, 801653e <__multadd+0x7e>
 80164fa:	68a3      	ldr	r3, [r4, #8]
 80164fc:	42ab      	cmp	r3, r5
 80164fe:	dc19      	bgt.n	8016534 <__multadd+0x74>
 8016500:	6861      	ldr	r1, [r4, #4]
 8016502:	4638      	mov	r0, r7
 8016504:	3101      	adds	r1, #1
 8016506:	f7ff ff79 	bl	80163fc <_Balloc>
 801650a:	4680      	mov	r8, r0
 801650c:	b928      	cbnz	r0, 801651a <__multadd+0x5a>
 801650e:	4602      	mov	r2, r0
 8016510:	4b0c      	ldr	r3, [pc, #48]	@ (8016544 <__multadd+0x84>)
 8016512:	480d      	ldr	r0, [pc, #52]	@ (8016548 <__multadd+0x88>)
 8016514:	21ba      	movs	r1, #186	@ 0xba
 8016516:	f000 fd11 	bl	8016f3c <__assert_func>
 801651a:	6922      	ldr	r2, [r4, #16]
 801651c:	3202      	adds	r2, #2
 801651e:	f104 010c 	add.w	r1, r4, #12
 8016522:	0092      	lsls	r2, r2, #2
 8016524:	300c      	adds	r0, #12
 8016526:	f7ff f8c4 	bl	80156b2 <memcpy>
 801652a:	4621      	mov	r1, r4
 801652c:	4638      	mov	r0, r7
 801652e:	f7ff ffa5 	bl	801647c <_Bfree>
 8016532:	4644      	mov	r4, r8
 8016534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016538:	3501      	adds	r5, #1
 801653a:	615e      	str	r6, [r3, #20]
 801653c:	6125      	str	r5, [r4, #16]
 801653e:	4620      	mov	r0, r4
 8016540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016544:	08018da0 	.word	0x08018da0
 8016548:	08018db1 	.word	0x08018db1

0801654c <__hi0bits>:
 801654c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016550:	4603      	mov	r3, r0
 8016552:	bf36      	itet	cc
 8016554:	0403      	lslcc	r3, r0, #16
 8016556:	2000      	movcs	r0, #0
 8016558:	2010      	movcc	r0, #16
 801655a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801655e:	bf3c      	itt	cc
 8016560:	021b      	lslcc	r3, r3, #8
 8016562:	3008      	addcc	r0, #8
 8016564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016568:	bf3c      	itt	cc
 801656a:	011b      	lslcc	r3, r3, #4
 801656c:	3004      	addcc	r0, #4
 801656e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016572:	bf3c      	itt	cc
 8016574:	009b      	lslcc	r3, r3, #2
 8016576:	3002      	addcc	r0, #2
 8016578:	2b00      	cmp	r3, #0
 801657a:	db05      	blt.n	8016588 <__hi0bits+0x3c>
 801657c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016580:	f100 0001 	add.w	r0, r0, #1
 8016584:	bf08      	it	eq
 8016586:	2020      	moveq	r0, #32
 8016588:	4770      	bx	lr

0801658a <__lo0bits>:
 801658a:	6803      	ldr	r3, [r0, #0]
 801658c:	4602      	mov	r2, r0
 801658e:	f013 0007 	ands.w	r0, r3, #7
 8016592:	d00b      	beq.n	80165ac <__lo0bits+0x22>
 8016594:	07d9      	lsls	r1, r3, #31
 8016596:	d421      	bmi.n	80165dc <__lo0bits+0x52>
 8016598:	0798      	lsls	r0, r3, #30
 801659a:	bf49      	itett	mi
 801659c:	085b      	lsrmi	r3, r3, #1
 801659e:	089b      	lsrpl	r3, r3, #2
 80165a0:	2001      	movmi	r0, #1
 80165a2:	6013      	strmi	r3, [r2, #0]
 80165a4:	bf5c      	itt	pl
 80165a6:	6013      	strpl	r3, [r2, #0]
 80165a8:	2002      	movpl	r0, #2
 80165aa:	4770      	bx	lr
 80165ac:	b299      	uxth	r1, r3
 80165ae:	b909      	cbnz	r1, 80165b4 <__lo0bits+0x2a>
 80165b0:	0c1b      	lsrs	r3, r3, #16
 80165b2:	2010      	movs	r0, #16
 80165b4:	b2d9      	uxtb	r1, r3
 80165b6:	b909      	cbnz	r1, 80165bc <__lo0bits+0x32>
 80165b8:	3008      	adds	r0, #8
 80165ba:	0a1b      	lsrs	r3, r3, #8
 80165bc:	0719      	lsls	r1, r3, #28
 80165be:	bf04      	itt	eq
 80165c0:	091b      	lsreq	r3, r3, #4
 80165c2:	3004      	addeq	r0, #4
 80165c4:	0799      	lsls	r1, r3, #30
 80165c6:	bf04      	itt	eq
 80165c8:	089b      	lsreq	r3, r3, #2
 80165ca:	3002      	addeq	r0, #2
 80165cc:	07d9      	lsls	r1, r3, #31
 80165ce:	d403      	bmi.n	80165d8 <__lo0bits+0x4e>
 80165d0:	085b      	lsrs	r3, r3, #1
 80165d2:	f100 0001 	add.w	r0, r0, #1
 80165d6:	d003      	beq.n	80165e0 <__lo0bits+0x56>
 80165d8:	6013      	str	r3, [r2, #0]
 80165da:	4770      	bx	lr
 80165dc:	2000      	movs	r0, #0
 80165de:	4770      	bx	lr
 80165e0:	2020      	movs	r0, #32
 80165e2:	4770      	bx	lr

080165e4 <__i2b>:
 80165e4:	b510      	push	{r4, lr}
 80165e6:	460c      	mov	r4, r1
 80165e8:	2101      	movs	r1, #1
 80165ea:	f7ff ff07 	bl	80163fc <_Balloc>
 80165ee:	4602      	mov	r2, r0
 80165f0:	b928      	cbnz	r0, 80165fe <__i2b+0x1a>
 80165f2:	4b05      	ldr	r3, [pc, #20]	@ (8016608 <__i2b+0x24>)
 80165f4:	4805      	ldr	r0, [pc, #20]	@ (801660c <__i2b+0x28>)
 80165f6:	f240 1145 	movw	r1, #325	@ 0x145
 80165fa:	f000 fc9f 	bl	8016f3c <__assert_func>
 80165fe:	2301      	movs	r3, #1
 8016600:	6144      	str	r4, [r0, #20]
 8016602:	6103      	str	r3, [r0, #16]
 8016604:	bd10      	pop	{r4, pc}
 8016606:	bf00      	nop
 8016608:	08018da0 	.word	0x08018da0
 801660c:	08018db1 	.word	0x08018db1

08016610 <__multiply>:
 8016610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016614:	4614      	mov	r4, r2
 8016616:	690a      	ldr	r2, [r1, #16]
 8016618:	6923      	ldr	r3, [r4, #16]
 801661a:	429a      	cmp	r2, r3
 801661c:	bfa8      	it	ge
 801661e:	4623      	movge	r3, r4
 8016620:	460f      	mov	r7, r1
 8016622:	bfa4      	itt	ge
 8016624:	460c      	movge	r4, r1
 8016626:	461f      	movge	r7, r3
 8016628:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801662c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016630:	68a3      	ldr	r3, [r4, #8]
 8016632:	6861      	ldr	r1, [r4, #4]
 8016634:	eb0a 0609 	add.w	r6, sl, r9
 8016638:	42b3      	cmp	r3, r6
 801663a:	b085      	sub	sp, #20
 801663c:	bfb8      	it	lt
 801663e:	3101      	addlt	r1, #1
 8016640:	f7ff fedc 	bl	80163fc <_Balloc>
 8016644:	b930      	cbnz	r0, 8016654 <__multiply+0x44>
 8016646:	4602      	mov	r2, r0
 8016648:	4b44      	ldr	r3, [pc, #272]	@ (801675c <__multiply+0x14c>)
 801664a:	4845      	ldr	r0, [pc, #276]	@ (8016760 <__multiply+0x150>)
 801664c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016650:	f000 fc74 	bl	8016f3c <__assert_func>
 8016654:	f100 0514 	add.w	r5, r0, #20
 8016658:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801665c:	462b      	mov	r3, r5
 801665e:	2200      	movs	r2, #0
 8016660:	4543      	cmp	r3, r8
 8016662:	d321      	bcc.n	80166a8 <__multiply+0x98>
 8016664:	f107 0114 	add.w	r1, r7, #20
 8016668:	f104 0214 	add.w	r2, r4, #20
 801666c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016670:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016674:	9302      	str	r3, [sp, #8]
 8016676:	1b13      	subs	r3, r2, r4
 8016678:	3b15      	subs	r3, #21
 801667a:	f023 0303 	bic.w	r3, r3, #3
 801667e:	3304      	adds	r3, #4
 8016680:	f104 0715 	add.w	r7, r4, #21
 8016684:	42ba      	cmp	r2, r7
 8016686:	bf38      	it	cc
 8016688:	2304      	movcc	r3, #4
 801668a:	9301      	str	r3, [sp, #4]
 801668c:	9b02      	ldr	r3, [sp, #8]
 801668e:	9103      	str	r1, [sp, #12]
 8016690:	428b      	cmp	r3, r1
 8016692:	d80c      	bhi.n	80166ae <__multiply+0x9e>
 8016694:	2e00      	cmp	r6, #0
 8016696:	dd03      	ble.n	80166a0 <__multiply+0x90>
 8016698:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801669c:	2b00      	cmp	r3, #0
 801669e:	d05b      	beq.n	8016758 <__multiply+0x148>
 80166a0:	6106      	str	r6, [r0, #16]
 80166a2:	b005      	add	sp, #20
 80166a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166a8:	f843 2b04 	str.w	r2, [r3], #4
 80166ac:	e7d8      	b.n	8016660 <__multiply+0x50>
 80166ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80166b2:	f1ba 0f00 	cmp.w	sl, #0
 80166b6:	d024      	beq.n	8016702 <__multiply+0xf2>
 80166b8:	f104 0e14 	add.w	lr, r4, #20
 80166bc:	46a9      	mov	r9, r5
 80166be:	f04f 0c00 	mov.w	ip, #0
 80166c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80166c6:	f8d9 3000 	ldr.w	r3, [r9]
 80166ca:	fa1f fb87 	uxth.w	fp, r7
 80166ce:	b29b      	uxth	r3, r3
 80166d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80166d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80166d8:	f8d9 7000 	ldr.w	r7, [r9]
 80166dc:	4463      	add	r3, ip
 80166de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80166e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80166e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80166f0:	4572      	cmp	r2, lr
 80166f2:	f849 3b04 	str.w	r3, [r9], #4
 80166f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80166fa:	d8e2      	bhi.n	80166c2 <__multiply+0xb2>
 80166fc:	9b01      	ldr	r3, [sp, #4]
 80166fe:	f845 c003 	str.w	ip, [r5, r3]
 8016702:	9b03      	ldr	r3, [sp, #12]
 8016704:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016708:	3104      	adds	r1, #4
 801670a:	f1b9 0f00 	cmp.w	r9, #0
 801670e:	d021      	beq.n	8016754 <__multiply+0x144>
 8016710:	682b      	ldr	r3, [r5, #0]
 8016712:	f104 0c14 	add.w	ip, r4, #20
 8016716:	46ae      	mov	lr, r5
 8016718:	f04f 0a00 	mov.w	sl, #0
 801671c:	f8bc b000 	ldrh.w	fp, [ip]
 8016720:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016724:	fb09 770b 	mla	r7, r9, fp, r7
 8016728:	4457      	add	r7, sl
 801672a:	b29b      	uxth	r3, r3
 801672c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016730:	f84e 3b04 	str.w	r3, [lr], #4
 8016734:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016738:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801673c:	f8be 3000 	ldrh.w	r3, [lr]
 8016740:	fb09 330a 	mla	r3, r9, sl, r3
 8016744:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016748:	4562      	cmp	r2, ip
 801674a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801674e:	d8e5      	bhi.n	801671c <__multiply+0x10c>
 8016750:	9f01      	ldr	r7, [sp, #4]
 8016752:	51eb      	str	r3, [r5, r7]
 8016754:	3504      	adds	r5, #4
 8016756:	e799      	b.n	801668c <__multiply+0x7c>
 8016758:	3e01      	subs	r6, #1
 801675a:	e79b      	b.n	8016694 <__multiply+0x84>
 801675c:	08018da0 	.word	0x08018da0
 8016760:	08018db1 	.word	0x08018db1

08016764 <__pow5mult>:
 8016764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016768:	4615      	mov	r5, r2
 801676a:	f012 0203 	ands.w	r2, r2, #3
 801676e:	4607      	mov	r7, r0
 8016770:	460e      	mov	r6, r1
 8016772:	d007      	beq.n	8016784 <__pow5mult+0x20>
 8016774:	4c25      	ldr	r4, [pc, #148]	@ (801680c <__pow5mult+0xa8>)
 8016776:	3a01      	subs	r2, #1
 8016778:	2300      	movs	r3, #0
 801677a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801677e:	f7ff fe9f 	bl	80164c0 <__multadd>
 8016782:	4606      	mov	r6, r0
 8016784:	10ad      	asrs	r5, r5, #2
 8016786:	d03d      	beq.n	8016804 <__pow5mult+0xa0>
 8016788:	69fc      	ldr	r4, [r7, #28]
 801678a:	b97c      	cbnz	r4, 80167ac <__pow5mult+0x48>
 801678c:	2010      	movs	r0, #16
 801678e:	f7fe f873 	bl	8014878 <malloc>
 8016792:	4602      	mov	r2, r0
 8016794:	61f8      	str	r0, [r7, #28]
 8016796:	b928      	cbnz	r0, 80167a4 <__pow5mult+0x40>
 8016798:	4b1d      	ldr	r3, [pc, #116]	@ (8016810 <__pow5mult+0xac>)
 801679a:	481e      	ldr	r0, [pc, #120]	@ (8016814 <__pow5mult+0xb0>)
 801679c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80167a0:	f000 fbcc 	bl	8016f3c <__assert_func>
 80167a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167a8:	6004      	str	r4, [r0, #0]
 80167aa:	60c4      	str	r4, [r0, #12]
 80167ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80167b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80167b4:	b94c      	cbnz	r4, 80167ca <__pow5mult+0x66>
 80167b6:	f240 2171 	movw	r1, #625	@ 0x271
 80167ba:	4638      	mov	r0, r7
 80167bc:	f7ff ff12 	bl	80165e4 <__i2b>
 80167c0:	2300      	movs	r3, #0
 80167c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80167c6:	4604      	mov	r4, r0
 80167c8:	6003      	str	r3, [r0, #0]
 80167ca:	f04f 0900 	mov.w	r9, #0
 80167ce:	07eb      	lsls	r3, r5, #31
 80167d0:	d50a      	bpl.n	80167e8 <__pow5mult+0x84>
 80167d2:	4631      	mov	r1, r6
 80167d4:	4622      	mov	r2, r4
 80167d6:	4638      	mov	r0, r7
 80167d8:	f7ff ff1a 	bl	8016610 <__multiply>
 80167dc:	4631      	mov	r1, r6
 80167de:	4680      	mov	r8, r0
 80167e0:	4638      	mov	r0, r7
 80167e2:	f7ff fe4b 	bl	801647c <_Bfree>
 80167e6:	4646      	mov	r6, r8
 80167e8:	106d      	asrs	r5, r5, #1
 80167ea:	d00b      	beq.n	8016804 <__pow5mult+0xa0>
 80167ec:	6820      	ldr	r0, [r4, #0]
 80167ee:	b938      	cbnz	r0, 8016800 <__pow5mult+0x9c>
 80167f0:	4622      	mov	r2, r4
 80167f2:	4621      	mov	r1, r4
 80167f4:	4638      	mov	r0, r7
 80167f6:	f7ff ff0b 	bl	8016610 <__multiply>
 80167fa:	6020      	str	r0, [r4, #0]
 80167fc:	f8c0 9000 	str.w	r9, [r0]
 8016800:	4604      	mov	r4, r0
 8016802:	e7e4      	b.n	80167ce <__pow5mult+0x6a>
 8016804:	4630      	mov	r0, r6
 8016806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801680a:	bf00      	nop
 801680c:	08018e0c 	.word	0x08018e0c
 8016810:	08018d31 	.word	0x08018d31
 8016814:	08018db1 	.word	0x08018db1

08016818 <__lshift>:
 8016818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801681c:	460c      	mov	r4, r1
 801681e:	6849      	ldr	r1, [r1, #4]
 8016820:	6923      	ldr	r3, [r4, #16]
 8016822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016826:	68a3      	ldr	r3, [r4, #8]
 8016828:	4607      	mov	r7, r0
 801682a:	4691      	mov	r9, r2
 801682c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016830:	f108 0601 	add.w	r6, r8, #1
 8016834:	42b3      	cmp	r3, r6
 8016836:	db0b      	blt.n	8016850 <__lshift+0x38>
 8016838:	4638      	mov	r0, r7
 801683a:	f7ff fddf 	bl	80163fc <_Balloc>
 801683e:	4605      	mov	r5, r0
 8016840:	b948      	cbnz	r0, 8016856 <__lshift+0x3e>
 8016842:	4602      	mov	r2, r0
 8016844:	4b28      	ldr	r3, [pc, #160]	@ (80168e8 <__lshift+0xd0>)
 8016846:	4829      	ldr	r0, [pc, #164]	@ (80168ec <__lshift+0xd4>)
 8016848:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801684c:	f000 fb76 	bl	8016f3c <__assert_func>
 8016850:	3101      	adds	r1, #1
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	e7ee      	b.n	8016834 <__lshift+0x1c>
 8016856:	2300      	movs	r3, #0
 8016858:	f100 0114 	add.w	r1, r0, #20
 801685c:	f100 0210 	add.w	r2, r0, #16
 8016860:	4618      	mov	r0, r3
 8016862:	4553      	cmp	r3, sl
 8016864:	db33      	blt.n	80168ce <__lshift+0xb6>
 8016866:	6920      	ldr	r0, [r4, #16]
 8016868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801686c:	f104 0314 	add.w	r3, r4, #20
 8016870:	f019 091f 	ands.w	r9, r9, #31
 8016874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801687c:	d02b      	beq.n	80168d6 <__lshift+0xbe>
 801687e:	f1c9 0e20 	rsb	lr, r9, #32
 8016882:	468a      	mov	sl, r1
 8016884:	2200      	movs	r2, #0
 8016886:	6818      	ldr	r0, [r3, #0]
 8016888:	fa00 f009 	lsl.w	r0, r0, r9
 801688c:	4310      	orrs	r0, r2
 801688e:	f84a 0b04 	str.w	r0, [sl], #4
 8016892:	f853 2b04 	ldr.w	r2, [r3], #4
 8016896:	459c      	cmp	ip, r3
 8016898:	fa22 f20e 	lsr.w	r2, r2, lr
 801689c:	d8f3      	bhi.n	8016886 <__lshift+0x6e>
 801689e:	ebac 0304 	sub.w	r3, ip, r4
 80168a2:	3b15      	subs	r3, #21
 80168a4:	f023 0303 	bic.w	r3, r3, #3
 80168a8:	3304      	adds	r3, #4
 80168aa:	f104 0015 	add.w	r0, r4, #21
 80168ae:	4584      	cmp	ip, r0
 80168b0:	bf38      	it	cc
 80168b2:	2304      	movcc	r3, #4
 80168b4:	50ca      	str	r2, [r1, r3]
 80168b6:	b10a      	cbz	r2, 80168bc <__lshift+0xa4>
 80168b8:	f108 0602 	add.w	r6, r8, #2
 80168bc:	3e01      	subs	r6, #1
 80168be:	4638      	mov	r0, r7
 80168c0:	612e      	str	r6, [r5, #16]
 80168c2:	4621      	mov	r1, r4
 80168c4:	f7ff fdda 	bl	801647c <_Bfree>
 80168c8:	4628      	mov	r0, r5
 80168ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80168d2:	3301      	adds	r3, #1
 80168d4:	e7c5      	b.n	8016862 <__lshift+0x4a>
 80168d6:	3904      	subs	r1, #4
 80168d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80168dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80168e0:	459c      	cmp	ip, r3
 80168e2:	d8f9      	bhi.n	80168d8 <__lshift+0xc0>
 80168e4:	e7ea      	b.n	80168bc <__lshift+0xa4>
 80168e6:	bf00      	nop
 80168e8:	08018da0 	.word	0x08018da0
 80168ec:	08018db1 	.word	0x08018db1

080168f0 <__mcmp>:
 80168f0:	690a      	ldr	r2, [r1, #16]
 80168f2:	4603      	mov	r3, r0
 80168f4:	6900      	ldr	r0, [r0, #16]
 80168f6:	1a80      	subs	r0, r0, r2
 80168f8:	b530      	push	{r4, r5, lr}
 80168fa:	d10e      	bne.n	801691a <__mcmp+0x2a>
 80168fc:	3314      	adds	r3, #20
 80168fe:	3114      	adds	r1, #20
 8016900:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016904:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016908:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801690c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016910:	4295      	cmp	r5, r2
 8016912:	d003      	beq.n	801691c <__mcmp+0x2c>
 8016914:	d205      	bcs.n	8016922 <__mcmp+0x32>
 8016916:	f04f 30ff 	mov.w	r0, #4294967295
 801691a:	bd30      	pop	{r4, r5, pc}
 801691c:	42a3      	cmp	r3, r4
 801691e:	d3f3      	bcc.n	8016908 <__mcmp+0x18>
 8016920:	e7fb      	b.n	801691a <__mcmp+0x2a>
 8016922:	2001      	movs	r0, #1
 8016924:	e7f9      	b.n	801691a <__mcmp+0x2a>
	...

08016928 <__mdiff>:
 8016928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801692c:	4689      	mov	r9, r1
 801692e:	4606      	mov	r6, r0
 8016930:	4611      	mov	r1, r2
 8016932:	4648      	mov	r0, r9
 8016934:	4614      	mov	r4, r2
 8016936:	f7ff ffdb 	bl	80168f0 <__mcmp>
 801693a:	1e05      	subs	r5, r0, #0
 801693c:	d112      	bne.n	8016964 <__mdiff+0x3c>
 801693e:	4629      	mov	r1, r5
 8016940:	4630      	mov	r0, r6
 8016942:	f7ff fd5b 	bl	80163fc <_Balloc>
 8016946:	4602      	mov	r2, r0
 8016948:	b928      	cbnz	r0, 8016956 <__mdiff+0x2e>
 801694a:	4b3f      	ldr	r3, [pc, #252]	@ (8016a48 <__mdiff+0x120>)
 801694c:	f240 2137 	movw	r1, #567	@ 0x237
 8016950:	483e      	ldr	r0, [pc, #248]	@ (8016a4c <__mdiff+0x124>)
 8016952:	f000 faf3 	bl	8016f3c <__assert_func>
 8016956:	2301      	movs	r3, #1
 8016958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801695c:	4610      	mov	r0, r2
 801695e:	b003      	add	sp, #12
 8016960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016964:	bfbc      	itt	lt
 8016966:	464b      	movlt	r3, r9
 8016968:	46a1      	movlt	r9, r4
 801696a:	4630      	mov	r0, r6
 801696c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016970:	bfba      	itte	lt
 8016972:	461c      	movlt	r4, r3
 8016974:	2501      	movlt	r5, #1
 8016976:	2500      	movge	r5, #0
 8016978:	f7ff fd40 	bl	80163fc <_Balloc>
 801697c:	4602      	mov	r2, r0
 801697e:	b918      	cbnz	r0, 8016988 <__mdiff+0x60>
 8016980:	4b31      	ldr	r3, [pc, #196]	@ (8016a48 <__mdiff+0x120>)
 8016982:	f240 2145 	movw	r1, #581	@ 0x245
 8016986:	e7e3      	b.n	8016950 <__mdiff+0x28>
 8016988:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801698c:	6926      	ldr	r6, [r4, #16]
 801698e:	60c5      	str	r5, [r0, #12]
 8016990:	f109 0310 	add.w	r3, r9, #16
 8016994:	f109 0514 	add.w	r5, r9, #20
 8016998:	f104 0e14 	add.w	lr, r4, #20
 801699c:	f100 0b14 	add.w	fp, r0, #20
 80169a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80169a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80169a8:	9301      	str	r3, [sp, #4]
 80169aa:	46d9      	mov	r9, fp
 80169ac:	f04f 0c00 	mov.w	ip, #0
 80169b0:	9b01      	ldr	r3, [sp, #4]
 80169b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80169b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80169ba:	9301      	str	r3, [sp, #4]
 80169bc:	fa1f f38a 	uxth.w	r3, sl
 80169c0:	4619      	mov	r1, r3
 80169c2:	b283      	uxth	r3, r0
 80169c4:	1acb      	subs	r3, r1, r3
 80169c6:	0c00      	lsrs	r0, r0, #16
 80169c8:	4463      	add	r3, ip
 80169ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80169ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80169d8:	4576      	cmp	r6, lr
 80169da:	f849 3b04 	str.w	r3, [r9], #4
 80169de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80169e2:	d8e5      	bhi.n	80169b0 <__mdiff+0x88>
 80169e4:	1b33      	subs	r3, r6, r4
 80169e6:	3b15      	subs	r3, #21
 80169e8:	f023 0303 	bic.w	r3, r3, #3
 80169ec:	3415      	adds	r4, #21
 80169ee:	3304      	adds	r3, #4
 80169f0:	42a6      	cmp	r6, r4
 80169f2:	bf38      	it	cc
 80169f4:	2304      	movcc	r3, #4
 80169f6:	441d      	add	r5, r3
 80169f8:	445b      	add	r3, fp
 80169fa:	461e      	mov	r6, r3
 80169fc:	462c      	mov	r4, r5
 80169fe:	4544      	cmp	r4, r8
 8016a00:	d30e      	bcc.n	8016a20 <__mdiff+0xf8>
 8016a02:	f108 0103 	add.w	r1, r8, #3
 8016a06:	1b49      	subs	r1, r1, r5
 8016a08:	f021 0103 	bic.w	r1, r1, #3
 8016a0c:	3d03      	subs	r5, #3
 8016a0e:	45a8      	cmp	r8, r5
 8016a10:	bf38      	it	cc
 8016a12:	2100      	movcc	r1, #0
 8016a14:	440b      	add	r3, r1
 8016a16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016a1a:	b191      	cbz	r1, 8016a42 <__mdiff+0x11a>
 8016a1c:	6117      	str	r7, [r2, #16]
 8016a1e:	e79d      	b.n	801695c <__mdiff+0x34>
 8016a20:	f854 1b04 	ldr.w	r1, [r4], #4
 8016a24:	46e6      	mov	lr, ip
 8016a26:	0c08      	lsrs	r0, r1, #16
 8016a28:	fa1c fc81 	uxtah	ip, ip, r1
 8016a2c:	4471      	add	r1, lr
 8016a2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016a32:	b289      	uxth	r1, r1
 8016a34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016a38:	f846 1b04 	str.w	r1, [r6], #4
 8016a3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016a40:	e7dd      	b.n	80169fe <__mdiff+0xd6>
 8016a42:	3f01      	subs	r7, #1
 8016a44:	e7e7      	b.n	8016a16 <__mdiff+0xee>
 8016a46:	bf00      	nop
 8016a48:	08018da0 	.word	0x08018da0
 8016a4c:	08018db1 	.word	0x08018db1

08016a50 <__d2b>:
 8016a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a54:	460f      	mov	r7, r1
 8016a56:	2101      	movs	r1, #1
 8016a58:	ec59 8b10 	vmov	r8, r9, d0
 8016a5c:	4616      	mov	r6, r2
 8016a5e:	f7ff fccd 	bl	80163fc <_Balloc>
 8016a62:	4604      	mov	r4, r0
 8016a64:	b930      	cbnz	r0, 8016a74 <__d2b+0x24>
 8016a66:	4602      	mov	r2, r0
 8016a68:	4b23      	ldr	r3, [pc, #140]	@ (8016af8 <__d2b+0xa8>)
 8016a6a:	4824      	ldr	r0, [pc, #144]	@ (8016afc <__d2b+0xac>)
 8016a6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8016a70:	f000 fa64 	bl	8016f3c <__assert_func>
 8016a74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a7c:	b10d      	cbz	r5, 8016a82 <__d2b+0x32>
 8016a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016a82:	9301      	str	r3, [sp, #4]
 8016a84:	f1b8 0300 	subs.w	r3, r8, #0
 8016a88:	d023      	beq.n	8016ad2 <__d2b+0x82>
 8016a8a:	4668      	mov	r0, sp
 8016a8c:	9300      	str	r3, [sp, #0]
 8016a8e:	f7ff fd7c 	bl	801658a <__lo0bits>
 8016a92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016a96:	b1d0      	cbz	r0, 8016ace <__d2b+0x7e>
 8016a98:	f1c0 0320 	rsb	r3, r0, #32
 8016a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8016aa0:	430b      	orrs	r3, r1
 8016aa2:	40c2      	lsrs	r2, r0
 8016aa4:	6163      	str	r3, [r4, #20]
 8016aa6:	9201      	str	r2, [sp, #4]
 8016aa8:	9b01      	ldr	r3, [sp, #4]
 8016aaa:	61a3      	str	r3, [r4, #24]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	bf0c      	ite	eq
 8016ab0:	2201      	moveq	r2, #1
 8016ab2:	2202      	movne	r2, #2
 8016ab4:	6122      	str	r2, [r4, #16]
 8016ab6:	b1a5      	cbz	r5, 8016ae2 <__d2b+0x92>
 8016ab8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016abc:	4405      	add	r5, r0
 8016abe:	603d      	str	r5, [r7, #0]
 8016ac0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016ac4:	6030      	str	r0, [r6, #0]
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	b003      	add	sp, #12
 8016aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ace:	6161      	str	r1, [r4, #20]
 8016ad0:	e7ea      	b.n	8016aa8 <__d2b+0x58>
 8016ad2:	a801      	add	r0, sp, #4
 8016ad4:	f7ff fd59 	bl	801658a <__lo0bits>
 8016ad8:	9b01      	ldr	r3, [sp, #4]
 8016ada:	6163      	str	r3, [r4, #20]
 8016adc:	3020      	adds	r0, #32
 8016ade:	2201      	movs	r2, #1
 8016ae0:	e7e8      	b.n	8016ab4 <__d2b+0x64>
 8016ae2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016ae6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016aea:	6038      	str	r0, [r7, #0]
 8016aec:	6918      	ldr	r0, [r3, #16]
 8016aee:	f7ff fd2d 	bl	801654c <__hi0bits>
 8016af2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016af6:	e7e5      	b.n	8016ac4 <__d2b+0x74>
 8016af8:	08018da0 	.word	0x08018da0
 8016afc:	08018db1 	.word	0x08018db1

08016b00 <__ssputs_r>:
 8016b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b04:	688e      	ldr	r6, [r1, #8]
 8016b06:	461f      	mov	r7, r3
 8016b08:	42be      	cmp	r6, r7
 8016b0a:	680b      	ldr	r3, [r1, #0]
 8016b0c:	4682      	mov	sl, r0
 8016b0e:	460c      	mov	r4, r1
 8016b10:	4690      	mov	r8, r2
 8016b12:	d82d      	bhi.n	8016b70 <__ssputs_r+0x70>
 8016b14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016b18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016b1c:	d026      	beq.n	8016b6c <__ssputs_r+0x6c>
 8016b1e:	6965      	ldr	r5, [r4, #20]
 8016b20:	6909      	ldr	r1, [r1, #16]
 8016b22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b26:	eba3 0901 	sub.w	r9, r3, r1
 8016b2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016b2e:	1c7b      	adds	r3, r7, #1
 8016b30:	444b      	add	r3, r9
 8016b32:	106d      	asrs	r5, r5, #1
 8016b34:	429d      	cmp	r5, r3
 8016b36:	bf38      	it	cc
 8016b38:	461d      	movcc	r5, r3
 8016b3a:	0553      	lsls	r3, r2, #21
 8016b3c:	d527      	bpl.n	8016b8e <__ssputs_r+0x8e>
 8016b3e:	4629      	mov	r1, r5
 8016b40:	f7fd fecc 	bl	80148dc <_malloc_r>
 8016b44:	4606      	mov	r6, r0
 8016b46:	b360      	cbz	r0, 8016ba2 <__ssputs_r+0xa2>
 8016b48:	6921      	ldr	r1, [r4, #16]
 8016b4a:	464a      	mov	r2, r9
 8016b4c:	f7fe fdb1 	bl	80156b2 <memcpy>
 8016b50:	89a3      	ldrh	r3, [r4, #12]
 8016b52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b5a:	81a3      	strh	r3, [r4, #12]
 8016b5c:	6126      	str	r6, [r4, #16]
 8016b5e:	6165      	str	r5, [r4, #20]
 8016b60:	444e      	add	r6, r9
 8016b62:	eba5 0509 	sub.w	r5, r5, r9
 8016b66:	6026      	str	r6, [r4, #0]
 8016b68:	60a5      	str	r5, [r4, #8]
 8016b6a:	463e      	mov	r6, r7
 8016b6c:	42be      	cmp	r6, r7
 8016b6e:	d900      	bls.n	8016b72 <__ssputs_r+0x72>
 8016b70:	463e      	mov	r6, r7
 8016b72:	6820      	ldr	r0, [r4, #0]
 8016b74:	4632      	mov	r2, r6
 8016b76:	4641      	mov	r1, r8
 8016b78:	f000 f9c6 	bl	8016f08 <memmove>
 8016b7c:	68a3      	ldr	r3, [r4, #8]
 8016b7e:	1b9b      	subs	r3, r3, r6
 8016b80:	60a3      	str	r3, [r4, #8]
 8016b82:	6823      	ldr	r3, [r4, #0]
 8016b84:	4433      	add	r3, r6
 8016b86:	6023      	str	r3, [r4, #0]
 8016b88:	2000      	movs	r0, #0
 8016b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b8e:	462a      	mov	r2, r5
 8016b90:	f000 fa18 	bl	8016fc4 <_realloc_r>
 8016b94:	4606      	mov	r6, r0
 8016b96:	2800      	cmp	r0, #0
 8016b98:	d1e0      	bne.n	8016b5c <__ssputs_r+0x5c>
 8016b9a:	6921      	ldr	r1, [r4, #16]
 8016b9c:	4650      	mov	r0, sl
 8016b9e:	f7ff fbe3 	bl	8016368 <_free_r>
 8016ba2:	230c      	movs	r3, #12
 8016ba4:	f8ca 3000 	str.w	r3, [sl]
 8016ba8:	89a3      	ldrh	r3, [r4, #12]
 8016baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016bae:	81a3      	strh	r3, [r4, #12]
 8016bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8016bb4:	e7e9      	b.n	8016b8a <__ssputs_r+0x8a>
	...

08016bb8 <_svfiprintf_r>:
 8016bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bbc:	4698      	mov	r8, r3
 8016bbe:	898b      	ldrh	r3, [r1, #12]
 8016bc0:	061b      	lsls	r3, r3, #24
 8016bc2:	b09d      	sub	sp, #116	@ 0x74
 8016bc4:	4607      	mov	r7, r0
 8016bc6:	460d      	mov	r5, r1
 8016bc8:	4614      	mov	r4, r2
 8016bca:	d510      	bpl.n	8016bee <_svfiprintf_r+0x36>
 8016bcc:	690b      	ldr	r3, [r1, #16]
 8016bce:	b973      	cbnz	r3, 8016bee <_svfiprintf_r+0x36>
 8016bd0:	2140      	movs	r1, #64	@ 0x40
 8016bd2:	f7fd fe83 	bl	80148dc <_malloc_r>
 8016bd6:	6028      	str	r0, [r5, #0]
 8016bd8:	6128      	str	r0, [r5, #16]
 8016bda:	b930      	cbnz	r0, 8016bea <_svfiprintf_r+0x32>
 8016bdc:	230c      	movs	r3, #12
 8016bde:	603b      	str	r3, [r7, #0]
 8016be0:	f04f 30ff 	mov.w	r0, #4294967295
 8016be4:	b01d      	add	sp, #116	@ 0x74
 8016be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bea:	2340      	movs	r3, #64	@ 0x40
 8016bec:	616b      	str	r3, [r5, #20]
 8016bee:	2300      	movs	r3, #0
 8016bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bf2:	2320      	movs	r3, #32
 8016bf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016bf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8016bfc:	2330      	movs	r3, #48	@ 0x30
 8016bfe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016d9c <_svfiprintf_r+0x1e4>
 8016c02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016c06:	f04f 0901 	mov.w	r9, #1
 8016c0a:	4623      	mov	r3, r4
 8016c0c:	469a      	mov	sl, r3
 8016c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c12:	b10a      	cbz	r2, 8016c18 <_svfiprintf_r+0x60>
 8016c14:	2a25      	cmp	r2, #37	@ 0x25
 8016c16:	d1f9      	bne.n	8016c0c <_svfiprintf_r+0x54>
 8016c18:	ebba 0b04 	subs.w	fp, sl, r4
 8016c1c:	d00b      	beq.n	8016c36 <_svfiprintf_r+0x7e>
 8016c1e:	465b      	mov	r3, fp
 8016c20:	4622      	mov	r2, r4
 8016c22:	4629      	mov	r1, r5
 8016c24:	4638      	mov	r0, r7
 8016c26:	f7ff ff6b 	bl	8016b00 <__ssputs_r>
 8016c2a:	3001      	adds	r0, #1
 8016c2c:	f000 80a7 	beq.w	8016d7e <_svfiprintf_r+0x1c6>
 8016c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c32:	445a      	add	r2, fp
 8016c34:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c36:	f89a 3000 	ldrb.w	r3, [sl]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	f000 809f 	beq.w	8016d7e <_svfiprintf_r+0x1c6>
 8016c40:	2300      	movs	r3, #0
 8016c42:	f04f 32ff 	mov.w	r2, #4294967295
 8016c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c4a:	f10a 0a01 	add.w	sl, sl, #1
 8016c4e:	9304      	str	r3, [sp, #16]
 8016c50:	9307      	str	r3, [sp, #28]
 8016c52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016c56:	931a      	str	r3, [sp, #104]	@ 0x68
 8016c58:	4654      	mov	r4, sl
 8016c5a:	2205      	movs	r2, #5
 8016c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c60:	484e      	ldr	r0, [pc, #312]	@ (8016d9c <_svfiprintf_r+0x1e4>)
 8016c62:	f7e9 fae5 	bl	8000230 <memchr>
 8016c66:	9a04      	ldr	r2, [sp, #16]
 8016c68:	b9d8      	cbnz	r0, 8016ca2 <_svfiprintf_r+0xea>
 8016c6a:	06d0      	lsls	r0, r2, #27
 8016c6c:	bf44      	itt	mi
 8016c6e:	2320      	movmi	r3, #32
 8016c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c74:	0711      	lsls	r1, r2, #28
 8016c76:	bf44      	itt	mi
 8016c78:	232b      	movmi	r3, #43	@ 0x2b
 8016c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8016c82:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c84:	d015      	beq.n	8016cb2 <_svfiprintf_r+0xfa>
 8016c86:	9a07      	ldr	r2, [sp, #28]
 8016c88:	4654      	mov	r4, sl
 8016c8a:	2000      	movs	r0, #0
 8016c8c:	f04f 0c0a 	mov.w	ip, #10
 8016c90:	4621      	mov	r1, r4
 8016c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c96:	3b30      	subs	r3, #48	@ 0x30
 8016c98:	2b09      	cmp	r3, #9
 8016c9a:	d94b      	bls.n	8016d34 <_svfiprintf_r+0x17c>
 8016c9c:	b1b0      	cbz	r0, 8016ccc <_svfiprintf_r+0x114>
 8016c9e:	9207      	str	r2, [sp, #28]
 8016ca0:	e014      	b.n	8016ccc <_svfiprintf_r+0x114>
 8016ca2:	eba0 0308 	sub.w	r3, r0, r8
 8016ca6:	fa09 f303 	lsl.w	r3, r9, r3
 8016caa:	4313      	orrs	r3, r2
 8016cac:	9304      	str	r3, [sp, #16]
 8016cae:	46a2      	mov	sl, r4
 8016cb0:	e7d2      	b.n	8016c58 <_svfiprintf_r+0xa0>
 8016cb2:	9b03      	ldr	r3, [sp, #12]
 8016cb4:	1d19      	adds	r1, r3, #4
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	9103      	str	r1, [sp, #12]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	bfbb      	ittet	lt
 8016cbe:	425b      	neglt	r3, r3
 8016cc0:	f042 0202 	orrlt.w	r2, r2, #2
 8016cc4:	9307      	strge	r3, [sp, #28]
 8016cc6:	9307      	strlt	r3, [sp, #28]
 8016cc8:	bfb8      	it	lt
 8016cca:	9204      	strlt	r2, [sp, #16]
 8016ccc:	7823      	ldrb	r3, [r4, #0]
 8016cce:	2b2e      	cmp	r3, #46	@ 0x2e
 8016cd0:	d10a      	bne.n	8016ce8 <_svfiprintf_r+0x130>
 8016cd2:	7863      	ldrb	r3, [r4, #1]
 8016cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8016cd6:	d132      	bne.n	8016d3e <_svfiprintf_r+0x186>
 8016cd8:	9b03      	ldr	r3, [sp, #12]
 8016cda:	1d1a      	adds	r2, r3, #4
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	9203      	str	r2, [sp, #12]
 8016ce0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016ce4:	3402      	adds	r4, #2
 8016ce6:	9305      	str	r3, [sp, #20]
 8016ce8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016dac <_svfiprintf_r+0x1f4>
 8016cec:	7821      	ldrb	r1, [r4, #0]
 8016cee:	2203      	movs	r2, #3
 8016cf0:	4650      	mov	r0, sl
 8016cf2:	f7e9 fa9d 	bl	8000230 <memchr>
 8016cf6:	b138      	cbz	r0, 8016d08 <_svfiprintf_r+0x150>
 8016cf8:	9b04      	ldr	r3, [sp, #16]
 8016cfa:	eba0 000a 	sub.w	r0, r0, sl
 8016cfe:	2240      	movs	r2, #64	@ 0x40
 8016d00:	4082      	lsls	r2, r0
 8016d02:	4313      	orrs	r3, r2
 8016d04:	3401      	adds	r4, #1
 8016d06:	9304      	str	r3, [sp, #16]
 8016d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d0c:	4824      	ldr	r0, [pc, #144]	@ (8016da0 <_svfiprintf_r+0x1e8>)
 8016d0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016d12:	2206      	movs	r2, #6
 8016d14:	f7e9 fa8c 	bl	8000230 <memchr>
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	d036      	beq.n	8016d8a <_svfiprintf_r+0x1d2>
 8016d1c:	4b21      	ldr	r3, [pc, #132]	@ (8016da4 <_svfiprintf_r+0x1ec>)
 8016d1e:	bb1b      	cbnz	r3, 8016d68 <_svfiprintf_r+0x1b0>
 8016d20:	9b03      	ldr	r3, [sp, #12]
 8016d22:	3307      	adds	r3, #7
 8016d24:	f023 0307 	bic.w	r3, r3, #7
 8016d28:	3308      	adds	r3, #8
 8016d2a:	9303      	str	r3, [sp, #12]
 8016d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d2e:	4433      	add	r3, r6
 8016d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d32:	e76a      	b.n	8016c0a <_svfiprintf_r+0x52>
 8016d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d38:	460c      	mov	r4, r1
 8016d3a:	2001      	movs	r0, #1
 8016d3c:	e7a8      	b.n	8016c90 <_svfiprintf_r+0xd8>
 8016d3e:	2300      	movs	r3, #0
 8016d40:	3401      	adds	r4, #1
 8016d42:	9305      	str	r3, [sp, #20]
 8016d44:	4619      	mov	r1, r3
 8016d46:	f04f 0c0a 	mov.w	ip, #10
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d50:	3a30      	subs	r2, #48	@ 0x30
 8016d52:	2a09      	cmp	r2, #9
 8016d54:	d903      	bls.n	8016d5e <_svfiprintf_r+0x1a6>
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d0c6      	beq.n	8016ce8 <_svfiprintf_r+0x130>
 8016d5a:	9105      	str	r1, [sp, #20]
 8016d5c:	e7c4      	b.n	8016ce8 <_svfiprintf_r+0x130>
 8016d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d62:	4604      	mov	r4, r0
 8016d64:	2301      	movs	r3, #1
 8016d66:	e7f0      	b.n	8016d4a <_svfiprintf_r+0x192>
 8016d68:	ab03      	add	r3, sp, #12
 8016d6a:	9300      	str	r3, [sp, #0]
 8016d6c:	462a      	mov	r2, r5
 8016d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8016da8 <_svfiprintf_r+0x1f0>)
 8016d70:	a904      	add	r1, sp, #16
 8016d72:	4638      	mov	r0, r7
 8016d74:	f7fd feec 	bl	8014b50 <_printf_float>
 8016d78:	1c42      	adds	r2, r0, #1
 8016d7a:	4606      	mov	r6, r0
 8016d7c:	d1d6      	bne.n	8016d2c <_svfiprintf_r+0x174>
 8016d7e:	89ab      	ldrh	r3, [r5, #12]
 8016d80:	065b      	lsls	r3, r3, #25
 8016d82:	f53f af2d 	bmi.w	8016be0 <_svfiprintf_r+0x28>
 8016d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d88:	e72c      	b.n	8016be4 <_svfiprintf_r+0x2c>
 8016d8a:	ab03      	add	r3, sp, #12
 8016d8c:	9300      	str	r3, [sp, #0]
 8016d8e:	462a      	mov	r2, r5
 8016d90:	4b05      	ldr	r3, [pc, #20]	@ (8016da8 <_svfiprintf_r+0x1f0>)
 8016d92:	a904      	add	r1, sp, #16
 8016d94:	4638      	mov	r0, r7
 8016d96:	f7fe f973 	bl	8015080 <_printf_i>
 8016d9a:	e7ed      	b.n	8016d78 <_svfiprintf_r+0x1c0>
 8016d9c:	08018f08 	.word	0x08018f08
 8016da0:	08018f12 	.word	0x08018f12
 8016da4:	08014b51 	.word	0x08014b51
 8016da8:	08016b01 	.word	0x08016b01
 8016dac:	08018f0e 	.word	0x08018f0e

08016db0 <__sflush_r>:
 8016db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016db8:	0716      	lsls	r6, r2, #28
 8016dba:	4605      	mov	r5, r0
 8016dbc:	460c      	mov	r4, r1
 8016dbe:	d454      	bmi.n	8016e6a <__sflush_r+0xba>
 8016dc0:	684b      	ldr	r3, [r1, #4]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	dc02      	bgt.n	8016dcc <__sflush_r+0x1c>
 8016dc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	dd48      	ble.n	8016e5e <__sflush_r+0xae>
 8016dcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016dce:	2e00      	cmp	r6, #0
 8016dd0:	d045      	beq.n	8016e5e <__sflush_r+0xae>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016dd8:	682f      	ldr	r7, [r5, #0]
 8016dda:	6a21      	ldr	r1, [r4, #32]
 8016ddc:	602b      	str	r3, [r5, #0]
 8016dde:	d030      	beq.n	8016e42 <__sflush_r+0x92>
 8016de0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016de2:	89a3      	ldrh	r3, [r4, #12]
 8016de4:	0759      	lsls	r1, r3, #29
 8016de6:	d505      	bpl.n	8016df4 <__sflush_r+0x44>
 8016de8:	6863      	ldr	r3, [r4, #4]
 8016dea:	1ad2      	subs	r2, r2, r3
 8016dec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016dee:	b10b      	cbz	r3, 8016df4 <__sflush_r+0x44>
 8016df0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016df2:	1ad2      	subs	r2, r2, r3
 8016df4:	2300      	movs	r3, #0
 8016df6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016df8:	6a21      	ldr	r1, [r4, #32]
 8016dfa:	4628      	mov	r0, r5
 8016dfc:	47b0      	blx	r6
 8016dfe:	1c43      	adds	r3, r0, #1
 8016e00:	89a3      	ldrh	r3, [r4, #12]
 8016e02:	d106      	bne.n	8016e12 <__sflush_r+0x62>
 8016e04:	6829      	ldr	r1, [r5, #0]
 8016e06:	291d      	cmp	r1, #29
 8016e08:	d82b      	bhi.n	8016e62 <__sflush_r+0xb2>
 8016e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8016eb4 <__sflush_r+0x104>)
 8016e0c:	410a      	asrs	r2, r1
 8016e0e:	07d6      	lsls	r6, r2, #31
 8016e10:	d427      	bmi.n	8016e62 <__sflush_r+0xb2>
 8016e12:	2200      	movs	r2, #0
 8016e14:	6062      	str	r2, [r4, #4]
 8016e16:	04d9      	lsls	r1, r3, #19
 8016e18:	6922      	ldr	r2, [r4, #16]
 8016e1a:	6022      	str	r2, [r4, #0]
 8016e1c:	d504      	bpl.n	8016e28 <__sflush_r+0x78>
 8016e1e:	1c42      	adds	r2, r0, #1
 8016e20:	d101      	bne.n	8016e26 <__sflush_r+0x76>
 8016e22:	682b      	ldr	r3, [r5, #0]
 8016e24:	b903      	cbnz	r3, 8016e28 <__sflush_r+0x78>
 8016e26:	6560      	str	r0, [r4, #84]	@ 0x54
 8016e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e2a:	602f      	str	r7, [r5, #0]
 8016e2c:	b1b9      	cbz	r1, 8016e5e <__sflush_r+0xae>
 8016e2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016e32:	4299      	cmp	r1, r3
 8016e34:	d002      	beq.n	8016e3c <__sflush_r+0x8c>
 8016e36:	4628      	mov	r0, r5
 8016e38:	f7ff fa96 	bl	8016368 <_free_r>
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016e40:	e00d      	b.n	8016e5e <__sflush_r+0xae>
 8016e42:	2301      	movs	r3, #1
 8016e44:	4628      	mov	r0, r5
 8016e46:	47b0      	blx	r6
 8016e48:	4602      	mov	r2, r0
 8016e4a:	1c50      	adds	r0, r2, #1
 8016e4c:	d1c9      	bne.n	8016de2 <__sflush_r+0x32>
 8016e4e:	682b      	ldr	r3, [r5, #0]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d0c6      	beq.n	8016de2 <__sflush_r+0x32>
 8016e54:	2b1d      	cmp	r3, #29
 8016e56:	d001      	beq.n	8016e5c <__sflush_r+0xac>
 8016e58:	2b16      	cmp	r3, #22
 8016e5a:	d11e      	bne.n	8016e9a <__sflush_r+0xea>
 8016e5c:	602f      	str	r7, [r5, #0]
 8016e5e:	2000      	movs	r0, #0
 8016e60:	e022      	b.n	8016ea8 <__sflush_r+0xf8>
 8016e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e66:	b21b      	sxth	r3, r3
 8016e68:	e01b      	b.n	8016ea2 <__sflush_r+0xf2>
 8016e6a:	690f      	ldr	r7, [r1, #16]
 8016e6c:	2f00      	cmp	r7, #0
 8016e6e:	d0f6      	beq.n	8016e5e <__sflush_r+0xae>
 8016e70:	0793      	lsls	r3, r2, #30
 8016e72:	680e      	ldr	r6, [r1, #0]
 8016e74:	bf08      	it	eq
 8016e76:	694b      	ldreq	r3, [r1, #20]
 8016e78:	600f      	str	r7, [r1, #0]
 8016e7a:	bf18      	it	ne
 8016e7c:	2300      	movne	r3, #0
 8016e7e:	eba6 0807 	sub.w	r8, r6, r7
 8016e82:	608b      	str	r3, [r1, #8]
 8016e84:	f1b8 0f00 	cmp.w	r8, #0
 8016e88:	dde9      	ble.n	8016e5e <__sflush_r+0xae>
 8016e8a:	6a21      	ldr	r1, [r4, #32]
 8016e8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016e8e:	4643      	mov	r3, r8
 8016e90:	463a      	mov	r2, r7
 8016e92:	4628      	mov	r0, r5
 8016e94:	47b0      	blx	r6
 8016e96:	2800      	cmp	r0, #0
 8016e98:	dc08      	bgt.n	8016eac <__sflush_r+0xfc>
 8016e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ea2:	81a3      	strh	r3, [r4, #12]
 8016ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eac:	4407      	add	r7, r0
 8016eae:	eba8 0800 	sub.w	r8, r8, r0
 8016eb2:	e7e7      	b.n	8016e84 <__sflush_r+0xd4>
 8016eb4:	dfbffffe 	.word	0xdfbffffe

08016eb8 <_fflush_r>:
 8016eb8:	b538      	push	{r3, r4, r5, lr}
 8016eba:	690b      	ldr	r3, [r1, #16]
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	460c      	mov	r4, r1
 8016ec0:	b913      	cbnz	r3, 8016ec8 <_fflush_r+0x10>
 8016ec2:	2500      	movs	r5, #0
 8016ec4:	4628      	mov	r0, r5
 8016ec6:	bd38      	pop	{r3, r4, r5, pc}
 8016ec8:	b118      	cbz	r0, 8016ed2 <_fflush_r+0x1a>
 8016eca:	6a03      	ldr	r3, [r0, #32]
 8016ecc:	b90b      	cbnz	r3, 8016ed2 <_fflush_r+0x1a>
 8016ece:	f7fe fa83 	bl	80153d8 <__sinit>
 8016ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d0f3      	beq.n	8016ec2 <_fflush_r+0xa>
 8016eda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016edc:	07d0      	lsls	r0, r2, #31
 8016ede:	d404      	bmi.n	8016eea <_fflush_r+0x32>
 8016ee0:	0599      	lsls	r1, r3, #22
 8016ee2:	d402      	bmi.n	8016eea <_fflush_r+0x32>
 8016ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ee6:	f7fe fbe2 	bl	80156ae <__retarget_lock_acquire_recursive>
 8016eea:	4628      	mov	r0, r5
 8016eec:	4621      	mov	r1, r4
 8016eee:	f7ff ff5f 	bl	8016db0 <__sflush_r>
 8016ef2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ef4:	07da      	lsls	r2, r3, #31
 8016ef6:	4605      	mov	r5, r0
 8016ef8:	d4e4      	bmi.n	8016ec4 <_fflush_r+0xc>
 8016efa:	89a3      	ldrh	r3, [r4, #12]
 8016efc:	059b      	lsls	r3, r3, #22
 8016efe:	d4e1      	bmi.n	8016ec4 <_fflush_r+0xc>
 8016f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f02:	f7fe fbd5 	bl	80156b0 <__retarget_lock_release_recursive>
 8016f06:	e7dd      	b.n	8016ec4 <_fflush_r+0xc>

08016f08 <memmove>:
 8016f08:	4288      	cmp	r0, r1
 8016f0a:	b510      	push	{r4, lr}
 8016f0c:	eb01 0402 	add.w	r4, r1, r2
 8016f10:	d902      	bls.n	8016f18 <memmove+0x10>
 8016f12:	4284      	cmp	r4, r0
 8016f14:	4623      	mov	r3, r4
 8016f16:	d807      	bhi.n	8016f28 <memmove+0x20>
 8016f18:	1e43      	subs	r3, r0, #1
 8016f1a:	42a1      	cmp	r1, r4
 8016f1c:	d008      	beq.n	8016f30 <memmove+0x28>
 8016f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016f26:	e7f8      	b.n	8016f1a <memmove+0x12>
 8016f28:	4402      	add	r2, r0
 8016f2a:	4601      	mov	r1, r0
 8016f2c:	428a      	cmp	r2, r1
 8016f2e:	d100      	bne.n	8016f32 <memmove+0x2a>
 8016f30:	bd10      	pop	{r4, pc}
 8016f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016f3a:	e7f7      	b.n	8016f2c <memmove+0x24>

08016f3c <__assert_func>:
 8016f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f3e:	4614      	mov	r4, r2
 8016f40:	461a      	mov	r2, r3
 8016f42:	4b09      	ldr	r3, [pc, #36]	@ (8016f68 <__assert_func+0x2c>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	4605      	mov	r5, r0
 8016f48:	68d8      	ldr	r0, [r3, #12]
 8016f4a:	b954      	cbnz	r4, 8016f62 <__assert_func+0x26>
 8016f4c:	4b07      	ldr	r3, [pc, #28]	@ (8016f6c <__assert_func+0x30>)
 8016f4e:	461c      	mov	r4, r3
 8016f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f54:	9100      	str	r1, [sp, #0]
 8016f56:	462b      	mov	r3, r5
 8016f58:	4905      	ldr	r1, [pc, #20]	@ (8016f70 <__assert_func+0x34>)
 8016f5a:	f000 f86f 	bl	801703c <fiprintf>
 8016f5e:	f7fd fc83 	bl	8014868 <abort>
 8016f62:	4b04      	ldr	r3, [pc, #16]	@ (8016f74 <__assert_func+0x38>)
 8016f64:	e7f4      	b.n	8016f50 <__assert_func+0x14>
 8016f66:	bf00      	nop
 8016f68:	20000044 	.word	0x20000044
 8016f6c:	08018f5e 	.word	0x08018f5e
 8016f70:	08018f30 	.word	0x08018f30
 8016f74:	08018f23 	.word	0x08018f23

08016f78 <_calloc_r>:
 8016f78:	b570      	push	{r4, r5, r6, lr}
 8016f7a:	fba1 5402 	umull	r5, r4, r1, r2
 8016f7e:	b93c      	cbnz	r4, 8016f90 <_calloc_r+0x18>
 8016f80:	4629      	mov	r1, r5
 8016f82:	f7fd fcab 	bl	80148dc <_malloc_r>
 8016f86:	4606      	mov	r6, r0
 8016f88:	b928      	cbnz	r0, 8016f96 <_calloc_r+0x1e>
 8016f8a:	2600      	movs	r6, #0
 8016f8c:	4630      	mov	r0, r6
 8016f8e:	bd70      	pop	{r4, r5, r6, pc}
 8016f90:	220c      	movs	r2, #12
 8016f92:	6002      	str	r2, [r0, #0]
 8016f94:	e7f9      	b.n	8016f8a <_calloc_r+0x12>
 8016f96:	462a      	mov	r2, r5
 8016f98:	4621      	mov	r1, r4
 8016f9a:	f7fe fab6 	bl	801550a <memset>
 8016f9e:	e7f5      	b.n	8016f8c <_calloc_r+0x14>

08016fa0 <__ascii_mbtowc>:
 8016fa0:	b082      	sub	sp, #8
 8016fa2:	b901      	cbnz	r1, 8016fa6 <__ascii_mbtowc+0x6>
 8016fa4:	a901      	add	r1, sp, #4
 8016fa6:	b142      	cbz	r2, 8016fba <__ascii_mbtowc+0x1a>
 8016fa8:	b14b      	cbz	r3, 8016fbe <__ascii_mbtowc+0x1e>
 8016faa:	7813      	ldrb	r3, [r2, #0]
 8016fac:	600b      	str	r3, [r1, #0]
 8016fae:	7812      	ldrb	r2, [r2, #0]
 8016fb0:	1e10      	subs	r0, r2, #0
 8016fb2:	bf18      	it	ne
 8016fb4:	2001      	movne	r0, #1
 8016fb6:	b002      	add	sp, #8
 8016fb8:	4770      	bx	lr
 8016fba:	4610      	mov	r0, r2
 8016fbc:	e7fb      	b.n	8016fb6 <__ascii_mbtowc+0x16>
 8016fbe:	f06f 0001 	mvn.w	r0, #1
 8016fc2:	e7f8      	b.n	8016fb6 <__ascii_mbtowc+0x16>

08016fc4 <_realloc_r>:
 8016fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc8:	4680      	mov	r8, r0
 8016fca:	4615      	mov	r5, r2
 8016fcc:	460c      	mov	r4, r1
 8016fce:	b921      	cbnz	r1, 8016fda <_realloc_r+0x16>
 8016fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd4:	4611      	mov	r1, r2
 8016fd6:	f7fd bc81 	b.w	80148dc <_malloc_r>
 8016fda:	b92a      	cbnz	r2, 8016fe8 <_realloc_r+0x24>
 8016fdc:	f7ff f9c4 	bl	8016368 <_free_r>
 8016fe0:	2400      	movs	r4, #0
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fe8:	f000 f83a 	bl	8017060 <_malloc_usable_size_r>
 8016fec:	4285      	cmp	r5, r0
 8016fee:	4606      	mov	r6, r0
 8016ff0:	d802      	bhi.n	8016ff8 <_realloc_r+0x34>
 8016ff2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016ff6:	d8f4      	bhi.n	8016fe2 <_realloc_r+0x1e>
 8016ff8:	4629      	mov	r1, r5
 8016ffa:	4640      	mov	r0, r8
 8016ffc:	f7fd fc6e 	bl	80148dc <_malloc_r>
 8017000:	4607      	mov	r7, r0
 8017002:	2800      	cmp	r0, #0
 8017004:	d0ec      	beq.n	8016fe0 <_realloc_r+0x1c>
 8017006:	42b5      	cmp	r5, r6
 8017008:	462a      	mov	r2, r5
 801700a:	4621      	mov	r1, r4
 801700c:	bf28      	it	cs
 801700e:	4632      	movcs	r2, r6
 8017010:	f7fe fb4f 	bl	80156b2 <memcpy>
 8017014:	4621      	mov	r1, r4
 8017016:	4640      	mov	r0, r8
 8017018:	f7ff f9a6 	bl	8016368 <_free_r>
 801701c:	463c      	mov	r4, r7
 801701e:	e7e0      	b.n	8016fe2 <_realloc_r+0x1e>

08017020 <__ascii_wctomb>:
 8017020:	4603      	mov	r3, r0
 8017022:	4608      	mov	r0, r1
 8017024:	b141      	cbz	r1, 8017038 <__ascii_wctomb+0x18>
 8017026:	2aff      	cmp	r2, #255	@ 0xff
 8017028:	d904      	bls.n	8017034 <__ascii_wctomb+0x14>
 801702a:	228a      	movs	r2, #138	@ 0x8a
 801702c:	601a      	str	r2, [r3, #0]
 801702e:	f04f 30ff 	mov.w	r0, #4294967295
 8017032:	4770      	bx	lr
 8017034:	700a      	strb	r2, [r1, #0]
 8017036:	2001      	movs	r0, #1
 8017038:	4770      	bx	lr
	...

0801703c <fiprintf>:
 801703c:	b40e      	push	{r1, r2, r3}
 801703e:	b503      	push	{r0, r1, lr}
 8017040:	4601      	mov	r1, r0
 8017042:	ab03      	add	r3, sp, #12
 8017044:	4805      	ldr	r0, [pc, #20]	@ (801705c <fiprintf+0x20>)
 8017046:	f853 2b04 	ldr.w	r2, [r3], #4
 801704a:	6800      	ldr	r0, [r0, #0]
 801704c:	9301      	str	r3, [sp, #4]
 801704e:	f000 f839 	bl	80170c4 <_vfiprintf_r>
 8017052:	b002      	add	sp, #8
 8017054:	f85d eb04 	ldr.w	lr, [sp], #4
 8017058:	b003      	add	sp, #12
 801705a:	4770      	bx	lr
 801705c:	20000044 	.word	0x20000044

08017060 <_malloc_usable_size_r>:
 8017060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017064:	1f18      	subs	r0, r3, #4
 8017066:	2b00      	cmp	r3, #0
 8017068:	bfbc      	itt	lt
 801706a:	580b      	ldrlt	r3, [r1, r0]
 801706c:	18c0      	addlt	r0, r0, r3
 801706e:	4770      	bx	lr

08017070 <__sfputc_r>:
 8017070:	6893      	ldr	r3, [r2, #8]
 8017072:	3b01      	subs	r3, #1
 8017074:	2b00      	cmp	r3, #0
 8017076:	b410      	push	{r4}
 8017078:	6093      	str	r3, [r2, #8]
 801707a:	da08      	bge.n	801708e <__sfputc_r+0x1e>
 801707c:	6994      	ldr	r4, [r2, #24]
 801707e:	42a3      	cmp	r3, r4
 8017080:	db01      	blt.n	8017086 <__sfputc_r+0x16>
 8017082:	290a      	cmp	r1, #10
 8017084:	d103      	bne.n	801708e <__sfputc_r+0x1e>
 8017086:	f85d 4b04 	ldr.w	r4, [sp], #4
 801708a:	f000 b933 	b.w	80172f4 <__swbuf_r>
 801708e:	6813      	ldr	r3, [r2, #0]
 8017090:	1c58      	adds	r0, r3, #1
 8017092:	6010      	str	r0, [r2, #0]
 8017094:	7019      	strb	r1, [r3, #0]
 8017096:	4608      	mov	r0, r1
 8017098:	f85d 4b04 	ldr.w	r4, [sp], #4
 801709c:	4770      	bx	lr

0801709e <__sfputs_r>:
 801709e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170a0:	4606      	mov	r6, r0
 80170a2:	460f      	mov	r7, r1
 80170a4:	4614      	mov	r4, r2
 80170a6:	18d5      	adds	r5, r2, r3
 80170a8:	42ac      	cmp	r4, r5
 80170aa:	d101      	bne.n	80170b0 <__sfputs_r+0x12>
 80170ac:	2000      	movs	r0, #0
 80170ae:	e007      	b.n	80170c0 <__sfputs_r+0x22>
 80170b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170b4:	463a      	mov	r2, r7
 80170b6:	4630      	mov	r0, r6
 80170b8:	f7ff ffda 	bl	8017070 <__sfputc_r>
 80170bc:	1c43      	adds	r3, r0, #1
 80170be:	d1f3      	bne.n	80170a8 <__sfputs_r+0xa>
 80170c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080170c4 <_vfiprintf_r>:
 80170c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c8:	460d      	mov	r5, r1
 80170ca:	b09d      	sub	sp, #116	@ 0x74
 80170cc:	4614      	mov	r4, r2
 80170ce:	4698      	mov	r8, r3
 80170d0:	4606      	mov	r6, r0
 80170d2:	b118      	cbz	r0, 80170dc <_vfiprintf_r+0x18>
 80170d4:	6a03      	ldr	r3, [r0, #32]
 80170d6:	b90b      	cbnz	r3, 80170dc <_vfiprintf_r+0x18>
 80170d8:	f7fe f97e 	bl	80153d8 <__sinit>
 80170dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80170de:	07d9      	lsls	r1, r3, #31
 80170e0:	d405      	bmi.n	80170ee <_vfiprintf_r+0x2a>
 80170e2:	89ab      	ldrh	r3, [r5, #12]
 80170e4:	059a      	lsls	r2, r3, #22
 80170e6:	d402      	bmi.n	80170ee <_vfiprintf_r+0x2a>
 80170e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80170ea:	f7fe fae0 	bl	80156ae <__retarget_lock_acquire_recursive>
 80170ee:	89ab      	ldrh	r3, [r5, #12]
 80170f0:	071b      	lsls	r3, r3, #28
 80170f2:	d501      	bpl.n	80170f8 <_vfiprintf_r+0x34>
 80170f4:	692b      	ldr	r3, [r5, #16]
 80170f6:	b99b      	cbnz	r3, 8017120 <_vfiprintf_r+0x5c>
 80170f8:	4629      	mov	r1, r5
 80170fa:	4630      	mov	r0, r6
 80170fc:	f000 f938 	bl	8017370 <__swsetup_r>
 8017100:	b170      	cbz	r0, 8017120 <_vfiprintf_r+0x5c>
 8017102:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017104:	07dc      	lsls	r4, r3, #31
 8017106:	d504      	bpl.n	8017112 <_vfiprintf_r+0x4e>
 8017108:	f04f 30ff 	mov.w	r0, #4294967295
 801710c:	b01d      	add	sp, #116	@ 0x74
 801710e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017112:	89ab      	ldrh	r3, [r5, #12]
 8017114:	0598      	lsls	r0, r3, #22
 8017116:	d4f7      	bmi.n	8017108 <_vfiprintf_r+0x44>
 8017118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801711a:	f7fe fac9 	bl	80156b0 <__retarget_lock_release_recursive>
 801711e:	e7f3      	b.n	8017108 <_vfiprintf_r+0x44>
 8017120:	2300      	movs	r3, #0
 8017122:	9309      	str	r3, [sp, #36]	@ 0x24
 8017124:	2320      	movs	r3, #32
 8017126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801712a:	f8cd 800c 	str.w	r8, [sp, #12]
 801712e:	2330      	movs	r3, #48	@ 0x30
 8017130:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80172e0 <_vfiprintf_r+0x21c>
 8017134:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017138:	f04f 0901 	mov.w	r9, #1
 801713c:	4623      	mov	r3, r4
 801713e:	469a      	mov	sl, r3
 8017140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017144:	b10a      	cbz	r2, 801714a <_vfiprintf_r+0x86>
 8017146:	2a25      	cmp	r2, #37	@ 0x25
 8017148:	d1f9      	bne.n	801713e <_vfiprintf_r+0x7a>
 801714a:	ebba 0b04 	subs.w	fp, sl, r4
 801714e:	d00b      	beq.n	8017168 <_vfiprintf_r+0xa4>
 8017150:	465b      	mov	r3, fp
 8017152:	4622      	mov	r2, r4
 8017154:	4629      	mov	r1, r5
 8017156:	4630      	mov	r0, r6
 8017158:	f7ff ffa1 	bl	801709e <__sfputs_r>
 801715c:	3001      	adds	r0, #1
 801715e:	f000 80a7 	beq.w	80172b0 <_vfiprintf_r+0x1ec>
 8017162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017164:	445a      	add	r2, fp
 8017166:	9209      	str	r2, [sp, #36]	@ 0x24
 8017168:	f89a 3000 	ldrb.w	r3, [sl]
 801716c:	2b00      	cmp	r3, #0
 801716e:	f000 809f 	beq.w	80172b0 <_vfiprintf_r+0x1ec>
 8017172:	2300      	movs	r3, #0
 8017174:	f04f 32ff 	mov.w	r2, #4294967295
 8017178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801717c:	f10a 0a01 	add.w	sl, sl, #1
 8017180:	9304      	str	r3, [sp, #16]
 8017182:	9307      	str	r3, [sp, #28]
 8017184:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017188:	931a      	str	r3, [sp, #104]	@ 0x68
 801718a:	4654      	mov	r4, sl
 801718c:	2205      	movs	r2, #5
 801718e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017192:	4853      	ldr	r0, [pc, #332]	@ (80172e0 <_vfiprintf_r+0x21c>)
 8017194:	f7e9 f84c 	bl	8000230 <memchr>
 8017198:	9a04      	ldr	r2, [sp, #16]
 801719a:	b9d8      	cbnz	r0, 80171d4 <_vfiprintf_r+0x110>
 801719c:	06d1      	lsls	r1, r2, #27
 801719e:	bf44      	itt	mi
 80171a0:	2320      	movmi	r3, #32
 80171a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171a6:	0713      	lsls	r3, r2, #28
 80171a8:	bf44      	itt	mi
 80171aa:	232b      	movmi	r3, #43	@ 0x2b
 80171ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171b0:	f89a 3000 	ldrb.w	r3, [sl]
 80171b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80171b6:	d015      	beq.n	80171e4 <_vfiprintf_r+0x120>
 80171b8:	9a07      	ldr	r2, [sp, #28]
 80171ba:	4654      	mov	r4, sl
 80171bc:	2000      	movs	r0, #0
 80171be:	f04f 0c0a 	mov.w	ip, #10
 80171c2:	4621      	mov	r1, r4
 80171c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171c8:	3b30      	subs	r3, #48	@ 0x30
 80171ca:	2b09      	cmp	r3, #9
 80171cc:	d94b      	bls.n	8017266 <_vfiprintf_r+0x1a2>
 80171ce:	b1b0      	cbz	r0, 80171fe <_vfiprintf_r+0x13a>
 80171d0:	9207      	str	r2, [sp, #28]
 80171d2:	e014      	b.n	80171fe <_vfiprintf_r+0x13a>
 80171d4:	eba0 0308 	sub.w	r3, r0, r8
 80171d8:	fa09 f303 	lsl.w	r3, r9, r3
 80171dc:	4313      	orrs	r3, r2
 80171de:	9304      	str	r3, [sp, #16]
 80171e0:	46a2      	mov	sl, r4
 80171e2:	e7d2      	b.n	801718a <_vfiprintf_r+0xc6>
 80171e4:	9b03      	ldr	r3, [sp, #12]
 80171e6:	1d19      	adds	r1, r3, #4
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	9103      	str	r1, [sp, #12]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	bfbb      	ittet	lt
 80171f0:	425b      	neglt	r3, r3
 80171f2:	f042 0202 	orrlt.w	r2, r2, #2
 80171f6:	9307      	strge	r3, [sp, #28]
 80171f8:	9307      	strlt	r3, [sp, #28]
 80171fa:	bfb8      	it	lt
 80171fc:	9204      	strlt	r2, [sp, #16]
 80171fe:	7823      	ldrb	r3, [r4, #0]
 8017200:	2b2e      	cmp	r3, #46	@ 0x2e
 8017202:	d10a      	bne.n	801721a <_vfiprintf_r+0x156>
 8017204:	7863      	ldrb	r3, [r4, #1]
 8017206:	2b2a      	cmp	r3, #42	@ 0x2a
 8017208:	d132      	bne.n	8017270 <_vfiprintf_r+0x1ac>
 801720a:	9b03      	ldr	r3, [sp, #12]
 801720c:	1d1a      	adds	r2, r3, #4
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	9203      	str	r2, [sp, #12]
 8017212:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017216:	3402      	adds	r4, #2
 8017218:	9305      	str	r3, [sp, #20]
 801721a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80172f0 <_vfiprintf_r+0x22c>
 801721e:	7821      	ldrb	r1, [r4, #0]
 8017220:	2203      	movs	r2, #3
 8017222:	4650      	mov	r0, sl
 8017224:	f7e9 f804 	bl	8000230 <memchr>
 8017228:	b138      	cbz	r0, 801723a <_vfiprintf_r+0x176>
 801722a:	9b04      	ldr	r3, [sp, #16]
 801722c:	eba0 000a 	sub.w	r0, r0, sl
 8017230:	2240      	movs	r2, #64	@ 0x40
 8017232:	4082      	lsls	r2, r0
 8017234:	4313      	orrs	r3, r2
 8017236:	3401      	adds	r4, #1
 8017238:	9304      	str	r3, [sp, #16]
 801723a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801723e:	4829      	ldr	r0, [pc, #164]	@ (80172e4 <_vfiprintf_r+0x220>)
 8017240:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017244:	2206      	movs	r2, #6
 8017246:	f7e8 fff3 	bl	8000230 <memchr>
 801724a:	2800      	cmp	r0, #0
 801724c:	d03f      	beq.n	80172ce <_vfiprintf_r+0x20a>
 801724e:	4b26      	ldr	r3, [pc, #152]	@ (80172e8 <_vfiprintf_r+0x224>)
 8017250:	bb1b      	cbnz	r3, 801729a <_vfiprintf_r+0x1d6>
 8017252:	9b03      	ldr	r3, [sp, #12]
 8017254:	3307      	adds	r3, #7
 8017256:	f023 0307 	bic.w	r3, r3, #7
 801725a:	3308      	adds	r3, #8
 801725c:	9303      	str	r3, [sp, #12]
 801725e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017260:	443b      	add	r3, r7
 8017262:	9309      	str	r3, [sp, #36]	@ 0x24
 8017264:	e76a      	b.n	801713c <_vfiprintf_r+0x78>
 8017266:	fb0c 3202 	mla	r2, ip, r2, r3
 801726a:	460c      	mov	r4, r1
 801726c:	2001      	movs	r0, #1
 801726e:	e7a8      	b.n	80171c2 <_vfiprintf_r+0xfe>
 8017270:	2300      	movs	r3, #0
 8017272:	3401      	adds	r4, #1
 8017274:	9305      	str	r3, [sp, #20]
 8017276:	4619      	mov	r1, r3
 8017278:	f04f 0c0a 	mov.w	ip, #10
 801727c:	4620      	mov	r0, r4
 801727e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017282:	3a30      	subs	r2, #48	@ 0x30
 8017284:	2a09      	cmp	r2, #9
 8017286:	d903      	bls.n	8017290 <_vfiprintf_r+0x1cc>
 8017288:	2b00      	cmp	r3, #0
 801728a:	d0c6      	beq.n	801721a <_vfiprintf_r+0x156>
 801728c:	9105      	str	r1, [sp, #20]
 801728e:	e7c4      	b.n	801721a <_vfiprintf_r+0x156>
 8017290:	fb0c 2101 	mla	r1, ip, r1, r2
 8017294:	4604      	mov	r4, r0
 8017296:	2301      	movs	r3, #1
 8017298:	e7f0      	b.n	801727c <_vfiprintf_r+0x1b8>
 801729a:	ab03      	add	r3, sp, #12
 801729c:	9300      	str	r3, [sp, #0]
 801729e:	462a      	mov	r2, r5
 80172a0:	4b12      	ldr	r3, [pc, #72]	@ (80172ec <_vfiprintf_r+0x228>)
 80172a2:	a904      	add	r1, sp, #16
 80172a4:	4630      	mov	r0, r6
 80172a6:	f7fd fc53 	bl	8014b50 <_printf_float>
 80172aa:	4607      	mov	r7, r0
 80172ac:	1c78      	adds	r0, r7, #1
 80172ae:	d1d6      	bne.n	801725e <_vfiprintf_r+0x19a>
 80172b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172b2:	07d9      	lsls	r1, r3, #31
 80172b4:	d405      	bmi.n	80172c2 <_vfiprintf_r+0x1fe>
 80172b6:	89ab      	ldrh	r3, [r5, #12]
 80172b8:	059a      	lsls	r2, r3, #22
 80172ba:	d402      	bmi.n	80172c2 <_vfiprintf_r+0x1fe>
 80172bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172be:	f7fe f9f7 	bl	80156b0 <__retarget_lock_release_recursive>
 80172c2:	89ab      	ldrh	r3, [r5, #12]
 80172c4:	065b      	lsls	r3, r3, #25
 80172c6:	f53f af1f 	bmi.w	8017108 <_vfiprintf_r+0x44>
 80172ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80172cc:	e71e      	b.n	801710c <_vfiprintf_r+0x48>
 80172ce:	ab03      	add	r3, sp, #12
 80172d0:	9300      	str	r3, [sp, #0]
 80172d2:	462a      	mov	r2, r5
 80172d4:	4b05      	ldr	r3, [pc, #20]	@ (80172ec <_vfiprintf_r+0x228>)
 80172d6:	a904      	add	r1, sp, #16
 80172d8:	4630      	mov	r0, r6
 80172da:	f7fd fed1 	bl	8015080 <_printf_i>
 80172de:	e7e4      	b.n	80172aa <_vfiprintf_r+0x1e6>
 80172e0:	08018f08 	.word	0x08018f08
 80172e4:	08018f12 	.word	0x08018f12
 80172e8:	08014b51 	.word	0x08014b51
 80172ec:	0801709f 	.word	0x0801709f
 80172f0:	08018f0e 	.word	0x08018f0e

080172f4 <__swbuf_r>:
 80172f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172f6:	460e      	mov	r6, r1
 80172f8:	4614      	mov	r4, r2
 80172fa:	4605      	mov	r5, r0
 80172fc:	b118      	cbz	r0, 8017306 <__swbuf_r+0x12>
 80172fe:	6a03      	ldr	r3, [r0, #32]
 8017300:	b90b      	cbnz	r3, 8017306 <__swbuf_r+0x12>
 8017302:	f7fe f869 	bl	80153d8 <__sinit>
 8017306:	69a3      	ldr	r3, [r4, #24]
 8017308:	60a3      	str	r3, [r4, #8]
 801730a:	89a3      	ldrh	r3, [r4, #12]
 801730c:	071a      	lsls	r2, r3, #28
 801730e:	d501      	bpl.n	8017314 <__swbuf_r+0x20>
 8017310:	6923      	ldr	r3, [r4, #16]
 8017312:	b943      	cbnz	r3, 8017326 <__swbuf_r+0x32>
 8017314:	4621      	mov	r1, r4
 8017316:	4628      	mov	r0, r5
 8017318:	f000 f82a 	bl	8017370 <__swsetup_r>
 801731c:	b118      	cbz	r0, 8017326 <__swbuf_r+0x32>
 801731e:	f04f 37ff 	mov.w	r7, #4294967295
 8017322:	4638      	mov	r0, r7
 8017324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017326:	6823      	ldr	r3, [r4, #0]
 8017328:	6922      	ldr	r2, [r4, #16]
 801732a:	1a98      	subs	r0, r3, r2
 801732c:	6963      	ldr	r3, [r4, #20]
 801732e:	b2f6      	uxtb	r6, r6
 8017330:	4283      	cmp	r3, r0
 8017332:	4637      	mov	r7, r6
 8017334:	dc05      	bgt.n	8017342 <__swbuf_r+0x4e>
 8017336:	4621      	mov	r1, r4
 8017338:	4628      	mov	r0, r5
 801733a:	f7ff fdbd 	bl	8016eb8 <_fflush_r>
 801733e:	2800      	cmp	r0, #0
 8017340:	d1ed      	bne.n	801731e <__swbuf_r+0x2a>
 8017342:	68a3      	ldr	r3, [r4, #8]
 8017344:	3b01      	subs	r3, #1
 8017346:	60a3      	str	r3, [r4, #8]
 8017348:	6823      	ldr	r3, [r4, #0]
 801734a:	1c5a      	adds	r2, r3, #1
 801734c:	6022      	str	r2, [r4, #0]
 801734e:	701e      	strb	r6, [r3, #0]
 8017350:	6962      	ldr	r2, [r4, #20]
 8017352:	1c43      	adds	r3, r0, #1
 8017354:	429a      	cmp	r2, r3
 8017356:	d004      	beq.n	8017362 <__swbuf_r+0x6e>
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	07db      	lsls	r3, r3, #31
 801735c:	d5e1      	bpl.n	8017322 <__swbuf_r+0x2e>
 801735e:	2e0a      	cmp	r6, #10
 8017360:	d1df      	bne.n	8017322 <__swbuf_r+0x2e>
 8017362:	4621      	mov	r1, r4
 8017364:	4628      	mov	r0, r5
 8017366:	f7ff fda7 	bl	8016eb8 <_fflush_r>
 801736a:	2800      	cmp	r0, #0
 801736c:	d0d9      	beq.n	8017322 <__swbuf_r+0x2e>
 801736e:	e7d6      	b.n	801731e <__swbuf_r+0x2a>

08017370 <__swsetup_r>:
 8017370:	b538      	push	{r3, r4, r5, lr}
 8017372:	4b29      	ldr	r3, [pc, #164]	@ (8017418 <__swsetup_r+0xa8>)
 8017374:	4605      	mov	r5, r0
 8017376:	6818      	ldr	r0, [r3, #0]
 8017378:	460c      	mov	r4, r1
 801737a:	b118      	cbz	r0, 8017384 <__swsetup_r+0x14>
 801737c:	6a03      	ldr	r3, [r0, #32]
 801737e:	b90b      	cbnz	r3, 8017384 <__swsetup_r+0x14>
 8017380:	f7fe f82a 	bl	80153d8 <__sinit>
 8017384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017388:	0719      	lsls	r1, r3, #28
 801738a:	d422      	bmi.n	80173d2 <__swsetup_r+0x62>
 801738c:	06da      	lsls	r2, r3, #27
 801738e:	d407      	bmi.n	80173a0 <__swsetup_r+0x30>
 8017390:	2209      	movs	r2, #9
 8017392:	602a      	str	r2, [r5, #0]
 8017394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017398:	81a3      	strh	r3, [r4, #12]
 801739a:	f04f 30ff 	mov.w	r0, #4294967295
 801739e:	e033      	b.n	8017408 <__swsetup_r+0x98>
 80173a0:	0758      	lsls	r0, r3, #29
 80173a2:	d512      	bpl.n	80173ca <__swsetup_r+0x5a>
 80173a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80173a6:	b141      	cbz	r1, 80173ba <__swsetup_r+0x4a>
 80173a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80173ac:	4299      	cmp	r1, r3
 80173ae:	d002      	beq.n	80173b6 <__swsetup_r+0x46>
 80173b0:	4628      	mov	r0, r5
 80173b2:	f7fe ffd9 	bl	8016368 <_free_r>
 80173b6:	2300      	movs	r3, #0
 80173b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80173ba:	89a3      	ldrh	r3, [r4, #12]
 80173bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80173c0:	81a3      	strh	r3, [r4, #12]
 80173c2:	2300      	movs	r3, #0
 80173c4:	6063      	str	r3, [r4, #4]
 80173c6:	6923      	ldr	r3, [r4, #16]
 80173c8:	6023      	str	r3, [r4, #0]
 80173ca:	89a3      	ldrh	r3, [r4, #12]
 80173cc:	f043 0308 	orr.w	r3, r3, #8
 80173d0:	81a3      	strh	r3, [r4, #12]
 80173d2:	6923      	ldr	r3, [r4, #16]
 80173d4:	b94b      	cbnz	r3, 80173ea <__swsetup_r+0x7a>
 80173d6:	89a3      	ldrh	r3, [r4, #12]
 80173d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80173dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80173e0:	d003      	beq.n	80173ea <__swsetup_r+0x7a>
 80173e2:	4621      	mov	r1, r4
 80173e4:	4628      	mov	r0, r5
 80173e6:	f000 f83f 	bl	8017468 <__smakebuf_r>
 80173ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173ee:	f013 0201 	ands.w	r2, r3, #1
 80173f2:	d00a      	beq.n	801740a <__swsetup_r+0x9a>
 80173f4:	2200      	movs	r2, #0
 80173f6:	60a2      	str	r2, [r4, #8]
 80173f8:	6962      	ldr	r2, [r4, #20]
 80173fa:	4252      	negs	r2, r2
 80173fc:	61a2      	str	r2, [r4, #24]
 80173fe:	6922      	ldr	r2, [r4, #16]
 8017400:	b942      	cbnz	r2, 8017414 <__swsetup_r+0xa4>
 8017402:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017406:	d1c5      	bne.n	8017394 <__swsetup_r+0x24>
 8017408:	bd38      	pop	{r3, r4, r5, pc}
 801740a:	0799      	lsls	r1, r3, #30
 801740c:	bf58      	it	pl
 801740e:	6962      	ldrpl	r2, [r4, #20]
 8017410:	60a2      	str	r2, [r4, #8]
 8017412:	e7f4      	b.n	80173fe <__swsetup_r+0x8e>
 8017414:	2000      	movs	r0, #0
 8017416:	e7f7      	b.n	8017408 <__swsetup_r+0x98>
 8017418:	20000044 	.word	0x20000044

0801741c <__swhatbuf_r>:
 801741c:	b570      	push	{r4, r5, r6, lr}
 801741e:	460c      	mov	r4, r1
 8017420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017424:	2900      	cmp	r1, #0
 8017426:	b096      	sub	sp, #88	@ 0x58
 8017428:	4615      	mov	r5, r2
 801742a:	461e      	mov	r6, r3
 801742c:	da0d      	bge.n	801744a <__swhatbuf_r+0x2e>
 801742e:	89a3      	ldrh	r3, [r4, #12]
 8017430:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017434:	f04f 0100 	mov.w	r1, #0
 8017438:	bf14      	ite	ne
 801743a:	2340      	movne	r3, #64	@ 0x40
 801743c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017440:	2000      	movs	r0, #0
 8017442:	6031      	str	r1, [r6, #0]
 8017444:	602b      	str	r3, [r5, #0]
 8017446:	b016      	add	sp, #88	@ 0x58
 8017448:	bd70      	pop	{r4, r5, r6, pc}
 801744a:	466a      	mov	r2, sp
 801744c:	f000 f848 	bl	80174e0 <_fstat_r>
 8017450:	2800      	cmp	r0, #0
 8017452:	dbec      	blt.n	801742e <__swhatbuf_r+0x12>
 8017454:	9901      	ldr	r1, [sp, #4]
 8017456:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801745a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801745e:	4259      	negs	r1, r3
 8017460:	4159      	adcs	r1, r3
 8017462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017466:	e7eb      	b.n	8017440 <__swhatbuf_r+0x24>

08017468 <__smakebuf_r>:
 8017468:	898b      	ldrh	r3, [r1, #12]
 801746a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801746c:	079d      	lsls	r5, r3, #30
 801746e:	4606      	mov	r6, r0
 8017470:	460c      	mov	r4, r1
 8017472:	d507      	bpl.n	8017484 <__smakebuf_r+0x1c>
 8017474:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017478:	6023      	str	r3, [r4, #0]
 801747a:	6123      	str	r3, [r4, #16]
 801747c:	2301      	movs	r3, #1
 801747e:	6163      	str	r3, [r4, #20]
 8017480:	b003      	add	sp, #12
 8017482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017484:	ab01      	add	r3, sp, #4
 8017486:	466a      	mov	r2, sp
 8017488:	f7ff ffc8 	bl	801741c <__swhatbuf_r>
 801748c:	9f00      	ldr	r7, [sp, #0]
 801748e:	4605      	mov	r5, r0
 8017490:	4639      	mov	r1, r7
 8017492:	4630      	mov	r0, r6
 8017494:	f7fd fa22 	bl	80148dc <_malloc_r>
 8017498:	b948      	cbnz	r0, 80174ae <__smakebuf_r+0x46>
 801749a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801749e:	059a      	lsls	r2, r3, #22
 80174a0:	d4ee      	bmi.n	8017480 <__smakebuf_r+0x18>
 80174a2:	f023 0303 	bic.w	r3, r3, #3
 80174a6:	f043 0302 	orr.w	r3, r3, #2
 80174aa:	81a3      	strh	r3, [r4, #12]
 80174ac:	e7e2      	b.n	8017474 <__smakebuf_r+0xc>
 80174ae:	89a3      	ldrh	r3, [r4, #12]
 80174b0:	6020      	str	r0, [r4, #0]
 80174b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80174b6:	81a3      	strh	r3, [r4, #12]
 80174b8:	9b01      	ldr	r3, [sp, #4]
 80174ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80174be:	b15b      	cbz	r3, 80174d8 <__smakebuf_r+0x70>
 80174c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174c4:	4630      	mov	r0, r6
 80174c6:	f000 f81d 	bl	8017504 <_isatty_r>
 80174ca:	b128      	cbz	r0, 80174d8 <__smakebuf_r+0x70>
 80174cc:	89a3      	ldrh	r3, [r4, #12]
 80174ce:	f023 0303 	bic.w	r3, r3, #3
 80174d2:	f043 0301 	orr.w	r3, r3, #1
 80174d6:	81a3      	strh	r3, [r4, #12]
 80174d8:	89a3      	ldrh	r3, [r4, #12]
 80174da:	431d      	orrs	r5, r3
 80174dc:	81a5      	strh	r5, [r4, #12]
 80174de:	e7cf      	b.n	8017480 <__smakebuf_r+0x18>

080174e0 <_fstat_r>:
 80174e0:	b538      	push	{r3, r4, r5, lr}
 80174e2:	4d07      	ldr	r5, [pc, #28]	@ (8017500 <_fstat_r+0x20>)
 80174e4:	2300      	movs	r3, #0
 80174e6:	4604      	mov	r4, r0
 80174e8:	4608      	mov	r0, r1
 80174ea:	4611      	mov	r1, r2
 80174ec:	602b      	str	r3, [r5, #0]
 80174ee:	f7f6 fb87 	bl	800dc00 <_fstat>
 80174f2:	1c43      	adds	r3, r0, #1
 80174f4:	d102      	bne.n	80174fc <_fstat_r+0x1c>
 80174f6:	682b      	ldr	r3, [r5, #0]
 80174f8:	b103      	cbz	r3, 80174fc <_fstat_r+0x1c>
 80174fa:	6023      	str	r3, [r4, #0]
 80174fc:	bd38      	pop	{r3, r4, r5, pc}
 80174fe:	bf00      	nop
 8017500:	20000718 	.word	0x20000718

08017504 <_isatty_r>:
 8017504:	b538      	push	{r3, r4, r5, lr}
 8017506:	4d06      	ldr	r5, [pc, #24]	@ (8017520 <_isatty_r+0x1c>)
 8017508:	2300      	movs	r3, #0
 801750a:	4604      	mov	r4, r0
 801750c:	4608      	mov	r0, r1
 801750e:	602b      	str	r3, [r5, #0]
 8017510:	f7f6 fb86 	bl	800dc20 <_isatty>
 8017514:	1c43      	adds	r3, r0, #1
 8017516:	d102      	bne.n	801751e <_isatty_r+0x1a>
 8017518:	682b      	ldr	r3, [r5, #0]
 801751a:	b103      	cbz	r3, 801751e <_isatty_r+0x1a>
 801751c:	6023      	str	r3, [r4, #0]
 801751e:	bd38      	pop	{r3, r4, r5, pc}
 8017520:	20000718 	.word	0x20000718

08017524 <_Unwind_GetDataRelBase>:
 8017524:	b508      	push	{r3, lr}
 8017526:	f7fd f99f 	bl	8014868 <abort>

0801752a <_Unwind_GetTextRelBase>:
 801752a:	b508      	push	{r3, lr}
 801752c:	f7ff fffa 	bl	8017524 <_Unwind_GetDataRelBase>

08017530 <_init>:
 8017530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017532:	bf00      	nop
 8017534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017536:	bc08      	pop	{r3}
 8017538:	469e      	mov	lr, r3
 801753a:	4770      	bx	lr

0801753c <_fini>:
 801753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801753e:	bf00      	nop
 8017540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017542:	bc08      	pop	{r3}
 8017544:	469e      	mov	lr, r3
 8017546:	4770      	bx	lr
