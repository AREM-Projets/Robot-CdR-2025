
stm32_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001900  08014e10  08014e10  00015e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001238  08016710  08016710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d58  08017948  08017948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080186a0  080186a0  0001a1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080186a0  080186a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080186a8  080186a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080186ac  0001a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200001f0  0801889c  0001a1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0801889c  0001a6d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028de6  00000000  00000000  0001a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003891  00000000  00000000  00043006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc8  00000000  00000000  00046898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018b4  00000000  00000000  00048860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281e2  00000000  00000000  0004a114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbb6  00000000  00000000  000722f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e49b4  00000000  00000000  0008eeac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173860  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aae0  00000000  00000000  001738a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0017e384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014df8 	.word	0x08014df8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08014df8 	.word	0x08014df8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f001 b8f6 	b.w	8001eac <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <selfrel_offset31>:
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	bf4c      	ite	mi
 8000f9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000f9e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fa2:	4418      	add	r0, r3
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <search_EIT_table>:
 8000fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fac:	b349      	cbz	r1, 8001002 <search_EIT_table+0x5a>
 8000fae:	1e4f      	subs	r7, r1, #1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4615      	mov	r5, r2
 8000fb4:	463e      	mov	r6, r7
 8000fb6:	f04f 0900 	mov.w	r9, #0
 8000fba:	eb09 0106 	add.w	r1, r9, r6
 8000fbe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fc2:	1049      	asrs	r1, r1, #1
 8000fc4:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000fc8:	4640      	mov	r0, r8
 8000fca:	f7ff ffe3 	bl	8000f94 <selfrel_offset31>
 8000fce:	428f      	cmp	r7, r1
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000fd6:	d00f      	beq.n	8000ff8 <search_EIT_table+0x50>
 8000fd8:	3008      	adds	r0, #8
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	4420      	add	r0, r4
 8000fde:	d807      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000fe0:	f7ff ffd8 	bl	8000f94 <selfrel_offset31>
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d208      	bcs.n	8000ffc <search_EIT_table+0x54>
 8000fea:	f101 0901 	add.w	r9, r1, #1
 8000fee:	e7e4      	b.n	8000fba <search_EIT_table+0x12>
 8000ff0:	4589      	cmp	r9, r1
 8000ff2:	d006      	beq.n	8001002 <search_EIT_table+0x5a>
 8000ff4:	1e4e      	subs	r6, r1, #1
 8000ff6:	e7e0      	b.n	8000fba <search_EIT_table+0x12>
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	d8f9      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001002:	f04f 0800 	mov.w	r8, #0
 8001006:	4640      	mov	r0, r8
 8001008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800100c <__gnu_unwind_get_pr_addr>:
 800100c:	2801      	cmp	r0, #1
 800100e:	d007      	beq.n	8001020 <__gnu_unwind_get_pr_addr+0x14>
 8001010:	2802      	cmp	r0, #2
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x18>
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__gnu_unwind_get_pr_addr+0x1c>)
 8001016:	2800      	cmp	r0, #0
 8001018:	bf0c      	ite	eq
 800101a:	4618      	moveq	r0, r3
 800101c:	2000      	movne	r0, #0
 800101e:	4770      	bx	lr
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <__gnu_unwind_get_pr_addr+0x20>)
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <__gnu_unwind_get_pr_addr+0x24>)
 8001026:	4770      	bx	lr
 8001028:	080016d5 	.word	0x080016d5
 800102c:	080016d9 	.word	0x080016d9
 8001030:	080016dd 	.word	0x080016dd

08001034 <get_eit_entry>:
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <get_eit_entry+0x88>)
 8001038:	b083      	sub	sp, #12
 800103a:	4604      	mov	r4, r0
 800103c:	1e8d      	subs	r5, r1, #2
 800103e:	b31b      	cbz	r3, 8001088 <get_eit_entry+0x54>
 8001040:	a901      	add	r1, sp, #4
 8001042:	4628      	mov	r0, r5
 8001044:	f3af 8000 	nop.w
 8001048:	b388      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	462a      	mov	r2, r5
 800104e:	f7ff ffab 	bl	8000fa8 <search_EIT_table>
 8001052:	4601      	mov	r1, r0
 8001054:	b358      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 8001056:	f7ff ff9d 	bl	8000f94 <selfrel_offset31>
 800105a:	684b      	ldr	r3, [r1, #4]
 800105c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800105e:	2b01      	cmp	r3, #1
 8001060:	d028      	beq.n	80010b4 <get_eit_entry+0x80>
 8001062:	2b00      	cmp	r3, #0
 8001064:	f101 0004 	add.w	r0, r1, #4
 8001068:	db1f      	blt.n	80010aa <get_eit_entry+0x76>
 800106a:	f7ff ff93 	bl	8000f94 <selfrel_offset31>
 800106e:	2300      	movs	r3, #0
 8001070:	6523      	str	r3, [r4, #80]	@ 0x50
 8001072:	6803      	ldr	r3, [r0, #0]
 8001074:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0d      	blt.n	8001096 <get_eit_entry+0x62>
 800107a:	f7ff ff8b 	bl	8000f94 <selfrel_offset31>
 800107e:	4603      	mov	r3, r0
 8001080:	2000      	movs	r0, #0
 8001082:	6123      	str	r3, [r4, #16]
 8001084:	b003      	add	sp, #12
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <get_eit_entry+0x8c>)
 800108a:	490e      	ldr	r1, [pc, #56]	@ (80010c4 <get_eit_entry+0x90>)
 800108c:	1ac9      	subs	r1, r1, r3
 800108e:	10c9      	asrs	r1, r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	9101      	str	r1, [sp, #4]
 8001094:	e7da      	b.n	800104c <get_eit_entry+0x18>
 8001096:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800109a:	f7ff ffb7 	bl	800100c <__gnu_unwind_get_pr_addr>
 800109e:	4603      	mov	r3, r0
 80010a0:	b128      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 80010a2:	2000      	movs	r0, #0
 80010a4:	6123      	str	r3, [r4, #16]
 80010a6:	b003      	add	sp, #12
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	2301      	movs	r3, #1
 80010ac:	e7e0      	b.n	8001070 <get_eit_entry+0x3c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	2009      	movs	r0, #9
 80010b2:	e7e6      	b.n	8001082 <get_eit_entry+0x4e>
 80010b4:	2300      	movs	r3, #0
 80010b6:	2005      	movs	r0, #5
 80010b8:	e7e3      	b.n	8001082 <get_eit_entry+0x4e>
 80010ba:	bf00      	nop
 80010bc:	00000000 	.word	0x00000000
 80010c0:	08017948 	.word	0x08017948
 80010c4:	080186a0 	.word	0x080186a0

080010c8 <restore_non_core_regs>:
 80010c8:	6803      	ldr	r3, [r0, #0]
 80010ca:	07da      	lsls	r2, r3, #31
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	d406      	bmi.n	80010e0 <restore_non_core_regs+0x18>
 80010d2:	079b      	lsls	r3, r3, #30
 80010d4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80010d8:	d509      	bpl.n	80010ee <restore_non_core_regs+0x26>
 80010da:	f000 fc69 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	0759      	lsls	r1, r3, #29
 80010e2:	d509      	bpl.n	80010f8 <restore_non_core_regs+0x30>
 80010e4:	071a      	lsls	r2, r3, #28
 80010e6:	d50e      	bpl.n	8001106 <restore_non_core_regs+0x3e>
 80010e8:	06db      	lsls	r3, r3, #27
 80010ea:	d513      	bpl.n	8001114 <restore_non_core_regs+0x4c>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	f000 fc57 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	0759      	lsls	r1, r3, #29
 80010f6:	d4f5      	bmi.n	80010e4 <restore_non_core_regs+0x1c>
 80010f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010fc:	f000 fc60 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	071a      	lsls	r2, r3, #28
 8001104:	d4f0      	bmi.n	80010e8 <restore_non_core_regs+0x20>
 8001106:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800110a:	f000 fc61 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	06db      	lsls	r3, r3, #27
 8001112:	d4eb      	bmi.n	80010ec <restore_non_core_regs+0x24>
 8001114:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800111c:	f000 bc9c 	b.w	8001a58 <__gnu_Unwind_Restore_WMMXC>

08001120 <__gnu_unwind_24bit.constprop.0>:
 8001120:	2009      	movs	r0, #9
 8001122:	4770      	bx	lr

08001124 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001124:	4603      	mov	r3, r0
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	b100      	cbz	r0, 800112c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800112a:	4418      	add	r0, r3
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_DebugHook>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <unwind_phase2>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	4604      	mov	r4, r0
 8001138:	460e      	mov	r6, r1
 800113a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff79 	bl	8001034 <get_eit_entry>
 8001142:	4605      	mov	r5, r0
 8001144:	b988      	cbnz	r0, 800116a <unwind_phase2+0x36>
 8001146:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001148:	6162      	str	r2, [r4, #20]
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	4632      	mov	r2, r6
 800114e:	4621      	mov	r1, r4
 8001150:	2001      	movs	r0, #1
 8001152:	4798      	blx	r3
 8001154:	2808      	cmp	r0, #8
 8001156:	d0f0      	beq.n	800113a <unwind_phase2+0x6>
 8001158:	2807      	cmp	r0, #7
 800115a:	d106      	bne.n	800116a <unwind_phase2+0x36>
 800115c:	4628      	mov	r0, r5
 800115e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001160:	f7ff ffe6 	bl	8001130 <_Unwind_DebugHook>
 8001164:	1d30      	adds	r0, r6, #4
 8001166:	f000 fc0f 	bl	8001988 <__restore_core_regs>
 800116a:	f011 f9a7 	bl	80124bc <abort>
 800116e:	bf00      	nop

08001170 <unwind_phase2_forced>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	1d0d      	adds	r5, r1, #4
 8001176:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800117a:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800117e:	4607      	mov	r7, r0
 8001180:	4614      	mov	r4, r2
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001188:	f10d 0c0c 	add.w	ip, sp, #12
 800118c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a0:	ae02      	add	r6, sp, #8
 80011a2:	f04f 0e00 	mov.w	lr, #0
 80011a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011aa:	f8c6 e000 	str.w	lr, [r6]
 80011ae:	e020      	b.n	80011f2 <unwind_phase2_forced+0x82>
 80011b0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011b8:	4631      	mov	r1, r6
 80011ba:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011bc:	f012 f883 	bl	80132c6 <memcpy>
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80011c4:	4639      	mov	r1, r7
 80011c6:	4650      	mov	r0, sl
 80011c8:	4798      	blx	r3
 80011ca:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80011cc:	6473      	str	r3, [r6, #68]	@ 0x44
 80011ce:	4621      	mov	r1, r4
 80011d0:	e9cd 6900 	strd	r6, r9, [sp]
 80011d4:	4605      	mov	r5, r0
 80011d6:	463b      	mov	r3, r7
 80011d8:	463a      	mov	r2, r7
 80011da:	2001      	movs	r0, #1
 80011dc:	47c0      	blx	r8
 80011de:	4604      	mov	r4, r0
 80011e0:	bb18      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 80011e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011e6:	a97a      	add	r1, sp, #488	@ 0x1e8
 80011e8:	4630      	mov	r0, r6
 80011ea:	f012 f86c 	bl	80132c6 <memcpy>
 80011ee:	2d08      	cmp	r5, #8
 80011f0:	d119      	bne.n	8001226 <unwind_phase2_forced+0xb6>
 80011f2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011f4:	4638      	mov	r0, r7
 80011f6:	f7ff ff1d 	bl	8001034 <get_eit_entry>
 80011fa:	3409      	adds	r4, #9
 80011fc:	fa5f fa84 	uxtb.w	sl, r4
 8001200:	4605      	mov	r5, r0
 8001202:	2800      	cmp	r0, #0
 8001204:	d0d4      	beq.n	80011b0 <unwind_phase2_forced+0x40>
 8001206:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001208:	6473      	str	r3, [r6, #68]	@ 0x44
 800120a:	463a      	mov	r2, r7
 800120c:	e9cd 6900 	strd	r6, r9, [sp]
 8001210:	463b      	mov	r3, r7
 8001212:	f04a 0110 	orr.w	r1, sl, #16
 8001216:	2001      	movs	r0, #1
 8001218:	47c0      	blx	r8
 800121a:	b930      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 800121c:	4628      	mov	r0, r5
 800121e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	2d07      	cmp	r5, #7
 8001228:	d005      	beq.n	8001236 <unwind_phase2_forced+0xc6>
 800122a:	2509      	movs	r5, #9
 800122c:	4628      	mov	r0, r5
 800122e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	4620      	mov	r0, r4
 8001238:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800123a:	f7ff ff79 	bl	8001130 <_Unwind_DebugHook>
 800123e:	a803      	add	r0, sp, #12
 8001240:	f000 fba2 	bl	8001988 <__restore_core_regs>

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800124c:	640b      	str	r3, [r1, #64]	@ 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	@ 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed1 	bl	8001034 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	@ 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff13 	bl	80010c8 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff43 	bl	8001134 <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e758      	b.n	8001170 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	@ 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff26 	bl	8001134 <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80012ec:	f7ff ff20 	bl	8001130 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb49 	bl	8001988 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3a 	bl	8001170 <unwind_phase2_forced>
 80012fc:	f011 f8de 	bl	80124bc <abort>
 8001300:	f011 f8dc 	bl	80124bc <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800130a:	640a      	str	r2, [r1, #64]	@ 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e72f      	b.n	8001170 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d010      	beq.n	800134a <_Unwind_VRS_Get+0x26>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b983      	cbnz	r3, 800134e <_Unwind_VRS_Get+0x2a>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80e      	bhi.n	800134e <_Unwind_VRS_Get+0x2a>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf8c      	ite	hi
 8001344:	2002      	movhi	r0, #2
 8001346:	2001      	movls	r0, #1
 8001348:	4770      	bx	lr
 800134a:	4608      	mov	r0, r1
 800134c:	4770      	bx	lr
 800134e:	2002      	movs	r0, #2
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d010      	beq.n	8001396 <_Unwind_VRS_Set+0x26>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b983      	cbnz	r3, 800139a <_Unwind_VRS_Set+0x2a>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80e      	bhi.n	800139a <_Unwind_VRS_Set+0x2a>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf8c      	ite	hi
 8001390:	2002      	movhi	r0, #2
 8001392:	2001      	movls	r0, #1
 8001394:	4770      	bx	lr
 8001396:	4608      	mov	r0, r1
 8001398:	4770      	bx	lr
 800139a:	2002      	movs	r0, #2
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	@ 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	@ 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	@ 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0a 	bl	8001034 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	@ 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	@ 0x58
 8001430:	f7ff fe4a 	bl	80010c8 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	4693      	mov	fp, r2
 8001442:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001444:	b089      	sub	sp, #36	@ 0x24
 8001446:	460d      	mov	r5, r1
 8001448:	f852 1b04 	ldr.w	r1, [r2], #4
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	f000 0c03 	and.w	ip, r0, #3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d079      	beq.n	800154a <__gnu_unwind_pr_common+0x10e>
 8001456:	0c0c      	lsrs	r4, r1, #16
 8001458:	f88d 401d 	strb.w	r4, [sp, #29]
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	b2e4      	uxtb	r4, r4
 8001460:	9105      	str	r1, [sp, #20]
 8001462:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001466:	2102      	movs	r1, #2
 8001468:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800146a:	f88d 101c 	strb.w	r1, [sp, #28]
 800146e:	f1bc 0f02 	cmp.w	ip, #2
 8001472:	bf08      	it	eq
 8001474:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001476:	f017 0701 	ands.w	r7, r7, #1
 800147a:	d00c      	beq.n	8001496 <__gnu_unwind_pr_common+0x5a>
 800147c:	a905      	add	r1, sp, #20
 800147e:	4658      	mov	r0, fp
 8001480:	f000 fb84 	bl	8001b8c <__gnu_unwind_execute>
 8001484:	b918      	cbnz	r0, 800148e <__gnu_unwind_pr_common+0x52>
 8001486:	2008      	movs	r0, #8
 8001488:	b009      	add	sp, #36	@ 0x24
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148e:	2009      	movs	r0, #9
 8001490:	b009      	add	sp, #36	@ 0x24
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001496:	6816      	ldr	r6, [r2, #0]
 8001498:	2e00      	cmp	r6, #0
 800149a:	d0ef      	beq.n	800147c <__gnu_unwind_pr_common+0x40>
 800149c:	f000 0108 	and.w	r1, r0, #8
 80014a0:	9101      	str	r1, [sp, #4]
 80014a2:	46b2      	mov	sl, r6
 80014a4:	9702      	str	r7, [sp, #8]
 80014a6:	4664      	mov	r4, ip
 80014a8:	4699      	mov	r9, r3
 80014aa:	f1b9 0f02 	cmp.w	r9, #2
 80014ae:	d048      	beq.n	8001542 <__gnu_unwind_pr_common+0x106>
 80014b0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014b4:	8856      	ldrh	r6, [r2, #2]
 80014b6:	f102 0804 	add.w	r8, r2, #4
 80014ba:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014bc:	f026 0301 	bic.w	r3, r6, #1
 80014c0:	210f      	movs	r1, #15
 80014c2:	4658      	mov	r0, fp
 80014c4:	189f      	adds	r7, r3, r2
 80014c6:	f7ff ff45 	bl	8001354 <_Unwind_GetGR>
 80014ca:	4287      	cmp	r7, r0
 80014cc:	d837      	bhi.n	800153e <__gnu_unwind_pr_common+0x102>
 80014ce:	f02a 0201 	bic.w	r2, sl, #1
 80014d2:	443a      	add	r2, r7
 80014d4:	4282      	cmp	r2, r0
 80014d6:	bf94      	ite	ls
 80014d8:	2200      	movls	r2, #0
 80014da:	2201      	movhi	r2, #1
 80014dc:	0073      	lsls	r3, r6, #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d047      	beq.n	800157e <__gnu_unwind_pr_common+0x142>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d031      	beq.n	8001556 <__gnu_unwind_pr_common+0x11a>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cb      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 80014f6:	b114      	cbz	r4, 80014fe <__gnu_unwind_pr_common+0xc2>
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	f040 80c9 	bne.w	8001690 <__gnu_unwind_pr_common+0x254>
 80014fe:	f108 0204 	add.w	r2, r8, #4
 8001502:	f8d2 a000 	ldr.w	sl, [r2]
 8001506:	f1ba 0f00 	cmp.w	sl, #0
 800150a:	d1ce      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150c:	a905      	add	r1, sp, #20
 800150e:	4658      	mov	r0, fp
 8001510:	9f02      	ldr	r7, [sp, #8]
 8001512:	f000 fb3b 	bl	8001b8c <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1b9      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 800151a:	2f00      	cmp	r7, #0
 800151c:	d0b3      	beq.n	8001486 <__gnu_unwind_pr_common+0x4a>
 800151e:	210f      	movs	r1, #15
 8001520:	4658      	mov	r0, fp
 8001522:	f7ff ff17 	bl	8001354 <_Unwind_GetGR>
 8001526:	210e      	movs	r1, #14
 8001528:	4602      	mov	r2, r0
 800152a:	4658      	mov	r0, fp
 800152c:	f7ff ff38 	bl	80013a0 <_Unwind_SetGR>
 8001530:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <__gnu_unwind_pr_common+0x294>)
 8001532:	210f      	movs	r1, #15
 8001534:	4658      	mov	r0, fp
 8001536:	f7ff ff33 	bl	80013a0 <_Unwind_SetGR>
 800153a:	2007      	movs	r0, #7
 800153c:	e7a8      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 800153e:	2200      	movs	r2, #0
 8001540:	e7cc      	b.n	80014dc <__gnu_unwind_pr_common+0xa0>
 8001542:	6856      	ldr	r6, [r2, #4]
 8001544:	f102 0808 	add.w	r8, r2, #8
 8001548:	e7b7      	b.n	80014ba <__gnu_unwind_pr_common+0x7e>
 800154a:	0209      	lsls	r1, r1, #8
 800154c:	9105      	str	r1, [sp, #20]
 800154e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001552:	2103      	movs	r1, #3
 8001554:	e788      	b.n	8001468 <__gnu_unwind_pr_common+0x2c>
 8001556:	f8d8 6000 	ldr.w	r6, [r8]
 800155a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800155e:	2c00      	cmp	r4, #0
 8001560:	d144      	bne.n	80015ec <__gnu_unwind_pr_common+0x1b0>
 8001562:	b122      	cbz	r2, 800156e <__gnu_unwind_pr_common+0x132>
 8001564:	9a01      	ldr	r2, [sp, #4]
 8001566:	2a00      	cmp	r2, #0
 8001568:	d05a      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d058      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156e:	2e00      	cmp	r6, #0
 8001570:	da01      	bge.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001572:	f108 0804 	add.w	r8, r8, #4
 8001576:	3301      	adds	r3, #1
 8001578:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 800157c:	e7c1      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 800157e:	b9ec      	cbnz	r4, 80015bc <__gnu_unwind_pr_common+0x180>
 8001580:	b1ca      	cbz	r2, 80015b6 <__gnu_unwind_pr_common+0x17a>
 8001582:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001586:	f8d8 2000 	ldr.w	r2, [r8]
 800158a:	1c99      	adds	r1, r3, #2
 800158c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001590:	f43f af7d 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 8001594:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001598:	3301      	adds	r3, #1
 800159a:	9104      	str	r1, [sp, #16]
 800159c:	f000 808b 	beq.w	80016b6 <__gnu_unwind_pr_common+0x27a>
 80015a0:	f108 0004 	add.w	r0, r8, #4
 80015a4:	f7ff fdbe 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015a8:	ab04      	add	r3, sp, #16
 80015aa:	4601      	mov	r1, r0
 80015ac:	4628      	mov	r0, r5
 80015ae:	f010 fa07 	bl	80119c0 <__cxa_type_match>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d157      	bne.n	8001666 <__gnu_unwind_pr_common+0x22a>
 80015b6:	f108 0208 	add.w	r2, r8, #8
 80015ba:	e7a2      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80015bc:	210d      	movs	r1, #13
 80015be:	4658      	mov	r0, fp
 80015c0:	f7ff fec8 	bl	8001354 <_Unwind_GetGR>
 80015c4:	6a2b      	ldr	r3, [r5, #32]
 80015c6:	4283      	cmp	r3, r0
 80015c8:	d1f5      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015cc:	4598      	cmp	r8, r3
 80015ce:	d1f2      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7ff fcdf 	bl	8000f94 <selfrel_offset31>
 80015d6:	210f      	movs	r1, #15
 80015d8:	4602      	mov	r2, r0
 80015da:	4658      	mov	r0, fp
 80015dc:	f7ff fee0 	bl	80013a0 <_Unwind_SetGR>
 80015e0:	462a      	mov	r2, r5
 80015e2:	2100      	movs	r1, #0
 80015e4:	4658      	mov	r0, fp
 80015e6:	f7ff fedb 	bl	80013a0 <_Unwind_SetGR>
 80015ea:	e7a6      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80015ec:	210d      	movs	r1, #13
 80015ee:	4658      	mov	r0, fp
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	f7ff feaf 	bl	8001354 <_Unwind_GetGR>
 80015f6:	6a2a      	ldr	r2, [r5, #32]
 80015f8:	9b03      	ldr	r3, [sp, #12]
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d1b7      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 80015fe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001600:	4590      	cmp	r8, r2
 8001602:	d1b4      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 8001604:	2700      	movs	r7, #0
 8001606:	2204      	movs	r2, #4
 8001608:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800160c:	4442      	add	r2, r8
 800160e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001610:	636a      	str	r2, [r5, #52]	@ 0x34
 8001612:	f8d8 2000 	ldr.w	r2, [r8]
 8001616:	42ba      	cmp	r2, r7
 8001618:	db55      	blt.n	80016c6 <__gnu_unwind_pr_common+0x28a>
 800161a:	2201      	movs	r2, #1
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	e7aa      	b.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001620:	9403      	str	r4, [sp, #12]
 8001622:	f108 0a04 	add.w	sl, r8, #4
 8001626:	2600      	movs	r6, #0
 8001628:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800162c:	461c      	mov	r4, r3
 800162e:	e00d      	b.n	800164c <__gnu_unwind_pr_common+0x210>
 8001630:	4650      	mov	r0, sl
 8001632:	9704      	str	r7, [sp, #16]
 8001634:	f7ff fd76 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001638:	2200      	movs	r2, #0
 800163a:	4601      	mov	r1, r0
 800163c:	ab04      	add	r3, sp, #16
 800163e:	4628      	mov	r0, r5
 8001640:	3601      	adds	r6, #1
 8001642:	f10a 0a04 	add.w	sl, sl, #4
 8001646:	f010 f9bb 	bl	80119c0 <__cxa_type_match>
 800164a:	b9e0      	cbnz	r0, 8001686 <__gnu_unwind_pr_common+0x24a>
 800164c:	42a6      	cmp	r6, r4
 800164e:	d1ef      	bne.n	8001630 <__gnu_unwind_pr_common+0x1f4>
 8001650:	210d      	movs	r1, #13
 8001652:	4658      	mov	r0, fp
 8001654:	f7ff fe7e 	bl	8001354 <_Unwind_GetGR>
 8001658:	9b04      	ldr	r3, [sp, #16]
 800165a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800165e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8001662:	2006      	movs	r0, #6
 8001664:	e714      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001666:	4604      	mov	r4, r0
 8001668:	210d      	movs	r1, #13
 800166a:	4658      	mov	r0, fp
 800166c:	f7ff fe72 	bl	8001354 <_Unwind_GetGR>
 8001670:	9e04      	ldr	r6, [sp, #16]
 8001672:	6228      	str	r0, [r5, #32]
 8001674:	2c02      	cmp	r4, #2
 8001676:	bf04      	itt	eq
 8001678:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 800167a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800167e:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001682:	2006      	movs	r0, #6
 8001684:	e704      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001686:	4623      	mov	r3, r4
 8001688:	f8d8 6000 	ldr.w	r6, [r8]
 800168c:	9c03      	ldr	r4, [sp, #12]
 800168e:	e76e      	b.n	800156e <__gnu_unwind_pr_common+0x132>
 8001690:	4640      	mov	r0, r8
 8001692:	f7ff fc7f 	bl	8000f94 <selfrel_offset31>
 8001696:	f108 0204 	add.w	r2, r8, #4
 800169a:	4604      	mov	r4, r0
 800169c:	63aa      	str	r2, [r5, #56]	@ 0x38
 800169e:	4628      	mov	r0, r5
 80016a0:	f010 f9ec 	bl	8011a7c <__cxa_begin_cleanup>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	f43f aef2 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 80016aa:	4622      	mov	r2, r4
 80016ac:	210f      	movs	r1, #15
 80016ae:	4658      	mov	r0, fp
 80016b0:	f7ff fe76 	bl	80013a0 <_Unwind_SetGR>
 80016b4:	e741      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80016b6:	460c      	mov	r4, r1
 80016b8:	4658      	mov	r0, fp
 80016ba:	210d      	movs	r1, #13
 80016bc:	f7ff fe4a 	bl	8001354 <_Unwind_GetGR>
 80016c0:	4626      	mov	r6, r4
 80016c2:	6228      	str	r0, [r5, #32]
 80016c4:	e7db      	b.n	800167e <__gnu_unwind_pr_common+0x242>
 80016c6:	1c58      	adds	r0, r3, #1
 80016c8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80016cc:	e781      	b.n	80015d2 <__gnu_unwind_pr_common+0x196>
 80016ce:	bf00      	nop
 80016d0:	080121eb 	.word	0x080121eb

080016d4 <__aeabi_unwind_cpp_pr0>:
 80016d4:	2300      	movs	r3, #0
 80016d6:	e6b1      	b.n	800143c <__gnu_unwind_pr_common>

080016d8 <__aeabi_unwind_cpp_pr1>:
 80016d8:	2301      	movs	r3, #1
 80016da:	e6af      	b.n	800143c <__gnu_unwind_pr_common>

080016dc <__aeabi_unwind_cpp_pr2>:
 80016dc:	2302      	movs	r3, #2
 80016de:	e6ad      	b.n	800143c <__gnu_unwind_pr_common>

080016e0 <_Unwind_VRS_Pop>:
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	4606      	mov	r6, r0
 80016e6:	b0c3      	sub	sp, #268	@ 0x10c
 80016e8:	4615      	mov	r5, r2
 80016ea:	461c      	mov	r4, r3
 80016ec:	2904      	cmp	r1, #4
 80016ee:	f200 80d1 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 80016f2:	e8df f001 	tbb	[pc, r1]
 80016f6:	51ac      	.short	0x51ac
 80016f8:	2acf      	.short	0x2acf
 80016fa:	03          	.byte	0x03
 80016fb:	00          	.byte	0x00
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	f040 80c9 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001702:	2a10      	cmp	r2, #16
 8001704:	f200 80c6 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001708:	6803      	ldr	r3, [r0, #0]
 800170a:	06dc      	lsls	r4, r3, #27
 800170c:	f100 80e7 	bmi.w	80018de <_Unwind_VRS_Pop+0x1fe>
 8001710:	af20      	add	r7, sp, #128	@ 0x80
 8001712:	4638      	mov	r0, r7
 8001714:	f000 f9aa 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 8001718:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800171a:	4639      	mov	r1, r7
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 0c01 	mov.w	ip, #1
 8001722:	fa0c f203 	lsl.w	r2, ip, r3
 8001726:	422a      	tst	r2, r5
 8001728:	4620      	mov	r0, r4
 800172a:	f103 0301 	add.w	r3, r3, #1
 800172e:	d003      	beq.n	8001738 <_Unwind_VRS_Pop+0x58>
 8001730:	f850 2b04 	ldr.w	r2, [r0], #4
 8001734:	600a      	str	r2, [r1, #0]
 8001736:	4604      	mov	r4, r0
 8001738:	2b04      	cmp	r3, #4
 800173a:	f101 0104 	add.w	r1, r1, #4
 800173e:	d1f0      	bne.n	8001722 <_Unwind_VRS_Pop+0x42>
 8001740:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001742:	4638      	mov	r0, r7
 8001744:	f000 f988 	bl	8001a58 <__gnu_Unwind_Restore_WMMXC>
 8001748:	e099      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800174a:	2c03      	cmp	r4, #3
 800174c:	f040 80a2 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001750:	b294      	uxth	r4, r2
 8001752:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001756:	2b10      	cmp	r3, #16
 8001758:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800175c:	f200 809a 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	071f      	lsls	r7, r3, #28
 8001764:	f100 80c3 	bmi.w	80018ee <_Unwind_VRS_Pop+0x20e>
 8001768:	af20      	add	r7, sp, #128	@ 0x80
 800176a:	4638      	mov	r0, r7
 800176c:	f000 f952 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 8001770:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001772:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001776:	b154      	cbz	r4, 800178e <_Unwind_VRS_Pop+0xae>
 8001778:	460b      	mov	r3, r1
 800177a:	1ad0      	subs	r0, r2, r3
 800177c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001780:	00e4      	lsls	r4, r4, #3
 8001782:	581d      	ldr	r5, [r3, r0]
 8001784:	f843 5b04 	str.w	r5, [r3], #4
 8001788:	428b      	cmp	r3, r1
 800178a:	d1fa      	bne.n	8001782 <_Unwind_VRS_Pop+0xa2>
 800178c:	4422      	add	r2, r4
 800178e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001790:	4638      	mov	r0, r7
 8001792:	f000 f91d 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 8001796:	e072      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001798:	2c01      	cmp	r4, #1
 800179a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800179e:	b295      	uxth	r5, r2
 80017a0:	d071      	beq.n	8001886 <_Unwind_VRS_Pop+0x1a6>
 80017a2:	2c05      	cmp	r4, #5
 80017a4:	d176      	bne.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017a6:	eb08 0905 	add.w	r9, r8, r5
 80017aa:	f1b9 0f20 	cmp.w	r9, #32
 80017ae:	d871      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017b0:	f1b8 0f0f 	cmp.w	r8, #15
 80017b4:	d872      	bhi.n	800189c <_Unwind_VRS_Pop+0x1bc>
 80017b6:	f1b9 0f10 	cmp.w	r9, #16
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	f200 809f 	bhi.w	80018fe <_Unwind_VRS_Pop+0x21e>
 80017c0:	07d9      	lsls	r1, r3, #31
 80017c2:	d508      	bpl.n	80017d6 <_Unwind_VRS_Pop+0xf6>
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	4630      	mov	r0, r6
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f840 3b48 	str.w	r3, [r0], #72
 80017d2:	f000 f8f1 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017d6:	af20      	add	r7, sp, #128	@ 0x80
 80017d8:	4638      	mov	r0, r7
 80017da:	f000 f8ed 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017de:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	f000 80b9 	beq.w	8001958 <_Unwind_VRS_Pop+0x278>
 80017e6:	006d      	lsls	r5, r5, #1
 80017e8:	1e6a      	subs	r2, r5, #1
 80017ea:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 80017ee:	2500      	movs	r5, #0
 80017f0:	3201      	adds	r2, #1
 80017f2:	3904      	subs	r1, #4
 80017f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80017f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80017fc:	f841 0f04 	str.w	r0, [r1, #4]!
 8001800:	4293      	cmp	r3, r2
 8001802:	d1f9      	bne.n	80017f8 <_Unwind_VRS_Pop+0x118>
 8001804:	2d00      	cmp	r5, #0
 8001806:	f000 80a1 	beq.w	800194c <_Unwind_VRS_Pop+0x26c>
 800180a:	4641      	mov	r1, r8
 800180c:	2910      	cmp	r1, #16
 800180e:	bf38      	it	cc
 8001810:	2110      	movcc	r1, #16
 8001812:	006b      	lsls	r3, r5, #1
 8001814:	3910      	subs	r1, #16
 8001816:	466f      	mov	r7, sp
 8001818:	3b01      	subs	r3, #1
 800181a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800181e:	3301      	adds	r3, #1
 8001820:	3904      	subs	r1, #4
 8001822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001826:	f852 0b04 	ldr.w	r0, [r2], #4
 800182a:	f841 0f04 	str.w	r0, [r1, #4]!
 800182e:	429a      	cmp	r2, r3
 8001830:	d1f9      	bne.n	8001826 <_Unwind_VRS_Pop+0x146>
 8001832:	2c01      	cmp	r4, #1
 8001834:	f000 8088 	beq.w	8001948 <_Unwind_VRS_Pop+0x268>
 8001838:	f1b8 0f0f 	cmp.w	r8, #15
 800183c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800183e:	d802      	bhi.n	8001846 <_Unwind_VRS_Pop+0x166>
 8001840:	a820      	add	r0, sp, #128	@ 0x80
 8001842:	f000 f8b5 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 8001846:	4638      	mov	r0, r7
 8001848:	f000 f8ba 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800184c:	e017      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800184e:	bb0c      	cbnz	r4, 8001894 <_Unwind_VRS_Pop+0x1b4>
 8001850:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001852:	4623      	mov	r3, r4
 8001854:	fa1f fc82 	uxth.w	ip, r2
 8001858:	2401      	movs	r4, #1
 800185a:	1d37      	adds	r7, r6, #4
 800185c:	fa04 f103 	lsl.w	r1, r4, r3
 8001860:	ea11 0f0c 	tst.w	r1, ip
 8001864:	4602      	mov	r2, r0
 8001866:	d004      	beq.n	8001872 <_Unwind_VRS_Pop+0x192>
 8001868:	f852 1b04 	ldr.w	r1, [r2], #4
 800186c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8001870:	4610      	mov	r0, r2
 8001872:	3301      	adds	r3, #1
 8001874:	2b10      	cmp	r3, #16
 8001876:	d1f1      	bne.n	800185c <_Unwind_VRS_Pop+0x17c>
 8001878:	04ac      	lsls	r4, r5, #18
 800187a:	d400      	bmi.n	800187e <_Unwind_VRS_Pop+0x19e>
 800187c:	63b0      	str	r0, [r6, #56]	@ 0x38
 800187e:	2000      	movs	r0, #0
 8001880:	b043      	add	sp, #268	@ 0x10c
 8001882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001886:	eb08 0305 	add.w	r3, r8, r5
 800188a:	2b10      	cmp	r3, #16
 800188c:	d802      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 800188e:	f1b8 0f10 	cmp.w	r8, #16
 8001892:	d114      	bne.n	80018be <_Unwind_VRS_Pop+0x1de>
 8001894:	2002      	movs	r0, #2
 8001896:	b043      	add	sp, #268	@ 0x10c
 8001898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800189c:	2d00      	cmp	r5, #0
 800189e:	d0ee      	beq.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	075a      	lsls	r2, r3, #29
 80018a4:	d45c      	bmi.n	8001960 <_Unwind_VRS_Pop+0x280>
 80018a6:	466f      	mov	r7, sp
 80018a8:	4638      	mov	r0, r7
 80018aa:	f000 f88d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ae:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018b0:	006b      	lsls	r3, r5, #1
 80018b2:	f1a8 0110 	sub.w	r1, r8, #16
 80018b6:	3b01      	subs	r3, #1
 80018b8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018bc:	e7af      	b.n	800181e <_Unwind_VRS_Pop+0x13e>
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	07da      	lsls	r2, r3, #31
 80018c2:	d459      	bmi.n	8001978 <_Unwind_VRS_Pop+0x298>
 80018c4:	af20      	add	r7, sp, #128	@ 0x80
 80018c6:	4638      	mov	r0, r7
 80018c8:	f000 f86e 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 80018cc:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	d189      	bne.n	80017e6 <_Unwind_VRS_Pop+0x106>
 80018d2:	3304      	adds	r3, #4
 80018d4:	63b3      	str	r3, [r6, #56]	@ 0x38
 80018d6:	4638      	mov	r0, r7
 80018d8:	f000 f862 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80018dc:	e7cf      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018de:	f023 0310 	bic.w	r3, r3, #16
 80018e2:	6003      	str	r3, [r0, #0]
 80018e4:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80018e8:	f000 f8c0 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 80018ec:	e710      	b.n	8001710 <_Unwind_VRS_Pop+0x30>
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	6003      	str	r3, [r0, #0]
 80018f4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 80018f8:	f000 f88c 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 80018fc:	e734      	b.n	8001768 <_Unwind_VRS_Pop+0x88>
 80018fe:	07d9      	lsls	r1, r3, #31
 8001900:	d508      	bpl.n	8001914 <_Unwind_VRS_Pop+0x234>
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f840 3b48 	str.w	r3, [r0], #72
 800190e:	f000 f853 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	0758      	lsls	r0, r3, #29
 8001916:	d506      	bpl.n	8001926 <_Unwind_VRS_Pop+0x246>
 8001918:	4630      	mov	r0, r6
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	f840 3bd0 	str.w	r3, [r0], #208
 8001922:	f000 f851 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001926:	af20      	add	r7, sp, #128	@ 0x80
 8001928:	4638      	mov	r0, r7
 800192a:	f000 f845 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 800192e:	4668      	mov	r0, sp
 8001930:	f000 f84a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001934:	f1c8 0210 	rsb	r2, r8, #16
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800193c:	f1a9 0510 	sub.w	r5, r9, #16
 8001940:	3a01      	subs	r2, #1
 8001942:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001946:	e753      	b.n	80017f0 <_Unwind_VRS_Pop+0x110>
 8001948:	af20      	add	r7, sp, #128	@ 0x80
 800194a:	e7c2      	b.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 800194c:	2c01      	cmp	r4, #1
 800194e:	d0c0      	beq.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 8001950:	f1b8 0f0f 	cmp.w	r8, #15
 8001954:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001956:	d892      	bhi.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001958:	4638      	mov	r0, r7
 800195a:	f000 f829 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 800195e:	e78e      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f840 3bd0 	str.w	r3, [r0], #208
 8001968:	466f      	mov	r7, sp
 800196a:	f000 f82d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800196e:	4638      	mov	r0, r7
 8001970:	f000 f82a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001976:	e79b      	b.n	80018b0 <_Unwind_VRS_Pop+0x1d0>
 8001978:	4630      	mov	r0, r6
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f840 3b48 	str.w	r3, [r0], #72
 8001982:	f000 f811 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 8001986:	e79d      	b.n	80018c4 <_Unwind_VRS_Pop+0x1e4>

08001988 <__restore_core_regs>:
 8001988:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800198c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001990:	469c      	mov	ip, r3
 8001992:	46a6      	mov	lr, r4
 8001994:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001998:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800199c:	46e5      	mov	sp, ip
 800199e:	bd00      	pop	{pc}

080019a0 <__gnu_Unwind_Restore_VFP>:
 80019a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Save_VFP>:
 80019a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Restore_VFP_D>:
 80019b0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <__gnu_Unwind_Save_VFP_D>:
 80019b8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Restore_WMMXD>:
 80019d0:	ecf0 0102 	ldfe	f0, [r0], #8
 80019d4:	ecf0 1102 	ldfe	f1, [r0], #8
 80019d8:	ecf0 2102 	ldfe	f2, [r0], #8
 80019dc:	ecf0 3102 	ldfe	f3, [r0], #8
 80019e0:	ecf0 4102 	ldfe	f4, [r0], #8
 80019e4:	ecf0 5102 	ldfe	f5, [r0], #8
 80019e8:	ecf0 6102 	ldfe	f6, [r0], #8
 80019ec:	ecf0 7102 	ldfe	f7, [r0], #8
 80019f0:	ecf0 8102 	ldfp	f0, [r0], #8
 80019f4:	ecf0 9102 	ldfp	f1, [r0], #8
 80019f8:	ecf0 a102 	ldfp	f2, [r0], #8
 80019fc:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a00:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a04:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a08:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a0c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <__gnu_Unwind_Save_WMMXD>:
 8001a14:	ece0 0102 	stfe	f0, [r0], #8
 8001a18:	ece0 1102 	stfe	f1, [r0], #8
 8001a1c:	ece0 2102 	stfe	f2, [r0], #8
 8001a20:	ece0 3102 	stfe	f3, [r0], #8
 8001a24:	ece0 4102 	stfe	f4, [r0], #8
 8001a28:	ece0 5102 	stfe	f5, [r0], #8
 8001a2c:	ece0 6102 	stfe	f6, [r0], #8
 8001a30:	ece0 7102 	stfe	f7, [r0], #8
 8001a34:	ece0 8102 	stfp	f0, [r0], #8
 8001a38:	ece0 9102 	stfp	f1, [r0], #8
 8001a3c:	ece0 a102 	stfp	f2, [r0], #8
 8001a40:	ece0 b102 	stfp	f3, [r0], #8
 8001a44:	ece0 c102 	stfp	f4, [r0], #8
 8001a48:	ece0 d102 	stfp	f5, [r0], #8
 8001a4c:	ece0 e102 	stfp	f6, [r0], #8
 8001a50:	ece0 f102 	stfp	f7, [r0], #8
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <__gnu_Unwind_Restore_WMMXC>:
 8001a58:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a5c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a60:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a64:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <__gnu_Unwind_Save_WMMXC>:
 8001a6c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a70:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a74:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a78:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <_Unwind_RaiseException>:
 8001a80:	46ec      	mov	ip, sp
 8001a82:	b500      	push	{lr}
 8001a84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a94:	a901      	add	r1, sp, #4
 8001a96:	f7ff fbd7 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001a9a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a9e:	b012      	add	sp, #72	@ 0x48
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <_Unwind_Resume>:
 8001aa4:	46ec      	mov	ip, sp
 8001aa6:	b500      	push	{lr}
 8001aa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ab8:	a901      	add	r1, sp, #4
 8001aba:	f7ff fc01 	bl	80012c0 <__gnu_Unwind_Resume>
 8001abe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ac2:	b012      	add	sp, #72	@ 0x48
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <_Unwind_Resume_or_Rethrow>:
 8001ac8:	46ec      	mov	ip, sp
 8001aca:	b500      	push	{lr}
 8001acc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001adc:	a901      	add	r1, sp, #4
 8001ade:	f7ff fc11 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001ae2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ae6:	b012      	add	sp, #72	@ 0x48
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <_Unwind_ForcedUnwind>:
 8001aec:	46ec      	mov	ip, sp
 8001aee:	b500      	push	{lr}
 8001af0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001af4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b00:	ab01      	add	r3, sp, #4
 8001b02:	f7ff fbd5 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b06:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b0a:	b012      	add	sp, #72	@ 0x48
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <_Unwind_Backtrace>:
 8001b10:	46ec      	mov	ip, sp
 8001b12:	b500      	push	{lr}
 8001b14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b24:	aa01      	add	r2, sp, #4
 8001b26:	f7ff fc47 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b2a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b2e:	b012      	add	sp, #72	@ 0x48
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <next_unwind_byte>:
 8001b34:	7a02      	ldrb	r2, [r0, #8]
 8001b36:	4603      	mov	r3, r0
 8001b38:	b97a      	cbnz	r2, 8001b5a <next_unwind_byte+0x26>
 8001b3a:	7a42      	ldrb	r2, [r0, #9]
 8001b3c:	b1a2      	cbz	r2, 8001b68 <next_unwind_byte+0x34>
 8001b3e:	6841      	ldr	r1, [r0, #4]
 8001b40:	3a01      	subs	r2, #1
 8001b42:	b410      	push	{r4}
 8001b44:	7242      	strb	r2, [r0, #9]
 8001b46:	6808      	ldr	r0, [r1, #0]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	1d0c      	adds	r4, r1, #4
 8001b4c:	721a      	strb	r2, [r3, #8]
 8001b4e:	0202      	lsls	r2, r0, #8
 8001b50:	605c      	str	r4, [r3, #4]
 8001b52:	0e00      	lsrs	r0, r0, #24
 8001b54:	bc10      	pop	{r4}
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	721a      	strb	r2, [r3, #8]
 8001b60:	0202      	lsls	r2, r0, #8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	0e00      	lsrs	r0, r0, #24
 8001b66:	4770      	bx	lr
 8001b68:	20b0      	movs	r0, #176	@ 0xb0
 8001b6a:	4770      	bx	lr

08001b6c <_Unwind_GetGR.constprop.0>:
 8001b6c:	b500      	push	{lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	2300      	movs	r3, #0
 8001b72:	aa03      	add	r2, sp, #12
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	220c      	movs	r2, #12
 8001b7a:	f7ff fbd3 	bl	8001324 <_Unwind_VRS_Get>
 8001b7e:	9803      	ldr	r0, [sp, #12]
 8001b80:	b005      	add	sp, #20
 8001b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b86:	bf00      	nop

08001b88 <unwind_UCB_from_context>:
 8001b88:	e7f0      	b.n	8001b6c <_Unwind_GetGR.constprop.0>
 8001b8a:	bf00      	nop

08001b8c <__gnu_unwind_execute>:
 8001b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b90:	4606      	mov	r6, r0
 8001b92:	b085      	sub	sp, #20
 8001b94:	460d      	mov	r5, r1
 8001b96:	f04f 0800 	mov.w	r8, #0
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff ffca 	bl	8001b34 <next_unwind_byte>
 8001ba0:	28b0      	cmp	r0, #176	@ 0xb0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	f000 80da 	beq.w	8001d5c <__gnu_unwind_execute+0x1d0>
 8001ba8:	0607      	lsls	r7, r0, #24
 8001baa:	d546      	bpl.n	8001c3a <__gnu_unwind_execute+0xae>
 8001bac:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bb0:	2b80      	cmp	r3, #128	@ 0x80
 8001bb2:	d05e      	beq.n	8001c72 <__gnu_unwind_execute+0xe6>
 8001bb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bb6:	d073      	beq.n	8001ca0 <__gnu_unwind_execute+0x114>
 8001bb8:	d81b      	bhi.n	8001bf2 <__gnu_unwind_execute+0x66>
 8001bba:	2b90      	cmp	r3, #144	@ 0x90
 8001bbc:	f000 809b 	beq.w	8001cf6 <__gnu_unwind_execute+0x16a>
 8001bc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bc2:	d112      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001bc4:	43c3      	mvns	r3, r0
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001bce:	411a      	asrs	r2, r3
 8001bd0:	0701      	lsls	r1, r0, #28
 8001bd2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001bd6:	d501      	bpl.n	8001bdc <__gnu_unwind_execute+0x50>
 8001bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff fd7d 	bl	80016e0 <_Unwind_VRS_Pop>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d0d7      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001bea:	2009      	movs	r0, #9
 8001bec:	b005      	add	sp, #20
 8001bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bf4:	d16d      	bne.n	8001cd2 <__gnu_unwind_execute+0x146>
 8001bf6:	28c6      	cmp	r0, #198	@ 0xc6
 8001bf8:	f000 8093 	beq.w	8001d22 <__gnu_unwind_execute+0x196>
 8001bfc:	28c7      	cmp	r0, #199	@ 0xc7
 8001bfe:	f000 80b2 	beq.w	8001d66 <__gnu_unwind_execute+0x1da>
 8001c02:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c08:	f000 80d2 	beq.w	8001db0 <__gnu_unwind_execute+0x224>
 8001c0c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c0e:	f000 80dd 	beq.w	8001dcc <__gnu_unwind_execute+0x240>
 8001c12:	28c9      	cmp	r0, #201	@ 0xc9
 8001c14:	d1e9      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c16:	4628      	mov	r0, r5
 8001c18:	f7ff ff8c 	bl	8001b34 <next_unwind_byte>
 8001c1c:	0302      	lsls	r2, r0, #12
 8001c1e:	f000 000f 	and.w	r0, r0, #15
 8001c22:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c26:	3001      	adds	r0, #1
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fd56 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d0b0      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c38:	e7d7      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c3a:	0083      	lsls	r3, r0, #2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	1d1f      	adds	r7, r3, #4
 8001c40:	f10d 090c 	add.w	r9, sp, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f8cd 9000 	str.w	r9, [sp]
 8001c4c:	220d      	movs	r2, #13
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fb68 	bl	8001324 <_Unwind_VRS_Get>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	f8cd 9000 	str.w	r9, [sp]
 8001c5a:	0660      	lsls	r0, r4, #25
 8001c5c:	bf4c      	ite	mi
 8001c5e:	1bdf      	submi	r7, r3, r7
 8001c60:	18ff      	addpl	r7, r7, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	220d      	movs	r2, #13
 8001c66:	4619      	mov	r1, r3
 8001c68:	4630      	mov	r0, r6
 8001c6a:	9703      	str	r7, [sp, #12]
 8001c6c:	f7ff fb80 	bl	8001370 <_Unwind_VRS_Set>
 8001c70:	e793      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c72:	4628      	mov	r0, r5
 8001c74:	f7ff ff5e 	bl	8001b34 <next_unwind_byte>
 8001c78:	0224      	lsls	r4, r4, #8
 8001c7a:	4320      	orrs	r0, r4
 8001c7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001c80:	d0b3      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c82:	0104      	lsls	r4, r0, #4
 8001c84:	2300      	movs	r3, #0
 8001c86:	b2a2      	uxth	r2, r4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f7ff fd28 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d1aa      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c94:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001c98:	bf18      	it	ne
 8001c9a:	f04f 0801 	movne.w	r8, #1
 8001c9e:	e77c      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001ca0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ca2:	d051      	beq.n	8001d48 <__gnu_unwind_execute+0x1bc>
 8001ca4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ca6:	f000 80ad 	beq.w	8001e04 <__gnu_unwind_execute+0x278>
 8001caa:	28b3      	cmp	r0, #179	@ 0xb3
 8001cac:	d06d      	beq.n	8001d8a <__gnu_unwind_execute+0x1fe>
 8001cae:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cb2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cb4:	d099      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cb6:	f000 0207 	and.w	r2, r0, #7
 8001cba:	3201      	adds	r2, #1
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff fd0b 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f43f af65 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cd0:	e78b      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cd2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001cd6:	2bd0      	cmp	r3, #208	@ 0xd0
 8001cd8:	d187      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cda:	f000 0207 	and.w	r2, r0, #7
 8001cde:	3201      	adds	r2, #1
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f7ff fcf9 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f43f af53 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cf4:	e779      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 030d 	and.w	r3, r0, #13
 8001cfa:	2b0d      	cmp	r3, #13
 8001cfc:	f43f af75 	beq.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d00:	af03      	add	r7, sp, #12
 8001d02:	2300      	movs	r3, #0
 8001d04:	f000 020f 	and.w	r2, r0, #15
 8001d08:	4619      	mov	r1, r3
 8001d0a:	9700      	str	r7, [sp, #0]
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7ff fb09 	bl	8001324 <_Unwind_VRS_Get>
 8001d12:	2300      	movs	r3, #0
 8001d14:	9700      	str	r7, [sp, #0]
 8001d16:	220d      	movs	r2, #13
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff fb28 	bl	8001370 <_Unwind_VRS_Set>
 8001d20:	e73b      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001d22:	4628      	mov	r0, r5
 8001d24:	f7ff ff06 	bl	8001b34 <next_unwind_byte>
 8001d28:	0302      	lsls	r2, r0, #12
 8001d2a:	f000 000f 	and.w	r0, r0, #15
 8001d2e:	3001      	adds	r0, #1
 8001d30:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d34:	2303      	movs	r3, #3
 8001d36:	4302      	orrs	r2, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff fcd0 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f43f af2a 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d46:	e750      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f7ff fef3 	bl	8001b34 <next_unwind_byte>
 8001d4e:	1e43      	subs	r3, r0, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b0e      	cmp	r3, #14
 8001d54:	4602      	mov	r2, r0
 8001d56:	f67f af41 	bls.w	8001bdc <__gnu_unwind_execute+0x50>
 8001d5a:	e746      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d5c:	f1b8 0f00 	cmp.w	r8, #0
 8001d60:	d040      	beq.n	8001de4 <__gnu_unwind_execute+0x258>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e742      	b.n	8001bec <__gnu_unwind_execute+0x60>
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fee4 	bl	8001b34 <next_unwind_byte>
 8001d6c:	1e43      	subs	r3, r0, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b0e      	cmp	r3, #14
 8001d72:	4602      	mov	r2, r0
 8001d74:	f63f af39 	bhi.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff fcaf 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af09 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d88:	e72f      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7ff fed2 	bl	8001b34 <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	3001      	adds	r0, #1
 8001d98:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4302      	orrs	r2, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff fc9c 	bl	80016e0 <_Unwind_VRS_Pop>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f43f aef6 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dae:	e71c      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001db0:	f000 020f 	and.w	r2, r0, #15
 8001db4:	3201      	adds	r2, #1
 8001db6:	2303      	movs	r3, #3
 8001db8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff fc8e 	bl	80016e0 <_Unwind_VRS_Pop>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f43f aee8 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dca:	e70e      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f7ff feb1 	bl	8001b34 <next_unwind_byte>
 8001dd2:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001dd6:	f000 030f 	and.w	r3, r0, #15
 8001dda:	3210      	adds	r2, #16
 8001ddc:	3301      	adds	r3, #1
 8001dde:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001de2:	e722      	b.n	8001c2a <__gnu_unwind_execute+0x9e>
 8001de4:	ac03      	add	r4, sp, #12
 8001de6:	4643      	mov	r3, r8
 8001de8:	4641      	mov	r1, r8
 8001dea:	220e      	movs	r2, #14
 8001dec:	9400      	str	r4, [sp, #0]
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	9400      	str	r4, [sp, #0]
 8001df6:	4643      	mov	r3, r8
 8001df8:	220f      	movs	r2, #15
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fab7 	bl	8001370 <_Unwind_VRS_Set>
 8001e02:	e7ae      	b.n	8001d62 <__gnu_unwind_execute+0x1d6>
 8001e04:	2300      	movs	r3, #0
 8001e06:	f10d 090c 	add.w	r9, sp, #12
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f8cd 9000 	str.w	r9, [sp]
 8001e12:	4630      	mov	r0, r6
 8001e14:	f7ff fa86 	bl	8001324 <_Unwind_VRS_Get>
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff fe8b 	bl	8001b34 <next_unwind_byte>
 8001e1e:	0602      	lsls	r2, r0, #24
 8001e20:	9c03      	ldr	r4, [sp, #12]
 8001e22:	f04f 0702 	mov.w	r7, #2
 8001e26:	d50b      	bpl.n	8001e40 <__gnu_unwind_execute+0x2b4>
 8001e28:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e2c:	40b8      	lsls	r0, r7
 8001e2e:	4404      	add	r4, r0
 8001e30:	4628      	mov	r0, r5
 8001e32:	9403      	str	r4, [sp, #12]
 8001e34:	f7ff fe7e 	bl	8001b34 <next_unwind_byte>
 8001e38:	0603      	lsls	r3, r0, #24
 8001e3a:	f107 0707 	add.w	r7, r7, #7
 8001e3e:	d4f3      	bmi.n	8001e28 <__gnu_unwind_execute+0x29c>
 8001e40:	fa00 f207 	lsl.w	r2, r0, r7
 8001e44:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e48:	4422      	add	r2, r4
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9203      	str	r2, [sp, #12]
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	220d      	movs	r2, #13
 8001e54:	4619      	mov	r1, r3
 8001e56:	4630      	mov	r0, r6
 8001e58:	f7ff fa8a 	bl	8001370 <_Unwind_VRS_Set>
 8001e5c:	e69d      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001e5e:	bf00      	nop

08001e60 <__gnu_unwind_frame>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	b084      	sub	sp, #16
 8001e68:	f04f 0c03 	mov.w	ip, #3
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	021c      	lsls	r4, r3, #8
 8001e70:	4608      	mov	r0, r1
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	a901      	add	r1, sp, #4
 8001e76:	9401      	str	r4, [sp, #4]
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e7e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e82:	f7ff fe83 	bl	8001b8c <__gnu_unwind_execute>
 8001e86:	b004      	add	sp, #16
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	bf00      	nop

08001e8c <_Unwind_GetRegionStart>:
 8001e8c:	b508      	push	{r3, lr}
 8001e8e:	f7ff fe7b 	bl	8001b88 <unwind_UCB_from_context>
 8001e92:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop

08001e98 <_Unwind_GetLanguageSpecificData>:
 8001e98:	b508      	push	{r3, lr}
 8001e9a:	f7ff fe75 	bl	8001b88 <unwind_UCB_from_context>
 8001e9e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ea0:	79c3      	ldrb	r3, [r0, #7]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	bf00      	nop

08001eac <__aeabi_idiv0>:
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ece:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ed8:	f00c f8a6 	bl	800e028 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x17c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d126      	bne.n	8001f32 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f010 f8b1 	bl	801204c <_Znaj>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e018      	b.n	8001f2a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ef8:	206c      	movs	r0, #108	@ 0x6c
 8001efa:	f010 f896 	bl	801202a <_Znwj>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461c      	mov	r4, r3
 8001f02:	2501      	movs	r5, #1
 8001f04:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f12:	4620      	mov	r0, r4
 8001f14:	f000 fd40 	bl	8002998 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	dde3      	ble.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f30:	e054      	b.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f32:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x180>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d126      	bne.n	8001f88 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	f010 f886 	bl	801204c <_Znaj>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e018      	b.n	8001f80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f4e:	206c      	movs	r0, #108	@ 0x6c
 8001f50:	f010 f86b 	bl	801202a <_Znwj>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	2501      	movs	r5, #1
 8001f5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 fd87 	bl	8002a7c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	dde3      	ble.n	8001f4e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001f86:	e029      	b.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d125      	bne.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f90:	2008      	movs	r0, #8
 8001f92:	f010 f85b 	bl	801204c <_Znaj>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e018      	b.n	8001fd6 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fa4:	206c      	movs	r0, #108	@ 0x6c
 8001fa6:	f010 f840 	bl	801202a <_Znwj>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461c      	mov	r4, r3
 8001fae:	2501      	movs	r5, #1
 8001fb0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f000 fdce 	bl	8002b60 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	dde3      	ble.n	8001fa4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f825 	bl	8002038 <_ZNK14XNucleoIHM02A14initEv>
	        /*Do nothing*/
	    	//throw std::runtime_error("init failed");
	    }
	}
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	e017      	b.n	8002022 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x172>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ff2:	2d00      	cmp	r5, #0
 8001ff4:	d003      	beq.n	8001ffe <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14e>
 8001ff6:	216c      	movs	r1, #108	@ 0x6c
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f00f fcbb 	bl	8011974 <_ZdlPvj>
 8001ffe:	f00f fcbb 	bl	8011978 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002002:	2d00      	cmp	r5, #0
 8002004:	d003      	beq.n	800200e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x15e>
 8002006:	216c      	movs	r1, #108	@ 0x6c
 8002008:	4620      	mov	r0, r4
 800200a:	f00f fcb3 	bl	8011974 <_ZdlPvj>
 800200e:	f00f fcb3 	bl	8011978 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002012:	2d00      	cmp	r5, #0
 8002014:	d003      	beq.n	800201e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x16e>
 8002016:	216c      	movs	r1, #108	@ 0x6c
 8002018:	4620      	mov	r0, r4
 800201a:	f00f fcab 	bl	8011974 <_ZdlPvj>
 800201e:	f00f fcab 	bl	8011978 <__cxa_end_cleanup>
	}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bdb0      	pop	{r4, r5, r7, pc}
 800202a:	bf00      	nop
 800202c:	200002a8 	.word	0x200002a8
 8002030:	200002a9 	.word	0x200002a9
 8002034:	200002aa 	.word	0x200002aa

08002038 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6998      	ldr	r0, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8b9b      	ldrh	r3, [r3, #28]
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	f00b ffec 	bl	800e028 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 8002050:	2001      	movs	r0, #1
 8002052:	f00b fc8d 	bl	800d970 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6998      	ldr	r0, [r3, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8b9b      	ldrh	r3, [r3, #28]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f00b ffe1 	bl	800e028 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f00b fc82 	bl	800d970 <HAL_Delay>



        return init_all_motor_drivers();
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f892 	bl	8002196 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 8002072:	4603      	mov	r3, r0
    }
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
    }
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e040      	b.n	8002124 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4608      	mov	r0, r1
 80020c4:	4798      	blx	r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d023      	beq.n	800211e <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681d      	ldr	r5, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	33cc      	adds	r3, #204	@ 0xcc
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3314      	adds	r3, #20
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4608      	mov	r0, r1
 8002114:	4798      	blx	r3
 8002116:	4603      	mov	r3, r0
 8002118:	4619      	mov	r1, r3
 800211a:	4628      	mov	r0, r5
 800211c:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b01      	cmp	r3, #1
 8002128:	ddbb      	ble.n	80020a2 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4610      	mov	r0, r2
 8002140:	4798      	blx	r3
 8002142:	4603      	mov	r3, r0
 8002144:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e01b      	b.n	8002184 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	4798      	blx	r3
 8002170:	4603      	mov	r3, r0
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	3204      	adds	r2, #4
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	3301      	adds	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	dde0      	ble.n	800214c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3310      	adds	r3, #16
    }
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bdb0      	pop	{r4, r5, r7, pc}

08002196 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e022      	b.n	80021ea <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3308      	adds	r3, #8
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	3102      	adds	r1, #2
 80021c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4798      	blx	r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e006      	b.n	80021f2 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	ddd9      	ble.n	80021a4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 80021f0:	2301      	movs	r3, #1

    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af04      	add	r7, sp, #16
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2):
    index_to_enum{back_right, back_left, front_left, front_right}, //Wiring dependant
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a4a      	ldr	r2, [pc, #296]	@ (8002338 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x13c>)
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	615a      	str	r2, [r3, #20]
    motor_direction_inverter{1.0, -1.0, 1.0, -1.0}
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a49      	ldr	r2, [pc, #292]	@ (800233c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x140>)
 8002216:	f103 0418 	add.w	r4, r3, #24
 800221a:	4613      	mov	r3, r2
 800221c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a46      	ldr	r2, [pc, #280]	@ (8002340 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x144>)
 8002226:	332c      	adds	r3, #44	@ 0x2c
 8002228:	4611      	mov	r1, r2
 800222a:	22b0      	movs	r2, #176	@ 0xb0
 800222c:	4618      	mov	r0, r3
 800222e:	f011 f84a 	bl	80132c6 <memcpy>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a42      	ldr	r2, [pc, #264]	@ (8002340 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x144>)
 8002236:	33dc      	adds	r3, #220	@ 0xdc
 8002238:	4611      	mov	r1, r2
 800223a:	22b0      	movs	r2, #176	@ 0xb0
 800223c:	4618      	mov	r0, r3
 800223e:	f011 f842 	bl	80132c6 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800224e:	605a      	str	r2, [r3, #4]

  shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002250:	2020      	movs	r0, #32
 8002252:	f00f feea 	bl	801202a <_Znwj>
 8002256:	4603      	mov	r3, r0
 8002258:	461c      	mov	r4, r3
 800225a:	2501      	movs	r5, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002268:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800226a:	9303      	str	r3, [sp, #12]
 800226c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4620      	mov	r0, r4
 800227c:	f7ff fe18 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609c      	str	r4, [r3, #8]
  shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002284:	2020      	movs	r0, #32
 8002286:	f00f fed0 	bl	801202a <_Znwj>
 800228a:	4603      	mov	r3, r0
 800228c:	461c      	mov	r4, r3
 800228e:	2501      	movs	r5, #1
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 800229c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800229e:	9303      	str	r3, [sp, #12]
 80022a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff fdfe 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	60dc      	str	r4, [r3, #12]
  abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fedd 	bl	800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022c2:	6178      	str	r0, [r7, #20]
  abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fed7 	bl	800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022ce:	6138      	str	r0, [r7, #16]
  moteurs = new abstractL6470*[NMOTEURS];
 80022d0:	2010      	movs	r0, #16
 80022d2:	f00f febb 	bl	801204c <_Znaj>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	611a      	str	r2, [r3, #16]



  moteurs[front_left] = moteurs_shield_2[0]; //Wiring dependant
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	601a      	str	r2, [r3, #0]
  moteurs[front_right] = moteurs_shield_2[1]; //Wiring dependant
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	3304      	adds	r3, #4
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	6852      	ldr	r2, [r2, #4]
 80022f2:	601a      	str	r2, [r3, #0]
  moteurs[back_left] = moteurs_shield_1[1];  //Wiring dependant
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	3308      	adds	r3, #8
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6852      	ldr	r2, [r2, #4]
 80022fe:	601a      	str	r2, [r3, #0]
  moteurs[back_right] = moteurs_shield_1[0]; //Wiring dependant
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	330c      	adds	r3, #12
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	601a      	str	r2, [r3, #0]
  // shield_2->perform_prepared_actions();
  // HAL_Delay(4000);
  // motors_stop_hard();


}
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	e00f      	b.n	8002330 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x134>
  shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002310:	2d00      	cmp	r5, #0
 8002312:	d003      	beq.n	800231c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x120>
 8002314:	2120      	movs	r1, #32
 8002316:	4620      	mov	r0, r4
 8002318:	f00f fb2c 	bl	8011974 <_ZdlPvj>
 800231c:	f00f fb2c 	bl	8011978 <__cxa_end_cleanup>
  shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002320:	2d00      	cmp	r5, #0
 8002322:	d003      	beq.n	800232c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x130>
 8002324:	2120      	movs	r1, #32
 8002326:	4620      	mov	r0, r4
 8002328:	f00f fb24 	bl	8011974 <_ZdlPvj>
 800232c:	f00f fb24 	bl	8011978 <__cxa_end_cleanup>
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bdb0      	pop	{r4, r5, r7, pc}
 8002338:	08014e10 	.word	0x08014e10
 800233c:	08014e14 	.word	0x08014e14
 8002340:	08014e24 	.word	0x08014e24

08002344 <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 8002350:	edd7 7a00 	vldr	s15, [r7]
 8002354:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002370 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 8002358:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800235c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	3d00adfd 	.word	0x3d00adfd

08002374 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b094      	sub	sp, #80	@ 0x50
 8002378:	af00      	add	r7, sp, #0
 800237a:	6178      	str	r0, [r7, #20]
 800237c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002380:	edc7 0a03 	vstr	s1, [r7, #12]
 8002384:	ed87 1a02 	vstr	s2, [r7, #8]
 8002388:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 800238c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	f107 0210 	add.w	r2, r7, #16
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fc51 	bl	8002c44 <_ZSt3minIfERKT_S2_S2_>
 80023a2:	4603      	mov	r3, r0
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 80023a8:	4b86      	ldr	r3, [pc, #536]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	f107 0210 	add.w	r2, r7, #16
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fc5d 	bl	8002c76 <_ZSt3maxIfERKT_S2_S2_>
 80023bc:	4603      	mov	r3, r0
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 80023c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c8:	f107 020c 	add.w	r2, r7, #12
 80023cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fc36 	bl	8002c44 <_ZSt3minIfERKT_S2_S2_>
 80023d8:	4603      	mov	r3, r0
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 80023de:	4b79      	ldr	r3, [pc, #484]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e2:	f107 020c 	add.w	r2, r7, #12
 80023e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fc42 	bl	8002c76 <_ZSt3maxIfERKT_S2_S2_>
 80023f2:	4603      	mov	r3, r0
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 80023f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023fe:	f107 0208 	add.w	r2, r7, #8
 8002402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fc1b 	bl	8002c44 <_ZSt3minIfERKT_S2_S2_>
 800240e:	4603      	mov	r3, r0
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 8002414:	4b6b      	ldr	r3, [pc, #428]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
 8002418:	f107 0208 	add.w	r2, r7, #8
 800241c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fc27 	bl	8002c76 <_ZSt3maxIfERKT_S2_S2_>
 8002428:	4603      	mov	r3, r0
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 800242e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
 8002434:	1d3a      	adds	r2, r7, #4
 8002436:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fc01 	bl	8002c44 <_ZSt3minIfERKT_S2_S2_>
 8002442:	4603      	mov	r3, r0
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 8002448:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800244c:	1d3a      	adds	r2, r7, #4
 800244e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fc0e 	bl	8002c76 <_ZSt3maxIfERKT_S2_S2_>
 800245a:	4603      	mov	r3, r0
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs droits/gauches car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL*motor_direction_inverter[front_left] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	ed93 7a06 	vldr	s14, [r3, #24]
 8002466:	edd7 7a04 	vldr	s15, [r7, #16]
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	db01      	blt.n	800247c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x108>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x10a>
 800247c:	2300      	movs	r3, #0
 800247e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR*motor_direction_inverter[front_right] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	ed93 7a07 	vldr	s14, [r3, #28]
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	db01      	blt.n	800249e <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x12a>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x12c>
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL*motor_direction_inverter[back_left] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	ed93 7a08 	vldr	s14, [r3, #32]
 80024aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	db01      	blt.n	80024c0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x14c>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x14e>
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR*motor_direction_inverter[back_right] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80024cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	db01      	blt.n	80024e2 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x16e>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x170>
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 80024e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002504:	ee17 3a90 	vmov	r3, s15
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 800250a:	edd7 7a03 	vldr	s15, [r7, #12]
 800250e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002526:	ee17 3a90 	vmov	r3, s15
 800252a:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 800252c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002530:	eeb0 7ae7 	vabs.f32	s14, s15
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002548:	ee17 3a90 	vmov	r3, s15
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 800254e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002552:	eeb0 7ae7 	vabs.f32	s14, s15
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256a:	ee17 3a90 	vmov	r3, s15
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 8002570:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002574:	2300      	movs	r3, #0
 8002576:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f000 f825 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 800257e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002582:	2301      	movs	r3, #1
 8002584:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f000 f81e 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 800258c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002590:	2302      	movs	r3, #2
 8002592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f000 f817 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 800259a:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800259e:	2303      	movs	r3, #3
 80025a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f000 f810 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd71 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fd6c 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 80025bc:	bf00      	nop
 80025be:	3750      	adds	r7, #80	@ 0x50
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	bf800000 	.word	0xbf800000

080025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	460b      	mov	r3, r1
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	4613      	mov	r3, r2
 80025dc:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	33fc      	adds	r3, #252	@ 0xfc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	79f9      	ldrb	r1, [r7, #7]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 8002610:	e011      	b.n	8002636 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4608      	mov	r0, r1
 8002634:	4798      	blx	r3
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>:
  * @param  vitesse_absolue_FR vitesse du moteur Avant droit
  * @param  vitesse_absolue_BL vitesse du moteur Arriere gauche
  * @param  vitesse_absolue_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_absolues(float vitesse_absolue_FL, float vitesse_absolue_FR, float vitesse_absolue_BL, float vitesse_absolue_BR )
{
 800263e:	b580      	push	{r7, lr}
 8002640:	ed2d 8b04 	vpush	{d8-d9}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	6178      	str	r0, [r7, #20]
 800264a:	ed87 0a04 	vstr	s0, [r7, #16]
 800264e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002652:	ed87 1a02 	vstr	s2, [r7, #8]
 8002656:	edc7 1a01 	vstr	s3, [r7, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800265a:	ed97 0a04 	vldr	s0, [r7, #16]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff fe70 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002664:	eeb0 7a40 	vmov.f32	s14, s0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002674:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002678:	ed97 0a03 	vldr	s0, [r7, #12]
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f7ff fe61 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002682:	eeb0 7a40 	vmov.f32	s14, s0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	eec7 8a27 	vdiv.f32	s17, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 8002696:	ed97 0a02 	vldr	s0, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff fe52 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026a0:	eeb0 7a40 	vmov.f32	s14, s0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b0:	ee87 9a27 	vdiv.f32	s18, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 80026b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f7ff fe43 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026be:	eef0 6a40 	vmov.f32	s13, s0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d2:	eef0 1a47 	vmov.f32	s3, s14
 80026d6:	eeb0 1a49 	vmov.f32	s2, s18
 80026da:	eef0 0a68 	vmov.f32	s1, s17
 80026de:	eeb0 0a48 	vmov.f32	s0, s16
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff fe46 	bl	8002374 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>

}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	ecbd 8b04 	vpop	{d8-d9}
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZN11BlocMoteurs16motors_stop_hardEv>:
  * Le passage a la vitesse a zero ne respecte pas les parametre de deceleration maximale du robot
  * et se realise au mieux des capacites du driver
  * (contrairement a la methode motors_stop_soft)
  */
void BlocMoteurs::motors_stop_hard()
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e014      	b.n	8002746 <_ZN11BlocMoteurs16motors_stop_hardEv+0x38>
	{
		moteurs[i]->prepare_hard_stop();
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4608      	mov	r0, r1
 800273e:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b03      	cmp	r3, #3
 800274a:	dde7      	ble.n	800271c <_ZN11BlocMoteurs16motors_stop_hardEv+0xe>
	}
    shield_1->perform_prepared_actions();
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fc9f 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc9a 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_ZN11BlocMoteurs19set_max_acc_moteursEffff>:
  * @param  acc_rad_s2_FR accéleration angulaire en rad/s^2 du moteur FR
  * @param  acc_rad_s2_BL accéleration angulaire en rad/s^2 du moteur BL
  * @param  acc_rad_s2_FR accéleration angulaire en rad/s^2 du moteur BR
  */
void BlocMoteurs::set_max_acc_moteurs(float acc_rad_s2_FL, float acc_rad_s2_FR, float acc_rad_s2_BL, float acc_rad_s2_BR)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b08c      	sub	sp, #48	@ 0x30
 8002772:	af00      	add	r7, sp, #0
 8002774:	6178      	str	r0, [r7, #20]
 8002776:	ed87 0a04 	vstr	s0, [r7, #16]
 800277a:	edc7 0a03 	vstr	s1, [r7, #12]
 800277e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002782:	edc7 1a01 	vstr	s3, [r7, #4]
unsigned int pps2[4] = {rad_to_step(acc_rad_s2_FL), rad_to_step(acc_rad_s2_FR), rad_to_step(acc_rad_s2_BL), rad_to_step(acc_rad_s2_BR)};
 8002786:	ed97 0a04 	vldr	s0, [r7, #16]
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff fdda 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002790:	eef0 7a40 	vmov.f32	s15, s0
 8002794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002798:	ee17 3a90 	vmov	r3, s15
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	ed97 0a03 	vldr	s0, [r7, #12]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff fdce 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80027a8:	eef0 7a40 	vmov.f32	s15, s0
 80027ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b0:	ee17 3a90 	vmov	r3, s15
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff fdc2 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80027c0:	eef0 7a40 	vmov.f32	s15, s0
 80027c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c8:	ee17 3a90 	vmov	r3, s15
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff fdb6 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e0:	ee17 3a90 	vmov	r3, s15
 80027e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int i = 0; i < NMOTEURS; i ++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ea:	e019      	b.n	8002820 <_ZN11BlocMoteurs19set_max_acc_moteursEffff+0xb2>
	{
		moteurs[i]->prepare_set_acceleration(pps2[i]);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	33dc      	adds	r3, #220	@ 0xdc
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	3330      	adds	r3, #48	@ 0x30
 8002810:	443b      	add	r3, r7
 8002812:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002816:	4619      	mov	r1, r3
 8002818:	4790      	blx	r2
	for( int i = 0; i < NMOTEURS; i ++)
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	3301      	adds	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002822:	2b03      	cmp	r3, #3
 8002824:	dde2      	ble.n	80027ec <_ZN11BlocMoteurs19set_max_acc_moteursEffff+0x7e>
	}
  shield_1->perform_prepared_actions();
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fc32 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
  shield_2->perform_prepared_actions();
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc2d 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 800283a:	bf00      	nop
 800283c:	3730      	adds	r7, #48	@ 0x30
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_ZN11BlocMoteurs19set_max_dec_moteursEffff>:
  * @param  dec_rad_s2_FR décéleration angulaire en rad/s^2 du moteur FR
  * @param  dec_rad_s2_BL décéleration angulaire en rad/s^2 du moteur BL
  * @param  dec_rad_s2_FR décéleration angulaire en rad/s^2 du moteur BR
  */
void BlocMoteurs::set_max_dec_moteurs(float dec_rad_s2_FL, float dec_rad_s2_FR, float dec_rad_s2_BL, float dec_rad_s2_BR)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b08c      	sub	sp, #48	@ 0x30
 8002846:	af00      	add	r7, sp, #0
 8002848:	6178      	str	r0, [r7, #20]
 800284a:	ed87 0a04 	vstr	s0, [r7, #16]
 800284e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002852:	ed87 1a02 	vstr	s2, [r7, #8]
 8002856:	edc7 1a01 	vstr	s3, [r7, #4]
unsigned int pps2[4] = {rad_to_step(dec_rad_s2_FL), rad_to_step(dec_rad_s2_FR), rad_to_step(dec_rad_s2_BL), rad_to_step(dec_rad_s2_BR)};
 800285a:	ed97 0a04 	vldr	s0, [r7, #16]
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f7ff fd70 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002864:	eef0 7a40 	vmov.f32	s15, s0
 8002868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286c:	ee17 3a90 	vmov	r3, s15
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	ed97 0a03 	vldr	s0, [r7, #12]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff fd64 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 800287c:	eef0 7a40 	vmov.f32	s15, s0
 8002880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002884:	ee17 3a90 	vmov	r3, s15
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	ed97 0a02 	vldr	s0, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff fd58 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002894:	eef0 7a40 	vmov.f32	s15, s0
 8002898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800289c:	ee17 3a90 	vmov	r3, s15
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80028a6:	6978      	ldr	r0, [r7, #20]
 80028a8:	f7ff fd4c 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80028ac:	eef0 7a40 	vmov.f32	s15, s0
 80028b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b4:	ee17 3a90 	vmov	r3, s15
 80028b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int i = 0; i < NMOTEURS; i ++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028be:	e019      	b.n	80028f4 <_ZN11BlocMoteurs19set_max_dec_moteursEffff+0xb2>
	{
		moteurs[i]->prepare_set_deceleration(pps2[i]);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	33e0      	adds	r3, #224	@ 0xe0
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	3330      	adds	r3, #48	@ 0x30
 80028e4:	443b      	add	r3, r7
 80028e6:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4790      	blx	r2
	for( int i = 0; i < NMOTEURS; i ++)
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	3301      	adds	r3, #1
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	dde2      	ble.n	80028c0 <_ZN11BlocMoteurs19set_max_dec_moteursEffff+0x7e>
	}
  shield_1->perform_prepared_actions();
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fbc8 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
  shield_2->perform_prepared_actions();
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fbc3 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 800290e:	bf00      	nop
 8002910:	3730      	adds	r7, #48	@ 0x30
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    initShield1[1].step_sel = step_mode;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    initShield2[0].step_sel = step_mode;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    initShield2[0].step_sel = step_mode;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    bool return_value = true;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	e01c      	b.n	8002986 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3354      	adds	r3, #84	@ 0x54
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	4611      	mov	r1, r2
 800296e:	4798      	blx	r3
 8002970:	4603      	mov	r3, r0
 8002972:	f083 0301 	eor.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	3301      	adds	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b03      	cmp	r3, #3
 800298a:	dddf      	ble.n	800294c <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 800298c:	7bfb      	ldrb	r3, [r7, #15]

}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	80fb      	strh	r3, [r7, #6]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f009 fc54 	bl	800c258 <_ZN13abstractL6470C1Ev>
 80029b0:	4a27      	ldr	r2, [pc, #156]	@ (8002a50 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	819a      	strh	r2, [r3, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	611a      	str	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8b3a      	ldrh	r2, [r7, #24]
 80029cc:	829a      	strh	r2, [r3, #20]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 80029da:	4b1e      	ldr	r3, [pc, #120]	@ (8002a54 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a54 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80029e4:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		//throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80029ea:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80029f0:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a60 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80029fc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002a10:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	b2d1      	uxtb	r1, r2
 8002a18:	4a13      	ldr	r2, [pc, #76]	@ (8002a68 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a1a:	7011      	strb	r1, [r2, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002a20:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002a26:	2220      	movs	r2, #32
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4811      	ldr	r0, [pc, #68]	@ (8002a70 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002a2c:	f010 fb77 	bl	801311e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002a30:	2208      	movs	r2, #8
 8002a32:	2100      	movs	r1, #0
 8002a34:	480f      	ldr	r0, [pc, #60]	@ (8002a74 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002a36:	f010 fb72 	bl	801311e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	480e      	ldr	r0, [pc, #56]	@ (8002a78 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002a40:	f010 fb6d 	bl	801311e <memset>
    }
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	080153b4 	.word	0x080153b4
 8002a54:	200002a8 	.word	0x200002a8
 8002a58:	08015678 	.word	0x08015678
 8002a5c:	0801586c 	.word	0x0801586c
 8002a60:	08015978 	.word	0x08015978
 8002a64:	0801598c 	.word	0x0801598c
 8002a68:	2000020c 	.word	0x2000020c
 8002a6c:	2000020d 	.word	0x2000020d
 8002a70:	20000210 	.word	0x20000210
 8002a74:	20000230 	.word	0x20000230
 8002a78:	20000238 	.word	0x20000238

08002a7c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f009 fbe2 	bl	800c258 <_ZN13abstractL6470C1Ev>
 8002a94:	4a27      	ldr	r2, [pc, #156]	@ (8002b34 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	819a      	strh	r2, [r3, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	611a      	str	r2, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8b3a      	ldrh	r2, [r7, #24]
 8002ab0:	829a      	strh	r2, [r3, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2202      	movs	r2, #2
 8002abc:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002abe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b38 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b38 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002ac8:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b3c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002ace:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a1a      	ldr	r2, [pc, #104]	@ (8002b48 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002af4:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	b2d1      	uxtb	r1, r2
 8002afc:	4a13      	ldr	r2, [pc, #76]	@ (8002b4c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002afe:	7011      	strb	r1, [r2, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002b04:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4811      	ldr	r0, [pc, #68]	@ (8002b54 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002b10:	f010 fb05 	bl	801311e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b14:	2208      	movs	r2, #8
 8002b16:	2100      	movs	r1, #0
 8002b18:	480f      	ldr	r0, [pc, #60]	@ (8002b58 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002b1a:	f010 fb00 	bl	801311e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b1e:	2208      	movs	r2, #8
 8002b20:	2100      	movs	r1, #0
 8002b22:	480e      	ldr	r0, [pc, #56]	@ (8002b5c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002b24:	f010 fafb 	bl	801311e <memset>
    }
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	08015148 	.word	0x08015148
 8002b38:	200002a9 	.word	0x200002a9
 8002b3c:	08015998 	.word	0x08015998
 8002b40:	08015b8c 	.word	0x08015b8c
 8002b44:	08015c98 	.word	0x08015c98
 8002b48:	08015cac 	.word	0x08015cac
 8002b4c:	20000240 	.word	0x20000240
 8002b50:	20000241 	.word	0x20000241
 8002b54:	20000244 	.word	0x20000244
 8002b58:	20000264 	.word	0x20000264
 8002b5c:	2000026c 	.word	0x2000026c

08002b60 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	80fb      	strh	r3, [r7, #6]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f009 fb70 	bl	800c258 <_ZN13abstractL6470C1Ev>
 8002b78:	4a27      	ldr	r2, [pc, #156]	@ (8002c18 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	819a      	strh	r2, [r3, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	611a      	str	r2, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8b3a      	ldrh	r2, [r7, #24]
 8002b94:	829a      	strh	r2, [r3, #20]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002bac:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c20 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002bb2:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c28 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002bbe:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c2c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002bd8:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	b2d1      	uxtb	r1, r2
 8002be0:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002be2:	7011      	strb	r1, [r2, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002be8:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002bee:	2220      	movs	r2, #32
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4811      	ldr	r0, [pc, #68]	@ (8002c38 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002bf4:	f010 fa93 	bl	801311e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	480f      	ldr	r0, [pc, #60]	@ (8002c3c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002bfe:	f010 fa8e 	bl	801311e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002c02:	2208      	movs	r2, #8
 8002c04:	2100      	movs	r1, #0
 8002c06:	480e      	ldr	r0, [pc, #56]	@ (8002c40 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002c08:	f010 fa89 	bl	801311e <memset>
    }
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	08014edc 	.word	0x08014edc
 8002c1c:	200002aa 	.word	0x200002aa
 8002c20:	08015cb8 	.word	0x08015cb8
 8002c24:	08015eac 	.word	0x08015eac
 8002c28:	08015fb8 	.word	0x08015fb8
 8002c2c:	08015fcc 	.word	0x08015fcc
 8002c30:	20000274 	.word	0x20000274
 8002c34:	20000275 	.word	0x20000275
 8002c38:	20000278 	.word	0x20000278
 8002c3c:	20000298 	.word	0x20000298
 8002c40:	200002a0 	.word	0x200002a0

08002c44 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	ed93 7a00 	vldr	s14, [r3]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	d501      	bpl.n	8002c68 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	e000      	b.n	8002c6a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002c68:	687b      	ldr	r3, [r7, #4]
    }
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	ed93 7a00 	vldr	s14, [r3]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d501      	bpl.n	8002c9a <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	e000      	b.n	8002c9c <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002c9a:	687b      	ldr	r3, [r7, #4]
    }
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f009 fadd 	bl	800c278 <_ZN13abstractL6470D1Ev>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	08014edc 	.word	0x08014edc

08002ccc <_ZN5L6470I8shield_3ED0Ev>:
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffe7 	bl	8002ca8 <_ZN5L6470I8shield_3ED1Ev>
 8002cda:	216c      	movs	r1, #108	@ 0x6c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f00e fe49 	bl	8011974 <_ZdlPvj>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN5L6470I8shield_2ED1Ev>:
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4a05      	ldr	r2, [pc, #20]	@ (8002d0c <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f009 fabb 	bl	800c278 <_ZN13abstractL6470D1Ev>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08015148 	.word	0x08015148

08002d10 <_ZN5L6470I8shield_2ED0Ev>:
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ffe7 	bl	8002cec <_ZN5L6470I8shield_2ED1Ev>
 8002d1e:	216c      	movs	r1, #108	@ 0x6c
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f00e fe27 	bl	8011974 <_ZdlPvj>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZN5L6470I8shield_1ED1Ev>:
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	4a05      	ldr	r2, [pc, #20]	@ (8002d50 <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f009 fa99 	bl	800c278 <_ZN13abstractL6470D1Ev>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	080153b4 	.word	0x080153b4

08002d54 <_ZN5L6470I8shield_1ED0Ev>:
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffe7 	bl	8002d30 <_ZN5L6470I8shield_1ED1Ev>
 8002d62:	216c      	movs	r1, #108	@ 0x6c
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f00e fe05 	bl	8011974 <_ZdlPvj>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
 8002d8e:	4603      	mov	r3, r0
    }
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
 8002dae:	4603      	mov	r3, r0
    }
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
 8002dd6:	4603      	mov	r3, r0
    }
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002df0:	681c      	ldr	r4, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	4619      	mov	r1, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	47a0      	blx	r4
 8002e0a:	4603      	mov	r3, r0
    }
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}

08002e14 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002e24:	681c      	ldr	r4, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2102      	movs	r1, #2
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	47a0      	blx	r4
 8002e3e:	4603      	mov	r3, r0
    }
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e58:	681c      	ldr	r4, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002e62:	681d      	ldr	r5, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2103      	movs	r1, #3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
 8002e74:	4603      	mov	r3, r0
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	47a8      	blx	r5
 8002e7c:	eef0 7a40 	vmov.f32	s15, s0
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	47a0      	blx	r4
 8002e88:	4603      	mov	r3, r0
    }
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bdb0      	pop	{r4, r5, r7, pc}

08002e92 <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002e92:	b5b0      	push	{r4, r5, r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ea2:	681c      	ldr	r4, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eac:	681d      	ldr	r5, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2106      	movs	r1, #6
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	47a8      	blx	r5
 8002ec8:	eef0 7a40 	vmov.f32	s15, s0
 8002ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	47a0      	blx	r4
 8002ed4:	4603      	mov	r3, r0
    }
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bdb0      	pop	{r4, r5, r7, pc}

08002ede <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002ede:	b5b0      	push	{r4, r5, r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eee:	681c      	ldr	r4, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002ef8:	681d      	ldr	r5, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2107      	movs	r1, #7
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	47a8      	blx	r5
 8002f14:	eef0 7a40 	vmov.f32	s15, s0
 8002f18:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	47a0      	blx	r4
 8002f20:	4603      	mov	r3, r0
    }
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bdb0      	pop	{r4, r5, r7, pc}

08002f2a <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002f2a:	b5b0      	push	{r4, r5, r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f3a:	681c      	ldr	r4, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f44:	681d      	ldr	r5, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2104      	movs	r1, #4
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	47a8      	blx	r5
 8002f60:	eef0 7a40 	vmov.f32	s15, s0
 8002f64:	eeb0 0a67 	vmov.f32	s0, s15
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	47a0      	blx	r4
 8002f6c:	4603      	mov	r3, r0
    }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bdb0      	pop	{r4, r5, r7, pc}

08002f76 <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002f76:	b5b0      	push	{r4, r5, r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f86:	681c      	ldr	r4, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002f90:	681d      	ldr	r5, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2105      	movs	r1, #5
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	47a8      	blx	r5
 8002fac:	eef0 7a40 	vmov.f32	s15, s0
 8002fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	47a0      	blx	r4
 8002fb8:	4603      	mov	r3, r0
    }
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}

08002fc2 <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002fe4:	2300      	movs	r3, #0
    }
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	b2d1      	uxtb	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	4798      	blx	r3
    }
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
    }
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003044:	681c      	ldr	r4, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2100      	movs	r1, #0
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	2102      	movs	r1, #2
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	47a0      	blx	r4
    }
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}

08003068 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6839      	ldr	r1, [r7, #0]
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	2102      	movs	r1, #2
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	47a0      	blx	r4
    }
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}

0800309e <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 800309e:	b590      	push	{r4, r7, lr}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80030b0:	681c      	ldr	r4, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	ee07 2a90 	vmov	s15, r2
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	461a      	mov	r2, r3
 80030d2:	2106      	movs	r1, #6
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	47a0      	blx	r4
        return true;
 80030d8:	2301      	movs	r3, #1
    }
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd90      	pop	{r4, r7, pc}

080030e2 <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 80030e2:	b590      	push	{r4, r7, lr}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80030f4:	681c      	ldr	r4, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	ee07 2a90 	vmov	s15, r2
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	eeb0 0a67 	vmov.f32	s0, s15
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	2107      	movs	r1, #7
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	47a0      	blx	r4
        return true;
 800311c:	2301      	movs	r3, #1
    }
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8003126:	b590      	push	{r4, r7, lr}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003138:	681c      	ldr	r4, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	ee07 2a90 	vmov	s15, r2
 800314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314e:	eeb0 0a67 	vmov.f32	s0, s15
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
 8003156:	4603      	mov	r3, r0
 8003158:	461a      	mov	r2, r3
 800315a:	2104      	movs	r1, #4
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	47a0      	blx	r4
        return true;
 8003160:	2301      	movs	r3, #1
    }
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bd90      	pop	{r4, r7, pc}

0800316a <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 800316a:	b590      	push	{r4, r7, lr}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800317c:	681c      	ldr	r4, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	ee07 2a90 	vmov	s15, r2
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eeb0 0a67 	vmov.f32	s0, s15
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	2105      	movs	r1, #5
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	47a0      	blx	r4
        return true;
 80031a4:	2301      	movs	r3, #1
    }
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}

080031ae <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	2b07      	cmp	r3, #7
 80031be:	d901      	bls.n	80031c4 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e00f      	b.n	80031e4 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3380      	adds	r3, #128	@ 0x80
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	2115      	movs	r1, #21
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
        return true;
 80031e2:	2301      	movs	r3, #1
    }
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80031fe:	681c      	ldr	r4, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
 8003210:	4603      	mov	r3, r0
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	47a0      	blx	r4
    }
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8003220:	b5b0      	push	{r4, r5, r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8003236:	681c      	ldr	r4, [r3, #0]
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 800323e:	2501      	movs	r5, #1
 8003240:	e000      	b.n	8003244 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 8003242:	2500      	movs	r5, #0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	4798      	blx	r3
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	4629      	mov	r1, r5
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	47a0      	blx	r4
    }
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bdb0      	pop	{r4, r5, r7, pc}

08003266 <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
    }
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
    }
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80032a2:	b5b0      	push	{r4, r5, r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	72fb      	strb	r3, [r7, #11]
 80032b0:	4613      	mov	r3, r2
 80032b2:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80032bc:	681c      	ldr	r4, [r3, #0]
 80032be:	7abb      	ldrb	r3, [r7, #10]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80032c4:	2501      	movs	r5, #1
 80032c6:	e000      	b.n	80032ca <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80032c8:	2500      	movs	r5, #0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	ee07 2a90 	vmov	s15, r2
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	eeb0 0a67 	vmov.f32	s0, s15
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	4798      	blx	r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	7af9      	ldrb	r1, [r7, #11]
 80032ea:	462a      	mov	r2, r5
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	47a0      	blx	r4
    }
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bdb0      	pop	{r4, r5, r7, pc}

080032f8 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800330c:	681c      	ldr	r4, [r3, #0]
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8003314:	2501      	movs	r5, #1
 8003316:	e000      	b.n	800331a <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 8003318:	2500      	movs	r5, #0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2106      	movs	r1, #6
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	4629      	mov	r1, r5
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	47a0      	blx	r4
    }
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bdb0      	pop	{r4, r5, r7, pc}

0800333c <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800333c:	b5b0      	push	{r4, r5, r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	460b      	mov	r3, r1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8003352:	681c      	ldr	r4, [r3, #0]
 8003354:	7afb      	ldrb	r3, [r7, #11]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 800335a:	2501      	movs	r5, #1
 800335c:	e000      	b.n	8003360 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 800335e:	2500      	movs	r5, #0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	ee07 2a90 	vmov	s15, r2
 8003370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003374:	eeb0 0a67 	vmov.f32	s0, s15
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	4798      	blx	r3
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	4629      	mov	r1, r5
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	47a0      	blx	r4
    }
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bdb0      	pop	{r4, r5, r7, pc}

0800338e <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	460b      	mov	r3, r1
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	7afa      	ldrb	r2, [r7, #11]
 80033a8:	2a01      	cmp	r2, #1
 80033aa:	d101      	bne.n	80033b0 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 80033ac:	2101      	movs	r1, #1
 80033ae:	e000      	b.n	80033b2 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 80033b0:	2100      	movs	r1, #0
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	4798      	blx	r3
    }
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
    }
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
    }
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
    }
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
    }
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8003440:	bf00      	nop
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2101      	movs	r1, #1
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ef      	bne.n	8003442 <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3380      	adds	r3, #128	@ 0x80
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	2a01      	cmp	r2, #1
 8003492:	d101      	bne.n	8003498 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8003494:	2201      	movs	r2, #1
 8003496:	e000      	b.n	800349a <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8003498:	2200      	movs	r2, #0
 800349a:	4611      	mov	r1, r2
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
    }
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
 80034b4:	4613      	mov	r3, r2
 80034b6:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	78ba      	ldrb	r2, [r7, #2]
 80034c4:	2a01      	cmp	r2, #1
 80034c6:	d101      	bne.n	80034cc <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80034c8:	2201      	movs	r2, #1
 80034ca:	e000      	b.n	80034ce <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80034cc:	2200      	movs	r2, #0
 80034ce:	78f9      	ldrb	r1, [r7, #3]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
    }
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
    }
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	4611      	mov	r1, r2
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2100      	movs	r1, #0
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2102      	movs	r1, #2
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2103      	movs	r1, #3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2203      	movs	r2, #3
 80035ba:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2106      	movs	r1, #6
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2204      	movs	r2, #4
 80035e2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2107      	movs	r1, #7
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2104      	movs	r1, #4
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2206      	movs	r2, #6
 8003632:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2105      	movs	r1, #5
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2207      	movs	r2, #7
 800365a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003678:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 800367a:	2201      	movs	r2, #1
 800367c:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4906      	ldr	r1, [pc, #24]	@ (80036a4 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2208      	movs	r2, #8
 8003692:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000275 	.word	0x20000275
 80036a4:	20000278 	.word	0x20000278

080036a8 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	b2d1      	uxtb	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2200      	movs	r2, #0
 8003712:	2102      	movs	r1, #2
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2209      	movs	r2, #9
 800371c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800373a:	681c      	ldr	r4, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	2102      	movs	r1, #2
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}

08003766 <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 8003766:	b590      	push	{r4, r7, lr}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003778:	681c      	ldr	r4, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	ee07 2a90 	vmov	s15, r2
 800378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378e:	eeb0 0a67 	vmov.f32	s0, s15
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	2103      	movs	r1, #3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd90      	pop	{r4, r7, pc}

080037b0 <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037c2:	681c      	ldr	r4, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	ee07 2a90 	vmov	s15, r2
 80037d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d8:	eeb0 0a67 	vmov.f32	s0, s15
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
 80037e4:	2106      	movs	r1, #6
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}

080037fa <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 80037fa:	b590      	push	{r4, r7, lr}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800380c:	681c      	ldr	r4, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	ee07 2a90 	vmov	s15, r2
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	eeb0 0a67 	vmov.f32	s0, s15
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	2107      	movs	r1, #7
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bd90      	pop	{r4, r7, pc}

08003844 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003856:	681c      	ldr	r4, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	ee07 2a90 	vmov	s15, r2
 8003868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386c:	eeb0 0a67 	vmov.f32	s0, s15
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	4603      	mov	r3, r0
 8003876:	461a      	mov	r2, r3
 8003878:	2104      	movs	r1, #4
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}

0800388e <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800388e:	b590      	push	{r4, r7, lr}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80038a0:	681c      	ldr	r4, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	ee07 2a90 	vmov	s15, r2
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	2105      	movs	r1, #5
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd90      	pop	{r4, r7, pc}

080038d8 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80038ea:	681c      	ldr	r4, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6839      	ldr	r1, [r7, #0]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
 80038fc:	4603      	mov	r3, r0
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}

08003914 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8003914:	b5b0      	push	{r4, r5, r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800392a:	681c      	ldr	r4, [r3, #0]
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8003932:	2501      	movs	r5, #1
 8003934:	e000      	b.n	8003938 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8003936:	2500      	movs	r5, #0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	4798      	blx	r3
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	4629      	mov	r1, r5
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bdb0      	pop	{r4, r5, r7, pc}

08003962 <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 80039ae:	b5b0      	push	{r4, r5, r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	72fb      	strb	r3, [r7, #11]
 80039bc:	4613      	mov	r3, r2
 80039be:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	7abb      	ldrb	r3, [r7, #10]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80039d0:	2501      	movs	r5, #1
 80039d2:	e000      	b.n	80039d6 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80039d4:	2500      	movs	r5, #0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	ee07 2a90 	vmov	s15, r2
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eeb0 0a67 	vmov.f32	s0, s15
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	4798      	blx	r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	7af9      	ldrb	r1, [r7, #11]
 80039f6:	462a      	mov	r2, r5
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bdb0      	pop	{r4, r5, r7, pc}

08003a0c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003a20:	681c      	ldr	r4, [r3, #0]
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8003a28:	2501      	movs	r5, #1
 8003a2a:	e000      	b.n	8003a2e <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8003a2c:	2500      	movs	r5, #0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2106      	movs	r1, #6
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	461a      	mov	r2, r3
 8003a42:	4629      	mov	r1, r5
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bdb0      	pop	{r4, r5, r7, pc}

08003a58 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8003a58:	b5b0      	push	{r4, r5, r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	460b      	mov	r3, r1
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003a6e:	681c      	ldr	r4, [r3, #0]
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8003a76:	2501      	movs	r5, #1
 8003a78:	e000      	b.n	8003a7c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8003a7a:	2500      	movs	r5, #0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	ee07 2a90 	vmov	s15, r2
 8003a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a90:	eeb0 0a67 	vmov.f32	s0, s15
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	4798      	blx	r3
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bdb0      	pop	{r4, r5, r7, pc}

08003ab2 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	460b      	mov	r3, r1
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	7afa      	ldrb	r2, [r7, #11]
 8003acc:	2a01      	cmp	r2, #1
 8003ace:	d101      	bne.n	8003ad4 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	e000      	b.n	8003ad6 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	2a01      	cmp	r2, #1
 8003b9e:	d101      	bne.n	8003ba4 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	e000      	b.n	8003ba6 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	78ba      	ldrb	r2, [r7, #2]
 8003bd8:	2a01      	cmp	r2, #1
 8003bda:	d101      	bne.n	8003be0 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003bdc:	2201      	movs	r2, #1
 8003bde:	e000      	b.n	8003be2 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003be0:	2200      	movs	r2, #0
 8003be2:	78f9      	ldrb	r1, [r7, #3]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
 8003c34:	4603      	mov	r3, r0
    }
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003c58:	b5b0      	push	{r4, r5, r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	2b07      	cmp	r3, #7
 8003c6c:	f200 80fe 	bhi.w	8003e6c <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003c70:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c99 	.word	0x08003c99
 8003c7c:	08003cc5 	.word	0x08003cc5
 8003c80:	08003cf3 	.word	0x08003cf3
 8003c84:	08003d37 	.word	0x08003d37
 8003c88:	08003d7d 	.word	0x08003d7d
 8003c8c:	08003dc3 	.word	0x08003dc3
 8003c90:	08003e09 	.word	0x08003e09
 8003c94:	08003e4f 	.word	0x08003e4f
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003ca0:	681c      	ldr	r4, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6a12      	ldr	r2, [r2, #32]
 8003cb0:	7b92      	ldrb	r2, [r2, #14]
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	47a0      	blx	r4
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	e0d4      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003ccc:	681c      	ldr	r4, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6a12      	ldr	r2, [r2, #32]
 8003cdc:	3228      	adds	r2, #40	@ 0x28
 8003cde:	7b92      	ldrb	r2, [r2, #14]
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	47a0      	blx	r4
 8003cee:	4603      	mov	r3, r0
 8003cf0:	e0bd      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6a12      	ldr	r2, [r2, #32]
 8003d14:	323c      	adds	r2, #60	@ 0x3c
 8003d16:	7b92      	ldrb	r2, [r2, #14]
 8003d18:	6839      	ldr	r1, [r7, #0]
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	47a8      	blx	r5
 8003d26:	eef0 7a40 	vmov.f32	s15, s0
 8003d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	47a0      	blx	r4
 8003d32:	4603      	mov	r3, r0
 8003d34:	e09b      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d3e:	681c      	ldr	r4, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d48:	681d      	ldr	r5, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6a12      	ldr	r2, [r2, #32]
 8003d58:	3278      	adds	r2, #120	@ 0x78
 8003d5a:	7b92      	ldrb	r2, [r2, #14]
 8003d5c:	6839      	ldr	r1, [r7, #0]
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	47a8      	blx	r5
 8003d6c:	eef0 7a40 	vmov.f32	s15, s0
 8003d70:	eeb0 0a67 	vmov.f32	s0, s15
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	47a0      	blx	r4
 8003d78:	4603      	mov	r3, r0
 8003d7a:	e078      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d84:	681c      	ldr	r4, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003d8e:	681d      	ldr	r5, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6a12      	ldr	r2, [r2, #32]
 8003d9e:	328c      	adds	r2, #140	@ 0x8c
 8003da0:	7b92      	ldrb	r2, [r2, #14]
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
 8003da8:	4603      	mov	r3, r0
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	47a8      	blx	r5
 8003db2:	eef0 7a40 	vmov.f32	s15, s0
 8003db6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	47a0      	blx	r4
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	e055      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dca:	681c      	ldr	r4, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003dd4:	681d      	ldr	r5, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6a12      	ldr	r2, [r2, #32]
 8003de4:	3250      	adds	r2, #80	@ 0x50
 8003de6:	7b92      	ldrb	r2, [r2, #14]
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	47a8      	blx	r5
 8003df8:	eef0 7a40 	vmov.f32	s15, s0
 8003dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	47a0      	blx	r4
 8003e04:	4603      	mov	r3, r0
 8003e06:	e032      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e10:	681c      	ldr	r4, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003e1a:	681d      	ldr	r5, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6a12      	ldr	r2, [r2, #32]
 8003e2a:	3264      	adds	r2, #100	@ 0x64
 8003e2c:	7b92      	ldrb	r2, [r2, #14]
 8003e2e:	6839      	ldr	r1, [r7, #0]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
 8003e34:	4603      	mov	r3, r0
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	47a8      	blx	r5
 8003e3e:	eef0 7a40 	vmov.f32	s15, s0
 8003e42:	eeb0 0a67 	vmov.f32	s0, s15
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	47a0      	blx	r4
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	e00f      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2104      	movs	r1, #4
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4798      	blx	r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e002      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003e6c:	2300      	movs	r3, #0
        }
    }
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bdb0      	pop	{r4, r5, r7, pc}
 8003e76:	bf00      	nop

08003e78 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6898      	ldr	r0, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	899b      	ldrh	r3, [r3, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f00a f8cc 	bl	800e028 <HAL_GPIO_WritePin>
    }
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ea8:	d303      	bcc.n	8003eb2 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8003eb0:	e000      	b.n	8003eb4 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003eb2:	683b      	ldr	r3, [r7, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db05      	blt.n	8003edc <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ed6:	da01      	bge.n	8003edc <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	e00c      	b.n	8003ef6 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8003ee2:	db06      	blt.n	8003ef2 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da03      	bge.n	8003ef2 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8003ef0:	e001      	b.n	8003ef6 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003ef2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f18:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003f30 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003f20:	eeb0 0a67 	vmov.f32	s0, s15
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	3c74242a 	.word	0x3c74242a

08003f34 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003f40:	edd7 7a00 	vldr	s15, [r7]
 8003f44:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003f78 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f50:	d80a      	bhi.n	8003f68 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003f52:	ed97 7a00 	vldr	s14, [r7]
 8003f56:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003f7c <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f62:	ee17 3a90 	vmov	r3, s15
 8003f66:	e000      	b.n	8003f6a <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	4674241b 	.word	0x4674241b
 8003f7c:	3c74242a 	.word	0x3c74242a

08003f80 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f92:	d209      	bcs.n	8003fa8 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f9e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003fbc <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8003fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa6:	e001      	b.n	8003fac <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003fa8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003fc0 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8003fac:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	4168d4fe 	.word	0x4168d4fe
 8003fc0:	00000000 	.word	0x00000000

08003fc4 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003fd0:	edd7 7a00 	vldr	s15, [r7]
 8003fd4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004008 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe0:	d80b      	bhi.n	8003ffa <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003fe2:	ed97 7a00 	vldr	s14, [r7]
 8003fe6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800400c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8003fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff2:	ee17 3a90 	vmov	r3, s15
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	e000      	b.n	8003ffc <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	4768c671 	.word	0x4768c671
 800400c:	4168d4fe 	.word	0x4168d4fe

08004010 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004022:	d209      	bcs.n	8004038 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8004024:	887b      	ldrh	r3, [r7, #2]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800402e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800404c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 8004032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004036:	e001      	b.n	800403c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8004038:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004050 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 800403c:	eeb0 0a67 	vmov.f32	s0, s15
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	4168d4fe 	.word	0x4168d4fe
 8004050:	00000000 	.word	0x00000000

08004054 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8004060:	edd7 7a00 	vldr	s15, [r7]
 8004064:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004098 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8004068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800406c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004070:	d80b      	bhi.n	800408a <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004072:	ed97 7a00 	vldr	s14, [r7]
 8004076:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800409c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 800407a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800407e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004082:	ee17 3a90 	vmov	r3, s15
 8004086:	b29b      	uxth	r3, r3
 8004088:	e000      	b.n	800408c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	4768c671 	.word	0x4768c671
 800409c:	4168d4fe 	.word	0x4168d4fe

080040a0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 80040ac:	887b      	ldrh	r3, [r7, #2]
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b2:	d209      	bcs.n	80040c8 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040be:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80040dc <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 80040c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040c6:	e001      	b.n	80040cc <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80040c8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80040e0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 80040cc:	eeb0 0a67 	vmov.f32	s0, s15
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	4174240b 	.word	0x4174240b
 80040e0:	00000000 	.word	0x00000000

080040e4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 80040f0:	edd7 7a00 	vldr	s15, [r7]
 80040f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004128 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 80040f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	d80b      	bhi.n	800411a <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8004102:	ed97 7a00 	vldr	s14, [r7]
 8004106:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800412c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800410a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800410e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004112:	ee17 3a90 	vmov	r3, s15
 8004116:	b29b      	uxth	r3, r3
 8004118:	e000      	b.n	800411c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	4673e702 	.word	0x4673e702
 800412c:	4174240b 	.word	0x4174240b

08004130 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004142:	d209      	bcs.n	8004158 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800414e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800416c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8004152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004156:	e001      	b.n	800415c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004158:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004170 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	3e742401 	.word	0x3e742401
 8004170:	00000000 	.word	0x00000000

08004174 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004180:	edd7 7a00 	vldr	s15, [r7]
 8004184:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80041b8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 8004188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	d80b      	bhi.n	80041aa <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8004192:	ed97 7a00 	vldr	s14, [r7]
 8004196:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80041bc <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 800419a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800419e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a2:	ee17 3a90 	vmov	r3, s15
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	e000      	b.n	80041ac <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	447414bf 	.word	0x447414bf
 80041bc:	3e742401 	.word	0x3e742401

080041c0 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d2:	d219      	bcs.n	8004208 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fc f9d4 	bl	8000584 <__aeabi_i2d>
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4b0e      	ldr	r3, [pc, #56]	@ (800421c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 80041e2:	f7fc f883 	bl	80002ec <__adddf3>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 80041f4:	f7fc fa30 	bl	8000658 <__aeabi_dmul>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f7fc fd02 	bl	8000c08 <__aeabi_d2f>
 8004204:	4603      	mov	r3, r0
 8004206:	e001      	b.n	800420c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 8004208:	f04f 0300 	mov.w	r3, #0
}
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eeb0 0a67 	vmov.f32	s0, s15
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	3fe00000 	.word	0x3fe00000
 8004220:	402e8000 	.word	0x402e8000

08004224 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8004230:	edd7 7a00 	vldr	s15, [r7]
 8004234:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004270 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 8004238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	d80f      	bhi.n	8004262 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8004242:	ed97 7a00 	vldr	s14, [r7]
 8004246:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004274 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 800424a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800424e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425a:	ee17 3a90 	vmov	r3, s15
 800425e:	b29b      	uxth	r3, r3
 8004260:	e000      	b.n	8004264 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	4673e180 	.word	0x4673e180
 8004274:	41740000 	.word	0x41740000

08004278 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8004284:	887b      	ldrh	r3, [r7, #2]
 8004286:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800428a:	d209      	bcs.n	80042a0 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004296:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80042b4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800429a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800429e:	e001      	b.n	80042a4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80042a0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80042b8 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 80042a4:	eeb0 0a67 	vmov.f32	s0, s15
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	3d7423f4 	.word	0x3d7423f4
 80042b8:	00000000 	.word	0x00000000

080042bc <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 80042c8:	edd7 7a00 	vldr	s15, [r7]
 80042cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004300 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 80042d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	d80b      	bhi.n	80042f2 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 80042da:	ed97 7a00 	vldr	s14, [r7]
 80042de:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004304 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 80042e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ea:	ee17 3a90 	vmov	r3, s15
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	e000      	b.n	80042f4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	44742023 	.word	0x44742023
 8004304:	3d7423f4 	.word	0x3d7423f4

08004308 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004334 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 8004322:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004326:	eeb0 0a67 	vmov.f32	s0, s15
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	3783956e 	.word	0x3783956e

08004338 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004344:	edd7 7a02 	vldr	s15, [r7, #8]
 8004348:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004380 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 800434c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	d80c      	bhi.n	8004370 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004356:	ed97 7a02 	vldr	s14, [r7, #8]
 800435a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004384 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 800435e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004366:	edc7 7a01 	vstr	s15, [r7, #4]
 800436a:	793b      	ldrb	r3, [r7, #4]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e000      	b.n	8004372 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	3b8311d9 	.word	0x3b8311d9
 8004384:	3783956e 	.word	0x3783956e

08004388 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800439e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80043b4 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 80043a2:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80043a6:	eeb0 0a67 	vmov.f32	s0, s15
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	3783956e 	.word	0x3783956e

080043b8 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80043c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043c8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004400 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 80043cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d4:	d80c      	bhi.n	80043f0 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80043d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80043da:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004404 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 80043de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80043ea:	793b      	ldrb	r3, [r7, #4]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e000      	b.n	80043f2 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	3b8311d9 	.word	0x3b8311d9
 8004404:	3783956e 	.word	0x3783956e

08004408 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004434 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8004422:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004426:	eeb0 0a67 	vmov.f32	s0, s15
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	3783956e 	.word	0x3783956e

08004438 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004444:	edd7 7a02 	vldr	s15, [r7, #8]
 8004448:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004480 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800444c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	d80c      	bhi.n	8004470 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004456:	ed97 7a02 	vldr	s14, [r7, #8]
 800445a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004484 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800445e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004466:	edc7 7a01 	vstr	s15, [r7, #4]
 800446a:	793b      	ldrb	r3, [r7, #4]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e000      	b.n	8004472 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	3b8311d9 	.word	0x3b8311d9
 8004484:	3783956e 	.word	0x3783956e

08004488 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	d80a      	bhi.n	80044b0 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	3301      	adds	r3, #1
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80044c4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 80044aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ae:	e001      	b.n	80044b4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 80044b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80044c8 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 80044b4:	eeb0 0a67 	vmov.f32	s0, s15
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	43bb8000 	.word	0x43bb8000
 80044c8:	00000000 	.word	0x00000000

080044cc <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80044d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80044dc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004568 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 80044e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	d836      	bhi.n	8004558 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 80044ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80044ee:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800456c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 80044f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044f6:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80044fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80044fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004502:	edc7 7a01 	vstr	s15, [r7, #4]
 8004506:	793b      	ldrb	r3, [r7, #4]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004512:	ed97 7a05 	vldr	s14, [r7, #20]
 8004516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800451a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 800451e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004522:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452e:	d50a      	bpl.n	8004546 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8004530:	edd7 7a05 	vldr	s15, [r7, #20]
 8004534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004538:	edc7 7a01 	vstr	s15, [r7, #4]
 800453c:	793b      	ldrb	r3, [r7, #4]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e009      	b.n	800455a <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 8004546:	edd7 7a05 	vldr	s15, [r7, #20]
 800454a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800454e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004552:	793b      	ldrb	r3, [r7, #4]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e000      	b.n	800455a <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	45bb8000 	.word	0x45bb8000
 800456c:	43bb8000 	.word	0x43bb8000

08004570 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 800457c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db0a      	blt.n	800459a <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	3301      	adds	r3, #1
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004590:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80045ac <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8004594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004598:	e001      	b.n	800459e <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 800459a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80045b0 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 800459e:	eeb0 0a67 	vmov.f32	s0, s15
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	41fa0000 	.word	0x41fa0000
 80045b0:	00000000 	.word	0x00000000

080045b4 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 80045c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045c4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004650 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 80045c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d0:	d836      	bhi.n	8004640 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 80045d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80045d6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004654 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 80045da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045de:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80045e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80045e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80045ee:	793b      	ldrb	r3, [r7, #4]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80045fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004602:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8004606:	edd7 7a04 	vldr	s15, [r7, #16]
 800460a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800460e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004616:	d50a      	bpl.n	800462e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8004618:	edd7 7a05 	vldr	s15, [r7, #20]
 800461c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004620:	edc7 7a01 	vstr	s15, [r7, #4]
 8004624:	793b      	ldrb	r3, [r7, #4]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e009      	b.n	8004642 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 800462e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004636:	edc7 7a01 	vstr	s15, [r7, #4]
 800463a:	793b      	ldrb	r3, [r7, #4]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e000      	b.n	8004642 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	457a0000 	.word	0x457a0000
 8004654:	41fa0000 	.word	0x41fa0000

08004658 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3394      	adds	r3, #148	@ 0x94
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	edd2 7a05 	vldr	s15, [r2, #20]
 800468e:	eeb0 0a67 	vmov.f32	s0, s15
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	4798      	blx	r3
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	edd2 7a06 	vldr	s15, [r2, #24]
 80046b0:	eeb0 0a67 	vmov.f32	s0, s15
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	4798      	blx	r3
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	edd2 7a07 	vldr	s15, [r2, #28]
 80046d2:	eeb0 0a67 	vmov.f32	s0, s15
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	4798      	blx	r3
 80046da:	4603      	mov	r3, r0
 80046dc:	461a      	mov	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	edd2 7a08 	vldr	s15, [r2, #32]
 80046f4:	eeb0 0a67 	vmov.f32	s0, s15
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	4798      	blx	r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8004716:	eeb0 0a67 	vmov.f32	s0, s15
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	4798      	blx	r3
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800472e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8004a00 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004732:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	ed93 7a00 	vldr	s14, [r3]
 800473c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004744:	edc7 7a01 	vstr	s15, [r7, #4]
 8004748:	793b      	ldrb	r3, [r7, #4]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004758:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004a00 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800475c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	ed93 7a00 	vldr	s14, [r3]
 8004766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004772:	793b      	ldrb	r3, [r7, #4]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004782:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8004a00 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004786:	ee67 6a87 	vmul.f32	s13, s15, s14
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	ed93 7a00 	vldr	s14, [r3]
 8004790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004798:	edc7 7a01 	vstr	s15, [r7, #4]
 800479c:	793b      	ldrb	r3, [r7, #4]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80047ac:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8004a00 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80047b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	ed93 7a00 	vldr	s14, [r3]
 80047ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80047c6:	793b      	ldrb	r3, [r7, #4]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80047e0:	eeb0 0a67 	vmov.f32	s0, s15
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	4798      	blx	r3
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8004802:	eeb0 0a67 	vmov.f32	s0, s15
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	4798      	blx	r3
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8004824:	eeb0 0a67 	vmov.f32	s0, s15
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	4798      	blx	r3
 800482c:	4603      	mov	r3, r0
 800482e:	461a      	mov	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8004846:	eeb0 0a67 	vmov.f32	s0, s15
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	4798      	blx	r3
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8004874:	eeb0 0a67 	vmov.f32	s0, s15
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	4798      	blx	r3
 800487c:	4603      	mov	r3, r0
 800487e:	461a      	mov	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8004896:	eeb0 0a67 	vmov.f32	s0, s15
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	4798      	blx	r3
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80048dc:	2104      	movs	r1, #4
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 80048f2:	2105      	movs	r1, #5
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8004908:	2106      	movs	r1, #6
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800491e:	2107      	movs	r1, #7
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8004934:	2108      	movs	r1, #8
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800494a:	2109      	movs	r1, #9
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8004960:	210a      	movs	r1, #10
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004976:	210b      	movs	r1, #11
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800498c:	210c      	movs	r1, #12
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 80049a2:	210d      	movs	r1, #13
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 80049b8:	210e      	movs	r1, #14
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 80049ce:	210f      	movs	r1, #15
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 80049e4:	2110      	movs	r1, #16
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 80049fa:	2111      	movs	r1, #17
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	e001      	b.n	8004a04 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 8004a00:	43800000 	.word	0x43800000
 8004a04:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8004a16:	2113      	movs	r1, #19
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8004a2c:	2114      	movs	r1, #20
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004a42:	2116      	movs	r1, #22
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8004a58:	2117      	movs	r1, #23
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3354      	adds	r3, #84	@ 0x54
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	4798      	blx	r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	f083 0301 	eor.w	r3, r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	460b      	mov	r3, r1
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004aa2:	681c      	ldr	r4, [r3, #0]
 8004aa4:	7afa      	ldrb	r2, [r7, #11]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	490c      	ldr	r1, [pc, #48]	@ (8004ae4 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004ac4:	4907      	ldr	r1, [pc, #28]	@ (8004ae4 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a05      	ldr	r2, [pc, #20]	@ (8004aec <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004ad6:	4904      	ldr	r1, [pc, #16]	@ (8004ae8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	4798      	blx	r3
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd90      	pop	{r4, r7, pc}
 8004ae4:	20000278 	.word	0x20000278
 8004ae8:	20000298 	.word	0x20000298
 8004aec:	200002a0 	.word	0x200002a0

08004af0 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b04:	681c      	ldr	r4, [r3, #0]
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	9201      	str	r2, [sp, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	9200      	str	r2, [sp, #0]
 8004b10:	2202      	movs	r2, #2
 8004b12:	4917      	ldr	r1, [pc, #92]	@ (8004b70 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a14      	ldr	r2, [pc, #80]	@ (8004b74 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004b24:	4912      	ldr	r1, [pc, #72]	@ (8004b70 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a10      	ldr	r2, [pc, #64]	@ (8004b78 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004b36:	490f      	ldr	r1, [pc, #60]	@ (8004b74 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a19      	ldr	r1, [r3, #32]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	7b9b      	ldrb	r3, [r3, #14]
 8004b4e:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	7bfa      	ldrb	r2, [r7, #15]
 8004b5c:	4906      	ldr	r1, [pc, #24]	@ (8004b78 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8004b66:	68bb      	ldr	r3, [r7, #8]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}
 8004b70:	20000278 	.word	0x20000278
 8004b74:	20000298 	.word	0x20000298
 8004b78:	200002a0 	.word	0x200002a0

08004b7c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	460b      	mov	r3, r1
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b92:	681c      	ldr	r4, [r3, #0]
 8004b94:	7afa      	ldrb	r2, [r7, #11]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	490c      	ldr	r1, [pc, #48]	@ (8004bd4 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a09      	ldr	r2, [pc, #36]	@ (8004bd8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004bb4:	4907      	ldr	r1, [pc, #28]	@ (8004bd4 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a05      	ldr	r2, [pc, #20]	@ (8004bdc <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004bc6:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	4798      	blx	r3
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd90      	pop	{r4, r7, pc}
 8004bd4:	20000278 	.word	0x20000278
 8004bd8:	20000298 	.word	0x20000298
 8004bdc:	200002a0 	.word	0x200002a0

08004be0 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004bf4:	681c      	ldr	r4, [r3, #0]
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	9201      	str	r2, [sp, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	9200      	str	r2, [sp, #0]
 8004c00:	2204      	movs	r2, #4
 8004c02:	490c      	ldr	r1, [pc, #48]	@ (8004c34 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a09      	ldr	r2, [pc, #36]	@ (8004c38 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004c14:	4907      	ldr	r1, [pc, #28]	@ (8004c34 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a05      	ldr	r2, [pc, #20]	@ (8004c3c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004c26:	4904      	ldr	r1, [pc, #16]	@ (8004c38 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd90      	pop	{r4, r7, pc}
 8004c34:	20000278 	.word	0x20000278
 8004c38:	20000298 	.word	0x20000298
 8004c3c:	200002a0 	.word	0x200002a0

08004c40 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004c56:	681c      	ldr	r4, [r3, #0]
 8004c58:	7afa      	ldrb	r2, [r7, #11]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	4613      	mov	r3, r2
 8004c64:	2205      	movs	r2, #5
 8004c66:	490c      	ldr	r1, [pc, #48]	@ (8004c98 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a09      	ldr	r2, [pc, #36]	@ (8004c9c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c78:	4907      	ldr	r1, [pc, #28]	@ (8004c98 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a05      	ldr	r2, [pc, #20]	@ (8004ca0 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004c8a:	4904      	ldr	r1, [pc, #16]	@ (8004c9c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	4798      	blx	r3
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd90      	pop	{r4, r7, pc}
 8004c98:	20000278 	.word	0x20000278
 8004c9c:	20000298 	.word	0x20000298
 8004ca0:	200002a0 	.word	0x200002a0

08004ca4 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cb4:	d21f      	bcs.n	8004cf6 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004cbe:	681c      	ldr	r4, [r3, #0]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2206      	movs	r2, #6
 8004ccc:	490c      	ldr	r1, [pc, #48]	@ (8004d00 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a09      	ldr	r2, [pc, #36]	@ (8004d04 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004cde:	4908      	ldr	r1, [pc, #32]	@ (8004d00 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a06      	ldr	r2, [pc, #24]	@ (8004d08 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004cf0:	4904      	ldr	r1, [pc, #16]	@ (8004d04 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd90      	pop	{r4, r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000278 	.word	0x20000278
 8004d04:	20000298 	.word	0x20000298
 8004d08:	200002a0 	.word	0x200002a0

08004d0c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	460b      	mov	r3, r1
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d20:	d220      	bcs.n	8004d64 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d2a:	681c      	ldr	r4, [r3, #0]
 8004d2c:	7afa      	ldrb	r2, [r7, #11]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	2207      	movs	r2, #7
 8004d3a:	490c      	ldr	r1, [pc, #48]	@ (8004d6c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a09      	ldr	r2, [pc, #36]	@ (8004d70 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004d4c:	4907      	ldr	r1, [pc, #28]	@ (8004d6c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a05      	ldr	r2, [pc, #20]	@ (8004d74 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004d5e:	4904      	ldr	r1, [pc, #16]	@ (8004d70 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	4798      	blx	r3
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd90      	pop	{r4, r7, pc}
 8004d6c:	20000278 	.word	0x20000278
 8004d70:	20000298 	.word	0x20000298
 8004d74:	200002a0 	.word	0x200002a0

08004d78 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	72fb      	strb	r3, [r7, #11]
 8004d86:	4613      	mov	r3, r2
 8004d88:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d92:	681c      	ldr	r4, [r3, #0]
 8004d94:	7af9      	ldrb	r1, [r7, #11]
 8004d96:	7abb      	ldrb	r3, [r7, #10]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	9201      	str	r2, [sp, #4]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	2208      	movs	r2, #8
 8004da2:	490c      	ldr	r1, [pc, #48]	@ (8004dd4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a09      	ldr	r2, [pc, #36]	@ (8004dd8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004db4:	4907      	ldr	r1, [pc, #28]	@ (8004dd4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a05      	ldr	r2, [pc, #20]	@ (8004ddc <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004dc6:	4904      	ldr	r1, [pc, #16]	@ (8004dd8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	4798      	blx	r3
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd90      	pop	{r4, r7, pc}
 8004dd4:	20000278 	.word	0x20000278
 8004dd8:	20000298 	.word	0x20000298
 8004ddc:	200002a0 	.word	0x200002a0

08004de0 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
 8004dec:	4613      	mov	r3, r2
 8004dee:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004df8:	681c      	ldr	r4, [r3, #0]
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	78bb      	ldrb	r3, [r7, #2]
 8004dfe:	2100      	movs	r1, #0
 8004e00:	9101      	str	r1, [sp, #4]
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	2209      	movs	r2, #9
 8004e08:	490c      	ldr	r1, [pc, #48]	@ (8004e3c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a09      	ldr	r2, [pc, #36]	@ (8004e40 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004e1a:	4908      	ldr	r1, [pc, #32]	@ (8004e3c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a06      	ldr	r2, [pc, #24]	@ (8004e44 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004e2c:	4904      	ldr	r1, [pc, #16]	@ (8004e40 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd90      	pop	{r4, r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000278 	.word	0x20000278
 8004e40:	20000298 	.word	0x20000298
 8004e44:	200002a0 	.word	0x200002a0

08004e48 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e58:	681c      	ldr	r4, [r3, #0]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2300      	movs	r3, #0
 8004e64:	220a      	movs	r2, #10
 8004e66:	490c      	ldr	r1, [pc, #48]	@ (8004e98 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a09      	ldr	r2, [pc, #36]	@ (8004e9c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e78:	4907      	ldr	r1, [pc, #28]	@ (8004e98 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a05      	ldr	r2, [pc, #20]	@ (8004ea0 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004e8a:	4904      	ldr	r1, [pc, #16]	@ (8004e9c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd90      	pop	{r4, r7, pc}
 8004e98:	20000278 	.word	0x20000278
 8004e9c:	20000298 	.word	0x20000298
 8004ea0:	200002a0 	.word	0x200002a0

08004ea4 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004eb4:	681c      	ldr	r4, [r3, #0]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	220b      	movs	r2, #11
 8004ec2:	490c      	ldr	r1, [pc, #48]	@ (8004ef4 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a09      	ldr	r2, [pc, #36]	@ (8004ef8 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004ed4:	4907      	ldr	r1, [pc, #28]	@ (8004ef4 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a05      	ldr	r2, [pc, #20]	@ (8004efc <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004ee6:	4904      	ldr	r1, [pc, #16]	@ (8004ef8 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd90      	pop	{r4, r7, pc}
 8004ef4:	20000278 	.word	0x20000278
 8004ef8:	20000298 	.word	0x20000298
 8004efc:	200002a0 	.word	0x200002a0

08004f00 <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f10:	681c      	ldr	r4, [r3, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	2300      	movs	r3, #0
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	220c      	movs	r2, #12
 8004f1e:	490c      	ldr	r1, [pc, #48]	@ (8004f50 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a09      	ldr	r2, [pc, #36]	@ (8004f54 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004f30:	4907      	ldr	r1, [pc, #28]	@ (8004f50 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a05      	ldr	r2, [pc, #20]	@ (8004f58 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004f42:	4904      	ldr	r1, [pc, #16]	@ (8004f54 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4798      	blx	r3
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd90      	pop	{r4, r7, pc}
 8004f50:	20000278 	.word	0x20000278
 8004f54:	20000298 	.word	0x20000298
 8004f58:	200002a0 	.word	0x200002a0

08004f5c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f6c:	681c      	ldr	r4, [r3, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	2300      	movs	r3, #0
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	2300      	movs	r3, #0
 8004f78:	220d      	movs	r2, #13
 8004f7a:	490c      	ldr	r1, [pc, #48]	@ (8004fac <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a09      	ldr	r2, [pc, #36]	@ (8004fb0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004f8c:	4907      	ldr	r1, [pc, #28]	@ (8004fac <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a05      	ldr	r2, [pc, #20]	@ (8004fb4 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8004f9e:	4904      	ldr	r1, [pc, #16]	@ (8004fb0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}
 8004fac:	20000278 	.word	0x20000278
 8004fb0:	20000298 	.word	0x20000298
 8004fb4:	200002a0 	.word	0x200002a0

08004fb8 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fc8:	681c      	ldr	r4, [r3, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	220e      	movs	r2, #14
 8004fd6:	490c      	ldr	r1, [pc, #48]	@ (8005008 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a09      	ldr	r2, [pc, #36]	@ (800500c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004fe8:	4907      	ldr	r1, [pc, #28]	@ (8005008 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a05      	ldr	r2, [pc, #20]	@ (8005010 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8004ffa:	4904      	ldr	r1, [pc, #16]	@ (800500c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}
 8005008:	20000278 	.word	0x20000278
 800500c:	20000298 	.word	0x20000298
 8005010:	200002a0 	.word	0x200002a0

08005014 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b085      	sub	sp, #20
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005024:	681c      	ldr	r4, [r3, #0]
 8005026:	2300      	movs	r3, #0
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	2300      	movs	r3, #0
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2300      	movs	r3, #0
 8005030:	220f      	movs	r2, #15
 8005032:	490c      	ldr	r1, [pc, #48]	@ (8005064 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a09      	ldr	r2, [pc, #36]	@ (8005068 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005044:	4907      	ldr	r1, [pc, #28]	@ (8005064 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a05      	ldr	r2, [pc, #20]	@ (800506c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8005056:	4904      	ldr	r1, [pc, #16]	@ (8005068 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}
 8005064:	20000278 	.word	0x20000278
 8005068:	20000298 	.word	0x20000298
 800506c:	200002a0 	.word	0x200002a0

08005070 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b085      	sub	sp, #20
 8005074:	af02      	add	r7, sp, #8
 8005076:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005080:	681c      	ldr	r4, [r3, #0]
 8005082:	2300      	movs	r3, #0
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	2300      	movs	r3, #0
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	2300      	movs	r3, #0
 800508c:	2210      	movs	r2, #16
 800508e:	490c      	ldr	r1, [pc, #48]	@ (80050c0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a09      	ldr	r2, [pc, #36]	@ (80050c4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80050a0:	4907      	ldr	r1, [pc, #28]	@ (80050c0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a05      	ldr	r2, [pc, #20]	@ (80050c8 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 80050b2:	4904      	ldr	r1, [pc, #16]	@ (80050c4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}
 80050c0:	20000278 	.word	0x20000278
 80050c4:	20000298 	.word	0x20000298
 80050c8:	200002a0 	.word	0x200002a0

080050cc <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 80050cc:	b590      	push	{r4, r7, lr}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050dc:	681c      	ldr	r4, [r3, #0]
 80050de:	2300      	movs	r3, #0
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	2300      	movs	r3, #0
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	2300      	movs	r3, #0
 80050e8:	2211      	movs	r2, #17
 80050ea:	490c      	ldr	r1, [pc, #48]	@ (800511c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a09      	ldr	r2, [pc, #36]	@ (8005120 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 80050fc:	4907      	ldr	r1, [pc, #28]	@ (800511c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a05      	ldr	r2, [pc, #20]	@ (8005124 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 800510e:	4904      	ldr	r1, [pc, #16]	@ (8005120 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4798      	blx	r3
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}
 800511c:	20000278 	.word	0x20000278
 8005120:	20000298 	.word	0x20000298
 8005124:	200002a0 	.word	0x200002a0

08005128 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b087      	sub	sp, #28
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005138:	681c      	ldr	r4, [r3, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	2300      	movs	r3, #0
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2300      	movs	r3, #0
 8005144:	2212      	movs	r2, #18
 8005146:	4912      	ldr	r1, [pc, #72]	@ (8005190 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a0f      	ldr	r2, [pc, #60]	@ (8005194 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005158:	490d      	ldr	r1, [pc, #52]	@ (8005190 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a0b      	ldr	r2, [pc, #44]	@ (8005198 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800516a:	490a      	ldr	r1, [pc, #40]	@ (8005194 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2202      	movs	r2, #2
 800517c:	4906      	ldr	r1, [pc, #24]	@ (8005198 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	4798      	blx	r3
 8005182:	4603      	mov	r3, r0
 8005184:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8005186:	89fb      	ldrh	r3, [r7, #14]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	20000278 	.word	0x20000278
 8005194:	20000298 	.word	0x20000298
 8005198:	200002a0 	.word	0x200002a0

0800519c <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b087      	sub	sp, #28
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	460b      	mov	r3, r1
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051b2:	681c      	ldr	r4, [r3, #0]
 80051b4:	7afa      	ldrb	r2, [r7, #11]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	2201      	movs	r2, #1
 80051c2:	4903      	ldr	r1, [pc, #12]	@ (80051d0 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	47a0      	blx	r4
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}
 80051d0:	20000278 	.word	0x20000278

080051d4 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af02      	add	r7, sp, #8
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051e8:	681c      	ldr	r4, [r3, #0]
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	2200      	movs	r2, #0
 80051ee:	9201      	str	r2, [sp, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	9200      	str	r2, [sp, #0]
 80051f4:	2202      	movs	r2, #2
 80051f6:	4903      	ldr	r1, [pc, #12]	@ (8005204 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	47a0      	blx	r4
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}
 8005204:	20000278 	.word	0x20000278

08005208 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b087      	sub	sp, #28
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	460b      	mov	r3, r1
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800521e:	681c      	ldr	r4, [r3, #0]
 8005220:	7afa      	ldrb	r2, [r7, #11]
 8005222:	2300      	movs	r3, #0
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	2203      	movs	r2, #3
 800522e:	4903      	ldr	r1, [pc, #12]	@ (800523c <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	47a0      	blx	r4
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	bd90      	pop	{r4, r7, pc}
 800523c:	20000278 	.word	0x20000278

08005240 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b085      	sub	sp, #20
 8005244:	af02      	add	r7, sp, #8
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005254:	681c      	ldr	r4, [r3, #0]
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	2200      	movs	r2, #0
 800525a:	9201      	str	r2, [sp, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	9200      	str	r2, [sp, #0]
 8005260:	2204      	movs	r2, #4
 8005262:	4903      	ldr	r1, [pc, #12]	@ (8005270 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	47a0      	blx	r4
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	bd90      	pop	{r4, r7, pc}
 8005270:	20000278 	.word	0x20000278

08005274 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b087      	sub	sp, #28
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	460b      	mov	r3, r1
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800528a:	681c      	ldr	r4, [r3, #0]
 800528c:	7afa      	ldrb	r2, [r7, #11]
 800528e:	2300      	movs	r3, #0
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	2205      	movs	r2, #5
 800529a:	4903      	ldr	r1, [pc, #12]	@ (80052a8 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	47a0      	blx	r4
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd90      	pop	{r4, r7, pc}
 80052a8:	20000278 	.word	0x20000278

080052ac <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 80052ac:	b590      	push	{r4, r7, lr}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052be:	681c      	ldr	r4, [r3, #0]
 80052c0:	2300      	movs	r3, #0
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	2300      	movs	r3, #0
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2206      	movs	r2, #6
 80052cc:	4903      	ldr	r1, [pc, #12]	@ (80052dc <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	47a0      	blx	r4
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000278 	.word	0x20000278

080052e0 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80052e0:	b590      	push	{r4, r7, lr}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	460b      	mov	r3, r1
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052f6:	681c      	ldr	r4, [r3, #0]
 80052f8:	7afa      	ldrb	r2, [r7, #11]
 80052fa:	2300      	movs	r3, #0
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	2207      	movs	r2, #7
 8005306:	4903      	ldr	r1, [pc, #12]	@ (8005314 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	47a0      	blx	r4
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	bd90      	pop	{r4, r7, pc}
 8005314:	20000278 	.word	0x20000278

08005318 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b087      	sub	sp, #28
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	72fb      	strb	r3, [r7, #11]
 8005326:	4613      	mov	r3, r2
 8005328:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005332:	681c      	ldr	r4, [r3, #0]
 8005334:	7af9      	ldrb	r1, [r7, #11]
 8005336:	7abb      	ldrb	r3, [r7, #10]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	9201      	str	r2, [sp, #4]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	460b      	mov	r3, r1
 8005340:	2208      	movs	r2, #8
 8005342:	4903      	ldr	r1, [pc, #12]	@ (8005350 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	47a0      	blx	r4
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	bd90      	pop	{r4, r7, pc}
 8005350:	20000278 	.word	0x20000278

08005354 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b085      	sub	sp, #20
 8005358:	af02      	add	r7, sp, #8
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
 8005360:	4613      	mov	r3, r2
 8005362:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800536c:	681c      	ldr	r4, [r3, #0]
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	78bb      	ldrb	r3, [r7, #2]
 8005372:	2100      	movs	r1, #0
 8005374:	9101      	str	r1, [sp, #4]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	2209      	movs	r2, #9
 800537c:	4903      	ldr	r1, [pc, #12]	@ (800538c <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	47a0      	blx	r4
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bd90      	pop	{r4, r7, pc}
 800538a:	bf00      	nop
 800538c:	20000278 	.word	0x20000278

08005390 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b085      	sub	sp, #20
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053a0:	681c      	ldr	r4, [r3, #0]
 80053a2:	2300      	movs	r3, #0
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	220a      	movs	r2, #10
 80053ae:	4903      	ldr	r1, [pc, #12]	@ (80053bc <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	47a0      	blx	r4
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}
 80053bc:	20000278 	.word	0x20000278

080053c0 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	220b      	movs	r2, #11
 80053de:	4903      	ldr	r1, [pc, #12]	@ (80053ec <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	47a0      	blx	r4
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	20000278 	.word	0x20000278

080053f0 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005400:	681c      	ldr	r4, [r3, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	2300      	movs	r3, #0
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	220c      	movs	r2, #12
 800540e:	4903      	ldr	r1, [pc, #12]	@ (800541c <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	47a0      	blx	r4
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bd90      	pop	{r4, r7, pc}
 800541c:	20000278 	.word	0x20000278

08005420 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b085      	sub	sp, #20
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	2300      	movs	r3, #0
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	220d      	movs	r2, #13
 800543e:	4903      	ldr	r1, [pc, #12]	@ (800544c <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	47a0      	blx	r4
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bd90      	pop	{r4, r7, pc}
 800544c:	20000278 	.word	0x20000278

08005450 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b085      	sub	sp, #20
 8005454:	af02      	add	r7, sp, #8
 8005456:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005460:	681c      	ldr	r4, [r3, #0]
 8005462:	2300      	movs	r3, #0
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	2300      	movs	r3, #0
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	220e      	movs	r2, #14
 800546e:	4903      	ldr	r1, [pc, #12]	@ (800547c <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	47a0      	blx	r4
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bd90      	pop	{r4, r7, pc}
 800547c:	20000278 	.word	0x20000278

08005480 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b085      	sub	sp, #20
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005490:	681c      	ldr	r4, [r3, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	2300      	movs	r3, #0
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	220f      	movs	r2, #15
 800549e:	4903      	ldr	r1, [pc, #12]	@ (80054ac <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	47a0      	blx	r4
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd90      	pop	{r4, r7, pc}
 80054ac:	20000278 	.word	0x20000278

080054b0 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054c0:	681c      	ldr	r4, [r3, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	2300      	movs	r3, #0
 80054cc:	2210      	movs	r2, #16
 80054ce:	4903      	ldr	r1, [pc, #12]	@ (80054dc <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	47a0      	blx	r4
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd90      	pop	{r4, r7, pc}
 80054dc:	20000278 	.word	0x20000278

080054e0 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054f0:	681c      	ldr	r4, [r3, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	2211      	movs	r2, #17
 80054fe:	4903      	ldr	r1, [pc, #12]	@ (800550c <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	47a0      	blx	r4
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bd90      	pop	{r4, r7, pc}
 800550c:	20000278 	.word	0x20000278

08005510 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af02      	add	r7, sp, #8
 8005516:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005520:	681c      	ldr	r4, [r3, #0]
 8005522:	2300      	movs	r3, #0
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	2300      	movs	r3, #0
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	2300      	movs	r3, #0
 800552c:	2212      	movs	r2, #18
 800552e:	4903      	ldr	r1, [pc, #12]	@ (800553c <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	47a0      	blx	r4
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bd90      	pop	{r4, r7, pc}
 800553c:	20000278 	.word	0x20000278

08005540 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a09      	ldr	r2, [pc, #36]	@ (8005578 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005554:	4909      	ldr	r1, [pc, #36]	@ (800557c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a06      	ldr	r2, [pc, #24]	@ (8005580 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8005566:	4904      	ldr	r1, [pc, #16]	@ (8005578 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800556c:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000298 	.word	0x20000298
 800557c:	20000278 	.word	0x20000278
 8005580:	200002a0 	.word	0x200002a0

08005584 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8005584:	b590      	push	{r4, r7, lr}
 8005586:	b089      	sub	sp, #36	@ 0x24
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8005590:	4b17      	ldr	r3, [pc, #92]	@ (80055f0 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]
 800559a:	e020      	b.n	80055de <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80055a4:	681c      	ldr	r4, [r3, #0]
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	461a      	mov	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	1899      	adds	r1, r3, r2
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	461a      	mov	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	441a      	add	r2, r3
 80055ba:	230a      	movs	r3, #10
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	2302      	movs	r3, #2
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80055c4:	2300      	movs	r3, #0
 80055c6:	75bb      	strb	r3, [r7, #22]
 80055c8:	e003      	b.n	80055d2 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 80055ca:	bf00      	nop
 80055cc:	7dbb      	ldrb	r3, [r7, #22]
 80055ce:	3301      	adds	r3, #1
 80055d0:	75bb      	strb	r3, [r7, #22]
 80055d2:	7dbb      	ldrb	r3, [r7, #22]
 80055d4:	2b7c      	cmp	r3, #124	@ 0x7c
 80055d6:	d9f8      	bls.n	80055ca <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	3301      	adds	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d9db      	bls.n	800559c <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 80055e4:	bf00      	nop
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd90      	pop	{r4, r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000275 	.word	0x20000275

080055f4 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005606:	2301      	movs	r3, #1
 8005608:	74fb      	strb	r3, [r7, #19]
 800560a:	e016      	b.n	800563a <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	461a      	mov	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	7f1b      	ldrb	r3, [r3, #28]
 8005616:	4413      	add	r3, r2
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4413      	add	r3, r2
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	4619      	mov	r1, r3
 8005620:	79fa      	ldrb	r2, [r7, #7]
 8005622:	7cfb      	ldrb	r3, [r7, #19]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	461a      	mov	r2, r3
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	3301      	adds	r3, #1
 8005638:	74fb      	strb	r3, [r7, #19]
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d9e5      	bls.n	800560c <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8005640:	697b      	ldr	r3, [r7, #20]
}
 8005642:	4618      	mov	r0, r3
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2118      	movs	r1, #24
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
 8005670:	4602      	mov	r2, r0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005676:	b292      	uxth	r2, r2
 8005678:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	2b0e      	cmp	r3, #14
 800567e:	f200 8099 	bhi.w	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056c5 	.word	0x080056c5
 800568c:	080056d5 	.word	0x080056d5
 8005690:	080056e5 	.word	0x080056e5
 8005694:	080056f5 	.word	0x080056f5
 8005698:	08005705 	.word	0x08005705
 800569c:	08005715 	.word	0x08005715
 80056a0:	08005725 	.word	0x08005725
 80056a4:	08005735 	.word	0x08005735
 80056a8:	08005745 	.word	0x08005745
 80056ac:	08005755 	.word	0x08005755
 80056b0:	08005765 	.word	0x08005765
 80056b4:	08005775 	.word	0x08005775
 80056b8:	08005785 	.word	0x08005785
 80056bc:	08005795 	.word	0x08005795
 80056c0:	080057a5 	.word	0x080057a5
      state = pL6470_StatusRegister->HiZ;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	73fb      	strb	r3, [r7, #15]
      break;
 80056d2:	e06f      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	73fb      	strb	r3, [r7, #15]
      break;
 80056e2:	e067      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	73fb      	strb	r3, [r7, #15]
      break;
 80056f2:	e05f      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e057      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800570e:	b2db      	uxtb	r3, r3
 8005710:	73fb      	strb	r3, [r7, #15]
      break;
 8005712:	e04f      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800571e:	b2db      	uxtb	r3, r3
 8005720:	73fb      	strb	r3, [r7, #15]
      break;
 8005722:	e047      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e03f      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	73fb      	strb	r3, [r7, #15]
      break;
 8005742:	e037      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	73fb      	strb	r3, [r7, #15]
      break;
 8005752:	e02f      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	73fb      	strb	r3, [r7, #15]
      break;
 8005762:	e027      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	73fb      	strb	r3, [r7, #15]
      break;
 8005772:	e01f      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800577e:	b2db      	uxtb	r3, r3
 8005780:	73fb      	strb	r3, [r7, #15]
      break;
 8005782:	e017      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	73fb      	strb	r3, [r7, #15]
      break;
 8005792:	e00f      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	73fb      	strb	r3, [r7, #15]
      break;
 80057a2:	e007      	b.n	80057b4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	73fb      	strb	r3, [r7, #15]
      break;
 80057b2:	bf00      	nop
  return state;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop

080057c0 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	2b18      	cmp	r3, #24
 80057d0:	d809      	bhi.n	80057e6 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a19      	ldr	r1, [r3, #32]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	3301      	adds	r3, #1
 80057e4:	e000      	b.n	80057e8 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]
 8005802:	e01a      	b.n	800583a <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	4413      	add	r3, r2
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	4413      	add	r3, r2
 8005818:	2200      	movs	r2, #0
 800581a:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	4413      	add	r3, r2
 8005824:	2200      	movs	r2, #0
 8005826:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	4413      	add	r3, r2
 8005830:	2200      	movs	r2, #0
 8005832:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	3301      	adds	r3, #1
 8005838:	73fb      	strb	r3, [r7, #15]
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d9e1      	bls.n	8005804 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	7f1b      	ldrb	r3, [r3, #28]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	4413      	add	r3, r2
 8005868:	79fa      	ldrb	r2, [r7, #7]
 800586a:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	7f1b      	ldrb	r3, [r3, #28]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	4413      	add	r3, r2
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	7f1b      	ldrb	r3, [r3, #28]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	4413      	add	r3, r2
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	7f1b      	ldrb	r3, [r3, #28]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4413      	add	r3, r2
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	60da      	str	r2, [r3, #12]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80058b4:	4b10      	ldr	r3, [pc, #64]	@ (80058f8 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80058bc:	4b0e      	ldr	r3, [pc, #56]	@ (80058f8 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80058da:	681c      	ldr	r4, [r3, #0]
 80058dc:	79fa      	ldrb	r2, [r7, #7]
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	47a0      	blx	r4
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd90      	pop	{r4, r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000275 	.word	0x20000275

080058fc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800590c:	2300      	movs	r3, #0
 800590e:	75bb      	strb	r3, [r7, #22]
 8005910:	e013      	b.n	800593a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005912:	2300      	movs	r3, #0
 8005914:	75fb      	strb	r3, [r7, #23]
 8005916:	e00a      	b.n	800592e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8005918:	7d7b      	ldrb	r3, [r7, #21]
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	757a      	strb	r2, [r7, #21]
 800591e:	461a      	mov	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4413      	add	r3, r2
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	3301      	adds	r3, #1
 800592c:	75fb      	strb	r3, [r7, #23]
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d9f1      	bls.n	8005918 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005934:	7dbb      	ldrb	r3, [r7, #22]
 8005936:	3301      	adds	r3, #1
 8005938:	75bb      	strb	r3, [r7, #22]
 800593a:	7dbb      	ldrb	r3, [r7, #22]
 800593c:	2b03      	cmp	r3, #3
 800593e:	d9e8      	bls.n	8005912 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005940:	2300      	movs	r3, #0
 8005942:	75fb      	strb	r3, [r7, #23]
 8005944:	e1f1      	b.n	8005d2a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	440b      	add	r3, r1
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	4619      	mov	r1, r3
 8005956:	460b      	mov	r3, r1
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	1a5b      	subs	r3, r3, r1
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	441a      	add	r2, r3
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	440b      	add	r3, r1
 8005966:	7b12      	ldrb	r2, [r2, #12]
 8005968:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4413      	add	r3, r2
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b12      	cmp	r3, #18
 8005976:	f200 81d5 	bhi.w	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800597a:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	08005d25 	.word	0x08005d25
 8005984:	080059cd 	.word	0x080059cd
 8005988:	08005a55 	.word	0x08005a55
 800598c:	08005a85 	.word	0x08005a85
 8005990:	08005aed 	.word	0x08005aed
 8005994:	08005b1b 	.word	0x08005b1b
 8005998:	08005b83 	.word	0x08005b83
 800599c:	08005bbf 	.word	0x08005bbf
 80059a0:	08005c27 	.word	0x08005c27
 80059a4:	08005cc3 	.word	0x08005cc3
 80059a8:	08005d25 	.word	0x08005d25
 80059ac:	08005d25 	.word	0x08005d25
 80059b0:	08005d25 	.word	0x08005d25
 80059b4:	08005d25 	.word	0x08005d25
 80059b8:	08005d25 	.word	0x08005d25
 80059bc:	08005d25 	.word	0x08005d25
 80059c0:	08005d25 	.word	0x08005d25
 80059c4:	08005d25 	.word	0x08005d25
 80059c8:	08005d25 	.word	0x08005d25
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	7819      	ldrb	r1, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a18      	ldr	r0, [r3, #32]
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	4413      	add	r3, r2
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4403      	add	r3, r0
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4403      	add	r3, r0
 80059f4:	430a      	orrs	r2, r1
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a19      	ldr	r1, [r3, #32]
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4413      	add	r3, r2
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	7b9b      	ldrb	r3, [r3, #14]
 8005a14:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005a16:	2301      	movs	r3, #1
 8005a18:	75bb      	strb	r3, [r7, #22]
 8005a1a:	e016      	b.n	8005a4a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4413      	add	r3, r2
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	7d39      	ldrb	r1, [r7, #20]
 8005a28:	7dbb      	ldrb	r3, [r7, #22]
 8005a2a:	1acb      	subs	r3, r1, r3
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	fa22 f103 	lsr.w	r1, r2, r3
 8005a32:	7dbb      	ldrb	r3, [r7, #22]
 8005a34:	005a      	lsls	r2, r3, #1
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
 8005a38:	4413      	add	r3, r2
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4413      	add	r3, r2
 8005a40:	b2ca      	uxtb	r2, r1
 8005a42:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005a44:	7dbb      	ldrb	r3, [r7, #22]
 8005a46:	3301      	adds	r3, #1
 8005a48:	75bb      	strb	r3, [r7, #22]
 8005a4a:	7d3a      	ldrb	r2, [r7, #20]
 8005a4c:	7dbb      	ldrb	r3, [r7, #22]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d2e4      	bcs.n	8005a1c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8005a52:	e167      	b.n	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	7819      	ldrb	r1, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a18      	ldr	r0, [r3, #32]
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	4413      	add	r3, r2
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4403      	add	r3, r0
 8005a74:	781a      	ldrb	r2, [r3, #0]
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4403      	add	r3, r0
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]
      break;
 8005a82:	e14f      	b.n	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	7819      	ldrb	r1, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	4413      	add	r3, r2
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	4403      	add	r3, r0
 8005aa2:	7a1a      	ldrb	r2, [r3, #8]
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4403      	add	r3, r0
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	75bb      	strb	r3, [r7, #22]
 8005ab4:	e016      	b.n	8005ae4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	4413      	add	r3, r2
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	7dbb      	ldrb	r3, [r7, #22]
 8005ac2:	f1c3 0303 	rsb	r3, r3, #3
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	fa22 f103 	lsr.w	r1, r2, r3
 8005acc:	7dbb      	ldrb	r3, [r7, #22]
 8005ace:	005a      	lsls	r2, r3, #1
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	b2ca      	uxtb	r2, r1
 8005adc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005ade:	7dbb      	ldrb	r3, [r7, #22]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	75bb      	strb	r3, [r7, #22]
 8005ae4:	7dbb      	ldrb	r3, [r7, #22]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d9e5      	bls.n	8005ab6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8005aea:	e11b      	b.n	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	7819      	ldrb	r1, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	4413      	add	r3, r2
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	4403      	add	r3, r0
 8005b0a:	7a1a      	ldrb	r2, [r3, #8]
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4403      	add	r3, r0
 8005b12:	430a      	orrs	r2, r1
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
      break;
 8005b18:	e104      	b.n	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	7819      	ldrb	r1, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	4403      	add	r3, r0
 8005b38:	7a1a      	ldrb	r2, [r3, #8]
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4403      	add	r3, r0
 8005b40:	430a      	orrs	r2, r1
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b46:	2301      	movs	r3, #1
 8005b48:	75bb      	strb	r3, [r7, #22]
 8005b4a:	e016      	b.n	8005b7a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	4413      	add	r3, r2
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	7dbb      	ldrb	r3, [r7, #22]
 8005b58:	f1c3 0303 	rsb	r3, r3, #3
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	fa22 f103 	lsr.w	r1, r2, r3
 8005b62:	7dbb      	ldrb	r3, [r7, #22]
 8005b64:	005a      	lsls	r2, r3, #1
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	4413      	add	r3, r2
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4413      	add	r3, r2
 8005b70:	b2ca      	uxtb	r2, r1
 8005b72:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b74:	7dbb      	ldrb	r3, [r7, #22]
 8005b76:	3301      	adds	r3, #1
 8005b78:	75bb      	strb	r3, [r7, #22]
 8005b7a:	7dbb      	ldrb	r3, [r7, #22]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d9e5      	bls.n	8005b4c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005b80:	e0d0      	b.n	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b82:	2301      	movs	r3, #1
 8005b84:	75bb      	strb	r3, [r7, #22]
 8005b86:	e016      	b.n	8005bb6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	4413      	add	r3, r2
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	7dbb      	ldrb	r3, [r7, #22]
 8005b94:	f1c3 0303 	rsb	r3, r3, #3
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	fa22 f103 	lsr.w	r1, r2, r3
 8005b9e:	7dbb      	ldrb	r3, [r7, #22]
 8005ba0:	005a      	lsls	r2, r3, #1
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4413      	add	r3, r2
 8005bac:	b2ca      	uxtb	r2, r1
 8005bae:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bb0:	7dbb      	ldrb	r3, [r7, #22]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	75bb      	strb	r3, [r7, #22]
 8005bb6:	7dbb      	ldrb	r3, [r7, #22]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d9e5      	bls.n	8005b88 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005bbc:	e0b2      	b.n	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	7819      	ldrb	r1, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	4403      	add	r3, r0
 8005bdc:	7a1a      	ldrb	r2, [r3, #8]
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4403      	add	r3, r0
 8005be4:	430a      	orrs	r2, r1
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bea:	2301      	movs	r3, #1
 8005bec:	75bb      	strb	r3, [r7, #22]
 8005bee:	e016      	b.n	8005c1e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	7dbb      	ldrb	r3, [r7, #22]
 8005bfc:	f1c3 0303 	rsb	r3, r3, #3
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	fa22 f103 	lsr.w	r1, r2, r3
 8005c06:	7dbb      	ldrb	r3, [r7, #22]
 8005c08:	005a      	lsls	r2, r3, #1
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4413      	add	r3, r2
 8005c14:	b2ca      	uxtb	r2, r1
 8005c16:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c18:	7dbb      	ldrb	r3, [r7, #22]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	75bb      	strb	r3, [r7, #22]
 8005c1e:	7dbb      	ldrb	r3, [r7, #22]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d9e5      	bls.n	8005bf0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005c24:	e07e      	b.n	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b259      	sxtb	r1, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	4403      	add	r3, r0
 8005c46:	791b      	ldrb	r3, [r3, #4]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	b259      	sxtb	r1, r3
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4413      	add	r3, r2
 8005c56:	b2ca      	uxtb	r2, r1
 8005c58:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	4413      	add	r3, r2
 8005c60:	7819      	ldrb	r1, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	4613      	mov	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	4403      	add	r3, r0
 8005c78:	7a1a      	ldrb	r2, [r3, #8]
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4403      	add	r3, r0
 8005c80:	430a      	orrs	r2, r1
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c86:	2301      	movs	r3, #1
 8005c88:	75bb      	strb	r3, [r7, #22]
 8005c8a:	e016      	b.n	8005cba <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	4413      	add	r3, r2
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	7dbb      	ldrb	r3, [r7, #22]
 8005c98:	f1c3 0303 	rsb	r3, r3, #3
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	fa22 f103 	lsr.w	r1, r2, r3
 8005ca2:	7dbb      	ldrb	r3, [r7, #22]
 8005ca4:	005a      	lsls	r2, r3, #1
 8005ca6:	7dfb      	ldrb	r3, [r7, #23]
 8005ca8:	4413      	add	r3, r2
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	b2ca      	uxtb	r2, r1
 8005cb2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005cb4:	7dbb      	ldrb	r3, [r7, #22]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	75bb      	strb	r3, [r7, #22]
 8005cba:	7dbb      	ldrb	r3, [r7, #22]
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d9e5      	bls.n	8005c8c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005cc0:	e030      	b.n	8005d24 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	b259      	sxtb	r1, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	4403      	add	r3, r0
 8005ce2:	791b      	ldrb	r3, [r3, #4]
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	b25b      	sxtb	r3, r3
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	b259      	sxtb	r1, r3
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	b2ca      	uxtb	r2, r1
 8005cf4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	7819      	ldrb	r1, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	4413      	add	r3, r2
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4413      	add	r3, r2
 8005d12:	4403      	add	r3, r0
 8005d14:	7a1a      	ldrb	r2, [r3, #8]
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4403      	add	r3, r0
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
      break;
 8005d22:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	3301      	adds	r3, #1
 8005d28:	75fb      	strb	r3, [r7, #23]
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	f67f ae0a 	bls.w	8005946 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005d4c:	edd7 7a00 	vldr	s15, [r7]
 8005d50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d58:	db1e      	blt.n	8005d98 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005d5a:	edd7 7a00 	vldr	s15, [r7]
 8005d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d62:	ee17 2a90 	vmov	r2, s15
 8005d66:	edd7 7a00 	vldr	s15, [r7]
 8005d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d72:	ed97 7a00 	vldr	s14, [r7]
 8005d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d7a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	bf4c      	ite	mi
 8005d88:	2301      	movmi	r3, #1
 8005d8a:	2300      	movpl	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f083 0301 	eor.w	r3, r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	4413      	add	r3, r2
 8005d96:	e01a      	b.n	8005dce <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005d98:	edd7 7a00 	vldr	s15, [r7]
 8005d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005da0:	ee17 2a90 	vmov	r2, s15
 8005da4:	edd7 7a00 	vldr	s15, [r7]
 8005da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005db0:	ed97 7a00 	vldr	s14, [r7]
 8005db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8005dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc4:	d501      	bpl.n	8005dca <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	1ad3      	subs	r3, r2, r3
        }
    }
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b086      	sub	sp, #24
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	4613      	mov	r3, r2
 8005de6:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6918      	ldr	r0, [r3, #16]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8a9b      	ldrh	r3, [r3, #20]
 8005df0:	2200      	movs	r2, #0
 8005df2:	4619      	mov	r1, r3
 8005df4:	f008 f918 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6998      	ldr	r0, [r3, #24]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	2364      	movs	r3, #100	@ 0x64
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	f009 f940 	bl	800f086 <HAL_SPI_Receive>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6918      	ldr	r0, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8a9b      	ldrh	r3, [r3, #20]
 8005e12:	2201      	movs	r2, #1
 8005e14:	4619      	mov	r1, r3
 8005e16:	f008 f907 	bl	800e028 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e24:	2300      	movs	r3, #0
    }
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b086      	sub	sp, #24
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6918      	ldr	r0, [r3, #16]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8a9b      	ldrh	r3, [r3, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	4619      	mov	r1, r3
 8005e48:	f008 f8ee 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6998      	ldr	r0, [r3, #24]
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	2364      	movs	r3, #100	@ 0x64
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	f008 ffda 	bl	800ee0e <HAL_SPI_Transmit>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6918      	ldr	r0, [r3, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8a9b      	ldrh	r3, [r3, #20]
 8005e66:	2201      	movs	r2, #1
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f008 f8dd 	bl	800e028 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e78:	2300      	movs	r3, #0
    }
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b088      	sub	sp, #32
 8005e86:	af02      	add	r7, sp, #8
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6918      	ldr	r0, [r3, #16]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8a9b      	ldrh	r3, [r3, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	f008 f8c4 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6998      	ldr	r0, [r3, #24]
 8005ea4:	887b      	ldrh	r3, [r7, #2]
 8005ea6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005eaa:	9200      	str	r2, [sp, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	f009 f9fa 	bl	800f2a8 <HAL_SPI_TransmitReceive>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6918      	ldr	r0, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8a9b      	ldrh	r3, [r3, #20]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f008 f8ad 	bl	800e028 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e008      	b.n	8005ee4 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6918      	ldr	r0, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8a9b      	ldrh	r3, [r3, #20]
 8005eda:	2201      	movs	r2, #1
 8005edc:	4619      	mov	r1, r3
 8005ede:	f008 f8a3 	bl	800e028 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005ee2:	2300      	movs	r3, #0
    }
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005f02:	681c      	ldr	r4, [r3, #0]
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	47a0      	blx	r4
    }
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd90      	pop	{r4, r7, pc}

08005f16 <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
 8005f30:	4603      	mov	r3, r0
    }
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
 8005f50:	4603      	mov	r3, r0
    }
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	4611      	mov	r1, r2
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
 8005f78:	4603      	mov	r3, r0
    }
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005f82:	b590      	push	{r4, r7, lr}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005f92:	681c      	ldr	r4, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	47a0      	blx	r4
 8005fac:	4603      	mov	r3, r0
    }
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}

08005fb6 <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8005fb6:	b590      	push	{r4, r7, lr}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005fc6:	681c      	ldr	r4, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	47a0      	blx	r4
 8005fe0:	4603      	mov	r3, r0
    }
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd90      	pop	{r4, r7, pc}

08005fea <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8005fea:	b5b0      	push	{r4, r5, r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ffa:	681c      	ldr	r4, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006004:	681d      	ldr	r5, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2103      	movs	r1, #3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
 8006016:	4603      	mov	r3, r0
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	47a8      	blx	r5
 800601e:	eef0 7a40 	vmov.f32	s15, s0
 8006022:	eeb0 0a67 	vmov.f32	s0, s15
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	47a0      	blx	r4
 800602a:	4603      	mov	r3, r0
    }
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bdb0      	pop	{r4, r5, r7, pc}

08006034 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8006034:	b5b0      	push	{r4, r5, r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006044:	681c      	ldr	r4, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800604e:	681d      	ldr	r5, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2106      	movs	r1, #6
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
 8006060:	4603      	mov	r3, r0
 8006062:	b29b      	uxth	r3, r3
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	47a8      	blx	r5
 800606a:	eef0 7a40 	vmov.f32	s15, s0
 800606e:	eeb0 0a67 	vmov.f32	s0, s15
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	47a0      	blx	r4
 8006076:	4603      	mov	r3, r0
    }
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bdb0      	pop	{r4, r5, r7, pc}

08006080 <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8006080:	b5b0      	push	{r4, r5, r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006090:	681c      	ldr	r4, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800609a:	681d      	ldr	r5, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2107      	movs	r1, #7
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
 80060ac:	4603      	mov	r3, r0
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	47a8      	blx	r5
 80060b6:	eef0 7a40 	vmov.f32	s15, s0
 80060ba:	eeb0 0a67 	vmov.f32	s0, s15
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	47a0      	blx	r4
 80060c2:	4603      	mov	r3, r0
    }
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bdb0      	pop	{r4, r5, r7, pc}

080060cc <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 80060cc:	b5b0      	push	{r4, r5, r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060dc:	681c      	ldr	r4, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80060e6:	681d      	ldr	r5, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2104      	movs	r1, #4
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
 80060f8:	4603      	mov	r3, r0
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	47a8      	blx	r5
 8006102:	eef0 7a40 	vmov.f32	s15, s0
 8006106:	eeb0 0a67 	vmov.f32	s0, s15
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	47a0      	blx	r4
 800610e:	4603      	mov	r3, r0
    }
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bdb0      	pop	{r4, r5, r7, pc}

08006118 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8006118:	b5b0      	push	{r4, r5, r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006128:	681c      	ldr	r4, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006132:	681d      	ldr	r5, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2105      	movs	r1, #5
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	4603      	mov	r3, r0
 8006146:	b29b      	uxth	r3, r3
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	47a8      	blx	r5
 800614e:	eef0 7a40 	vmov.f32	s15, s0
 8006152:	eeb0 0a67 	vmov.f32	s0, s15
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	47a0      	blx	r4
 800615a:	4603      	mov	r3, r0
    }
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bdb0      	pop	{r4, r5, r7, pc}

08006164 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2104      	movs	r1, #4
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
 800617c:	4603      	mov	r3, r0
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 8006186:	2300      	movs	r3, #0
    }
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	b2d1      	uxtb	r1, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	4798      	blx	r3
    }
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
    }
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 80061d6:	b590      	push	{r4, r7, lr}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061e6:	681c      	ldr	r4, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2100      	movs	r1, #0
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	2102      	movs	r1, #2
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	47a0      	blx	r4
    }
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	bd90      	pop	{r4, r7, pc}

0800620a <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 800620a:	b590      	push	{r4, r7, lr}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800621c:	681c      	ldr	r4, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	4798      	blx	r3
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	2102      	movs	r1, #2
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	47a0      	blx	r4
    }
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bd90      	pop	{r4, r7, pc}

08006240 <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006252:	681c      	ldr	r4, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	ee07 2a90 	vmov	s15, r2
 8006264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006268:	eeb0 0a67 	vmov.f32	s0, s15
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	2106      	movs	r1, #6
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	47a0      	blx	r4
        return true;
 800627a:	2301      	movs	r3, #1
    }
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bd90      	pop	{r4, r7, pc}

08006284 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006296:	681c      	ldr	r4, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	ee07 2a90 	vmov	s15, r2
 80062a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ac:	eeb0 0a67 	vmov.f32	s0, s15
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4798      	blx	r3
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	2107      	movs	r1, #7
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	47a0      	blx	r4
        return true;
 80062be:	2301      	movs	r3, #1
    }
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd90      	pop	{r4, r7, pc}

080062c8 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80062da:	681c      	ldr	r4, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	ee07 2a90 	vmov	s15, r2
 80062ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f0:	eeb0 0a67 	vmov.f32	s0, s15
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	2104      	movs	r1, #4
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	47a0      	blx	r4
        return true;
 8006302:	2301      	movs	r3, #1
    }
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bd90      	pop	{r4, r7, pc}

0800630c <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800631e:	681c      	ldr	r4, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	ee07 2a90 	vmov	s15, r2
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	eeb0 0a67 	vmov.f32	s0, s15
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	2105      	movs	r1, #5
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	47a0      	blx	r4
        return true;
 8006346:	2301      	movs	r3, #1
    }
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	bd90      	pop	{r4, r7, pc}

08006350 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	2b07      	cmp	r3, #7
 8006360:	d901      	bls.n	8006366 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8006362:	2300      	movs	r3, #0
 8006364:	e00f      	b.n	8006386 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3380      	adds	r3, #128	@ 0x80
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	2115      	movs	r1, #21
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
        return true;
 8006384:	2301      	movs	r3, #1
    }
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 800638e:	b590      	push	{r4, r7, lr}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80063a0:	681c      	ldr	r4, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	47a0      	blx	r4
    }
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd90      	pop	{r4, r7, pc}

080063c2 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80063c2:	b5b0      	push	{r4, r5, r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	4613      	mov	r3, r2
 80063ce:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80063d8:	681c      	ldr	r4, [r3, #0]
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 80063e0:	2501      	movs	r5, #1
 80063e2:	e000      	b.n	80063e6 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 80063e4:	2500      	movs	r5, #0
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	4798      	blx	r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	461a      	mov	r2, r3
 80063fa:	4629      	mov	r1, r5
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	47a0      	blx	r4
    }
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bdb0      	pop	{r4, r5, r7, pc}

08006408 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
    }
 800641e:	bf00      	nop
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	4798      	blx	r3
    }
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8006444:	b5b0      	push	{r4, r5, r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	72fb      	strb	r3, [r7, #11]
 8006452:	4613      	mov	r3, r2
 8006454:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800645e:	681c      	ldr	r4, [r3, #0]
 8006460:	7abb      	ldrb	r3, [r7, #10]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006466:	2501      	movs	r5, #1
 8006468:	e000      	b.n	800646c <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800646a:	2500      	movs	r5, #0
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	ee07 2a90 	vmov	s15, r2
 800647c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006480:	eeb0 0a67 	vmov.f32	s0, s15
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	4798      	blx	r3
 8006488:	4603      	mov	r3, r0
 800648a:	7af9      	ldrb	r1, [r7, #11]
 800648c:	462a      	mov	r2, r5
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	47a0      	blx	r4
    }
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bdb0      	pop	{r4, r5, r7, pc}

0800649a <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800649a:	b5b0      	push	{r4, r5, r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80064ae:	681c      	ldr	r4, [r3, #0]
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 80064b6:	2501      	movs	r5, #1
 80064b8:	e000      	b.n	80064bc <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 80064ba:	2500      	movs	r5, #0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2106      	movs	r1, #6
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
 80064cc:	4603      	mov	r3, r0
 80064ce:	461a      	mov	r2, r3
 80064d0:	4629      	mov	r1, r5
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	47a0      	blx	r4
    }
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bdb0      	pop	{r4, r5, r7, pc}

080064de <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80064de:	b5b0      	push	{r4, r5, r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	460b      	mov	r3, r1
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80064f4:	681c      	ldr	r4, [r3, #0]
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 80064fc:	2501      	movs	r5, #1
 80064fe:	e000      	b.n	8006502 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 8006500:	2500      	movs	r5, #0
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	ee07 2a90 	vmov	s15, r2
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006516:	eeb0 0a67 	vmov.f32	s0, s15
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	4798      	blx	r3
 800651e:	4603      	mov	r3, r0
 8006520:	461a      	mov	r2, r3
 8006522:	4629      	mov	r1, r5
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	47a0      	blx	r4
    }
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bdb0      	pop	{r4, r5, r7, pc}

08006530 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	460b      	mov	r3, r1
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	7afa      	ldrb	r2, [r7, #11]
 800654a:	2a01      	cmp	r2, #1
 800654c:	d101      	bne.n	8006552 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 800654e:	2101      	movs	r1, #1
 8006550:	e000      	b.n	8006554 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 8006552:	2100      	movs	r1, #0
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	4798      	blx	r3
    }
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
    }
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
    }
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
    }
 80065b4:	bf00      	nop
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
    }
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80065e2:	bf00      	nop
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2101      	movs	r1, #1
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1ef      	bne.n	80065e4 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 800660e:	b580      	push	{r7, lr}
 8006610:	b082      	sub	sp, #8
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	460b      	mov	r3, r1
 8006618:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3380      	adds	r3, #128	@ 0x80
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	2a01      	cmp	r2, #1
 8006634:	d101      	bne.n	800663a <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8006636:	2201      	movs	r2, #1
 8006638:	e000      	b.n	800663c <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800663a:	2200      	movs	r2, #0
 800663c:	4611      	mov	r1, r2
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
    }
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
 8006656:	4613      	mov	r3, r2
 8006658:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	78ba      	ldrb	r2, [r7, #2]
 8006666:	2a01      	cmp	r2, #1
 8006668:	d101      	bne.n	800666e <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800666a:	2201      	movs	r2, #1
 800666c:	e000      	b.n	8006670 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800666e:	2200      	movs	r2, #0
 8006670:	78f9      	ldrb	r1, [r7, #3]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
    }
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
    }
 8006694:	bf00      	nop
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	4611      	mov	r1, r2
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2100      	movs	r1, #0
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2102      	movs	r1, #2
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2103      	movs	r1, #3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2203      	movs	r2, #3
 800675c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2106      	movs	r1, #6
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2204      	movs	r2, #4
 8006784:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2107      	movs	r1, #7
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2205      	movs	r2, #5
 80067ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2104      	movs	r1, #4
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2206      	movs	r2, #6
 80067d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2105      	movs	r1, #5
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2207      	movs	r2, #7
 80067fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8006810:	4b0b      	ldr	r3, [pc, #44]	@ (8006840 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8006818:	4b09      	ldr	r3, [pc, #36]	@ (8006840 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4906      	ldr	r1, [pc, #24]	@ (8006844 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2208      	movs	r2, #8
 8006832:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000241 	.word	0x20000241
 8006844:	20000244 	.word	0x20000244

08006848 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	b2d1      	uxtb	r1, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2200      	movs	r2, #0
 80068b2:	2102      	movs	r1, #2
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2209      	movs	r2, #9
 80068bc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068da:	681c      	ldr	r4, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
 80068ec:	4603      	mov	r3, r0
 80068ee:	461a      	mov	r2, r3
 80068f0:	2102      	movs	r1, #2
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bd90      	pop	{r4, r7, pc}

08006906 <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8006906:	b590      	push	{r4, r7, lr}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006918:	681c      	ldr	r4, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	ee07 2a90 	vmov	s15, r2
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eeb0 0a67 	vmov.f32	s0, s15
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
 800693a:	2103      	movs	r1, #3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bd90      	pop	{r4, r7, pc}

08006950 <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006962:	681c      	ldr	r4, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	ee07 2a90 	vmov	s15, r2
 8006974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006978:	eeb0 0a67 	vmov.f32	s0, s15
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
 8006980:	4603      	mov	r3, r0
 8006982:	461a      	mov	r2, r3
 8006984:	2106      	movs	r1, #6
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	bd90      	pop	{r4, r7, pc}

0800699a <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 800699a:	b590      	push	{r4, r7, lr}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80069ac:	681c      	ldr	r4, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	ee07 2a90 	vmov	s15, r2
 80069be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c2:	eeb0 0a67 	vmov.f32	s0, s15
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	4798      	blx	r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	2107      	movs	r1, #7
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd90      	pop	{r4, r7, pc}

080069e4 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80069f6:	681c      	ldr	r4, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	ee07 2a90 	vmov	s15, r2
 8006a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	4603      	mov	r3, r0
 8006a16:	461a      	mov	r2, r3
 8006a18:	2104      	movs	r1, #4
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd90      	pop	{r4, r7, pc}

08006a2e <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8006a2e:	b590      	push	{r4, r7, lr}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006a40:	681c      	ldr	r4, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	ee07 2a90 	vmov	s15, r2
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	eeb0 0a67 	vmov.f32	s0, s15
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	461a      	mov	r2, r3
 8006a62:	2105      	movs	r1, #5
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd90      	pop	{r4, r7, pc}

08006a78 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8006a8a:	681c      	ldr	r4, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd90      	pop	{r4, r7, pc}

08006ab4 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006ab4:	b5b0      	push	{r4, r5, r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8006aca:	681c      	ldr	r4, [r3, #0]
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8006ad2:	2501      	movs	r5, #1
 8006ad4:	e000      	b.n	8006ad8 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006ad6:	2500      	movs	r5, #0
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	4798      	blx	r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	4629      	mov	r1, r5
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bdb0      	pop	{r4, r5, r7, pc}

08006b02 <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006b4e:	b5b0      	push	{r4, r5, r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	72fb      	strb	r3, [r7, #11]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006b68:	681c      	ldr	r4, [r3, #0]
 8006b6a:	7abb      	ldrb	r3, [r7, #10]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006b70:	2501      	movs	r5, #1
 8006b72:	e000      	b.n	8006b76 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006b74:	2500      	movs	r5, #0
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	ee07 2a90 	vmov	s15, r2
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	4798      	blx	r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	7af9      	ldrb	r1, [r7, #11]
 8006b96:	462a      	mov	r2, r5
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bdb0      	pop	{r4, r5, r7, pc}

08006bac <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006bac:	b5b0      	push	{r4, r5, r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006bc0:	681c      	ldr	r4, [r3, #0]
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006bc8:	2501      	movs	r5, #1
 8006bca:	e000      	b.n	8006bce <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006bcc:	2500      	movs	r5, #0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2106      	movs	r1, #6
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	461a      	mov	r2, r3
 8006be2:	4629      	mov	r1, r5
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bdb0      	pop	{r4, r5, r7, pc}

08006bf8 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006bf8:	b5b0      	push	{r4, r5, r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	460b      	mov	r3, r1
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006c0e:	681c      	ldr	r4, [r3, #0]
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006c16:	2501      	movs	r5, #1
 8006c18:	e000      	b.n	8006c1c <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006c1a:	2500      	movs	r5, #0
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	ee07 2a90 	vmov	s15, r2
 8006c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c30:	eeb0 0a67 	vmov.f32	s0, s15
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	4798      	blx	r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bdb0      	pop	{r4, r5, r7, pc}

08006c52 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	7afa      	ldrb	r2, [r7, #11]
 8006c6c:	2a01      	cmp	r2, #1
 8006c6e:	d101      	bne.n	8006c74 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006c70:	2101      	movs	r1, #1
 8006c72:	e000      	b.n	8006c76 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006c74:	2100      	movs	r1, #0
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	2a01      	cmp	r2, #1
 8006d3e:	d101      	bne.n	8006d44 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006d40:	2201      	movs	r2, #1
 8006d42:	e000      	b.n	8006d46 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006d44:	2200      	movs	r2, #0
 8006d46:	4611      	mov	r1, r2
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	78ba      	ldrb	r2, [r7, #2]
 8006d78:	2a01      	cmp	r2, #1
 8006d7a:	d101      	bne.n	8006d80 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	e000      	b.n	8006d82 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006d80:	2200      	movs	r2, #0
 8006d82:	78f9      	ldrb	r1, [r7, #3]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
 8006dd4:	4603      	mov	r3, r0
    }
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006df8:	b5b0      	push	{r4, r5, r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	2b07      	cmp	r3, #7
 8006e0c:	f200 80fe 	bhi.w	800700c <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006e10:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e39 	.word	0x08006e39
 8006e1c:	08006e65 	.word	0x08006e65
 8006e20:	08006e93 	.word	0x08006e93
 8006e24:	08006ed7 	.word	0x08006ed7
 8006e28:	08006f1d 	.word	0x08006f1d
 8006e2c:	08006f63 	.word	0x08006f63
 8006e30:	08006fa9 	.word	0x08006fa9
 8006e34:	08006fef 	.word	0x08006fef
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006e40:	681c      	ldr	r4, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6a12      	ldr	r2, [r2, #32]
 8006e50:	7b92      	ldrb	r2, [r2, #14]
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
 8006e58:	4603      	mov	r3, r0
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	47a0      	blx	r4
 8006e60:	4603      	mov	r3, r0
 8006e62:	e0d4      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006e6c:	681c      	ldr	r4, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6a12      	ldr	r2, [r2, #32]
 8006e7c:	3228      	adds	r2, #40	@ 0x28
 8006e7e:	7b92      	ldrb	r2, [r2, #14]
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
 8006e86:	4603      	mov	r3, r0
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	47a0      	blx	r4
 8006e8e:	4603      	mov	r3, r0
 8006e90:	e0bd      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e9a:	681c      	ldr	r4, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006ea4:	681d      	ldr	r5, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6a12      	ldr	r2, [r2, #32]
 8006eb4:	323c      	adds	r2, #60	@ 0x3c
 8006eb6:	7b92      	ldrb	r2, [r2, #14]
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	47a8      	blx	r5
 8006ec6:	eef0 7a40 	vmov.f32	s15, s0
 8006eca:	eeb0 0a67 	vmov.f32	s0, s15
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	47a0      	blx	r4
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	e09b      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ede:	681c      	ldr	r4, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ee8:	681d      	ldr	r5, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6a12      	ldr	r2, [r2, #32]
 8006ef8:	3278      	adds	r2, #120	@ 0x78
 8006efa:	7b92      	ldrb	r2, [r2, #14]
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	47a8      	blx	r5
 8006f0c:	eef0 7a40 	vmov.f32	s15, s0
 8006f10:	eeb0 0a67 	vmov.f32	s0, s15
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	47a0      	blx	r4
 8006f18:	4603      	mov	r3, r0
 8006f1a:	e078      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f24:	681c      	ldr	r4, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006f2e:	681d      	ldr	r5, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6a12      	ldr	r2, [r2, #32]
 8006f3e:	328c      	adds	r2, #140	@ 0x8c
 8006f40:	7b92      	ldrb	r2, [r2, #14]
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	4798      	blx	r3
 8006f48:	4603      	mov	r3, r0
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	47a8      	blx	r5
 8006f52:	eef0 7a40 	vmov.f32	s15, s0
 8006f56:	eeb0 0a67 	vmov.f32	s0, s15
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	47a0      	blx	r4
 8006f5e:	4603      	mov	r3, r0
 8006f60:	e055      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f6a:	681c      	ldr	r4, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006f74:	681d      	ldr	r5, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6a12      	ldr	r2, [r2, #32]
 8006f84:	3250      	adds	r2, #80	@ 0x50
 8006f86:	7b92      	ldrb	r2, [r2, #14]
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	47a8      	blx	r5
 8006f98:	eef0 7a40 	vmov.f32	s15, s0
 8006f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	47a0      	blx	r4
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	e032      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fb0:	681c      	ldr	r4, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006fba:	681d      	ldr	r5, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6a12      	ldr	r2, [r2, #32]
 8006fca:	3264      	adds	r2, #100	@ 0x64
 8006fcc:	7b92      	ldrb	r2, [r2, #14]
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	47a8      	blx	r5
 8006fde:	eef0 7a40 	vmov.f32	s15, s0
 8006fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	47a0      	blx	r4
 8006fea:	4603      	mov	r3, r0
 8006fec:	e00f      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2104      	movs	r1, #4
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8007004:	2301      	movs	r3, #1
 8007006:	e002      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8007008:	2300      	movs	r3, #0
 800700a:	e000      	b.n	800700e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 800700c:	2300      	movs	r3, #0
    }
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bdb0      	pop	{r4, r5, r7, pc}
 8007016:	bf00      	nop

08007018 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6898      	ldr	r0, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	899b      	ldrh	r3, [r3, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	4619      	mov	r1, r3
 800702c:	f006 fffc 	bl	800e028 <HAL_GPIO_WritePin>
    }
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007048:	d303      	bcc.n	8007052 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8007050:	e000      	b.n	8007054 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8007052:	683b      	ldr	r3, [r7, #0]
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	db05      	blt.n	800707c <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007076:	da01      	bge.n	800707c <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	e00c      	b.n	8007096 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8007082:	db06      	blt.n	8007092 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	da03      	bge.n	8007092 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8007090:	e001      	b.n	8007096 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 8007092:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80070d0 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 80070bc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80070c0:	eeb0 0a67 	vmov.f32	s0, s15
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	3c74242a 	.word	0x3c74242a

080070d4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 80070e0:	edd7 7a00 	vldr	s15, [r7]
 80070e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007118 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 80070e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f0:	d80a      	bhi.n	8007108 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 80070f2:	ed97 7a00 	vldr	s14, [r7]
 80070f6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800711c <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 80070fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007102:	ee17 3a90 	vmov	r3, s15
 8007106:	e000      	b.n	800710a <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	4674241b 	.word	0x4674241b
 800711c:	3c74242a 	.word	0x3c74242a

08007120 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800712c:	887b      	ldrh	r3, [r7, #2]
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007132:	d209      	bcs.n	8007148 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8007134:	887b      	ldrh	r3, [r7, #2]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800713e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800715c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 8007142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007146:	e001      	b.n	800714c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8007148:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007160 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 800714c:	eeb0 0a67 	vmov.f32	s0, s15
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	4168d4fe 	.word	0x4168d4fe
 8007160:	00000000 	.word	0x00000000

08007164 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8007170:	edd7 7a00 	vldr	s15, [r7]
 8007174:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80071a8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 8007178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800717c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007180:	d80b      	bhi.n	800719a <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8007182:	ed97 7a00 	vldr	s14, [r7]
 8007186:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80071ac <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 800718a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800718e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007192:	ee17 3a90 	vmov	r3, s15
 8007196:	b29b      	uxth	r3, r3
 8007198:	e000      	b.n	800719c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	4768c671 	.word	0x4768c671
 80071ac:	4168d4fe 	.word	0x4168d4fe

080071b0 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 80071bc:	887b      	ldrh	r3, [r7, #2]
 80071be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071c2:	d209      	bcs.n	80071d8 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 80071c4:	887b      	ldrh	r3, [r7, #2]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071ce:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80071ec <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 80071d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071d6:	e001      	b.n	80071dc <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80071d8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80071f0 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 80071dc:	eeb0 0a67 	vmov.f32	s0, s15
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	4168d4fe 	.word	0x4168d4fe
 80071f0:	00000000 	.word	0x00000000

080071f4 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8007200:	edd7 7a00 	vldr	s15, [r7]
 8007204:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007238 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 8007208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800720c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007210:	d80b      	bhi.n	800722a <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8007212:	ed97 7a00 	vldr	s14, [r7]
 8007216:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800723c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 800721a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800721e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007222:	ee17 3a90 	vmov	r3, s15
 8007226:	b29b      	uxth	r3, r3
 8007228:	e000      	b.n	800722c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	4768c671 	.word	0x4768c671
 800723c:	4168d4fe 	.word	0x4168d4fe

08007240 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800724c:	887b      	ldrh	r3, [r7, #2]
 800724e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007252:	d209      	bcs.n	8007268 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8007254:	887b      	ldrh	r3, [r7, #2]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800725e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800727c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8007262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007266:	e001      	b.n	800726c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007268:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007280 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800726c:	eeb0 0a67 	vmov.f32	s0, s15
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	4174240b 	.word	0x4174240b
 8007280:	00000000 	.word	0x00000000

08007284 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8007290:	edd7 7a00 	vldr	s15, [r7]
 8007294:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80072c8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8007298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800729c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a0:	d80b      	bhi.n	80072ba <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80072a2:	ed97 7a00 	vldr	s14, [r7]
 80072a6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80072cc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 80072aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b2:	ee17 3a90 	vmov	r3, s15
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	e000      	b.n	80072bc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	4673e702 	.word	0x4673e702
 80072cc:	4174240b 	.word	0x4174240b

080072d0 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80072dc:	887b      	ldrh	r3, [r7, #2]
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072e2:	d209      	bcs.n	80072f8 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80072e4:	887b      	ldrh	r3, [r7, #2]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ee:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800730c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 80072f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072f6:	e001      	b.n	80072fc <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80072f8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007310 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 80072fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	3e742401 	.word	0x3e742401
 8007310:	00000000 	.word	0x00000000

08007314 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8007320:	edd7 7a00 	vldr	s15, [r7]
 8007324:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007358 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 8007328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007330:	d80b      	bhi.n	800734a <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8007332:	ed97 7a00 	vldr	s14, [r7]
 8007336:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800735c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 800733a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800733e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007342:	ee17 3a90 	vmov	r3, s15
 8007346:	b29b      	uxth	r3, r3
 8007348:	e000      	b.n	800734c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	447414bf 	.word	0x447414bf
 800735c:	3e742401 	.word	0x3e742401

08007360 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800736c:	887b      	ldrh	r3, [r7, #2]
 800736e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007372:	d219      	bcs.n	80073a8 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007374:	887b      	ldrh	r3, [r7, #2]
 8007376:	4618      	mov	r0, r3
 8007378:	f7f9 f904 	bl	8000584 <__aeabi_i2d>
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	4b0e      	ldr	r3, [pc, #56]	@ (80073bc <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8007382:	f7f8 ffb3 	bl	80002ec <__adddf3>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8007394:	f7f9 f960 	bl	8000658 <__aeabi_dmul>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4610      	mov	r0, r2
 800739e:	4619      	mov	r1, r3
 80073a0:	f7f9 fc32 	bl	8000c08 <__aeabi_d2f>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e001      	b.n	80073ac <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 80073a8:	f04f 0300 	mov.w	r3, #0
}
 80073ac:	ee07 3a90 	vmov	s15, r3
 80073b0:	eeb0 0a67 	vmov.f32	s0, s15
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	3fe00000 	.word	0x3fe00000
 80073c0:	402e8000 	.word	0x402e8000

080073c4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80073d0:	edd7 7a00 	vldr	s15, [r7]
 80073d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007410 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 80073d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e0:	d80f      	bhi.n	8007402 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80073e2:	ed97 7a00 	vldr	s14, [r7]
 80073e6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8007414 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 80073ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80073f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073fa:	ee17 3a90 	vmov	r3, s15
 80073fe:	b29b      	uxth	r3, r3
 8007400:	e000      	b.n	8007404 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	4673e180 	.word	0x4673e180
 8007414:	41740000 	.word	0x41740000

08007418 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8007424:	887b      	ldrh	r3, [r7, #2]
 8007426:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800742a:	d209      	bcs.n	8007440 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800742c:	887b      	ldrh	r3, [r7, #2]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007436:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007454 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800743a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800743e:	e001      	b.n	8007444 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007440:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007458 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8007444:	eeb0 0a67 	vmov.f32	s0, s15
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	3d7423f4 	.word	0x3d7423f4
 8007458:	00000000 	.word	0x00000000

0800745c <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8007468:	edd7 7a00 	vldr	s15, [r7]
 800746c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80074a0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 8007470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007478:	d80b      	bhi.n	8007492 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800747a:	ed97 7a00 	vldr	s14, [r7]
 800747e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80074a4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 8007482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748a:	ee17 3a90 	vmov	r3, s15
 800748e:	b29b      	uxth	r3, r3
 8007490:	e000      	b.n	8007494 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	44742023 	.word	0x44742023
 80074a4:	3d7423f4 	.word	0x3d7423f4

080074a8 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074be:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80074d4 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 80074c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80074c6:	eeb0 0a67 	vmov.f32	s0, s15
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	3783956e 	.word	0x3783956e

080074d8 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80074e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80074e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007520 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 80074ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f4:	d80c      	bhi.n	8007510 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80074f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80074fa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007524 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 80074fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007506:	edc7 7a01 	vstr	s15, [r7, #4]
 800750a:	793b      	ldrb	r3, [r7, #4]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	e000      	b.n	8007512 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	3b8311d9 	.word	0x3b8311d9
 8007524:	3783956e 	.word	0x3783956e

08007528 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800753e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007554 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8007542:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007546:	eeb0 0a67 	vmov.f32	s0, s15
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	3783956e 	.word	0x3783956e

08007558 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8007564:	edd7 7a02 	vldr	s15, [r7, #8]
 8007568:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80075a0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800756c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007574:	d80c      	bhi.n	8007590 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007576:	ed97 7a02 	vldr	s14, [r7, #8]
 800757a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80075a4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800757e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007586:	edc7 7a01 	vstr	s15, [r7, #4]
 800758a:	793b      	ldrb	r3, [r7, #4]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	e000      	b.n	8007592 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	3b8311d9 	.word	0x3b8311d9
 80075a4:	3783956e 	.word	0x3783956e

080075a8 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075be:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80075d4 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80075c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80075c6:	eeb0 0a67 	vmov.f32	s0, s15
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	3783956e 	.word	0x3783956e

080075d8 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80075e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80075e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007620 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80075ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f4:	d80c      	bhi.n	8007610 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80075f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80075fa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007624 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 80075fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007606:	edc7 7a01 	vstr	s15, [r7, #4]
 800760a:	793b      	ldrb	r3, [r7, #4]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	e000      	b.n	8007612 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	3b8311d9 	.word	0x3b8311d9
 8007624:	3783956e 	.word	0x3783956e

08007628 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	2b0f      	cmp	r3, #15
 8007638:	d80a      	bhi.n	8007650 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	3301      	adds	r3, #1
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007646:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007664 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 800764a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800764e:	e001      	b.n	8007654 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 8007650:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007668 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 8007654:	eeb0 0a67 	vmov.f32	s0, s15
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	43bb8000 	.word	0x43bb8000
 8007668:	00000000 	.word	0x00000000

0800766c <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8007678:	edd7 7a02 	vldr	s15, [r7, #8]
 800767c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007708 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 8007680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007688:	d836      	bhi.n	80076f8 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800768a:	ed97 7a02 	vldr	s14, [r7, #8]
 800768e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800770c <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 8007692:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007696:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800769a:	edd7 7a05 	vldr	s15, [r7, #20]
 800769e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80076a6:	793b      	ldrb	r3, [r7, #4]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80076b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ba:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 80076be:	edd7 7a04 	vldr	s15, [r7, #16]
 80076c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80076c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ce:	d50a      	bpl.n	80076e6 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80076d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80076d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80076dc:	793b      	ldrb	r3, [r7, #4]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e009      	b.n	80076fa <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 80076e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80076ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80076f2:	793b      	ldrb	r3, [r7, #4]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	e000      	b.n	80076fa <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	45bb8000 	.word	0x45bb8000
 800770c:	43bb8000 	.word	0x43bb8000

08007710 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800771c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007720:	2b00      	cmp	r3, #0
 8007722:	db0a      	blt.n	800773a <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	3301      	adds	r3, #1
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007730:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800774c <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 8007734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007738:	e001      	b.n	800773e <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800773a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007750 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 800773e:	eeb0 0a67 	vmov.f32	s0, s15
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	41fa0000 	.word	0x41fa0000
 8007750:	00000000 	.word	0x00000000

08007754 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8007760:	edd7 7a02 	vldr	s15, [r7, #8]
 8007764:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80077f0 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 8007768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	d836      	bhi.n	80077e0 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 8007772:	ed97 7a02 	vldr	s14, [r7, #8]
 8007776:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80077f4 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 800777a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800777e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007782:	edd7 7a05 	vldr	s15, [r7, #20]
 8007786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800778a:	edc7 7a01 	vstr	s15, [r7, #4]
 800778e:	793b      	ldrb	r3, [r7, #4]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800779a:	ed97 7a05 	vldr	s14, [r7, #20]
 800779e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077a2:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 80077a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80077aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80077ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	d50a      	bpl.n	80077ce <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80077b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80077bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80077c4:	793b      	ldrb	r3, [r7, #4]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	e009      	b.n	80077e2 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 80077ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80077d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80077da:	793b      	ldrb	r3, [r7, #4]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e000      	b.n	80077e2 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	457a0000 	.word	0x457a0000
 80077f4:	41fa0000 	.word	0x41fa0000

080077f8 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
  reset_device();
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3394      	adds	r3, #148	@ 0x94
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	4798      	blx	r3
  get_status();
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	330c      	adds	r3, #12
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	edd2 7a05 	vldr	s15, [r2, #20]
 800782e:	eeb0 0a67 	vmov.f32	s0, s15
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	461a      	mov	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	edd2 7a06 	vldr	s15, [r2, #24]
 8007850:	eeb0 0a67 	vmov.f32	s0, s15
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	4798      	blx	r3
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	edd2 7a07 	vldr	s15, [r2, #28]
 8007872:	eeb0 0a67 	vmov.f32	s0, s15
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	4798      	blx	r3
 800787a:	4603      	mov	r3, r0
 800787c:	461a      	mov	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	edd2 7a08 	vldr	s15, [r2, #32]
 8007894:	eeb0 0a67 	vmov.f32	s0, s15
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	4798      	blx	r3
 800789c:	4603      	mov	r3, r0
 800789e:	461a      	mov	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80078b6:	eeb0 0a67 	vmov.f32	s0, s15
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	4798      	blx	r3
 80078be:	4603      	mov	r3, r0
 80078c0:	461a      	mov	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80078ce:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007ba0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	ed93 7a00 	vldr	s14, [r3]
 80078dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80078e8:	793b      	ldrb	r3, [r7, #4]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80078f8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007ba0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078fc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	ed93 7a00 	vldr	s14, [r3]
 8007906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800790a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800790e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007912:	793b      	ldrb	r3, [r7, #4]
 8007914:	b2da      	uxtb	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007922:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8007ba0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007926:	ee67 6a87 	vmul.f32	s13, s15, s14
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	ed93 7a00 	vldr	s14, [r3]
 8007930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007938:	edc7 7a01 	vstr	s15, [r7, #4]
 800793c:	793b      	ldrb	r3, [r7, #4]
 800793e:	b2da      	uxtb	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800794c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8007ba0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007950:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	ed93 7a00 	vldr	s14, [r3]
 800795a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800795e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007962:	edc7 7a01 	vstr	s15, [r7, #4]
 8007966:	793b      	ldrb	r3, [r7, #4]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8007980:	eeb0 0a67 	vmov.f32	s0, s15
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	4798      	blx	r3
 8007988:	4603      	mov	r3, r0
 800798a:	461a      	mov	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80079a2:	eeb0 0a67 	vmov.f32	s0, s15
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	4798      	blx	r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	461a      	mov	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 80079c4:	eeb0 0a67 	vmov.f32	s0, s15
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	4798      	blx	r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	461a      	mov	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 80079e6:	eeb0 0a67 	vmov.f32	s0, s15
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	4798      	blx	r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	461a      	mov	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8007a14:	eeb0 0a67 	vmov.f32	s0, s15
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	4798      	blx	r3
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8007a36:	eeb0 0a67 	vmov.f32	s0, s15
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	4798      	blx	r3
 8007a3e:	4603      	mov	r3, r0
 8007a40:	461a      	mov	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8007a7c:	2104      	movs	r1, #4
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8007a92:	2105      	movs	r1, #5
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8007aa8:	2106      	movs	r1, #6
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8007abe:	2107      	movs	r1, #7
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8007ad4:	2108      	movs	r1, #8
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8007aea:	2109      	movs	r1, #9
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8007b00:	210a      	movs	r1, #10
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007b16:	210b      	movs	r1, #11
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007b2c:	210c      	movs	r1, #12
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8007b42:	210d      	movs	r1, #13
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8007b58:	210e      	movs	r1, #14
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8007b6e:	210f      	movs	r1, #15
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8007b84:	2110      	movs	r1, #16
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8007b9a:	2111      	movs	r1, #17
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	e001      	b.n	8007ba4 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007ba0:	43800000 	.word	0x43800000
 8007ba4:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8007bb6:	2113      	movs	r1, #19
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8007bcc:	2114      	movs	r1, #20
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007be2:	2116      	movs	r1, #22
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8007bf8:	2117      	movs	r1, #23
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3354      	adds	r3, #84	@ 0x54
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	4798      	blx	r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	f083 0301 	eor.w	r3, r3, #1
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007c2c:	b590      	push	{r4, r7, lr}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	460b      	mov	r3, r1
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c42:	681c      	ldr	r4, [r3, #0]
 8007c44:	7afa      	ldrb	r2, [r7, #11]
 8007c46:	2300      	movs	r3, #0
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	2201      	movs	r2, #1
 8007c52:	490c      	ldr	r1, [pc, #48]	@ (8007c84 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a09      	ldr	r2, [pc, #36]	@ (8007c88 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c64:	4907      	ldr	r1, [pc, #28]	@ (8007c84 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a05      	ldr	r2, [pc, #20]	@ (8007c8c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007c76:	4904      	ldr	r1, [pc, #16]	@ (8007c88 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	4798      	blx	r3
}
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd90      	pop	{r4, r7, pc}
 8007c84:	20000244 	.word	0x20000244
 8007c88:	20000264 	.word	0x20000264
 8007c8c:	2000026c 	.word	0x2000026c

08007c90 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007c90:	b590      	push	{r4, r7, lr}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ca4:	681c      	ldr	r4, [r3, #0]
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	9201      	str	r2, [sp, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	9200      	str	r2, [sp, #0]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	4917      	ldr	r1, [pc, #92]	@ (8007d10 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a14      	ldr	r2, [pc, #80]	@ (8007d14 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007cc4:	4912      	ldr	r1, [pc, #72]	@ (8007d10 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a10      	ldr	r2, [pc, #64]	@ (8007d18 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007cd6:	490f      	ldr	r1, [pc, #60]	@ (8007d14 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a19      	ldr	r1, [r3, #32]
 8007ce0:	78fa      	ldrb	r2, [r7, #3]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	440b      	add	r3, r1
 8007cec:	7b9b      	ldrb	r3, [r3, #14]
 8007cee:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	7bfa      	ldrb	r2, [r7, #15]
 8007cfc:	4906      	ldr	r1, [pc, #24]	@ (8007d18 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007d06:	68bb      	ldr	r3, [r7, #8]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd90      	pop	{r4, r7, pc}
 8007d10:	20000244 	.word	0x20000244
 8007d14:	20000264 	.word	0x20000264
 8007d18:	2000026c 	.word	0x2000026c

08007d1c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	460b      	mov	r3, r1
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d32:	681c      	ldr	r4, [r3, #0]
 8007d34:	7afa      	ldrb	r2, [r7, #11]
 8007d36:	2300      	movs	r3, #0
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	2203      	movs	r2, #3
 8007d42:	490c      	ldr	r1, [pc, #48]	@ (8007d74 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a09      	ldr	r2, [pc, #36]	@ (8007d78 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007d54:	4907      	ldr	r1, [pc, #28]	@ (8007d74 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a05      	ldr	r2, [pc, #20]	@ (8007d7c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007d66:	4904      	ldr	r1, [pc, #16]	@ (8007d78 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	4798      	blx	r3
}
 8007d6c:	bf00      	nop
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd90      	pop	{r4, r7, pc}
 8007d74:	20000244 	.word	0x20000244
 8007d78:	20000264 	.word	0x20000264
 8007d7c:	2000026c 	.word	0x2000026c

08007d80 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d94:	681c      	ldr	r4, [r3, #0]
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9201      	str	r2, [sp, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	9200      	str	r2, [sp, #0]
 8007da0:	2204      	movs	r2, #4
 8007da2:	490c      	ldr	r1, [pc, #48]	@ (8007dd4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a09      	ldr	r2, [pc, #36]	@ (8007dd8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007db4:	4907      	ldr	r1, [pc, #28]	@ (8007dd4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a05      	ldr	r2, [pc, #20]	@ (8007ddc <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007dc6:	4904      	ldr	r1, [pc, #16]	@ (8007dd8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4798      	blx	r3
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd90      	pop	{r4, r7, pc}
 8007dd4:	20000244 	.word	0x20000244
 8007dd8:	20000264 	.word	0x20000264
 8007ddc:	2000026c 	.word	0x2000026c

08007de0 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007de0:	b590      	push	{r4, r7, lr}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	460b      	mov	r3, r1
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007df6:	681c      	ldr	r4, [r3, #0]
 8007df8:	7afa      	ldrb	r2, [r7, #11]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	4613      	mov	r3, r2
 8007e04:	2205      	movs	r2, #5
 8007e06:	490c      	ldr	r1, [pc, #48]	@ (8007e38 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a09      	ldr	r2, [pc, #36]	@ (8007e3c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007e18:	4907      	ldr	r1, [pc, #28]	@ (8007e38 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a05      	ldr	r2, [pc, #20]	@ (8007e40 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007e2a:	4904      	ldr	r1, [pc, #16]	@ (8007e3c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	4798      	blx	r3
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd90      	pop	{r4, r7, pc}
 8007e38:	20000244 	.word	0x20000244
 8007e3c:	20000264 	.word	0x20000264
 8007e40:	2000026c 	.word	0x2000026c

08007e44 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007e44:	b590      	push	{r4, r7, lr}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af02      	add	r7, sp, #8
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e54:	d21f      	bcs.n	8007e96 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e5e:	681c      	ldr	r4, [r3, #0]
 8007e60:	2300      	movs	r3, #0
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	2300      	movs	r3, #0
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2206      	movs	r2, #6
 8007e6c:	490c      	ldr	r1, [pc, #48]	@ (8007ea0 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a09      	ldr	r2, [pc, #36]	@ (8007ea4 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e7e:	4908      	ldr	r1, [pc, #32]	@ (8007ea0 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a06      	ldr	r2, [pc, #24]	@ (8007ea8 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007e90:	4904      	ldr	r1, [pc, #16]	@ (8007ea4 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd90      	pop	{r4, r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000244 	.word	0x20000244
 8007ea4:	20000264 	.word	0x20000264
 8007ea8:	2000026c 	.word	0x2000026c

08007eac <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ec0:	d220      	bcs.n	8007f04 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007eca:	681c      	ldr	r4, [r3, #0]
 8007ecc:	7afa      	ldrb	r2, [r7, #11]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	2207      	movs	r2, #7
 8007eda:	490c      	ldr	r1, [pc, #48]	@ (8007f0c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a09      	ldr	r2, [pc, #36]	@ (8007f10 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007eec:	4907      	ldr	r1, [pc, #28]	@ (8007f0c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a05      	ldr	r2, [pc, #20]	@ (8007f14 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007efe:	4904      	ldr	r1, [pc, #16]	@ (8007f10 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	4798      	blx	r3
}
 8007f04:	bf00      	nop
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd90      	pop	{r4, r7, pc}
 8007f0c:	20000244 	.word	0x20000244
 8007f10:	20000264 	.word	0x20000264
 8007f14:	2000026c 	.word	0x2000026c

08007f18 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007f18:	b590      	push	{r4, r7, lr}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	460b      	mov	r3, r1
 8007f24:	72fb      	strb	r3, [r7, #11]
 8007f26:	4613      	mov	r3, r2
 8007f28:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f32:	681c      	ldr	r4, [r3, #0]
 8007f34:	7af9      	ldrb	r1, [r7, #11]
 8007f36:	7abb      	ldrb	r3, [r7, #10]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	9201      	str	r2, [sp, #4]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	2208      	movs	r2, #8
 8007f42:	490c      	ldr	r1, [pc, #48]	@ (8007f74 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a09      	ldr	r2, [pc, #36]	@ (8007f78 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007f54:	4907      	ldr	r1, [pc, #28]	@ (8007f74 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a05      	ldr	r2, [pc, #20]	@ (8007f7c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007f66:	4904      	ldr	r1, [pc, #16]	@ (8007f78 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	4798      	blx	r3
}
 8007f6c:	bf00      	nop
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd90      	pop	{r4, r7, pc}
 8007f74:	20000244 	.word	0x20000244
 8007f78:	20000264 	.word	0x20000264
 8007f7c:	2000026c 	.word	0x2000026c

08007f80 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f98:	681c      	ldr	r4, [r3, #0]
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	78bb      	ldrb	r3, [r7, #2]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	9101      	str	r1, [sp, #4]
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	2209      	movs	r2, #9
 8007fa8:	490c      	ldr	r1, [pc, #48]	@ (8007fdc <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a09      	ldr	r2, [pc, #36]	@ (8007fe0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007fba:	4908      	ldr	r1, [pc, #32]	@ (8007fdc <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a06      	ldr	r2, [pc, #24]	@ (8007fe4 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8007fcc:	4904      	ldr	r1, [pc, #16]	@ (8007fe0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd90      	pop	{r4, r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000244 	.word	0x20000244
 8007fe0:	20000264 	.word	0x20000264
 8007fe4:	2000026c 	.word	0x2000026c

08007fe8 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007fe8:	b590      	push	{r4, r7, lr}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ff8:	681c      	ldr	r4, [r3, #0]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	2300      	movs	r3, #0
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	2300      	movs	r3, #0
 8008004:	220a      	movs	r2, #10
 8008006:	490c      	ldr	r1, [pc, #48]	@ (8008038 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a09      	ldr	r2, [pc, #36]	@ (800803c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8008018:	4907      	ldr	r1, [pc, #28]	@ (8008038 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a05      	ldr	r2, [pc, #20]	@ (8008040 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 800802a:	4904      	ldr	r1, [pc, #16]	@ (800803c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	4798      	blx	r3
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bd90      	pop	{r4, r7, pc}
 8008038:	20000244 	.word	0x20000244
 800803c:	20000264 	.word	0x20000264
 8008040:	2000026c 	.word	0x2000026c

08008044 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b085      	sub	sp, #20
 8008048:	af02      	add	r7, sp, #8
 800804a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008054:	681c      	ldr	r4, [r3, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	2300      	movs	r3, #0
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	2300      	movs	r3, #0
 8008060:	220b      	movs	r2, #11
 8008062:	490c      	ldr	r1, [pc, #48]	@ (8008094 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a09      	ldr	r2, [pc, #36]	@ (8008098 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008074:	4907      	ldr	r1, [pc, #28]	@ (8008094 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a05      	ldr	r2, [pc, #20]	@ (800809c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 8008086:	4904      	ldr	r1, [pc, #16]	@ (8008098 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	bd90      	pop	{r4, r7, pc}
 8008094:	20000244 	.word	0x20000244
 8008098:	20000264 	.word	0x20000264
 800809c:	2000026c 	.word	0x2000026c

080080a0 <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 80080a0:	b590      	push	{r4, r7, lr}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080b0:	681c      	ldr	r4, [r3, #0]
 80080b2:	2300      	movs	r3, #0
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	2300      	movs	r3, #0
 80080bc:	220c      	movs	r2, #12
 80080be:	490c      	ldr	r1, [pc, #48]	@ (80080f0 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a09      	ldr	r2, [pc, #36]	@ (80080f4 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 80080d0:	4907      	ldr	r1, [pc, #28]	@ (80080f0 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a05      	ldr	r2, [pc, #20]	@ (80080f8 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 80080e2:	4904      	ldr	r1, [pc, #16]	@ (80080f4 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd90      	pop	{r4, r7, pc}
 80080f0:	20000244 	.word	0x20000244
 80080f4:	20000264 	.word	0x20000264
 80080f8:	2000026c 	.word	0x2000026c

080080fc <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b085      	sub	sp, #20
 8008100:	af02      	add	r7, sp, #8
 8008102:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800810c:	681c      	ldr	r4, [r3, #0]
 800810e:	2300      	movs	r3, #0
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	2300      	movs	r3, #0
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	2300      	movs	r3, #0
 8008118:	220d      	movs	r2, #13
 800811a:	490c      	ldr	r1, [pc, #48]	@ (800814c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a09      	ldr	r2, [pc, #36]	@ (8008150 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 800812c:	4907      	ldr	r1, [pc, #28]	@ (800814c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a05      	ldr	r2, [pc, #20]	@ (8008154 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 800813e:	4904      	ldr	r1, [pc, #16]	@ (8008150 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bd90      	pop	{r4, r7, pc}
 800814c:	20000244 	.word	0x20000244
 8008150:	20000264 	.word	0x20000264
 8008154:	2000026c 	.word	0x2000026c

08008158 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8008158:	b590      	push	{r4, r7, lr}
 800815a:	b085      	sub	sp, #20
 800815c:	af02      	add	r7, sp, #8
 800815e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008168:	681c      	ldr	r4, [r3, #0]
 800816a:	2300      	movs	r3, #0
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	2300      	movs	r3, #0
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	2300      	movs	r3, #0
 8008174:	220e      	movs	r2, #14
 8008176:	490c      	ldr	r1, [pc, #48]	@ (80081a8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a09      	ldr	r2, [pc, #36]	@ (80081ac <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008188:	4907      	ldr	r1, [pc, #28]	@ (80081a8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a05      	ldr	r2, [pc, #20]	@ (80081b0 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 800819a:	4904      	ldr	r1, [pc, #16]	@ (80081ac <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd90      	pop	{r4, r7, pc}
 80081a8:	20000244 	.word	0x20000244
 80081ac:	20000264 	.word	0x20000264
 80081b0:	2000026c 	.word	0x2000026c

080081b4 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 80081b4:	b590      	push	{r4, r7, lr}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081c4:	681c      	ldr	r4, [r3, #0]
 80081c6:	2300      	movs	r3, #0
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	2300      	movs	r3, #0
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	2300      	movs	r3, #0
 80081d0:	220f      	movs	r2, #15
 80081d2:	490c      	ldr	r1, [pc, #48]	@ (8008204 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a09      	ldr	r2, [pc, #36]	@ (8008208 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 80081e4:	4907      	ldr	r1, [pc, #28]	@ (8008204 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a05      	ldr	r2, [pc, #20]	@ (800820c <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 80081f6:	4904      	ldr	r1, [pc, #16]	@ (8008208 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bd90      	pop	{r4, r7, pc}
 8008204:	20000244 	.word	0x20000244
 8008208:	20000264 	.word	0x20000264
 800820c:	2000026c 	.word	0x2000026c

08008210 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b085      	sub	sp, #20
 8008214:	af02      	add	r7, sp, #8
 8008216:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008220:	681c      	ldr	r4, [r3, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	2300      	movs	r3, #0
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	2300      	movs	r3, #0
 800822c:	2210      	movs	r2, #16
 800822e:	490c      	ldr	r1, [pc, #48]	@ (8008260 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a09      	ldr	r2, [pc, #36]	@ (8008264 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008240:	4907      	ldr	r1, [pc, #28]	@ (8008260 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a05      	ldr	r2, [pc, #20]	@ (8008268 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 8008252:	4904      	ldr	r1, [pc, #16]	@ (8008264 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	bd90      	pop	{r4, r7, pc}
 8008260:	20000244 	.word	0x20000244
 8008264:	20000264 	.word	0x20000264
 8008268:	2000026c 	.word	0x2000026c

0800826c <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800826c:	b590      	push	{r4, r7, lr}
 800826e:	b085      	sub	sp, #20
 8008270:	af02      	add	r7, sp, #8
 8008272:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800827c:	681c      	ldr	r4, [r3, #0]
 800827e:	2300      	movs	r3, #0
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	2300      	movs	r3, #0
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2300      	movs	r3, #0
 8008288:	2211      	movs	r2, #17
 800828a:	490c      	ldr	r1, [pc, #48]	@ (80082bc <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a09      	ldr	r2, [pc, #36]	@ (80082c0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 800829c:	4907      	ldr	r1, [pc, #28]	@ (80082bc <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a05      	ldr	r2, [pc, #20]	@ (80082c4 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 80082ae:	4904      	ldr	r1, [pc, #16]	@ (80082c0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd90      	pop	{r4, r7, pc}
 80082bc:	20000244 	.word	0x20000244
 80082c0:	20000264 	.word	0x20000264
 80082c4:	2000026c 	.word	0x2000026c

080082c8 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 80082c8:	b590      	push	{r4, r7, lr}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082d8:	681c      	ldr	r4, [r3, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	2300      	movs	r3, #0
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	2212      	movs	r2, #18
 80082e6:	4912      	ldr	r1, [pc, #72]	@ (8008330 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008334 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80082f8:	490d      	ldr	r1, [pc, #52]	@ (8008330 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a0b      	ldr	r2, [pc, #44]	@ (8008338 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 800830a:	490a      	ldr	r1, [pc, #40]	@ (8008334 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2202      	movs	r2, #2
 800831c:	4906      	ldr	r1, [pc, #24]	@ (8008338 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	4798      	blx	r3
 8008322:	4603      	mov	r3, r0
 8008324:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8008326:	89fb      	ldrh	r3, [r7, #14]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	bd90      	pop	{r4, r7, pc}
 8008330:	20000244 	.word	0x20000244
 8008334:	20000264 	.word	0x20000264
 8008338:	2000026c 	.word	0x2000026c

0800833c <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800833c:	b590      	push	{r4, r7, lr}
 800833e:	b087      	sub	sp, #28
 8008340:	af02      	add	r7, sp, #8
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	460b      	mov	r3, r1
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008352:	681c      	ldr	r4, [r3, #0]
 8008354:	7afa      	ldrb	r2, [r7, #11]
 8008356:	2300      	movs	r3, #0
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	4613      	mov	r3, r2
 8008360:	2201      	movs	r2, #1
 8008362:	4903      	ldr	r1, [pc, #12]	@ (8008370 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	47a0      	blx	r4
}
 8008368:	bf00      	nop
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	bd90      	pop	{r4, r7, pc}
 8008370:	20000244 	.word	0x20000244

08008374 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b085      	sub	sp, #20
 8008378:	af02      	add	r7, sp, #8
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008388:	681c      	ldr	r4, [r3, #0]
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	2200      	movs	r2, #0
 800838e:	9201      	str	r2, [sp, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	9200      	str	r2, [sp, #0]
 8008394:	2202      	movs	r2, #2
 8008396:	4903      	ldr	r1, [pc, #12]	@ (80083a4 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	47a0      	blx	r4
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd90      	pop	{r4, r7, pc}
 80083a4:	20000244 	.word	0x20000244

080083a8 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80083a8:	b590      	push	{r4, r7, lr}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	460b      	mov	r3, r1
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083be:	681c      	ldr	r4, [r3, #0]
 80083c0:	7afa      	ldrb	r2, [r7, #11]
 80083c2:	2300      	movs	r3, #0
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	4613      	mov	r3, r2
 80083cc:	2203      	movs	r2, #3
 80083ce:	4903      	ldr	r1, [pc, #12]	@ (80083dc <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	47a0      	blx	r4
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd90      	pop	{r4, r7, pc}
 80083dc:	20000244 	.word	0x20000244

080083e0 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80083e0:	b590      	push	{r4, r7, lr}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083f4:	681c      	ldr	r4, [r3, #0]
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	2200      	movs	r2, #0
 80083fa:	9201      	str	r2, [sp, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	9200      	str	r2, [sp, #0]
 8008400:	2204      	movs	r2, #4
 8008402:	4903      	ldr	r1, [pc, #12]	@ (8008410 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	47a0      	blx	r4
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	bd90      	pop	{r4, r7, pc}
 8008410:	20000244 	.word	0x20000244

08008414 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b087      	sub	sp, #28
 8008418:	af02      	add	r7, sp, #8
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	460b      	mov	r3, r1
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800842a:	681c      	ldr	r4, [r3, #0]
 800842c:	7afa      	ldrb	r2, [r7, #11]
 800842e:	2300      	movs	r3, #0
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4613      	mov	r3, r2
 8008438:	2205      	movs	r2, #5
 800843a:	4903      	ldr	r1, [pc, #12]	@ (8008448 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	47a0      	blx	r4
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	bd90      	pop	{r4, r7, pc}
 8008448:	20000244 	.word	0x20000244

0800844c <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800844c:	b590      	push	{r4, r7, lr}
 800844e:	b085      	sub	sp, #20
 8008450:	af02      	add	r7, sp, #8
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800845e:	681c      	ldr	r4, [r3, #0]
 8008460:	2300      	movs	r3, #0
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	2300      	movs	r3, #0
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2206      	movs	r2, #6
 800846c:	4903      	ldr	r1, [pc, #12]	@ (800847c <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	47a0      	blx	r4
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	bd90      	pop	{r4, r7, pc}
 800847a:	bf00      	nop
 800847c:	20000244 	.word	0x20000244

08008480 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8008480:	b590      	push	{r4, r7, lr}
 8008482:	b087      	sub	sp, #28
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	460b      	mov	r3, r1
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008496:	681c      	ldr	r4, [r3, #0]
 8008498:	7afa      	ldrb	r2, [r7, #11]
 800849a:	2300      	movs	r3, #0
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4613      	mov	r3, r2
 80084a4:	2207      	movs	r2, #7
 80084a6:	4903      	ldr	r1, [pc, #12]	@ (80084b4 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	47a0      	blx	r4
}
 80084ac:	bf00      	nop
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd90      	pop	{r4, r7, pc}
 80084b4:	20000244 	.word	0x20000244

080084b8 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80084b8:	b590      	push	{r4, r7, lr}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af02      	add	r7, sp, #8
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	72fb      	strb	r3, [r7, #11]
 80084c6:	4613      	mov	r3, r2
 80084c8:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084d2:	681c      	ldr	r4, [r3, #0]
 80084d4:	7af9      	ldrb	r1, [r7, #11]
 80084d6:	7abb      	ldrb	r3, [r7, #10]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	9201      	str	r2, [sp, #4]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	460b      	mov	r3, r1
 80084e0:	2208      	movs	r2, #8
 80084e2:	4903      	ldr	r1, [pc, #12]	@ (80084f0 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	47a0      	blx	r4
}
 80084e8:	bf00      	nop
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd90      	pop	{r4, r7, pc}
 80084f0:	20000244 	.word	0x20000244

080084f4 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80084f4:	b590      	push	{r4, r7, lr}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
 8008500:	4613      	mov	r3, r2
 8008502:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800850c:	681c      	ldr	r4, [r3, #0]
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	78bb      	ldrb	r3, [r7, #2]
 8008512:	2100      	movs	r1, #0
 8008514:	9101      	str	r1, [sp, #4]
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	4613      	mov	r3, r2
 800851a:	2209      	movs	r2, #9
 800851c:	4903      	ldr	r1, [pc, #12]	@ (800852c <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	47a0      	blx	r4
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	bd90      	pop	{r4, r7, pc}
 800852a:	bf00      	nop
 800852c:	20000244 	.word	0x20000244

08008530 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8008530:	b590      	push	{r4, r7, lr}
 8008532:	b085      	sub	sp, #20
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008540:	681c      	ldr	r4, [r3, #0]
 8008542:	2300      	movs	r3, #0
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	2300      	movs	r3, #0
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	2300      	movs	r3, #0
 800854c:	220a      	movs	r2, #10
 800854e:	4903      	ldr	r1, [pc, #12]	@ (800855c <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	47a0      	blx	r4
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bd90      	pop	{r4, r7, pc}
 800855c:	20000244 	.word	0x20000244

08008560 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8008560:	b590      	push	{r4, r7, lr}
 8008562:	b085      	sub	sp, #20
 8008564:	af02      	add	r7, sp, #8
 8008566:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008570:	681c      	ldr	r4, [r3, #0]
 8008572:	2300      	movs	r3, #0
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	2300      	movs	r3, #0
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	220b      	movs	r2, #11
 800857e:	4903      	ldr	r1, [pc, #12]	@ (800858c <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	47a0      	blx	r4
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bd90      	pop	{r4, r7, pc}
 800858c:	20000244 	.word	0x20000244

08008590 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8008590:	b590      	push	{r4, r7, lr}
 8008592:	b085      	sub	sp, #20
 8008594:	af02      	add	r7, sp, #8
 8008596:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085a0:	681c      	ldr	r4, [r3, #0]
 80085a2:	2300      	movs	r3, #0
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	220c      	movs	r2, #12
 80085ae:	4903      	ldr	r1, [pc, #12]	@ (80085bc <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	47a0      	blx	r4
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd90      	pop	{r4, r7, pc}
 80085bc:	20000244 	.word	0x20000244

080085c0 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085d0:	681c      	ldr	r4, [r3, #0]
 80085d2:	2300      	movs	r3, #0
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	2300      	movs	r3, #0
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	220d      	movs	r2, #13
 80085de:	4903      	ldr	r1, [pc, #12]	@ (80085ec <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	47a0      	blx	r4
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd90      	pop	{r4, r7, pc}
 80085ec:	20000244 	.word	0x20000244

080085f0 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008600:	681c      	ldr	r4, [r3, #0]
 8008602:	2300      	movs	r3, #0
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	2300      	movs	r3, #0
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	220e      	movs	r2, #14
 800860e:	4903      	ldr	r1, [pc, #12]	@ (800861c <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	47a0      	blx	r4
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	bd90      	pop	{r4, r7, pc}
 800861c:	20000244 	.word	0x20000244

08008620 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b085      	sub	sp, #20
 8008624:	af02      	add	r7, sp, #8
 8008626:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008630:	681c      	ldr	r4, [r3, #0]
 8008632:	2300      	movs	r3, #0
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	2300      	movs	r3, #0
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	220f      	movs	r2, #15
 800863e:	4903      	ldr	r1, [pc, #12]	@ (800864c <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	47a0      	blx	r4
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bd90      	pop	{r4, r7, pc}
 800864c:	20000244 	.word	0x20000244

08008650 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8008650:	b590      	push	{r4, r7, lr}
 8008652:	b085      	sub	sp, #20
 8008654:	af02      	add	r7, sp, #8
 8008656:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008660:	681c      	ldr	r4, [r3, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	2300      	movs	r3, #0
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	2300      	movs	r3, #0
 800866c:	2210      	movs	r2, #16
 800866e:	4903      	ldr	r1, [pc, #12]	@ (800867c <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	47a0      	blx	r4
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	bd90      	pop	{r4, r7, pc}
 800867c:	20000244 	.word	0x20000244

08008680 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8008680:	b590      	push	{r4, r7, lr}
 8008682:	b085      	sub	sp, #20
 8008684:	af02      	add	r7, sp, #8
 8008686:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008690:	681c      	ldr	r4, [r3, #0]
 8008692:	2300      	movs	r3, #0
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	2300      	movs	r3, #0
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2300      	movs	r3, #0
 800869c:	2211      	movs	r2, #17
 800869e:	4903      	ldr	r1, [pc, #12]	@ (80086ac <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	47a0      	blx	r4
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd90      	pop	{r4, r7, pc}
 80086ac:	20000244 	.word	0x20000244

080086b0 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 80086b0:	b590      	push	{r4, r7, lr}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80086c0:	681c      	ldr	r4, [r3, #0]
 80086c2:	2300      	movs	r3, #0
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	2300      	movs	r3, #0
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	2300      	movs	r3, #0
 80086cc:	2212      	movs	r2, #18
 80086ce:	4903      	ldr	r1, [pc, #12]	@ (80086dc <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	47a0      	blx	r4
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd90      	pop	{r4, r7, pc}
 80086dc:	20000244 	.word	0x20000244

080086e0 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a09      	ldr	r2, [pc, #36]	@ (8008718 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80086f4:	4909      	ldr	r1, [pc, #36]	@ (800871c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a06      	ldr	r2, [pc, #24]	@ (8008720 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8008706:	4904      	ldr	r1, [pc, #16]	@ (8008718 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800870c:	4b04      	ldr	r3, [pc, #16]	@ (8008720 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000264 	.word	0x20000264
 800871c:	20000244 	.word	0x20000244
 8008720:	2000026c 	.word	0x2000026c

08008724 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8008724:	b590      	push	{r4, r7, lr}
 8008726:	b089      	sub	sp, #36	@ 0x24
 8008728:	af02      	add	r7, sp, #8
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8008730:	4b17      	ldr	r3, [pc, #92]	@ (8008790 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008736:	2300      	movs	r3, #0
 8008738:	75fb      	strb	r3, [r7, #23]
 800873a:	e020      	b.n	800877e <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008744:	681c      	ldr	r4, [r3, #0]
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	461a      	mov	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	1899      	adds	r1, r3, r2
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	461a      	mov	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	441a      	add	r2, r3
 800875a:	230a      	movs	r3, #10
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2302      	movs	r3, #2
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8008764:	2300      	movs	r3, #0
 8008766:	75bb      	strb	r3, [r7, #22]
 8008768:	e003      	b.n	8008772 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800876a:	bf00      	nop
 800876c:	7dbb      	ldrb	r3, [r7, #22]
 800876e:	3301      	adds	r3, #1
 8008770:	75bb      	strb	r3, [r7, #22]
 8008772:	7dbb      	ldrb	r3, [r7, #22]
 8008774:	2b7c      	cmp	r3, #124	@ 0x7c
 8008776:	d9f8      	bls.n	800876a <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	3301      	adds	r3, #1
 800877c:	75fb      	strb	r3, [r7, #23]
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	2b03      	cmp	r3, #3
 8008782:	d9db      	bls.n	800873c <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8008784:	bf00      	nop
}
 8008786:	bf00      	nop
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd90      	pop	{r4, r7, pc}
 800878e:	bf00      	nop
 8008790:	20000241 	.word	0x20000241

08008794 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80087a6:	2301      	movs	r3, #1
 80087a8:	74fb      	strb	r3, [r7, #19]
 80087aa:	e016      	b.n	80087da <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80087ac:	7cfb      	ldrb	r3, [r7, #19]
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	461a      	mov	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	7f1b      	ldrb	r3, [r3, #28]
 80087b6:	4413      	add	r3, r2
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	4413      	add	r3, r2
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	4619      	mov	r1, r3
 80087c0:	79fa      	ldrb	r2, [r7, #7]
 80087c2:	7cfb      	ldrb	r3, [r7, #19]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	fa01 f303 	lsl.w	r3, r1, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80087d4:	7cfb      	ldrb	r3, [r7, #19]
 80087d6:	3301      	adds	r3, #1
 80087d8:	74fb      	strb	r3, [r7, #19]
 80087da:	7cfb      	ldrb	r3, [r7, #19]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d9e5      	bls.n	80087ac <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80087e0:	697b      	ldr	r3, [r7, #20]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
	...

080087f0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2118      	movs	r1, #24
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
 8008810:	4602      	mov	r2, r0
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008816:	b292      	uxth	r2, r2
 8008818:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	2b0e      	cmp	r3, #14
 800881e:	f200 8099 	bhi.w	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 8008822:	a201      	add	r2, pc, #4	@ (adr r2, 8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	08008865 	.word	0x08008865
 800882c:	08008875 	.word	0x08008875
 8008830:	08008885 	.word	0x08008885
 8008834:	08008895 	.word	0x08008895
 8008838:	080088a5 	.word	0x080088a5
 800883c:	080088b5 	.word	0x080088b5
 8008840:	080088c5 	.word	0x080088c5
 8008844:	080088d5 	.word	0x080088d5
 8008848:	080088e5 	.word	0x080088e5
 800884c:	080088f5 	.word	0x080088f5
 8008850:	08008905 	.word	0x08008905
 8008854:	08008915 	.word	0x08008915
 8008858:	08008925 	.word	0x08008925
 800885c:	08008935 	.word	0x08008935
 8008860:	08008945 	.word	0x08008945
      state = pL6470_StatusRegister->HiZ;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800886e:	b2db      	uxtb	r3, r3
 8008870:	73fb      	strb	r3, [r7, #15]
      break;
 8008872:	e06f      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	73fb      	strb	r3, [r7, #15]
      break;
 8008882:	e067      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800888e:	b2db      	uxtb	r3, r3
 8008890:	73fb      	strb	r3, [r7, #15]
      break;
 8008892:	e05f      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	e057      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	73fb      	strb	r3, [r7, #15]
      break;
 80088b2:	e04f      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	73fb      	strb	r3, [r7, #15]
      break;
 80088c2:	e047      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	73fb      	strb	r3, [r7, #15]
      break;
 80088d2:	e03f      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	73fb      	strb	r3, [r7, #15]
      break;
 80088e2:	e037      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	73fb      	strb	r3, [r7, #15]
      break;
 80088f2:	e02f      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	73fb      	strb	r3, [r7, #15]
      break;
 8008902:	e027      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008908:	785b      	ldrb	r3, [r3, #1]
 800890a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800890e:	b2db      	uxtb	r3, r3
 8008910:	73fb      	strb	r3, [r7, #15]
      break;
 8008912:	e01f      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008918:	785b      	ldrb	r3, [r3, #1]
 800891a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	73fb      	strb	r3, [r7, #15]
      break;
 8008922:	e017      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800892e:	b2db      	uxtb	r3, r3
 8008930:	73fb      	strb	r3, [r7, #15]
      break;
 8008932:	e00f      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800893e:	b2db      	uxtb	r3, r3
 8008940:	73fb      	strb	r3, [r7, #15]
      break;
 8008942:	e007      	b.n	8008954 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800894e:	b2db      	uxtb	r3, r3
 8008950:	73fb      	strb	r3, [r7, #15]
      break;
 8008952:	bf00      	nop
  return state;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop

08008960 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	2b18      	cmp	r3, #24
 8008970:	d809      	bhi.n	8008986 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a19      	ldr	r1, [r3, #32]
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4613      	mov	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	3301      	adds	r3, #1
 8008984:	e000      	b.n	8008988 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]
 80089a2:	e01a      	b.n	80089da <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	4413      	add	r3, r2
 80089ac:	2200      	movs	r2, #0
 80089ae:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	4413      	add	r3, r2
 80089b8:	2200      	movs	r2, #0
 80089ba:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	4413      	add	r3, r2
 80089c4:	2200      	movs	r2, #0
 80089c6:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	4413      	add	r3, r2
 80089d0:	2200      	movs	r2, #0
 80089d2:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	3301      	adds	r3, #1
 80089d8:	73fb      	strb	r3, [r7, #15]
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d9e1      	bls.n	80089a4 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80089e0:	bf00      	nop
 80089e2:	bf00      	nop
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80089ee:	b480      	push	{r7}
 80089f0:	b085      	sub	sp, #20
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	603b      	str	r3, [r7, #0]
 80089fa:	4613      	mov	r3, r2
 80089fc:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	7f1b      	ldrb	r3, [r3, #28]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	4413      	add	r3, r2
 8008a08:	79fa      	ldrb	r2, [r7, #7]
 8008a0a:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	7f1b      	ldrb	r3, [r3, #28]
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	4413      	add	r3, r2
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	7f1b      	ldrb	r3, [r3, #28]
 8008a1e:	011b      	lsls	r3, r3, #4
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	4413      	add	r3, r2
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	7f1b      	ldrb	r3, [r3, #28]
 8008a2c:	011b      	lsls	r3, r3, #4
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4413      	add	r3, r2
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	60da      	str	r2, [r3, #12]
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008a44:	b590      	push	{r4, r7, lr}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	4613      	mov	r3, r2
 8008a52:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8008a54:	4b10      	ldr	r3, [pc, #64]	@ (8008a98 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a98 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8008a7a:	681c      	ldr	r4, [r3, #0]
 8008a7c:	79fa      	ldrb	r2, [r7, #7]
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	47a0      	blx	r4
}
 8008a8e:	bf00      	nop
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd90      	pop	{r4, r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000241 	.word	0x20000241

08008a9c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008aac:	2300      	movs	r3, #0
 8008aae:	75bb      	strb	r3, [r7, #22]
 8008ab0:	e013      	b.n	8008ada <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	75fb      	strb	r3, [r7, #23]
 8008ab6:	e00a      	b.n	8008ace <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8008ab8:	7d7b      	ldrb	r3, [r7, #21]
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	757a      	strb	r2, [r7, #21]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	3301      	adds	r3, #1
 8008acc:	75fb      	strb	r3, [r7, #23]
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d9f1      	bls.n	8008ab8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008ad4:	7dbb      	ldrb	r3, [r7, #22]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	75bb      	strb	r3, [r7, #22]
 8008ada:	7dbb      	ldrb	r3, [r7, #22]
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d9e8      	bls.n	8008ab2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	75fb      	strb	r3, [r7, #23]
 8008ae4:	e1f1      	b.n	8008eca <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	440b      	add	r3, r1
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	4619      	mov	r1, r3
 8008af6:	460b      	mov	r3, r1
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	1a5b      	subs	r3, r3, r1
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	441a      	add	r2, r3
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	440b      	add	r3, r1
 8008b06:	7b12      	ldrb	r2, [r2, #12]
 8008b08:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	4413      	add	r3, r2
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b12      	cmp	r3, #18
 8008b16:	f200 81d5 	bhi.w	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8008b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b20 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008ec5 	.word	0x08008ec5
 8008b24:	08008b6d 	.word	0x08008b6d
 8008b28:	08008bf5 	.word	0x08008bf5
 8008b2c:	08008c25 	.word	0x08008c25
 8008b30:	08008c8d 	.word	0x08008c8d
 8008b34:	08008cbb 	.word	0x08008cbb
 8008b38:	08008d23 	.word	0x08008d23
 8008b3c:	08008d5f 	.word	0x08008d5f
 8008b40:	08008dc7 	.word	0x08008dc7
 8008b44:	08008e63 	.word	0x08008e63
 8008b48:	08008ec5 	.word	0x08008ec5
 8008b4c:	08008ec5 	.word	0x08008ec5
 8008b50:	08008ec5 	.word	0x08008ec5
 8008b54:	08008ec5 	.word	0x08008ec5
 8008b58:	08008ec5 	.word	0x08008ec5
 8008b5c:	08008ec5 	.word	0x08008ec5
 8008b60:	08008ec5 	.word	0x08008ec5
 8008b64:	08008ec5 	.word	0x08008ec5
 8008b68:	08008ec5 	.word	0x08008ec5
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	7819      	ldrb	r1, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a18      	ldr	r0, [r3, #32]
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	4413      	add	r3, r2
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4403      	add	r3, r0
 8008b8c:	781a      	ldrb	r2, [r3, #0]
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	4403      	add	r3, r0
 8008b94:	430a      	orrs	r2, r1
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a19      	ldr	r1, [r3, #32]
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	7b9b      	ldrb	r3, [r3, #14]
 8008bb4:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	75bb      	strb	r3, [r7, #22]
 8008bba:	e016      	b.n	8008bea <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	7d39      	ldrb	r1, [r7, #20]
 8008bc8:	7dbb      	ldrb	r3, [r7, #22]
 8008bca:	1acb      	subs	r3, r1, r3
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	fa22 f103 	lsr.w	r1, r2, r3
 8008bd2:	7dbb      	ldrb	r3, [r7, #22]
 8008bd4:	005a      	lsls	r2, r3, #1
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	4413      	add	r3, r2
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4413      	add	r3, r2
 8008be0:	b2ca      	uxtb	r2, r1
 8008be2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008be4:	7dbb      	ldrb	r3, [r7, #22]
 8008be6:	3301      	adds	r3, #1
 8008be8:	75bb      	strb	r3, [r7, #22]
 8008bea:	7d3a      	ldrb	r2, [r7, #20]
 8008bec:	7dbb      	ldrb	r3, [r7, #22]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d2e4      	bcs.n	8008bbc <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008bf2:	e167      	b.n	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	7819      	ldrb	r1, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a18      	ldr	r0, [r3, #32]
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	4413      	add	r3, r2
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4403      	add	r3, r0
 8008c14:	781a      	ldrb	r2, [r3, #0]
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4403      	add	r3, r0
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	701a      	strb	r2, [r3, #0]
      break;
 8008c22:	e14f      	b.n	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	4413      	add	r3, r2
 8008c2a:	7819      	ldrb	r1, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	4413      	add	r3, r2
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	4413      	add	r3, r2
 8008c40:	4403      	add	r3, r0
 8008c42:	7a1a      	ldrb	r2, [r3, #8]
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	4403      	add	r3, r0
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c50:	2301      	movs	r3, #1
 8008c52:	75bb      	strb	r3, [r7, #22]
 8008c54:	e016      	b.n	8008c84 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	7dbb      	ldrb	r3, [r7, #22]
 8008c62:	f1c3 0303 	rsb	r3, r3, #3
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	fa22 f103 	lsr.w	r1, r2, r3
 8008c6c:	7dbb      	ldrb	r3, [r7, #22]
 8008c6e:	005a      	lsls	r2, r3, #1
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	4413      	add	r3, r2
 8008c74:	461a      	mov	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	b2ca      	uxtb	r2, r1
 8008c7c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c7e:	7dbb      	ldrb	r3, [r7, #22]
 8008c80:	3301      	adds	r3, #1
 8008c82:	75bb      	strb	r3, [r7, #22]
 8008c84:	7dbb      	ldrb	r3, [r7, #22]
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d9e5      	bls.n	8008c56 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008c8a:	e11b      	b.n	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	4413      	add	r3, r2
 8008c92:	7819      	ldrb	r1, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	4403      	add	r3, r0
 8008caa:	7a1a      	ldrb	r2, [r3, #8]
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	4403      	add	r3, r0
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	b2d2      	uxtb	r2, r2
 8008cb6:	701a      	strb	r2, [r3, #0]
      break;
 8008cb8:	e104      	b.n	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	7819      	ldrb	r1, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	011b      	lsls	r3, r3, #4
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	4403      	add	r3, r0
 8008cd8:	7a1a      	ldrb	r2, [r3, #8]
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	4403      	add	r3, r0
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75bb      	strb	r3, [r7, #22]
 8008cea:	e016      	b.n	8008d1a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	7dbb      	ldrb	r3, [r7, #22]
 8008cf8:	f1c3 0303 	rsb	r3, r3, #3
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	fa22 f103 	lsr.w	r1, r2, r3
 8008d02:	7dbb      	ldrb	r3, [r7, #22]
 8008d04:	005a      	lsls	r2, r3, #1
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	4413      	add	r3, r2
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4413      	add	r3, r2
 8008d10:	b2ca      	uxtb	r2, r1
 8008d12:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d14:	7dbb      	ldrb	r3, [r7, #22]
 8008d16:	3301      	adds	r3, #1
 8008d18:	75bb      	strb	r3, [r7, #22]
 8008d1a:	7dbb      	ldrb	r3, [r7, #22]
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d9e5      	bls.n	8008cec <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008d20:	e0d0      	b.n	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d22:	2301      	movs	r3, #1
 8008d24:	75bb      	strb	r3, [r7, #22]
 8008d26:	e016      	b.n	8008d56 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	4413      	add	r3, r2
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	7dbb      	ldrb	r3, [r7, #22]
 8008d34:	f1c3 0303 	rsb	r3, r3, #3
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	fa22 f103 	lsr.w	r1, r2, r3
 8008d3e:	7dbb      	ldrb	r3, [r7, #22]
 8008d40:	005a      	lsls	r2, r3, #1
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	4413      	add	r3, r2
 8008d46:	461a      	mov	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	b2ca      	uxtb	r2, r1
 8008d4e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d50:	7dbb      	ldrb	r3, [r7, #22]
 8008d52:	3301      	adds	r3, #1
 8008d54:	75bb      	strb	r3, [r7, #22]
 8008d56:	7dbb      	ldrb	r3, [r7, #22]
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d9e5      	bls.n	8008d28 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008d5c:	e0b2      	b.n	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	7819      	ldrb	r1, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	011b      	lsls	r3, r3, #4
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	4413      	add	r3, r2
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	4613      	mov	r3, r2
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	4413      	add	r3, r2
 8008d7a:	4403      	add	r3, r0
 8008d7c:	7a1a      	ldrb	r2, [r3, #8]
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4403      	add	r3, r0
 8008d84:	430a      	orrs	r2, r1
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	75bb      	strb	r3, [r7, #22]
 8008d8e:	e016      	b.n	8008dbe <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	4413      	add	r3, r2
 8008d98:	689a      	ldr	r2, [r3, #8]
 8008d9a:	7dbb      	ldrb	r3, [r7, #22]
 8008d9c:	f1c3 0303 	rsb	r3, r3, #3
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	fa22 f103 	lsr.w	r1, r2, r3
 8008da6:	7dbb      	ldrb	r3, [r7, #22]
 8008da8:	005a      	lsls	r2, r3, #1
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	4413      	add	r3, r2
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4413      	add	r3, r2
 8008db4:	b2ca      	uxtb	r2, r1
 8008db6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008db8:	7dbb      	ldrb	r3, [r7, #22]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	75bb      	strb	r3, [r7, #22]
 8008dbe:	7dbb      	ldrb	r3, [r7, #22]
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d9e5      	bls.n	8008d90 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008dc4:	e07e      	b.n	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	4413      	add	r3, r2
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b259      	sxtb	r1, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	4413      	add	r3, r2
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	4403      	add	r3, r0
 8008de6:	791b      	ldrb	r3, [r3, #4]
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	b25b      	sxtb	r3, r3
 8008dec:	430b      	orrs	r3, r1
 8008dee:	b259      	sxtb	r1, r3
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	4413      	add	r3, r2
 8008df6:	b2ca      	uxtb	r2, r1
 8008df8:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	4413      	add	r3, r2
 8008e00:	7819      	ldrb	r1, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	4613      	mov	r3, r2
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	4413      	add	r3, r2
 8008e16:	4403      	add	r3, r0
 8008e18:	7a1a      	ldrb	r2, [r3, #8]
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	4403      	add	r3, r0
 8008e20:	430a      	orrs	r2, r1
 8008e22:	b2d2      	uxtb	r2, r2
 8008e24:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e26:	2301      	movs	r3, #1
 8008e28:	75bb      	strb	r3, [r7, #22]
 8008e2a:	e016      	b.n	8008e5a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	4413      	add	r3, r2
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	7dbb      	ldrb	r3, [r7, #22]
 8008e38:	f1c3 0303 	rsb	r3, r3, #3
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	fa22 f103 	lsr.w	r1, r2, r3
 8008e42:	7dbb      	ldrb	r3, [r7, #22]
 8008e44:	005a      	lsls	r2, r3, #1
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	4413      	add	r3, r2
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4413      	add	r3, r2
 8008e50:	b2ca      	uxtb	r2, r1
 8008e52:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e54:	7dbb      	ldrb	r3, [r7, #22]
 8008e56:	3301      	adds	r3, #1
 8008e58:	75bb      	strb	r3, [r7, #22]
 8008e5a:	7dbb      	ldrb	r3, [r7, #22]
 8008e5c:	2b03      	cmp	r3, #3
 8008e5e:	d9e5      	bls.n	8008e2c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008e60:	e030      	b.n	8008ec4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	4413      	add	r3, r2
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	b259      	sxtb	r1, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	4413      	add	r3, r2
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	4403      	add	r3, r0
 8008e82:	791b      	ldrb	r3, [r3, #4]
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	b25b      	sxtb	r3, r3
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	b259      	sxtb	r1, r3
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	4413      	add	r3, r2
 8008e92:	b2ca      	uxtb	r2, r1
 8008e94:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	7819      	ldrb	r1, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	4613      	mov	r3, r2
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	4403      	add	r3, r0
 8008eb4:	7a1a      	ldrb	r2, [r3, #8]
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	4403      	add	r3, r0
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	701a      	strb	r2, [r3, #0]
      break;
 8008ec2:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	f67f ae0a 	bls.w	8008ae6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	371c      	adds	r7, #28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008eec:	edd7 7a00 	vldr	s15, [r7]
 8008ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef8:	db1e      	blt.n	8008f38 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008efa:	edd7 7a00 	vldr	s15, [r7]
 8008efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f02:	ee17 2a90 	vmov	r2, s15
 8008f06:	edd7 7a00 	vldr	s15, [r7]
 8008f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f12:	ed97 7a00 	vldr	s14, [r7]
 8008f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f26:	bf4c      	ite	mi
 8008f28:	2301      	movmi	r3, #1
 8008f2a:	2300      	movpl	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f083 0301 	eor.w	r3, r3, #1
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	4413      	add	r3, r2
 8008f36:	e01a      	b.n	8008f6e <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008f38:	edd7 7a00 	vldr	s15, [r7]
 8008f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f40:	ee17 2a90 	vmov	r2, s15
 8008f44:	edd7 7a00 	vldr	s15, [r7]
 8008f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f50:	ed97 7a00 	vldr	s14, [r7]
 8008f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f58:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8008f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f64:	d501      	bpl.n	8008f6a <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	1ad3      	subs	r3, r2, r3
    }
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b086      	sub	sp, #24
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	4613      	mov	r3, r2
 8008f86:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6918      	ldr	r0, [r3, #16]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	8a9b      	ldrh	r3, [r3, #20]
 8008f90:	2200      	movs	r2, #0
 8008f92:	4619      	mov	r1, r3
 8008f94:	f005 f848 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6998      	ldr	r0, [r3, #24]
 8008f9c:	88fa      	ldrh	r2, [r7, #6]
 8008f9e:	2364      	movs	r3, #100	@ 0x64
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	f006 f870 	bl	800f086 <HAL_SPI_Receive>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6918      	ldr	r0, [r3, #16]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8a9b      	ldrh	r3, [r3, #20]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f005 f837 	bl	800e028 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008fc4:	2300      	movs	r3, #0
    }
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6918      	ldr	r0, [r3, #16]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8a9b      	ldrh	r3, [r3, #20]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	f005 f81e 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6998      	ldr	r0, [r3, #24]
 8008ff0:	88fa      	ldrh	r2, [r7, #6]
 8008ff2:	2364      	movs	r3, #100	@ 0x64
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	f005 ff0a 	bl	800ee0e <HAL_SPI_Transmit>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6918      	ldr	r0, [r3, #16]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8a9b      	ldrh	r3, [r3, #20]
 8009006:	2201      	movs	r2, #1
 8009008:	4619      	mov	r1, r3
 800900a:	f005 f80d 	bl	800e028 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e000      	b.n	800901a <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8009018:	2300      	movs	r3, #0
    }
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8009022:	b580      	push	{r7, lr}
 8009024:	b088      	sub	sp, #32
 8009026:	af02      	add	r7, sp, #8
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	607a      	str	r2, [r7, #4]
 800902e:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6918      	ldr	r0, [r3, #16]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8a9b      	ldrh	r3, [r3, #20]
 8009038:	2200      	movs	r2, #0
 800903a:	4619      	mov	r1, r3
 800903c:	f004 fff4 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6998      	ldr	r0, [r3, #24]
 8009044:	887b      	ldrh	r3, [r7, #2]
 8009046:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800904a:	9200      	str	r2, [sp, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	f006 f92a 	bl	800f2a8 <HAL_SPI_TransmitReceive>
 8009054:	4603      	mov	r3, r0
 8009056:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6918      	ldr	r0, [r3, #16]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8a9b      	ldrh	r3, [r3, #20]
 8009066:	2201      	movs	r2, #1
 8009068:	4619      	mov	r1, r3
 800906a:	f004 ffdd 	bl	800e028 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e008      	b.n	8009084 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6918      	ldr	r0, [r3, #16]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8a9b      	ldrh	r3, [r3, #20]
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	f004 ffd3 	bl	800e028 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8009082:	2300      	movs	r3, #0
    }
 8009084:	4618      	mov	r0, r3
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800908c:	b590      	push	{r4, r7, lr}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80090a2:	681c      	ldr	r4, [r3, #0]
 80090a4:	887b      	ldrh	r3, [r7, #2]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	47a0      	blx	r4
    }
 80090ae:	bf00      	nop
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd90      	pop	{r4, r7, pc}

080090b6 <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	4798      	blx	r3
 80090d0:	4603      	mov	r3, r0
    }
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
 80090f0:	4603      	mov	r3, r0
    }
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	4611      	mov	r1, r2
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
 8009118:	4603      	mov	r3, r0
    }
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 8009122:	b590      	push	{r4, r7, lr}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009132:	681c      	ldr	r4, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2100      	movs	r1, #0
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
 8009144:	4603      	mov	r3, r0
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	47a0      	blx	r4
 800914c:	4603      	mov	r3, r0
    }
 800914e:	4618      	mov	r0, r3
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	bd90      	pop	{r4, r7, pc}

08009156 <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 8009156:	b590      	push	{r4, r7, lr}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009166:	681c      	ldr	r4, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2102      	movs	r1, #2
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	4798      	blx	r3
 8009178:	4603      	mov	r3, r0
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	47a0      	blx	r4
 8009180:	4603      	mov	r3, r0
    }
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	bd90      	pop	{r4, r7, pc}

0800918a <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 800918a:	b5b0      	push	{r4, r5, r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800919a:	681c      	ldr	r4, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80091a4:	681d      	ldr	r5, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2103      	movs	r1, #3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	4798      	blx	r3
 80091b6:	4603      	mov	r3, r0
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	47a8      	blx	r5
 80091be:	eef0 7a40 	vmov.f32	s15, s0
 80091c2:	eeb0 0a67 	vmov.f32	s0, s15
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	47a0      	blx	r4
 80091ca:	4603      	mov	r3, r0
    }
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bdb0      	pop	{r4, r5, r7, pc}

080091d4 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 80091d4:	b5b0      	push	{r4, r5, r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80091e4:	681c      	ldr	r4, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091ee:	681d      	ldr	r5, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2106      	movs	r1, #6
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
 8009200:	4603      	mov	r3, r0
 8009202:	b29b      	uxth	r3, r3
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	47a8      	blx	r5
 800920a:	eef0 7a40 	vmov.f32	s15, s0
 800920e:	eeb0 0a67 	vmov.f32	s0, s15
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	47a0      	blx	r4
 8009216:	4603      	mov	r3, r0
    }
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bdb0      	pop	{r4, r5, r7, pc}

08009220 <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8009220:	b5b0      	push	{r4, r5, r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009230:	681c      	ldr	r4, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800923a:	681d      	ldr	r5, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2107      	movs	r1, #7
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
 800924c:	4603      	mov	r3, r0
 800924e:	b29b      	uxth	r3, r3
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	47a8      	blx	r5
 8009256:	eef0 7a40 	vmov.f32	s15, s0
 800925a:	eeb0 0a67 	vmov.f32	s0, s15
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	47a0      	blx	r4
 8009262:	4603      	mov	r3, r0
    }
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bdb0      	pop	{r4, r5, r7, pc}

0800926c <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 800926c:	b5b0      	push	{r4, r5, r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800927c:	681c      	ldr	r4, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8009286:	681d      	ldr	r5, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2104      	movs	r1, #4
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
 8009298:	4603      	mov	r3, r0
 800929a:	b29b      	uxth	r3, r3
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	47a8      	blx	r5
 80092a2:	eef0 7a40 	vmov.f32	s15, s0
 80092a6:	eeb0 0a67 	vmov.f32	s0, s15
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	47a0      	blx	r4
 80092ae:	4603      	mov	r3, r0
    }
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bdb0      	pop	{r4, r5, r7, pc}

080092b8 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 80092b8:	b5b0      	push	{r4, r5, r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092c8:	681c      	ldr	r4, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80092d2:	681d      	ldr	r5, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2105      	movs	r1, #5
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	4798      	blx	r3
 80092e4:	4603      	mov	r3, r0
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	47a8      	blx	r5
 80092ee:	eef0 7a40 	vmov.f32	s15, s0
 80092f2:	eeb0 0a67 	vmov.f32	s0, s15
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	47a0      	blx	r4
 80092fa:	4603      	mov	r3, r0
    }
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bdb0      	pop	{r4, r5, r7, pc}

08009304 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2104      	movs	r1, #4
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3
 800931c:	4603      	mov	r3, r0
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 8009322:	2301      	movs	r3, #1
 8009324:	e000      	b.n	8009328 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 8009326:	2300      	movs	r3, #0
    }
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	b2d1      	uxtb	r1, r2
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	4798      	blx	r3
    }
 8009350:	bf00      	nop
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
    }
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 8009376:	b590      	push	{r4, r7, lr}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009386:	681c      	ldr	r4, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2100      	movs	r1, #0
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3
 8009398:	4603      	mov	r3, r0
 800939a:	461a      	mov	r2, r3
 800939c:	2102      	movs	r1, #2
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	47a0      	blx	r4
    }
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd90      	pop	{r4, r7, pc}

080093aa <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 80093aa:	b590      	push	{r4, r7, lr}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093bc:	681c      	ldr	r4, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	461a      	mov	r2, r3
 80093d2:	2102      	movs	r1, #2
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	47a0      	blx	r4
    }
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd90      	pop	{r4, r7, pc}

080093e0 <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093f2:	681c      	ldr	r4, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	ee07 2a90 	vmov	s15, r2
 8009404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009408:	eeb0 0a67 	vmov.f32	s0, s15
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
 8009410:	4603      	mov	r3, r0
 8009412:	461a      	mov	r2, r3
 8009414:	2106      	movs	r1, #6
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	47a0      	blx	r4
        return true;
 800941a:	2301      	movs	r3, #1
    }
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	bd90      	pop	{r4, r7, pc}

08009424 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8009424:	b590      	push	{r4, r7, lr}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009436:	681c      	ldr	r4, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	ee07 2a90 	vmov	s15, r2
 8009448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944c:	eeb0 0a67 	vmov.f32	s0, s15
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	2107      	movs	r1, #7
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	47a0      	blx	r4
        return true;
 800945e:	2301      	movs	r3, #1
    }
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	bd90      	pop	{r4, r7, pc}

08009468 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8009468:	b590      	push	{r4, r7, lr}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800947a:	681c      	ldr	r4, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	ee07 2a90 	vmov	s15, r2
 800948c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009490:	eeb0 0a67 	vmov.f32	s0, s15
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
 8009498:	4603      	mov	r3, r0
 800949a:	461a      	mov	r2, r3
 800949c:	2104      	movs	r1, #4
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	47a0      	blx	r4
        return true;
 80094a2:	2301      	movs	r3, #1
    }
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd90      	pop	{r4, r7, pc}

080094ac <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80094be:	681c      	ldr	r4, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	ee07 2a90 	vmov	s15, r2
 80094d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d4:	eeb0 0a67 	vmov.f32	s0, s15
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
 80094dc:	4603      	mov	r3, r0
 80094de:	461a      	mov	r2, r3
 80094e0:	2105      	movs	r1, #5
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	47a0      	blx	r4
        return true;
 80094e6:	2301      	movs	r3, #1
    }
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd90      	pop	{r4, r7, pc}

080094f0 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	2b07      	cmp	r3, #7
 8009500:	d901      	bls.n	8009506 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8009502:	2300      	movs	r3, #0
 8009504:	e00f      	b.n	8009526 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3380      	adds	r3, #128	@ 0x80
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	78fa      	ldrb	r2, [r7, #3]
 800951e:	2115      	movs	r1, #21
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	4798      	blx	r3
        return true;
 8009524:	2301      	movs	r3, #1
    }
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 800952e:	b590      	push	{r4, r7, lr}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8009540:	681c      	ldr	r4, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3
 8009552:	4603      	mov	r3, r0
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	47a0      	blx	r4
    }
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	bd90      	pop	{r4, r7, pc}

08009562 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8009562:	b5b0      	push	{r4, r5, r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	4613      	mov	r3, r2
 800956e:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8009578:	681c      	ldr	r4, [r3, #0]
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d101      	bne.n	8009584 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 8009580:	2501      	movs	r5, #1
 8009582:	e000      	b.n	8009586 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8009584:	2500      	movs	r5, #0
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68b9      	ldr	r1, [r7, #8]
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	4798      	blx	r3
 8009596:	4603      	mov	r3, r0
 8009598:	461a      	mov	r2, r3
 800959a:	4629      	mov	r1, r5
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	47a0      	blx	r4
    }
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bdb0      	pop	{r4, r5, r7, pc}

080095a8 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
    }
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	4798      	blx	r3
    }
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80095e4:	b5b0      	push	{r4, r5, r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	607b      	str	r3, [r7, #4]
 80095ee:	460b      	mov	r3, r1
 80095f0:	72fb      	strb	r3, [r7, #11]
 80095f2:	4613      	mov	r3, r2
 80095f4:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80095fe:	681c      	ldr	r4, [r3, #0]
 8009600:	7abb      	ldrb	r3, [r7, #10]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d101      	bne.n	800960a <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009606:	2501      	movs	r5, #1
 8009608:	e000      	b.n	800960c <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800960a:	2500      	movs	r5, #0
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	ee07 2a90 	vmov	s15, r2
 800961c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009620:	eeb0 0a67 	vmov.f32	s0, s15
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	4798      	blx	r3
 8009628:	4603      	mov	r3, r0
 800962a:	7af9      	ldrb	r1, [r7, #11]
 800962c:	462a      	mov	r2, r5
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	47a0      	blx	r4
    }
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bdb0      	pop	{r4, r5, r7, pc}

0800963a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800963a:	b5b0      	push	{r4, r5, r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800964e:	681c      	ldr	r4, [r3, #0]
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d101      	bne.n	800965a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 8009656:	2501      	movs	r5, #1
 8009658:	e000      	b.n	800965c <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 800965a:	2500      	movs	r5, #0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2106      	movs	r1, #6
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	4798      	blx	r3
 800966c:	4603      	mov	r3, r0
 800966e:	461a      	mov	r2, r3
 8009670:	4629      	mov	r1, r5
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	47a0      	blx	r4
    }
 8009676:	bf00      	nop
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bdb0      	pop	{r4, r5, r7, pc}

0800967e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800967e:	b5b0      	push	{r4, r5, r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	460b      	mov	r3, r1
 8009688:	607a      	str	r2, [r7, #4]
 800968a:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009694:	681c      	ldr	r4, [r3, #0]
 8009696:	7afb      	ldrb	r3, [r7, #11]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 800969c:	2501      	movs	r5, #1
 800969e:	e000      	b.n	80096a2 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 80096a0:	2500      	movs	r5, #0
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	ee07 2a90 	vmov	s15, r2
 80096b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	4798      	blx	r3
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	4629      	mov	r1, r5
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	47a0      	blx	r4
    }
 80096c8:	bf00      	nop
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bdb0      	pop	{r4, r5, r7, pc}

080096d0 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	460b      	mov	r3, r1
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	7afa      	ldrb	r2, [r7, #11]
 80096ea:	2a01      	cmp	r2, #1
 80096ec:	d101      	bne.n	80096f2 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 80096ee:	2101      	movs	r1, #1
 80096f0:	e000      	b.n	80096f4 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 80096f2:	2100      	movs	r1, #0
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	4798      	blx	r3
    }
 80096fa:	bf00      	nop
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
    }
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
    }
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	4798      	blx	r3
    }
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
    }
 8009772:	bf00      	nop
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8009782:	bf00      	nop
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2101      	movs	r1, #1
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	4798      	blx	r3
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	bf0c      	ite	eq
 800979a:	2301      	moveq	r3, #1
 800979c:	2300      	movne	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1ef      	bne.n	8009784 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3380      	adds	r3, #128	@ 0x80
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	78fa      	ldrb	r2, [r7, #3]
 80097d2:	2a01      	cmp	r2, #1
 80097d4:	d101      	bne.n	80097da <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80097d6:	2201      	movs	r2, #1
 80097d8:	e000      	b.n	80097dc <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80097da:	2200      	movs	r2, #0
 80097dc:	4611      	mov	r1, r2
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	4798      	blx	r3
    }
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	460b      	mov	r3, r1
 80097f4:	70fb      	strb	r3, [r7, #3]
 80097f6:	4613      	mov	r3, r2
 80097f8:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	78ba      	ldrb	r2, [r7, #2]
 8009806:	2a01      	cmp	r2, #1
 8009808:	d101      	bne.n	800980e <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800980a:	2201      	movs	r2, #1
 800980c:	e000      	b.n	8009810 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800980e:	2200      	movs	r2, #0
 8009810:	78f9      	ldrb	r1, [r7, #3]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
    }
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	4798      	blx	r3
    }
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	b2d2      	uxtb	r2, r2
 800987a:	4611      	mov	r1, r2
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2100      	movs	r1, #0
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2102      	movs	r1, #2
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2103      	movs	r1, #3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2203      	movs	r2, #3
 80098fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2106      	movs	r1, #6
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2204      	movs	r2, #4
 8009924:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009928:	bf00      	nop
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2107      	movs	r1, #7
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2205      	movs	r2, #5
 800994c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2104      	movs	r1, #4
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2206      	movs	r2, #6
 8009974:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009978:	bf00      	nop
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2105      	movs	r1, #5
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2207      	movs	r2, #7
 800999c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 80099b0:	4b0b      	ldr	r3, [pc, #44]	@ (80099e0 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80099b8:	4b09      	ldr	r3, [pc, #36]	@ (80099e0 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4906      	ldr	r1, [pc, #24]	@ (80099e4 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2208      	movs	r2, #8
 80099d2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099d6:	bf00      	nop
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	2000020d 	.word	0x2000020d
 80099e4:	20000210 	.word	0x20000210

080099e8 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	b2d1      	uxtb	r1, r2
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a10:	bf00      	nop
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2200      	movs	r2, #0
 8009a52:	2102      	movs	r1, #2
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2209      	movs	r2, #9
 8009a5c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a7a:	681c      	ldr	r4, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	4798      	blx	r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2102      	movs	r1, #2
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd90      	pop	{r4, r7, pc}

08009aa6 <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8009aa6:	b590      	push	{r4, r7, lr}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009ab8:	681c      	ldr	r4, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	ee07 2a90 	vmov	s15, r2
 8009aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ace:	eeb0 0a67 	vmov.f32	s0, s15
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	461a      	mov	r2, r3
 8009ada:	2103      	movs	r1, #3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd90      	pop	{r4, r7, pc}

08009af0 <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b02:	681c      	ldr	r4, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	ee07 2a90 	vmov	s15, r2
 8009b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b18:	eeb0 0a67 	vmov.f32	s0, s15
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	4798      	blx	r3
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	2106      	movs	r1, #6
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd90      	pop	{r4, r7, pc}

08009b3a <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8009b3a:	b590      	push	{r4, r7, lr}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b4c:	681c      	ldr	r4, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	ee07 2a90 	vmov	s15, r2
 8009b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b62:	eeb0 0a67 	vmov.f32	s0, s15
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2107      	movs	r1, #7
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009b84:	b590      	push	{r4, r7, lr}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b96:	681c      	ldr	r4, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	ee07 2a90 	vmov	s15, r2
 8009ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bac:	eeb0 0a67 	vmov.f32	s0, s15
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	2104      	movs	r1, #4
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd90      	pop	{r4, r7, pc}

08009bce <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8009bce:	b590      	push	{r4, r7, lr}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009be0:	681c      	ldr	r4, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	ee07 2a90 	vmov	s15, r2
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
 8009bfe:	4603      	mov	r3, r0
 8009c00:	461a      	mov	r2, r3
 8009c02:	2105      	movs	r1, #5
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd90      	pop	{r4, r7, pc}

08009c18 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8009c2a:	681c      	ldr	r4, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	4798      	blx	r3
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd90      	pop	{r4, r7, pc}

08009c54 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009c54:	b5b0      	push	{r4, r5, r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009c6a:	681c      	ldr	r4, [r3, #0]
 8009c6c:	79fb      	ldrb	r3, [r7, #7]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009c72:	2501      	movs	r5, #1
 8009c74:	e000      	b.n	8009c78 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009c76:	2500      	movs	r5, #0
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	4798      	blx	r3
 8009c88:	4603      	mov	r3, r0
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c9a:	bf00      	nop
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bdb0      	pop	{r4, r5, r7, pc}

08009ca2 <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b082      	sub	sp, #8
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009cee:	b5b0      	push	{r4, r5, r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	607b      	str	r3, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	72fb      	strb	r3, [r7, #11]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009d08:	681c      	ldr	r4, [r3, #0]
 8009d0a:	7abb      	ldrb	r3, [r7, #10]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009d10:	2501      	movs	r5, #1
 8009d12:	e000      	b.n	8009d16 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009d14:	2500      	movs	r5, #0
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	ee07 2a90 	vmov	s15, r2
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	4798      	blx	r3
 8009d32:	4603      	mov	r3, r0
 8009d34:	7af9      	ldrb	r1, [r7, #11]
 8009d36:	462a      	mov	r2, r5
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d44:	bf00      	nop
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bdb0      	pop	{r4, r5, r7, pc}

08009d4c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009d4c:	b5b0      	push	{r4, r5, r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009d60:	681c      	ldr	r4, [r3, #0]
 8009d62:	78fb      	ldrb	r3, [r7, #3]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d101      	bne.n	8009d6c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009d68:	2501      	movs	r5, #1
 8009d6a:	e000      	b.n	8009d6e <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009d6c:	2500      	movs	r5, #0
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2106      	movs	r1, #6
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	4798      	blx	r3
 8009d7e:	4603      	mov	r3, r0
 8009d80:	461a      	mov	r2, r3
 8009d82:	4629      	mov	r1, r5
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bdb0      	pop	{r4, r5, r7, pc}

08009d98 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009d98:	b5b0      	push	{r4, r5, r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	460b      	mov	r3, r1
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009dae:	681c      	ldr	r4, [r3, #0]
 8009db0:	7afb      	ldrb	r3, [r7, #11]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d101      	bne.n	8009dba <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009db6:	2501      	movs	r5, #1
 8009db8:	e000      	b.n	8009dbc <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	ee07 2a90 	vmov	s15, r2
 8009dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	4798      	blx	r3
 8009dd8:	4603      	mov	r3, r0
 8009dda:	461a      	mov	r2, r3
 8009ddc:	4629      	mov	r1, r5
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bdb0      	pop	{r4, r5, r7, pc}

08009df2 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	607a      	str	r2, [r7, #4]
 8009dfe:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	7afa      	ldrb	r2, [r7, #11]
 8009e0c:	2a01      	cmp	r2, #1
 8009e0e:	d101      	bne.n	8009e14 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009e10:	2101      	movs	r1, #1
 8009e12:	e000      	b.n	8009e16 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009e14:	2100      	movs	r1, #0
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e24:	bf00      	nop
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	78fa      	ldrb	r2, [r7, #3]
 8009edc:	2a01      	cmp	r2, #1
 8009ede:	d101      	bne.n	8009ee4 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	e000      	b.n	8009ee6 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	78ba      	ldrb	r2, [r7, #2]
 8009f18:	2a01      	cmp	r2, #1
 8009f1a:	d101      	bne.n	8009f20 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	e000      	b.n	8009f22 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009f20:	2200      	movs	r2, #0
 8009f22:	78f9      	ldrb	r1, [r7, #3]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	4798      	blx	r3
 8009f74:	4603      	mov	r3, r0
    }
 8009f76:	4618      	mov	r0, r3
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8009f98:	b5b0      	push	{r4, r5, r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	2b07      	cmp	r3, #7
 8009fac:	f200 80fe 	bhi.w	800a1ac <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 8009fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb8 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 8009fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb6:	bf00      	nop
 8009fb8:	08009fd9 	.word	0x08009fd9
 8009fbc:	0800a005 	.word	0x0800a005
 8009fc0:	0800a033 	.word	0x0800a033
 8009fc4:	0800a077 	.word	0x0800a077
 8009fc8:	0800a0bd 	.word	0x0800a0bd
 8009fcc:	0800a103 	.word	0x0800a103
 8009fd0:	0800a149 	.word	0x0800a149
 8009fd4:	0800a18f 	.word	0x0800a18f
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009fe0:	681c      	ldr	r4, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6a12      	ldr	r2, [r2, #32]
 8009ff0:	7b92      	ldrb	r2, [r2, #14]
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	4798      	blx	r3
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	47a0      	blx	r4
 800a000:	4603      	mov	r3, r0
 800a002:	e0d4      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800a00c:	681c      	ldr	r4, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6a12      	ldr	r2, [r2, #32]
 800a01c:	3228      	adds	r2, #40	@ 0x28
 800a01e:	7b92      	ldrb	r2, [r2, #14]
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
 800a026:	4603      	mov	r3, r0
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	47a0      	blx	r4
 800a02e:	4603      	mov	r3, r0
 800a030:	e0bd      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a03a:	681c      	ldr	r4, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800a044:	681d      	ldr	r5, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6a12      	ldr	r2, [r2, #32]
 800a054:	323c      	adds	r2, #60	@ 0x3c
 800a056:	7b92      	ldrb	r2, [r2, #14]
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	4798      	blx	r3
 800a05e:	4603      	mov	r3, r0
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	47a8      	blx	r5
 800a066:	eef0 7a40 	vmov.f32	s15, s0
 800a06a:	eeb0 0a67 	vmov.f32	s0, s15
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	47a0      	blx	r4
 800a072:	4603      	mov	r3, r0
 800a074:	e09b      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a07e:	681c      	ldr	r4, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a088:	681d      	ldr	r5, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	6a12      	ldr	r2, [r2, #32]
 800a098:	3278      	adds	r2, #120	@ 0x78
 800a09a:	7b92      	ldrb	r2, [r2, #14]
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	4798      	blx	r3
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	47a8      	blx	r5
 800a0ac:	eef0 7a40 	vmov.f32	s15, s0
 800a0b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	47a0      	blx	r4
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	e078      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0c4:	681c      	ldr	r4, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a0ce:	681d      	ldr	r5, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6a12      	ldr	r2, [r2, #32]
 800a0de:	328c      	adds	r2, #140	@ 0x8c
 800a0e0:	7b92      	ldrb	r2, [r2, #14]
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	4798      	blx	r3
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	47a8      	blx	r5
 800a0f2:	eef0 7a40 	vmov.f32	s15, s0
 800a0f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	47a0      	blx	r4
 800a0fe:	4603      	mov	r3, r0
 800a100:	e055      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a10a:	681c      	ldr	r4, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a114:	681d      	ldr	r5, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	6a12      	ldr	r2, [r2, #32]
 800a124:	3250      	adds	r2, #80	@ 0x50
 800a126:	7b92      	ldrb	r2, [r2, #14]
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	4798      	blx	r3
 800a12e:	4603      	mov	r3, r0
 800a130:	b29b      	uxth	r3, r3
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	47a8      	blx	r5
 800a138:	eef0 7a40 	vmov.f32	s15, s0
 800a13c:	eeb0 0a67 	vmov.f32	s0, s15
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	47a0      	blx	r4
 800a144:	4603      	mov	r3, r0
 800a146:	e032      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a150:	681c      	ldr	r4, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a15a:	681d      	ldr	r5, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	6a12      	ldr	r2, [r2, #32]
 800a16a:	3264      	adds	r2, #100	@ 0x64
 800a16c:	7b92      	ldrb	r2, [r2, #14]
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
 800a174:	4603      	mov	r3, r0
 800a176:	b29b      	uxth	r3, r3
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	47a8      	blx	r5
 800a17e:	eef0 7a40 	vmov.f32	s15, s0
 800a182:	eeb0 0a67 	vmov.f32	s0, s15
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	47a0      	blx	r4
 800a18a:	4603      	mov	r3, r0
 800a18c:	e00f      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2104      	movs	r1, #4
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	4798      	blx	r3
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e002      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	e000      	b.n	800a1ae <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a1ac:	2300      	movs	r3, #0
    }
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1b6:	bf00      	nop

0800a1b8 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6898      	ldr	r0, [r3, #8]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	899b      	ldrh	r3, [r3, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	f003 ff2c 	bl	800e028 <HAL_GPIO_WritePin>
    }
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1e8:	d303      	bcc.n	800a1f2 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800a1f0:	e000      	b.n	800a1f4 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a1f2:	683b      	ldr	r3, [r7, #0]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	db05      	blt.n	800a21c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a216:	da01      	bge.n	800a21c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	e00c      	b.n	800a236 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800a222:	db06      	blt.n	800a232 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	da03      	bge.n	800a232 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800a230:	e001      	b.n	800a236 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a232:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800a236:	4618      	mov	r0, r3
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
	...

0800a244 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	ee07 3a90 	vmov	s15, r3
 800a254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a258:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a270 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a25c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a260:	eeb0 0a67 	vmov.f32	s0, s15
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	3c74242a 	.word	0x3c74242a

0800a274 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a280:	edd7 7a00 	vldr	s15, [r7]
 800a284:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a2b8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a290:	d80a      	bhi.n	800a2a8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a292:	ed97 7a00 	vldr	s14, [r7]
 800a296:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a2bc <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a29a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a29e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2a2:	ee17 3a90 	vmov	r3, s15
 800a2a6:	e000      	b.n	800a2aa <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	4674241b 	.word	0x4674241b
 800a2bc:	3c74242a 	.word	0x3c74242a

0800a2c0 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a2cc:	887b      	ldrh	r3, [r7, #2]
 800a2ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2d2:	d209      	bcs.n	800a2e8 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a2d4:	887b      	ldrh	r3, [r7, #2]
 800a2d6:	ee07 3a90 	vmov	s15, r3
 800a2da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2de:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a2fc <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a2e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2e6:	e001      	b.n	800a2ec <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a2e8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a300 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a2ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	4168d4fe 	.word	0x4168d4fe
 800a300:	00000000 	.word	0x00000000

0800a304 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a310:	edd7 7a00 	vldr	s15, [r7]
 800a314:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a348 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a320:	d80b      	bhi.n	800a33a <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a322:	ed97 7a00 	vldr	s14, [r7]
 800a326:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a34c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a32a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a332:	ee17 3a90 	vmov	r3, s15
 800a336:	b29b      	uxth	r3, r3
 800a338:	e000      	b.n	800a33c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	4768c671 	.word	0x4768c671
 800a34c:	4168d4fe 	.word	0x4168d4fe

0800a350 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a35c:	887b      	ldrh	r3, [r7, #2]
 800a35e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a362:	d209      	bcs.n	800a378 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a364:	887b      	ldrh	r3, [r7, #2]
 800a366:	ee07 3a90 	vmov	s15, r3
 800a36a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a36e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a38c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a372:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a376:	e001      	b.n	800a37c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a378:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a390 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a37c:	eeb0 0a67 	vmov.f32	s0, s15
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	4168d4fe 	.word	0x4168d4fe
 800a390:	00000000 	.word	0x00000000

0800a394 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a3a0:	edd7 7a00 	vldr	s15, [r7]
 800a3a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a3d8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a3a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b0:	d80b      	bhi.n	800a3ca <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a3b2:	ed97 7a00 	vldr	s14, [r7]
 800a3b6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a3dc <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a3ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3c2:	ee17 3a90 	vmov	r3, s15
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	e000      	b.n	800a3cc <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	4768c671 	.word	0x4768c671
 800a3dc:	4168d4fe 	.word	0x4168d4fe

0800a3e0 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a3ec:	887b      	ldrh	r3, [r7, #2]
 800a3ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3f2:	d209      	bcs.n	800a408 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a3f4:	887b      	ldrh	r3, [r7, #2]
 800a3f6:	ee07 3a90 	vmov	s15, r3
 800a3fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3fe:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a41c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a402:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a406:	e001      	b.n	800a40c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a408:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a420 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a40c:	eeb0 0a67 	vmov.f32	s0, s15
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	4174240b 	.word	0x4174240b
 800a420:	00000000 	.word	0x00000000

0800a424 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a430:	edd7 7a00 	vldr	s15, [r7]
 800a434:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a468 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a440:	d80b      	bhi.n	800a45a <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a442:	ed97 7a00 	vldr	s14, [r7]
 800a446:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a46c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a44a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a44e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a452:	ee17 3a90 	vmov	r3, s15
 800a456:	b29b      	uxth	r3, r3
 800a458:	e000      	b.n	800a45c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	4673e702 	.word	0x4673e702
 800a46c:	4174240b 	.word	0x4174240b

0800a470 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a47c:	887b      	ldrh	r3, [r7, #2]
 800a47e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a482:	d209      	bcs.n	800a498 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a484:	887b      	ldrh	r3, [r7, #2]
 800a486:	ee07 3a90 	vmov	s15, r3
 800a48a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a48e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a4ac <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a492:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a496:	e001      	b.n	800a49c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a498:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a4b0 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a49c:	eeb0 0a67 	vmov.f32	s0, s15
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	3e742401 	.word	0x3e742401
 800a4b0:	00000000 	.word	0x00000000

0800a4b4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a4c0:	edd7 7a00 	vldr	s15, [r7]
 800a4c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a4f8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a4c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d0:	d80b      	bhi.n	800a4ea <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a4d2:	ed97 7a00 	vldr	s14, [r7]
 800a4d6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a4fc <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a4da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e2:	ee17 3a90 	vmov	r3, s15
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	e000      	b.n	800a4ec <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	447414bf 	.word	0x447414bf
 800a4fc:	3e742401 	.word	0x3e742401

0800a500 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a50c:	887b      	ldrh	r3, [r7, #2]
 800a50e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a512:	d219      	bcs.n	800a548 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a514:	887b      	ldrh	r3, [r7, #2]
 800a516:	4618      	mov	r0, r3
 800a518:	f7f6 f834 	bl	8000584 <__aeabi_i2d>
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	4b0e      	ldr	r3, [pc, #56]	@ (800a55c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a522:	f7f5 fee3 	bl	80002ec <__adddf3>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4610      	mov	r0, r2
 800a52c:	4619      	mov	r1, r3
 800a52e:	f04f 0200 	mov.w	r2, #0
 800a532:	4b0b      	ldr	r3, [pc, #44]	@ (800a560 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a534:	f7f6 f890 	bl	8000658 <__aeabi_dmul>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4610      	mov	r0, r2
 800a53e:	4619      	mov	r1, r3
 800a540:	f7f6 fb62 	bl	8000c08 <__aeabi_d2f>
 800a544:	4603      	mov	r3, r0
 800a546:	e001      	b.n	800a54c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a548:	f04f 0300 	mov.w	r3, #0
}
 800a54c:	ee07 3a90 	vmov	s15, r3
 800a550:	eeb0 0a67 	vmov.f32	s0, s15
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	3fe00000 	.word	0x3fe00000
 800a560:	402e8000 	.word	0x402e8000

0800a564 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a570:	edd7 7a00 	vldr	s15, [r7]
 800a574:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a5b0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a580:	d80f      	bhi.n	800a5a2 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a582:	ed97 7a00 	vldr	s14, [r7]
 800a586:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800a5b4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a58a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a58e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a592:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a59a:	ee17 3a90 	vmov	r3, s15
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	e000      	b.n	800a5a4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	4673e180 	.word	0x4673e180
 800a5b4:	41740000 	.word	0x41740000

0800a5b8 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a5c4:	887b      	ldrh	r3, [r7, #2]
 800a5c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5ca:	d209      	bcs.n	800a5e0 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a5cc:	887b      	ldrh	r3, [r7, #2]
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5d6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a5f4 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a5da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a5de:	e001      	b.n	800a5e4 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a5e0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a5f8 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a5e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	3d7423f4 	.word	0x3d7423f4
 800a5f8:	00000000 	.word	0x00000000

0800a5fc <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a608:	edd7 7a00 	vldr	s15, [r7]
 800a60c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a640 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a610:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a618:	d80b      	bhi.n	800a632 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a61a:	ed97 7a00 	vldr	s14, [r7]
 800a61e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a644 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a62a:	ee17 3a90 	vmov	r3, s15
 800a62e:	b29b      	uxth	r3, r3
 800a630:	e000      	b.n	800a634 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	44742023 	.word	0x44742023
 800a644:	3d7423f4 	.word	0x3d7423f4

0800a648 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	460b      	mov	r3, r1
 800a652:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a654:	78fb      	ldrb	r3, [r7, #3]
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a65e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a674 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a662:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a666:	eeb0 0a67 	vmov.f32	s0, s15
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	3783956e 	.word	0x3783956e

0800a678 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a684:	edd7 7a02 	vldr	s15, [r7, #8]
 800a688:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a6c0 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a68c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a694:	d80c      	bhi.n	800a6b0 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a696:	ed97 7a02 	vldr	s14, [r7, #8]
 800a69a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a6c4 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a69e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a6aa:	793b      	ldrb	r3, [r7, #4]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	e000      	b.n	800a6b2 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	3b8311d9 	.word	0x3b8311d9
 800a6c4:	3783956e 	.word	0x3783956e

0800a6c8 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6de:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a6f4 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a6e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a6e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	3783956e 	.word	0x3783956e

0800a6f8 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a704:	edd7 7a02 	vldr	s15, [r7, #8]
 800a708:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a740 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a70c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a714:	d80c      	bhi.n	800a730 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a716:	ed97 7a02 	vldr	s14, [r7, #8]
 800a71a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a744 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a71e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a726:	edc7 7a01 	vstr	s15, [r7, #4]
 800a72a:	793b      	ldrb	r3, [r7, #4]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	e000      	b.n	800a732 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	3b8311d9 	.word	0x3b8311d9
 800a744:	3783956e 	.word	0x3783956e

0800a748 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a75e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a774 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a762:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a766:	eeb0 0a67 	vmov.f32	s0, s15
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	3783956e 	.word	0x3783956e

0800a778 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a784:	edd7 7a02 	vldr	s15, [r7, #8]
 800a788:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a7c0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a78c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a794:	d80c      	bhi.n	800a7b0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a796:	ed97 7a02 	vldr	s14, [r7, #8]
 800a79a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a7c4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a79e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7a6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a7aa:	793b      	ldrb	r3, [r7, #4]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	e000      	b.n	800a7b2 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	3b8311d9 	.word	0x3b8311d9
 800a7c4:	3783956e 	.word	0x3783956e

0800a7c8 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a7d4:	78fb      	ldrb	r3, [r7, #3]
 800a7d6:	2b0f      	cmp	r3, #15
 800a7d8:	d80a      	bhi.n	800a7f0 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7e6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a804 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a7ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7ee:	e001      	b.n	800a7f4 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a7f0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a808 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a7f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	43bb8000 	.word	0x43bb8000
 800a808:	00000000 	.word	0x00000000

0800a80c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a818:	edd7 7a02 	vldr	s15, [r7, #8]
 800a81c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a8a8 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a820:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a828:	d836      	bhi.n	800a898 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a82a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a82e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a8ac <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a836:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a83a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a83e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a842:	edc7 7a01 	vstr	s15, [r7, #4]
 800a846:	793b      	ldrb	r3, [r7, #4]
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a852:	ed97 7a05 	vldr	s14, [r7, #20]
 800a856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a85a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a85e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a862:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86e:	d50a      	bpl.n	800a886 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a870:	edd7 7a05 	vldr	s15, [r7, #20]
 800a874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a878:	edc7 7a01 	vstr	s15, [r7, #4]
 800a87c:	793b      	ldrb	r3, [r7, #4]
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	3b01      	subs	r3, #1
 800a882:	b2db      	uxtb	r3, r3
 800a884:	e009      	b.n	800a89a <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a886:	edd7 7a05 	vldr	s15, [r7, #20]
 800a88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a88e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a892:	793b      	ldrb	r3, [r7, #4]
 800a894:	b2db      	uxtb	r3, r3
 800a896:	e000      	b.n	800a89a <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	45bb8000 	.word	0x45bb8000
 800a8ac:	43bb8000 	.word	0x43bb8000

0800a8b0 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a8bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	db0a      	blt.n	800a8da <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	ee07 3a90 	vmov	s15, r3
 800a8cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8d0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a8ec <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a8d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8d8:	e001      	b.n	800a8de <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a8da:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a8f0 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a8de:	eeb0 0a67 	vmov.f32	s0, s15
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	41fa0000 	.word	0x41fa0000
 800a8f0:	00000000 	.word	0x00000000

0800a8f4 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a900:	edd7 7a02 	vldr	s15, [r7, #8]
 800a904:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a990 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a910:	d836      	bhi.n	800a980 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a912:	ed97 7a02 	vldr	s14, [r7, #8]
 800a916:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a994 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a91a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a91e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a922:	edd7 7a05 	vldr	s15, [r7, #20]
 800a926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a92a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a92e:	793b      	ldrb	r3, [r7, #4]
 800a930:	b2db      	uxtb	r3, r3
 800a932:	ee07 3a90 	vmov	s15, r3
 800a936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a93a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a93e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a942:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a946:	edd7 7a04 	vldr	s15, [r7, #16]
 800a94a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a94e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a956:	d50a      	bpl.n	800a96e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a958:	edd7 7a05 	vldr	s15, [r7, #20]
 800a95c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a960:	edc7 7a01 	vstr	s15, [r7, #4]
 800a964:	793b      	ldrb	r3, [r7, #4]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	3b01      	subs	r3, #1
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	e009      	b.n	800a982 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a96e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a976:	edc7 7a01 	vstr	s15, [r7, #4]
 800a97a:	793b      	ldrb	r3, [r7, #4]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	e000      	b.n	800a982 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	457a0000 	.word	0x457a0000
 800a994:	41fa0000 	.word	0x41fa0000

0800a998 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3394      	adds	r3, #148	@ 0x94
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	4798      	blx	r3
  get_status();
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	330c      	adds	r3, #12
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	697a      	ldr	r2, [r7, #20]
 800a9ca:	edd2 7a05 	vldr	s15, [r2, #20]
 800a9ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	4798      	blx	r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	461a      	mov	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	edd2 7a06 	vldr	s15, [r2, #24]
 800a9f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	4798      	blx	r3
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	edd2 7a07 	vldr	s15, [r2, #28]
 800aa12:	eeb0 0a67 	vmov.f32	s0, s15
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	4798      	blx	r3
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	edd2 7a08 	vldr	s15, [r2, #32]
 800aa34:	eeb0 0a67 	vmov.f32	s0, s15
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	4798      	blx	r3
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	461a      	mov	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800aa56:	eeb0 0a67 	vmov.f32	s0, s15
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	4798      	blx	r3
 800aa5e:	4603      	mov	r3, r0
 800aa60:	461a      	mov	r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800aa6e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ad40 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa72:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	ed93 7a00 	vldr	s14, [r3]
 800aa7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa84:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa88:	793b      	ldrb	r3, [r7, #4]
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800aa98:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800ad40 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	ed93 7a00 	vldr	s14, [r3]
 800aaa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaae:	edc7 7a01 	vstr	s15, [r7, #4]
 800aab2:	793b      	ldrb	r3, [r7, #4]
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800aac2:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800ad40 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aac6:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	ed93 7a00 	vldr	s14, [r3]
 800aad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad8:	edc7 7a01 	vstr	s15, [r7, #4]
 800aadc:	793b      	ldrb	r3, [r7, #4]
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800aaec:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800ad40 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aaf0:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	ed93 7a00 	vldr	s14, [r3]
 800aafa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab02:	edc7 7a01 	vstr	s15, [r7, #4]
 800ab06:	793b      	ldrb	r3, [r7, #4]
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800ab20:	eeb0 0a67 	vmov.f32	s0, s15
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	4798      	blx	r3
 800ab28:	4603      	mov	r3, r0
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800ab42:	eeb0 0a67 	vmov.f32	s0, s15
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	4798      	blx	r3
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800ab64:	eeb0 0a67 	vmov.f32	s0, s15
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	4798      	blx	r3
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	461a      	mov	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800ab86:	eeb0 0a67 	vmov.f32	s0, s15
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	4798      	blx	r3
 800ab8e:	4603      	mov	r3, r0
 800ab90:	461a      	mov	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800abb4:	eeb0 0a67 	vmov.f32	s0, s15
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	4798      	blx	r3
 800abbc:	4603      	mov	r3, r0
 800abbe:	461a      	mov	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800abd6:	eeb0 0a67 	vmov.f32	s0, s15
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	4798      	blx	r3
 800abde:	4603      	mov	r3, r0
 800abe0:	461a      	mov	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800ac1c:	2104      	movs	r1, #4
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800ac32:	2105      	movs	r1, #5
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800ac48:	2106      	movs	r1, #6
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800ac5e:	2107      	movs	r1, #7
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800ac74:	2108      	movs	r1, #8
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800ac8a:	2109      	movs	r1, #9
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800aca0:	210a      	movs	r1, #10
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800acb6:	210b      	movs	r1, #11
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800accc:	210c      	movs	r1, #12
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800ace2:	210d      	movs	r1, #13
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800acf8:	210e      	movs	r1, #14
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800ad0e:	210f      	movs	r1, #15
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800ad24:	2110      	movs	r1, #16
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800ad3a:	2111      	movs	r1, #17
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	e001      	b.n	800ad44 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800ad40:	43800000 	.word	0x43800000
 800ad44:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800ad56:	2113      	movs	r1, #19
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800ad6c:	2114      	movs	r1, #20
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800ad82:	2116      	movs	r1, #22
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800ad98:	2117      	movs	r1, #23
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3354      	adds	r3, #84	@ 0x54
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800adac:	4611      	mov	r1, r2
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	4798      	blx	r3
 800adb2:	4603      	mov	r3, r0
 800adb4:	f083 0301 	eor.w	r3, r3, #1
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e000      	b.n	800adc4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800adcc:	b590      	push	{r4, r7, lr}
 800adce:	b087      	sub	sp, #28
 800add0:	af02      	add	r7, sp, #8
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	460b      	mov	r3, r1
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ade2:	681c      	ldr	r4, [r3, #0]
 800ade4:	7afa      	ldrb	r2, [r7, #11]
 800ade6:	2300      	movs	r3, #0
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	4613      	mov	r3, r2
 800adf0:	2201      	movs	r2, #1
 800adf2:	490c      	ldr	r1, [pc, #48]	@ (800ae24 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a09      	ldr	r2, [pc, #36]	@ (800ae28 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ae04:	4907      	ldr	r1, [pc, #28]	@ (800ae24 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a05      	ldr	r2, [pc, #20]	@ (800ae2c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800ae16:	4904      	ldr	r1, [pc, #16]	@ (800ae28 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	4798      	blx	r3
}
 800ae1c:	bf00      	nop
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd90      	pop	{r4, r7, pc}
 800ae24:	20000210 	.word	0x20000210
 800ae28:	20000230 	.word	0x20000230
 800ae2c:	20000238 	.word	0x20000238

0800ae30 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800ae30:	b590      	push	{r4, r7, lr}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae44:	681c      	ldr	r4, [r3, #0]
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	9201      	str	r2, [sp, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	9200      	str	r2, [sp, #0]
 800ae50:	2202      	movs	r2, #2
 800ae52:	4917      	ldr	r1, [pc, #92]	@ (800aeb0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a14      	ldr	r2, [pc, #80]	@ (800aeb4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae64:	4912      	ldr	r1, [pc, #72]	@ (800aeb0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a10      	ldr	r2, [pc, #64]	@ (800aeb8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae76:	490f      	ldr	r1, [pc, #60]	@ (800aeb4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a19      	ldr	r1, [r3, #32]
 800ae80:	78fa      	ldrb	r2, [r7, #3]
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	440b      	add	r3, r1
 800ae8c:	7b9b      	ldrb	r3, [r3, #14]
 800ae8e:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	7bfa      	ldrb	r2, [r7, #15]
 800ae9c:	4906      	ldr	r1, [pc, #24]	@ (800aeb8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
 800aea2:	4603      	mov	r3, r0
 800aea4:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800aea6:	68bb      	ldr	r3, [r7, #8]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd90      	pop	{r4, r7, pc}
 800aeb0:	20000210 	.word	0x20000210
 800aeb4:	20000230 	.word	0x20000230
 800aeb8:	20000238 	.word	0x20000238

0800aebc <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af02      	add	r7, sp, #8
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	460b      	mov	r3, r1
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aed2:	681c      	ldr	r4, [r3, #0]
 800aed4:	7afa      	ldrb	r2, [r7, #11]
 800aed6:	2300      	movs	r3, #0
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	4613      	mov	r3, r2
 800aee0:	2203      	movs	r2, #3
 800aee2:	490c      	ldr	r1, [pc, #48]	@ (800af14 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a09      	ldr	r2, [pc, #36]	@ (800af18 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800aef4:	4907      	ldr	r1, [pc, #28]	@ (800af14 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a05      	ldr	r2, [pc, #20]	@ (800af1c <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800af06:	4904      	ldr	r1, [pc, #16]	@ (800af18 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	4798      	blx	r3
}
 800af0c:	bf00      	nop
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	bd90      	pop	{r4, r7, pc}
 800af14:	20000210 	.word	0x20000210
 800af18:	20000230 	.word	0x20000230
 800af1c:	20000238 	.word	0x20000238

0800af20 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800af20:	b590      	push	{r4, r7, lr}
 800af22:	b085      	sub	sp, #20
 800af24:	af02      	add	r7, sp, #8
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af34:	681c      	ldr	r4, [r3, #0]
 800af36:	78fb      	ldrb	r3, [r7, #3]
 800af38:	2200      	movs	r2, #0
 800af3a:	9201      	str	r2, [sp, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	9200      	str	r2, [sp, #0]
 800af40:	2204      	movs	r2, #4
 800af42:	490c      	ldr	r1, [pc, #48]	@ (800af74 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a09      	ldr	r2, [pc, #36]	@ (800af78 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800af54:	4907      	ldr	r1, [pc, #28]	@ (800af74 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a05      	ldr	r2, [pc, #20]	@ (800af7c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800af66:	4904      	ldr	r1, [pc, #16]	@ (800af78 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	4798      	blx	r3
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	bd90      	pop	{r4, r7, pc}
 800af74:	20000210 	.word	0x20000210
 800af78:	20000230 	.word	0x20000230
 800af7c:	20000238 	.word	0x20000238

0800af80 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800af80:	b590      	push	{r4, r7, lr}
 800af82:	b087      	sub	sp, #28
 800af84:	af02      	add	r7, sp, #8
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	460b      	mov	r3, r1
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af96:	681c      	ldr	r4, [r3, #0]
 800af98:	7afa      	ldrb	r2, [r7, #11]
 800af9a:	2300      	movs	r3, #0
 800af9c:	9301      	str	r3, [sp, #4]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	4613      	mov	r3, r2
 800afa4:	2205      	movs	r2, #5
 800afa6:	490c      	ldr	r1, [pc, #48]	@ (800afd8 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a09      	ldr	r2, [pc, #36]	@ (800afdc <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800afb8:	4907      	ldr	r1, [pc, #28]	@ (800afd8 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a05      	ldr	r2, [pc, #20]	@ (800afe0 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800afca:	4904      	ldr	r1, [pc, #16]	@ (800afdc <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	4798      	blx	r3
}
 800afd0:	bf00      	nop
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd90      	pop	{r4, r7, pc}
 800afd8:	20000210 	.word	0x20000210
 800afdc:	20000230 	.word	0x20000230
 800afe0:	20000238 	.word	0x20000238

0800afe4 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800afe4:	b590      	push	{r4, r7, lr}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af02      	add	r7, sp, #8
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aff4:	d21f      	bcs.n	800b036 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800affe:	681c      	ldr	r4, [r3, #0]
 800b000:	2300      	movs	r3, #0
 800b002:	9301      	str	r3, [sp, #4]
 800b004:	2300      	movs	r3, #0
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2206      	movs	r2, #6
 800b00c:	490c      	ldr	r1, [pc, #48]	@ (800b040 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a09      	ldr	r2, [pc, #36]	@ (800b044 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b01e:	4908      	ldr	r1, [pc, #32]	@ (800b040 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a06      	ldr	r2, [pc, #24]	@ (800b048 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800b030:	4904      	ldr	r1, [pc, #16]	@ (800b044 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd90      	pop	{r4, r7, pc}
 800b03e:	bf00      	nop
 800b040:	20000210 	.word	0x20000210
 800b044:	20000230 	.word	0x20000230
 800b048:	20000238 	.word	0x20000238

0800b04c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b04c:	b590      	push	{r4, r7, lr}
 800b04e:	b087      	sub	sp, #28
 800b050:	af02      	add	r7, sp, #8
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	460b      	mov	r3, r1
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b060:	d220      	bcs.n	800b0a4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b06a:	681c      	ldr	r4, [r3, #0]
 800b06c:	7afa      	ldrb	r2, [r7, #11]
 800b06e:	2300      	movs	r3, #0
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	4613      	mov	r3, r2
 800b078:	2207      	movs	r2, #7
 800b07a:	490c      	ldr	r1, [pc, #48]	@ (800b0ac <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a09      	ldr	r2, [pc, #36]	@ (800b0b0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b08c:	4907      	ldr	r1, [pc, #28]	@ (800b0ac <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a05      	ldr	r2, [pc, #20]	@ (800b0b4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800b09e:	4904      	ldr	r1, [pc, #16]	@ (800b0b0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	4798      	blx	r3
}
 800b0a4:	bf00      	nop
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd90      	pop	{r4, r7, pc}
 800b0ac:	20000210 	.word	0x20000210
 800b0b0:	20000230 	.word	0x20000230
 800b0b4:	20000238 	.word	0x20000238

0800b0b8 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b0b8:	b590      	push	{r4, r7, lr}
 800b0ba:	b087      	sub	sp, #28
 800b0bc:	af02      	add	r7, sp, #8
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	607b      	str	r3, [r7, #4]
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	72fb      	strb	r3, [r7, #11]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b0d2:	681c      	ldr	r4, [r3, #0]
 800b0d4:	7af9      	ldrb	r1, [r7, #11]
 800b0d6:	7abb      	ldrb	r3, [r7, #10]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	9201      	str	r2, [sp, #4]
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	490c      	ldr	r1, [pc, #48]	@ (800b114 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a09      	ldr	r2, [pc, #36]	@ (800b118 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b0f4:	4907      	ldr	r1, [pc, #28]	@ (800b114 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a05      	ldr	r2, [pc, #20]	@ (800b11c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800b106:	4904      	ldr	r1, [pc, #16]	@ (800b118 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	4798      	blx	r3
}
 800b10c:	bf00      	nop
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	bd90      	pop	{r4, r7, pc}
 800b114:	20000210 	.word	0x20000210
 800b118:	20000230 	.word	0x20000230
 800b11c:	20000238 	.word	0x20000238

0800b120 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b120:	b590      	push	{r4, r7, lr}
 800b122:	b085      	sub	sp, #20
 800b124:	af02      	add	r7, sp, #8
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
 800b12c:	4613      	mov	r3, r2
 800b12e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b138:	681c      	ldr	r4, [r3, #0]
 800b13a:	78fa      	ldrb	r2, [r7, #3]
 800b13c:	78bb      	ldrb	r3, [r7, #2]
 800b13e:	2100      	movs	r1, #0
 800b140:	9101      	str	r1, [sp, #4]
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	4613      	mov	r3, r2
 800b146:	2209      	movs	r2, #9
 800b148:	490c      	ldr	r1, [pc, #48]	@ (800b17c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a09      	ldr	r2, [pc, #36]	@ (800b180 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b15a:	4908      	ldr	r1, [pc, #32]	@ (800b17c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a06      	ldr	r2, [pc, #24]	@ (800b184 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b16c:	4904      	ldr	r1, [pc, #16]	@ (800b180 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	4798      	blx	r3
}
 800b172:	bf00      	nop
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	bd90      	pop	{r4, r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20000210 	.word	0x20000210
 800b180:	20000230 	.word	0x20000230
 800b184:	20000238 	.word	0x20000238

0800b188 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b188:	b590      	push	{r4, r7, lr}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b198:	681c      	ldr	r4, [r3, #0]
 800b19a:	2300      	movs	r3, #0
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	220a      	movs	r2, #10
 800b1a6:	490c      	ldr	r1, [pc, #48]	@ (800b1d8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a09      	ldr	r2, [pc, #36]	@ (800b1dc <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b1b8:	4907      	ldr	r1, [pc, #28]	@ (800b1d8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a05      	ldr	r2, [pc, #20]	@ (800b1e0 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b1ca:	4904      	ldr	r1, [pc, #16]	@ (800b1dc <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	4798      	blx	r3
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd90      	pop	{r4, r7, pc}
 800b1d8:	20000210 	.word	0x20000210
 800b1dc:	20000230 	.word	0x20000230
 800b1e0:	20000238 	.word	0x20000238

0800b1e4 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b1e4:	b590      	push	{r4, r7, lr}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af02      	add	r7, sp, #8
 800b1ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1f4:	681c      	ldr	r4, [r3, #0]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	2300      	movs	r3, #0
 800b200:	220b      	movs	r2, #11
 800b202:	490c      	ldr	r1, [pc, #48]	@ (800b234 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a09      	ldr	r2, [pc, #36]	@ (800b238 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b214:	4907      	ldr	r1, [pc, #28]	@ (800b234 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a05      	ldr	r2, [pc, #20]	@ (800b23c <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b226:	4904      	ldr	r1, [pc, #16]	@ (800b238 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	4798      	blx	r3
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	bd90      	pop	{r4, r7, pc}
 800b234:	20000210 	.word	0x20000210
 800b238:	20000230 	.word	0x20000230
 800b23c:	20000238 	.word	0x20000238

0800b240 <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b085      	sub	sp, #20
 800b244:	af02      	add	r7, sp, #8
 800b246:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b250:	681c      	ldr	r4, [r3, #0]
 800b252:	2300      	movs	r3, #0
 800b254:	9301      	str	r3, [sp, #4]
 800b256:	2300      	movs	r3, #0
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	2300      	movs	r3, #0
 800b25c:	220c      	movs	r2, #12
 800b25e:	490c      	ldr	r1, [pc, #48]	@ (800b290 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a09      	ldr	r2, [pc, #36]	@ (800b294 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b270:	4907      	ldr	r1, [pc, #28]	@ (800b290 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a05      	ldr	r2, [pc, #20]	@ (800b298 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b282:	4904      	ldr	r1, [pc, #16]	@ (800b294 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	4798      	blx	r3
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd90      	pop	{r4, r7, pc}
 800b290:	20000210 	.word	0x20000210
 800b294:	20000230 	.word	0x20000230
 800b298:	20000238 	.word	0x20000238

0800b29c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b29c:	b590      	push	{r4, r7, lr}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2ac:	681c      	ldr	r4, [r3, #0]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	220d      	movs	r2, #13
 800b2ba:	490c      	ldr	r1, [pc, #48]	@ (800b2ec <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a09      	ldr	r2, [pc, #36]	@ (800b2f0 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b2cc:	4907      	ldr	r1, [pc, #28]	@ (800b2ec <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a05      	ldr	r2, [pc, #20]	@ (800b2f4 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b2de:	4904      	ldr	r1, [pc, #16]	@ (800b2f0 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	4798      	blx	r3
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd90      	pop	{r4, r7, pc}
 800b2ec:	20000210 	.word	0x20000210
 800b2f0:	20000230 	.word	0x20000230
 800b2f4:	20000238 	.word	0x20000238

0800b2f8 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af02      	add	r7, sp, #8
 800b2fe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b308:	681c      	ldr	r4, [r3, #0]
 800b30a:	2300      	movs	r3, #0
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	2300      	movs	r3, #0
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	2300      	movs	r3, #0
 800b314:	220e      	movs	r2, #14
 800b316:	490c      	ldr	r1, [pc, #48]	@ (800b348 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a09      	ldr	r2, [pc, #36]	@ (800b34c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b328:	4907      	ldr	r1, [pc, #28]	@ (800b348 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a05      	ldr	r2, [pc, #20]	@ (800b350 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b33a:	4904      	ldr	r1, [pc, #16]	@ (800b34c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	4798      	blx	r3
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	bd90      	pop	{r4, r7, pc}
 800b348:	20000210 	.word	0x20000210
 800b34c:	20000230 	.word	0x20000230
 800b350:	20000238 	.word	0x20000238

0800b354 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b085      	sub	sp, #20
 800b358:	af02      	add	r7, sp, #8
 800b35a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b364:	681c      	ldr	r4, [r3, #0]
 800b366:	2300      	movs	r3, #0
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	2300      	movs	r3, #0
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	2300      	movs	r3, #0
 800b370:	220f      	movs	r2, #15
 800b372:	490c      	ldr	r1, [pc, #48]	@ (800b3a4 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a09      	ldr	r2, [pc, #36]	@ (800b3a8 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b384:	4907      	ldr	r1, [pc, #28]	@ (800b3a4 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a05      	ldr	r2, [pc, #20]	@ (800b3ac <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b396:	4904      	ldr	r1, [pc, #16]	@ (800b3a8 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	4798      	blx	r3
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd90      	pop	{r4, r7, pc}
 800b3a4:	20000210 	.word	0x20000210
 800b3a8:	20000230 	.word	0x20000230
 800b3ac:	20000238 	.word	0x20000238

0800b3b0 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b3b0:	b590      	push	{r4, r7, lr}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af02      	add	r7, sp, #8
 800b3b6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3c0:	681c      	ldr	r4, [r3, #0]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	2210      	movs	r2, #16
 800b3ce:	490c      	ldr	r1, [pc, #48]	@ (800b400 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a09      	ldr	r2, [pc, #36]	@ (800b404 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b3e0:	4907      	ldr	r1, [pc, #28]	@ (800b400 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a05      	ldr	r2, [pc, #20]	@ (800b408 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b3f2:	4904      	ldr	r1, [pc, #16]	@ (800b404 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	4798      	blx	r3
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd90      	pop	{r4, r7, pc}
 800b400:	20000210 	.word	0x20000210
 800b404:	20000230 	.word	0x20000230
 800b408:	20000238 	.word	0x20000238

0800b40c <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b40c:	b590      	push	{r4, r7, lr}
 800b40e:	b085      	sub	sp, #20
 800b410:	af02      	add	r7, sp, #8
 800b412:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b41c:	681c      	ldr	r4, [r3, #0]
 800b41e:	2300      	movs	r3, #0
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	2300      	movs	r3, #0
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	2300      	movs	r3, #0
 800b428:	2211      	movs	r2, #17
 800b42a:	490c      	ldr	r1, [pc, #48]	@ (800b45c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a09      	ldr	r2, [pc, #36]	@ (800b460 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b43c:	4907      	ldr	r1, [pc, #28]	@ (800b45c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a05      	ldr	r2, [pc, #20]	@ (800b464 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b44e:	4904      	ldr	r1, [pc, #16]	@ (800b460 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	4798      	blx	r3
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd90      	pop	{r4, r7, pc}
 800b45c:	20000210 	.word	0x20000210
 800b460:	20000230 	.word	0x20000230
 800b464:	20000238 	.word	0x20000238

0800b468 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b468:	b590      	push	{r4, r7, lr}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b478:	681c      	ldr	r4, [r3, #0]
 800b47a:	2300      	movs	r3, #0
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	2300      	movs	r3, #0
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	2300      	movs	r3, #0
 800b484:	2212      	movs	r2, #18
 800b486:	4912      	ldr	r1, [pc, #72]	@ (800b4d0 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a0f      	ldr	r2, [pc, #60]	@ (800b4d4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b498:	490d      	ldr	r1, [pc, #52]	@ (800b4d0 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a0b      	ldr	r2, [pc, #44]	@ (800b4d8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b4aa:	490a      	ldr	r1, [pc, #40]	@ (800b4d4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	4906      	ldr	r1, [pc, #24]	@ (800b4d8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	4798      	blx	r3
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b4c6:	89fb      	ldrh	r3, [r7, #14]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd90      	pop	{r4, r7, pc}
 800b4d0:	20000210 	.word	0x20000210
 800b4d4:	20000230 	.word	0x20000230
 800b4d8:	20000238 	.word	0x20000238

0800b4dc <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b4dc:	b590      	push	{r4, r7, lr}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4f2:	681c      	ldr	r4, [r3, #0]
 800b4f4:	7afa      	ldrb	r2, [r7, #11]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	4613      	mov	r3, r2
 800b500:	2201      	movs	r2, #1
 800b502:	4903      	ldr	r1, [pc, #12]	@ (800b510 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	47a0      	blx	r4
}
 800b508:	bf00      	nop
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd90      	pop	{r4, r7, pc}
 800b510:	20000210 	.word	0x20000210

0800b514 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b085      	sub	sp, #20
 800b518:	af02      	add	r7, sp, #8
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b528:	681c      	ldr	r4, [r3, #0]
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	2200      	movs	r2, #0
 800b52e:	9201      	str	r2, [sp, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	9200      	str	r2, [sp, #0]
 800b534:	2202      	movs	r2, #2
 800b536:	4903      	ldr	r1, [pc, #12]	@ (800b544 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	47a0      	blx	r4
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bd90      	pop	{r4, r7, pc}
 800b544:	20000210 	.word	0x20000210

0800b548 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af02      	add	r7, sp, #8
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	460b      	mov	r3, r1
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b55e:	681c      	ldr	r4, [r3, #0]
 800b560:	7afa      	ldrb	r2, [r7, #11]
 800b562:	2300      	movs	r3, #0
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	4613      	mov	r3, r2
 800b56c:	2203      	movs	r2, #3
 800b56e:	4903      	ldr	r1, [pc, #12]	@ (800b57c <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	47a0      	blx	r4
}
 800b574:	bf00      	nop
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd90      	pop	{r4, r7, pc}
 800b57c:	20000210 	.word	0x20000210

0800b580 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b580:	b590      	push	{r4, r7, lr}
 800b582:	b085      	sub	sp, #20
 800b584:	af02      	add	r7, sp, #8
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b594:	681c      	ldr	r4, [r3, #0]
 800b596:	78fb      	ldrb	r3, [r7, #3]
 800b598:	2200      	movs	r2, #0
 800b59a:	9201      	str	r2, [sp, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	9200      	str	r2, [sp, #0]
 800b5a0:	2204      	movs	r2, #4
 800b5a2:	4903      	ldr	r1, [pc, #12]	@ (800b5b0 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	47a0      	blx	r4
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd90      	pop	{r4, r7, pc}
 800b5b0:	20000210 	.word	0x20000210

0800b5b4 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5ca:	681c      	ldr	r4, [r3, #0]
 800b5cc:	7afa      	ldrb	r2, [r7, #11]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	2205      	movs	r2, #5
 800b5da:	4903      	ldr	r1, [pc, #12]	@ (800b5e8 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	47a0      	blx	r4
}
 800b5e0:	bf00      	nop
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd90      	pop	{r4, r7, pc}
 800b5e8:	20000210 	.word	0x20000210

0800b5ec <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b5ec:	b590      	push	{r4, r7, lr}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5fe:	681c      	ldr	r4, [r3, #0]
 800b600:	2300      	movs	r3, #0
 800b602:	9301      	str	r3, [sp, #4]
 800b604:	2300      	movs	r3, #0
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2206      	movs	r2, #6
 800b60c:	4903      	ldr	r1, [pc, #12]	@ (800b61c <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	47a0      	blx	r4
}
 800b612:	bf00      	nop
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	bd90      	pop	{r4, r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20000210 	.word	0x20000210

0800b620 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b620:	b590      	push	{r4, r7, lr}
 800b622:	b087      	sub	sp, #28
 800b624:	af02      	add	r7, sp, #8
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	460b      	mov	r3, r1
 800b62a:	607a      	str	r2, [r7, #4]
 800b62c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b636:	681c      	ldr	r4, [r3, #0]
 800b638:	7afa      	ldrb	r2, [r7, #11]
 800b63a:	2300      	movs	r3, #0
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	4613      	mov	r3, r2
 800b644:	2207      	movs	r2, #7
 800b646:	4903      	ldr	r1, [pc, #12]	@ (800b654 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	47a0      	blx	r4
}
 800b64c:	bf00      	nop
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	bd90      	pop	{r4, r7, pc}
 800b654:	20000210 	.word	0x20000210

0800b658 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b658:	b590      	push	{r4, r7, lr}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af02      	add	r7, sp, #8
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	607b      	str	r3, [r7, #4]
 800b662:	460b      	mov	r3, r1
 800b664:	72fb      	strb	r3, [r7, #11]
 800b666:	4613      	mov	r3, r2
 800b668:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b672:	681c      	ldr	r4, [r3, #0]
 800b674:	7af9      	ldrb	r1, [r7, #11]
 800b676:	7abb      	ldrb	r3, [r7, #10]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	9201      	str	r2, [sp, #4]
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	460b      	mov	r3, r1
 800b680:	2208      	movs	r2, #8
 800b682:	4903      	ldr	r1, [pc, #12]	@ (800b690 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	47a0      	blx	r4
}
 800b688:	bf00      	nop
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd90      	pop	{r4, r7, pc}
 800b690:	20000210 	.word	0x20000210

0800b694 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b085      	sub	sp, #20
 800b698:	af02      	add	r7, sp, #8
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	70fb      	strb	r3, [r7, #3]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6ac:	681c      	ldr	r4, [r3, #0]
 800b6ae:	78fa      	ldrb	r2, [r7, #3]
 800b6b0:	78bb      	ldrb	r3, [r7, #2]
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	9101      	str	r1, [sp, #4]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	2209      	movs	r2, #9
 800b6bc:	4903      	ldr	r1, [pc, #12]	@ (800b6cc <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	47a0      	blx	r4
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd90      	pop	{r4, r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20000210 	.word	0x20000210

0800b6d0 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b6d0:	b590      	push	{r4, r7, lr}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6e0:	681c      	ldr	r4, [r3, #0]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	220a      	movs	r2, #10
 800b6ee:	4903      	ldr	r1, [pc, #12]	@ (800b6fc <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	47a0      	blx	r4
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd90      	pop	{r4, r7, pc}
 800b6fc:	20000210 	.word	0x20000210

0800b700 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b700:	b590      	push	{r4, r7, lr}
 800b702:	b085      	sub	sp, #20
 800b704:	af02      	add	r7, sp, #8
 800b706:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b710:	681c      	ldr	r4, [r3, #0]
 800b712:	2300      	movs	r3, #0
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	2300      	movs	r3, #0
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	2300      	movs	r3, #0
 800b71c:	220b      	movs	r2, #11
 800b71e:	4903      	ldr	r1, [pc, #12]	@ (800b72c <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	47a0      	blx	r4
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd90      	pop	{r4, r7, pc}
 800b72c:	20000210 	.word	0x20000210

0800b730 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b730:	b590      	push	{r4, r7, lr}
 800b732:	b085      	sub	sp, #20
 800b734:	af02      	add	r7, sp, #8
 800b736:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b740:	681c      	ldr	r4, [r3, #0]
 800b742:	2300      	movs	r3, #0
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	2300      	movs	r3, #0
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	2300      	movs	r3, #0
 800b74c:	220c      	movs	r2, #12
 800b74e:	4903      	ldr	r1, [pc, #12]	@ (800b75c <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	47a0      	blx	r4
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd90      	pop	{r4, r7, pc}
 800b75c:	20000210 	.word	0x20000210

0800b760 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b085      	sub	sp, #20
 800b764:	af02      	add	r7, sp, #8
 800b766:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b770:	681c      	ldr	r4, [r3, #0]
 800b772:	2300      	movs	r3, #0
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	2300      	movs	r3, #0
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	2300      	movs	r3, #0
 800b77c:	220d      	movs	r2, #13
 800b77e:	4903      	ldr	r1, [pc, #12]	@ (800b78c <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	47a0      	blx	r4
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd90      	pop	{r4, r7, pc}
 800b78c:	20000210 	.word	0x20000210

0800b790 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b085      	sub	sp, #20
 800b794:	af02      	add	r7, sp, #8
 800b796:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7a0:	681c      	ldr	r4, [r3, #0]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	220e      	movs	r2, #14
 800b7ae:	4903      	ldr	r1, [pc, #12]	@ (800b7bc <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	47a0      	blx	r4
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd90      	pop	{r4, r7, pc}
 800b7bc:	20000210 	.word	0x20000210

0800b7c0 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b7c0:	b590      	push	{r4, r7, lr}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7d0:	681c      	ldr	r4, [r3, #0]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	220f      	movs	r2, #15
 800b7de:	4903      	ldr	r1, [pc, #12]	@ (800b7ec <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	47a0      	blx	r4
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd90      	pop	{r4, r7, pc}
 800b7ec:	20000210 	.word	0x20000210

0800b7f0 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b7f0:	b590      	push	{r4, r7, lr}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b800:	681c      	ldr	r4, [r3, #0]
 800b802:	2300      	movs	r3, #0
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	2300      	movs	r3, #0
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	2300      	movs	r3, #0
 800b80c:	2210      	movs	r2, #16
 800b80e:	4903      	ldr	r1, [pc, #12]	@ (800b81c <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	47a0      	blx	r4
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd90      	pop	{r4, r7, pc}
 800b81c:	20000210 	.word	0x20000210

0800b820 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b820:	b590      	push	{r4, r7, lr}
 800b822:	b085      	sub	sp, #20
 800b824:	af02      	add	r7, sp, #8
 800b826:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b830:	681c      	ldr	r4, [r3, #0]
 800b832:	2300      	movs	r3, #0
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	2300      	movs	r3, #0
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	2300      	movs	r3, #0
 800b83c:	2211      	movs	r2, #17
 800b83e:	4903      	ldr	r1, [pc, #12]	@ (800b84c <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	47a0      	blx	r4
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}
 800b84c:	20000210 	.word	0x20000210

0800b850 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b850:	b590      	push	{r4, r7, lr}
 800b852:	b085      	sub	sp, #20
 800b854:	af02      	add	r7, sp, #8
 800b856:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b860:	681c      	ldr	r4, [r3, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	2300      	movs	r3, #0
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	2300      	movs	r3, #0
 800b86c:	2212      	movs	r2, #18
 800b86e:	4903      	ldr	r1, [pc, #12]	@ (800b87c <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	47a0      	blx	r4
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd90      	pop	{r4, r7, pc}
 800b87c:	20000210 	.word	0x20000210

0800b880 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a09      	ldr	r2, [pc, #36]	@ (800b8b8 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b894:	4909      	ldr	r1, [pc, #36]	@ (800b8bc <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a06      	ldr	r2, [pc, #24]	@ (800b8c0 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b8a6:	4904      	ldr	r1, [pc, #16]	@ (800b8b8 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b8ac:	4b04      	ldr	r3, [pc, #16]	@ (800b8c0 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000230 	.word	0x20000230
 800b8bc:	20000210 	.word	0x20000210
 800b8c0:	20000238 	.word	0x20000238

0800b8c4 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b8c4:	b590      	push	{r4, r7, lr}
 800b8c6:	b089      	sub	sp, #36	@ 0x24
 800b8c8:	af02      	add	r7, sp, #8
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b8d0:	4b17      	ldr	r3, [pc, #92]	@ (800b930 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75fb      	strb	r3, [r7, #23]
 800b8da:	e020      	b.n	800b91e <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b8e4:	681c      	ldr	r4, [r3, #0]
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	1899      	adds	r1, r3, r2
 800b8f0:	7dfb      	ldrb	r3, [r7, #23]
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	441a      	add	r2, r3
 800b8fa:	230a      	movs	r3, #10
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	2302      	movs	r3, #2
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b904:	2300      	movs	r3, #0
 800b906:	75bb      	strb	r3, [r7, #22]
 800b908:	e003      	b.n	800b912 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b90a:	bf00      	nop
 800b90c:	7dbb      	ldrb	r3, [r7, #22]
 800b90e:	3301      	adds	r3, #1
 800b910:	75bb      	strb	r3, [r7, #22]
 800b912:	7dbb      	ldrb	r3, [r7, #22]
 800b914:	2b7c      	cmp	r3, #124	@ 0x7c
 800b916:	d9f8      	bls.n	800b90a <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b918:	7dfb      	ldrb	r3, [r7, #23]
 800b91a:	3301      	adds	r3, #1
 800b91c:	75fb      	strb	r3, [r7, #23]
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
 800b920:	2b03      	cmp	r3, #3
 800b922:	d9db      	bls.n	800b8dc <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b924:	bf00      	nop
}
 800b926:	bf00      	nop
 800b928:	371c      	adds	r7, #28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd90      	pop	{r4, r7, pc}
 800b92e:	bf00      	nop
 800b930:	2000020d 	.word	0x2000020d

0800b934 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b934:	b480      	push	{r7}
 800b936:	b087      	sub	sp, #28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	4613      	mov	r3, r2
 800b940:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b942:	2300      	movs	r3, #0
 800b944:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b946:	2301      	movs	r3, #1
 800b948:	74fb      	strb	r3, [r7, #19]
 800b94a:	e016      	b.n	800b97a <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b94c:	7cfb      	ldrb	r3, [r7, #19]
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	461a      	mov	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	7f1b      	ldrb	r3, [r3, #28]
 800b956:	4413      	add	r3, r2
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	4413      	add	r3, r2
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	4619      	mov	r1, r3
 800b960:	79fa      	ldrb	r2, [r7, #7]
 800b962:	7cfb      	ldrb	r3, [r7, #19]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	00db      	lsls	r3, r3, #3
 800b968:	fa01 f303 	lsl.w	r3, r1, r3
 800b96c:	461a      	mov	r2, r3
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	4313      	orrs	r3, r2
 800b972:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b974:	7cfb      	ldrb	r3, [r7, #19]
 800b976:	3301      	adds	r3, #1
 800b978:	74fb      	strb	r3, [r7, #19]
 800b97a:	7cfb      	ldrb	r3, [r7, #19]
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d9e5      	bls.n	800b94c <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b980:	697b      	ldr	r3, [r7, #20]
}
 800b982:	4618      	mov	r0, r3
 800b984:	371c      	adds	r7, #28
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
	...

0800b990 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	460b      	mov	r3, r1
 800b99a:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2118      	movs	r1, #24
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	4798      	blx	r3
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b6:	b292      	uxth	r2, r2
 800b9b8:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b9ba:	78fb      	ldrb	r3, [r7, #3]
 800b9bc:	2b0e      	cmp	r3, #14
 800b9be:	f200 8099 	bhi.w	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c8:	0800ba05 	.word	0x0800ba05
 800b9cc:	0800ba15 	.word	0x0800ba15
 800b9d0:	0800ba25 	.word	0x0800ba25
 800b9d4:	0800ba35 	.word	0x0800ba35
 800b9d8:	0800ba45 	.word	0x0800ba45
 800b9dc:	0800ba55 	.word	0x0800ba55
 800b9e0:	0800ba65 	.word	0x0800ba65
 800b9e4:	0800ba75 	.word	0x0800ba75
 800b9e8:	0800ba85 	.word	0x0800ba85
 800b9ec:	0800ba95 	.word	0x0800ba95
 800b9f0:	0800baa5 	.word	0x0800baa5
 800b9f4:	0800bab5 	.word	0x0800bab5
 800b9f8:	0800bac5 	.word	0x0800bac5
 800b9fc:	0800bad5 	.word	0x0800bad5
 800ba00:	0800bae5 	.word	0x0800bae5
      state = pL6470_StatusRegister->HiZ;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	73fb      	strb	r3, [r7, #15]
      break;
 800ba12:	e06f      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	73fb      	strb	r3, [r7, #15]
      break;
 800ba22:	e067      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	73fb      	strb	r3, [r7, #15]
      break;
 800ba32:	e05f      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	73fb      	strb	r3, [r7, #15]
      break;
 800ba42:	e057      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	73fb      	strb	r3, [r7, #15]
      break;
 800ba52:	e04f      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	73fb      	strb	r3, [r7, #15]
      break;
 800ba62:	e047      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	73fb      	strb	r3, [r7, #15]
      break;
 800ba72:	e03f      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	73fb      	strb	r3, [r7, #15]
      break;
 800ba82:	e037      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba88:	785b      	ldrb	r3, [r3, #1]
 800ba8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	73fb      	strb	r3, [r7, #15]
      break;
 800ba92:	e02f      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba98:	785b      	ldrb	r3, [r3, #1]
 800ba9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	73fb      	strb	r3, [r7, #15]
      break;
 800baa2:	e027      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baa8:	785b      	ldrb	r3, [r3, #1]
 800baaa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	73fb      	strb	r3, [r7, #15]
      break;
 800bab2:	e01f      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	73fb      	strb	r3, [r7, #15]
      break;
 800bac2:	e017      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac8:	785b      	ldrb	r3, [r3, #1]
 800baca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	73fb      	strb	r3, [r7, #15]
      break;
 800bad2:	e00f      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bad8:	785b      	ldrb	r3, [r3, #1]
 800bada:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	73fb      	strb	r3, [r7, #15]
      break;
 800bae2:	e007      	b.n	800baf4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bae8:	785b      	ldrb	r3, [r3, #1]
 800baea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	73fb      	strb	r3, [r7, #15]
      break;
 800baf2:	bf00      	nop
  return state;
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop

0800bb00 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	2b18      	cmp	r3, #24
 800bb10:	d809      	bhi.n	800bb26 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a19      	ldr	r1, [r3, #32]
 800bb16:	78fa      	ldrb	r2, [r7, #3]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	440b      	add	r3, r1
 800bb22:	3301      	adds	r3, #1
 800bb24:	e000      	b.n	800bb28 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bb3e:	2300      	movs	r3, #0
 800bb40:	73fb      	strb	r3, [r7, #15]
 800bb42:	e01a      	b.n	800bb7a <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	011b      	lsls	r3, r3, #4
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	4413      	add	r3, r2
 800bb58:	2200      	movs	r2, #0
 800bb5a:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	011b      	lsls	r3, r3, #4
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	4413      	add	r3, r2
 800bb64:	2200      	movs	r2, #0
 800bb66:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	011b      	lsls	r3, r3, #4
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	4413      	add	r3, r2
 800bb70:	2200      	movs	r2, #0
 800bb72:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	3301      	adds	r3, #1
 800bb78:	73fb      	strb	r3, [r7, #15]
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d9e1      	bls.n	800bb44 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800bb80:	bf00      	nop
 800bb82:	bf00      	nop
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bb8e:	b480      	push	{r7}
 800bb90:	b085      	sub	sp, #20
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	60f8      	str	r0, [r7, #12]
 800bb96:	60b9      	str	r1, [r7, #8]
 800bb98:	603b      	str	r3, [r7, #0]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	7f1b      	ldrb	r3, [r3, #28]
 800bba2:	011b      	lsls	r3, r3, #4
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	4413      	add	r3, r2
 800bba8:	79fa      	ldrb	r2, [r7, #7]
 800bbaa:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	7f1b      	ldrb	r3, [r3, #28]
 800bbb0:	011b      	lsls	r3, r3, #4
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	7f1b      	ldrb	r3, [r3, #28]
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	69ba      	ldr	r2, [r7, #24]
 800bbc6:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	7f1b      	ldrb	r3, [r3, #28]
 800bbcc:	011b      	lsls	r3, r3, #4
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	69fa      	ldr	r2, [r7, #28]
 800bbd4:	60da      	str	r2, [r3, #12]
}
 800bbd6:	bf00      	nop
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
	...

0800bbe4 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bbe4:	b590      	push	{r4, r7, lr}
 800bbe6:	b087      	sub	sp, #28
 800bbe8:	af02      	add	r7, sp, #8
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	603b      	str	r3, [r7, #0]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800bbf4:	4b10      	ldr	r3, [pc, #64]	@ (800bc38 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800bbfc:	4b0e      	ldr	r3, [pc, #56]	@ (800bc38 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bbfe:	2201      	movs	r2, #1
 800bc00:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800bc1a:	681c      	ldr	r4, [r3, #0]
 800bc1c:	79fa      	ldrb	r2, [r7, #7]
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	68b9      	ldr	r1, [r7, #8]
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	47a0      	blx	r4
}
 800bc2e:	bf00      	nop
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd90      	pop	{r4, r7, pc}
 800bc36:	bf00      	nop
 800bc38:	2000020d 	.word	0x2000020d

0800bc3c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	75bb      	strb	r3, [r7, #22]
 800bc50:	e013      	b.n	800bc7a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc52:	2300      	movs	r3, #0
 800bc54:	75fb      	strb	r3, [r7, #23]
 800bc56:	e00a      	b.n	800bc6e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800bc58:	7d7b      	ldrb	r3, [r7, #21]
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	757a      	strb	r2, [r7, #21]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4413      	add	r3, r2
 800bc64:	2200      	movs	r2, #0
 800bc66:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	75fb      	strb	r3, [r7, #23]
 800bc6e:	7dfb      	ldrb	r3, [r7, #23]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d9f1      	bls.n	800bc58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bc74:	7dbb      	ldrb	r3, [r7, #22]
 800bc76:	3301      	adds	r3, #1
 800bc78:	75bb      	strb	r3, [r7, #22]
 800bc7a:	7dbb      	ldrb	r3, [r7, #22]
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d9e8      	bls.n	800bc52 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc80:	2300      	movs	r3, #0
 800bc82:	75fb      	strb	r3, [r7, #23]
 800bc84:	e1f1      	b.n	800c06a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	011b      	lsls	r3, r3, #4
 800bc8e:	68b9      	ldr	r1, [r7, #8]
 800bc90:	440b      	add	r3, r1
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	4619      	mov	r1, r3
 800bc96:	460b      	mov	r3, r1
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	1a5b      	subs	r3, r3, r1
 800bc9c:	005b      	lsls	r3, r3, #1
 800bc9e:	441a      	add	r2, r3
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	440b      	add	r3, r1
 800bca6:	7b12      	ldrb	r2, [r2, #12]
 800bca8:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
 800bcac:	011b      	lsls	r3, r3, #4
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b12      	cmp	r3, #18
 800bcb6:	f200 81d5 	bhi.w	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800bcba:	a201      	add	r2, pc, #4	@ (adr r2, 800bcc0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc0:	0800c065 	.word	0x0800c065
 800bcc4:	0800bd0d 	.word	0x0800bd0d
 800bcc8:	0800bd95 	.word	0x0800bd95
 800bccc:	0800bdc5 	.word	0x0800bdc5
 800bcd0:	0800be2d 	.word	0x0800be2d
 800bcd4:	0800be5b 	.word	0x0800be5b
 800bcd8:	0800bec3 	.word	0x0800bec3
 800bcdc:	0800beff 	.word	0x0800beff
 800bce0:	0800bf67 	.word	0x0800bf67
 800bce4:	0800c003 	.word	0x0800c003
 800bce8:	0800c065 	.word	0x0800c065
 800bcec:	0800c065 	.word	0x0800c065
 800bcf0:	0800c065 	.word	0x0800c065
 800bcf4:	0800c065 	.word	0x0800c065
 800bcf8:	0800c065 	.word	0x0800c065
 800bcfc:	0800c065 	.word	0x0800c065
 800bd00:	0800c065 	.word	0x0800c065
 800bd04:	0800c065 	.word	0x0800c065
 800bd08:	0800c065 	.word	0x0800c065
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	4413      	add	r3, r2
 800bd12:	7819      	ldrb	r1, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6a18      	ldr	r0, [r3, #32]
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	011b      	lsls	r3, r3, #4
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	4413      	add	r3, r2
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	4613      	mov	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4403      	add	r3, r0
 800bd2c:	781a      	ldrb	r2, [r3, #0]
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	4403      	add	r3, r0
 800bd34:	430a      	orrs	r2, r1
 800bd36:	b2d2      	uxtb	r2, r2
 800bd38:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a19      	ldr	r1, [r3, #32]
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	011b      	lsls	r3, r3, #4
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	4413      	add	r3, r2
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	440b      	add	r3, r1
 800bd52:	7b9b      	ldrb	r3, [r3, #14]
 800bd54:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bd56:	2301      	movs	r3, #1
 800bd58:	75bb      	strb	r3, [r7, #22]
 800bd5a:	e016      	b.n	800bd8a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	011b      	lsls	r3, r3, #4
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	4413      	add	r3, r2
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	7d39      	ldrb	r1, [r7, #20]
 800bd68:	7dbb      	ldrb	r3, [r7, #22]
 800bd6a:	1acb      	subs	r3, r1, r3
 800bd6c:	00db      	lsls	r3, r3, #3
 800bd6e:	fa22 f103 	lsr.w	r1, r2, r3
 800bd72:	7dbb      	ldrb	r3, [r7, #22]
 800bd74:	005a      	lsls	r2, r3, #1
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	4413      	add	r3, r2
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4413      	add	r3, r2
 800bd80:	b2ca      	uxtb	r2, r1
 800bd82:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bd84:	7dbb      	ldrb	r3, [r7, #22]
 800bd86:	3301      	adds	r3, #1
 800bd88:	75bb      	strb	r3, [r7, #22]
 800bd8a:	7d3a      	ldrb	r2, [r7, #20]
 800bd8c:	7dbb      	ldrb	r3, [r7, #22]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d2e4      	bcs.n	800bd5c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800bd92:	e167      	b.n	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	4413      	add	r3, r2
 800bd9a:	7819      	ldrb	r1, [r3, #0]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6a18      	ldr	r0, [r3, #32]
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	4413      	add	r3, r2
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4403      	add	r3, r0
 800bdb4:	781a      	ldrb	r2, [r3, #0]
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	4403      	add	r3, r0
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	701a      	strb	r2, [r3, #0]
      break;
 800bdc2:	e14f      	b.n	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	4413      	add	r3, r2
 800bdca:	7819      	ldrb	r1, [r3, #0]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	00db      	lsls	r3, r3, #3
 800bdde:	4413      	add	r3, r2
 800bde0:	4403      	add	r3, r0
 800bde2:	7a1a      	ldrb	r2, [r3, #8]
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	4403      	add	r3, r0
 800bdea:	430a      	orrs	r2, r1
 800bdec:	b2d2      	uxtb	r2, r2
 800bdee:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	75bb      	strb	r3, [r7, #22]
 800bdf4:	e016      	b.n	800be24 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	011b      	lsls	r3, r3, #4
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	689a      	ldr	r2, [r3, #8]
 800be00:	7dbb      	ldrb	r3, [r7, #22]
 800be02:	f1c3 0303 	rsb	r3, r3, #3
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	fa22 f103 	lsr.w	r1, r2, r3
 800be0c:	7dbb      	ldrb	r3, [r7, #22]
 800be0e:	005a      	lsls	r2, r3, #1
 800be10:	7dfb      	ldrb	r3, [r7, #23]
 800be12:	4413      	add	r3, r2
 800be14:	461a      	mov	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4413      	add	r3, r2
 800be1a:	b2ca      	uxtb	r2, r1
 800be1c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be1e:	7dbb      	ldrb	r3, [r7, #22]
 800be20:	3301      	adds	r3, #1
 800be22:	75bb      	strb	r3, [r7, #22]
 800be24:	7dbb      	ldrb	r3, [r7, #22]
 800be26:	2b03      	cmp	r3, #3
 800be28:	d9e5      	bls.n	800bdf6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800be2a:	e11b      	b.n	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	4413      	add	r3, r2
 800be32:	7819      	ldrb	r1, [r3, #0]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	4413      	add	r3, r2
 800be40:	685a      	ldr	r2, [r3, #4]
 800be42:	4613      	mov	r3, r2
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	4413      	add	r3, r2
 800be48:	4403      	add	r3, r0
 800be4a:	7a1a      	ldrb	r2, [r3, #8]
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	4403      	add	r3, r0
 800be52:	430a      	orrs	r2, r1
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	701a      	strb	r2, [r3, #0]
      break;
 800be58:	e104      	b.n	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	4413      	add	r3, r2
 800be60:	7819      	ldrb	r1, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	011b      	lsls	r3, r3, #4
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	4413      	add	r3, r2
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	4613      	mov	r3, r2
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	4413      	add	r3, r2
 800be76:	4403      	add	r3, r0
 800be78:	7a1a      	ldrb	r2, [r3, #8]
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	4403      	add	r3, r0
 800be80:	430a      	orrs	r2, r1
 800be82:	b2d2      	uxtb	r2, r2
 800be84:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be86:	2301      	movs	r3, #1
 800be88:	75bb      	strb	r3, [r7, #22]
 800be8a:	e016      	b.n	800beba <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	011b      	lsls	r3, r3, #4
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	4413      	add	r3, r2
 800be94:	689a      	ldr	r2, [r3, #8]
 800be96:	7dbb      	ldrb	r3, [r7, #22]
 800be98:	f1c3 0303 	rsb	r3, r3, #3
 800be9c:	00db      	lsls	r3, r3, #3
 800be9e:	fa22 f103 	lsr.w	r1, r2, r3
 800bea2:	7dbb      	ldrb	r3, [r7, #22]
 800bea4:	005a      	lsls	r2, r3, #1
 800bea6:	7dfb      	ldrb	r3, [r7, #23]
 800bea8:	4413      	add	r3, r2
 800beaa:	461a      	mov	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4413      	add	r3, r2
 800beb0:	b2ca      	uxtb	r2, r1
 800beb2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800beb4:	7dbb      	ldrb	r3, [r7, #22]
 800beb6:	3301      	adds	r3, #1
 800beb8:	75bb      	strb	r3, [r7, #22]
 800beba:	7dbb      	ldrb	r3, [r7, #22]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d9e5      	bls.n	800be8c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800bec0:	e0d0      	b.n	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bec2:	2301      	movs	r3, #1
 800bec4:	75bb      	strb	r3, [r7, #22]
 800bec6:	e016      	b.n	800bef6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
 800beca:	011b      	lsls	r3, r3, #4
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	4413      	add	r3, r2
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	7dbb      	ldrb	r3, [r7, #22]
 800bed4:	f1c3 0303 	rsb	r3, r3, #3
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	fa22 f103 	lsr.w	r1, r2, r3
 800bede:	7dbb      	ldrb	r3, [r7, #22]
 800bee0:	005a      	lsls	r2, r3, #1
 800bee2:	7dfb      	ldrb	r3, [r7, #23]
 800bee4:	4413      	add	r3, r2
 800bee6:	461a      	mov	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4413      	add	r3, r2
 800beec:	b2ca      	uxtb	r2, r1
 800beee:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bef0:	7dbb      	ldrb	r3, [r7, #22]
 800bef2:	3301      	adds	r3, #1
 800bef4:	75bb      	strb	r3, [r7, #22]
 800bef6:	7dbb      	ldrb	r3, [r7, #22]
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d9e5      	bls.n	800bec8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800befc:	e0b2      	b.n	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	4413      	add	r3, r2
 800bf04:	7819      	ldrb	r1, [r3, #0]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	011b      	lsls	r3, r3, #4
 800bf0e:	68ba      	ldr	r2, [r7, #8]
 800bf10:	4413      	add	r3, r2
 800bf12:	685a      	ldr	r2, [r3, #4]
 800bf14:	4613      	mov	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	4413      	add	r3, r2
 800bf1a:	4403      	add	r3, r0
 800bf1c:	7a1a      	ldrb	r2, [r3, #8]
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	4403      	add	r3, r0
 800bf24:	430a      	orrs	r2, r1
 800bf26:	b2d2      	uxtb	r2, r2
 800bf28:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	75bb      	strb	r3, [r7, #22]
 800bf2e:	e016      	b.n	800bf5e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	011b      	lsls	r3, r3, #4
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	4413      	add	r3, r2
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	7dbb      	ldrb	r3, [r7, #22]
 800bf3c:	f1c3 0303 	rsb	r3, r3, #3
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	fa22 f103 	lsr.w	r1, r2, r3
 800bf46:	7dbb      	ldrb	r3, [r7, #22]
 800bf48:	005a      	lsls	r2, r3, #1
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	461a      	mov	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4413      	add	r3, r2
 800bf54:	b2ca      	uxtb	r2, r1
 800bf56:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf58:	7dbb      	ldrb	r3, [r7, #22]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	75bb      	strb	r3, [r7, #22]
 800bf5e:	7dbb      	ldrb	r3, [r7, #22]
 800bf60:	2b03      	cmp	r3, #3
 800bf62:	d9e5      	bls.n	800bf30 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800bf64:	e07e      	b.n	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	b259      	sxtb	r1, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	4403      	add	r3, r0
 800bf86:	791b      	ldrb	r3, [r3, #4]
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	b25b      	sxtb	r3, r3
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	b259      	sxtb	r1, r3
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	4413      	add	r3, r2
 800bf96:	b2ca      	uxtb	r2, r1
 800bf98:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	7819      	ldrb	r1, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	011b      	lsls	r3, r3, #4
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	4413      	add	r3, r2
 800bfae:	689a      	ldr	r2, [r3, #8]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	00db      	lsls	r3, r3, #3
 800bfb4:	4413      	add	r3, r2
 800bfb6:	4403      	add	r3, r0
 800bfb8:	7a1a      	ldrb	r2, [r3, #8]
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	4403      	add	r3, r0
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	75bb      	strb	r3, [r7, #22]
 800bfca:	e016      	b.n	800bffa <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	011b      	lsls	r3, r3, #4
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	68da      	ldr	r2, [r3, #12]
 800bfd6:	7dbb      	ldrb	r3, [r7, #22]
 800bfd8:	f1c3 0303 	rsb	r3, r3, #3
 800bfdc:	00db      	lsls	r3, r3, #3
 800bfde:	fa22 f103 	lsr.w	r1, r2, r3
 800bfe2:	7dbb      	ldrb	r3, [r7, #22]
 800bfe4:	005a      	lsls	r2, r3, #1
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	4413      	add	r3, r2
 800bfea:	461a      	mov	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4413      	add	r3, r2
 800bff0:	b2ca      	uxtb	r2, r1
 800bff2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bff4:	7dbb      	ldrb	r3, [r7, #22]
 800bff6:	3301      	adds	r3, #1
 800bff8:	75bb      	strb	r3, [r7, #22]
 800bffa:	7dbb      	ldrb	r3, [r7, #22]
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d9e5      	bls.n	800bfcc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800c000:	e030      	b.n	800c064 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800c002:	7dfb      	ldrb	r3, [r7, #23]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	4413      	add	r3, r2
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	b259      	sxtb	r1, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c010:	7dfb      	ldrb	r3, [r7, #23]
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	4413      	add	r3, r2
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	4613      	mov	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	4403      	add	r3, r0
 800c022:	791b      	ldrb	r3, [r3, #4]
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	b25b      	sxtb	r3, r3
 800c028:	430b      	orrs	r3, r1
 800c02a:	b259      	sxtb	r1, r3
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	4413      	add	r3, r2
 800c032:	b2ca      	uxtb	r2, r1
 800c034:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c036:	7dfb      	ldrb	r3, [r7, #23]
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	4413      	add	r3, r2
 800c03c:	7819      	ldrb	r1, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	011b      	lsls	r3, r3, #4
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	4413      	add	r3, r2
 800c04a:	689a      	ldr	r2, [r3, #8]
 800c04c:	4613      	mov	r3, r2
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	4413      	add	r3, r2
 800c052:	4403      	add	r3, r0
 800c054:	7a1a      	ldrb	r2, [r3, #8]
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	4403      	add	r3, r0
 800c05c:	430a      	orrs	r2, r1
 800c05e:	b2d2      	uxtb	r2, r2
 800c060:	701a      	strb	r2, [r3, #0]
      break;
 800c062:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	3301      	adds	r3, #1
 800c068:	75fb      	strb	r3, [r7, #23]
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	f67f ae0a 	bls.w	800bc86 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800c072:	bf00      	nop
 800c074:	bf00      	nop
 800c076:	371c      	adds	r7, #28
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800c08c:	edd7 7a00 	vldr	s15, [r7]
 800c090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c098:	db1e      	blt.n	800c0d8 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800c09a:	edd7 7a00 	vldr	s15, [r7]
 800c09e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0a2:	ee17 2a90 	vmov	r2, s15
 800c0a6:	edd7 7a00 	vldr	s15, [r7]
 800c0aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0b2:	ed97 7a00 	vldr	s14, [r7]
 800c0b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c0be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c6:	bf4c      	ite	mi
 800c0c8:	2301      	movmi	r3, #1
 800c0ca:	2300      	movpl	r3, #0
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	f083 0301 	eor.w	r3, r3, #1
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	4413      	add	r3, r2
 800c0d6:	e01a      	b.n	800c10e <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800c0d8:	edd7 7a00 	vldr	s15, [r7]
 800c0dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0e0:	ee17 2a90 	vmov	r2, s15
 800c0e4:	edd7 7a00 	vldr	s15, [r7]
 800c0e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0f0:	ed97 7a00 	vldr	s14, [r7]
 800c0f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0f8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c0fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c104:	d501      	bpl.n	800c10a <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800c106:	2301      	movs	r3, #1
 800c108:	e000      	b.n	800c10c <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800c10a:	2300      	movs	r3, #0
 800c10c:	1ad3      	subs	r3, r2, r3
    }
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b086      	sub	sp, #24
 800c11e:	af00      	add	r7, sp, #0
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	4613      	mov	r3, r2
 800c126:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6918      	ldr	r0, [r3, #16]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	8a9b      	ldrh	r3, [r3, #20]
 800c130:	2200      	movs	r2, #0
 800c132:	4619      	mov	r1, r3
 800c134:	f001 ff78 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6998      	ldr	r0, [r3, #24]
 800c13c:	88fa      	ldrh	r2, [r7, #6]
 800c13e:	2364      	movs	r3, #100	@ 0x64
 800c140:	68b9      	ldr	r1, [r7, #8]
 800c142:	f002 ffa0 	bl	800f086 <HAL_SPI_Receive>
 800c146:	4603      	mov	r3, r0
 800c148:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6918      	ldr	r0, [r3, #16]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	8a9b      	ldrh	r3, [r3, #20]
 800c152:	2201      	movs	r2, #1
 800c154:	4619      	mov	r1, r3
 800c156:	f001 ff67 	bl	800e028 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	e000      	b.n	800c166 <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c164:	2300      	movs	r3, #0
    }
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c16e:	b580      	push	{r7, lr}
 800c170:	b086      	sub	sp, #24
 800c172:	af00      	add	r7, sp, #0
 800c174:	60f8      	str	r0, [r7, #12]
 800c176:	60b9      	str	r1, [r7, #8]
 800c178:	4613      	mov	r3, r2
 800c17a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6918      	ldr	r0, [r3, #16]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	8a9b      	ldrh	r3, [r3, #20]
 800c184:	2200      	movs	r2, #0
 800c186:	4619      	mov	r1, r3
 800c188:	f001 ff4e 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6998      	ldr	r0, [r3, #24]
 800c190:	88fa      	ldrh	r2, [r7, #6]
 800c192:	2364      	movs	r3, #100	@ 0x64
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	f002 fe3a 	bl	800ee0e <HAL_SPI_Transmit>
 800c19a:	4603      	mov	r3, r0
 800c19c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6918      	ldr	r0, [r3, #16]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	8a9b      	ldrh	r3, [r3, #20]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f001 ff3d 	bl	800e028 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e000      	b.n	800c1ba <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c1b8:	2300      	movs	r3, #0
    }
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b088      	sub	sp, #32
 800c1c6:	af02      	add	r7, sp, #8
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	60b9      	str	r1, [r7, #8]
 800c1cc:	607a      	str	r2, [r7, #4]
 800c1ce:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6918      	ldr	r0, [r3, #16]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	8a9b      	ldrh	r3, [r3, #20]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	4619      	mov	r1, r3
 800c1dc:	f001 ff24 	bl	800e028 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6998      	ldr	r0, [r3, #24]
 800c1e4:	887b      	ldrh	r3, [r7, #2]
 800c1e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c1ea:	9200      	str	r2, [sp, #0]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	f003 f85a 	bl	800f2a8 <HAL_SPI_TransmitReceive>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d009      	beq.n	800c212 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6918      	ldr	r0, [r3, #16]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	8a9b      	ldrh	r3, [r3, #20]
 800c206:	2201      	movs	r2, #1
 800c208:	4619      	mov	r1, r3
 800c20a:	f001 ff0d 	bl	800e028 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e008      	b.n	800c224 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6918      	ldr	r0, [r3, #16]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	8a9b      	ldrh	r3, [r3, #20]
 800c21a:	2201      	movs	r2, #1
 800c21c:	4619      	mov	r1, r3
 800c21e:	f001 ff03 	bl	800e028 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c222:	2300      	movs	r3, #0
    }
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c22c:	b590      	push	{r4, r7, lr}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c242:	681c      	ldr	r4, [r3, #0]
 800c244:	887b      	ldrh	r3, [r7, #2]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	6879      	ldr	r1, [r7, #4]
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	47a0      	blx	r4
    }
 800c24e:	bf00      	nop
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	bd90      	pop	{r4, r7, pc}
	...

0800c258 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	4a04      	ldr	r2, [pc, #16]	@ (800c274 <_ZN13abstractL6470C1Ev+0x1c>)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	601a      	str	r2, [r3, #0]
{

}
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	08015fe0 	.word	0x08015fe0

0800c278 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	4a04      	ldr	r2, [pc, #16]	@ (800c294 <_ZN13abstractL6470D1Ev+0x1c>)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	601a      	str	r2, [r3, #0]
{

}
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4618      	mov	r0, r3
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	08015fe0 	.word	0x08015fe0

0800c298 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7f4 f96f 	bl	8000584 <__aeabi_i2d>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	ec43 2b10 	vmov	d0, r2, r3
 800c2ae:	f005 ffff 	bl	80122b0 <sqrt>
 800c2b2:	eeb0 7a40 	vmov.f32	s14, s0
 800c2b6:	eef0 7a60 	vmov.f32	s15, s1
 800c2ba:	eeb0 0a47 	vmov.f32	s0, s14
 800c2be:	eef0 0a67 	vmov.f32	s1, s15
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800c2c8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ca:	b0a0      	sub	sp, #128	@ 0x80
 800c2cc:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800c2ce:	f001 fadd 	bl	800d88c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800c2d2:	f000 f887 	bl	800c3e4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800c2d6:	f000 fc53 	bl	800cb80 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800c2da:	f000 fbf5 	bl	800cac8 <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 800c2de:	f000 fa23 	bl	800c728 <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 800c2e2:	f000 f901 	bl	800c4e8 <_ZL12MX_SPI1_Initv>
	MX_SPI2_Init();
 800c2e6:	f000 f93b 	bl	800c560 <_ZL12MX_SPI2_Initv>
	MX_TIM1_Init();
 800c2ea:	f000 f975 	bl	800c5d8 <_ZL12MX_TIM1_Initv>
	MX_TIM4_Init();
 800c2ee:	f000 faab 	bl	800c848 <_ZL12MX_TIM4_Initv>
	MX_TIM8_Init();
 800c2f2:	f000 fb51 	bl	800c998 <_ZL12MX_TIM8_Initv>
	MX_USART3_UART_Init();
 800c2f6:	f000 fc15 	bl	800cb24 <_ZL19MX_USART3_UART_Initv>
	MX_TIM6_Init();
 800c2fa:	f000 fb0d 	bl	800c918 <_ZL12MX_TIM6_Initv>
	/* USER CODE BEGIN 2 */

	//Start Timer2 interrupt (every 20 ms here)
	HAL_TIM_Base_Start_IT(&htim2);
 800c2fe:	4832      	ldr	r0, [pc, #200]	@ (800c3c8 <main+0x100>)
 800c300:	f003 fc06 	bl	800fb10 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800c304:	2201      	movs	r2, #1
 800c306:	4931      	ldr	r1, [pc, #196]	@ (800c3cc <main+0x104>)
 800c308:	4831      	ldr	r0, [pc, #196]	@ (800c3d0 <main+0x108>)
 800c30a:	f004 fb94 	bl	8010a36 <HAL_UART_Receive_IT>


	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
			reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
			reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port,
			ssel2_Pin);
 800c30e:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 800c312:	f005 fe8a 	bl	801202a <_Znwj>
 800c316:	4603      	mov	r3, r0
 800c318:	461c      	mov	r4, r3
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c31a:	2501      	movs	r5, #1
			ssel2_Pin);
 800c31c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c320:	9305      	str	r3, [sp, #20]
 800c322:	4b2c      	ldr	r3, [pc, #176]	@ (800c3d4 <main+0x10c>)
 800c324:	9304      	str	r3, [sp, #16]
 800c326:	2310      	movs	r3, #16
 800c328:	9303      	str	r3, [sp, #12]
 800c32a:	4b2b      	ldr	r3, [pc, #172]	@ (800c3d8 <main+0x110>)
 800c32c:	9302      	str	r3, [sp, #8]
 800c32e:	2310      	movs	r3, #16
 800c330:	9301      	str	r3, [sp, #4]
 800c332:	4b28      	ldr	r3, [pc, #160]	@ (800c3d4 <main+0x10c>)
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	2320      	movs	r3, #32
 800c338:	4a27      	ldr	r2, [pc, #156]	@ (800c3d8 <main+0x110>)
 800c33a:	4928      	ldr	r1, [pc, #160]	@ (800c3dc <main+0x114>)
 800c33c:	4620      	mov	r0, r4
 800c33e:	f7f5 ff5d 	bl	80021fc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c342:	4b27      	ldr	r3, [pc, #156]	@ (800c3e0 <main+0x118>)
 800c344:	601c      	str	r4, [r3, #0]

	moteurs->set_microstepping_mode(step_mode_t::STEPPER_STEP_MODE);
 800c346:	4b26      	ldr	r3, [pc, #152]	@ (800c3e0 <main+0x118>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2105      	movs	r1, #5
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7f6 fae2 	bl	8002916 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
	moteurs->set_max_acc_moteurs(MAXACC, MAXACC, MAXACC, MAXACC);
 800c352:	4b23      	ldr	r3, [pc, #140]	@ (800c3e0 <main+0x118>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 800c35a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800c35e:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800c362:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800c366:	4618      	mov	r0, r3
 800c368:	f7f6 fa01 	bl	800276e <_ZN11BlocMoteurs19set_max_acc_moteursEffff>
	moteurs->set_max_dec_moteurs(MAXACC, MAXACC, MAXACC, MAXACC);
 800c36c:	4b1c      	ldr	r3, [pc, #112]	@ (800c3e0 <main+0x118>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 800c374:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800c378:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800c37c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800c380:	4618      	mov	r0, r3
 800c382:	f7f6 fa5e 	bl	8002842 <_ZN11BlocMoteurs19set_max_dec_moteursEffff>
//	mesures = moteurs->mesure_pas_ecoule();

//	while(1);

	/* USER CODE END 2 */
	moveSpeed(0.1, 0, 0);
 800c386:	ed9f 2b0c 	vldr	d2, [pc, #48]	@ 800c3b8 <main+0xf0>
 800c38a:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 800c3b8 <main+0xf0>
 800c38e:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 800c3c0 <main+0xf8>
 800c392:	f000 fc91 	bl	800ccb8 <_Z9moveSpeedddd>
	HAL_Delay(1000);
 800c396:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c39a:	f001 fae9 	bl	800d970 <HAL_Delay>
	stop();
 800c39e:	f000 fd63 	bl	800ce68 <_Z4stopv>

	while(1);
 800c3a2:	bf00      	nop
 800c3a4:	e7fd      	b.n	800c3a2 <main+0xda>
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c3a6:	2d00      	cmp	r5, #0
 800c3a8:	d004      	beq.n	800c3b4 <main+0xec>
			ssel2_Pin);
 800c3aa:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f005 fae0 	bl	8011974 <_ZdlPvj>
 800c3b4:	f005 fae0 	bl	8011978 <__cxa_end_cleanup>
	...
 800c3c0:	9999999a 	.word	0x9999999a
 800c3c4:	3fb99999 	.word	0x3fb99999
 800c3c8:	200003a4 	.word	0x200003a4
 800c3cc:	2000056a 	.word	0x2000056a
 800c3d0:	200004c4 	.word	0x200004c4
 800c3d4:	40020000 	.word	0x40020000
 800c3d8:	40020400 	.word	0x40020400
 800c3dc:	200002ac 	.word	0x200002ac
 800c3e0:	2000054c 	.word	0x2000054c

0800c3e4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b094      	sub	sp, #80	@ 0x50
 800c3e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800c3ea:	f107 031c 	add.w	r3, r7, #28
 800c3ee:	2234      	movs	r2, #52	@ 0x34
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f006 fe93 	bl	801311e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800c3f8:	f107 0308 	add.w	r3, r7, #8
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	605a      	str	r2, [r3, #4]
 800c402:	609a      	str	r2, [r3, #8]
 800c404:	60da      	str	r2, [r3, #12]
 800c406:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800c408:	2300      	movs	r3, #0
 800c40a:	607b      	str	r3, [r7, #4]
 800c40c:	4b34      	ldr	r3, [pc, #208]	@ (800c4e0 <_Z18SystemClock_Configv+0xfc>)
 800c40e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c410:	4a33      	ldr	r2, [pc, #204]	@ (800c4e0 <_Z18SystemClock_Configv+0xfc>)
 800c412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c416:	6413      	str	r3, [r2, #64]	@ 0x40
 800c418:	4b31      	ldr	r3, [pc, #196]	@ (800c4e0 <_Z18SystemClock_Configv+0xfc>)
 800c41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c41c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c420:	607b      	str	r3, [r7, #4]
 800c422:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c424:	2300      	movs	r3, #0
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	4b2e      	ldr	r3, [pc, #184]	@ (800c4e4 <_Z18SystemClock_Configv+0x100>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a2d      	ldr	r2, [pc, #180]	@ (800c4e4 <_Z18SystemClock_Configv+0x100>)
 800c42e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	4b2b      	ldr	r3, [pc, #172]	@ (800c4e4 <_Z18SystemClock_Configv+0x100>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c43c:	603b      	str	r3, [r7, #0]
 800c43e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c440:	2302      	movs	r3, #2
 800c442:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c444:	2301      	movs	r3, #1
 800c446:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c448:	2310      	movs	r3, #16
 800c44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c44c:	2302      	movs	r3, #2
 800c44e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c450:	2300      	movs	r3, #0
 800c452:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800c454:	2308      	movs	r3, #8
 800c456:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800c458:	23b4      	movs	r3, #180	@ 0xb4
 800c45a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c45c:	2302      	movs	r3, #2
 800c45e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800c460:	2302      	movs	r3, #2
 800c462:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800c464:	2302      	movs	r3, #2
 800c466:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c468:	f107 031c 	add.w	r3, r7, #28
 800c46c:	4618      	mov	r0, r3
 800c46e:	f002 f9a7 	bl	800e7c0 <HAL_RCC_OscConfig>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	bf14      	ite	ne
 800c478:	2301      	movne	r3, #1
 800c47a:	2300      	moveq	r3, #0
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 800c482:	f000 fdd7 	bl	800d034 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800c486:	f001 fe01 	bl	800e08c <HAL_PWREx_EnableOverDrive>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	bf14      	ite	ne
 800c490:	2301      	movne	r3, #1
 800c492:	2300      	moveq	r3, #0
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800c49a:	f000 fdcb 	bl	800d034 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800c49e:	230f      	movs	r3, #15
 800c4a0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c4aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c4ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800c4b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c4b4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800c4b6:	f107 0308 	add.w	r3, r7, #8
 800c4ba:	2105      	movs	r1, #5
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f001 fe35 	bl	800e12c <HAL_RCC_ClockConfig>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	bf14      	ite	ne
 800c4c8:	2301      	movne	r3, #1
 800c4ca:	2300      	moveq	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800c4d2:	f000 fdaf 	bl	800d034 <Error_Handler>
	}
}
 800c4d6:	bf00      	nop
 800c4d8:	3750      	adds	r7, #80	@ 0x50
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	40023800 	.word	0x40023800
 800c4e4:	40007000 	.word	0x40007000

0800c4e8 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800c4ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c4ee:	4a1b      	ldr	r2, [pc, #108]	@ (800c55c <_ZL12MX_SPI1_Initv+0x74>)
 800c4f0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800c4f2:	4b19      	ldr	r3, [pc, #100]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c4f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c4f8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c4fa:	4b17      	ldr	r3, [pc, #92]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c500:	4b15      	ldr	r3, [pc, #84]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c502:	2200      	movs	r2, #0
 800c504:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c506:	4b14      	ldr	r3, [pc, #80]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c508:	2202      	movs	r2, #2
 800c50a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c50c:	4b12      	ldr	r3, [pc, #72]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c50e:	2201      	movs	r2, #1
 800c510:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800c512:	4b11      	ldr	r3, [pc, #68]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c518:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c51a:	4b0f      	ldr	r3, [pc, #60]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c51c:	2210      	movs	r2, #16
 800c51e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c520:	4b0d      	ldr	r3, [pc, #52]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c522:	2200      	movs	r2, #0
 800c524:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c526:	4b0c      	ldr	r3, [pc, #48]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c528:	2200      	movs	r2, #0
 800c52a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c52c:	4b0a      	ldr	r3, [pc, #40]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c52e:	2200      	movs	r2, #0
 800c530:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800c532:	4b09      	ldr	r3, [pc, #36]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c534:	220a      	movs	r2, #10
 800c536:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800c538:	4807      	ldr	r0, [pc, #28]	@ (800c558 <_ZL12MX_SPI1_Initv+0x70>)
 800c53a:	f002 fbdf 	bl	800ecfc <HAL_SPI_Init>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	bf14      	ite	ne
 800c544:	2301      	movne	r3, #1
 800c546:	2300      	moveq	r3, #0
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800c54e:	f000 fd71 	bl	800d034 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800c552:	bf00      	nop
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	200002ac 	.word	0x200002ac
 800c55c:	40013000 	.word	0x40013000

0800c560 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800c560:	b580      	push	{r7, lr}
 800c562:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800c564:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c566:	4a1b      	ldr	r2, [pc, #108]	@ (800c5d4 <_ZL12MX_SPI2_Initv+0x74>)
 800c568:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800c56a:	4b19      	ldr	r3, [pc, #100]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c56c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c570:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c572:	4b17      	ldr	r3, [pc, #92]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c574:	2200      	movs	r2, #0
 800c576:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c578:	4b15      	ldr	r3, [pc, #84]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c57e:	4b14      	ldr	r3, [pc, #80]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c580:	2200      	movs	r2, #0
 800c582:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c584:	4b12      	ldr	r3, [pc, #72]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c586:	2200      	movs	r2, #0
 800c588:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800c58a:	4b11      	ldr	r3, [pc, #68]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c58c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c590:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c592:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c594:	2200      	movs	r2, #0
 800c596:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c598:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c59e:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 800c5aa:	4b09      	ldr	r3, [pc, #36]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c5ac:	220a      	movs	r2, #10
 800c5ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800c5b0:	4807      	ldr	r0, [pc, #28]	@ (800c5d0 <_ZL12MX_SPI2_Initv+0x70>)
 800c5b2:	f002 fba3 	bl	800ecfc <HAL_SPI_Init>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bf14      	ite	ne
 800c5bc:	2301      	movne	r3, #1
 800c5be:	2300      	moveq	r3, #0
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 800c5c6:	f000 fd35 	bl	800d034 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800c5ca:	bf00      	nop
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	20000304 	.word	0x20000304
 800c5d4:	40003800 	.word	0x40003800

0800c5d8 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b092      	sub	sp, #72	@ 0x48
 800c5dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c5de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c5e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	605a      	str	r2, [r3, #4]
 800c5f2:	609a      	str	r2, [r3, #8]
 800c5f4:	60da      	str	r2, [r3, #12]
 800c5f6:	611a      	str	r2, [r3, #16]
 800c5f8:	615a      	str	r2, [r3, #20]
 800c5fa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800c5fc:	1d3b      	adds	r3, r7, #4
 800c5fe:	2220      	movs	r2, #32
 800c600:	2100      	movs	r1, #0
 800c602:	4618      	mov	r0, r3
 800c604:	f006 fd8b 	bl	801311e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800c608:	4b45      	ldr	r3, [pc, #276]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c60a:	4a46      	ldr	r2, [pc, #280]	@ (800c724 <_ZL12MX_TIM1_Initv+0x14c>)
 800c60c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800c60e:	4b44      	ldr	r3, [pc, #272]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c610:	2200      	movs	r2, #0
 800c612:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c614:	4b42      	ldr	r3, [pc, #264]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c616:	2200      	movs	r2, #0
 800c618:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800c61a:	4b41      	ldr	r3, [pc, #260]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c61c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c620:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c622:	4b3f      	ldr	r3, [pc, #252]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c624:	2200      	movs	r2, #0
 800c626:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800c628:	4b3d      	ldr	r3, [pc, #244]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c62e:	4b3c      	ldr	r3, [pc, #240]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c630:	2200      	movs	r2, #0
 800c632:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800c634:	483a      	ldr	r0, [pc, #232]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c636:	f003 fadb 	bl	800fbf0 <HAL_TIM_PWM_Init>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bf14      	ite	ne
 800c640:	2301      	movne	r3, #1
 800c642:	2300      	moveq	r3, #0
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800c64a:	f000 fcf3 	bl	800d034 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c64e:	2300      	movs	r3, #0
 800c650:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c652:	2300      	movs	r3, #0
 800c654:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800c656:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c65a:	4619      	mov	r1, r3
 800c65c:	4830      	ldr	r0, [pc, #192]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c65e:	f004 f8bb 	bl	80107d8 <HAL_TIMEx_MasterConfigSynchronization>
 800c662:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c664:	2b00      	cmp	r3, #0
 800c666:	bf14      	ite	ne
 800c668:	2301      	movne	r3, #1
 800c66a:	2300      	moveq	r3, #0
 800c66c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 800c672:	f000 fcdf 	bl	800d034 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c676:	2360      	movs	r3, #96	@ 0x60
 800c678:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c67e:	2300      	movs	r3, #0
 800c680:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c682:	2300      	movs	r3, #0
 800c684:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c686:	2300      	movs	r3, #0
 800c688:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c68a:	2300      	movs	r3, #0
 800c68c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c68e:	2300      	movs	r3, #0
 800c690:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800c692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c696:	2204      	movs	r2, #4
 800c698:	4619      	mov	r1, r3
 800c69a:	4821      	ldr	r0, [pc, #132]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c69c:	f003 fc00 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 800c6a0:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	bf14      	ite	ne
 800c6a6:	2301      	movne	r3, #1
 800c6a8:	2300      	moveq	r3, #0
 800c6aa:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d001      	beq.n	800c6b4 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 800c6b0:	f000 fcc0 	bl	800d034 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800c6b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6b8:	2208      	movs	r2, #8
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4818      	ldr	r0, [pc, #96]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c6be:	f003 fbef 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 800c6c2:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bf14      	ite	ne
 800c6c8:	2301      	movne	r3, #1
 800c6ca:	2300      	moveq	r3, #0
 800c6cc:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <_ZL12MX_TIM1_Initv+0xfe>
		Error_Handler();
 800c6d2:	f000 fcaf 	bl	800d034 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c6ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c6ee:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800c6f4:	1d3b      	adds	r3, r7, #4
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4809      	ldr	r0, [pc, #36]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c6fa:	f004 f8e9 	bl	80108d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800c6fe:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c700:	2b00      	cmp	r3, #0
 800c702:	bf14      	ite	ne
 800c704:	2301      	movne	r3, #1
 800c706:	2300      	moveq	r3, #0
 800c708:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <_ZL12MX_TIM1_Initv+0x13a>
		Error_Handler();
 800c70e:	f000 fc91 	bl	800d034 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 800c712:	4803      	ldr	r0, [pc, #12]	@ (800c720 <_ZL12MX_TIM1_Initv+0x148>)
 800c714:	f000 fdf4 	bl	800d300 <HAL_TIM_MspPostInit>

}
 800c718:	bf00      	nop
 800c71a:	3748      	adds	r7, #72	@ 0x48
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	2000035c 	.word	0x2000035c
 800c724:	40010000 	.word	0x40010000

0800c728 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800c728:	b580      	push	{r7, lr}
 800c72a:	b08e      	sub	sp, #56	@ 0x38
 800c72c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800c72e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	605a      	str	r2, [r3, #4]
 800c738:	609a      	str	r2, [r3, #8]
 800c73a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c73c:	f107 0320 	add.w	r3, r7, #32
 800c740:	2200      	movs	r2, #0
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c746:	1d3b      	adds	r3, r7, #4
 800c748:	2200      	movs	r2, #0
 800c74a:	601a      	str	r2, [r3, #0]
 800c74c:	605a      	str	r2, [r3, #4]
 800c74e:	609a      	str	r2, [r3, #8]
 800c750:	60da      	str	r2, [r3, #12]
 800c752:	611a      	str	r2, [r3, #16]
 800c754:	615a      	str	r2, [r3, #20]
 800c756:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800c758:	4b39      	ldr	r3, [pc, #228]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c75a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c75e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800c760:	4b37      	ldr	r3, [pc, #220]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c762:	2200      	movs	r2, #0
 800c764:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c766:	4b36      	ldr	r3, [pc, #216]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c768:	2200      	movs	r2, #0
 800c76a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1800000;
 800c76c:	4b34      	ldr	r3, [pc, #208]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c76e:	4a35      	ldr	r2, [pc, #212]	@ (800c844 <_ZL12MX_TIM2_Initv+0x11c>)
 800c770:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c772:	4b33      	ldr	r3, [pc, #204]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c774:	2200      	movs	r2, #0
 800c776:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c778:	4b31      	ldr	r3, [pc, #196]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c77a:	2280      	movs	r2, #128	@ 0x80
 800c77c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800c77e:	4830      	ldr	r0, [pc, #192]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c780:	f003 f976 	bl	800fa70 <HAL_TIM_Base_Init>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	bf14      	ite	ne
 800c78a:	2301      	movne	r3, #1
 800c78c:	2300      	moveq	r3, #0
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <_ZL12MX_TIM2_Initv+0x70>
		Error_Handler();
 800c794:	f000 fc4e 	bl	800d034 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c79c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800c79e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4826      	ldr	r0, [pc, #152]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c7a6:	f003 fc3d 	bl	8010024 <HAL_TIM_ConfigClockSource>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bf14      	ite	ne
 800c7b0:	2301      	movne	r3, #1
 800c7b2:	2300      	moveq	r3, #0
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <_ZL12MX_TIM2_Initv+0x96>
		Error_Handler();
 800c7ba:	f000 fc3b 	bl	800d034 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800c7be:	4820      	ldr	r0, [pc, #128]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c7c0:	f003 fa16 	bl	800fbf0 <HAL_TIM_PWM_Init>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bf14      	ite	ne
 800c7ca:	2301      	movne	r3, #1
 800c7cc:	2300      	moveq	r3, #0
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 800c7d4:	f000 fc2e 	bl	800d034 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800c7e0:	f107 0320 	add.w	r3, r7, #32
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4816      	ldr	r0, [pc, #88]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c7e8:	f003 fff6 	bl	80107d8 <HAL_TIMEx_MasterConfigSynchronization>
 800c7ec:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	bf14      	ite	ne
 800c7f2:	2301      	movne	r3, #1
 800c7f4:	2300      	moveq	r3, #0
 800c7f6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <_ZL12MX_TIM2_Initv+0xd8>
		Error_Handler();
 800c7fc:	f000 fc1a 	bl	800d034 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c800:	2360      	movs	r3, #96	@ 0x60
 800c802:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c808:	2300      	movs	r3, #0
 800c80a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c80c:	2300      	movs	r3, #0
 800c80e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800c810:	1d3b      	adds	r3, r7, #4
 800c812:	2200      	movs	r2, #0
 800c814:	4619      	mov	r1, r3
 800c816:	480a      	ldr	r0, [pc, #40]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c818:	f003 fb42 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 800c81c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bf14      	ite	ne
 800c822:	2301      	movne	r3, #1
 800c824:	2300      	moveq	r3, #0
 800c826:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <_ZL12MX_TIM2_Initv+0x108>
		Error_Handler();
 800c82c:	f000 fc02 	bl	800d034 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800c830:	4803      	ldr	r0, [pc, #12]	@ (800c840 <_ZL12MX_TIM2_Initv+0x118>)
 800c832:	f000 fd65 	bl	800d300 <HAL_TIM_MspPostInit>

}
 800c836:	bf00      	nop
 800c838:	3738      	adds	r7, #56	@ 0x38
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	200003a4 	.word	0x200003a4
 800c844:	001b7740 	.word	0x001b7740

0800c848 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08a      	sub	sp, #40	@ 0x28
 800c84c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c84e:	f107 0320 	add.w	r3, r7, #32
 800c852:	2200      	movs	r2, #0
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c858:	1d3b      	adds	r3, r7, #4
 800c85a:	2200      	movs	r2, #0
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	605a      	str	r2, [r3, #4]
 800c860:	609a      	str	r2, [r3, #8]
 800c862:	60da      	str	r2, [r3, #12]
 800c864:	611a      	str	r2, [r3, #16]
 800c866:	615a      	str	r2, [r3, #20]
 800c868:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800c86a:	4b29      	ldr	r3, [pc, #164]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c86c:	4a29      	ldr	r2, [pc, #164]	@ (800c914 <_ZL12MX_TIM4_Initv+0xcc>)
 800c86e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800c870:	4b27      	ldr	r3, [pc, #156]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c872:	2200      	movs	r2, #0
 800c874:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c876:	4b26      	ldr	r3, [pc, #152]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c878:	2200      	movs	r2, #0
 800c87a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800c87c:	4b24      	ldr	r3, [pc, #144]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c87e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c882:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c884:	4b22      	ldr	r3, [pc, #136]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c886:	2200      	movs	r2, #0
 800c888:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c88a:	4b21      	ldr	r3, [pc, #132]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800c890:	481f      	ldr	r0, [pc, #124]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c892:	f003 f9ad 	bl	800fbf0 <HAL_TIM_PWM_Init>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	bf14      	ite	ne
 800c89c:	2301      	movne	r3, #1
 800c89e:	2300      	moveq	r3, #0
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 800c8a6:	f000 fbc5 	bl	800d034 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800c8b2:	f107 0320 	add.w	r3, r7, #32
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	4815      	ldr	r0, [pc, #84]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c8ba:	f003 ff8d 	bl	80107d8 <HAL_TIMEx_MasterConfigSynchronization>
 800c8be:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	bf14      	ite	ne
 800c8c4:	2301      	movne	r3, #1
 800c8c6:	2300      	moveq	r3, #0
 800c8c8:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 800c8ce:	f000 fbb1 	bl	800d034 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c8d2:	2360      	movs	r3, #96	@ 0x60
 800c8d4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800c8e2:	1d3b      	adds	r3, r7, #4
 800c8e4:	2204      	movs	r2, #4
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	4809      	ldr	r0, [pc, #36]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c8ea:	f003 fad9 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 800c8ee:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bf14      	ite	ne
 800c8f4:	2301      	movne	r3, #1
 800c8f6:	2300      	moveq	r3, #0
 800c8f8:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 800c8fe:	f000 fb99 	bl	800d034 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit (&htim4);
 800c902:	4803      	ldr	r0, [pc, #12]	@ (800c910 <_ZL12MX_TIM4_Initv+0xc8>)
 800c904:	f000 fcfc 	bl	800d300 <HAL_TIM_MspPostInit>

}
 800c908:	bf00      	nop
 800c90a:	3728      	adds	r7, #40	@ 0x28
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200003ec 	.word	0x200003ec
 800c914:	40000800 	.word	0x40000800

0800c918 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c91e:	463b      	mov	r3, r7
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800c926:	4b1a      	ldr	r3, [pc, #104]	@ (800c990 <_ZL12MX_TIM6_Initv+0x78>)
 800c928:	4a1a      	ldr	r2, [pc, #104]	@ (800c994 <_ZL12MX_TIM6_Initv+0x7c>)
 800c92a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 800c92c:	4b18      	ldr	r3, [pc, #96]	@ (800c990 <_ZL12MX_TIM6_Initv+0x78>)
 800c92e:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800c932:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c934:	4b16      	ldr	r3, [pc, #88]	@ (800c990 <_ZL12MX_TIM6_Initv+0x78>)
 800c936:	2200      	movs	r2, #0
 800c938:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65520;
 800c93a:	4b15      	ldr	r3, [pc, #84]	@ (800c990 <_ZL12MX_TIM6_Initv+0x78>)
 800c93c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800c940:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c942:	4b13      	ldr	r3, [pc, #76]	@ (800c990 <_ZL12MX_TIM6_Initv+0x78>)
 800c944:	2200      	movs	r2, #0
 800c946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800c948:	4811      	ldr	r0, [pc, #68]	@ (800c990 <_ZL12MX_TIM6_Initv+0x78>)
 800c94a:	f003 f891 	bl	800fa70 <HAL_TIM_Base_Init>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	bf14      	ite	ne
 800c954:	2301      	movne	r3, #1
 800c956:	2300      	moveq	r3, #0
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d001      	beq.n	800c962 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800c95e:	f000 fb69 	bl	800d034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c962:	2300      	movs	r3, #0
 800c964:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c966:	2300      	movs	r3, #0
 800c968:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800c96a:	463b      	mov	r3, r7
 800c96c:	4619      	mov	r1, r3
 800c96e:	4808      	ldr	r0, [pc, #32]	@ (800c990 <_ZL12MX_TIM6_Initv+0x78>)
 800c970:	f003 ff32 	bl	80107d8 <HAL_TIMEx_MasterConfigSynchronization>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	bf14      	ite	ne
 800c97a:	2301      	movne	r3, #1
 800c97c:	2300      	moveq	r3, #0
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800c984:	f000 fb56 	bl	800d034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	20000434 	.word	0x20000434
 800c994:	40001000 	.word	0x40001000

0800c998 <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800c998:	b580      	push	{r7, lr}
 800c99a:	b092      	sub	sp, #72	@ 0x48
 800c99c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c99e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]
 800c9a6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c9a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	605a      	str	r2, [r3, #4]
 800c9b2:	609a      	str	r2, [r3, #8]
 800c9b4:	60da      	str	r2, [r3, #12]
 800c9b6:	611a      	str	r2, [r3, #16]
 800c9b8:	615a      	str	r2, [r3, #20]
 800c9ba:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800c9bc:	1d3b      	adds	r3, r7, #4
 800c9be:	2220      	movs	r2, #32
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f006 fbab 	bl	801311e <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800c9c8:	4b3d      	ldr	r3, [pc, #244]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800c9ca:	4a3e      	ldr	r2, [pc, #248]	@ (800cac4 <_ZL12MX_TIM8_Initv+0x12c>)
 800c9cc:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800c9ce:	4b3c      	ldr	r3, [pc, #240]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c9d4:	4b3a      	ldr	r3, [pc, #232]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800c9da:	4b39      	ldr	r3, [pc, #228]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800c9dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c9e0:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c9e2:	4b37      	ldr	r3, [pc, #220]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800c9e8:	4b35      	ldr	r3, [pc, #212]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c9ee:	4b34      	ldr	r3, [pc, #208]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800c9f4:	4832      	ldr	r0, [pc, #200]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800c9f6:	f003 f8fb 	bl	800fbf0 <HAL_TIM_PWM_Init>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	bf14      	ite	ne
 800ca00:	2301      	movne	r3, #1
 800ca02:	2300      	moveq	r3, #0
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <_ZL12MX_TIM8_Initv+0x76>
		Error_Handler();
 800ca0a:	f000 fb13 	bl	800d034 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca12:	2300      	movs	r3, #0
 800ca14:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800ca16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	4828      	ldr	r0, [pc, #160]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800ca1e:	f003 fedb 	bl	80107d8 <HAL_TIMEx_MasterConfigSynchronization>
 800ca22:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	bf14      	ite	ne
 800ca28:	2301      	movne	r3, #1
 800ca2a:	2300      	moveq	r3, #0
 800ca2c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <_ZL12MX_TIM8_Initv+0x9e>
		Error_Handler();
 800ca32:	f000 faff 	bl	800d034 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca36:	2360      	movs	r3, #96	@ 0x60
 800ca38:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ca42:	2300      	movs	r3, #0
 800ca44:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca46:	2300      	movs	r3, #0
 800ca48:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800ca52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca56:	2204      	movs	r2, #4
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4819      	ldr	r0, [pc, #100]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800ca5c:	f003 fa20 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 800ca60:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	bf14      	ite	ne
 800ca66:	2301      	movne	r3, #1
 800ca68:	2300      	moveq	r3, #0
 800ca6a:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <_ZL12MX_TIM8_Initv+0xdc>
		Error_Handler();
 800ca70:	f000 fae0 	bl	800d034 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ca74:	2300      	movs	r3, #0
 800ca76:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ca8c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800ca92:	1d3b      	adds	r3, r7, #4
 800ca94:	4619      	mov	r1, r3
 800ca96:	480a      	ldr	r0, [pc, #40]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800ca98:	f003 ff1a 	bl	80108d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800ca9c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	bf14      	ite	ne
 800caa2:	2301      	movne	r3, #1
 800caa4:	2300      	moveq	r3, #0
 800caa6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d001      	beq.n	800cab0 <_ZL12MX_TIM8_Initv+0x118>
		Error_Handler();
 800caac:	f000 fac2 	bl	800d034 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit (&htim8);
 800cab0:	4803      	ldr	r0, [pc, #12]	@ (800cac0 <_ZL12MX_TIM8_Initv+0x128>)
 800cab2:	f000 fc25 	bl	800d300 <HAL_TIM_MspPostInit>

}
 800cab6:	bf00      	nop
 800cab8:	3748      	adds	r7, #72	@ 0x48
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	2000047c 	.word	0x2000047c
 800cac4:	40010400 	.word	0x40010400

0800cac8 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800cacc:	4b13      	ldr	r3, [pc, #76]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cace:	4a14      	ldr	r2, [pc, #80]	@ (800cb20 <_ZL19MX_USART2_UART_Initv+0x58>)
 800cad0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800cad2:	4b12      	ldr	r3, [pc, #72]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cad8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cada:	4b10      	ldr	r3, [pc, #64]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cadc:	2200      	movs	r2, #0
 800cade:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800cae0:	4b0e      	ldr	r3, [pc, #56]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800cae6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cae8:	2200      	movs	r2, #0
 800caea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800caec:	4b0b      	ldr	r3, [pc, #44]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800caee:	220c      	movs	r2, #12
 800caf0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800caf2:	4b0a      	ldr	r3, [pc, #40]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800caf8:	4b08      	ldr	r3, [pc, #32]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800cafe:	4807      	ldr	r0, [pc, #28]	@ (800cb1c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cb00:	f003 ff4c 	bl	801099c <HAL_UART_Init>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	bf14      	ite	ne
 800cb0a:	2301      	movne	r3, #1
 800cb0c:	2300      	moveq	r3, #0
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d001      	beq.n	800cb18 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800cb14:	f000 fa8e 	bl	800d034 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800cb18:	bf00      	nop
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200004c4 	.word	0x200004c4
 800cb20:	40004400 	.word	0x40004400

0800cb24 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800cb24:	b580      	push	{r7, lr}
 800cb26:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800cb28:	4b13      	ldr	r3, [pc, #76]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb2a:	4a14      	ldr	r2, [pc, #80]	@ (800cb7c <_ZL19MX_USART3_UART_Initv+0x58>)
 800cb2c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800cb2e:	4b12      	ldr	r3, [pc, #72]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cb34:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800cb36:	4b10      	ldr	r3, [pc, #64]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800cb3c:	4b0e      	ldr	r3, [pc, #56]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800cb42:	4b0d      	ldr	r3, [pc, #52]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800cb48:	4b0b      	ldr	r3, [pc, #44]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb4a:	220c      	movs	r2, #12
 800cb4c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb4e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb54:	4b08      	ldr	r3, [pc, #32]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800cb5a:	4807      	ldr	r0, [pc, #28]	@ (800cb78 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cb5c:	f003 ff1e 	bl	801099c <HAL_UART_Init>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	bf14      	ite	ne
 800cb66:	2301      	movne	r3, #1
 800cb68:	2300      	moveq	r3, #0
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <_ZL19MX_USART3_UART_Initv+0x50>
		Error_Handler();
 800cb70:	f000 fa60 	bl	800d034 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800cb74:	bf00      	nop
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	20000508 	.word	0x20000508
 800cb7c:	40004800 	.word	0x40004800

0800cb80 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08a      	sub	sp, #40	@ 0x28
 800cb84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800cb86:	f107 0314 	add.w	r3, r7, #20
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	605a      	str	r2, [r3, #4]
 800cb90:	609a      	str	r2, [r3, #8]
 800cb92:	60da      	str	r2, [r3, #12]
 800cb94:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800cb96:	2300      	movs	r3, #0
 800cb98:	613b      	str	r3, [r7, #16]
 800cb9a:	4b43      	ldr	r3, [pc, #268]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cb9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb9e:	4a42      	ldr	r2, [pc, #264]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cba0:	f043 0304 	orr.w	r3, r3, #4
 800cba4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cba6:	4b40      	ldr	r3, [pc, #256]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	613b      	str	r3, [r7, #16]
 800cbb0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	4b3c      	ldr	r3, [pc, #240]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbba:	4a3b      	ldr	r2, [pc, #236]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbc0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbc2:	4b39      	ldr	r3, [pc, #228]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60bb      	str	r3, [r7, #8]
 800cbd2:	4b35      	ldr	r3, [pc, #212]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbd6:	4a34      	ldr	r2, [pc, #208]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbd8:	f043 0301 	orr.w	r3, r3, #1
 800cbdc:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbde:	4b32      	ldr	r3, [pc, #200]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	60bb      	str	r3, [r7, #8]
 800cbe8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800cbea:	2300      	movs	r3, #0
 800cbec:	607b      	str	r3, [r7, #4]
 800cbee:	4b2e      	ldr	r3, [pc, #184]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbf2:	4a2d      	ldr	r2, [pc, #180]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbf4:	f043 0302 	orr.w	r3, r3, #2
 800cbf8:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbfa:	4b2b      	ldr	r3, [pc, #172]	@ (800cca8 <_ZL12MX_GPIO_Initv+0x128>)
 800cbfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbfe:	f003 0302 	and.w	r3, r3, #2
 800cc02:	607b      	str	r3, [r7, #4]
 800cc04:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ssel1_Pin | LD2_Pin | ssel2_Pin, GPIO_PIN_RESET);
 800cc06:	2200      	movs	r2, #0
 800cc08:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800cc0c:	4827      	ldr	r0, [pc, #156]	@ (800ccac <_ZL12MX_GPIO_Initv+0x12c>)
 800cc0e:	f001 fa0b 	bl	800e028 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800cc12:	2200      	movs	r2, #0
 800cc14:	f241 2130 	movw	r1, #4656	@ 0x1230
 800cc18:	4825      	ldr	r0, [pc, #148]	@ (800ccb0 <_ZL12MX_GPIO_Initv+0x130>)
 800cc1a:	f001 fa05 	bl	800e028 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800cc1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cc22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800cc24:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800cc28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800cc2e:	f107 0314 	add.w	r3, r7, #20
 800cc32:	4619      	mov	r1, r3
 800cc34:	481f      	ldr	r0, [pc, #124]	@ (800ccb4 <_ZL12MX_GPIO_Initv+0x134>)
 800cc36:	f001 f863 	bl	800dd00 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cc3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800cc42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc44:	2301      	movs	r3, #1
 800cc46:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc48:	f107 0314 	add.w	r3, r7, #20
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	4819      	ldr	r0, [pc, #100]	@ (800ccb4 <_ZL12MX_GPIO_Initv+0x134>)
 800cc50:	f001 f856 	bl	800dd00 <HAL_GPIO_Init>

	/*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
	GPIO_InitStruct.Pin = ssel1_Pin | LD2_Pin | ssel2_Pin;
 800cc54:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800cc58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc62:	2300      	movs	r3, #0
 800cc64:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc66:	f107 0314 	add.w	r3, r7, #20
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	480f      	ldr	r0, [pc, #60]	@ (800ccac <_ZL12MX_GPIO_Initv+0x12c>)
 800cc6e:	f001 f847 	bl	800dd00 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 reset_shield_2_Pin reset_shield_1_Pin PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin
 800cc72:	f241 2330 	movw	r3, #4656	@ 0x1230
 800cc76:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc80:	2300      	movs	r3, #0
 800cc82:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc84:	f107 0314 	add.w	r3, r7, #20
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4809      	ldr	r0, [pc, #36]	@ (800ccb0 <_ZL12MX_GPIO_Initv+0x130>)
 800cc8c:	f001 f838 	bl	800dd00 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800cc90:	2200      	movs	r2, #0
 800cc92:	2100      	movs	r1, #0
 800cc94:	2006      	movs	r0, #6
 800cc96:	f000 ff6a 	bl	800db6e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800cc9a:	2006      	movs	r0, #6
 800cc9c:	f000 ff83 	bl	800dba6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800cca0:	bf00      	nop
 800cca2:	3728      	adds	r7, #40	@ 0x28
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	40023800 	.word	0x40023800
 800ccac:	40020000 	.word	0x40020000
 800ccb0:	40020400 	.word	0x40020400
 800ccb4:	40020800 	.word	0x40020800

0800ccb8 <_Z9moveSpeedddd>:

/* USER CODE BEGIN 4 */


void moveSpeed(double vx, double vy, double wz)
{
 800ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccba:	b08d      	sub	sp, #52	@ 0x34
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	ed87 0b04 	vstr	d0, [r7, #16]
 800ccc2:	ed87 1b02 	vstr	d1, [r7, #8]
 800ccc6:	ed87 2b00 	vstr	d2, [r7]
	//calcul des vitesses
	double Wm1 = -1/(2*RAYON_ROUES) * vy - sqrt(3)/(2*RAYON_ROUES) * vx + RAYON_EMBASE / RAYON_ROUES * wz;
 800ccca:	a35d      	add	r3, pc, #372	@ (adr r3, 800ce40 <_Z9moveSpeedddd+0x188>)
 800cccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ccd4:	f7f3 fcc0 	bl	8000658 <__aeabi_dmul>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	4614      	mov	r4, r2
 800ccde:	461d      	mov	r5, r3
 800cce0:	2003      	movs	r0, #3
 800cce2:	f7ff fad9 	bl	800c298 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800cce6:	ec51 0b10 	vmov	r0, r1, d0
 800ccea:	a357      	add	r3, pc, #348	@ (adr r3, 800ce48 <_Z9moveSpeedddd+0x190>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	f7f3 fddc 	bl	80008ac <__aeabi_ddiv>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd00:	f7f3 fcaa 	bl	8000658 <__aeabi_dmul>
 800cd04:	4602      	mov	r2, r0
 800cd06:	460b      	mov	r3, r1
 800cd08:	4620      	mov	r0, r4
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	f7f3 faec 	bl	80002e8 <__aeabi_dsub>
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	4614      	mov	r4, r2
 800cd16:	461d      	mov	r5, r3
 800cd18:	a34d      	add	r3, pc, #308	@ (adr r3, 800ce50 <_Z9moveSpeedddd+0x198>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd22:	f7f3 fc99 	bl	8000658 <__aeabi_dmul>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7f3 fadd 	bl	80002ec <__adddf3>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double Wm3 = sqrt(3)/(2*RAYON_ROUES) * vx - 1/(2*RAYON_ROUES) * vy + RAYON_EMBASE / RAYON_ROUES * wz;
 800cd3a:	2003      	movs	r0, #3
 800cd3c:	f7ff faac 	bl	800c298 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800cd40:	ec51 0b10 	vmov	r0, r1, d0
 800cd44:	a340      	add	r3, pc, #256	@ (adr r3, 800ce48 <_Z9moveSpeedddd+0x190>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f7f3 fdaf 	bl	80008ac <__aeabi_ddiv>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	4610      	mov	r0, r2
 800cd54:	4619      	mov	r1, r3
 800cd56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd5a:	f7f3 fc7d 	bl	8000658 <__aeabi_dmul>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4614      	mov	r4, r2
 800cd64:	461d      	mov	r5, r3
 800cd66:	a33c      	add	r3, pc, #240	@ (adr r3, 800ce58 <_Z9moveSpeedddd+0x1a0>)
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd70:	f7f3 fc72 	bl	8000658 <__aeabi_dmul>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	4620      	mov	r0, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7f3 fab4 	bl	80002e8 <__aeabi_dsub>
 800cd80:	4602      	mov	r2, r0
 800cd82:	460b      	mov	r3, r1
 800cd84:	4614      	mov	r4, r2
 800cd86:	461d      	mov	r5, r3
 800cd88:	a331      	add	r3, pc, #196	@ (adr r3, 800ce50 <_Z9moveSpeedddd+0x198>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd92:	f7f3 fc61 	bl	8000658 <__aeabi_dmul>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	f7f3 faa5 	bl	80002ec <__adddf3>
 800cda2:	4602      	mov	r2, r0
 800cda4:	460b      	mov	r3, r1
 800cda6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Wm2 = (1/RAYON_ROUES * vy + RAYON_EMBASE/RAYON_ROUES*wz);//1/RAYON_ROUES * vy + RAYON_EMBASE * wz;
 800cdaa:	a32d      	add	r3, pc, #180	@ (adr r3, 800ce60 <_Z9moveSpeedddd+0x1a8>)
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cdb4:	f7f3 fc50 	bl	8000658 <__aeabi_dmul>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4614      	mov	r4, r2
 800cdbe:	461d      	mov	r5, r3
 800cdc0:	a323      	add	r3, pc, #140	@ (adr r3, 800ce50 <_Z9moveSpeedddd+0x198>)
 800cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdca:	f7f3 fc45 	bl	8000658 <__aeabi_dmul>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	f7f3 fa89 	bl	80002ec <__adddf3>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//pilotage des moteurs
	moteurs->motors_on();
 800cde2:	4b15      	ldr	r3, [pc, #84]	@ (800ce38 <_Z9moveSpeedddd+0x180>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7f5 fc84 	bl	80026f4 <_ZN11BlocMoteurs9motors_onEv>
	moteurs->commande_vitesses_absolues(Wm3, 0, Wm2, -Wm1);
 800cdec:	4b12      	ldr	r3, [pc, #72]	@ (800ce38 <_Z9moveSpeedddd+0x180>)
 800cdee:	681c      	ldr	r4, [r3, #0]
 800cdf0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cdf4:	f7f3 ff08 	bl	8000c08 <__aeabi_d2f>
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cdfe:	f7f3 ff03 	bl	8000c08 <__aeabi_d2f>
 800ce02:	4606      	mov	r6, r0
 800ce04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ce08:	f7f3 fefe 	bl	8000c08 <__aeabi_d2f>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef1 7a67 	vneg.f32	s15, s15
 800ce16:	eef0 1a67 	vmov.f32	s3, s15
 800ce1a:	ee01 6a10 	vmov	s2, r6
 800ce1e:	eddf 0a07 	vldr	s1, [pc, #28]	@ 800ce3c <_Z9moveSpeedddd+0x184>
 800ce22:	ee00 5a10 	vmov	s0, r5
 800ce26:	4620      	mov	r0, r4
 800ce28:	f7f5 fc09 	bl	800263e <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>
}
 800ce2c:	bf00      	nop
 800ce2e:	3734      	adds	r7, #52	@ 0x34
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce34:	f3af 8000 	nop.w
 800ce38:	2000054c 	.word	0x2000054c
 800ce3c:	00000000 	.word	0x00000000
 800ce40:	08d3dcb0 	.word	0x08d3dcb0
 800ce44:	c0313dcb 	.word	0xc0313dcb
 800ce48:	0e560419 	.word	0x0e560419
 800ce4c:	3fadb22d 	.word	0x3fadb22d
 800ce50:	c234f72c 	.word	0xc234f72c
 800ce54:	40134f72 	.word	0x40134f72
 800ce58:	08d3dcb0 	.word	0x08d3dcb0
 800ce5c:	40313dcb 	.word	0x40313dcb
 800ce60:	08d3dcb0 	.word	0x08d3dcb0
 800ce64:	40413dcb 	.word	0x40413dcb

0800ce68 <_Z4stopv>:


void stop()
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
	moteurs->motors_stop_hard();
 800ce6c:	4b03      	ldr	r3, [pc, #12]	@ (800ce7c <_Z4stopv+0x14>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7f5 fc4c 	bl	800270e <_ZN11BlocMoteurs16motors_stop_hardEv>
}
 800ce76:	bf00      	nop
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	2000054c 	.word	0x2000054c

0800ce80 <HAL_GPIO_EXTI_Callback>:


// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800ce8a:	88fb      	ldrh	r3, [r7, #6]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d102      	bne.n	800ce96 <HAL_GPIO_EXTI_Callback+0x16>
		// Motors are busy when pin low. Rising edge -> no longer busy
		motors_busy = false;
 800ce90:	4b04      	ldr	r3, [pc, #16]	@ (800cea4 <HAL_GPIO_EXTI_Callback+0x24>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	701a      	strb	r2, [r3, #0]
	}
}
 800ce96:	bf00      	nop
 800ce98:	370c      	adds	r7, #12
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	20000569 	.word	0x20000569

0800cea8 <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a4e      	ldr	r2, [pc, #312]	@ (800cff0 <HAL_UART_RxCpltCallback+0x148>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	f040 8081 	bne.w	800cfbe <HAL_UART_RxCpltCallback+0x116>
	{
		switch(uart_received_char)
 800cebc:	4b4d      	ldr	r3, [pc, #308]	@ (800cff4 <HAL_UART_RxCpltCallback+0x14c>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	3b2e      	subs	r3, #46	@ 0x2e
 800cec2:	2b0b      	cmp	r3, #11
 800cec4:	d875      	bhi.n	800cfb2 <HAL_UART_RxCpltCallback+0x10a>
 800cec6:	a201      	add	r2, pc, #4	@ (adr r2, 800cecc <HAL_UART_RxCpltCallback+0x24>)
 800cec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cecc:	0800cf87 	.word	0x0800cf87
 800ced0:	0800cfb3 	.word	0x0800cfb3
 800ced4:	0800cf7f 	.word	0x0800cf7f
 800ced8:	0800cfb3 	.word	0x0800cfb3
 800cedc:	0800cf25 	.word	0x0800cf25
 800cee0:	0800cfb3 	.word	0x0800cfb3
 800cee4:	0800cf37 	.word	0x0800cf37
 800cee8:	0800cefd 	.word	0x0800cefd
 800ceec:	0800cf49 	.word	0x0800cf49
 800cef0:	0800cf5b 	.word	0x0800cf5b
 800cef4:	0800cf13 	.word	0x0800cf13
 800cef8:	0800cf6d 	.word	0x0800cf6d
		{
		case '5':
			if(motors_busy) transmit_pos = true;
 800cefc:	4b3e      	ldr	r3, [pc, #248]	@ (800cff8 <HAL_UART_RxCpltCallback+0x150>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d002      	beq.n	800cf0c <HAL_UART_RxCpltCallback+0x64>
 800cf06:	4b3d      	ldr	r3, [pc, #244]	@ (800cffc <HAL_UART_RxCpltCallback+0x154>)
 800cf08:	2201      	movs	r2, #1
 800cf0a:	701a      	strb	r2, [r3, #0]
			stop();
 800cf0c:	f7ff ffac 	bl	800ce68 <_Z4stopv>
			break;
 800cf10:	e050      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>

		case '8':
			moveSpeed(0.1, 0, 0);
 800cf12:	ed9f 2b2d 	vldr	d2, [pc, #180]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf16:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf1a:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 800cfd0 <HAL_UART_RxCpltCallback+0x128>
 800cf1e:	f7ff fecb 	bl	800ccb8 <_Z9moveSpeedddd>
			break;
 800cf22:	e047      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>

		case '2':
			moveSpeed(-0.1, 0, 0);
 800cf24:	ed9f 2b28 	vldr	d2, [pc, #160]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf28:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf2c:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 800cfd8 <HAL_UART_RxCpltCallback+0x130>
 800cf30:	f7ff fec2 	bl	800ccb8 <_Z9moveSpeedddd>
			break;
 800cf34:	e03e      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>

		case '4':
			moveSpeed(0, 0.1, 0);
 800cf36:	ed9f 2b24 	vldr	d2, [pc, #144]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf3a:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 800cfd0 <HAL_UART_RxCpltCallback+0x128>
 800cf3e:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf42:	f7ff feb9 	bl	800ccb8 <_Z9moveSpeedddd>
			break;
 800cf46:	e035      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>

		case '6':
			moveSpeed(0, -0.1, 0);
 800cf48:	ed9f 2b1f 	vldr	d2, [pc, #124]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf4c:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 800cfd8 <HAL_UART_RxCpltCallback+0x130>
 800cf50:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf54:	f7ff feb0 	bl	800ccb8 <_Z9moveSpeedddd>
			break;
 800cf58:	e02c      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>

		case '7':
			moveSpeed(0, 0, 1);
 800cf5a:	ed9f 2b21 	vldr	d2, [pc, #132]	@ 800cfe0 <HAL_UART_RxCpltCallback+0x138>
 800cf5e:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf62:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf66:	f7ff fea7 	bl	800ccb8 <_Z9moveSpeedddd>
			break;
 800cf6a:	e023      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>

		case '9':
			moveSpeed(0, 0, -1);
 800cf6c:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 800cfe8 <HAL_UART_RxCpltCallback+0x140>
 800cf70:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf74:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 800cfc8 <HAL_UART_RxCpltCallback+0x120>
 800cf78:	f7ff fe9e 	bl	800ccb8 <_Z9moveSpeedddd>
			break;
 800cf7c:	e01a      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>

		case '0':
			transmit_pos = true; //trigger le calcul de la position et son envoi par uart
 800cf7e:	4b1f      	ldr	r3, [pc, #124]	@ (800cffc <HAL_UART_RxCpltCallback+0x154>)
 800cf80:	2201      	movs	r2, #1
 800cf82:	701a      	strb	r2, [r3, #0]
			break;
 800cf84:	e016      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>

		case '.':
			position[0] = 0;
 800cf86:	491e      	ldr	r1, [pc, #120]	@ (800d000 <HAL_UART_RxCpltCallback+0x158>)
 800cf88:	f04f 0200 	mov.w	r2, #0
 800cf8c:	f04f 0300 	mov.w	r3, #0
 800cf90:	e9c1 2300 	strd	r2, r3, [r1]
			position[1] = 0;
 800cf94:	491a      	ldr	r1, [pc, #104]	@ (800d000 <HAL_UART_RxCpltCallback+0x158>)
 800cf96:	f04f 0200 	mov.w	r2, #0
 800cf9a:	f04f 0300 	mov.w	r3, #0
 800cf9e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			position[2] = 0;
 800cfa2:	4917      	ldr	r1, [pc, #92]	@ (800d000 <HAL_UART_RxCpltCallback+0x158>)
 800cfa4:	f04f 0200 	mov.w	r2, #0
 800cfa8:	f04f 0300 	mov.w	r3, #0
 800cfac:	e9c1 2304 	strd	r2, r3, [r1, #16]
			break;
 800cfb0:	e000      	b.n	800cfb4 <HAL_UART_RxCpltCallback+0x10c>



		default:
			break;
 800cfb2:	bf00      	nop
		}

		// ALWAYS READ UART
		HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	490f      	ldr	r1, [pc, #60]	@ (800cff4 <HAL_UART_RxCpltCallback+0x14c>)
 800cfb8:	4812      	ldr	r0, [pc, #72]	@ (800d004 <HAL_UART_RxCpltCallback+0x15c>)
 800cfba:	f003 fd3c 	bl	8010a36 <HAL_UART_Receive_IT>
	}
}
 800cfbe:	bf00      	nop
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
	...
 800cfd0:	9999999a 	.word	0x9999999a
 800cfd4:	3fb99999 	.word	0x3fb99999
 800cfd8:	9999999a 	.word	0x9999999a
 800cfdc:	bfb99999 	.word	0xbfb99999
 800cfe0:	00000000 	.word	0x00000000
 800cfe4:	3ff00000 	.word	0x3ff00000
 800cfe8:	00000000 	.word	0x00000000
 800cfec:	bff00000 	.word	0xbff00000
 800cff0:	40004400 	.word	0x40004400
 800cff4:	2000056a 	.word	0x2000056a
 800cff8:	20000569 	.word	0x20000569
 800cffc:	20000568 	.word	0x20000568
 800d000:	20000550 	.word	0x20000550
 800d004:	200004c4 	.word	0x200004c4

0800d008 <HAL_TIM_PeriodElapsedCallback>:

//timers callbacks
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a06      	ldr	r2, [pc, #24]	@ (800d02c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d102      	bne.n	800d01e <HAL_TIM_PeriodElapsedCallback+0x16>
		transmit_pos = true;
 800d018:	4b05      	ldr	r3, [pc, #20]	@ (800d030 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800d01a:	2201      	movs	r2, #1
 800d01c:	701a      	strb	r2, [r3, #0]
	}
}
 800d01e:	bf00      	nop
 800d020:	370c      	adds	r7, #12
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	200003a4 	.word	0x200003a4
 800d030:	20000568 	.word	0x20000568

0800d034 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800d034:	b480      	push	{r7}
 800d036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d038:	b672      	cpsid	i
}
 800d03a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800d03c:	bf00      	nop
 800d03e:	e7fd      	b.n	800d03c <Error_Handler+0x8>

0800d040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d046:	2300      	movs	r3, #0
 800d048:	607b      	str	r3, [r7, #4]
 800d04a:	4b10      	ldr	r3, [pc, #64]	@ (800d08c <HAL_MspInit+0x4c>)
 800d04c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d04e:	4a0f      	ldr	r2, [pc, #60]	@ (800d08c <HAL_MspInit+0x4c>)
 800d050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d054:	6453      	str	r3, [r2, #68]	@ 0x44
 800d056:	4b0d      	ldr	r3, [pc, #52]	@ (800d08c <HAL_MspInit+0x4c>)
 800d058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d05a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d05e:	607b      	str	r3, [r7, #4]
 800d060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d062:	2300      	movs	r3, #0
 800d064:	603b      	str	r3, [r7, #0]
 800d066:	4b09      	ldr	r3, [pc, #36]	@ (800d08c <HAL_MspInit+0x4c>)
 800d068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d06a:	4a08      	ldr	r2, [pc, #32]	@ (800d08c <HAL_MspInit+0x4c>)
 800d06c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d070:	6413      	str	r3, [r2, #64]	@ 0x40
 800d072:	4b06      	ldr	r3, [pc, #24]	@ (800d08c <HAL_MspInit+0x4c>)
 800d074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d07a:	603b      	str	r3, [r7, #0]
 800d07c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800d07e:	2007      	movs	r0, #7
 800d080:	f000 fd6a 	bl	800db58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d084:	bf00      	nop
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	40023800 	.word	0x40023800

0800d090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b08c      	sub	sp, #48	@ 0x30
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d098:	f107 031c 	add.w	r3, r7, #28
 800d09c:	2200      	movs	r2, #0
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	605a      	str	r2, [r3, #4]
 800d0a2:	609a      	str	r2, [r3, #8]
 800d0a4:	60da      	str	r2, [r3, #12]
 800d0a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a45      	ldr	r2, [pc, #276]	@ (800d1c4 <HAL_SPI_MspInit+0x134>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d14a      	bne.n	800d148 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	61bb      	str	r3, [r7, #24]
 800d0b6:	4b44      	ldr	r3, [pc, #272]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ba:	4a43      	ldr	r2, [pc, #268]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d0c0:	6453      	str	r3, [r2, #68]	@ 0x44
 800d0c2:	4b41      	ldr	r3, [pc, #260]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d0ca:	61bb      	str	r3, [r7, #24]
 800d0cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	617b      	str	r3, [r7, #20]
 800d0d2:	4b3d      	ldr	r3, [pc, #244]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0d6:	4a3c      	ldr	r2, [pc, #240]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0d8:	f043 0301 	orr.w	r3, r3, #1
 800d0dc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d0de:	4b3a      	ldr	r3, [pc, #232]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0e2:	f003 0301 	and.w	r3, r3, #1
 800d0e6:	617b      	str	r3, [r7, #20]
 800d0e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	613b      	str	r3, [r7, #16]
 800d0ee:	4b36      	ldr	r3, [pc, #216]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0f2:	4a35      	ldr	r2, [pc, #212]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0f4:	f043 0302 	orr.w	r3, r3, #2
 800d0f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d0fa:	4b33      	ldr	r3, [pc, #204]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0fe:	f003 0302 	and.w	r3, r3, #2
 800d102:	613b      	str	r3, [r7, #16]
 800d104:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d106:	23c0      	movs	r3, #192	@ 0xc0
 800d108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d10a:	2302      	movs	r3, #2
 800d10c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d10e:	2300      	movs	r3, #0
 800d110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d112:	2303      	movs	r3, #3
 800d114:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d116:	2305      	movs	r3, #5
 800d118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d11a:	f107 031c 	add.w	r3, r7, #28
 800d11e:	4619      	mov	r1, r3
 800d120:	482a      	ldr	r0, [pc, #168]	@ (800d1cc <HAL_SPI_MspInit+0x13c>)
 800d122:	f000 fded 	bl	800dd00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d126:	2308      	movs	r3, #8
 800d128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d12a:	2302      	movs	r3, #2
 800d12c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d132:	2303      	movs	r3, #3
 800d134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d136:	2305      	movs	r3, #5
 800d138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d13a:	f107 031c 	add.w	r3, r7, #28
 800d13e:	4619      	mov	r1, r3
 800d140:	4823      	ldr	r0, [pc, #140]	@ (800d1d0 <HAL_SPI_MspInit+0x140>)
 800d142:	f000 fddd 	bl	800dd00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d146:	e038      	b.n	800d1ba <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a21      	ldr	r2, [pc, #132]	@ (800d1d4 <HAL_SPI_MspInit+0x144>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d133      	bne.n	800d1ba <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d152:	2300      	movs	r3, #0
 800d154:	60fb      	str	r3, [r7, #12]
 800d156:	4b1c      	ldr	r3, [pc, #112]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d15a:	4a1b      	ldr	r2, [pc, #108]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d15c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d160:	6413      	str	r3, [r2, #64]	@ 0x40
 800d162:	4b19      	ldr	r3, [pc, #100]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d16e:	2300      	movs	r3, #0
 800d170:	60bb      	str	r3, [r7, #8]
 800d172:	4b15      	ldr	r3, [pc, #84]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d176:	4a14      	ldr	r2, [pc, #80]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d178:	f043 0304 	orr.w	r3, r3, #4
 800d17c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d17e:	4b12      	ldr	r3, [pc, #72]	@ (800d1c8 <HAL_SPI_MspInit+0x138>)
 800d180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d182:	f003 0304 	and.w	r3, r3, #4
 800d186:	60bb      	str	r3, [r7, #8]
 800d188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800d18a:	238c      	movs	r3, #140	@ 0x8c
 800d18c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d18e:	2302      	movs	r3, #2
 800d190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d192:	2300      	movs	r3, #0
 800d194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d196:	2303      	movs	r3, #3
 800d198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d19a:	2305      	movs	r3, #5
 800d19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d19e:	f107 031c 	add.w	r3, r7, #28
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	480c      	ldr	r0, [pc, #48]	@ (800d1d8 <HAL_SPI_MspInit+0x148>)
 800d1a6:	f000 fdab 	bl	800dd00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	2024      	movs	r0, #36	@ 0x24
 800d1b0:	f000 fcdd 	bl	800db6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800d1b4:	2024      	movs	r0, #36	@ 0x24
 800d1b6:	f000 fcf6 	bl	800dba6 <HAL_NVIC_EnableIRQ>
}
 800d1ba:	bf00      	nop
 800d1bc:	3730      	adds	r7, #48	@ 0x30
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	40013000 	.word	0x40013000
 800d1c8:	40023800 	.word	0x40023800
 800d1cc:	40020000 	.word	0x40020000
 800d1d0:	40020400 	.word	0x40020400
 800d1d4:	40003800 	.word	0x40003800
 800d1d8:	40020800 	.word	0x40020800

0800d1dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a1f      	ldr	r2, [pc, #124]	@ (800d268 <HAL_TIM_PWM_MspInit+0x8c>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d10e      	bne.n	800d20c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	617b      	str	r3, [r7, #20]
 800d1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1f6:	4a1d      	ldr	r2, [pc, #116]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d1f8:	f043 0301 	orr.w	r3, r3, #1
 800d1fc:	6453      	str	r3, [r2, #68]	@ 0x44
 800d1fe:	4b1b      	ldr	r3, [pc, #108]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d202:	f003 0301 	and.w	r3, r3, #1
 800d206:	617b      	str	r3, [r7, #20]
 800d208:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d20a:	e026      	b.n	800d25a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a17      	ldr	r2, [pc, #92]	@ (800d270 <HAL_TIM_PWM_MspInit+0x94>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d10e      	bne.n	800d234 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d216:	2300      	movs	r3, #0
 800d218:	613b      	str	r3, [r7, #16]
 800d21a:	4b14      	ldr	r3, [pc, #80]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d21e:	4a13      	ldr	r2, [pc, #76]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d220:	f043 0304 	orr.w	r3, r3, #4
 800d224:	6413      	str	r3, [r2, #64]	@ 0x40
 800d226:	4b11      	ldr	r3, [pc, #68]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d22a:	f003 0304 	and.w	r3, r3, #4
 800d22e:	613b      	str	r3, [r7, #16]
 800d230:	693b      	ldr	r3, [r7, #16]
}
 800d232:	e012      	b.n	800d25a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a0e      	ldr	r2, [pc, #56]	@ (800d274 <HAL_TIM_PWM_MspInit+0x98>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d10d      	bne.n	800d25a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d23e:	2300      	movs	r3, #0
 800d240:	60fb      	str	r3, [r7, #12]
 800d242:	4b0a      	ldr	r3, [pc, #40]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d246:	4a09      	ldr	r2, [pc, #36]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d248:	f043 0302 	orr.w	r3, r3, #2
 800d24c:	6453      	str	r3, [r2, #68]	@ 0x44
 800d24e:	4b07      	ldr	r3, [pc, #28]	@ (800d26c <HAL_TIM_PWM_MspInit+0x90>)
 800d250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d252:	f003 0302 	and.w	r3, r3, #2
 800d256:	60fb      	str	r3, [r7, #12]
 800d258:	68fb      	ldr	r3, [r7, #12]
}
 800d25a:	bf00      	nop
 800d25c:	371c      	adds	r7, #28
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	40010000 	.word	0x40010000
 800d26c:	40023800 	.word	0x40023800
 800d270:	40000800 	.word	0x40000800
 800d274:	40010400 	.word	0x40010400

0800d278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d288:	d116      	bne.n	800d2b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d28a:	2300      	movs	r3, #0
 800d28c:	60fb      	str	r3, [r7, #12]
 800d28e:	4b1a      	ldr	r3, [pc, #104]	@ (800d2f8 <HAL_TIM_Base_MspInit+0x80>)
 800d290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d292:	4a19      	ldr	r2, [pc, #100]	@ (800d2f8 <HAL_TIM_Base_MspInit+0x80>)
 800d294:	f043 0301 	orr.w	r3, r3, #1
 800d298:	6413      	str	r3, [r2, #64]	@ 0x40
 800d29a:	4b17      	ldr	r3, [pc, #92]	@ (800d2f8 <HAL_TIM_Base_MspInit+0x80>)
 800d29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	60fb      	str	r3, [r7, #12]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800d2a6:	2202      	movs	r2, #2
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	201c      	movs	r0, #28
 800d2ac:	f000 fc5f 	bl	800db6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d2b0:	201c      	movs	r0, #28
 800d2b2:	f000 fc78 	bl	800dba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800d2b6:	e01a      	b.n	800d2ee <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a0f      	ldr	r2, [pc, #60]	@ (800d2fc <HAL_TIM_Base_MspInit+0x84>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d115      	bne.n	800d2ee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	60bb      	str	r3, [r7, #8]
 800d2c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f8 <HAL_TIM_Base_MspInit+0x80>)
 800d2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ca:	4a0b      	ldr	r2, [pc, #44]	@ (800d2f8 <HAL_TIM_Base_MspInit+0x80>)
 800d2cc:	f043 0310 	orr.w	r3, r3, #16
 800d2d0:	6413      	str	r3, [r2, #64]	@ 0x40
 800d2d2:	4b09      	ldr	r3, [pc, #36]	@ (800d2f8 <HAL_TIM_Base_MspInit+0x80>)
 800d2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2d6:	f003 0310 	and.w	r3, r3, #16
 800d2da:	60bb      	str	r3, [r7, #8]
 800d2dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	2036      	movs	r0, #54	@ 0x36
 800d2e4:	f000 fc43 	bl	800db6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d2e8:	2036      	movs	r0, #54	@ 0x36
 800d2ea:	f000 fc5c 	bl	800dba6 <HAL_NVIC_EnableIRQ>
}
 800d2ee:	bf00      	nop
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	40023800 	.word	0x40023800
 800d2fc:	40001000 	.word	0x40001000

0800d300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08c      	sub	sp, #48	@ 0x30
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d308:	f107 031c 	add.w	r3, r7, #28
 800d30c:	2200      	movs	r2, #0
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	605a      	str	r2, [r3, #4]
 800d312:	609a      	str	r2, [r3, #8]
 800d314:	60da      	str	r2, [r3, #12]
 800d316:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a49      	ldr	r2, [pc, #292]	@ (800d444 <HAL_TIM_MspPostInit+0x144>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d11f      	bne.n	800d362 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d322:	2300      	movs	r3, #0
 800d324:	61bb      	str	r3, [r7, #24]
 800d326:	4b48      	ldr	r3, [pc, #288]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d32a:	4a47      	ldr	r2, [pc, #284]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d32c:	f043 0302 	orr.w	r3, r3, #2
 800d330:	6313      	str	r3, [r2, #48]	@ 0x30
 800d332:	4b45      	ldr	r3, [pc, #276]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d336:	f003 0302 	and.w	r3, r3, #2
 800d33a:	61bb      	str	r3, [r7, #24]
 800d33c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800d33e:	f248 0301 	movw	r3, #32769	@ 0x8001
 800d342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d344:	2302      	movs	r3, #2
 800d346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d34c:	2300      	movs	r3, #0
 800d34e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d350:	2301      	movs	r3, #1
 800d352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d354:	f107 031c 	add.w	r3, r7, #28
 800d358:	4619      	mov	r1, r3
 800d35a:	483c      	ldr	r0, [pc, #240]	@ (800d44c <HAL_TIM_MspPostInit+0x14c>)
 800d35c:	f000 fcd0 	bl	800dd00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800d360:	e06c      	b.n	800d43c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d36a:	d11f      	bne.n	800d3ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d36c:	2300      	movs	r3, #0
 800d36e:	617b      	str	r3, [r7, #20]
 800d370:	4b35      	ldr	r3, [pc, #212]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d374:	4a34      	ldr	r2, [pc, #208]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d376:	f043 0301 	orr.w	r3, r3, #1
 800d37a:	6313      	str	r3, [r2, #48]	@ 0x30
 800d37c:	4b32      	ldr	r3, [pc, #200]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d380:	f003 0301 	and.w	r3, r3, #1
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d38c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d38e:	2302      	movs	r3, #2
 800d390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d392:	2300      	movs	r3, #0
 800d394:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d396:	2300      	movs	r3, #0
 800d398:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d39a:	2301      	movs	r3, #1
 800d39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d39e:	f107 031c 	add.w	r3, r7, #28
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	482a      	ldr	r0, [pc, #168]	@ (800d450 <HAL_TIM_MspPostInit+0x150>)
 800d3a6:	f000 fcab 	bl	800dd00 <HAL_GPIO_Init>
}
 800d3aa:	e047      	b.n	800d43c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a28      	ldr	r2, [pc, #160]	@ (800d454 <HAL_TIM_MspPostInit+0x154>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d11e      	bne.n	800d3f4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	613b      	str	r3, [r7, #16]
 800d3ba:	4b23      	ldr	r3, [pc, #140]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d3bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3be:	4a22      	ldr	r2, [pc, #136]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d3c0:	f043 0302 	orr.w	r3, r3, #2
 800d3c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d3c6:	4b20      	ldr	r3, [pc, #128]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ca:	f003 0302 	and.w	r3, r3, #2
 800d3ce:	613b      	str	r3, [r7, #16]
 800d3d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d3d2:	2380      	movs	r3, #128	@ 0x80
 800d3d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d3e2:	2302      	movs	r3, #2
 800d3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d3e6:	f107 031c 	add.w	r3, r7, #28
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4817      	ldr	r0, [pc, #92]	@ (800d44c <HAL_TIM_MspPostInit+0x14c>)
 800d3ee:	f000 fc87 	bl	800dd00 <HAL_GPIO_Init>
}
 800d3f2:	e023      	b.n	800d43c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a17      	ldr	r2, [pc, #92]	@ (800d458 <HAL_TIM_MspPostInit+0x158>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d11e      	bne.n	800d43c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	4b11      	ldr	r3, [pc, #68]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d406:	4a10      	ldr	r2, [pc, #64]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d408:	f043 0302 	orr.w	r3, r3, #2
 800d40c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d40e:	4b0e      	ldr	r3, [pc, #56]	@ (800d448 <HAL_TIM_MspPostInit+0x148>)
 800d410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d412:	f003 0302 	and.w	r3, r3, #2
 800d416:	60fb      	str	r3, [r7, #12]
 800d418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800d41a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d41e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d420:	2302      	movs	r3, #2
 800d422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d424:	2300      	movs	r3, #0
 800d426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d428:	2300      	movs	r3, #0
 800d42a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d42c:	2303      	movs	r3, #3
 800d42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d430:	f107 031c 	add.w	r3, r7, #28
 800d434:	4619      	mov	r1, r3
 800d436:	4805      	ldr	r0, [pc, #20]	@ (800d44c <HAL_TIM_MspPostInit+0x14c>)
 800d438:	f000 fc62 	bl	800dd00 <HAL_GPIO_Init>
}
 800d43c:	bf00      	nop
 800d43e:	3730      	adds	r7, #48	@ 0x30
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	40010000 	.word	0x40010000
 800d448:	40023800 	.word	0x40023800
 800d44c:	40020400 	.word	0x40020400
 800d450:	40020000 	.word	0x40020000
 800d454:	40000800 	.word	0x40000800
 800d458:	40010400 	.word	0x40010400

0800d45c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08c      	sub	sp, #48	@ 0x30
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d464:	f107 031c 	add.w	r3, r7, #28
 800d468:	2200      	movs	r2, #0
 800d46a:	601a      	str	r2, [r3, #0]
 800d46c:	605a      	str	r2, [r3, #4]
 800d46e:	609a      	str	r2, [r3, #8]
 800d470:	60da      	str	r2, [r3, #12]
 800d472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a49      	ldr	r2, [pc, #292]	@ (800d5a0 <HAL_UART_MspInit+0x144>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d134      	bne.n	800d4e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d47e:	2300      	movs	r3, #0
 800d480:	61bb      	str	r3, [r7, #24]
 800d482:	4b48      	ldr	r3, [pc, #288]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d486:	4a47      	ldr	r2, [pc, #284]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d48c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d48e:	4b45      	ldr	r3, [pc, #276]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d496:	61bb      	str	r3, [r7, #24]
 800d498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]
 800d49e:	4b41      	ldr	r3, [pc, #260]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a2:	4a40      	ldr	r2, [pc, #256]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d4a4:	f043 0301 	orr.w	r3, r3, #1
 800d4a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4aa:	4b3e      	ldr	r3, [pc, #248]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d4ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4ae:	f003 0301 	and.w	r3, r3, #1
 800d4b2:	617b      	str	r3, [r7, #20]
 800d4b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800d4b6:	230c      	movs	r3, #12
 800d4b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d4c6:	2307      	movs	r3, #7
 800d4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4ca:	f107 031c 	add.w	r3, r7, #28
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4835      	ldr	r0, [pc, #212]	@ (800d5a8 <HAL_UART_MspInit+0x14c>)
 800d4d2:	f000 fc15 	bl	800dd00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	2100      	movs	r1, #0
 800d4da:	2026      	movs	r0, #38	@ 0x26
 800d4dc:	f000 fb47 	bl	800db6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d4e0:	2026      	movs	r0, #38	@ 0x26
 800d4e2:	f000 fb60 	bl	800dba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d4e6:	e057      	b.n	800d598 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a2f      	ldr	r2, [pc, #188]	@ (800d5ac <HAL_UART_MspInit+0x150>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d152      	bne.n	800d598 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	613b      	str	r3, [r7, #16]
 800d4f6:	4b2b      	ldr	r3, [pc, #172]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d4fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d500:	6413      	str	r3, [r2, #64]	@ 0x40
 800d502:	4b28      	ldr	r3, [pc, #160]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d50a:	613b      	str	r3, [r7, #16]
 800d50c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d50e:	2300      	movs	r3, #0
 800d510:	60fb      	str	r3, [r7, #12]
 800d512:	4b24      	ldr	r3, [pc, #144]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d516:	4a23      	ldr	r2, [pc, #140]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d518:	f043 0304 	orr.w	r3, r3, #4
 800d51c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d51e:	4b21      	ldr	r3, [pc, #132]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d522:	f003 0304 	and.w	r3, r3, #4
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d52a:	2300      	movs	r3, #0
 800d52c:	60bb      	str	r3, [r7, #8]
 800d52e:	4b1d      	ldr	r3, [pc, #116]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d532:	4a1c      	ldr	r2, [pc, #112]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d534:	f043 0302 	orr.w	r3, r3, #2
 800d538:	6313      	str	r3, [r2, #48]	@ 0x30
 800d53a:	4b1a      	ldr	r3, [pc, #104]	@ (800d5a4 <HAL_UART_MspInit+0x148>)
 800d53c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d53e:	f003 0302 	and.w	r3, r3, #2
 800d542:	60bb      	str	r3, [r7, #8]
 800d544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d546:	2320      	movs	r3, #32
 800d548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d54a:	2302      	movs	r3, #2
 800d54c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d54e:	2300      	movs	r3, #0
 800d550:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d552:	2303      	movs	r3, #3
 800d554:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d556:	2307      	movs	r3, #7
 800d558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d55a:	f107 031c 	add.w	r3, r7, #28
 800d55e:	4619      	mov	r1, r3
 800d560:	4813      	ldr	r0, [pc, #76]	@ (800d5b0 <HAL_UART_MspInit+0x154>)
 800d562:	f000 fbcd 	bl	800dd00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d56a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d56c:	2302      	movs	r3, #2
 800d56e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d570:	2300      	movs	r3, #0
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d574:	2303      	movs	r3, #3
 800d576:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d578:	2307      	movs	r3, #7
 800d57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d57c:	f107 031c 	add.w	r3, r7, #28
 800d580:	4619      	mov	r1, r3
 800d582:	480c      	ldr	r0, [pc, #48]	@ (800d5b4 <HAL_UART_MspInit+0x158>)
 800d584:	f000 fbbc 	bl	800dd00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800d588:	2200      	movs	r2, #0
 800d58a:	2100      	movs	r1, #0
 800d58c:	2027      	movs	r0, #39	@ 0x27
 800d58e:	f000 faee 	bl	800db6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d592:	2027      	movs	r0, #39	@ 0x27
 800d594:	f000 fb07 	bl	800dba6 <HAL_NVIC_EnableIRQ>
}
 800d598:	bf00      	nop
 800d59a:	3730      	adds	r7, #48	@ 0x30
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	40004400 	.word	0x40004400
 800d5a4:	40023800 	.word	0x40023800
 800d5a8:	40020000 	.word	0x40020000
 800d5ac:	40004800 	.word	0x40004800
 800d5b0:	40020800 	.word	0x40020800
 800d5b4:	40020400 	.word	0x40020400

0800d5b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d5bc:	bf00      	nop
 800d5be:	e7fd      	b.n	800d5bc <NMI_Handler+0x4>

0800d5c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d5c4:	bf00      	nop
 800d5c6:	e7fd      	b.n	800d5c4 <HardFault_Handler+0x4>

0800d5c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d5cc:	bf00      	nop
 800d5ce:	e7fd      	b.n	800d5cc <MemManage_Handler+0x4>

0800d5d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d5d4:	bf00      	nop
 800d5d6:	e7fd      	b.n	800d5d4 <BusFault_Handler+0x4>

0800d5d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d5dc:	bf00      	nop
 800d5de:	e7fd      	b.n	800d5dc <UsageFault_Handler+0x4>

0800d5e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d5e4:	bf00      	nop
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d5ee:	b480      	push	{r7}
 800d5f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d5f2:	bf00      	nop
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d600:	bf00      	nop
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d60e:	f000 f98f 	bl	800d930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d612:	bf00      	nop
 800d614:	bd80      	pop	{r7, pc}

0800d616 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800d61a:	2001      	movs	r0, #1
 800d61c:	f000 fd1e 	bl	800e05c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800d620:	bf00      	nop
 800d622:	bd80      	pop	{r7, pc}

0800d624 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d628:	4802      	ldr	r0, [pc, #8]	@ (800d634 <TIM2_IRQHandler+0x10>)
 800d62a:	f002 fb30 	bl	800fc8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800d62e:	bf00      	nop
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	200003a4 	.word	0x200003a4

0800d638 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800d63c:	4802      	ldr	r0, [pc, #8]	@ (800d648 <SPI2_IRQHandler+0x10>)
 800d63e:	f001 ffd5 	bl	800f5ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800d642:	bf00      	nop
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	20000304 	.word	0x20000304

0800d64c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d650:	4802      	ldr	r0, [pc, #8]	@ (800d65c <USART2_IRQHandler+0x10>)
 800d652:	f003 fa21 	bl	8010a98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d656:	bf00      	nop
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	200004c4 	.word	0x200004c4

0800d660 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d664:	4802      	ldr	r0, [pc, #8]	@ (800d670 <USART3_IRQHandler+0x10>)
 800d666:	f003 fa17 	bl	8010a98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d66a:	bf00      	nop
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20000508 	.word	0x20000508

0800d674 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d678:	4802      	ldr	r0, [pc, #8]	@ (800d684 <TIM6_DAC_IRQHandler+0x10>)
 800d67a:	f002 fb08 	bl	800fc8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d67e:	bf00      	nop
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20000434 	.word	0x20000434

0800d688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d688:	b480      	push	{r7}
 800d68a:	af00      	add	r7, sp, #0
  return 1;
 800d68c:	2301      	movs	r3, #1
}
 800d68e:	4618      	mov	r0, r3
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <_kill>:

int _kill(int pid, int sig)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d6a2:	f005 fde3 	bl	801326c <__errno>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2216      	movs	r2, #22
 800d6aa:	601a      	str	r2, [r3, #0]
  return -1;
 800d6ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <_exit>:

void _exit (int status)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d6c0:	f04f 31ff 	mov.w	r1, #4294967295
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff ffe7 	bl	800d698 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d6ca:	bf00      	nop
 800d6cc:	e7fd      	b.n	800d6ca <_exit+0x12>

0800d6ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b086      	sub	sp, #24
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d6da:	2300      	movs	r3, #0
 800d6dc:	617b      	str	r3, [r7, #20]
 800d6de:	e00a      	b.n	800d6f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d6e0:	f3af 8000 	nop.w
 800d6e4:	4601      	mov	r1, r0
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	1c5a      	adds	r2, r3, #1
 800d6ea:	60ba      	str	r2, [r7, #8]
 800d6ec:	b2ca      	uxtb	r2, r1
 800d6ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	617b      	str	r3, [r7, #20]
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	dbf0      	blt.n	800d6e0 <_read+0x12>
  }

  return len;
 800d6fe:	687b      	ldr	r3, [r7, #4]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3718      	adds	r7, #24
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d714:	2300      	movs	r3, #0
 800d716:	617b      	str	r3, [r7, #20]
 800d718:	e009      	b.n	800d72e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	60ba      	str	r2, [r7, #8]
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	4618      	mov	r0, r3
 800d724:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	3301      	adds	r3, #1
 800d72c:	617b      	str	r3, [r7, #20]
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	429a      	cmp	r2, r3
 800d734:	dbf1      	blt.n	800d71a <_write+0x12>
  }
  return len;
 800d736:	687b      	ldr	r3, [r7, #4]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3718      	adds	r7, #24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <_close>:

int _close(int file)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d768:	605a      	str	r2, [r3, #4]
  return 0;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <_isatty>:

int _isatty(int file)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d780:	2301      	movs	r3, #1
}
 800d782:	4618      	mov	r0, r3
 800d784:	370c      	adds	r7, #12
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d78e:	b480      	push	{r7}
 800d790:	b085      	sub	sp, #20
 800d792:	af00      	add	r7, sp, #0
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3714      	adds	r7, #20
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d7b0:	4a14      	ldr	r2, [pc, #80]	@ (800d804 <_sbrk+0x5c>)
 800d7b2:	4b15      	ldr	r3, [pc, #84]	@ (800d808 <_sbrk+0x60>)
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d7bc:	4b13      	ldr	r3, [pc, #76]	@ (800d80c <_sbrk+0x64>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d7c4:	4b11      	ldr	r3, [pc, #68]	@ (800d80c <_sbrk+0x64>)
 800d7c6:	4a12      	ldr	r2, [pc, #72]	@ (800d810 <_sbrk+0x68>)
 800d7c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d7ca:	4b10      	ldr	r3, [pc, #64]	@ (800d80c <_sbrk+0x64>)
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	693a      	ldr	r2, [r7, #16]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d207      	bcs.n	800d7e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d7d8:	f005 fd48 	bl	801326c <__errno>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	220c      	movs	r2, #12
 800d7e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7e6:	e009      	b.n	800d7fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d7e8:	4b08      	ldr	r3, [pc, #32]	@ (800d80c <_sbrk+0x64>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d7ee:	4b07      	ldr	r3, [pc, #28]	@ (800d80c <_sbrk+0x64>)
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	4a05      	ldr	r2, [pc, #20]	@ (800d80c <_sbrk+0x64>)
 800d7f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3718      	adds	r7, #24
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	20020000 	.word	0x20020000
 800d808:	00000400 	.word	0x00000400
 800d80c:	2000056c 	.word	0x2000056c
 800d810:	200006d0 	.word	0x200006d0

0800d814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d818:	4b06      	ldr	r3, [pc, #24]	@ (800d834 <SystemInit+0x20>)
 800d81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d81e:	4a05      	ldr	r2, [pc, #20]	@ (800d834 <SystemInit+0x20>)
 800d820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d828:	bf00      	nop
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	e000ed00 	.word	0xe000ed00

0800d838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	;  ldr   sp, =_estack      /* set stack pointer */
 800d838:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d83c:	480d      	ldr	r0, [pc, #52]	@ (800d874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800d83e:	490e      	ldr	r1, [pc, #56]	@ (800d878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800d840:	4a0e      	ldr	r2, [pc, #56]	@ (800d87c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d844:	e002      	b.n	800d84c <LoopCopyDataInit>

0800d846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d84a:	3304      	adds	r3, #4

0800d84c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d84c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d84e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d850:	d3f9      	bcc.n	800d846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d852:	4a0b      	ldr	r2, [pc, #44]	@ (800d880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800d854:	4c0b      	ldr	r4, [pc, #44]	@ (800d884 <LoopFillZerobss+0x26>)
  movs r3, #0
 800d856:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d858:	e001      	b.n	800d85e <LoopFillZerobss>

0800d85a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d85a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d85c:	3204      	adds	r2, #4

0800d85e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d85e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d860:	d3fb      	bcc.n	800d85a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d862:	f7ff ffd7 	bl	800d814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d866:	f005 fd07 	bl	8013278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d86a:	f7fe fd2d 	bl	800c2c8 <main>
  bx  lr    
 800d86e:	4770      	bx	lr
	;  ldr   sp, =_estack      /* set stack pointer */
 800d870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d878:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800d87c:	080186ac 	.word	0x080186ac
  ldr r2, =_sbss
 800d880:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800d884:	200006d0 	.word	0x200006d0

0800d888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d888:	e7fe      	b.n	800d888 <ADC_IRQHandler>
	...

0800d88c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d890:	4b0e      	ldr	r3, [pc, #56]	@ (800d8cc <HAL_Init+0x40>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a0d      	ldr	r2, [pc, #52]	@ (800d8cc <HAL_Init+0x40>)
 800d896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d89a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d89c:	4b0b      	ldr	r3, [pc, #44]	@ (800d8cc <HAL_Init+0x40>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d8cc <HAL_Init+0x40>)
 800d8a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d8a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d8a8:	4b08      	ldr	r3, [pc, #32]	@ (800d8cc <HAL_Init+0x40>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a07      	ldr	r2, [pc, #28]	@ (800d8cc <HAL_Init+0x40>)
 800d8ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d8b4:	2003      	movs	r0, #3
 800d8b6:	f000 f94f 	bl	800db58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	f000 f808 	bl	800d8d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d8c0:	f7ff fbbe 	bl	800d040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	40023c00 	.word	0x40023c00

0800d8d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d8d8:	4b12      	ldr	r3, [pc, #72]	@ (800d924 <HAL_InitTick+0x54>)
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	4b12      	ldr	r3, [pc, #72]	@ (800d928 <HAL_InitTick+0x58>)
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d8e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f000 f967 	bl	800dbc2 <HAL_SYSTICK_Config>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d001      	beq.n	800d8fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e00e      	b.n	800d91c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b0f      	cmp	r3, #15
 800d902:	d80a      	bhi.n	800d91a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d904:	2200      	movs	r2, #0
 800d906:	6879      	ldr	r1, [r7, #4]
 800d908:	f04f 30ff 	mov.w	r0, #4294967295
 800d90c:	f000 f92f 	bl	800db6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d910:	4a06      	ldr	r2, [pc, #24]	@ (800d92c <HAL_InitTick+0x5c>)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	e000      	b.n	800d91c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d91a:	2301      	movs	r3, #1
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	20000004 	.word	0x20000004
 800d928:	2000000c 	.word	0x2000000c
 800d92c:	20000008 	.word	0x20000008

0800d930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d930:	b480      	push	{r7}
 800d932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d934:	4b06      	ldr	r3, [pc, #24]	@ (800d950 <HAL_IncTick+0x20>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	461a      	mov	r2, r3
 800d93a:	4b06      	ldr	r3, [pc, #24]	@ (800d954 <HAL_IncTick+0x24>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4413      	add	r3, r2
 800d940:	4a04      	ldr	r2, [pc, #16]	@ (800d954 <HAL_IncTick+0x24>)
 800d942:	6013      	str	r3, [r2, #0]
}
 800d944:	bf00      	nop
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	2000000c 	.word	0x2000000c
 800d954:	20000570 	.word	0x20000570

0800d958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d958:	b480      	push	{r7}
 800d95a:	af00      	add	r7, sp, #0
  return uwTick;
 800d95c:	4b03      	ldr	r3, [pc, #12]	@ (800d96c <HAL_GetTick+0x14>)
 800d95e:	681b      	ldr	r3, [r3, #0]
}
 800d960:	4618      	mov	r0, r3
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	20000570 	.word	0x20000570

0800d970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d978:	f7ff ffee 	bl	800d958 <HAL_GetTick>
 800d97c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d988:	d005      	beq.n	800d996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d98a:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b4 <HAL_Delay+0x44>)
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	461a      	mov	r2, r3
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	4413      	add	r3, r2
 800d994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d996:	bf00      	nop
 800d998:	f7ff ffde 	bl	800d958 <HAL_GetTick>
 800d99c:	4602      	mov	r2, r0
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d8f7      	bhi.n	800d998 <HAL_Delay+0x28>
  {
  }
}
 800d9a8:	bf00      	nop
 800d9aa:	bf00      	nop
 800d9ac:	3710      	adds	r7, #16
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	2000000c 	.word	0x2000000c

0800d9b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f003 0307 	and.w	r3, r3, #7
 800d9c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800d9fc <__NVIC_SetPriorityGrouping+0x44>)
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d9e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d9e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d9ea:	4a04      	ldr	r2, [pc, #16]	@ (800d9fc <__NVIC_SetPriorityGrouping+0x44>)
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	60d3      	str	r3, [r2, #12]
}
 800d9f0:	bf00      	nop
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	e000ed00 	.word	0xe000ed00

0800da00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800da00:	b480      	push	{r7}
 800da02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800da04:	4b04      	ldr	r3, [pc, #16]	@ (800da18 <__NVIC_GetPriorityGrouping+0x18>)
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	0a1b      	lsrs	r3, r3, #8
 800da0a:	f003 0307 	and.w	r3, r3, #7
}
 800da0e:	4618      	mov	r0, r3
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	e000ed00 	.word	0xe000ed00

0800da1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800da26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	db0b      	blt.n	800da46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	f003 021f 	and.w	r2, r3, #31
 800da34:	4907      	ldr	r1, [pc, #28]	@ (800da54 <__NVIC_EnableIRQ+0x38>)
 800da36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da3a:	095b      	lsrs	r3, r3, #5
 800da3c:	2001      	movs	r0, #1
 800da3e:	fa00 f202 	lsl.w	r2, r0, r2
 800da42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800da46:	bf00      	nop
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	e000e100 	.word	0xe000e100

0800da58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	4603      	mov	r3, r0
 800da60:	6039      	str	r1, [r7, #0]
 800da62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800da64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	db0a      	blt.n	800da82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	490c      	ldr	r1, [pc, #48]	@ (800daa4 <__NVIC_SetPriority+0x4c>)
 800da72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da76:	0112      	lsls	r2, r2, #4
 800da78:	b2d2      	uxtb	r2, r2
 800da7a:	440b      	add	r3, r1
 800da7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800da80:	e00a      	b.n	800da98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	b2da      	uxtb	r2, r3
 800da86:	4908      	ldr	r1, [pc, #32]	@ (800daa8 <__NVIC_SetPriority+0x50>)
 800da88:	79fb      	ldrb	r3, [r7, #7]
 800da8a:	f003 030f 	and.w	r3, r3, #15
 800da8e:	3b04      	subs	r3, #4
 800da90:	0112      	lsls	r2, r2, #4
 800da92:	b2d2      	uxtb	r2, r2
 800da94:	440b      	add	r3, r1
 800da96:	761a      	strb	r2, [r3, #24]
}
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr
 800daa4:	e000e100 	.word	0xe000e100
 800daa8:	e000ed00 	.word	0xe000ed00

0800daac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800daac:	b480      	push	{r7}
 800daae:	b089      	sub	sp, #36	@ 0x24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f003 0307 	and.w	r3, r3, #7
 800dabe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	f1c3 0307 	rsb	r3, r3, #7
 800dac6:	2b04      	cmp	r3, #4
 800dac8:	bf28      	it	cs
 800daca:	2304      	movcs	r3, #4
 800dacc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	3304      	adds	r3, #4
 800dad2:	2b06      	cmp	r3, #6
 800dad4:	d902      	bls.n	800dadc <NVIC_EncodePriority+0x30>
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	3b03      	subs	r3, #3
 800dada:	e000      	b.n	800dade <NVIC_EncodePriority+0x32>
 800dadc:	2300      	movs	r3, #0
 800dade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dae0:	f04f 32ff 	mov.w	r2, #4294967295
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	fa02 f303 	lsl.w	r3, r2, r3
 800daea:	43da      	mvns	r2, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	401a      	ands	r2, r3
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800daf4:	f04f 31ff 	mov.w	r1, #4294967295
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	fa01 f303 	lsl.w	r3, r1, r3
 800dafe:	43d9      	mvns	r1, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800db04:	4313      	orrs	r3, r2
         );
}
 800db06:	4618      	mov	r0, r3
 800db08:	3724      	adds	r7, #36	@ 0x24
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
	...

0800db14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	3b01      	subs	r3, #1
 800db20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db24:	d301      	bcc.n	800db2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800db26:	2301      	movs	r3, #1
 800db28:	e00f      	b.n	800db4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800db2a:	4a0a      	ldr	r2, [pc, #40]	@ (800db54 <SysTick_Config+0x40>)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	3b01      	subs	r3, #1
 800db30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800db32:	210f      	movs	r1, #15
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	f7ff ff8e 	bl	800da58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800db3c:	4b05      	ldr	r3, [pc, #20]	@ (800db54 <SysTick_Config+0x40>)
 800db3e:	2200      	movs	r2, #0
 800db40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800db42:	4b04      	ldr	r3, [pc, #16]	@ (800db54 <SysTick_Config+0x40>)
 800db44:	2207      	movs	r2, #7
 800db46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	e000e010 	.word	0xe000e010

0800db58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff ff29 	bl	800d9b8 <__NVIC_SetPriorityGrouping>
}
 800db66:	bf00      	nop
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800db6e:	b580      	push	{r7, lr}
 800db70:	b086      	sub	sp, #24
 800db72:	af00      	add	r7, sp, #0
 800db74:	4603      	mov	r3, r0
 800db76:	60b9      	str	r1, [r7, #8]
 800db78:	607a      	str	r2, [r7, #4]
 800db7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800db7c:	2300      	movs	r3, #0
 800db7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800db80:	f7ff ff3e 	bl	800da00 <__NVIC_GetPriorityGrouping>
 800db84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	68b9      	ldr	r1, [r7, #8]
 800db8a:	6978      	ldr	r0, [r7, #20]
 800db8c:	f7ff ff8e 	bl	800daac <NVIC_EncodePriority>
 800db90:	4602      	mov	r2, r0
 800db92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db96:	4611      	mov	r1, r2
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff ff5d 	bl	800da58 <__NVIC_SetPriority>
}
 800db9e:	bf00      	nop
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b082      	sub	sp, #8
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	4603      	mov	r3, r0
 800dbae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dbb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7ff ff31 	bl	800da1c <__NVIC_EnableIRQ>
}
 800dbba:	bf00      	nop
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff ffa2 	bl	800db14 <SysTick_Config>
 800dbd0:	4603      	mov	r3, r0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b084      	sub	sp, #16
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbe6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800dbe8:	f7ff feb6 	bl	800d958 <HAL_GetTick>
 800dbec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d008      	beq.n	800dc0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2280      	movs	r2, #128	@ 0x80
 800dbfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e052      	b.n	800dcb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f022 0216 	bic.w	r2, r2, #22
 800dc1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	695a      	ldr	r2, [r3, #20]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dc2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d103      	bne.n	800dc3c <HAL_DMA_Abort+0x62>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d007      	beq.n	800dc4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f022 0208 	bic.w	r2, r2, #8
 800dc4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f022 0201 	bic.w	r2, r2, #1
 800dc5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dc5c:	e013      	b.n	800dc86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800dc5e:	f7ff fe7b 	bl	800d958 <HAL_GetTick>
 800dc62:	4602      	mov	r2, r0
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	2b05      	cmp	r3, #5
 800dc6a:	d90c      	bls.n	800dc86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2220      	movs	r2, #32
 800dc70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2203      	movs	r2, #3
 800dc76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e015      	b.n	800dcb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1e4      	bne.n	800dc5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc98:	223f      	movs	r2, #63	@ 0x3f
 800dc9a:	409a      	lsls	r2, r3
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b02      	cmp	r3, #2
 800dccc:	d004      	beq.n	800dcd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2280      	movs	r2, #128	@ 0x80
 800dcd2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e00c      	b.n	800dcf2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2205      	movs	r2, #5
 800dcdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f022 0201 	bic.w	r2, r2, #1
 800dcee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr
	...

0800dd00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b089      	sub	sp, #36	@ 0x24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800dd12:	2300      	movs	r3, #0
 800dd14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dd16:	2300      	movs	r3, #0
 800dd18:	61fb      	str	r3, [r7, #28]
 800dd1a:	e165      	b.n	800dfe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	fa02 f303 	lsl.w	r3, r2, r3
 800dd24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	697a      	ldr	r2, [r7, #20]
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800dd30:	693a      	ldr	r2, [r7, #16]
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	f040 8154 	bne.w	800dfe2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	f003 0303 	and.w	r3, r3, #3
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d005      	beq.n	800dd52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d130      	bne.n	800ddb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	005b      	lsls	r3, r3, #1
 800dd5c:	2203      	movs	r2, #3
 800dd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd62:	43db      	mvns	r3, r3
 800dd64:	69ba      	ldr	r2, [r7, #24]
 800dd66:	4013      	ands	r3, r2
 800dd68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	68da      	ldr	r2, [r3, #12]
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	005b      	lsls	r3, r3, #1
 800dd72:	fa02 f303 	lsl.w	r3, r2, r3
 800dd76:	69ba      	ldr	r2, [r7, #24]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	69ba      	ldr	r2, [r7, #24]
 800dd80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dd88:	2201      	movs	r2, #1
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd90:	43db      	mvns	r3, r3
 800dd92:	69ba      	ldr	r2, [r7, #24]
 800dd94:	4013      	ands	r3, r2
 800dd96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	091b      	lsrs	r3, r3, #4
 800dd9e:	f003 0201 	and.w	r2, r3, #1
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	fa02 f303 	lsl.w	r3, r2, r3
 800dda8:	69ba      	ldr	r2, [r7, #24]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	69ba      	ldr	r2, [r7, #24]
 800ddb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	f003 0303 	and.w	r3, r3, #3
 800ddbc:	2b03      	cmp	r3, #3
 800ddbe:	d017      	beq.n	800ddf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	005b      	lsls	r3, r3, #1
 800ddca:	2203      	movs	r2, #3
 800ddcc:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd0:	43db      	mvns	r3, r3
 800ddd2:	69ba      	ldr	r2, [r7, #24]
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	689a      	ldr	r2, [r3, #8]
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	005b      	lsls	r3, r3, #1
 800dde0:	fa02 f303 	lsl.w	r3, r2, r3
 800dde4:	69ba      	ldr	r2, [r7, #24]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	69ba      	ldr	r2, [r7, #24]
 800ddee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d123      	bne.n	800de44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	08da      	lsrs	r2, r3, #3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3208      	adds	r2, #8
 800de04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	f003 0307 	and.w	r3, r3, #7
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	220f      	movs	r2, #15
 800de14:	fa02 f303 	lsl.w	r3, r2, r3
 800de18:	43db      	mvns	r3, r3
 800de1a:	69ba      	ldr	r2, [r7, #24]
 800de1c:	4013      	ands	r3, r2
 800de1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	691a      	ldr	r2, [r3, #16]
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	f003 0307 	and.w	r3, r3, #7
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	fa02 f303 	lsl.w	r3, r2, r3
 800de30:	69ba      	ldr	r2, [r7, #24]
 800de32:	4313      	orrs	r3, r2
 800de34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	08da      	lsrs	r2, r3, #3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3208      	adds	r2, #8
 800de3e:	69b9      	ldr	r1, [r7, #24]
 800de40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	2203      	movs	r2, #3
 800de50:	fa02 f303 	lsl.w	r3, r2, r3
 800de54:	43db      	mvns	r3, r3
 800de56:	69ba      	ldr	r2, [r7, #24]
 800de58:	4013      	ands	r3, r2
 800de5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	f003 0203 	and.w	r2, r3, #3
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	005b      	lsls	r3, r3, #1
 800de68:	fa02 f303 	lsl.w	r3, r2, r3
 800de6c:	69ba      	ldr	r2, [r7, #24]
 800de6e:	4313      	orrs	r3, r2
 800de70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	69ba      	ldr	r2, [r7, #24]
 800de76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 80ae 	beq.w	800dfe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de86:	2300      	movs	r3, #0
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	4b5d      	ldr	r3, [pc, #372]	@ (800e000 <HAL_GPIO_Init+0x300>)
 800de8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de8e:	4a5c      	ldr	r2, [pc, #368]	@ (800e000 <HAL_GPIO_Init+0x300>)
 800de90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800de94:	6453      	str	r3, [r2, #68]	@ 0x44
 800de96:	4b5a      	ldr	r3, [pc, #360]	@ (800e000 <HAL_GPIO_Init+0x300>)
 800de98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de9e:	60fb      	str	r3, [r7, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800dea2:	4a58      	ldr	r2, [pc, #352]	@ (800e004 <HAL_GPIO_Init+0x304>)
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	089b      	lsrs	r3, r3, #2
 800dea8:	3302      	adds	r3, #2
 800deaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	f003 0303 	and.w	r3, r3, #3
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	220f      	movs	r2, #15
 800deba:	fa02 f303 	lsl.w	r3, r2, r3
 800debe:	43db      	mvns	r3, r3
 800dec0:	69ba      	ldr	r2, [r7, #24]
 800dec2:	4013      	ands	r3, r2
 800dec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4a4f      	ldr	r2, [pc, #316]	@ (800e008 <HAL_GPIO_Init+0x308>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d025      	beq.n	800df1a <HAL_GPIO_Init+0x21a>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4a4e      	ldr	r2, [pc, #312]	@ (800e00c <HAL_GPIO_Init+0x30c>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d01f      	beq.n	800df16 <HAL_GPIO_Init+0x216>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4a4d      	ldr	r2, [pc, #308]	@ (800e010 <HAL_GPIO_Init+0x310>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d019      	beq.n	800df12 <HAL_GPIO_Init+0x212>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4a4c      	ldr	r2, [pc, #304]	@ (800e014 <HAL_GPIO_Init+0x314>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d013      	beq.n	800df0e <HAL_GPIO_Init+0x20e>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4a4b      	ldr	r2, [pc, #300]	@ (800e018 <HAL_GPIO_Init+0x318>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d00d      	beq.n	800df0a <HAL_GPIO_Init+0x20a>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4a4a      	ldr	r2, [pc, #296]	@ (800e01c <HAL_GPIO_Init+0x31c>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d007      	beq.n	800df06 <HAL_GPIO_Init+0x206>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	4a49      	ldr	r2, [pc, #292]	@ (800e020 <HAL_GPIO_Init+0x320>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d101      	bne.n	800df02 <HAL_GPIO_Init+0x202>
 800defe:	2306      	movs	r3, #6
 800df00:	e00c      	b.n	800df1c <HAL_GPIO_Init+0x21c>
 800df02:	2307      	movs	r3, #7
 800df04:	e00a      	b.n	800df1c <HAL_GPIO_Init+0x21c>
 800df06:	2305      	movs	r3, #5
 800df08:	e008      	b.n	800df1c <HAL_GPIO_Init+0x21c>
 800df0a:	2304      	movs	r3, #4
 800df0c:	e006      	b.n	800df1c <HAL_GPIO_Init+0x21c>
 800df0e:	2303      	movs	r3, #3
 800df10:	e004      	b.n	800df1c <HAL_GPIO_Init+0x21c>
 800df12:	2302      	movs	r3, #2
 800df14:	e002      	b.n	800df1c <HAL_GPIO_Init+0x21c>
 800df16:	2301      	movs	r3, #1
 800df18:	e000      	b.n	800df1c <HAL_GPIO_Init+0x21c>
 800df1a:	2300      	movs	r3, #0
 800df1c:	69fa      	ldr	r2, [r7, #28]
 800df1e:	f002 0203 	and.w	r2, r2, #3
 800df22:	0092      	lsls	r2, r2, #2
 800df24:	4093      	lsls	r3, r2
 800df26:	69ba      	ldr	r2, [r7, #24]
 800df28:	4313      	orrs	r3, r2
 800df2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800df2c:	4935      	ldr	r1, [pc, #212]	@ (800e004 <HAL_GPIO_Init+0x304>)
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	089b      	lsrs	r3, r3, #2
 800df32:	3302      	adds	r3, #2
 800df34:	69ba      	ldr	r2, [r7, #24]
 800df36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800df3a:	4b3a      	ldr	r3, [pc, #232]	@ (800e024 <HAL_GPIO_Init+0x324>)
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	43db      	mvns	r3, r3
 800df44:	69ba      	ldr	r2, [r7, #24]
 800df46:	4013      	ands	r3, r2
 800df48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800df52:	2b00      	cmp	r3, #0
 800df54:	d003      	beq.n	800df5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800df56:	69ba      	ldr	r2, [r7, #24]
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	4313      	orrs	r3, r2
 800df5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800df5e:	4a31      	ldr	r2, [pc, #196]	@ (800e024 <HAL_GPIO_Init+0x324>)
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800df64:	4b2f      	ldr	r3, [pc, #188]	@ (800e024 <HAL_GPIO_Init+0x324>)
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	43db      	mvns	r3, r3
 800df6e:	69ba      	ldr	r2, [r7, #24]
 800df70:	4013      	ands	r3, r2
 800df72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d003      	beq.n	800df88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800df80:	69ba      	ldr	r2, [r7, #24]
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	4313      	orrs	r3, r2
 800df86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800df88:	4a26      	ldr	r2, [pc, #152]	@ (800e024 <HAL_GPIO_Init+0x324>)
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800df8e:	4b25      	ldr	r3, [pc, #148]	@ (800e024 <HAL_GPIO_Init+0x324>)
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	43db      	mvns	r3, r3
 800df98:	69ba      	ldr	r2, [r7, #24]
 800df9a:	4013      	ands	r3, r2
 800df9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d003      	beq.n	800dfb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800dfaa:	69ba      	ldr	r2, [r7, #24]
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800dfb2:	4a1c      	ldr	r2, [pc, #112]	@ (800e024 <HAL_GPIO_Init+0x324>)
 800dfb4:	69bb      	ldr	r3, [r7, #24]
 800dfb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800dfb8:	4b1a      	ldr	r3, [pc, #104]	@ (800e024 <HAL_GPIO_Init+0x324>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	43db      	mvns	r3, r3
 800dfc2:	69ba      	ldr	r2, [r7, #24]
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d003      	beq.n	800dfdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800dfd4:	69ba      	ldr	r2, [r7, #24]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800dfdc:	4a11      	ldr	r2, [pc, #68]	@ (800e024 <HAL_GPIO_Init+0x324>)
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	61fb      	str	r3, [r7, #28]
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	2b0f      	cmp	r3, #15
 800dfec:	f67f ae96 	bls.w	800dd1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800dff0:	bf00      	nop
 800dff2:	bf00      	nop
 800dff4:	3724      	adds	r7, #36	@ 0x24
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	40023800 	.word	0x40023800
 800e004:	40013800 	.word	0x40013800
 800e008:	40020000 	.word	0x40020000
 800e00c:	40020400 	.word	0x40020400
 800e010:	40020800 	.word	0x40020800
 800e014:	40020c00 	.word	0x40020c00
 800e018:	40021000 	.word	0x40021000
 800e01c:	40021400 	.word	0x40021400
 800e020:	40021800 	.word	0x40021800
 800e024:	40013c00 	.word	0x40013c00

0800e028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	460b      	mov	r3, r1
 800e032:	807b      	strh	r3, [r7, #2]
 800e034:	4613      	mov	r3, r2
 800e036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e038:	787b      	ldrb	r3, [r7, #1]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e03e:	887a      	ldrh	r2, [r7, #2]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e044:	e003      	b.n	800e04e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e046:	887b      	ldrh	r3, [r7, #2]
 800e048:	041a      	lsls	r2, r3, #16
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	619a      	str	r2, [r3, #24]
}
 800e04e:	bf00      	nop
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr
	...

0800e05c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	4603      	mov	r3, r0
 800e064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e066:	4b08      	ldr	r3, [pc, #32]	@ (800e088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e068:	695a      	ldr	r2, [r3, #20]
 800e06a:	88fb      	ldrh	r3, [r7, #6]
 800e06c:	4013      	ands	r3, r2
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d006      	beq.n	800e080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e072:	4a05      	ldr	r2, [pc, #20]	@ (800e088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e074:	88fb      	ldrh	r3, [r7, #6]
 800e076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e078:	88fb      	ldrh	r3, [r7, #6]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe ff00 	bl	800ce80 <HAL_GPIO_EXTI_Callback>
  }
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	40013c00 	.word	0x40013c00

0800e08c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800e092:	2300      	movs	r3, #0
 800e094:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e096:	2300      	movs	r3, #0
 800e098:	603b      	str	r3, [r7, #0]
 800e09a:	4b20      	ldr	r3, [pc, #128]	@ (800e11c <HAL_PWREx_EnableOverDrive+0x90>)
 800e09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e09e:	4a1f      	ldr	r2, [pc, #124]	@ (800e11c <HAL_PWREx_EnableOverDrive+0x90>)
 800e0a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e0a4:	6413      	str	r3, [r2, #64]	@ 0x40
 800e0a6:	4b1d      	ldr	r3, [pc, #116]	@ (800e11c <HAL_PWREx_EnableOverDrive+0x90>)
 800e0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0ae:	603b      	str	r3, [r7, #0]
 800e0b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e0b2:	4b1b      	ldr	r3, [pc, #108]	@ (800e120 <HAL_PWREx_EnableOverDrive+0x94>)
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e0b8:	f7ff fc4e 	bl	800d958 <HAL_GetTick>
 800e0bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e0be:	e009      	b.n	800e0d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e0c0:	f7ff fc4a 	bl	800d958 <HAL_GetTick>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e0ce:	d901      	bls.n	800e0d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	e01f      	b.n	800e114 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e0d4:	4b13      	ldr	r3, [pc, #76]	@ (800e124 <HAL_PWREx_EnableOverDrive+0x98>)
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e0dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0e0:	d1ee      	bne.n	800e0c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e0e2:	4b11      	ldr	r3, [pc, #68]	@ (800e128 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e0e8:	f7ff fc36 	bl	800d958 <HAL_GetTick>
 800e0ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e0ee:	e009      	b.n	800e104 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e0f0:	f7ff fc32 	bl	800d958 <HAL_GetTick>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	1ad3      	subs	r3, r2, r3
 800e0fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e0fe:	d901      	bls.n	800e104 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800e100:	2303      	movs	r3, #3
 800e102:	e007      	b.n	800e114 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e104:	4b07      	ldr	r3, [pc, #28]	@ (800e124 <HAL_PWREx_EnableOverDrive+0x98>)
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e10c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e110:	d1ee      	bne.n	800e0f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	40023800 	.word	0x40023800
 800e120:	420e0040 	.word	0x420e0040
 800e124:	40007000 	.word	0x40007000
 800e128:	420e0044 	.word	0x420e0044

0800e12c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d101      	bne.n	800e140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	e0cc      	b.n	800e2da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e140:	4b68      	ldr	r3, [pc, #416]	@ (800e2e4 <HAL_RCC_ClockConfig+0x1b8>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f003 030f 	and.w	r3, r3, #15
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d90c      	bls.n	800e168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e14e:	4b65      	ldr	r3, [pc, #404]	@ (800e2e4 <HAL_RCC_ClockConfig+0x1b8>)
 800e150:	683a      	ldr	r2, [r7, #0]
 800e152:	b2d2      	uxtb	r2, r2
 800e154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e156:	4b63      	ldr	r3, [pc, #396]	@ (800e2e4 <HAL_RCC_ClockConfig+0x1b8>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f003 030f 	and.w	r3, r3, #15
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	429a      	cmp	r2, r3
 800e162:	d001      	beq.n	800e168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e164:	2301      	movs	r3, #1
 800e166:	e0b8      	b.n	800e2da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f003 0302 	and.w	r3, r3, #2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d020      	beq.n	800e1b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f003 0304 	and.w	r3, r3, #4
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d005      	beq.n	800e18c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e180:	4b59      	ldr	r3, [pc, #356]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	4a58      	ldr	r2, [pc, #352]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e186:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e18a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f003 0308 	and.w	r3, r3, #8
 800e194:	2b00      	cmp	r3, #0
 800e196:	d005      	beq.n	800e1a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e198:	4b53      	ldr	r3, [pc, #332]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	4a52      	ldr	r2, [pc, #328]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e19e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e1a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1a4:	4b50      	ldr	r3, [pc, #320]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	494d      	ldr	r1, [pc, #308]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d044      	beq.n	800e24c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d107      	bne.n	800e1da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e1ca:	4b47      	ldr	r3, [pc, #284]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d119      	bne.n	800e20a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e07f      	b.n	800e2da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	d003      	beq.n	800e1ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e1e6:	2b03      	cmp	r3, #3
 800e1e8:	d107      	bne.n	800e1fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e1ea:	4b3f      	ldr	r3, [pc, #252]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d109      	bne.n	800e20a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e06f      	b.n	800e2da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e1fa:	4b3b      	ldr	r3, [pc, #236]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 0302 	and.w	r3, r3, #2
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e206:	2301      	movs	r3, #1
 800e208:	e067      	b.n	800e2da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e20a:	4b37      	ldr	r3, [pc, #220]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	f023 0203 	bic.w	r2, r3, #3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	4934      	ldr	r1, [pc, #208]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e218:	4313      	orrs	r3, r2
 800e21a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e21c:	f7ff fb9c 	bl	800d958 <HAL_GetTick>
 800e220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e222:	e00a      	b.n	800e23a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e224:	f7ff fb98 	bl	800d958 <HAL_GetTick>
 800e228:	4602      	mov	r2, r0
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e232:	4293      	cmp	r3, r2
 800e234:	d901      	bls.n	800e23a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e236:	2303      	movs	r3, #3
 800e238:	e04f      	b.n	800e2da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e23a:	4b2b      	ldr	r3, [pc, #172]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	f003 020c 	and.w	r2, r3, #12
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	429a      	cmp	r2, r3
 800e24a:	d1eb      	bne.n	800e224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e24c:	4b25      	ldr	r3, [pc, #148]	@ (800e2e4 <HAL_RCC_ClockConfig+0x1b8>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f003 030f 	and.w	r3, r3, #15
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	429a      	cmp	r2, r3
 800e258:	d20c      	bcs.n	800e274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e25a:	4b22      	ldr	r3, [pc, #136]	@ (800e2e4 <HAL_RCC_ClockConfig+0x1b8>)
 800e25c:	683a      	ldr	r2, [r7, #0]
 800e25e:	b2d2      	uxtb	r2, r2
 800e260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e262:	4b20      	ldr	r3, [pc, #128]	@ (800e2e4 <HAL_RCC_ClockConfig+0x1b8>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 030f 	and.w	r3, r3, #15
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d001      	beq.n	800e274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e270:	2301      	movs	r3, #1
 800e272:	e032      	b.n	800e2da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f003 0304 	and.w	r3, r3, #4
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d008      	beq.n	800e292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e280:	4b19      	ldr	r3, [pc, #100]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	4916      	ldr	r1, [pc, #88]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e28e:	4313      	orrs	r3, r2
 800e290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d009      	beq.n	800e2b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e29e:	4b12      	ldr	r3, [pc, #72]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	691b      	ldr	r3, [r3, #16]
 800e2aa:	00db      	lsls	r3, r3, #3
 800e2ac:	490e      	ldr	r1, [pc, #56]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e2b2:	f000 f855 	bl	800e360 <HAL_RCC_GetSysClockFreq>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1bc>)
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	091b      	lsrs	r3, r3, #4
 800e2be:	f003 030f 	and.w	r3, r3, #15
 800e2c2:	490a      	ldr	r1, [pc, #40]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c0>)
 800e2c4:	5ccb      	ldrb	r3, [r1, r3]
 800e2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e2ca:	4a09      	ldr	r2, [pc, #36]	@ (800e2f0 <HAL_RCC_ClockConfig+0x1c4>)
 800e2cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e2ce:	4b09      	ldr	r3, [pc, #36]	@ (800e2f4 <HAL_RCC_ClockConfig+0x1c8>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7ff fafc 	bl	800d8d0 <HAL_InitTick>

  return HAL_OK;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	40023c00 	.word	0x40023c00
 800e2e8:	40023800 	.word	0x40023800
 800e2ec:	0801625c 	.word	0x0801625c
 800e2f0:	20000004 	.word	0x20000004
 800e2f4:	20000008 	.word	0x20000008

0800e2f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e2fc:	4b03      	ldr	r3, [pc, #12]	@ (800e30c <HAL_RCC_GetHCLKFreq+0x14>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
}
 800e300:	4618      	mov	r0, r3
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	20000004 	.word	0x20000004

0800e310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e314:	f7ff fff0 	bl	800e2f8 <HAL_RCC_GetHCLKFreq>
 800e318:	4602      	mov	r2, r0
 800e31a:	4b05      	ldr	r3, [pc, #20]	@ (800e330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	0a9b      	lsrs	r3, r3, #10
 800e320:	f003 0307 	and.w	r3, r3, #7
 800e324:	4903      	ldr	r1, [pc, #12]	@ (800e334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e326:	5ccb      	ldrb	r3, [r1, r3]
 800e328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	40023800 	.word	0x40023800
 800e334:	0801626c 	.word	0x0801626c

0800e338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e33c:	f7ff ffdc 	bl	800e2f8 <HAL_RCC_GetHCLKFreq>
 800e340:	4602      	mov	r2, r0
 800e342:	4b05      	ldr	r3, [pc, #20]	@ (800e358 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	0b5b      	lsrs	r3, r3, #13
 800e348:	f003 0307 	and.w	r3, r3, #7
 800e34c:	4903      	ldr	r1, [pc, #12]	@ (800e35c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e34e:	5ccb      	ldrb	r3, [r1, r3]
 800e350:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e354:	4618      	mov	r0, r3
 800e356:	bd80      	pop	{r7, pc}
 800e358:	40023800 	.word	0x40023800
 800e35c:	0801626c 	.word	0x0801626c

0800e360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e364:	b0ae      	sub	sp, #184	@ 0xb8
 800e366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e368:	2300      	movs	r3, #0
 800e36a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800e36e:	2300      	movs	r3, #0
 800e370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800e374:	2300      	movs	r3, #0
 800e376:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800e37a:	2300      	movs	r3, #0
 800e37c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800e380:	2300      	movs	r3, #0
 800e382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e386:	4bcb      	ldr	r3, [pc, #812]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	f003 030c 	and.w	r3, r3, #12
 800e38e:	2b0c      	cmp	r3, #12
 800e390:	f200 8206 	bhi.w	800e7a0 <HAL_RCC_GetSysClockFreq+0x440>
 800e394:	a201      	add	r2, pc, #4	@ (adr r2, 800e39c <HAL_RCC_GetSysClockFreq+0x3c>)
 800e396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e39a:	bf00      	nop
 800e39c:	0800e3d1 	.word	0x0800e3d1
 800e3a0:	0800e7a1 	.word	0x0800e7a1
 800e3a4:	0800e7a1 	.word	0x0800e7a1
 800e3a8:	0800e7a1 	.word	0x0800e7a1
 800e3ac:	0800e3d9 	.word	0x0800e3d9
 800e3b0:	0800e7a1 	.word	0x0800e7a1
 800e3b4:	0800e7a1 	.word	0x0800e7a1
 800e3b8:	0800e7a1 	.word	0x0800e7a1
 800e3bc:	0800e3e1 	.word	0x0800e3e1
 800e3c0:	0800e7a1 	.word	0x0800e7a1
 800e3c4:	0800e7a1 	.word	0x0800e7a1
 800e3c8:	0800e7a1 	.word	0x0800e7a1
 800e3cc:	0800e5d1 	.word	0x0800e5d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e3d0:	4bb9      	ldr	r3, [pc, #740]	@ (800e6b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800e3d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800e3d6:	e1e7      	b.n	800e7a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e3d8:	4bb8      	ldr	r3, [pc, #736]	@ (800e6bc <HAL_RCC_GetSysClockFreq+0x35c>)
 800e3da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e3de:	e1e3      	b.n	800e7a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e3e0:	4bb4      	ldr	r3, [pc, #720]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e3ec:	4bb1      	ldr	r3, [pc, #708]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d071      	beq.n	800e4dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e3f8:	4bae      	ldr	r3, [pc, #696]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	099b      	lsrs	r3, r3, #6
 800e3fe:	2200      	movs	r2, #0
 800e400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e404:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800e408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e40c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e410:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e414:	2300      	movs	r3, #0
 800e416:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e41a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e41e:	4622      	mov	r2, r4
 800e420:	462b      	mov	r3, r5
 800e422:	f04f 0000 	mov.w	r0, #0
 800e426:	f04f 0100 	mov.w	r1, #0
 800e42a:	0159      	lsls	r1, r3, #5
 800e42c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e430:	0150      	lsls	r0, r2, #5
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4621      	mov	r1, r4
 800e438:	1a51      	subs	r1, r2, r1
 800e43a:	6439      	str	r1, [r7, #64]	@ 0x40
 800e43c:	4629      	mov	r1, r5
 800e43e:	eb63 0301 	sbc.w	r3, r3, r1
 800e442:	647b      	str	r3, [r7, #68]	@ 0x44
 800e444:	f04f 0200 	mov.w	r2, #0
 800e448:	f04f 0300 	mov.w	r3, #0
 800e44c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800e450:	4649      	mov	r1, r9
 800e452:	018b      	lsls	r3, r1, #6
 800e454:	4641      	mov	r1, r8
 800e456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e45a:	4641      	mov	r1, r8
 800e45c:	018a      	lsls	r2, r1, #6
 800e45e:	4641      	mov	r1, r8
 800e460:	1a51      	subs	r1, r2, r1
 800e462:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e464:	4649      	mov	r1, r9
 800e466:	eb63 0301 	sbc.w	r3, r3, r1
 800e46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e46c:	f04f 0200 	mov.w	r2, #0
 800e470:	f04f 0300 	mov.w	r3, #0
 800e474:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800e478:	4649      	mov	r1, r9
 800e47a:	00cb      	lsls	r3, r1, #3
 800e47c:	4641      	mov	r1, r8
 800e47e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e482:	4641      	mov	r1, r8
 800e484:	00ca      	lsls	r2, r1, #3
 800e486:	4610      	mov	r0, r2
 800e488:	4619      	mov	r1, r3
 800e48a:	4603      	mov	r3, r0
 800e48c:	4622      	mov	r2, r4
 800e48e:	189b      	adds	r3, r3, r2
 800e490:	633b      	str	r3, [r7, #48]	@ 0x30
 800e492:	462b      	mov	r3, r5
 800e494:	460a      	mov	r2, r1
 800e496:	eb42 0303 	adc.w	r3, r2, r3
 800e49a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e49c:	f04f 0200 	mov.w	r2, #0
 800e4a0:	f04f 0300 	mov.w	r3, #0
 800e4a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	024b      	lsls	r3, r1, #9
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	024a      	lsls	r2, r1, #9
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e4c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e4c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e4cc:	f7f2 fbec 	bl	8000ca8 <__aeabi_uldivmod>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e4da:	e067      	b.n	800e5ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e4dc:	4b75      	ldr	r3, [pc, #468]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	099b      	lsrs	r3, r3, #6
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e4e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e4ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e4fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e4fe:	4622      	mov	r2, r4
 800e500:	462b      	mov	r3, r5
 800e502:	f04f 0000 	mov.w	r0, #0
 800e506:	f04f 0100 	mov.w	r1, #0
 800e50a:	0159      	lsls	r1, r3, #5
 800e50c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e510:	0150      	lsls	r0, r2, #5
 800e512:	4602      	mov	r2, r0
 800e514:	460b      	mov	r3, r1
 800e516:	4621      	mov	r1, r4
 800e518:	1a51      	subs	r1, r2, r1
 800e51a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e51c:	4629      	mov	r1, r5
 800e51e:	eb63 0301 	sbc.w	r3, r3, r1
 800e522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e524:	f04f 0200 	mov.w	r2, #0
 800e528:	f04f 0300 	mov.w	r3, #0
 800e52c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800e530:	4649      	mov	r1, r9
 800e532:	018b      	lsls	r3, r1, #6
 800e534:	4641      	mov	r1, r8
 800e536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e53a:	4641      	mov	r1, r8
 800e53c:	018a      	lsls	r2, r1, #6
 800e53e:	4641      	mov	r1, r8
 800e540:	ebb2 0a01 	subs.w	sl, r2, r1
 800e544:	4649      	mov	r1, r9
 800e546:	eb63 0b01 	sbc.w	fp, r3, r1
 800e54a:	f04f 0200 	mov.w	r2, #0
 800e54e:	f04f 0300 	mov.w	r3, #0
 800e552:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e556:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e55a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e55e:	4692      	mov	sl, r2
 800e560:	469b      	mov	fp, r3
 800e562:	4623      	mov	r3, r4
 800e564:	eb1a 0303 	adds.w	r3, sl, r3
 800e568:	623b      	str	r3, [r7, #32]
 800e56a:	462b      	mov	r3, r5
 800e56c:	eb4b 0303 	adc.w	r3, fp, r3
 800e570:	627b      	str	r3, [r7, #36]	@ 0x24
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	f04f 0300 	mov.w	r3, #0
 800e57a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800e57e:	4629      	mov	r1, r5
 800e580:	028b      	lsls	r3, r1, #10
 800e582:	4621      	mov	r1, r4
 800e584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e588:	4621      	mov	r1, r4
 800e58a:	028a      	lsls	r2, r1, #10
 800e58c:	4610      	mov	r0, r2
 800e58e:	4619      	mov	r1, r3
 800e590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e594:	2200      	movs	r2, #0
 800e596:	673b      	str	r3, [r7, #112]	@ 0x70
 800e598:	677a      	str	r2, [r7, #116]	@ 0x74
 800e59a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e59e:	f7f2 fb83 	bl	8000ca8 <__aeabi_uldivmod>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e5ac:	4b41      	ldr	r3, [pc, #260]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	0c1b      	lsrs	r3, r3, #16
 800e5b2:	f003 0303 	and.w	r3, r3, #3
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	005b      	lsls	r3, r3, #1
 800e5ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800e5be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e5c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e5ce:	e0eb      	b.n	800e7a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e5d0:	4b38      	ldr	r3, [pc, #224]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e5d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e5dc:	4b35      	ldr	r3, [pc, #212]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d06b      	beq.n	800e6c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e5e8:	4b32      	ldr	r3, [pc, #200]	@ (800e6b4 <HAL_RCC_GetSysClockFreq+0x354>)
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	099b      	lsrs	r3, r3, #6
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e5f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800e600:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e604:	4622      	mov	r2, r4
 800e606:	462b      	mov	r3, r5
 800e608:	f04f 0000 	mov.w	r0, #0
 800e60c:	f04f 0100 	mov.w	r1, #0
 800e610:	0159      	lsls	r1, r3, #5
 800e612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e616:	0150      	lsls	r0, r2, #5
 800e618:	4602      	mov	r2, r0
 800e61a:	460b      	mov	r3, r1
 800e61c:	4621      	mov	r1, r4
 800e61e:	1a51      	subs	r1, r2, r1
 800e620:	61b9      	str	r1, [r7, #24]
 800e622:	4629      	mov	r1, r5
 800e624:	eb63 0301 	sbc.w	r3, r3, r1
 800e628:	61fb      	str	r3, [r7, #28]
 800e62a:	f04f 0200 	mov.w	r2, #0
 800e62e:	f04f 0300 	mov.w	r3, #0
 800e632:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800e636:	4659      	mov	r1, fp
 800e638:	018b      	lsls	r3, r1, #6
 800e63a:	4651      	mov	r1, sl
 800e63c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e640:	4651      	mov	r1, sl
 800e642:	018a      	lsls	r2, r1, #6
 800e644:	4651      	mov	r1, sl
 800e646:	ebb2 0801 	subs.w	r8, r2, r1
 800e64a:	4659      	mov	r1, fp
 800e64c:	eb63 0901 	sbc.w	r9, r3, r1
 800e650:	f04f 0200 	mov.w	r2, #0
 800e654:	f04f 0300 	mov.w	r3, #0
 800e658:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e65c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e660:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e664:	4690      	mov	r8, r2
 800e666:	4699      	mov	r9, r3
 800e668:	4623      	mov	r3, r4
 800e66a:	eb18 0303 	adds.w	r3, r8, r3
 800e66e:	613b      	str	r3, [r7, #16]
 800e670:	462b      	mov	r3, r5
 800e672:	eb49 0303 	adc.w	r3, r9, r3
 800e676:	617b      	str	r3, [r7, #20]
 800e678:	f04f 0200 	mov.w	r2, #0
 800e67c:	f04f 0300 	mov.w	r3, #0
 800e680:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e684:	4629      	mov	r1, r5
 800e686:	024b      	lsls	r3, r1, #9
 800e688:	4621      	mov	r1, r4
 800e68a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e68e:	4621      	mov	r1, r4
 800e690:	024a      	lsls	r2, r1, #9
 800e692:	4610      	mov	r0, r2
 800e694:	4619      	mov	r1, r3
 800e696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e69a:	2200      	movs	r2, #0
 800e69c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e69e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e6a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e6a4:	f7f2 fb00 	bl	8000ca8 <__aeabi_uldivmod>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e6b2:	e065      	b.n	800e780 <HAL_RCC_GetSysClockFreq+0x420>
 800e6b4:	40023800 	.word	0x40023800
 800e6b8:	00f42400 	.word	0x00f42400
 800e6bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e6c0:	4b3d      	ldr	r3, [pc, #244]	@ (800e7b8 <HAL_RCC_GetSysClockFreq+0x458>)
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	099b      	lsrs	r3, r3, #6
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e6d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800e6d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800e6da:	4642      	mov	r2, r8
 800e6dc:	464b      	mov	r3, r9
 800e6de:	f04f 0000 	mov.w	r0, #0
 800e6e2:	f04f 0100 	mov.w	r1, #0
 800e6e6:	0159      	lsls	r1, r3, #5
 800e6e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e6ec:	0150      	lsls	r0, r2, #5
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4641      	mov	r1, r8
 800e6f4:	1a51      	subs	r1, r2, r1
 800e6f6:	60b9      	str	r1, [r7, #8]
 800e6f8:	4649      	mov	r1, r9
 800e6fa:	eb63 0301 	sbc.w	r3, r3, r1
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	f04f 0200 	mov.w	r2, #0
 800e704:	f04f 0300 	mov.w	r3, #0
 800e708:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e70c:	4659      	mov	r1, fp
 800e70e:	018b      	lsls	r3, r1, #6
 800e710:	4651      	mov	r1, sl
 800e712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e716:	4651      	mov	r1, sl
 800e718:	018a      	lsls	r2, r1, #6
 800e71a:	4651      	mov	r1, sl
 800e71c:	1a54      	subs	r4, r2, r1
 800e71e:	4659      	mov	r1, fp
 800e720:	eb63 0501 	sbc.w	r5, r3, r1
 800e724:	f04f 0200 	mov.w	r2, #0
 800e728:	f04f 0300 	mov.w	r3, #0
 800e72c:	00eb      	lsls	r3, r5, #3
 800e72e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e732:	00e2      	lsls	r2, r4, #3
 800e734:	4614      	mov	r4, r2
 800e736:	461d      	mov	r5, r3
 800e738:	4643      	mov	r3, r8
 800e73a:	18e3      	adds	r3, r4, r3
 800e73c:	603b      	str	r3, [r7, #0]
 800e73e:	464b      	mov	r3, r9
 800e740:	eb45 0303 	adc.w	r3, r5, r3
 800e744:	607b      	str	r3, [r7, #4]
 800e746:	f04f 0200 	mov.w	r2, #0
 800e74a:	f04f 0300 	mov.w	r3, #0
 800e74e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e752:	4629      	mov	r1, r5
 800e754:	028b      	lsls	r3, r1, #10
 800e756:	4621      	mov	r1, r4
 800e758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e75c:	4621      	mov	r1, r4
 800e75e:	028a      	lsls	r2, r1, #10
 800e760:	4610      	mov	r0, r2
 800e762:	4619      	mov	r1, r3
 800e764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e768:	2200      	movs	r2, #0
 800e76a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e76c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e76e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e772:	f7f2 fa99 	bl	8000ca8 <__aeabi_uldivmod>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4613      	mov	r3, r2
 800e77c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800e780:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b8 <HAL_RCC_GetSysClockFreq+0x458>)
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	0f1b      	lsrs	r3, r3, #28
 800e786:	f003 0307 	and.w	r3, r3, #7
 800e78a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800e78e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e796:	fbb2 f3f3 	udiv	r3, r2, r3
 800e79a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e79e:	e003      	b.n	800e7a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e7a0:	4b06      	ldr	r3, [pc, #24]	@ (800e7bc <HAL_RCC_GetSysClockFreq+0x45c>)
 800e7a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e7a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e7a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	37b8      	adds	r7, #184	@ 0xb8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7b6:	bf00      	nop
 800e7b8:	40023800 	.word	0x40023800
 800e7bc:	00f42400 	.word	0x00f42400

0800e7c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b086      	sub	sp, #24
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d101      	bne.n	800e7d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e28d      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 8083 	beq.w	800e8e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e7e0:	4b94      	ldr	r3, [pc, #592]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	f003 030c 	and.w	r3, r3, #12
 800e7e8:	2b04      	cmp	r3, #4
 800e7ea:	d019      	beq.n	800e820 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e7ec:	4b91      	ldr	r3, [pc, #580]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e7f4:	2b08      	cmp	r3, #8
 800e7f6:	d106      	bne.n	800e806 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e7f8:	4b8e      	ldr	r3, [pc, #568]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e804:	d00c      	beq.n	800e820 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e806:	4b8b      	ldr	r3, [pc, #556]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e80e:	2b0c      	cmp	r3, #12
 800e810:	d112      	bne.n	800e838 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e812:	4b88      	ldr	r3, [pc, #544]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e81a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e81e:	d10b      	bne.n	800e838 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e820:	4b84      	ldr	r3, [pc, #528]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d05b      	beq.n	800e8e4 <HAL_RCC_OscConfig+0x124>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d157      	bne.n	800e8e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800e834:	2301      	movs	r3, #1
 800e836:	e25a      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e840:	d106      	bne.n	800e850 <HAL_RCC_OscConfig+0x90>
 800e842:	4b7c      	ldr	r3, [pc, #496]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a7b      	ldr	r2, [pc, #492]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e84c:	6013      	str	r3, [r2, #0]
 800e84e:	e01d      	b.n	800e88c <HAL_RCC_OscConfig+0xcc>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e858:	d10c      	bne.n	800e874 <HAL_RCC_OscConfig+0xb4>
 800e85a:	4b76      	ldr	r3, [pc, #472]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4a75      	ldr	r2, [pc, #468]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e864:	6013      	str	r3, [r2, #0]
 800e866:	4b73      	ldr	r3, [pc, #460]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a72      	ldr	r2, [pc, #456]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e86c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e870:	6013      	str	r3, [r2, #0]
 800e872:	e00b      	b.n	800e88c <HAL_RCC_OscConfig+0xcc>
 800e874:	4b6f      	ldr	r3, [pc, #444]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a6e      	ldr	r2, [pc, #440]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e87a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e87e:	6013      	str	r3, [r2, #0]
 800e880:	4b6c      	ldr	r3, [pc, #432]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a6b      	ldr	r2, [pc, #428]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e88a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d013      	beq.n	800e8bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e894:	f7ff f860 	bl	800d958 <HAL_GetTick>
 800e898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e89a:	e008      	b.n	800e8ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e89c:	f7ff f85c 	bl	800d958 <HAL_GetTick>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	1ad3      	subs	r3, r2, r3
 800e8a6:	2b64      	cmp	r3, #100	@ 0x64
 800e8a8:	d901      	bls.n	800e8ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e21f      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e8ae:	4b61      	ldr	r3, [pc, #388]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d0f0      	beq.n	800e89c <HAL_RCC_OscConfig+0xdc>
 800e8ba:	e014      	b.n	800e8e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8bc:	f7ff f84c 	bl	800d958 <HAL_GetTick>
 800e8c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e8c2:	e008      	b.n	800e8d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e8c4:	f7ff f848 	bl	800d958 <HAL_GetTick>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	2b64      	cmp	r3, #100	@ 0x64
 800e8d0:	d901      	bls.n	800e8d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800e8d2:	2303      	movs	r3, #3
 800e8d4:	e20b      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e8d6:	4b57      	ldr	r3, [pc, #348]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1f0      	bne.n	800e8c4 <HAL_RCC_OscConfig+0x104>
 800e8e2:	e000      	b.n	800e8e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e8e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f003 0302 	and.w	r3, r3, #2
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d06f      	beq.n	800e9d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e8f2:	4b50      	ldr	r3, [pc, #320]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	f003 030c 	and.w	r3, r3, #12
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d017      	beq.n	800e92e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e8fe:	4b4d      	ldr	r3, [pc, #308]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e906:	2b08      	cmp	r3, #8
 800e908:	d105      	bne.n	800e916 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e90a:	4b4a      	ldr	r3, [pc, #296]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e912:	2b00      	cmp	r3, #0
 800e914:	d00b      	beq.n	800e92e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e916:	4b47      	ldr	r3, [pc, #284]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e91e:	2b0c      	cmp	r3, #12
 800e920:	d11c      	bne.n	800e95c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e922:	4b44      	ldr	r3, [pc, #272]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d116      	bne.n	800e95c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e92e:	4b41      	ldr	r3, [pc, #260]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f003 0302 	and.w	r3, r3, #2
 800e936:	2b00      	cmp	r3, #0
 800e938:	d005      	beq.n	800e946 <HAL_RCC_OscConfig+0x186>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d001      	beq.n	800e946 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e1d3      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e946:	4b3b      	ldr	r3, [pc, #236]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	691b      	ldr	r3, [r3, #16]
 800e952:	00db      	lsls	r3, r3, #3
 800e954:	4937      	ldr	r1, [pc, #220]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e956:	4313      	orrs	r3, r2
 800e958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e95a:	e03a      	b.n	800e9d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d020      	beq.n	800e9a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e964:	4b34      	ldr	r3, [pc, #208]	@ (800ea38 <HAL_RCC_OscConfig+0x278>)
 800e966:	2201      	movs	r2, #1
 800e968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e96a:	f7fe fff5 	bl	800d958 <HAL_GetTick>
 800e96e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e970:	e008      	b.n	800e984 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e972:	f7fe fff1 	bl	800d958 <HAL_GetTick>
 800e976:	4602      	mov	r2, r0
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d901      	bls.n	800e984 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800e980:	2303      	movs	r3, #3
 800e982:	e1b4      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e984:	4b2b      	ldr	r3, [pc, #172]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f003 0302 	and.w	r3, r3, #2
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d0f0      	beq.n	800e972 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e990:	4b28      	ldr	r3, [pc, #160]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	00db      	lsls	r3, r3, #3
 800e99e:	4925      	ldr	r1, [pc, #148]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	600b      	str	r3, [r1, #0]
 800e9a4:	e015      	b.n	800e9d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e9a6:	4b24      	ldr	r3, [pc, #144]	@ (800ea38 <HAL_RCC_OscConfig+0x278>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9ac:	f7fe ffd4 	bl	800d958 <HAL_GetTick>
 800e9b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e9b2:	e008      	b.n	800e9c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e9b4:	f7fe ffd0 	bl	800d958 <HAL_GetTick>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	1ad3      	subs	r3, r2, r3
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d901      	bls.n	800e9c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e9c2:	2303      	movs	r3, #3
 800e9c4:	e193      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e9c6:	4b1b      	ldr	r3, [pc, #108]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f003 0302 	and.w	r3, r3, #2
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1f0      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f003 0308 	and.w	r3, r3, #8
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d036      	beq.n	800ea4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	695b      	ldr	r3, [r3, #20]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d016      	beq.n	800ea14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e9e6:	4b15      	ldr	r3, [pc, #84]	@ (800ea3c <HAL_RCC_OscConfig+0x27c>)
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9ec:	f7fe ffb4 	bl	800d958 <HAL_GetTick>
 800e9f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e9f2:	e008      	b.n	800ea06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e9f4:	f7fe ffb0 	bl	800d958 <HAL_GetTick>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d901      	bls.n	800ea06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800ea02:	2303      	movs	r3, #3
 800ea04:	e173      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ea06:	4b0b      	ldr	r3, [pc, #44]	@ (800ea34 <HAL_RCC_OscConfig+0x274>)
 800ea08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea0a:	f003 0302 	and.w	r3, r3, #2
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d0f0      	beq.n	800e9f4 <HAL_RCC_OscConfig+0x234>
 800ea12:	e01b      	b.n	800ea4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ea14:	4b09      	ldr	r3, [pc, #36]	@ (800ea3c <HAL_RCC_OscConfig+0x27c>)
 800ea16:	2200      	movs	r2, #0
 800ea18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea1a:	f7fe ff9d 	bl	800d958 <HAL_GetTick>
 800ea1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ea20:	e00e      	b.n	800ea40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ea22:	f7fe ff99 	bl	800d958 <HAL_GetTick>
 800ea26:	4602      	mov	r2, r0
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d907      	bls.n	800ea40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800ea30:	2303      	movs	r3, #3
 800ea32:	e15c      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
 800ea34:	40023800 	.word	0x40023800
 800ea38:	42470000 	.word	0x42470000
 800ea3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ea40:	4b8a      	ldr	r3, [pc, #552]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ea42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea44:	f003 0302 	and.w	r3, r3, #2
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1ea      	bne.n	800ea22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f003 0304 	and.w	r3, r3, #4
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 8097 	beq.w	800eb88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ea5e:	4b83      	ldr	r3, [pc, #524]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ea60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10f      	bne.n	800ea8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	60bb      	str	r3, [r7, #8]
 800ea6e:	4b7f      	ldr	r3, [pc, #508]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ea70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea72:	4a7e      	ldr	r2, [pc, #504]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ea74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea78:	6413      	str	r3, [r2, #64]	@ 0x40
 800ea7a:	4b7c      	ldr	r3, [pc, #496]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ea7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea82:	60bb      	str	r3, [r7, #8]
 800ea84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ea86:	2301      	movs	r3, #1
 800ea88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea8a:	4b79      	ldr	r3, [pc, #484]	@ (800ec70 <HAL_RCC_OscConfig+0x4b0>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d118      	bne.n	800eac8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ea96:	4b76      	ldr	r3, [pc, #472]	@ (800ec70 <HAL_RCC_OscConfig+0x4b0>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a75      	ldr	r2, [pc, #468]	@ (800ec70 <HAL_RCC_OscConfig+0x4b0>)
 800ea9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eaa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eaa2:	f7fe ff59 	bl	800d958 <HAL_GetTick>
 800eaa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eaa8:	e008      	b.n	800eabc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eaaa:	f7fe ff55 	bl	800d958 <HAL_GetTick>
 800eaae:	4602      	mov	r2, r0
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d901      	bls.n	800eabc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800eab8:	2303      	movs	r3, #3
 800eaba:	e118      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eabc:	4b6c      	ldr	r3, [pc, #432]	@ (800ec70 <HAL_RCC_OscConfig+0x4b0>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d0f0      	beq.n	800eaaa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d106      	bne.n	800eade <HAL_RCC_OscConfig+0x31e>
 800ead0:	4b66      	ldr	r3, [pc, #408]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ead2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ead4:	4a65      	ldr	r2, [pc, #404]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ead6:	f043 0301 	orr.w	r3, r3, #1
 800eada:	6713      	str	r3, [r2, #112]	@ 0x70
 800eadc:	e01c      	b.n	800eb18 <HAL_RCC_OscConfig+0x358>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	2b05      	cmp	r3, #5
 800eae4:	d10c      	bne.n	800eb00 <HAL_RCC_OscConfig+0x340>
 800eae6:	4b61      	ldr	r3, [pc, #388]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaea:	4a60      	ldr	r2, [pc, #384]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eaec:	f043 0304 	orr.w	r3, r3, #4
 800eaf0:	6713      	str	r3, [r2, #112]	@ 0x70
 800eaf2:	4b5e      	ldr	r3, [pc, #376]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eaf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaf6:	4a5d      	ldr	r2, [pc, #372]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eaf8:	f043 0301 	orr.w	r3, r3, #1
 800eafc:	6713      	str	r3, [r2, #112]	@ 0x70
 800eafe:	e00b      	b.n	800eb18 <HAL_RCC_OscConfig+0x358>
 800eb00:	4b5a      	ldr	r3, [pc, #360]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb04:	4a59      	ldr	r2, [pc, #356]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb06:	f023 0301 	bic.w	r3, r3, #1
 800eb0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800eb0c:	4b57      	ldr	r3, [pc, #348]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb10:	4a56      	ldr	r2, [pc, #344]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb12:	f023 0304 	bic.w	r3, r3, #4
 800eb16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d015      	beq.n	800eb4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb20:	f7fe ff1a 	bl	800d958 <HAL_GetTick>
 800eb24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb26:	e00a      	b.n	800eb3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eb28:	f7fe ff16 	bl	800d958 <HAL_GetTick>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d901      	bls.n	800eb3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	e0d7      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb3e:	4b4b      	ldr	r3, [pc, #300]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb42:	f003 0302 	and.w	r3, r3, #2
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d0ee      	beq.n	800eb28 <HAL_RCC_OscConfig+0x368>
 800eb4a:	e014      	b.n	800eb76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb4c:	f7fe ff04 	bl	800d958 <HAL_GetTick>
 800eb50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eb52:	e00a      	b.n	800eb6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eb54:	f7fe ff00 	bl	800d958 <HAL_GetTick>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d901      	bls.n	800eb6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800eb66:	2303      	movs	r3, #3
 800eb68:	e0c1      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eb6a:	4b40      	ldr	r3, [pc, #256]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb6e:	f003 0302 	and.w	r3, r3, #2
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1ee      	bne.n	800eb54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800eb76:	7dfb      	ldrb	r3, [r7, #23]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d105      	bne.n	800eb88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eb7c:	4b3b      	ldr	r3, [pc, #236]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb80:	4a3a      	ldr	r2, [pc, #232]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f000 80ad 	beq.w	800ecec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800eb92:	4b36      	ldr	r3, [pc, #216]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	f003 030c 	and.w	r3, r3, #12
 800eb9a:	2b08      	cmp	r3, #8
 800eb9c:	d060      	beq.n	800ec60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	2b02      	cmp	r3, #2
 800eba4:	d145      	bne.n	800ec32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eba6:	4b33      	ldr	r3, [pc, #204]	@ (800ec74 <HAL_RCC_OscConfig+0x4b4>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebac:	f7fe fed4 	bl	800d958 <HAL_GetTick>
 800ebb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebb2:	e008      	b.n	800ebc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ebb4:	f7fe fed0 	bl	800d958 <HAL_GetTick>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	2b02      	cmp	r3, #2
 800ebc0:	d901      	bls.n	800ebc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800ebc2:	2303      	movs	r3, #3
 800ebc4:	e093      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebc6:	4b29      	ldr	r3, [pc, #164]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1f0      	bne.n	800ebb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	69da      	ldr	r2, [r3, #28]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	431a      	orrs	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebe0:	019b      	lsls	r3, r3, #6
 800ebe2:	431a      	orrs	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebe8:	085b      	lsrs	r3, r3, #1
 800ebea:	3b01      	subs	r3, #1
 800ebec:	041b      	lsls	r3, r3, #16
 800ebee:	431a      	orrs	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf4:	061b      	lsls	r3, r3, #24
 800ebf6:	431a      	orrs	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebfc:	071b      	lsls	r3, r3, #28
 800ebfe:	491b      	ldr	r1, [pc, #108]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ec00:	4313      	orrs	r3, r2
 800ec02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ec04:	4b1b      	ldr	r3, [pc, #108]	@ (800ec74 <HAL_RCC_OscConfig+0x4b4>)
 800ec06:	2201      	movs	r2, #1
 800ec08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec0a:	f7fe fea5 	bl	800d958 <HAL_GetTick>
 800ec0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ec10:	e008      	b.n	800ec24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ec12:	f7fe fea1 	bl	800d958 <HAL_GetTick>
 800ec16:	4602      	mov	r2, r0
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	2b02      	cmp	r3, #2
 800ec1e:	d901      	bls.n	800ec24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ec20:	2303      	movs	r3, #3
 800ec22:	e064      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ec24:	4b11      	ldr	r3, [pc, #68]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d0f0      	beq.n	800ec12 <HAL_RCC_OscConfig+0x452>
 800ec30:	e05c      	b.n	800ecec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec32:	4b10      	ldr	r3, [pc, #64]	@ (800ec74 <HAL_RCC_OscConfig+0x4b4>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec38:	f7fe fe8e 	bl	800d958 <HAL_GetTick>
 800ec3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec3e:	e008      	b.n	800ec52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ec40:	f7fe fe8a 	bl	800d958 <HAL_GetTick>
 800ec44:	4602      	mov	r2, r0
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	2b02      	cmp	r3, #2
 800ec4c:	d901      	bls.n	800ec52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ec4e:	2303      	movs	r3, #3
 800ec50:	e04d      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec52:	4b06      	ldr	r3, [pc, #24]	@ (800ec6c <HAL_RCC_OscConfig+0x4ac>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1f0      	bne.n	800ec40 <HAL_RCC_OscConfig+0x480>
 800ec5e:	e045      	b.n	800ecec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d107      	bne.n	800ec78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e040      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
 800ec6c:	40023800 	.word	0x40023800
 800ec70:	40007000 	.word	0x40007000
 800ec74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ec78:	4b1f      	ldr	r3, [pc, #124]	@ (800ecf8 <HAL_RCC_OscConfig+0x538>)
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d030      	beq.n	800ece8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d129      	bne.n	800ece8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d122      	bne.n	800ece8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800eca8:	4013      	ands	r3, r2
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ecae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d119      	bne.n	800ece8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecbe:	085b      	lsrs	r3, r3, #1
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d10f      	bne.n	800ece8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d107      	bne.n	800ece8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ece2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d001      	beq.n	800ecec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	e000      	b.n	800ecee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3718      	adds	r7, #24
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	40023800 	.word	0x40023800

0800ecfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d101      	bne.n	800ed0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e07b      	b.n	800ee06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d108      	bne.n	800ed28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed1e:	d009      	beq.n	800ed34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	61da      	str	r2, [r3, #28]
 800ed26:	e005      	b.n	800ed34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2200      	movs	r2, #0
 800ed38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7fe f99e 	bl	800d090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2202      	movs	r2, #2
 800ed58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ed6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ed7c:	431a      	orrs	r2, r3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed86:	431a      	orrs	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	691b      	ldr	r3, [r3, #16]
 800ed8c:	f003 0302 	and.w	r3, r3, #2
 800ed90:	431a      	orrs	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	695b      	ldr	r3, [r3, #20]
 800ed96:	f003 0301 	and.w	r3, r3, #1
 800ed9a:	431a      	orrs	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eda4:	431a      	orrs	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	69db      	ldr	r3, [r3, #28]
 800edaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800edae:	431a      	orrs	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6a1b      	ldr	r3, [r3, #32]
 800edb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edb8:	ea42 0103 	orr.w	r1, r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	430a      	orrs	r2, r1
 800edca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	699b      	ldr	r3, [r3, #24]
 800edd0:	0c1b      	lsrs	r3, r3, #16
 800edd2:	f003 0104 	and.w	r1, r3, #4
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edda:	f003 0210 	and.w	r2, r3, #16
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	430a      	orrs	r2, r1
 800ede4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	69da      	ldr	r2, [r3, #28]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800edf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ee04:	2300      	movs	r3, #0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3708      	adds	r7, #8
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b088      	sub	sp, #32
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	60f8      	str	r0, [r7, #12]
 800ee16:	60b9      	str	r1, [r7, #8]
 800ee18:	603b      	str	r3, [r7, #0]
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d101      	bne.n	800ee30 <HAL_SPI_Transmit+0x22>
 800ee2c:	2302      	movs	r3, #2
 800ee2e:	e126      	b.n	800f07e <HAL_SPI_Transmit+0x270>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee38:	f7fe fd8e 	bl	800d958 <HAL_GetTick>
 800ee3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ee3e:	88fb      	ldrh	r3, [r7, #6]
 800ee40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d002      	beq.n	800ee54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ee4e:	2302      	movs	r3, #2
 800ee50:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ee52:	e10b      	b.n	800f06c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d002      	beq.n	800ee60 <HAL_SPI_Transmit+0x52>
 800ee5a:	88fb      	ldrh	r3, [r7, #6]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d102      	bne.n	800ee66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ee60:	2301      	movs	r3, #1
 800ee62:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ee64:	e102      	b.n	800f06c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2203      	movs	r2, #3
 800ee6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2200      	movs	r2, #0
 800ee72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	68ba      	ldr	r2, [r7, #8]
 800ee78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	88fa      	ldrh	r2, [r7, #6]
 800ee7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	88fa      	ldrh	r2, [r7, #6]
 800ee84:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2200      	movs	r2, #0
 800eea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eeac:	d10f      	bne.n	800eece <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eebc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eecc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eed8:	2b40      	cmp	r3, #64	@ 0x40
 800eeda:	d007      	beq.n	800eeec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eeea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eef4:	d14b      	bne.n	800ef8e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <HAL_SPI_Transmit+0xf6>
 800eefe:	8afb      	ldrh	r3, [r7, #22]
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d13e      	bne.n	800ef82 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef08:	881a      	ldrh	r2, [r3, #0]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef14:	1c9a      	adds	r2, r3, #2
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	3b01      	subs	r3, #1
 800ef22:	b29a      	uxth	r2, r3
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ef28:	e02b      	b.n	800ef82 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	f003 0302 	and.w	r3, r3, #2
 800ef34:	2b02      	cmp	r3, #2
 800ef36:	d112      	bne.n	800ef5e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef3c:	881a      	ldrh	r2, [r3, #0]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef48:	1c9a      	adds	r2, r3, #2
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	3b01      	subs	r3, #1
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ef5c:	e011      	b.n	800ef82 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef5e:	f7fe fcfb 	bl	800d958 <HAL_GetTick>
 800ef62:	4602      	mov	r2, r0
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d803      	bhi.n	800ef76 <HAL_SPI_Transmit+0x168>
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef74:	d102      	bne.n	800ef7c <HAL_SPI_Transmit+0x16e>
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d102      	bne.n	800ef82 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ef7c:	2303      	movs	r3, #3
 800ef7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ef80:	e074      	b.n	800f06c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1ce      	bne.n	800ef2a <HAL_SPI_Transmit+0x11c>
 800ef8c:	e04c      	b.n	800f028 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d002      	beq.n	800ef9c <HAL_SPI_Transmit+0x18e>
 800ef96:	8afb      	ldrh	r3, [r7, #22]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d140      	bne.n	800f01e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	330c      	adds	r3, #12
 800efa6:	7812      	ldrb	r2, [r2, #0]
 800efa8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efae:	1c5a      	adds	r2, r3, #1
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800efb8:	b29b      	uxth	r3, r3
 800efba:	3b01      	subs	r3, #1
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800efc2:	e02c      	b.n	800f01e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	689b      	ldr	r3, [r3, #8]
 800efca:	f003 0302 	and.w	r3, r3, #2
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d113      	bne.n	800effa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	330c      	adds	r3, #12
 800efdc:	7812      	ldrb	r2, [r2, #0]
 800efde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800efee:	b29b      	uxth	r3, r3
 800eff0:	3b01      	subs	r3, #1
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800eff8:	e011      	b.n	800f01e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800effa:	f7fe fcad 	bl	800d958 <HAL_GetTick>
 800effe:	4602      	mov	r2, r0
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	683a      	ldr	r2, [r7, #0]
 800f006:	429a      	cmp	r2, r3
 800f008:	d803      	bhi.n	800f012 <HAL_SPI_Transmit+0x204>
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f010:	d102      	bne.n	800f018 <HAL_SPI_Transmit+0x20a>
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d102      	bne.n	800f01e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800f018:	2303      	movs	r3, #3
 800f01a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f01c:	e026      	b.n	800f06c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f022:	b29b      	uxth	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1cd      	bne.n	800efc4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f028:	69ba      	ldr	r2, [r7, #24]
 800f02a:	6839      	ldr	r1, [r7, #0]
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f000 fcdd 	bl	800f9ec <SPI_EndRxTxTransaction>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2220      	movs	r2, #32
 800f03c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	689b      	ldr	r3, [r3, #8]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d10a      	bne.n	800f05c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f046:	2300      	movs	r3, #0
 800f048:	613b      	str	r3, [r7, #16]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	613b      	str	r3, [r7, #16]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	613b      	str	r3, [r7, #16]
 800f05a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f060:	2b00      	cmp	r3, #0
 800f062:	d002      	beq.n	800f06a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800f064:	2301      	movs	r3, #1
 800f066:	77fb      	strb	r3, [r7, #31]
 800f068:	e000      	b.n	800f06c <HAL_SPI_Transmit+0x25e>
  }

error:
 800f06a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2201      	movs	r2, #1
 800f070:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f07c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3720      	adds	r7, #32
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b088      	sub	sp, #32
 800f08a:	af02      	add	r7, sp, #8
 800f08c:	60f8      	str	r0, [r7, #12]
 800f08e:	60b9      	str	r1, [r7, #8]
 800f090:	603b      	str	r3, [r7, #0]
 800f092:	4613      	mov	r3, r2
 800f094:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f096:	2300      	movs	r3, #0
 800f098:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f0a2:	d112      	bne.n	800f0ca <HAL_SPI_Receive+0x44>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d10e      	bne.n	800f0ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2204      	movs	r2, #4
 800f0b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f0b4:	88fa      	ldrh	r2, [r7, #6]
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	9300      	str	r3, [sp, #0]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 f8f1 	bl	800f2a8 <HAL_SPI_TransmitReceive>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	e0ea      	b.n	800f2a0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d101      	bne.n	800f0d8 <HAL_SPI_Receive+0x52>
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	e0e3      	b.n	800f2a0 <HAL_SPI_Receive+0x21a>
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0e0:	f7fe fc3a 	bl	800d958 <HAL_GetTick>
 800f0e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d002      	beq.n	800f0f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f0f2:	2302      	movs	r3, #2
 800f0f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f0f6:	e0ca      	b.n	800f28e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d002      	beq.n	800f104 <HAL_SPI_Receive+0x7e>
 800f0fe:	88fb      	ldrh	r3, [r7, #6]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d102      	bne.n	800f10a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f108:	e0c1      	b.n	800f28e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2204      	movs	r2, #4
 800f10e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	2200      	movs	r2, #0
 800f116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	68ba      	ldr	r2, [r7, #8]
 800f11c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	88fa      	ldrh	r2, [r7, #6]
 800f122:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	88fa      	ldrh	r2, [r7, #6]
 800f128:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f150:	d10f      	bne.n	800f172 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f160:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f170:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f17c:	2b40      	cmp	r3, #64	@ 0x40
 800f17e:	d007      	beq.n	800f190 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f18e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d162      	bne.n	800f25e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f198:	e02e      	b.n	800f1f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	f003 0301 	and.w	r3, r3, #1
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d115      	bne.n	800f1d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f103 020c 	add.w	r2, r3, #12
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1b4:	7812      	ldrb	r2, [r2, #0]
 800f1b6:	b2d2      	uxtb	r2, r2
 800f1b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1be:	1c5a      	adds	r2, r3, #1
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f1d2:	e011      	b.n	800f1f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1d4:	f7fe fbc0 	bl	800d958 <HAL_GetTick>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	1ad3      	subs	r3, r2, r3
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d803      	bhi.n	800f1ec <HAL_SPI_Receive+0x166>
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ea:	d102      	bne.n	800f1f2 <HAL_SPI_Receive+0x16c>
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d102      	bne.n	800f1f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800f1f2:	2303      	movs	r3, #3
 800f1f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f1f6:	e04a      	b.n	800f28e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1cb      	bne.n	800f19a <HAL_SPI_Receive+0x114>
 800f202:	e031      	b.n	800f268 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	f003 0301 	and.w	r3, r3, #1
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d113      	bne.n	800f23a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	68da      	ldr	r2, [r3, #12]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f21c:	b292      	uxth	r2, r2
 800f21e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f224:	1c9a      	adds	r2, r3, #2
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f22e:	b29b      	uxth	r3, r3
 800f230:	3b01      	subs	r3, #1
 800f232:	b29a      	uxth	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f238:	e011      	b.n	800f25e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f23a:	f7fe fb8d 	bl	800d958 <HAL_GetTick>
 800f23e:	4602      	mov	r2, r0
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	1ad3      	subs	r3, r2, r3
 800f244:	683a      	ldr	r2, [r7, #0]
 800f246:	429a      	cmp	r2, r3
 800f248:	d803      	bhi.n	800f252 <HAL_SPI_Receive+0x1cc>
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f250:	d102      	bne.n	800f258 <HAL_SPI_Receive+0x1d2>
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d102      	bne.n	800f25e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800f258:	2303      	movs	r3, #3
 800f25a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f25c:	e017      	b.n	800f28e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f262:	b29b      	uxth	r3, r3
 800f264:	2b00      	cmp	r3, #0
 800f266:	d1cd      	bne.n	800f204 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	68f8      	ldr	r0, [r7, #12]
 800f26e:	f000 fb57 	bl	800f920 <SPI_EndRxTransaction>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2220      	movs	r2, #32
 800f27c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	75fb      	strb	r3, [r7, #23]
 800f28a:	e000      	b.n	800f28e <HAL_SPI_Receive+0x208>
  }

error :
 800f28c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2200      	movs	r2, #0
 800f29a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3718      	adds	r7, #24
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08c      	sub	sp, #48	@ 0x30
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d101      	bne.n	800f2ce <HAL_SPI_TransmitReceive+0x26>
 800f2ca:	2302      	movs	r3, #2
 800f2cc:	e18a      	b.n	800f5e4 <HAL_SPI_TransmitReceive+0x33c>
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f2d6:	f7fe fb3f 	bl	800d958 <HAL_GetTick>
 800f2da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f2e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f2ec:	887b      	ldrh	r3, [r7, #2]
 800f2ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f2f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d00f      	beq.n	800f318 <HAL_SPI_TransmitReceive+0x70>
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f2fe:	d107      	bne.n	800f310 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d103      	bne.n	800f310 <HAL_SPI_TransmitReceive+0x68>
 800f308:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f30c:	2b04      	cmp	r3, #4
 800f30e:	d003      	beq.n	800f318 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f310:	2302      	movs	r3, #2
 800f312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f316:	e15b      	b.n	800f5d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <HAL_SPI_TransmitReceive+0x82>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d002      	beq.n	800f32a <HAL_SPI_TransmitReceive+0x82>
 800f324:	887b      	ldrh	r3, [r7, #2]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d103      	bne.n	800f332 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f32a:	2301      	movs	r3, #1
 800f32c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f330:	e14e      	b.n	800f5d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	2b04      	cmp	r3, #4
 800f33c:	d003      	beq.n	800f346 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2205      	movs	r2, #5
 800f342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	887a      	ldrh	r2, [r7, #2]
 800f356:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	887a      	ldrh	r2, [r7, #2]
 800f35c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	887a      	ldrh	r2, [r7, #2]
 800f368:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	887a      	ldrh	r2, [r7, #2]
 800f36e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f386:	2b40      	cmp	r3, #64	@ 0x40
 800f388:	d007      	beq.n	800f39a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f398:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f3a2:	d178      	bne.n	800f496 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d002      	beq.n	800f3b2 <HAL_SPI_TransmitReceive+0x10a>
 800f3ac:	8b7b      	ldrh	r3, [r7, #26]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d166      	bne.n	800f480 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3b6:	881a      	ldrh	r2, [r3, #0]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3c2:	1c9a      	adds	r2, r3, #2
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f3d6:	e053      	b.n	800f480 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	f003 0302 	and.w	r3, r3, #2
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d11b      	bne.n	800f41e <HAL_SPI_TransmitReceive+0x176>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d016      	beq.n	800f41e <HAL_SPI_TransmitReceive+0x176>
 800f3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d113      	bne.n	800f41e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3fa:	881a      	ldrh	r2, [r3, #0]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f406:	1c9a      	adds	r2, r3, #2
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f410:	b29b      	uxth	r3, r3
 800f412:	3b01      	subs	r3, #1
 800f414:	b29a      	uxth	r2, r3
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f41a:	2300      	movs	r3, #0
 800f41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	f003 0301 	and.w	r3, r3, #1
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d119      	bne.n	800f460 <HAL_SPI_TransmitReceive+0x1b8>
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f430:	b29b      	uxth	r3, r3
 800f432:	2b00      	cmp	r3, #0
 800f434:	d014      	beq.n	800f460 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	68da      	ldr	r2, [r3, #12]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f440:	b292      	uxth	r2, r2
 800f442:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f448:	1c9a      	adds	r2, r3, #2
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f452:	b29b      	uxth	r3, r3
 800f454:	3b01      	subs	r3, #1
 800f456:	b29a      	uxth	r2, r3
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f45c:	2301      	movs	r3, #1
 800f45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f460:	f7fe fa7a 	bl	800d958 <HAL_GetTick>
 800f464:	4602      	mov	r2, r0
 800f466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d807      	bhi.n	800f480 <HAL_SPI_TransmitReceive+0x1d8>
 800f470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f476:	d003      	beq.n	800f480 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f478:	2303      	movs	r3, #3
 800f47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800f47e:	e0a7      	b.n	800f5d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f484:	b29b      	uxth	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d1a6      	bne.n	800f3d8 <HAL_SPI_TransmitReceive+0x130>
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f48e:	b29b      	uxth	r3, r3
 800f490:	2b00      	cmp	r3, #0
 800f492:	d1a1      	bne.n	800f3d8 <HAL_SPI_TransmitReceive+0x130>
 800f494:	e07c      	b.n	800f590 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d002      	beq.n	800f4a4 <HAL_SPI_TransmitReceive+0x1fc>
 800f49e:	8b7b      	ldrh	r3, [r7, #26]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d16b      	bne.n	800f57c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	330c      	adds	r3, #12
 800f4ae:	7812      	ldrb	r2, [r2, #0]
 800f4b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4b6:	1c5a      	adds	r2, r3, #1
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4ca:	e057      	b.n	800f57c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	f003 0302 	and.w	r3, r3, #2
 800f4d6:	2b02      	cmp	r3, #2
 800f4d8:	d11c      	bne.n	800f514 <HAL_SPI_TransmitReceive+0x26c>
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d017      	beq.n	800f514 <HAL_SPI_TransmitReceive+0x26c>
 800f4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d114      	bne.n	800f514 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	330c      	adds	r3, #12
 800f4f4:	7812      	ldrb	r2, [r2, #0]
 800f4f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4fc:	1c5a      	adds	r2, r3, #1
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f506:	b29b      	uxth	r3, r3
 800f508:	3b01      	subs	r3, #1
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f510:	2300      	movs	r3, #0
 800f512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	f003 0301 	and.w	r3, r3, #1
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d119      	bne.n	800f556 <HAL_SPI_TransmitReceive+0x2ae>
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f526:	b29b      	uxth	r3, r3
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d014      	beq.n	800f556 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	68da      	ldr	r2, [r3, #12]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f536:	b2d2      	uxtb	r2, r2
 800f538:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f53e:	1c5a      	adds	r2, r3, #1
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f548:	b29b      	uxth	r3, r3
 800f54a:	3b01      	subs	r3, #1
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f552:	2301      	movs	r3, #1
 800f554:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f556:	f7fe f9ff 	bl	800d958 <HAL_GetTick>
 800f55a:	4602      	mov	r2, r0
 800f55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55e:	1ad3      	subs	r3, r2, r3
 800f560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f562:	429a      	cmp	r2, r3
 800f564:	d803      	bhi.n	800f56e <HAL_SPI_TransmitReceive+0x2c6>
 800f566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f56c:	d102      	bne.n	800f574 <HAL_SPI_TransmitReceive+0x2cc>
 800f56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f570:	2b00      	cmp	r3, #0
 800f572:	d103      	bne.n	800f57c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f574:	2303      	movs	r3, #3
 800f576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800f57a:	e029      	b.n	800f5d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f580:	b29b      	uxth	r3, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	d1a2      	bne.n	800f4cc <HAL_SPI_TransmitReceive+0x224>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d19d      	bne.n	800f4cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f592:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f000 fa29 	bl	800f9ec <SPI_EndRxTxTransaction>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d006      	beq.n	800f5ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2220      	movs	r2, #32
 800f5aa:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800f5ac:	e010      	b.n	800f5d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10b      	bne.n	800f5ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	617b      	str	r3, [r7, #20]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	617b      	str	r3, [r7, #20]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	617b      	str	r3, [r7, #20]
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	e000      	b.n	800f5d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f5ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f5e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3730      	adds	r7, #48	@ 0x30
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b088      	sub	sp, #32
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10e      	bne.n	800f62c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f60e:	69bb      	ldr	r3, [r7, #24]
 800f610:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f614:	2b00      	cmp	r3, #0
 800f616:	d009      	beq.n	800f62c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d004      	beq.n	800f62c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	4798      	blx	r3
    return;
 800f62a:	e0ce      	b.n	800f7ca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	f003 0302 	and.w	r3, r3, #2
 800f632:	2b00      	cmp	r3, #0
 800f634:	d009      	beq.n	800f64a <HAL_SPI_IRQHandler+0x5e>
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d004      	beq.n	800f64a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	4798      	blx	r3
    return;
 800f648:	e0bf      	b.n	800f7ca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	f003 0320 	and.w	r3, r3, #32
 800f650:	2b00      	cmp	r3, #0
 800f652:	d10a      	bne.n	800f66a <HAL_SPI_IRQHandler+0x7e>
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d105      	bne.n	800f66a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 80b0 	beq.w	800f7ca <HAL_SPI_IRQHandler+0x1de>
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	f003 0320 	and.w	r3, r3, #32
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 80aa 	beq.w	800f7ca <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d023      	beq.n	800f6c8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f686:	b2db      	uxtb	r3, r3
 800f688:	2b03      	cmp	r3, #3
 800f68a:	d011      	beq.n	800f6b0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f690:	f043 0204 	orr.w	r2, r3, #4
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f698:	2300      	movs	r3, #0
 800f69a:	617b      	str	r3, [r7, #20]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	617b      	str	r3, [r7, #20]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	617b      	str	r3, [r7, #20]
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	e00b      	b.n	800f6c8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	613b      	str	r3, [r7, #16]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	613b      	str	r3, [r7, #16]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	613b      	str	r3, [r7, #16]
 800f6c4:	693b      	ldr	r3, [r7, #16]
        return;
 800f6c6:	e080      	b.n	800f7ca <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	f003 0320 	and.w	r3, r3, #32
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d014      	beq.n	800f6fc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6d6:	f043 0201 	orr.w	r2, r3, #1
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f6de:	2300      	movs	r3, #0
 800f6e0:	60fb      	str	r3, [r7, #12]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	689b      	ldr	r3, [r3, #8]
 800f6e8:	60fb      	str	r3, [r7, #12]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	681a      	ldr	r2, [r3, #0]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00c      	beq.n	800f720 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f70a:	f043 0208 	orr.w	r2, r3, #8
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f712:	2300      	movs	r3, #0
 800f714:	60bb      	str	r3, [r7, #8]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	689b      	ldr	r3, [r3, #8]
 800f71c:	60bb      	str	r3, [r7, #8]
 800f71e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f724:	2b00      	cmp	r3, #0
 800f726:	d04f      	beq.n	800f7c8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	685a      	ldr	r2, [r3, #4]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f736:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2201      	movs	r2, #1
 800f73c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	f003 0302 	and.w	r3, r3, #2
 800f746:	2b00      	cmp	r3, #0
 800f748:	d104      	bne.n	800f754 <HAL_SPI_IRQHandler+0x168>
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	f003 0301 	and.w	r3, r3, #1
 800f750:	2b00      	cmp	r3, #0
 800f752:	d034      	beq.n	800f7be <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	685a      	ldr	r2, [r3, #4]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f022 0203 	bic.w	r2, r2, #3
 800f762:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d011      	beq.n	800f790 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f770:	4a17      	ldr	r2, [pc, #92]	@ (800f7d0 <HAL_SPI_IRQHandler+0x1e4>)
 800f772:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fe fa9e 	bl	800dcba <HAL_DMA_Abort_IT>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d005      	beq.n	800f790 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f788:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f794:	2b00      	cmp	r3, #0
 800f796:	d016      	beq.n	800f7c6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f79c:	4a0c      	ldr	r2, [pc, #48]	@ (800f7d0 <HAL_SPI_IRQHandler+0x1e4>)
 800f79e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe fa88 	bl	800dcba <HAL_DMA_Abort_IT>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00a      	beq.n	800f7c6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800f7bc:	e003      	b.n	800f7c6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 f808 	bl	800f7d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f7c4:	e000      	b.n	800f7c8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f7c6:	bf00      	nop
    return;
 800f7c8:	bf00      	nop
  }
}
 800f7ca:	3720      	adds	r7, #32
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	0800f7e9 	.word	0x0800f7e9

0800f7d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f7dc:	bf00      	nop
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2200      	movs	r2, #0
 800f800:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f802:	68f8      	ldr	r0, [r7, #12]
 800f804:	f7ff ffe6 	bl	800f7d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f808:	bf00      	nop
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	603b      	str	r3, [r7, #0]
 800f81c:	4613      	mov	r3, r2
 800f81e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f820:	f7fe f89a 	bl	800d958 <HAL_GetTick>
 800f824:	4602      	mov	r2, r0
 800f826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f828:	1a9b      	subs	r3, r3, r2
 800f82a:	683a      	ldr	r2, [r7, #0]
 800f82c:	4413      	add	r3, r2
 800f82e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f830:	f7fe f892 	bl	800d958 <HAL_GetTick>
 800f834:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f836:	4b39      	ldr	r3, [pc, #228]	@ (800f91c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	015b      	lsls	r3, r3, #5
 800f83c:	0d1b      	lsrs	r3, r3, #20
 800f83e:	69fa      	ldr	r2, [r7, #28]
 800f840:	fb02 f303 	mul.w	r3, r2, r3
 800f844:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f846:	e054      	b.n	800f8f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f84e:	d050      	beq.n	800f8f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f850:	f7fe f882 	bl	800d958 <HAL_GetTick>
 800f854:	4602      	mov	r2, r0
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	69fa      	ldr	r2, [r7, #28]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d902      	bls.n	800f866 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d13d      	bne.n	800f8e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	685a      	ldr	r2, [r3, #4]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f874:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f87e:	d111      	bne.n	800f8a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f888:	d004      	beq.n	800f894 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f892:	d107      	bne.n	800f8a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f8a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f8ac:	d10f      	bne.n	800f8ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f8bc:	601a      	str	r2, [r3, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f8cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f8de:	2303      	movs	r3, #3
 800f8e0:	e017      	b.n	800f912 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d101      	bne.n	800f8ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	689a      	ldr	r2, [r3, #8]
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	bf0c      	ite	eq
 800f902:	2301      	moveq	r3, #1
 800f904:	2300      	movne	r3, #0
 800f906:	b2db      	uxtb	r3, r3
 800f908:	461a      	mov	r2, r3
 800f90a:	79fb      	ldrb	r3, [r7, #7]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d19b      	bne.n	800f848 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3720      	adds	r7, #32
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	20000004 	.word	0x20000004

0800f920 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b086      	sub	sp, #24
 800f924:	af02      	add	r7, sp, #8
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f934:	d111      	bne.n	800f95a <SPI_EndRxTransaction+0x3a>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	689b      	ldr	r3, [r3, #8]
 800f93a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f93e:	d004      	beq.n	800f94a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	689b      	ldr	r3, [r3, #8]
 800f944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f948:	d107      	bne.n	800f95a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f958:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f962:	d12a      	bne.n	800f9ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f96c:	d012      	beq.n	800f994 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	2200      	movs	r2, #0
 800f976:	2180      	movs	r1, #128	@ 0x80
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7ff ff49 	bl	800f810 <SPI_WaitFlagStateUntilTimeout>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d02d      	beq.n	800f9e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f988:	f043 0220 	orr.w	r2, r3, #32
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f990:	2303      	movs	r3, #3
 800f992:	e026      	b.n	800f9e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	9300      	str	r3, [sp, #0]
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	2200      	movs	r2, #0
 800f99c:	2101      	movs	r1, #1
 800f99e:	68f8      	ldr	r0, [r7, #12]
 800f9a0:	f7ff ff36 	bl	800f810 <SPI_WaitFlagStateUntilTimeout>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d01a      	beq.n	800f9e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9ae:	f043 0220 	orr.w	r2, r3, #32
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f9b6:	2303      	movs	r3, #3
 800f9b8:	e013      	b.n	800f9e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	9300      	str	r3, [sp, #0]
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	2101      	movs	r1, #1
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f7ff ff23 	bl	800f810 <SPI_WaitFlagStateUntilTimeout>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d007      	beq.n	800f9e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9d4:	f043 0220 	orr.w	r2, r3, #32
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f9dc:	2303      	movs	r3, #3
 800f9de:	e000      	b.n	800f9e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
	...

0800f9ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b088      	sub	sp, #32
 800f9f0:	af02      	add	r7, sp, #8
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f9f8:	4b1b      	ldr	r3, [pc, #108]	@ (800fa68 <SPI_EndRxTxTransaction+0x7c>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a1b      	ldr	r2, [pc, #108]	@ (800fa6c <SPI_EndRxTxTransaction+0x80>)
 800f9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800fa02:	0d5b      	lsrs	r3, r3, #21
 800fa04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fa08:	fb02 f303 	mul.w	r3, r2, r3
 800fa0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa16:	d112      	bne.n	800fa3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	2180      	movs	r1, #128	@ 0x80
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff fef4 	bl	800f810 <SPI_WaitFlagStateUntilTimeout>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d016      	beq.n	800fa5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa32:	f043 0220 	orr.w	r2, r3, #32
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fa3a:	2303      	movs	r3, #3
 800fa3c:	e00f      	b.n	800fa5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00a      	beq.n	800fa5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	3b01      	subs	r3, #1
 800fa48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa54:	2b80      	cmp	r3, #128	@ 0x80
 800fa56:	d0f2      	beq.n	800fa3e <SPI_EndRxTxTransaction+0x52>
 800fa58:	e000      	b.n	800fa5c <SPI_EndRxTxTransaction+0x70>
        break;
 800fa5a:	bf00      	nop
  }

  return HAL_OK;
 800fa5c:	2300      	movs	r3, #0
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3718      	adds	r7, #24
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	20000004 	.word	0x20000004
 800fa6c:	165e9f81 	.word	0x165e9f81

0800fa70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d101      	bne.n	800fa82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e041      	b.n	800fb06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7fd fbee 	bl	800d278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2202      	movs	r2, #2
 800faa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	3304      	adds	r3, #4
 800faac:	4619      	mov	r1, r3
 800faae:	4610      	mov	r0, r2
 800fab0:	f000 fba8 	bl	8010204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2201      	movs	r2, #1
 800fac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2201      	movs	r2, #1
 800fad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2201      	movs	r2, #1
 800faf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fb04:	2300      	movs	r3, #0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
	...

0800fb10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b085      	sub	sp, #20
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d001      	beq.n	800fb28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fb24:	2301      	movs	r3, #1
 800fb26:	e04e      	b.n	800fbc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	68da      	ldr	r2, [r3, #12]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f042 0201 	orr.w	r2, r2, #1
 800fb3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4a23      	ldr	r2, [pc, #140]	@ (800fbd4 <HAL_TIM_Base_Start_IT+0xc4>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d022      	beq.n	800fb90 <HAL_TIM_Base_Start_IT+0x80>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb52:	d01d      	beq.n	800fb90 <HAL_TIM_Base_Start_IT+0x80>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a1f      	ldr	r2, [pc, #124]	@ (800fbd8 <HAL_TIM_Base_Start_IT+0xc8>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d018      	beq.n	800fb90 <HAL_TIM_Base_Start_IT+0x80>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4a1e      	ldr	r2, [pc, #120]	@ (800fbdc <HAL_TIM_Base_Start_IT+0xcc>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d013      	beq.n	800fb90 <HAL_TIM_Base_Start_IT+0x80>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a1c      	ldr	r2, [pc, #112]	@ (800fbe0 <HAL_TIM_Base_Start_IT+0xd0>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d00e      	beq.n	800fb90 <HAL_TIM_Base_Start_IT+0x80>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4a1b      	ldr	r2, [pc, #108]	@ (800fbe4 <HAL_TIM_Base_Start_IT+0xd4>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d009      	beq.n	800fb90 <HAL_TIM_Base_Start_IT+0x80>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a19      	ldr	r2, [pc, #100]	@ (800fbe8 <HAL_TIM_Base_Start_IT+0xd8>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d004      	beq.n	800fb90 <HAL_TIM_Base_Start_IT+0x80>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4a18      	ldr	r2, [pc, #96]	@ (800fbec <HAL_TIM_Base_Start_IT+0xdc>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d111      	bne.n	800fbb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	f003 0307 	and.w	r3, r3, #7
 800fb9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2b06      	cmp	r3, #6
 800fba0:	d010      	beq.n	800fbc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f042 0201 	orr.w	r2, r2, #1
 800fbb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbb2:	e007      	b.n	800fbc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f042 0201 	orr.w	r2, r2, #1
 800fbc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3714      	adds	r7, #20
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop
 800fbd4:	40010000 	.word	0x40010000
 800fbd8:	40000400 	.word	0x40000400
 800fbdc:	40000800 	.word	0x40000800
 800fbe0:	40000c00 	.word	0x40000c00
 800fbe4:	40010400 	.word	0x40010400
 800fbe8:	40014000 	.word	0x40014000
 800fbec:	40001800 	.word	0x40001800

0800fbf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d101      	bne.n	800fc02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	e041      	b.n	800fc86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d106      	bne.n	800fc1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f7fd fae0 	bl	800d1dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2202      	movs	r2, #2
 800fc20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	3304      	adds	r3, #4
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	4610      	mov	r0, r2
 800fc30:	f000 fae8 	bl	8010204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2201      	movs	r2, #1
 800fc38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2201      	movs	r2, #1
 800fc48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2201      	movs	r2, #1
 800fc50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2201      	movs	r2, #1
 800fc58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2201      	movs	r2, #1
 800fc68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b082      	sub	sp, #8
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	f003 0302 	and.w	r3, r3, #2
 800fca0:	2b02      	cmp	r3, #2
 800fca2:	d122      	bne.n	800fcea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	f003 0302 	and.w	r3, r3, #2
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d11b      	bne.n	800fcea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f06f 0202 	mvn.w	r2, #2
 800fcba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	699b      	ldr	r3, [r3, #24]
 800fcc8:	f003 0303 	and.w	r3, r3, #3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d003      	beq.n	800fcd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fa78 	bl	80101c6 <HAL_TIM_IC_CaptureCallback>
 800fcd6:	e005      	b.n	800fce4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 fa6a 	bl	80101b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fa7b 	bl	80101da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	691b      	ldr	r3, [r3, #16]
 800fcf0:	f003 0304 	and.w	r3, r3, #4
 800fcf4:	2b04      	cmp	r3, #4
 800fcf6:	d122      	bne.n	800fd3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	f003 0304 	and.w	r3, r3, #4
 800fd02:	2b04      	cmp	r3, #4
 800fd04:	d11b      	bne.n	800fd3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f06f 0204 	mvn.w	r2, #4
 800fd0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2202      	movs	r2, #2
 800fd14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	699b      	ldr	r3, [r3, #24]
 800fd1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d003      	beq.n	800fd2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f000 fa4e 	bl	80101c6 <HAL_TIM_IC_CaptureCallback>
 800fd2a:	e005      	b.n	800fd38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 fa40 	bl	80101b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 fa51 	bl	80101da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	691b      	ldr	r3, [r3, #16]
 800fd44:	f003 0308 	and.w	r3, r3, #8
 800fd48:	2b08      	cmp	r3, #8
 800fd4a:	d122      	bne.n	800fd92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	f003 0308 	and.w	r3, r3, #8
 800fd56:	2b08      	cmp	r3, #8
 800fd58:	d11b      	bne.n	800fd92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f06f 0208 	mvn.w	r2, #8
 800fd62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2204      	movs	r2, #4
 800fd68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	69db      	ldr	r3, [r3, #28]
 800fd70:	f003 0303 	and.w	r3, r3, #3
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d003      	beq.n	800fd80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 fa24 	bl	80101c6 <HAL_TIM_IC_CaptureCallback>
 800fd7e:	e005      	b.n	800fd8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 fa16 	bl	80101b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 fa27 	bl	80101da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	691b      	ldr	r3, [r3, #16]
 800fd98:	f003 0310 	and.w	r3, r3, #16
 800fd9c:	2b10      	cmp	r3, #16
 800fd9e:	d122      	bne.n	800fde6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	f003 0310 	and.w	r3, r3, #16
 800fdaa:	2b10      	cmp	r3, #16
 800fdac:	d11b      	bne.n	800fde6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f06f 0210 	mvn.w	r2, #16
 800fdb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2208      	movs	r2, #8
 800fdbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	69db      	ldr	r3, [r3, #28]
 800fdc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d003      	beq.n	800fdd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 f9fa 	bl	80101c6 <HAL_TIM_IC_CaptureCallback>
 800fdd2:	e005      	b.n	800fde0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f9ec 	bl	80101b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 f9fd 	bl	80101da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2200      	movs	r2, #0
 800fde4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	f003 0301 	and.w	r3, r3, #1
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d10e      	bne.n	800fe12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	f003 0301 	and.w	r3, r3, #1
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d107      	bne.n	800fe12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f06f 0201 	mvn.w	r2, #1
 800fe0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7fd f8fb 	bl	800d008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	691b      	ldr	r3, [r3, #16]
 800fe18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe1c:	2b80      	cmp	r3, #128	@ 0x80
 800fe1e:	d10e      	bne.n	800fe3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe2a:	2b80      	cmp	r3, #128	@ 0x80
 800fe2c:	d107      	bne.n	800fe3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fe36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 fda5 	bl	8010988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	691b      	ldr	r3, [r3, #16]
 800fe44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe48:	2b40      	cmp	r3, #64	@ 0x40
 800fe4a:	d10e      	bne.n	800fe6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe56:	2b40      	cmp	r3, #64	@ 0x40
 800fe58:	d107      	bne.n	800fe6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fe62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f9c2 	bl	80101ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	691b      	ldr	r3, [r3, #16]
 800fe70:	f003 0320 	and.w	r3, r3, #32
 800fe74:	2b20      	cmp	r3, #32
 800fe76:	d10e      	bne.n	800fe96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	f003 0320 	and.w	r3, r3, #32
 800fe82:	2b20      	cmp	r3, #32
 800fe84:	d107      	bne.n	800fe96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f06f 0220 	mvn.w	r2, #32
 800fe8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f000 fd6f 	bl	8010974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe96:	bf00      	nop
 800fe98:	3708      	adds	r7, #8
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
	...

0800fea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800feac:	2300      	movs	r3, #0
 800feae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d101      	bne.n	800febe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800feba:	2302      	movs	r3, #2
 800febc:	e0ae      	b.n	801001c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2201      	movs	r2, #1
 800fec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2b0c      	cmp	r3, #12
 800feca:	f200 809f 	bhi.w	801000c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fece:	a201      	add	r2, pc, #4	@ (adr r2, 800fed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed4:	0800ff09 	.word	0x0800ff09
 800fed8:	0801000d 	.word	0x0801000d
 800fedc:	0801000d 	.word	0x0801000d
 800fee0:	0801000d 	.word	0x0801000d
 800fee4:	0800ff49 	.word	0x0800ff49
 800fee8:	0801000d 	.word	0x0801000d
 800feec:	0801000d 	.word	0x0801000d
 800fef0:	0801000d 	.word	0x0801000d
 800fef4:	0800ff8b 	.word	0x0800ff8b
 800fef8:	0801000d 	.word	0x0801000d
 800fefc:	0801000d 	.word	0x0801000d
 800ff00:	0801000d 	.word	0x0801000d
 800ff04:	0800ffcb 	.word	0x0800ffcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	68b9      	ldr	r1, [r7, #8]
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f000 fa18 	bl	8010344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	699a      	ldr	r2, [r3, #24]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f042 0208 	orr.w	r2, r2, #8
 800ff22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	699a      	ldr	r2, [r3, #24]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f022 0204 	bic.w	r2, r2, #4
 800ff32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	6999      	ldr	r1, [r3, #24]
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	691a      	ldr	r2, [r3, #16]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	430a      	orrs	r2, r1
 800ff44:	619a      	str	r2, [r3, #24]
      break;
 800ff46:	e064      	b.n	8010012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	68b9      	ldr	r1, [r7, #8]
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f000 fa68 	bl	8010424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	699a      	ldr	r2, [r3, #24]
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	699a      	ldr	r2, [r3, #24]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ff72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6999      	ldr	r1, [r3, #24]
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	021a      	lsls	r2, r3, #8
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	430a      	orrs	r2, r1
 800ff86:	619a      	str	r2, [r3, #24]
      break;
 800ff88:	e043      	b.n	8010012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	68b9      	ldr	r1, [r7, #8]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f000 fabd 	bl	8010510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	69da      	ldr	r2, [r3, #28]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f042 0208 	orr.w	r2, r2, #8
 800ffa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	69da      	ldr	r2, [r3, #28]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f022 0204 	bic.w	r2, r2, #4
 800ffb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	69d9      	ldr	r1, [r3, #28]
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	691a      	ldr	r2, [r3, #16]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	430a      	orrs	r2, r1
 800ffc6:	61da      	str	r2, [r3, #28]
      break;
 800ffc8:	e023      	b.n	8010012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	68b9      	ldr	r1, [r7, #8]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 fb11 	bl	80105f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	69da      	ldr	r2, [r3, #28]
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ffe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	69da      	ldr	r2, [r3, #28]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	69d9      	ldr	r1, [r3, #28]
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	021a      	lsls	r2, r3, #8
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	430a      	orrs	r2, r1
 8010008:	61da      	str	r2, [r3, #28]
      break;
 801000a:	e002      	b.n	8010012 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801000c:	2301      	movs	r3, #1
 801000e:	75fb      	strb	r3, [r7, #23]
      break;
 8010010:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801001a:	7dfb      	ldrb	r3, [r7, #23]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3718      	adds	r7, #24
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010038:	2b01      	cmp	r3, #1
 801003a:	d101      	bne.n	8010040 <HAL_TIM_ConfigClockSource+0x1c>
 801003c:	2302      	movs	r3, #2
 801003e:	e0b4      	b.n	80101aa <HAL_TIM_ConfigClockSource+0x186>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2201      	movs	r2, #1
 8010044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2202      	movs	r2, #2
 801004c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801005e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	68ba      	ldr	r2, [r7, #8]
 801006e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010078:	d03e      	beq.n	80100f8 <HAL_TIM_ConfigClockSource+0xd4>
 801007a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801007e:	f200 8087 	bhi.w	8010190 <HAL_TIM_ConfigClockSource+0x16c>
 8010082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010086:	f000 8086 	beq.w	8010196 <HAL_TIM_ConfigClockSource+0x172>
 801008a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801008e:	d87f      	bhi.n	8010190 <HAL_TIM_ConfigClockSource+0x16c>
 8010090:	2b70      	cmp	r3, #112	@ 0x70
 8010092:	d01a      	beq.n	80100ca <HAL_TIM_ConfigClockSource+0xa6>
 8010094:	2b70      	cmp	r3, #112	@ 0x70
 8010096:	d87b      	bhi.n	8010190 <HAL_TIM_ConfigClockSource+0x16c>
 8010098:	2b60      	cmp	r3, #96	@ 0x60
 801009a:	d050      	beq.n	801013e <HAL_TIM_ConfigClockSource+0x11a>
 801009c:	2b60      	cmp	r3, #96	@ 0x60
 801009e:	d877      	bhi.n	8010190 <HAL_TIM_ConfigClockSource+0x16c>
 80100a0:	2b50      	cmp	r3, #80	@ 0x50
 80100a2:	d03c      	beq.n	801011e <HAL_TIM_ConfigClockSource+0xfa>
 80100a4:	2b50      	cmp	r3, #80	@ 0x50
 80100a6:	d873      	bhi.n	8010190 <HAL_TIM_ConfigClockSource+0x16c>
 80100a8:	2b40      	cmp	r3, #64	@ 0x40
 80100aa:	d058      	beq.n	801015e <HAL_TIM_ConfigClockSource+0x13a>
 80100ac:	2b40      	cmp	r3, #64	@ 0x40
 80100ae:	d86f      	bhi.n	8010190 <HAL_TIM_ConfigClockSource+0x16c>
 80100b0:	2b30      	cmp	r3, #48	@ 0x30
 80100b2:	d064      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x15a>
 80100b4:	2b30      	cmp	r3, #48	@ 0x30
 80100b6:	d86b      	bhi.n	8010190 <HAL_TIM_ConfigClockSource+0x16c>
 80100b8:	2b20      	cmp	r3, #32
 80100ba:	d060      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x15a>
 80100bc:	2b20      	cmp	r3, #32
 80100be:	d867      	bhi.n	8010190 <HAL_TIM_ConfigClockSource+0x16c>
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d05c      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x15a>
 80100c4:	2b10      	cmp	r3, #16
 80100c6:	d05a      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x15a>
 80100c8:	e062      	b.n	8010190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6818      	ldr	r0, [r3, #0]
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	6899      	ldr	r1, [r3, #8]
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	685a      	ldr	r2, [r3, #4]
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	f000 fb5d 	bl	8010798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80100ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	68ba      	ldr	r2, [r7, #8]
 80100f4:	609a      	str	r2, [r3, #8]
      break;
 80100f6:	e04f      	b.n	8010198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6818      	ldr	r0, [r3, #0]
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	6899      	ldr	r1, [r3, #8]
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	685a      	ldr	r2, [r3, #4]
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	f000 fb46 	bl	8010798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	689a      	ldr	r2, [r3, #8]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801011a:	609a      	str	r2, [r3, #8]
      break;
 801011c:	e03c      	b.n	8010198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6818      	ldr	r0, [r3, #0]
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	6859      	ldr	r1, [r3, #4]
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	461a      	mov	r2, r3
 801012c:	f000 faba 	bl	80106a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2150      	movs	r1, #80	@ 0x50
 8010136:	4618      	mov	r0, r3
 8010138:	f000 fb13 	bl	8010762 <TIM_ITRx_SetConfig>
      break;
 801013c:	e02c      	b.n	8010198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6818      	ldr	r0, [r3, #0]
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	6859      	ldr	r1, [r3, #4]
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	461a      	mov	r2, r3
 801014c:	f000 fad9 	bl	8010702 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2160      	movs	r1, #96	@ 0x60
 8010156:	4618      	mov	r0, r3
 8010158:	f000 fb03 	bl	8010762 <TIM_ITRx_SetConfig>
      break;
 801015c:	e01c      	b.n	8010198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6818      	ldr	r0, [r3, #0]
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	6859      	ldr	r1, [r3, #4]
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	461a      	mov	r2, r3
 801016c:	f000 fa9a 	bl	80106a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2140      	movs	r1, #64	@ 0x40
 8010176:	4618      	mov	r0, r3
 8010178:	f000 faf3 	bl	8010762 <TIM_ITRx_SetConfig>
      break;
 801017c:	e00c      	b.n	8010198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4619      	mov	r1, r3
 8010188:	4610      	mov	r0, r2
 801018a:	f000 faea 	bl	8010762 <TIM_ITRx_SetConfig>
      break;
 801018e:	e003      	b.n	8010198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	73fb      	strb	r3, [r7, #15]
      break;
 8010194:	e000      	b.n	8010198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2201      	movs	r2, #1
 801019c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80101b2:	b480      	push	{r7}
 80101b4:	b083      	sub	sp, #12
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80101ba:	bf00      	nop
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr

080101c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80101c6:	b480      	push	{r7}
 80101c8:	b083      	sub	sp, #12
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80101ce:	bf00      	nop
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr

080101da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80101da:	b480      	push	{r7}
 80101dc:	b083      	sub	sp, #12
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80101e2:	bf00      	nop
 80101e4:	370c      	adds	r7, #12
 80101e6:	46bd      	mov	sp, r7
 80101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ec:	4770      	bx	lr

080101ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80101ee:	b480      	push	{r7}
 80101f0:	b083      	sub	sp, #12
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80101f6:	bf00      	nop
 80101f8:	370c      	adds	r7, #12
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
	...

08010204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010204:	b480      	push	{r7}
 8010206:	b085      	sub	sp, #20
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4a40      	ldr	r2, [pc, #256]	@ (8010318 <TIM_Base_SetConfig+0x114>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d013      	beq.n	8010244 <TIM_Base_SetConfig+0x40>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010222:	d00f      	beq.n	8010244 <TIM_Base_SetConfig+0x40>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4a3d      	ldr	r2, [pc, #244]	@ (801031c <TIM_Base_SetConfig+0x118>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d00b      	beq.n	8010244 <TIM_Base_SetConfig+0x40>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4a3c      	ldr	r2, [pc, #240]	@ (8010320 <TIM_Base_SetConfig+0x11c>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d007      	beq.n	8010244 <TIM_Base_SetConfig+0x40>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4a3b      	ldr	r2, [pc, #236]	@ (8010324 <TIM_Base_SetConfig+0x120>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d003      	beq.n	8010244 <TIM_Base_SetConfig+0x40>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4a3a      	ldr	r2, [pc, #232]	@ (8010328 <TIM_Base_SetConfig+0x124>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d108      	bne.n	8010256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801024a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	4313      	orrs	r3, r2
 8010254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4a2f      	ldr	r2, [pc, #188]	@ (8010318 <TIM_Base_SetConfig+0x114>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d02b      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010264:	d027      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4a2c      	ldr	r2, [pc, #176]	@ (801031c <TIM_Base_SetConfig+0x118>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d023      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a2b      	ldr	r2, [pc, #172]	@ (8010320 <TIM_Base_SetConfig+0x11c>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d01f      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a2a      	ldr	r2, [pc, #168]	@ (8010324 <TIM_Base_SetConfig+0x120>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d01b      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a29      	ldr	r2, [pc, #164]	@ (8010328 <TIM_Base_SetConfig+0x124>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d017      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a28      	ldr	r2, [pc, #160]	@ (801032c <TIM_Base_SetConfig+0x128>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d013      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4a27      	ldr	r2, [pc, #156]	@ (8010330 <TIM_Base_SetConfig+0x12c>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d00f      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4a26      	ldr	r2, [pc, #152]	@ (8010334 <TIM_Base_SetConfig+0x130>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d00b      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a25      	ldr	r2, [pc, #148]	@ (8010338 <TIM_Base_SetConfig+0x134>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d007      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a24      	ldr	r2, [pc, #144]	@ (801033c <TIM_Base_SetConfig+0x138>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d003      	beq.n	80102b6 <TIM_Base_SetConfig+0xb2>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4a23      	ldr	r2, [pc, #140]	@ (8010340 <TIM_Base_SetConfig+0x13c>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d108      	bne.n	80102c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80102bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	68fa      	ldr	r2, [r7, #12]
 80102c4:	4313      	orrs	r3, r2
 80102c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	695b      	ldr	r3, [r3, #20]
 80102d2:	4313      	orrs	r3, r2
 80102d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	689a      	ldr	r2, [r3, #8]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4a0a      	ldr	r2, [pc, #40]	@ (8010318 <TIM_Base_SetConfig+0x114>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d003      	beq.n	80102fc <TIM_Base_SetConfig+0xf8>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4a0c      	ldr	r2, [pc, #48]	@ (8010328 <TIM_Base_SetConfig+0x124>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d103      	bne.n	8010304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	691a      	ldr	r2, [r3, #16]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	615a      	str	r2, [r3, #20]
}
 801030a:	bf00      	nop
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop
 8010318:	40010000 	.word	0x40010000
 801031c:	40000400 	.word	0x40000400
 8010320:	40000800 	.word	0x40000800
 8010324:	40000c00 	.word	0x40000c00
 8010328:	40010400 	.word	0x40010400
 801032c:	40014000 	.word	0x40014000
 8010330:	40014400 	.word	0x40014400
 8010334:	40014800 	.word	0x40014800
 8010338:	40001800 	.word	0x40001800
 801033c:	40001c00 	.word	0x40001c00
 8010340:	40002000 	.word	0x40002000

08010344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010344:	b480      	push	{r7}
 8010346:	b087      	sub	sp, #28
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a1b      	ldr	r3, [r3, #32]
 8010352:	f023 0201 	bic.w	r2, r3, #1
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6a1b      	ldr	r3, [r3, #32]
 801035e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	699b      	ldr	r3, [r3, #24]
 801036a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f023 0303 	bic.w	r3, r3, #3
 801037a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	4313      	orrs	r3, r2
 8010384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	f023 0302 	bic.w	r3, r3, #2
 801038c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	697a      	ldr	r2, [r7, #20]
 8010394:	4313      	orrs	r3, r2
 8010396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4a20      	ldr	r2, [pc, #128]	@ (801041c <TIM_OC1_SetConfig+0xd8>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d003      	beq.n	80103a8 <TIM_OC1_SetConfig+0x64>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a1f      	ldr	r2, [pc, #124]	@ (8010420 <TIM_OC1_SetConfig+0xdc>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d10c      	bne.n	80103c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	f023 0308 	bic.w	r3, r3, #8
 80103ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	697a      	ldr	r2, [r7, #20]
 80103b6:	4313      	orrs	r3, r2
 80103b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	f023 0304 	bic.w	r3, r3, #4
 80103c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a15      	ldr	r2, [pc, #84]	@ (801041c <TIM_OC1_SetConfig+0xd8>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d003      	beq.n	80103d2 <TIM_OC1_SetConfig+0x8e>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4a14      	ldr	r2, [pc, #80]	@ (8010420 <TIM_OC1_SetConfig+0xdc>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d111      	bne.n	80103f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80103d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80103e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	695b      	ldr	r3, [r3, #20]
 80103e6:	693a      	ldr	r2, [r7, #16]
 80103e8:	4313      	orrs	r3, r2
 80103ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	699b      	ldr	r3, [r3, #24]
 80103f0:	693a      	ldr	r2, [r7, #16]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	693a      	ldr	r2, [r7, #16]
 80103fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	68fa      	ldr	r2, [r7, #12]
 8010400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	685a      	ldr	r2, [r3, #4]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	697a      	ldr	r2, [r7, #20]
 801040e:	621a      	str	r2, [r3, #32]
}
 8010410:	bf00      	nop
 8010412:	371c      	adds	r7, #28
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr
 801041c:	40010000 	.word	0x40010000
 8010420:	40010400 	.word	0x40010400

08010424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010424:	b480      	push	{r7}
 8010426:	b087      	sub	sp, #28
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6a1b      	ldr	r3, [r3, #32]
 8010432:	f023 0210 	bic.w	r2, r3, #16
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6a1b      	ldr	r3, [r3, #32]
 801043e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801045a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	021b      	lsls	r3, r3, #8
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	4313      	orrs	r3, r2
 8010466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	f023 0320 	bic.w	r3, r3, #32
 801046e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	689b      	ldr	r3, [r3, #8]
 8010474:	011b      	lsls	r3, r3, #4
 8010476:	697a      	ldr	r2, [r7, #20]
 8010478:	4313      	orrs	r3, r2
 801047a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4a22      	ldr	r2, [pc, #136]	@ (8010508 <TIM_OC2_SetConfig+0xe4>)
 8010480:	4293      	cmp	r3, r2
 8010482:	d003      	beq.n	801048c <TIM_OC2_SetConfig+0x68>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4a21      	ldr	r2, [pc, #132]	@ (801050c <TIM_OC2_SetConfig+0xe8>)
 8010488:	4293      	cmp	r3, r2
 801048a:	d10d      	bne.n	80104a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	011b      	lsls	r3, r3, #4
 801049a:	697a      	ldr	r2, [r7, #20]
 801049c:	4313      	orrs	r3, r2
 801049e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	4a17      	ldr	r2, [pc, #92]	@ (8010508 <TIM_OC2_SetConfig+0xe4>)
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d003      	beq.n	80104b8 <TIM_OC2_SetConfig+0x94>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4a16      	ldr	r2, [pc, #88]	@ (801050c <TIM_OC2_SetConfig+0xe8>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d113      	bne.n	80104e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80104be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80104c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	695b      	ldr	r3, [r3, #20]
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	693a      	ldr	r2, [r7, #16]
 80104d0:	4313      	orrs	r3, r2
 80104d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	699b      	ldr	r3, [r3, #24]
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	4313      	orrs	r3, r2
 80104de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	693a      	ldr	r2, [r7, #16]
 80104e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	685a      	ldr	r2, [r3, #4]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	621a      	str	r2, [r3, #32]
}
 80104fa:	bf00      	nop
 80104fc:	371c      	adds	r7, #28
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	40010000 	.word	0x40010000
 801050c:	40010400 	.word	0x40010400

08010510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010510:	b480      	push	{r7}
 8010512:	b087      	sub	sp, #28
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6a1b      	ldr	r3, [r3, #32]
 801051e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6a1b      	ldr	r3, [r3, #32]
 801052a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	69db      	ldr	r3, [r3, #28]
 8010536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801053e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f023 0303 	bic.w	r3, r3, #3
 8010546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	4313      	orrs	r3, r2
 8010550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	021b      	lsls	r3, r3, #8
 8010560:	697a      	ldr	r2, [r7, #20]
 8010562:	4313      	orrs	r3, r2
 8010564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4a21      	ldr	r2, [pc, #132]	@ (80105f0 <TIM_OC3_SetConfig+0xe0>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d003      	beq.n	8010576 <TIM_OC3_SetConfig+0x66>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4a20      	ldr	r2, [pc, #128]	@ (80105f4 <TIM_OC3_SetConfig+0xe4>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d10d      	bne.n	8010592 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801057c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	021b      	lsls	r3, r3, #8
 8010584:	697a      	ldr	r2, [r7, #20]
 8010586:	4313      	orrs	r3, r2
 8010588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4a16      	ldr	r2, [pc, #88]	@ (80105f0 <TIM_OC3_SetConfig+0xe0>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d003      	beq.n	80105a2 <TIM_OC3_SetConfig+0x92>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	4a15      	ldr	r2, [pc, #84]	@ (80105f4 <TIM_OC3_SetConfig+0xe4>)
 801059e:	4293      	cmp	r3, r2
 80105a0:	d113      	bne.n	80105ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80105a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80105b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	695b      	ldr	r3, [r3, #20]
 80105b6:	011b      	lsls	r3, r3, #4
 80105b8:	693a      	ldr	r2, [r7, #16]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	011b      	lsls	r3, r3, #4
 80105c4:	693a      	ldr	r2, [r7, #16]
 80105c6:	4313      	orrs	r3, r2
 80105c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	693a      	ldr	r2, [r7, #16]
 80105ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	68fa      	ldr	r2, [r7, #12]
 80105d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	685a      	ldr	r2, [r3, #4]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	697a      	ldr	r2, [r7, #20]
 80105e2:	621a      	str	r2, [r3, #32]
}
 80105e4:	bf00      	nop
 80105e6:	371c      	adds	r7, #28
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	40010000 	.word	0x40010000
 80105f4:	40010400 	.word	0x40010400

080105f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b087      	sub	sp, #28
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6a1b      	ldr	r3, [r3, #32]
 8010612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	69db      	ldr	r3, [r3, #28]
 801061e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801062e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	021b      	lsls	r3, r3, #8
 8010636:	68fa      	ldr	r2, [r7, #12]
 8010638:	4313      	orrs	r3, r2
 801063a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	031b      	lsls	r3, r3, #12
 801064a:	693a      	ldr	r2, [r7, #16]
 801064c:	4313      	orrs	r3, r2
 801064e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	4a12      	ldr	r2, [pc, #72]	@ (801069c <TIM_OC4_SetConfig+0xa4>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d003      	beq.n	8010660 <TIM_OC4_SetConfig+0x68>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4a11      	ldr	r2, [pc, #68]	@ (80106a0 <TIM_OC4_SetConfig+0xa8>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d109      	bne.n	8010674 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	695b      	ldr	r3, [r3, #20]
 801066c:	019b      	lsls	r3, r3, #6
 801066e:	697a      	ldr	r2, [r7, #20]
 8010670:	4313      	orrs	r3, r2
 8010672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	685a      	ldr	r2, [r3, #4]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	693a      	ldr	r2, [r7, #16]
 801068c:	621a      	str	r2, [r3, #32]
}
 801068e:	bf00      	nop
 8010690:	371c      	adds	r7, #28
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop
 801069c:	40010000 	.word	0x40010000
 80106a0:	40010400 	.word	0x40010400

080106a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b087      	sub	sp, #28
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6a1b      	ldr	r3, [r3, #32]
 80106b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	6a1b      	ldr	r3, [r3, #32]
 80106ba:	f023 0201 	bic.w	r2, r3, #1
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	699b      	ldr	r3, [r3, #24]
 80106c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80106ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	011b      	lsls	r3, r3, #4
 80106d4:	693a      	ldr	r2, [r7, #16]
 80106d6:	4313      	orrs	r3, r2
 80106d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	f023 030a 	bic.w	r3, r3, #10
 80106e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	4313      	orrs	r3, r2
 80106e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	693a      	ldr	r2, [r7, #16]
 80106ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	697a      	ldr	r2, [r7, #20]
 80106f4:	621a      	str	r2, [r3, #32]
}
 80106f6:	bf00      	nop
 80106f8:	371c      	adds	r7, #28
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr

08010702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010702:	b480      	push	{r7}
 8010704:	b087      	sub	sp, #28
 8010706:	af00      	add	r7, sp, #0
 8010708:	60f8      	str	r0, [r7, #12]
 801070a:	60b9      	str	r1, [r7, #8]
 801070c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6a1b      	ldr	r3, [r3, #32]
 8010712:	f023 0210 	bic.w	r2, r3, #16
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	699b      	ldr	r3, [r3, #24]
 801071e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6a1b      	ldr	r3, [r3, #32]
 8010724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801072c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	031b      	lsls	r3, r3, #12
 8010732:	697a      	ldr	r2, [r7, #20]
 8010734:	4313      	orrs	r3, r2
 8010736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801073e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	011b      	lsls	r3, r3, #4
 8010744:	693a      	ldr	r2, [r7, #16]
 8010746:	4313      	orrs	r3, r2
 8010748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	697a      	ldr	r2, [r7, #20]
 801074e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	693a      	ldr	r2, [r7, #16]
 8010754:	621a      	str	r2, [r3, #32]
}
 8010756:	bf00      	nop
 8010758:	371c      	adds	r7, #28
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010762:	b480      	push	{r7}
 8010764:	b085      	sub	sp, #20
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
 801076a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	4313      	orrs	r3, r2
 8010780:	f043 0307 	orr.w	r3, r3, #7
 8010784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68fa      	ldr	r2, [r7, #12]
 801078a:	609a      	str	r2, [r3, #8]
}
 801078c:	bf00      	nop
 801078e:	3714      	adds	r7, #20
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010798:	b480      	push	{r7}
 801079a:	b087      	sub	sp, #28
 801079c:	af00      	add	r7, sp, #0
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	607a      	str	r2, [r7, #4]
 80107a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	689b      	ldr	r3, [r3, #8]
 80107aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80107b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	021a      	lsls	r2, r3, #8
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	431a      	orrs	r2, r3
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	4313      	orrs	r3, r2
 80107c0:	697a      	ldr	r2, [r7, #20]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	697a      	ldr	r2, [r7, #20]
 80107ca:	609a      	str	r2, [r3, #8]
}
 80107cc:	bf00      	nop
 80107ce:	371c      	adds	r7, #28
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80107d8:	b480      	push	{r7}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d101      	bne.n	80107f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80107ec:	2302      	movs	r3, #2
 80107ee:	e05a      	b.n	80108a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2201      	movs	r2, #1
 80107f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2202      	movs	r2, #2
 80107fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	4313      	orrs	r3, r2
 8010820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	68fa      	ldr	r2, [r7, #12]
 8010828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	4a21      	ldr	r2, [pc, #132]	@ (80108b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d022      	beq.n	801087a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801083c:	d01d      	beq.n	801087a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	4a1d      	ldr	r2, [pc, #116]	@ (80108b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010844:	4293      	cmp	r3, r2
 8010846:	d018      	beq.n	801087a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a1b      	ldr	r2, [pc, #108]	@ (80108bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d013      	beq.n	801087a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4a1a      	ldr	r2, [pc, #104]	@ (80108c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d00e      	beq.n	801087a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4a18      	ldr	r2, [pc, #96]	@ (80108c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010862:	4293      	cmp	r3, r2
 8010864:	d009      	beq.n	801087a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4a17      	ldr	r2, [pc, #92]	@ (80108c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d004      	beq.n	801087a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4a15      	ldr	r2, [pc, #84]	@ (80108cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d10c      	bne.n	8010894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	68ba      	ldr	r2, [r7, #8]
 8010888:	4313      	orrs	r3, r2
 801088a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3714      	adds	r7, #20
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	40010000 	.word	0x40010000
 80108b8:	40000400 	.word	0x40000400
 80108bc:	40000800 	.word	0x40000800
 80108c0:	40000c00 	.word	0x40000c00
 80108c4:	40010400 	.word	0x40010400
 80108c8:	40014000 	.word	0x40014000
 80108cc:	40001800 	.word	0x40001800

080108d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80108da:	2300      	movs	r3, #0
 80108dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d101      	bne.n	80108ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80108e8:	2302      	movs	r3, #2
 80108ea:	e03d      	b.n	8010968 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2201      	movs	r2, #1
 80108f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	4313      	orrs	r3, r2
 8010900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	4313      	orrs	r3, r2
 801090e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	4313      	orrs	r3, r2
 801091c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4313      	orrs	r3, r2
 801092a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	691b      	ldr	r3, [r3, #16]
 8010936:	4313      	orrs	r3, r2
 8010938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	695b      	ldr	r3, [r3, #20]
 8010944:	4313      	orrs	r3, r2
 8010946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	69db      	ldr	r3, [r3, #28]
 8010952:	4313      	orrs	r3, r2
 8010954:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	68fa      	ldr	r2, [r7, #12]
 801095c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010966:	2300      	movs	r3, #0
}
 8010968:	4618      	mov	r0, r3
 801096a:	3714      	adds	r7, #20
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801097c:	bf00      	nop
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010990:	bf00      	nop
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109aa:	2301      	movs	r3, #1
 80109ac:	e03f      	b.n	8010a2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d106      	bne.n	80109c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7fc fd4a 	bl	800d45c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2224      	movs	r2, #36	@ 0x24
 80109cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68da      	ldr	r2, [r3, #12]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80109de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 fcdf 	bl	80113a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	691a      	ldr	r2, [r3, #16]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80109f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	695a      	ldr	r2, [r3, #20]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68da      	ldr	r2, [r3, #12]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2220      	movs	r2, #32
 8010a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2220      	movs	r2, #32
 8010a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8010a2c:	2300      	movs	r3, #0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b084      	sub	sp, #16
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	60f8      	str	r0, [r7, #12]
 8010a3e:	60b9      	str	r1, [r7, #8]
 8010a40:	4613      	mov	r3, r2
 8010a42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	2b20      	cmp	r3, #32
 8010a4e:	d11d      	bne.n	8010a8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d002      	beq.n	8010a5c <HAL_UART_Receive_IT+0x26>
 8010a56:	88fb      	ldrh	r3, [r7, #6]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d101      	bne.n	8010a60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	e016      	b.n	8010a8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d101      	bne.n	8010a6e <HAL_UART_Receive_IT+0x38>
 8010a6a:	2302      	movs	r3, #2
 8010a6c:	e00f      	b.n	8010a8e <HAL_UART_Receive_IT+0x58>
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2201      	movs	r2, #1
 8010a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010a7c:	88fb      	ldrh	r3, [r7, #6]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	68b9      	ldr	r1, [r7, #8]
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 fab6 	bl	8010ff4 <UART_Start_Receive_IT>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	e000      	b.n	8010a8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010a8c:	2302      	movs	r3, #2
  }
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
	...

08010a98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b0ba      	sub	sp, #232	@ 0xe8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	695b      	ldr	r3, [r3, #20]
 8010aba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ace:	f003 030f 	and.w	r3, r3, #15
 8010ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8010ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d10f      	bne.n	8010afe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ae2:	f003 0320 	and.w	r3, r3, #32
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d009      	beq.n	8010afe <HAL_UART_IRQHandler+0x66>
 8010aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010aee:	f003 0320 	and.w	r3, r3, #32
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d003      	beq.n	8010afe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fb99 	bl	801122e <UART_Receive_IT>
      return;
 8010afc:	e256      	b.n	8010fac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f000 80de 	beq.w	8010cc4 <HAL_UART_IRQHandler+0x22c>
 8010b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b0c:	f003 0301 	and.w	r3, r3, #1
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d106      	bne.n	8010b22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 80d1 	beq.w	8010cc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b26:	f003 0301 	and.w	r3, r3, #1
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d00b      	beq.n	8010b46 <HAL_UART_IRQHandler+0xae>
 8010b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d005      	beq.n	8010b46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b3e:	f043 0201 	orr.w	r2, r3, #1
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b4a:	f003 0304 	and.w	r3, r3, #4
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d00b      	beq.n	8010b6a <HAL_UART_IRQHandler+0xd2>
 8010b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b56:	f003 0301 	and.w	r3, r3, #1
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d005      	beq.n	8010b6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b62:	f043 0202 	orr.w	r2, r3, #2
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b6e:	f003 0302 	and.w	r3, r3, #2
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00b      	beq.n	8010b8e <HAL_UART_IRQHandler+0xf6>
 8010b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b7a:	f003 0301 	and.w	r3, r3, #1
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d005      	beq.n	8010b8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b86:	f043 0204 	orr.w	r2, r3, #4
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b92:	f003 0308 	and.w	r3, r3, #8
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d011      	beq.n	8010bbe <HAL_UART_IRQHandler+0x126>
 8010b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b9e:	f003 0320 	and.w	r3, r3, #32
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d105      	bne.n	8010bb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010baa:	f003 0301 	and.w	r3, r3, #1
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d005      	beq.n	8010bbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bb6:	f043 0208 	orr.w	r2, r3, #8
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f000 81ed 	beq.w	8010fa2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bcc:	f003 0320 	and.w	r3, r3, #32
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d008      	beq.n	8010be6 <HAL_UART_IRQHandler+0x14e>
 8010bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010bd8:	f003 0320 	and.w	r3, r3, #32
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d002      	beq.n	8010be6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f000 fb24 	bl	801122e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	695b      	ldr	r3, [r3, #20]
 8010bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bf0:	2b40      	cmp	r3, #64	@ 0x40
 8010bf2:	bf0c      	ite	eq
 8010bf4:	2301      	moveq	r3, #1
 8010bf6:	2300      	movne	r3, #0
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c02:	f003 0308 	and.w	r3, r3, #8
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d103      	bne.n	8010c12 <HAL_UART_IRQHandler+0x17a>
 8010c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d04f      	beq.n	8010cb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 fa2c 	bl	8011070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	695b      	ldr	r3, [r3, #20]
 8010c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c22:	2b40      	cmp	r3, #64	@ 0x40
 8010c24:	d141      	bne.n	8010caa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	3314      	adds	r3, #20
 8010c2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010c34:	e853 3f00 	ldrex	r3, [r3]
 8010c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	3314      	adds	r3, #20
 8010c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010c52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010c62:	e841 2300 	strex	r3, r2, [r1]
 8010c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1d9      	bne.n	8010c26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d013      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c7e:	4a7d      	ldr	r2, [pc, #500]	@ (8010e74 <HAL_UART_IRQHandler+0x3dc>)
 8010c80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fd f817 	bl	800dcba <HAL_DMA_Abort_IT>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d016      	beq.n	8010cc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010c9c:	4610      	mov	r0, r2
 8010c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ca0:	e00e      	b.n	8010cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f000 f990 	bl	8010fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ca8:	e00a      	b.n	8010cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 f98c 	bl	8010fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cb0:	e006      	b.n	8010cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f000 f988 	bl	8010fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8010cbe:	e170      	b.n	8010fa2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cc0:	bf00      	nop
    return;
 8010cc2:	e16e      	b.n	8010fa2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cc8:	2b01      	cmp	r3, #1
 8010cca:	f040 814a 	bne.w	8010f62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010cd2:	f003 0310 	and.w	r3, r3, #16
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f000 8143 	beq.w	8010f62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ce0:	f003 0310 	and.w	r3, r3, #16
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 813c 	beq.w	8010f62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010cea:	2300      	movs	r3, #0
 8010cec:	60bb      	str	r3, [r7, #8]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	60bb      	str	r3, [r7, #8]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	60bb      	str	r3, [r7, #8]
 8010cfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d0a:	2b40      	cmp	r3, #64	@ 0x40
 8010d0c:	f040 80b4 	bne.w	8010e78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	f000 8140 	beq.w	8010fa6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	f080 8139 	bcs.w	8010fa6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010d3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d40:	69db      	ldr	r3, [r3, #28]
 8010d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d46:	f000 8088 	beq.w	8010e5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	330c      	adds	r3, #12
 8010d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010d58:	e853 3f00 	ldrex	r3, [r3]
 8010d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	330c      	adds	r3, #12
 8010d72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010d76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010d7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010d86:	e841 2300 	strex	r3, r2, [r1]
 8010d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1d9      	bne.n	8010d4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3314      	adds	r3, #20
 8010d9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010da0:	e853 3f00 	ldrex	r3, [r3]
 8010da4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010da8:	f023 0301 	bic.w	r3, r3, #1
 8010dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3314      	adds	r3, #20
 8010db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010dba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010dc6:	e841 2300 	strex	r3, r2, [r1]
 8010dca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1e1      	bne.n	8010d96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	3314      	adds	r3, #20
 8010dd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ddc:	e853 3f00 	ldrex	r3, [r3]
 8010de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	3314      	adds	r3, #20
 8010df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010df6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010df8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010dfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010dfe:	e841 2300 	strex	r3, r2, [r1]
 8010e02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010e04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1e3      	bne.n	8010dd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2220      	movs	r2, #32
 8010e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2200      	movs	r2, #0
 8010e16:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	330c      	adds	r3, #12
 8010e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e22:	e853 3f00 	ldrex	r3, [r3]
 8010e26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e2a:	f023 0310 	bic.w	r3, r3, #16
 8010e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	330c      	adds	r3, #12
 8010e38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010e3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8010e3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010e42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010e44:	e841 2300 	strex	r3, r2, [r1]
 8010e48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d1e3      	bne.n	8010e18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fc fec0 	bl	800dbda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	1ad3      	subs	r3, r2, r3
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	4619      	mov	r1, r3
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 f8b6 	bl	8010fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010e70:	e099      	b.n	8010fa6 <HAL_UART_IRQHandler+0x50e>
 8010e72:	bf00      	nop
 8010e74:	08011137 	.word	0x08011137
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f000 808b 	beq.w	8010faa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	f000 8086 	beq.w	8010faa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	330c      	adds	r3, #12
 8010ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea8:	e853 3f00 	ldrex	r3, [r3]
 8010eac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	330c      	adds	r3, #12
 8010ebe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010ec2:	647a      	str	r2, [r7, #68]	@ 0x44
 8010ec4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010ec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010eca:	e841 2300 	strex	r3, r2, [r1]
 8010ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1e3      	bne.n	8010e9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	3314      	adds	r3, #20
 8010edc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee0:	e853 3f00 	ldrex	r3, [r3]
 8010ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8010ee6:	6a3b      	ldr	r3, [r7, #32]
 8010ee8:	f023 0301 	bic.w	r3, r3, #1
 8010eec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	3314      	adds	r3, #20
 8010ef6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010efa:	633a      	str	r2, [r7, #48]	@ 0x30
 8010efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f02:	e841 2300 	strex	r3, r2, [r1]
 8010f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1e3      	bne.n	8010ed6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2220      	movs	r2, #32
 8010f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	330c      	adds	r3, #12
 8010f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	e853 3f00 	ldrex	r3, [r3]
 8010f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f023 0310 	bic.w	r3, r3, #16
 8010f32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	330c      	adds	r3, #12
 8010f3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010f40:	61fa      	str	r2, [r7, #28]
 8010f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f44:	69b9      	ldr	r1, [r7, #24]
 8010f46:	69fa      	ldr	r2, [r7, #28]
 8010f48:	e841 2300 	strex	r3, r2, [r1]
 8010f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1e3      	bne.n	8010f1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010f58:	4619      	mov	r1, r3
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 f83e 	bl	8010fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010f60:	e023      	b.n	8010faa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d009      	beq.n	8010f82 <HAL_UART_IRQHandler+0x4ea>
 8010f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d003      	beq.n	8010f82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 f8ef 	bl	801115e <UART_Transmit_IT>
    return;
 8010f80:	e014      	b.n	8010fac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00e      	beq.n	8010fac <HAL_UART_IRQHandler+0x514>
 8010f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d008      	beq.n	8010fac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f000 f92f 	bl	80111fe <UART_EndTransmit_IT>
    return;
 8010fa0:	e004      	b.n	8010fac <HAL_UART_IRQHandler+0x514>
    return;
 8010fa2:	bf00      	nop
 8010fa4:	e002      	b.n	8010fac <HAL_UART_IRQHandler+0x514>
      return;
 8010fa6:	bf00      	nop
 8010fa8:	e000      	b.n	8010fac <HAL_UART_IRQHandler+0x514>
      return;
 8010faa:	bf00      	nop
  }
}
 8010fac:	37e8      	adds	r7, #232	@ 0xe8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop

08010fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010fbc:	bf00      	nop
 8010fbe:	370c      	adds	r7, #12
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010fd0:	bf00      	nop
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010fe8:	bf00      	nop
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr

08010ff4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b085      	sub	sp, #20
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	60b9      	str	r1, [r7, #8]
 8010ffe:	4613      	mov	r3, r2
 8011000:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	68ba      	ldr	r2, [r7, #8]
 8011006:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	88fa      	ldrh	r2, [r7, #6]
 801100c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	88fa      	ldrh	r2, [r7, #6]
 8011012:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2200      	movs	r2, #0
 8011018:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2222      	movs	r2, #34	@ 0x22
 801101e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2200      	movs	r2, #0
 8011026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	691b      	ldr	r3, [r3, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d007      	beq.n	8011042 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	68da      	ldr	r2, [r3, #12]
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011040:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	695a      	ldr	r2, [r3, #20]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f042 0201 	orr.w	r2, r2, #1
 8011050:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68da      	ldr	r2, [r3, #12]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f042 0220 	orr.w	r2, r2, #32
 8011060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011062:	2300      	movs	r3, #0
}
 8011064:	4618      	mov	r0, r3
 8011066:	3714      	adds	r7, #20
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011070:	b480      	push	{r7}
 8011072:	b095      	sub	sp, #84	@ 0x54
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	330c      	adds	r3, #12
 801107e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011082:	e853 3f00 	ldrex	r3, [r3]
 8011086:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801108a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801108e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	330c      	adds	r3, #12
 8011096:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011098:	643a      	str	r2, [r7, #64]	@ 0x40
 801109a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801109e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80110a0:	e841 2300 	strex	r3, r2, [r1]
 80110a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80110a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d1e5      	bne.n	8011078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	3314      	adds	r3, #20
 80110b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	e853 3f00 	ldrex	r3, [r3]
 80110ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	f023 0301 	bic.w	r3, r3, #1
 80110c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	3314      	adds	r3, #20
 80110ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80110cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80110ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80110d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110d4:	e841 2300 	strex	r3, r2, [r1]
 80110d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80110da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1e5      	bne.n	80110ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d119      	bne.n	801111c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	330c      	adds	r3, #12
 80110ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	e853 3f00 	ldrex	r3, [r3]
 80110f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	f023 0310 	bic.w	r3, r3, #16
 80110fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	330c      	adds	r3, #12
 8011106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011108:	61ba      	str	r2, [r7, #24]
 801110a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801110c:	6979      	ldr	r1, [r7, #20]
 801110e:	69ba      	ldr	r2, [r7, #24]
 8011110:	e841 2300 	strex	r3, r2, [r1]
 8011114:	613b      	str	r3, [r7, #16]
   return(result);
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d1e5      	bne.n	80110e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2220      	movs	r2, #32
 8011120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801112a:	bf00      	nop
 801112c:	3754      	adds	r7, #84	@ 0x54
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr

08011136 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011136:	b580      	push	{r7, lr}
 8011138:	b084      	sub	sp, #16
 801113a:	af00      	add	r7, sp, #0
 801113c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2200      	movs	r2, #0
 8011148:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2200      	movs	r2, #0
 801114e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f7ff ff39 	bl	8010fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011156:	bf00      	nop
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}

0801115e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801115e:	b480      	push	{r7}
 8011160:	b085      	sub	sp, #20
 8011162:	af00      	add	r7, sp, #0
 8011164:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801116c:	b2db      	uxtb	r3, r3
 801116e:	2b21      	cmp	r3, #33	@ 0x21
 8011170:	d13e      	bne.n	80111f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	689b      	ldr	r3, [r3, #8]
 8011176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801117a:	d114      	bne.n	80111a6 <UART_Transmit_IT+0x48>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	691b      	ldr	r3, [r3, #16]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d110      	bne.n	80111a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6a1b      	ldr	r3, [r3, #32]
 8011188:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	881b      	ldrh	r3, [r3, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011198:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6a1b      	ldr	r3, [r3, #32]
 801119e:	1c9a      	adds	r2, r3, #2
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	621a      	str	r2, [r3, #32]
 80111a4:	e008      	b.n	80111b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6a1b      	ldr	r3, [r3, #32]
 80111aa:	1c59      	adds	r1, r3, #1
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	6211      	str	r1, [r2, #32]
 80111b0:	781a      	ldrb	r2, [r3, #0]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80111bc:	b29b      	uxth	r3, r3
 80111be:	3b01      	subs	r3, #1
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	4619      	mov	r1, r3
 80111c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d10f      	bne.n	80111ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	68da      	ldr	r2, [r3, #12]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80111da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	68da      	ldr	r2, [r3, #12]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80111ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80111ec:	2300      	movs	r3, #0
 80111ee:	e000      	b.n	80111f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80111f0:	2302      	movs	r3, #2
  }
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3714      	adds	r7, #20
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr

080111fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b082      	sub	sp, #8
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	68da      	ldr	r2, [r3, #12]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2220      	movs	r2, #32
 801121a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7ff fec8 	bl	8010fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3708      	adds	r7, #8
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801122e:	b580      	push	{r7, lr}
 8011230:	b08c      	sub	sp, #48	@ 0x30
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801123c:	b2db      	uxtb	r3, r3
 801123e:	2b22      	cmp	r3, #34	@ 0x22
 8011240:	f040 80ab 	bne.w	801139a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	689b      	ldr	r3, [r3, #8]
 8011248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801124c:	d117      	bne.n	801127e <UART_Receive_IT+0x50>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	691b      	ldr	r3, [r3, #16]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d113      	bne.n	801127e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011256:	2300      	movs	r3, #0
 8011258:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801125e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	b29b      	uxth	r3, r3
 8011268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801126c:	b29a      	uxth	r2, r3
 801126e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011276:	1c9a      	adds	r2, r3, #2
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	629a      	str	r2, [r3, #40]	@ 0x28
 801127c:	e026      	b.n	80112cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011282:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011284:	2300      	movs	r3, #0
 8011286:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	689b      	ldr	r3, [r3, #8]
 801128c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011290:	d007      	beq.n	80112a2 <UART_Receive_IT+0x74>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d10a      	bne.n	80112b0 <UART_Receive_IT+0x82>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	691b      	ldr	r3, [r3, #16]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d106      	bne.n	80112b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	b2da      	uxtb	r2, r3
 80112aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ac:	701a      	strb	r2, [r3, #0]
 80112ae:	e008      	b.n	80112c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112bc:	b2da      	uxtb	r2, r3
 80112be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112c6:	1c5a      	adds	r2, r3, #1
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	3b01      	subs	r3, #1
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	4619      	mov	r1, r3
 80112da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d15a      	bne.n	8011396 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68da      	ldr	r2, [r3, #12]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f022 0220 	bic.w	r2, r2, #32
 80112ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	68da      	ldr	r2, [r3, #12]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80112fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	695a      	ldr	r2, [r3, #20]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f022 0201 	bic.w	r2, r2, #1
 801130e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2220      	movs	r2, #32
 8011314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801131c:	2b01      	cmp	r3, #1
 801131e:	d135      	bne.n	801138c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2200      	movs	r2, #0
 8011324:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	330c      	adds	r3, #12
 801132c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	e853 3f00 	ldrex	r3, [r3]
 8011334:	613b      	str	r3, [r7, #16]
   return(result);
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	f023 0310 	bic.w	r3, r3, #16
 801133c:	627b      	str	r3, [r7, #36]	@ 0x24
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	330c      	adds	r3, #12
 8011344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011346:	623a      	str	r2, [r7, #32]
 8011348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801134a:	69f9      	ldr	r1, [r7, #28]
 801134c:	6a3a      	ldr	r2, [r7, #32]
 801134e:	e841 2300 	strex	r3, r2, [r1]
 8011352:	61bb      	str	r3, [r7, #24]
   return(result);
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1e5      	bne.n	8011326 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f003 0310 	and.w	r3, r3, #16
 8011364:	2b10      	cmp	r3, #16
 8011366:	d10a      	bne.n	801137e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011368:	2300      	movs	r3, #0
 801136a:	60fb      	str	r3, [r7, #12]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	60fb      	str	r3, [r7, #12]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	60fb      	str	r3, [r7, #12]
 801137c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011382:	4619      	mov	r1, r3
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7ff fe29 	bl	8010fdc <HAL_UARTEx_RxEventCallback>
 801138a:	e002      	b.n	8011392 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7fb fd8b 	bl	800cea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011392:	2300      	movs	r3, #0
 8011394:	e002      	b.n	801139c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011396:	2300      	movs	r3, #0
 8011398:	e000      	b.n	801139c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801139a:	2302      	movs	r3, #2
  }
}
 801139c:	4618      	mov	r0, r3
 801139e:	3730      	adds	r7, #48	@ 0x30
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80113a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80113a8:	b0c0      	sub	sp, #256	@ 0x100
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80113b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80113bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113c0:	68d9      	ldr	r1, [r3, #12]
 80113c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	ea40 0301 	orr.w	r3, r0, r1
 80113cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80113ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113d2:	689a      	ldr	r2, [r3, #8]
 80113d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113d8:	691b      	ldr	r3, [r3, #16]
 80113da:	431a      	orrs	r2, r3
 80113dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113e0:	695b      	ldr	r3, [r3, #20]
 80113e2:	431a      	orrs	r2, r3
 80113e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113e8:	69db      	ldr	r3, [r3, #28]
 80113ea:	4313      	orrs	r3, r2
 80113ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80113f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80113fc:	f021 010c 	bic.w	r1, r1, #12
 8011400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801140a:	430b      	orrs	r3, r1
 801140c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801140e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	695b      	ldr	r3, [r3, #20]
 8011416:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801141a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801141e:	6999      	ldr	r1, [r3, #24]
 8011420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011424:	681a      	ldr	r2, [r3, #0]
 8011426:	ea40 0301 	orr.w	r3, r0, r1
 801142a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801142c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	4b8f      	ldr	r3, [pc, #572]	@ (8011670 <UART_SetConfig+0x2cc>)
 8011434:	429a      	cmp	r2, r3
 8011436:	d005      	beq.n	8011444 <UART_SetConfig+0xa0>
 8011438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	4b8d      	ldr	r3, [pc, #564]	@ (8011674 <UART_SetConfig+0x2d0>)
 8011440:	429a      	cmp	r2, r3
 8011442:	d104      	bne.n	801144e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011444:	f7fc ff78 	bl	800e338 <HAL_RCC_GetPCLK2Freq>
 8011448:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801144c:	e003      	b.n	8011456 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801144e:	f7fc ff5f 	bl	800e310 <HAL_RCC_GetPCLK1Freq>
 8011452:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801145a:	69db      	ldr	r3, [r3, #28]
 801145c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011460:	f040 810c 	bne.w	801167c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011468:	2200      	movs	r2, #0
 801146a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801146e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011472:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011476:	4622      	mov	r2, r4
 8011478:	462b      	mov	r3, r5
 801147a:	1891      	adds	r1, r2, r2
 801147c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801147e:	415b      	adcs	r3, r3
 8011480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011482:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011486:	4621      	mov	r1, r4
 8011488:	eb12 0801 	adds.w	r8, r2, r1
 801148c:	4629      	mov	r1, r5
 801148e:	eb43 0901 	adc.w	r9, r3, r1
 8011492:	f04f 0200 	mov.w	r2, #0
 8011496:	f04f 0300 	mov.w	r3, #0
 801149a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801149e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80114a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80114a6:	4690      	mov	r8, r2
 80114a8:	4699      	mov	r9, r3
 80114aa:	4623      	mov	r3, r4
 80114ac:	eb18 0303 	adds.w	r3, r8, r3
 80114b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80114b4:	462b      	mov	r3, r5
 80114b6:	eb49 0303 	adc.w	r3, r9, r3
 80114ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80114be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80114ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80114ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80114d2:	460b      	mov	r3, r1
 80114d4:	18db      	adds	r3, r3, r3
 80114d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80114d8:	4613      	mov	r3, r2
 80114da:	eb42 0303 	adc.w	r3, r2, r3
 80114de:	657b      	str	r3, [r7, #84]	@ 0x54
 80114e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80114e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80114e8:	f7ef fbde 	bl	8000ca8 <__aeabi_uldivmod>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	4b61      	ldr	r3, [pc, #388]	@ (8011678 <UART_SetConfig+0x2d4>)
 80114f2:	fba3 2302 	umull	r2, r3, r3, r2
 80114f6:	095b      	lsrs	r3, r3, #5
 80114f8:	011c      	lsls	r4, r3, #4
 80114fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80114fe:	2200      	movs	r2, #0
 8011500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011504:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011508:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801150c:	4642      	mov	r2, r8
 801150e:	464b      	mov	r3, r9
 8011510:	1891      	adds	r1, r2, r2
 8011512:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011514:	415b      	adcs	r3, r3
 8011516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801151c:	4641      	mov	r1, r8
 801151e:	eb12 0a01 	adds.w	sl, r2, r1
 8011522:	4649      	mov	r1, r9
 8011524:	eb43 0b01 	adc.w	fp, r3, r1
 8011528:	f04f 0200 	mov.w	r2, #0
 801152c:	f04f 0300 	mov.w	r3, #0
 8011530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801153c:	4692      	mov	sl, r2
 801153e:	469b      	mov	fp, r3
 8011540:	4643      	mov	r3, r8
 8011542:	eb1a 0303 	adds.w	r3, sl, r3
 8011546:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801154a:	464b      	mov	r3, r9
 801154c:	eb4b 0303 	adc.w	r3, fp, r3
 8011550:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	2200      	movs	r2, #0
 801155c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011560:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011564:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011568:	460b      	mov	r3, r1
 801156a:	18db      	adds	r3, r3, r3
 801156c:	643b      	str	r3, [r7, #64]	@ 0x40
 801156e:	4613      	mov	r3, r2
 8011570:	eb42 0303 	adc.w	r3, r2, r3
 8011574:	647b      	str	r3, [r7, #68]	@ 0x44
 8011576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801157a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801157e:	f7ef fb93 	bl	8000ca8 <__aeabi_uldivmod>
 8011582:	4602      	mov	r2, r0
 8011584:	460b      	mov	r3, r1
 8011586:	4611      	mov	r1, r2
 8011588:	4b3b      	ldr	r3, [pc, #236]	@ (8011678 <UART_SetConfig+0x2d4>)
 801158a:	fba3 2301 	umull	r2, r3, r3, r1
 801158e:	095b      	lsrs	r3, r3, #5
 8011590:	2264      	movs	r2, #100	@ 0x64
 8011592:	fb02 f303 	mul.w	r3, r2, r3
 8011596:	1acb      	subs	r3, r1, r3
 8011598:	00db      	lsls	r3, r3, #3
 801159a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801159e:	4b36      	ldr	r3, [pc, #216]	@ (8011678 <UART_SetConfig+0x2d4>)
 80115a0:	fba3 2302 	umull	r2, r3, r3, r2
 80115a4:	095b      	lsrs	r3, r3, #5
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80115ac:	441c      	add	r4, r3
 80115ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80115b2:	2200      	movs	r2, #0
 80115b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80115b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80115bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80115c0:	4642      	mov	r2, r8
 80115c2:	464b      	mov	r3, r9
 80115c4:	1891      	adds	r1, r2, r2
 80115c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80115c8:	415b      	adcs	r3, r3
 80115ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80115cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80115d0:	4641      	mov	r1, r8
 80115d2:	1851      	adds	r1, r2, r1
 80115d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80115d6:	4649      	mov	r1, r9
 80115d8:	414b      	adcs	r3, r1
 80115da:	637b      	str	r3, [r7, #52]	@ 0x34
 80115dc:	f04f 0200 	mov.w	r2, #0
 80115e0:	f04f 0300 	mov.w	r3, #0
 80115e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80115e8:	4659      	mov	r1, fp
 80115ea:	00cb      	lsls	r3, r1, #3
 80115ec:	4651      	mov	r1, sl
 80115ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80115f2:	4651      	mov	r1, sl
 80115f4:	00ca      	lsls	r2, r1, #3
 80115f6:	4610      	mov	r0, r2
 80115f8:	4619      	mov	r1, r3
 80115fa:	4603      	mov	r3, r0
 80115fc:	4642      	mov	r2, r8
 80115fe:	189b      	adds	r3, r3, r2
 8011600:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011604:	464b      	mov	r3, r9
 8011606:	460a      	mov	r2, r1
 8011608:	eb42 0303 	adc.w	r3, r2, r3
 801160c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	2200      	movs	r2, #0
 8011618:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801161c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011624:	460b      	mov	r3, r1
 8011626:	18db      	adds	r3, r3, r3
 8011628:	62bb      	str	r3, [r7, #40]	@ 0x28
 801162a:	4613      	mov	r3, r2
 801162c:	eb42 0303 	adc.w	r3, r2, r3
 8011630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011636:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801163a:	f7ef fb35 	bl	8000ca8 <__aeabi_uldivmod>
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	4b0d      	ldr	r3, [pc, #52]	@ (8011678 <UART_SetConfig+0x2d4>)
 8011644:	fba3 1302 	umull	r1, r3, r3, r2
 8011648:	095b      	lsrs	r3, r3, #5
 801164a:	2164      	movs	r1, #100	@ 0x64
 801164c:	fb01 f303 	mul.w	r3, r1, r3
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	00db      	lsls	r3, r3, #3
 8011654:	3332      	adds	r3, #50	@ 0x32
 8011656:	4a08      	ldr	r2, [pc, #32]	@ (8011678 <UART_SetConfig+0x2d4>)
 8011658:	fba2 2303 	umull	r2, r3, r2, r3
 801165c:	095b      	lsrs	r3, r3, #5
 801165e:	f003 0207 	and.w	r2, r3, #7
 8011662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4422      	add	r2, r4
 801166a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801166c:	e106      	b.n	801187c <UART_SetConfig+0x4d8>
 801166e:	bf00      	nop
 8011670:	40011000 	.word	0x40011000
 8011674:	40011400 	.word	0x40011400
 8011678:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801167c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011680:	2200      	movs	r2, #0
 8011682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011686:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801168a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801168e:	4642      	mov	r2, r8
 8011690:	464b      	mov	r3, r9
 8011692:	1891      	adds	r1, r2, r2
 8011694:	6239      	str	r1, [r7, #32]
 8011696:	415b      	adcs	r3, r3
 8011698:	627b      	str	r3, [r7, #36]	@ 0x24
 801169a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801169e:	4641      	mov	r1, r8
 80116a0:	1854      	adds	r4, r2, r1
 80116a2:	4649      	mov	r1, r9
 80116a4:	eb43 0501 	adc.w	r5, r3, r1
 80116a8:	f04f 0200 	mov.w	r2, #0
 80116ac:	f04f 0300 	mov.w	r3, #0
 80116b0:	00eb      	lsls	r3, r5, #3
 80116b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80116b6:	00e2      	lsls	r2, r4, #3
 80116b8:	4614      	mov	r4, r2
 80116ba:	461d      	mov	r5, r3
 80116bc:	4643      	mov	r3, r8
 80116be:	18e3      	adds	r3, r4, r3
 80116c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80116c4:	464b      	mov	r3, r9
 80116c6:	eb45 0303 	adc.w	r3, r5, r3
 80116ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80116ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80116da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80116de:	f04f 0200 	mov.w	r2, #0
 80116e2:	f04f 0300 	mov.w	r3, #0
 80116e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80116ea:	4629      	mov	r1, r5
 80116ec:	008b      	lsls	r3, r1, #2
 80116ee:	4621      	mov	r1, r4
 80116f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80116f4:	4621      	mov	r1, r4
 80116f6:	008a      	lsls	r2, r1, #2
 80116f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80116fc:	f7ef fad4 	bl	8000ca8 <__aeabi_uldivmod>
 8011700:	4602      	mov	r2, r0
 8011702:	460b      	mov	r3, r1
 8011704:	4b60      	ldr	r3, [pc, #384]	@ (8011888 <UART_SetConfig+0x4e4>)
 8011706:	fba3 2302 	umull	r2, r3, r3, r2
 801170a:	095b      	lsrs	r3, r3, #5
 801170c:	011c      	lsls	r4, r3, #4
 801170e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011712:	2200      	movs	r2, #0
 8011714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011718:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801171c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8011720:	4642      	mov	r2, r8
 8011722:	464b      	mov	r3, r9
 8011724:	1891      	adds	r1, r2, r2
 8011726:	61b9      	str	r1, [r7, #24]
 8011728:	415b      	adcs	r3, r3
 801172a:	61fb      	str	r3, [r7, #28]
 801172c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011730:	4641      	mov	r1, r8
 8011732:	1851      	adds	r1, r2, r1
 8011734:	6139      	str	r1, [r7, #16]
 8011736:	4649      	mov	r1, r9
 8011738:	414b      	adcs	r3, r1
 801173a:	617b      	str	r3, [r7, #20]
 801173c:	f04f 0200 	mov.w	r2, #0
 8011740:	f04f 0300 	mov.w	r3, #0
 8011744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011748:	4659      	mov	r1, fp
 801174a:	00cb      	lsls	r3, r1, #3
 801174c:	4651      	mov	r1, sl
 801174e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011752:	4651      	mov	r1, sl
 8011754:	00ca      	lsls	r2, r1, #3
 8011756:	4610      	mov	r0, r2
 8011758:	4619      	mov	r1, r3
 801175a:	4603      	mov	r3, r0
 801175c:	4642      	mov	r2, r8
 801175e:	189b      	adds	r3, r3, r2
 8011760:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011764:	464b      	mov	r3, r9
 8011766:	460a      	mov	r2, r1
 8011768:	eb42 0303 	adc.w	r3, r2, r3
 801176c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	67bb      	str	r3, [r7, #120]	@ 0x78
 801177a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801177c:	f04f 0200 	mov.w	r2, #0
 8011780:	f04f 0300 	mov.w	r3, #0
 8011784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011788:	4649      	mov	r1, r9
 801178a:	008b      	lsls	r3, r1, #2
 801178c:	4641      	mov	r1, r8
 801178e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011792:	4641      	mov	r1, r8
 8011794:	008a      	lsls	r2, r1, #2
 8011796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801179a:	f7ef fa85 	bl	8000ca8 <__aeabi_uldivmod>
 801179e:	4602      	mov	r2, r0
 80117a0:	460b      	mov	r3, r1
 80117a2:	4611      	mov	r1, r2
 80117a4:	4b38      	ldr	r3, [pc, #224]	@ (8011888 <UART_SetConfig+0x4e4>)
 80117a6:	fba3 2301 	umull	r2, r3, r3, r1
 80117aa:	095b      	lsrs	r3, r3, #5
 80117ac:	2264      	movs	r2, #100	@ 0x64
 80117ae:	fb02 f303 	mul.w	r3, r2, r3
 80117b2:	1acb      	subs	r3, r1, r3
 80117b4:	011b      	lsls	r3, r3, #4
 80117b6:	3332      	adds	r3, #50	@ 0x32
 80117b8:	4a33      	ldr	r2, [pc, #204]	@ (8011888 <UART_SetConfig+0x4e4>)
 80117ba:	fba2 2303 	umull	r2, r3, r2, r3
 80117be:	095b      	lsrs	r3, r3, #5
 80117c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80117c4:	441c      	add	r4, r3
 80117c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80117ca:	2200      	movs	r2, #0
 80117cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80117ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80117d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80117d4:	4642      	mov	r2, r8
 80117d6:	464b      	mov	r3, r9
 80117d8:	1891      	adds	r1, r2, r2
 80117da:	60b9      	str	r1, [r7, #8]
 80117dc:	415b      	adcs	r3, r3
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80117e4:	4641      	mov	r1, r8
 80117e6:	1851      	adds	r1, r2, r1
 80117e8:	6039      	str	r1, [r7, #0]
 80117ea:	4649      	mov	r1, r9
 80117ec:	414b      	adcs	r3, r1
 80117ee:	607b      	str	r3, [r7, #4]
 80117f0:	f04f 0200 	mov.w	r2, #0
 80117f4:	f04f 0300 	mov.w	r3, #0
 80117f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80117fc:	4659      	mov	r1, fp
 80117fe:	00cb      	lsls	r3, r1, #3
 8011800:	4651      	mov	r1, sl
 8011802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011806:	4651      	mov	r1, sl
 8011808:	00ca      	lsls	r2, r1, #3
 801180a:	4610      	mov	r0, r2
 801180c:	4619      	mov	r1, r3
 801180e:	4603      	mov	r3, r0
 8011810:	4642      	mov	r2, r8
 8011812:	189b      	adds	r3, r3, r2
 8011814:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011816:	464b      	mov	r3, r9
 8011818:	460a      	mov	r2, r1
 801181a:	eb42 0303 	adc.w	r3, r2, r3
 801181e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	2200      	movs	r2, #0
 8011828:	663b      	str	r3, [r7, #96]	@ 0x60
 801182a:	667a      	str	r2, [r7, #100]	@ 0x64
 801182c:	f04f 0200 	mov.w	r2, #0
 8011830:	f04f 0300 	mov.w	r3, #0
 8011834:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011838:	4649      	mov	r1, r9
 801183a:	008b      	lsls	r3, r1, #2
 801183c:	4641      	mov	r1, r8
 801183e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011842:	4641      	mov	r1, r8
 8011844:	008a      	lsls	r2, r1, #2
 8011846:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801184a:	f7ef fa2d 	bl	8000ca8 <__aeabi_uldivmod>
 801184e:	4602      	mov	r2, r0
 8011850:	460b      	mov	r3, r1
 8011852:	4b0d      	ldr	r3, [pc, #52]	@ (8011888 <UART_SetConfig+0x4e4>)
 8011854:	fba3 1302 	umull	r1, r3, r3, r2
 8011858:	095b      	lsrs	r3, r3, #5
 801185a:	2164      	movs	r1, #100	@ 0x64
 801185c:	fb01 f303 	mul.w	r3, r1, r3
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	011b      	lsls	r3, r3, #4
 8011864:	3332      	adds	r3, #50	@ 0x32
 8011866:	4a08      	ldr	r2, [pc, #32]	@ (8011888 <UART_SetConfig+0x4e4>)
 8011868:	fba2 2303 	umull	r2, r3, r2, r3
 801186c:	095b      	lsrs	r3, r3, #5
 801186e:	f003 020f 	and.w	r2, r3, #15
 8011872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4422      	add	r2, r4
 801187a:	609a      	str	r2, [r3, #8]
}
 801187c:	bf00      	nop
 801187e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011882:	46bd      	mov	sp, r7
 8011884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011888:	51eb851f 	.word	0x51eb851f

0801188c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801188c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801188e:	2400      	movs	r4, #0
 8011890:	2310      	movs	r3, #16
 8011892:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011896:	6803      	ldr	r3, [r0, #0]
 8011898:	4615      	mov	r5, r2
 801189a:	699e      	ldr	r6, [r3, #24]
 801189c:	6812      	ldr	r2, [r2, #0]
 801189e:	466b      	mov	r3, sp
 80118a0:	e9cd 4400 	strd	r4, r4, [sp]
 80118a4:	47b0      	blx	r6
 80118a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80118aa:	f003 0306 	and.w	r3, r3, #6
 80118ae:	2b06      	cmp	r3, #6
 80118b0:	bf03      	ittte	eq
 80118b2:	9b00      	ldreq	r3, [sp, #0]
 80118b4:	602b      	streq	r3, [r5, #0]
 80118b6:	2001      	moveq	r0, #1
 80118b8:	4620      	movne	r0, r4
 80118ba:	b004      	add	sp, #16
 80118bc:	bd70      	pop	{r4, r5, r6, pc}

080118be <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80118be:	9800      	ldr	r0, [sp, #0]
 80118c0:	4290      	cmp	r0, r2
 80118c2:	bf0c      	ite	eq
 80118c4:	2006      	moveq	r0, #6
 80118c6:	2001      	movne	r0, #1
 80118c8:	4770      	bx	lr
	...

080118cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80118cc:	b510      	push	{r4, lr}
 80118ce:	4b03      	ldr	r3, [pc, #12]	@ (80118dc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80118d0:	6003      	str	r3, [r0, #0]
 80118d2:	4604      	mov	r4, r0
 80118d4:	f000 fc3d 	bl	8012152 <_ZNSt9type_infoD1Ev>
 80118d8:	4620      	mov	r0, r4
 80118da:	bd10      	pop	{r4, pc}
 80118dc:	080162ac 	.word	0x080162ac

080118e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80118e0:	b510      	push	{r4, lr}
 80118e2:	4604      	mov	r4, r0
 80118e4:	f7ff fff2 	bl	80118cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80118e8:	4620      	mov	r0, r4
 80118ea:	2108      	movs	r1, #8
 80118ec:	f000 f842 	bl	8011974 <_ZdlPvj>
 80118f0:	4620      	mov	r0, r4
 80118f2:	bd10      	pop	{r4, pc}

080118f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80118f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118f8:	461f      	mov	r7, r3
 80118fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80118fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011902:	4598      	cmp	r8, r3
 8011904:	4606      	mov	r6, r0
 8011906:	4615      	mov	r5, r2
 8011908:	d107      	bne.n	801191a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801190a:	9907      	ldr	r1, [sp, #28]
 801190c:	f000 fc24 	bl	8012158 <_ZNKSt9type_info7__equalERKS_>
 8011910:	b118      	cbz	r0, 801191a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8011912:	7165      	strb	r5, [r4, #5]
 8011914:	2000      	movs	r0, #0
 8011916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801191a:	4639      	mov	r1, r7
 801191c:	4630      	mov	r0, r6
 801191e:	f000 fc1b 	bl	8012158 <_ZNKSt9type_info7__equalERKS_>
 8011922:	2800      	cmp	r0, #0
 8011924:	d0f6      	beq.n	8011914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8011926:	2301      	movs	r3, #1
 8011928:	f8c4 8000 	str.w	r8, [r4]
 801192c:	7125      	strb	r5, [r4, #4]
 801192e:	71a3      	strb	r3, [r4, #6]
 8011930:	e7f0      	b.n	8011914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08011932 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8011932:	b538      	push	{r3, r4, r5, lr}
 8011934:	4615      	mov	r5, r2
 8011936:	461c      	mov	r4, r3
 8011938:	f000 fc0e 	bl	8012158 <_ZNKSt9type_info7__equalERKS_>
 801193c:	b120      	cbz	r0, 8011948 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801193e:	2308      	movs	r3, #8
 8011940:	60e3      	str	r3, [r4, #12]
 8011942:	2306      	movs	r3, #6
 8011944:	6025      	str	r5, [r4, #0]
 8011946:	7123      	strb	r3, [r4, #4]
 8011948:	bd38      	pop	{r3, r4, r5, pc}

0801194a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801194a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801194e:	4605      	mov	r5, r0
 8011950:	460c      	mov	r4, r1
 8011952:	4616      	mov	r6, r2
 8011954:	461f      	mov	r7, r3
 8011956:	f000 fbff 	bl	8012158 <_ZNKSt9type_info7__equalERKS_>
 801195a:	b948      	cbnz	r0, 8011970 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801195c:	2f03      	cmp	r7, #3
 801195e:	d807      	bhi.n	8011970 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8011960:	6823      	ldr	r3, [r4, #0]
 8011962:	4632      	mov	r2, r6
 8011964:	4629      	mov	r1, r5
 8011966:	4620      	mov	r0, r4
 8011968:	695b      	ldr	r3, [r3, #20]
 801196a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801196e:	4718      	bx	r3
 8011970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011974 <_ZdlPvj>:
 8011974:	f000 bc0b 	b.w	801218e <_ZdlPv>

08011978 <__cxa_end_cleanup>:
 8011978:	b41e      	push	{r1, r2, r3, r4}
 801197a:	f000 f89c 	bl	8011ab6 <__gnu_end_cleanup>
 801197e:	bc1e      	pop	{r1, r2, r3, r4}
 8011980:	f7f0 f890 	bl	8001aa4 <_Unwind_Resume>

08011984 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8011984:	7803      	ldrb	r3, [r0, #0]
 8011986:	2b47      	cmp	r3, #71	@ 0x47
 8011988:	d117      	bne.n	80119ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801198a:	7843      	ldrb	r3, [r0, #1]
 801198c:	2b4e      	cmp	r3, #78	@ 0x4e
 801198e:	d114      	bne.n	80119ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011990:	7883      	ldrb	r3, [r0, #2]
 8011992:	2b55      	cmp	r3, #85	@ 0x55
 8011994:	d111      	bne.n	80119ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011996:	78c3      	ldrb	r3, [r0, #3]
 8011998:	2b43      	cmp	r3, #67	@ 0x43
 801199a:	d10e      	bne.n	80119ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801199c:	7903      	ldrb	r3, [r0, #4]
 801199e:	2b43      	cmp	r3, #67	@ 0x43
 80119a0:	d10b      	bne.n	80119ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80119a2:	7943      	ldrb	r3, [r0, #5]
 80119a4:	2b2b      	cmp	r3, #43	@ 0x2b
 80119a6:	d108      	bne.n	80119ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80119a8:	7983      	ldrb	r3, [r0, #6]
 80119aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80119ac:	d105      	bne.n	80119ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80119ae:	79c0      	ldrb	r0, [r0, #7]
 80119b0:	2801      	cmp	r0, #1
 80119b2:	bf8c      	ite	hi
 80119b4:	2000      	movhi	r0, #0
 80119b6:	2001      	movls	r0, #1
 80119b8:	4770      	bx	lr
 80119ba:	2000      	movs	r0, #0
 80119bc:	4770      	bx	lr
	...

080119c0 <__cxa_type_match>:
 80119c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80119c4:	461d      	mov	r5, r3
 80119c6:	7803      	ldrb	r3, [r0, #0]
 80119c8:	2b47      	cmp	r3, #71	@ 0x47
 80119ca:	460e      	mov	r6, r1
 80119cc:	4602      	mov	r2, r0
 80119ce:	79c1      	ldrb	r1, [r0, #7]
 80119d0:	d113      	bne.n	80119fa <__cxa_type_match+0x3a>
 80119d2:	7843      	ldrb	r3, [r0, #1]
 80119d4:	2b4e      	cmp	r3, #78	@ 0x4e
 80119d6:	d110      	bne.n	80119fa <__cxa_type_match+0x3a>
 80119d8:	7883      	ldrb	r3, [r0, #2]
 80119da:	2b55      	cmp	r3, #85	@ 0x55
 80119dc:	d10d      	bne.n	80119fa <__cxa_type_match+0x3a>
 80119de:	78c3      	ldrb	r3, [r0, #3]
 80119e0:	2b43      	cmp	r3, #67	@ 0x43
 80119e2:	d10a      	bne.n	80119fa <__cxa_type_match+0x3a>
 80119e4:	7903      	ldrb	r3, [r0, #4]
 80119e6:	2b46      	cmp	r3, #70	@ 0x46
 80119e8:	d107      	bne.n	80119fa <__cxa_type_match+0x3a>
 80119ea:	7943      	ldrb	r3, [r0, #5]
 80119ec:	2b4f      	cmp	r3, #79	@ 0x4f
 80119ee:	d104      	bne.n	80119fa <__cxa_type_match+0x3a>
 80119f0:	7983      	ldrb	r3, [r0, #6]
 80119f2:	2b52      	cmp	r3, #82	@ 0x52
 80119f4:	d101      	bne.n	80119fa <__cxa_type_match+0x3a>
 80119f6:	2900      	cmp	r1, #0
 80119f8:	d031      	beq.n	8011a5e <__cxa_type_match+0x9e>
 80119fa:	4610      	mov	r0, r2
 80119fc:	f7ff ffc2 	bl	8011984 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011a00:	f080 0401 	eor.w	r4, r0, #1
 8011a04:	b2e4      	uxtb	r4, r4
 8011a06:	2300      	movs	r3, #0
 8011a08:	2000      	movs	r0, #0
 8011a0a:	9001      	str	r0, [sp, #4]
 8011a0c:	bb53      	cbnz	r3, 8011a64 <__cxa_type_match+0xa4>
 8011a0e:	bb5c      	cbnz	r4, 8011a68 <__cxa_type_match+0xa8>
 8011a10:	2901      	cmp	r1, #1
 8011a12:	bf0a      	itet	eq
 8011a14:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8011a18:	f1a2 0320 	subne.w	r3, r2, #32
 8011a1c:	3b78      	subeq	r3, #120	@ 0x78
 8011a1e:	2901      	cmp	r1, #1
 8011a20:	bf08      	it	eq
 8011a22:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8011a26:	681c      	ldr	r4, [r3, #0]
 8011a28:	bf18      	it	ne
 8011a2a:	3258      	addne	r2, #88	@ 0x58
 8011a2c:	9201      	str	r2, [sp, #4]
 8011a2e:	6823      	ldr	r3, [r4, #0]
 8011a30:	4620      	mov	r0, r4
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	4798      	blx	r3
 8011a36:	b1c8      	cbz	r0, 8011a6c <__cxa_type_match+0xac>
 8011a38:	9b01      	ldr	r3, [sp, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	9301      	str	r3, [sp, #4]
 8011a3e:	2702      	movs	r7, #2
 8011a40:	6833      	ldr	r3, [r6, #0]
 8011a42:	aa01      	add	r2, sp, #4
 8011a44:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8011a48:	4621      	mov	r1, r4
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	4630      	mov	r0, r6
 8011a4e:	47c0      	blx	r8
 8011a50:	b170      	cbz	r0, 8011a70 <__cxa_type_match+0xb0>
 8011a52:	9b01      	ldr	r3, [sp, #4]
 8011a54:	602b      	str	r3, [r5, #0]
 8011a56:	4638      	mov	r0, r7
 8011a58:	b002      	add	sp, #8
 8011a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a5e:	2301      	movs	r3, #1
 8011a60:	460c      	mov	r4, r1
 8011a62:	e7d1      	b.n	8011a08 <__cxa_type_match+0x48>
 8011a64:	4c03      	ldr	r4, [pc, #12]	@ (8011a74 <__cxa_type_match+0xb4>)
 8011a66:	e7e2      	b.n	8011a2e <__cxa_type_match+0x6e>
 8011a68:	4c03      	ldr	r4, [pc, #12]	@ (8011a78 <__cxa_type_match+0xb8>)
 8011a6a:	e7e0      	b.n	8011a2e <__cxa_type_match+0x6e>
 8011a6c:	2701      	movs	r7, #1
 8011a6e:	e7e7      	b.n	8011a40 <__cxa_type_match+0x80>
 8011a70:	4607      	mov	r7, r0
 8011a72:	e7f0      	b.n	8011a56 <__cxa_type_match+0x96>
 8011a74:	080162f0 	.word	0x080162f0
 8011a78:	0801631c 	.word	0x0801631c

08011a7c <__cxa_begin_cleanup>:
 8011a7c:	b510      	push	{r4, lr}
 8011a7e:	4604      	mov	r4, r0
 8011a80:	f000 f834 	bl	8011aec <__cxa_get_globals>
 8011a84:	4602      	mov	r2, r0
 8011a86:	4620      	mov	r0, r4
 8011a88:	f1a4 0120 	sub.w	r1, r4, #32
 8011a8c:	f7ff ff7a 	bl	8011984 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011a90:	b160      	cbz	r0, 8011aac <__cxa_begin_cleanup+0x30>
 8011a92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011a96:	3301      	adds	r3, #1
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a9e:	d103      	bne.n	8011aa8 <__cxa_begin_cleanup+0x2c>
 8011aa0:	6893      	ldr	r3, [r2, #8]
 8011aa2:	f844 3c08 	str.w	r3, [r4, #-8]
 8011aa6:	6091      	str	r1, [r2, #8]
 8011aa8:	2001      	movs	r0, #1
 8011aaa:	bd10      	pop	{r4, pc}
 8011aac:	6893      	ldr	r3, [r2, #8]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d0f9      	beq.n	8011aa6 <__cxa_begin_cleanup+0x2a>
 8011ab2:	f000 faa3 	bl	8011ffc <_ZSt9terminatev>

08011ab6 <__gnu_end_cleanup>:
 8011ab6:	b510      	push	{r4, lr}
 8011ab8:	f000 f818 	bl	8011aec <__cxa_get_globals>
 8011abc:	6882      	ldr	r2, [r0, #8]
 8011abe:	4601      	mov	r1, r0
 8011ac0:	b90a      	cbnz	r2, 8011ac6 <__gnu_end_cleanup+0x10>
 8011ac2:	f000 fa9b 	bl	8011ffc <_ZSt9terminatev>
 8011ac6:	f102 0420 	add.w	r4, r2, #32
 8011aca:	4620      	mov	r0, r4
 8011acc:	f7ff ff5a 	bl	8011984 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011ad0:	b140      	cbz	r0, 8011ae4 <__gnu_end_cleanup+0x2e>
 8011ad2:	69d3      	ldr	r3, [r2, #28]
 8011ad4:	3b01      	subs	r3, #1
 8011ad6:	61d3      	str	r3, [r2, #28]
 8011ad8:	b913      	cbnz	r3, 8011ae0 <__gnu_end_cleanup+0x2a>
 8011ada:	6990      	ldr	r0, [r2, #24]
 8011adc:	6088      	str	r0, [r1, #8]
 8011ade:	6193      	str	r3, [r2, #24]
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	bd10      	pop	{r4, pc}
 8011ae4:	6088      	str	r0, [r1, #8]
 8011ae6:	e7fb      	b.n	8011ae0 <__gnu_end_cleanup+0x2a>

08011ae8 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8011ae8:	4770      	bx	lr
	...

08011aec <__cxa_get_globals>:
 8011aec:	4800      	ldr	r0, [pc, #0]	@ (8011af0 <__cxa_get_globals+0x4>)
 8011aee:	4770      	bx	lr
 8011af0:	20000574 	.word	0x20000574

08011af4 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8011af4:	4a02      	ldr	r2, [pc, #8]	@ (8011b00 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8011af6:	4903      	ldr	r1, [pc, #12]	@ (8011b04 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8011af8:	4803      	ldr	r0, [pc, #12]	@ (8011b08 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 8011afa:	f000 bb43 	b.w	8012184 <__aeabi_atexit>
 8011afe:	bf00      	nop
 8011b00:	20000000 	.word	0x20000000
 8011b04:	08011ae9 	.word	0x08011ae9
 8011b08:	20000574 	.word	0x20000574

08011b0c <_ZL12read_uleb128PKhPm>:
 8011b0c:	b530      	push	{r4, r5, lr}
 8011b0e:	2300      	movs	r3, #0
 8011b10:	461a      	mov	r2, r3
 8011b12:	f810 5b01 	ldrb.w	r5, [r0], #1
 8011b16:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 8011b1a:	4094      	lsls	r4, r2
 8011b1c:	4323      	orrs	r3, r4
 8011b1e:	062c      	lsls	r4, r5, #24
 8011b20:	f102 0207 	add.w	r2, r2, #7
 8011b24:	d4f5      	bmi.n	8011b12 <_ZL12read_uleb128PKhPm+0x6>
 8011b26:	600b      	str	r3, [r1, #0]
 8011b28:	bd30      	pop	{r4, r5, pc}

08011b2a <_ZL12read_sleb128PKhPl>:
 8011b2a:	b530      	push	{r4, r5, lr}
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	461a      	mov	r2, r3
 8011b30:	f810 4b01 	ldrb.w	r4, [r0], #1
 8011b34:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 8011b38:	4095      	lsls	r5, r2
 8011b3a:	432b      	orrs	r3, r5
 8011b3c:	0625      	lsls	r5, r4, #24
 8011b3e:	f102 0207 	add.w	r2, r2, #7
 8011b42:	d4f5      	bmi.n	8011b30 <_ZL12read_sleb128PKhPl+0x6>
 8011b44:	2a1f      	cmp	r2, #31
 8011b46:	d806      	bhi.n	8011b56 <_ZL12read_sleb128PKhPl+0x2c>
 8011b48:	0664      	lsls	r4, r4, #25
 8011b4a:	bf42      	ittt	mi
 8011b4c:	f04f 34ff 	movmi.w	r4, #4294967295
 8011b50:	fa04 f202 	lslmi.w	r2, r4, r2
 8011b54:	4313      	orrmi	r3, r2
 8011b56:	600b      	str	r3, [r1, #0]
 8011b58:	bd30      	pop	{r4, r5, pc}

08011b5a <_ZL28read_encoded_value_with_basehjPKhPj>:
 8011b5a:	2850      	cmp	r0, #80	@ 0x50
 8011b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011b60:	4606      	mov	r6, r0
 8011b62:	4688      	mov	r8, r1
 8011b64:	4615      	mov	r5, r2
 8011b66:	461f      	mov	r7, r3
 8011b68:	d108      	bne.n	8011b7c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8011b6a:	1cd0      	adds	r0, r2, #3
 8011b6c:	f020 0003 	bic.w	r0, r0, #3
 8011b70:	f850 4b04 	ldr.w	r4, [r0], #4
 8011b74:	603c      	str	r4, [r7, #0]
 8011b76:	b002      	add	sp, #8
 8011b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b7c:	f000 030f 	and.w	r3, r0, #15
 8011b80:	2b0c      	cmp	r3, #12
 8011b82:	d82e      	bhi.n	8011be2 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8011b84:	e8df f003 	tbb	[pc, r3]
 8011b88:	251d0725 	.word	0x251d0725
 8011b8c:	2d2d2d29 	.word	0x2d2d2d29
 8011b90:	2521182d 	.word	0x2521182d
 8011b94:	29          	.byte	0x29
 8011b95:	00          	.byte	0x00
 8011b96:	a901      	add	r1, sp, #4
 8011b98:	4628      	mov	r0, r5
 8011b9a:	f7ff ffb7 	bl	8011b0c <_ZL12read_uleb128PKhPm>
 8011b9e:	9c01      	ldr	r4, [sp, #4]
 8011ba0:	2c00      	cmp	r4, #0
 8011ba2:	d0e7      	beq.n	8011b74 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8011ba4:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 8011ba8:	2b10      	cmp	r3, #16
 8011baa:	bf08      	it	eq
 8011bac:	46a8      	moveq	r8, r5
 8011bae:	4444      	add	r4, r8
 8011bb0:	0633      	lsls	r3, r6, #24
 8011bb2:	bf48      	it	mi
 8011bb4:	6824      	ldrmi	r4, [r4, #0]
 8011bb6:	e7dd      	b.n	8011b74 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8011bb8:	a901      	add	r1, sp, #4
 8011bba:	4628      	mov	r0, r5
 8011bbc:	f7ff ffb5 	bl	8011b2a <_ZL12read_sleb128PKhPl>
 8011bc0:	e7ed      	b.n	8011b9e <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	f830 4b02 	ldrh.w	r4, [r0], #2
 8011bc8:	e7ea      	b.n	8011ba0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8011bca:	4628      	mov	r0, r5
 8011bcc:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8011bd0:	e7e6      	b.n	8011ba0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	f850 4b04 	ldr.w	r4, [r0], #4
 8011bd8:	e7e2      	b.n	8011ba0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8011bda:	4628      	mov	r0, r5
 8011bdc:	f850 4b08 	ldr.w	r4, [r0], #8
 8011be0:	e7de      	b.n	8011ba0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8011be2:	f000 fc6b 	bl	80124bc <abort>

08011be6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8011be6:	b508      	push	{r3, lr}
 8011be8:	4603      	mov	r3, r0
 8011bea:	2bff      	cmp	r3, #255	@ 0xff
 8011bec:	4608      	mov	r0, r1
 8011bee:	d00d      	beq.n	8011c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8011bf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011bf4:	2b30      	cmp	r3, #48	@ 0x30
 8011bf6:	d00f      	beq.n	8011c18 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8011bf8:	d804      	bhi.n	8011c04 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8011bfa:	2b20      	cmp	r3, #32
 8011bfc:	d008      	beq.n	8011c10 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8011bfe:	d905      	bls.n	8011c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8011c00:	f000 fc5c 	bl	80124bc <abort>
 8011c04:	2b40      	cmp	r3, #64	@ 0x40
 8011c06:	d00b      	beq.n	8011c20 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8011c08:	2b50      	cmp	r3, #80	@ 0x50
 8011c0a:	d1f9      	bne.n	8011c00 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	bd08      	pop	{r3, pc}
 8011c10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011c14:	f003 b8ed 	b.w	8014df2 <_Unwind_GetTextRelBase>
 8011c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011c1c:	f003 b8e6 	b.w	8014dec <_Unwind_GetDataRelBase>
 8011c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011c24:	f7f0 b932 	b.w	8001e8c <_Unwind_GetRegionStart>

08011c28 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8011c28:	b570      	push	{r4, r5, r6, lr}
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	4601      	mov	r1, r0
 8011c2e:	4620      	mov	r0, r4
 8011c30:	4615      	mov	r5, r2
 8011c32:	461e      	mov	r6, r3
 8011c34:	f7ff ffd7 	bl	8011be6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011c38:	4633      	mov	r3, r6
 8011c3a:	4601      	mov	r1, r0
 8011c3c:	462a      	mov	r2, r5
 8011c3e:	4620      	mov	r0, r4
 8011c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c44:	f7ff bf89 	b.w	8011b5a <_ZL28read_encoded_value_with_basehjPKhPj>

08011c48 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8011c48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	4615      	mov	r5, r2
 8011c4e:	4606      	mov	r6, r0
 8011c50:	b108      	cbz	r0, 8011c56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8011c52:	f7f0 f91b 	bl	8001e8c <_Unwind_GetRegionStart>
 8011c56:	4622      	mov	r2, r4
 8011c58:	6028      	str	r0, [r5, #0]
 8011c5a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011c5e:	29ff      	cmp	r1, #255	@ 0xff
 8011c60:	d01c      	beq.n	8011c9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8011c62:	1d2b      	adds	r3, r5, #4
 8011c64:	4630      	mov	r0, r6
 8011c66:	f7ff ffdf 	bl	8011c28 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011c72:	2bff      	cmp	r3, #255	@ 0xff
 8011c74:	d014      	beq.n	8011ca0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8011c76:	2310      	movs	r3, #16
 8011c78:	752b      	strb	r3, [r5, #20]
 8011c7a:	a901      	add	r1, sp, #4
 8011c7c:	f7ff ff46 	bl	8011b0c <_ZL12read_uleb128PKhPm>
 8011c80:	9b01      	ldr	r3, [sp, #4]
 8011c82:	4403      	add	r3, r0
 8011c84:	60eb      	str	r3, [r5, #12]
 8011c86:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011c8a:	756b      	strb	r3, [r5, #21]
 8011c8c:	a901      	add	r1, sp, #4
 8011c8e:	f7ff ff3d 	bl	8011b0c <_ZL12read_uleb128PKhPm>
 8011c92:	9b01      	ldr	r3, [sp, #4]
 8011c94:	4403      	add	r3, r0
 8011c96:	612b      	str	r3, [r5, #16]
 8011c98:	b002      	add	sp, #8
 8011c9a:	bd70      	pop	{r4, r5, r6, pc}
 8011c9c:	6068      	str	r0, [r5, #4]
 8011c9e:	e7e5      	b.n	8011c6c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8011ca0:	752b      	strb	r3, [r5, #20]
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	e7ee      	b.n	8011c84 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

08011ca6 <_Unwind_GetGR>:
 8011ca6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ca8:	ab03      	add	r3, sp, #12
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	2300      	movs	r3, #0
 8011cae:	460a      	mov	r2, r1
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	f7ef fb37 	bl	8001324 <_Unwind_VRS_Get>
 8011cb6:	9803      	ldr	r0, [sp, #12]
 8011cb8:	b005      	add	sp, #20
 8011cba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011cc0 <__gxx_personality_v0>:
 8011cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc4:	b093      	sub	sp, #76	@ 0x4c
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	9307      	str	r3, [sp, #28]
 8011cca:	f000 0303 	and.w	r3, r0, #3
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	4605      	mov	r5, r0
 8011cd2:	460c      	mov	r4, r1
 8011cd4:	4616      	mov	r6, r2
 8011cd6:	d010      	beq.n	8011cfa <__gxx_personality_v0+0x3a>
 8011cd8:	2b02      	cmp	r3, #2
 8011cda:	d003      	beq.n	8011ce4 <__gxx_personality_v0+0x24>
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d13b      	bne.n	8011d58 <__gxx_personality_v0+0x98>
 8011ce0:	0701      	lsls	r1, r0, #28
 8011ce2:	d53b      	bpl.n	8011d5c <__gxx_personality_v0+0x9c>
 8011ce4:	4631      	mov	r1, r6
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f7f0 f8ba 	bl	8001e60 <__gnu_unwind_frame>
 8011cec:	b118      	cbz	r0, 8011cf6 <__gxx_personality_v0+0x36>
 8011cee:	2009      	movs	r0, #9
 8011cf0:	b013      	add	sp, #76	@ 0x4c
 8011cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf6:	2008      	movs	r0, #8
 8011cf8:	e7fa      	b.n	8011cf0 <__gxx_personality_v0+0x30>
 8011cfa:	0702      	lsls	r2, r0, #28
 8011cfc:	d523      	bpl.n	8011d46 <__gxx_personality_v0+0x86>
 8011cfe:	2302      	movs	r3, #2
 8011d00:	f005 0508 	and.w	r5, r5, #8
 8011d04:	431d      	orrs	r5, r3
 8011d06:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d08:	9300      	str	r3, [sp, #0]
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	220c      	movs	r2, #12
 8011d0e:	4619      	mov	r1, r3
 8011d10:	4630      	mov	r0, r6
 8011d12:	940c      	str	r4, [sp, #48]	@ 0x30
 8011d14:	f7ef fb2c 	bl	8001370 <_Unwind_VRS_Set>
 8011d18:	2d06      	cmp	r5, #6
 8011d1a:	d121      	bne.n	8011d60 <__gxx_personality_v0+0xa0>
 8011d1c:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 8011d20:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 8011d24:	f1b8 0f00 	cmp.w	r8, #0
 8011d28:	bf0c      	ite	eq
 8011d2a:	f04f 0a01 	moveq.w	sl, #1
 8011d2e:	f04f 0a03 	movne.w	sl, #3
 8011d32:	f015 0508 	ands.w	r5, r5, #8
 8011d36:	f000 8103 	beq.w	8011f40 <__gxx_personality_v0+0x280>
 8011d3a:	f1ba 0f01 	cmp.w	sl, #1
 8011d3e:	f040 80fb 	bne.w	8011f38 <__gxx_personality_v0+0x278>
 8011d42:	f000 f95b 	bl	8011ffc <_ZSt9terminatev>
 8011d46:	6a0f      	ldr	r7, [r1, #32]
 8011d48:	4630      	mov	r0, r6
 8011d4a:	210d      	movs	r1, #13
 8011d4c:	f7ff ffab 	bl	8011ca6 <_Unwind_GetGR>
 8011d50:	4287      	cmp	r7, r0
 8011d52:	d1d4      	bne.n	8011cfe <__gxx_personality_v0+0x3e>
 8011d54:	2306      	movs	r3, #6
 8011d56:	e7d3      	b.n	8011d00 <__gxx_personality_v0+0x40>
 8011d58:	f000 fbb0 	bl	80124bc <abort>
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	e7cf      	b.n	8011d00 <__gxx_personality_v0+0x40>
 8011d60:	4630      	mov	r0, r6
 8011d62:	f7f0 f899 	bl	8001e98 <_Unwind_GetLanguageSpecificData>
 8011d66:	4681      	mov	r9, r0
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d0bb      	beq.n	8011ce4 <__gxx_personality_v0+0x24>
 8011d6c:	aa0c      	add	r2, sp, #48	@ 0x30
 8011d6e:	4601      	mov	r1, r0
 8011d70:	4630      	mov	r0, r6
 8011d72:	f7ff ff69 	bl	8011c48 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8011d76:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 8011d7a:	9003      	str	r0, [sp, #12]
 8011d7c:	4631      	mov	r1, r6
 8011d7e:	4658      	mov	r0, fp
 8011d80:	f7ff ff31 	bl	8011be6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011d84:	210f      	movs	r1, #15
 8011d86:	9002      	str	r0, [sp, #8]
 8011d88:	900e      	str	r0, [sp, #56]	@ 0x38
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	f7ff ff8b 	bl	8011ca6 <_Unwind_GetGR>
 8011d90:	9a03      	ldr	r2, [sp, #12]
 8011d92:	f020 0801 	bic.w	r8, r0, #1
 8011d96:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d9a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8011d9c:	4297      	cmp	r7, r2
 8011d9e:	d815      	bhi.n	8011dcc <__gxx_personality_v0+0x10c>
 8011da0:	2700      	movs	r7, #0
 8011da2:	46b8      	mov	r8, r7
 8011da4:	f04f 0a01 	mov.w	sl, #1
 8011da8:	07eb      	lsls	r3, r5, #31
 8011daa:	d5c2      	bpl.n	8011d32 <__gxx_personality_v0+0x72>
 8011dac:	f1ba 0f02 	cmp.w	sl, #2
 8011db0:	d098      	beq.n	8011ce4 <__gxx_personality_v0+0x24>
 8011db2:	210d      	movs	r1, #13
 8011db4:	4630      	mov	r0, r6
 8011db6:	9d07      	ldr	r5, [sp, #28]
 8011db8:	f7ff ff75 	bl	8011ca6 <_Unwind_GetGR>
 8011dbc:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 8011dc0:	e9c4 0508 	strd	r0, r5, [r4, #32]
 8011dc4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8011dc8:	2006      	movs	r0, #6
 8011dca:	e791      	b.n	8011cf0 <__gxx_personality_v0+0x30>
 8011dcc:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 8011dd0:	ab08      	add	r3, sp, #32
 8011dd2:	4651      	mov	r1, sl
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	f7ff ff27 	bl	8011c28 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011dda:	ab09      	add	r3, sp, #36	@ 0x24
 8011ddc:	4602      	mov	r2, r0
 8011dde:	4651      	mov	r1, sl
 8011de0:	2000      	movs	r0, #0
 8011de2:	f7ff ff21 	bl	8011c28 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011de6:	ab0a      	add	r3, sp, #40	@ 0x28
 8011de8:	4602      	mov	r2, r0
 8011dea:	4651      	mov	r1, sl
 8011dec:	2000      	movs	r0, #0
 8011dee:	f7ff ff1b 	bl	8011c28 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011df2:	a90b      	add	r1, sp, #44	@ 0x2c
 8011df4:	f7ff fe8a 	bl	8011b0c <_ZL12read_uleb128PKhPm>
 8011df8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011dfa:	9908      	ldr	r1, [sp, #32]
 8011dfc:	440b      	add	r3, r1
 8011dfe:	4543      	cmp	r3, r8
 8011e00:	4602      	mov	r2, r0
 8011e02:	d84b      	bhi.n	8011e9c <__gxx_personality_v0+0x1dc>
 8011e04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011e06:	440b      	add	r3, r1
 8011e08:	4543      	cmp	r3, r8
 8011e0a:	d9c6      	bls.n	8011d9a <__gxx_personality_v0+0xda>
 8011e0c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8011e10:	f1b8 0f00 	cmp.w	r8, #0
 8011e14:	d001      	beq.n	8011e1a <__gxx_personality_v0+0x15a>
 8011e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e18:	4498      	add	r8, r3
 8011e1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011e1c:	b108      	cbz	r0, 8011e22 <__gxx_personality_v0+0x162>
 8011e1e:	3801      	subs	r0, #1
 8011e20:	4438      	add	r0, r7
 8011e22:	f1b8 0f00 	cmp.w	r8, #0
 8011e26:	f43f af5d 	beq.w	8011ce4 <__gxx_personality_v0+0x24>
 8011e2a:	2800      	cmp	r0, #0
 8011e2c:	f000 80d6 	beq.w	8011fdc <__gxx_personality_v0+0x31c>
 8011e30:	f015 0308 	ands.w	r3, r5, #8
 8011e34:	9304      	str	r3, [sp, #16]
 8011e36:	d033      	beq.n	8011ea0 <__gxx_personality_v0+0x1e0>
 8011e38:	2347      	movs	r3, #71	@ 0x47
 8011e3a:	7023      	strb	r3, [r4, #0]
 8011e3c:	234e      	movs	r3, #78	@ 0x4e
 8011e3e:	7063      	strb	r3, [r4, #1]
 8011e40:	2355      	movs	r3, #85	@ 0x55
 8011e42:	70a3      	strb	r3, [r4, #2]
 8011e44:	2343      	movs	r3, #67	@ 0x43
 8011e46:	70e3      	strb	r3, [r4, #3]
 8011e48:	2346      	movs	r3, #70	@ 0x46
 8011e4a:	7123      	strb	r3, [r4, #4]
 8011e4c:	234f      	movs	r3, #79	@ 0x4f
 8011e4e:	7163      	strb	r3, [r4, #5]
 8011e50:	2352      	movs	r3, #82	@ 0x52
 8011e52:	71a3      	strb	r3, [r4, #6]
 8011e54:	2300      	movs	r3, #0
 8011e56:	71e3      	strb	r3, [r4, #7]
 8011e58:	2300      	movs	r3, #0
 8011e5a:	9303      	str	r3, [sp, #12]
 8011e5c:	a909      	add	r1, sp, #36	@ 0x24
 8011e5e:	f7ff fe64 	bl	8011b2a <_ZL12read_sleb128PKhPl>
 8011e62:	a90a      	add	r1, sp, #40	@ 0x28
 8011e64:	9005      	str	r0, [sp, #20]
 8011e66:	f7ff fe60 	bl	8011b2a <_ZL12read_sleb128PKhPl>
 8011e6a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8011e6c:	2f00      	cmp	r7, #0
 8011e6e:	d060      	beq.n	8011f32 <__gxx_personality_v0+0x272>
 8011e70:	dd3a      	ble.n	8011ee8 <__gxx_personality_v0+0x228>
 8011e72:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8011e76:	d033      	beq.n	8011ee0 <__gxx_personality_v0+0x220>
 8011e78:	f00b 0307 	and.w	r3, fp, #7
 8011e7c:	2b04      	cmp	r3, #4
 8011e7e:	f63f af6b 	bhi.w	8011d58 <__gxx_personality_v0+0x98>
 8011e82:	a201      	add	r2, pc, #4	@ (adr r2, 8011e88 <__gxx_personality_v0+0x1c8>)
 8011e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e88:	08011ee5 	.word	0x08011ee5
 8011e8c:	08011d59 	.word	0x08011d59
 8011e90:	08011eb3 	.word	0x08011eb3
 8011e94:	08011ee5 	.word	0x08011ee5
 8011e98:	08011edd 	.word	0x08011edd
 8011e9c:	463a      	mov	r2, r7
 8011e9e:	e77c      	b.n	8011d9a <__gxx_personality_v0+0xda>
 8011ea0:	79e3      	ldrb	r3, [r4, #7]
 8011ea2:	2b01      	cmp	r3, #1
 8011ea4:	bf0c      	ite	eq
 8011ea6:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8011eaa:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 8011eae:	9307      	str	r3, [sp, #28]
 8011eb0:	e7d2      	b.n	8011e58 <__gxx_personality_v0+0x198>
 8011eb2:	2202      	movs	r2, #2
 8011eb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011eb6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011eb8:	fb07 1212 	mls	r2, r7, r2, r1
 8011ebc:	4658      	mov	r0, fp
 8011ebe:	9902      	ldr	r1, [sp, #8]
 8011ec0:	f7ff fe4b 	bl	8011b5a <_ZL28read_encoded_value_with_basehjPKhPj>
 8011ec4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011ec6:	b131      	cbz	r1, 8011ed6 <__gxx_personality_v0+0x216>
 8011ec8:	b33c      	cbz	r4, 8011f1a <__gxx_personality_v0+0x25a>
 8011eca:	ab07      	add	r3, sp, #28
 8011ecc:	2200      	movs	r2, #0
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f7ff fd76 	bl	80119c0 <__cxa_type_match>
 8011ed4:	b308      	cbz	r0, 8011f1a <__gxx_personality_v0+0x25a>
 8011ed6:	f04f 0a03 	mov.w	sl, #3
 8011eda:	e765      	b.n	8011da8 <__gxx_personality_v0+0xe8>
 8011edc:	2208      	movs	r2, #8
 8011ede:	e7e9      	b.n	8011eb4 <__gxx_personality_v0+0x1f4>
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	e7e7      	b.n	8011eb4 <__gxx_personality_v0+0x1f4>
 8011ee4:	2204      	movs	r2, #4
 8011ee6:	e7e5      	b.n	8011eb4 <__gxx_personality_v0+0x1f4>
 8011ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eea:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8011eee:	1bd2      	subs	r2, r2, r7
 8011ef0:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8011ef4:	b1c4      	cbz	r4, 8011f28 <__gxx_personality_v0+0x268>
 8011ef6:	9904      	ldr	r1, [sp, #16]
 8011ef8:	b9b1      	cbnz	r1, 8011f28 <__gxx_personality_v0+0x268>
 8011efa:	9b07      	ldr	r3, [sp, #28]
 8011efc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011efe:	f1aa 0a04 	sub.w	sl, sl, #4
 8011f02:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8011f06:	2900      	cmp	r1, #0
 8011f08:	d0e5      	beq.n	8011ed6 <__gxx_personality_v0+0x216>
 8011f0a:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	4451      	add	r1, sl
 8011f10:	4620      	mov	r0, r4
 8011f12:	f7ff fd55 	bl	80119c0 <__cxa_type_match>
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d0f3      	beq.n	8011f02 <__gxx_personality_v0+0x242>
 8011f1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d059      	beq.n	8011fd4 <__gxx_personality_v0+0x314>
 8011f20:	9b05      	ldr	r3, [sp, #20]
 8011f22:	4403      	add	r3, r0
 8011f24:	4618      	mov	r0, r3
 8011f26:	e799      	b.n	8011e5c <__gxx_personality_v0+0x19c>
 8011f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d1f4      	bne.n	8011f1a <__gxx_personality_v0+0x25a>
 8011f30:	e7d1      	b.n	8011ed6 <__gxx_personality_v0+0x216>
 8011f32:	2301      	movs	r3, #1
 8011f34:	9303      	str	r3, [sp, #12]
 8011f36:	e7f0      	b.n	8011f1a <__gxx_personality_v0+0x25a>
 8011f38:	2f00      	cmp	r7, #0
 8011f3a:	da1f      	bge.n	8011f7c <__gxx_personality_v0+0x2bc>
 8011f3c:	f000 f870 	bl	8012020 <_ZSt10unexpectedv>
 8011f40:	f1ba 0f01 	cmp.w	sl, #1
 8011f44:	d102      	bne.n	8011f4c <__gxx_personality_v0+0x28c>
 8011f46:	4620      	mov	r0, r4
 8011f48:	f000 f940 	bl	80121cc <__cxa_call_terminate>
 8011f4c:	2f00      	cmp	r7, #0
 8011f4e:	da15      	bge.n	8011f7c <__gxx_personality_v0+0x2bc>
 8011f50:	aa0c      	add	r2, sp, #48	@ 0x30
 8011f52:	4649      	mov	r1, r9
 8011f54:	4630      	mov	r0, r6
 8011f56:	f7ff fe77 	bl	8011c48 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8011f5a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011f5e:	4631      	mov	r1, r6
 8011f60:	f7ff fe41 	bl	8011be6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f66:	43fa      	mvns	r2, r7
 8011f68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011f6c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8011f70:	bb52      	cbnz	r2, 8011fc8 <__gxx_personality_v0+0x308>
 8011f72:	2204      	movs	r2, #4
 8011f74:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 8011f78:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8011f80:	461a      	mov	r2, r3
 8011f82:	4619      	mov	r1, r3
 8011f84:	9500      	str	r5, [sp, #0]
 8011f86:	4630      	mov	r0, r6
 8011f88:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011f8a:	f7ef f9f1 	bl	8001370 <_Unwind_VRS_Set>
 8011f8e:	2300      	movs	r3, #0
 8011f90:	4619      	mov	r1, r3
 8011f92:	2201      	movs	r2, #1
 8011f94:	9500      	str	r5, [sp, #0]
 8011f96:	4630      	mov	r0, r6
 8011f98:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011f9a:	f7ef f9e9 	bl	8001370 <_Unwind_VRS_Set>
 8011f9e:	210f      	movs	r1, #15
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	f7ff fe80 	bl	8011ca6 <_Unwind_GetGR>
 8011fa6:	f000 0001 	and.w	r0, r0, #1
 8011faa:	ea40 0008 	orr.w	r0, r0, r8
 8011fae:	2300      	movs	r3, #0
 8011fb0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011fb2:	9500      	str	r5, [sp, #0]
 8011fb4:	220f      	movs	r2, #15
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f7ef f9d9 	bl	8001370 <_Unwind_VRS_Set>
 8011fbe:	f1ba 0f02 	cmp.w	sl, #2
 8011fc2:	d003      	beq.n	8011fcc <__gxx_personality_v0+0x30c>
 8011fc4:	2007      	movs	r0, #7
 8011fc6:	e693      	b.n	8011cf0 <__gxx_personality_v0+0x30>
 8011fc8:	3501      	adds	r5, #1
 8011fca:	e7cf      	b.n	8011f6c <__gxx_personality_v0+0x2ac>
 8011fcc:	4620      	mov	r0, r4
 8011fce:	f7ff fd55 	bl	8011a7c <__cxa_begin_cleanup>
 8011fd2:	e7f7      	b.n	8011fc4 <__gxx_personality_v0+0x304>
 8011fd4:	9b03      	ldr	r3, [sp, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	f43f ae84 	beq.w	8011ce4 <__gxx_personality_v0+0x24>
 8011fdc:	2700      	movs	r7, #0
 8011fde:	f04f 0a02 	mov.w	sl, #2
 8011fe2:	e6e1      	b.n	8011da8 <__gxx_personality_v0+0xe8>

08011fe4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011fe4:	b508      	push	{r3, lr}
 8011fe6:	4780      	blx	r0
 8011fe8:	f000 fa68 	bl	80124bc <abort>

08011fec <_ZSt13get_terminatev>:
 8011fec:	4b02      	ldr	r3, [pc, #8]	@ (8011ff8 <_ZSt13get_terminatev+0xc>)
 8011fee:	6818      	ldr	r0, [r3, #0]
 8011ff0:	f3bf 8f5b 	dmb	ish
 8011ff4:	4770      	bx	lr
 8011ff6:	bf00      	nop
 8011ff8:	20000014 	.word	0x20000014

08011ffc <_ZSt9terminatev>:
 8011ffc:	b508      	push	{r3, lr}
 8011ffe:	f7ff fff5 	bl	8011fec <_ZSt13get_terminatev>
 8012002:	f7ff ffef 	bl	8011fe4 <_ZN10__cxxabiv111__terminateEPFvvE>

08012006 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8012006:	b508      	push	{r3, lr}
 8012008:	4780      	blx	r0
 801200a:	f7ff fff7 	bl	8011ffc <_ZSt9terminatev>
	...

08012010 <_ZSt14get_unexpectedv>:
 8012010:	4b02      	ldr	r3, [pc, #8]	@ (801201c <_ZSt14get_unexpectedv+0xc>)
 8012012:	6818      	ldr	r0, [r3, #0]
 8012014:	f3bf 8f5b 	dmb	ish
 8012018:	4770      	bx	lr
 801201a:	bf00      	nop
 801201c:	20000010 	.word	0x20000010

08012020 <_ZSt10unexpectedv>:
 8012020:	b508      	push	{r3, lr}
 8012022:	f7ff fff5 	bl	8012010 <_ZSt14get_unexpectedv>
 8012026:	f7ff ffee 	bl	8012006 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0801202a <_Znwj>:
 801202a:	2801      	cmp	r0, #1
 801202c:	bf38      	it	cc
 801202e:	2001      	movcc	r0, #1
 8012030:	b510      	push	{r4, lr}
 8012032:	4604      	mov	r4, r0
 8012034:	4620      	mov	r0, r4
 8012036:	f000 fa49 	bl	80124cc <malloc>
 801203a:	b100      	cbz	r0, 801203e <_Znwj+0x14>
 801203c:	bd10      	pop	{r4, pc}
 801203e:	f000 f92f 	bl	80122a0 <_ZSt15get_new_handlerv>
 8012042:	b908      	cbnz	r0, 8012048 <_Znwj+0x1e>
 8012044:	f000 fa3a 	bl	80124bc <abort>
 8012048:	4780      	blx	r0
 801204a:	e7f3      	b.n	8012034 <_Znwj+0xa>

0801204c <_Znaj>:
 801204c:	f7ff bfed 	b.w	801202a <_Znwj>

08012050 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8012050:	b510      	push	{r4, lr}
 8012052:	4b03      	ldr	r3, [pc, #12]	@ (8012060 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8012054:	6003      	str	r3, [r0, #0]
 8012056:	4604      	mov	r4, r0
 8012058:	f7ff fc38 	bl	80118cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801205c:	4620      	mov	r0, r4
 801205e:	bd10      	pop	{r4, pc}
 8012060:	08016360 	.word	0x08016360

08012064 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8012064:	b510      	push	{r4, lr}
 8012066:	4604      	mov	r4, r0
 8012068:	f7ff fff2 	bl	8012050 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801206c:	4620      	mov	r0, r4
 801206e:	210c      	movs	r1, #12
 8012070:	f7ff fc80 	bl	8011974 <_ZdlPvj>
 8012074:	4620      	mov	r0, r4
 8012076:	bd10      	pop	{r4, pc}

08012078 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8012078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801207c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012080:	4590      	cmp	r8, r2
 8012082:	4606      	mov	r6, r0
 8012084:	460f      	mov	r7, r1
 8012086:	4615      	mov	r5, r2
 8012088:	461c      	mov	r4, r3
 801208a:	d00b      	beq.n	80120a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801208c:	68b0      	ldr	r0, [r6, #8]
 801208e:	6803      	ldr	r3, [r0, #0]
 8012090:	f8cd 8018 	str.w	r8, [sp, #24]
 8012094:	6a1e      	ldr	r6, [r3, #32]
 8012096:	462a      	mov	r2, r5
 8012098:	4623      	mov	r3, r4
 801209a:	4639      	mov	r1, r7
 801209c:	46b4      	mov	ip, r6
 801209e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120a2:	4760      	bx	ip
 80120a4:	4619      	mov	r1, r3
 80120a6:	f000 f857 	bl	8012158 <_ZNKSt9type_info7__equalERKS_>
 80120aa:	2800      	cmp	r0, #0
 80120ac:	d0ee      	beq.n	801208c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80120ae:	2006      	movs	r0, #6
 80120b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080120b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80120b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b8:	460d      	mov	r5, r1
 80120ba:	4619      	mov	r1, r3
 80120bc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 80120c0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 80120c4:	4681      	mov	r9, r0
 80120c6:	4617      	mov	r7, r2
 80120c8:	4698      	mov	r8, r3
 80120ca:	f000 f845 	bl	8012158 <_ZNKSt9type_info7__equalERKS_>
 80120ce:	b190      	cbz	r0, 80120f6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80120d0:	2d00      	cmp	r5, #0
 80120d2:	6034      	str	r4, [r6, #0]
 80120d4:	7137      	strb	r7, [r6, #4]
 80120d6:	db09      	blt.n	80120ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80120d8:	442c      	add	r4, r5
 80120da:	45a2      	cmp	sl, r4
 80120dc:	bf14      	ite	ne
 80120de:	2401      	movne	r4, #1
 80120e0:	2406      	moveq	r4, #6
 80120e2:	71b4      	strb	r4, [r6, #6]
 80120e4:	2000      	movs	r0, #0
 80120e6:	b001      	add	sp, #4
 80120e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ec:	3502      	adds	r5, #2
 80120ee:	d1f9      	bne.n	80120e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80120f0:	2301      	movs	r3, #1
 80120f2:	71b3      	strb	r3, [r6, #6]
 80120f4:	e7f6      	b.n	80120e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80120f6:	4554      	cmp	r4, sl
 80120f8:	d106      	bne.n	8012108 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80120fa:	4659      	mov	r1, fp
 80120fc:	4648      	mov	r0, r9
 80120fe:	f000 f82b 	bl	8012158 <_ZNKSt9type_info7__equalERKS_>
 8012102:	b108      	cbz	r0, 8012108 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8012104:	7177      	strb	r7, [r6, #5]
 8012106:	e7ed      	b.n	80120e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012108:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801210c:	6803      	ldr	r3, [r0, #0]
 801210e:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8012112:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8012116:	69dc      	ldr	r4, [r3, #28]
 8012118:	463a      	mov	r2, r7
 801211a:	4643      	mov	r3, r8
 801211c:	4629      	mov	r1, r5
 801211e:	46a4      	mov	ip, r4
 8012120:	b001      	add	sp, #4
 8012122:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012126:	4760      	bx	ip

08012128 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8012128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801212c:	4607      	mov	r7, r0
 801212e:	460c      	mov	r4, r1
 8012130:	4615      	mov	r5, r2
 8012132:	461e      	mov	r6, r3
 8012134:	f7ff fbfd 	bl	8011932 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8012138:	b948      	cbnz	r0, 801214e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801213a:	68b8      	ldr	r0, [r7, #8]
 801213c:	6803      	ldr	r3, [r0, #0]
 801213e:	699f      	ldr	r7, [r3, #24]
 8012140:	462a      	mov	r2, r5
 8012142:	4633      	mov	r3, r6
 8012144:	4621      	mov	r1, r4
 8012146:	46bc      	mov	ip, r7
 8012148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801214c:	4760      	bx	ip
 801214e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012152 <_ZNSt9type_infoD1Ev>:
 8012152:	4770      	bx	lr

08012154 <_ZNKSt9type_info14__is_pointer_pEv>:
 8012154:	2000      	movs	r0, #0
 8012156:	4770      	bx	lr

08012158 <_ZNKSt9type_info7__equalERKS_>:
 8012158:	4281      	cmp	r1, r0
 801215a:	b508      	push	{r3, lr}
 801215c:	d00e      	beq.n	801217c <_ZNKSt9type_info7__equalERKS_+0x24>
 801215e:	6840      	ldr	r0, [r0, #4]
 8012160:	7803      	ldrb	r3, [r0, #0]
 8012162:	2b2a      	cmp	r3, #42	@ 0x2a
 8012164:	d00c      	beq.n	8012180 <_ZNKSt9type_info7__equalERKS_+0x28>
 8012166:	6849      	ldr	r1, [r1, #4]
 8012168:	780b      	ldrb	r3, [r1, #0]
 801216a:	2b2a      	cmp	r3, #42	@ 0x2a
 801216c:	bf08      	it	eq
 801216e:	3101      	addeq	r1, #1
 8012170:	f7ee f84e 	bl	8000210 <strcmp>
 8012174:	fab0 f080 	clz	r0, r0
 8012178:	0940      	lsrs	r0, r0, #5
 801217a:	bd08      	pop	{r3, pc}
 801217c:	2001      	movs	r0, #1
 801217e:	e7fc      	b.n	801217a <_ZNKSt9type_info7__equalERKS_+0x22>
 8012180:	2000      	movs	r0, #0
 8012182:	e7fa      	b.n	801217a <_ZNKSt9type_info7__equalERKS_+0x22>

08012184 <__aeabi_atexit>:
 8012184:	460b      	mov	r3, r1
 8012186:	4601      	mov	r1, r0
 8012188:	4618      	mov	r0, r3
 801218a:	f000 ba5d 	b.w	8012648 <__cxa_atexit>

0801218e <_ZdlPv>:
 801218e:	f000 b9a5 	b.w	80124dc <free>

08012192 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012192:	7803      	ldrb	r3, [r0, #0]
 8012194:	2b47      	cmp	r3, #71	@ 0x47
 8012196:	d117      	bne.n	80121c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012198:	7843      	ldrb	r3, [r0, #1]
 801219a:	2b4e      	cmp	r3, #78	@ 0x4e
 801219c:	d114      	bne.n	80121c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801219e:	7883      	ldrb	r3, [r0, #2]
 80121a0:	2b55      	cmp	r3, #85	@ 0x55
 80121a2:	d111      	bne.n	80121c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80121a4:	78c3      	ldrb	r3, [r0, #3]
 80121a6:	2b43      	cmp	r3, #67	@ 0x43
 80121a8:	d10e      	bne.n	80121c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80121aa:	7903      	ldrb	r3, [r0, #4]
 80121ac:	2b43      	cmp	r3, #67	@ 0x43
 80121ae:	d10b      	bne.n	80121c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80121b0:	7943      	ldrb	r3, [r0, #5]
 80121b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80121b4:	d108      	bne.n	80121c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80121b6:	7983      	ldrb	r3, [r0, #6]
 80121b8:	2b2b      	cmp	r3, #43	@ 0x2b
 80121ba:	d105      	bne.n	80121c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80121bc:	79c0      	ldrb	r0, [r0, #7]
 80121be:	2801      	cmp	r0, #1
 80121c0:	bf8c      	ite	hi
 80121c2:	2000      	movhi	r0, #0
 80121c4:	2001      	movls	r0, #1
 80121c6:	4770      	bx	lr
 80121c8:	2000      	movs	r0, #0
 80121ca:	4770      	bx	lr

080121cc <__cxa_call_terminate>:
 80121cc:	b510      	push	{r4, lr}
 80121ce:	4604      	mov	r4, r0
 80121d0:	b148      	cbz	r0, 80121e6 <__cxa_call_terminate+0x1a>
 80121d2:	f000 f83b 	bl	801224c <__cxa_begin_catch>
 80121d6:	4620      	mov	r0, r4
 80121d8:	f7ff ffdb 	bl	8012192 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80121dc:	b118      	cbz	r0, 80121e6 <__cxa_call_terminate+0x1a>
 80121de:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80121e2:	f7ff feff 	bl	8011fe4 <_ZN10__cxxabiv111__terminateEPFvvE>
 80121e6:	f7ff ff09 	bl	8011ffc <_ZSt9terminatev>

080121ea <__cxa_call_unexpected>:
 80121ea:	b538      	push	{r3, r4, r5, lr}
 80121ec:	4602      	mov	r2, r0
 80121ee:	f7ff ffd0 	bl	8012192 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80121f2:	4604      	mov	r4, r0
 80121f4:	b140      	cbz	r0, 8012208 <__cxa_call_unexpected+0x1e>
 80121f6:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80121fa:	2500      	movs	r5, #0
 80121fc:	4610      	mov	r0, r2
 80121fe:	f000 f825 	bl	801224c <__cxa_begin_catch>
 8012202:	b11d      	cbz	r5, 801220c <__cxa_call_unexpected+0x22>
 8012204:	f7ff ff0c 	bl	8012020 <_ZSt10unexpectedv>
 8012208:	2501      	movs	r5, #1
 801220a:	e7f7      	b.n	80121fc <__cxa_call_unexpected+0x12>
 801220c:	4620      	mov	r0, r4
 801220e:	f7ff fefa 	bl	8012006 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08012212 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012212:	7803      	ldrb	r3, [r0, #0]
 8012214:	2b47      	cmp	r3, #71	@ 0x47
 8012216:	d117      	bne.n	8012248 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012218:	7843      	ldrb	r3, [r0, #1]
 801221a:	2b4e      	cmp	r3, #78	@ 0x4e
 801221c:	d114      	bne.n	8012248 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801221e:	7883      	ldrb	r3, [r0, #2]
 8012220:	2b55      	cmp	r3, #85	@ 0x55
 8012222:	d111      	bne.n	8012248 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012224:	78c3      	ldrb	r3, [r0, #3]
 8012226:	2b43      	cmp	r3, #67	@ 0x43
 8012228:	d10e      	bne.n	8012248 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801222a:	7903      	ldrb	r3, [r0, #4]
 801222c:	2b43      	cmp	r3, #67	@ 0x43
 801222e:	d10b      	bne.n	8012248 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012230:	7943      	ldrb	r3, [r0, #5]
 8012232:	2b2b      	cmp	r3, #43	@ 0x2b
 8012234:	d108      	bne.n	8012248 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012236:	7983      	ldrb	r3, [r0, #6]
 8012238:	2b2b      	cmp	r3, #43	@ 0x2b
 801223a:	d105      	bne.n	8012248 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801223c:	79c0      	ldrb	r0, [r0, #7]
 801223e:	2801      	cmp	r0, #1
 8012240:	bf8c      	ite	hi
 8012242:	2000      	movhi	r0, #0
 8012244:	2001      	movls	r0, #1
 8012246:	4770      	bx	lr
 8012248:	2000      	movs	r0, #0
 801224a:	4770      	bx	lr

0801224c <__cxa_begin_catch>:
 801224c:	b538      	push	{r3, r4, r5, lr}
 801224e:	4604      	mov	r4, r0
 8012250:	f7ff fc4c 	bl	8011aec <__cxa_get_globals>
 8012254:	6805      	ldr	r5, [r0, #0]
 8012256:	4602      	mov	r2, r0
 8012258:	4620      	mov	r0, r4
 801225a:	f1a4 0120 	sub.w	r1, r4, #32
 801225e:	f7ff ffd8 	bl	8012212 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012262:	b928      	cbnz	r0, 8012270 <__cxa_begin_catch+0x24>
 8012264:	b10d      	cbz	r5, 801226a <__cxa_begin_catch+0x1e>
 8012266:	f7ff fec9 	bl	8011ffc <_ZSt9terminatev>
 801226a:	6011      	str	r1, [r2, #0]
 801226c:	4628      	mov	r0, r5
 801226e:	bd38      	pop	{r3, r4, r5, pc}
 8012270:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	bfb4      	ite	lt
 8012278:	f1c3 0301 	rsblt	r3, r3, #1
 801227c:	3301      	addge	r3, #1
 801227e:	f844 3c0c 	str.w	r3, [r4, #-12]
 8012282:	6853      	ldr	r3, [r2, #4]
 8012284:	428d      	cmp	r5, r1
 8012286:	f103 33ff 	add.w	r3, r3, #4294967295
 801228a:	6053      	str	r3, [r2, #4]
 801228c:	4620      	mov	r0, r4
 801228e:	bf1c      	itt	ne
 8012290:	f844 5c10 	strne.w	r5, [r4, #-16]
 8012294:	6011      	strne	r1, [r2, #0]
 8012296:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8012298:	f7ef f83c 	bl	8001314 <_Unwind_Complete>
 801229c:	e7e6      	b.n	801226c <__cxa_begin_catch+0x20>
	...

080122a0 <_ZSt15get_new_handlerv>:
 80122a0:	4b02      	ldr	r3, [pc, #8]	@ (80122ac <_ZSt15get_new_handlerv+0xc>)
 80122a2:	6818      	ldr	r0, [r3, #0]
 80122a4:	f3bf 8f5b 	dmb	ish
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	20000580 	.word	0x20000580

080122b0 <sqrt>:
 80122b0:	b538      	push	{r3, r4, r5, lr}
 80122b2:	ed2d 8b02 	vpush	{d8}
 80122b6:	ec55 4b10 	vmov	r4, r5, d0
 80122ba:	f000 f825 	bl	8012308 <__ieee754_sqrt>
 80122be:	4622      	mov	r2, r4
 80122c0:	462b      	mov	r3, r5
 80122c2:	4620      	mov	r0, r4
 80122c4:	4629      	mov	r1, r5
 80122c6:	eeb0 8a40 	vmov.f32	s16, s0
 80122ca:	eef0 8a60 	vmov.f32	s17, s1
 80122ce:	f7ee fc5d 	bl	8000b8c <__aeabi_dcmpun>
 80122d2:	b990      	cbnz	r0, 80122fa <sqrt+0x4a>
 80122d4:	2200      	movs	r2, #0
 80122d6:	2300      	movs	r3, #0
 80122d8:	4620      	mov	r0, r4
 80122da:	4629      	mov	r1, r5
 80122dc:	f7ee fc2e 	bl	8000b3c <__aeabi_dcmplt>
 80122e0:	b158      	cbz	r0, 80122fa <sqrt+0x4a>
 80122e2:	f000 ffc3 	bl	801326c <__errno>
 80122e6:	2321      	movs	r3, #33	@ 0x21
 80122e8:	6003      	str	r3, [r0, #0]
 80122ea:	2200      	movs	r2, #0
 80122ec:	2300      	movs	r3, #0
 80122ee:	4610      	mov	r0, r2
 80122f0:	4619      	mov	r1, r3
 80122f2:	f7ee fadb 	bl	80008ac <__aeabi_ddiv>
 80122f6:	ec41 0b18 	vmov	d8, r0, r1
 80122fa:	eeb0 0a48 	vmov.f32	s0, s16
 80122fe:	eef0 0a68 	vmov.f32	s1, s17
 8012302:	ecbd 8b02 	vpop	{d8}
 8012306:	bd38      	pop	{r3, r4, r5, pc}

08012308 <__ieee754_sqrt>:
 8012308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801230c:	4a68      	ldr	r2, [pc, #416]	@ (80124b0 <__ieee754_sqrt+0x1a8>)
 801230e:	ec55 4b10 	vmov	r4, r5, d0
 8012312:	43aa      	bics	r2, r5
 8012314:	462b      	mov	r3, r5
 8012316:	4621      	mov	r1, r4
 8012318:	d110      	bne.n	801233c <__ieee754_sqrt+0x34>
 801231a:	4622      	mov	r2, r4
 801231c:	4620      	mov	r0, r4
 801231e:	4629      	mov	r1, r5
 8012320:	f7ee f99a 	bl	8000658 <__aeabi_dmul>
 8012324:	4602      	mov	r2, r0
 8012326:	460b      	mov	r3, r1
 8012328:	4620      	mov	r0, r4
 801232a:	4629      	mov	r1, r5
 801232c:	f7ed ffde 	bl	80002ec <__adddf3>
 8012330:	4604      	mov	r4, r0
 8012332:	460d      	mov	r5, r1
 8012334:	ec45 4b10 	vmov	d0, r4, r5
 8012338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801233c:	2d00      	cmp	r5, #0
 801233e:	dc0e      	bgt.n	801235e <__ieee754_sqrt+0x56>
 8012340:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012344:	4322      	orrs	r2, r4
 8012346:	d0f5      	beq.n	8012334 <__ieee754_sqrt+0x2c>
 8012348:	b19d      	cbz	r5, 8012372 <__ieee754_sqrt+0x6a>
 801234a:	4622      	mov	r2, r4
 801234c:	4620      	mov	r0, r4
 801234e:	4629      	mov	r1, r5
 8012350:	f7ed ffca 	bl	80002e8 <__aeabi_dsub>
 8012354:	4602      	mov	r2, r0
 8012356:	460b      	mov	r3, r1
 8012358:	f7ee faa8 	bl	80008ac <__aeabi_ddiv>
 801235c:	e7e8      	b.n	8012330 <__ieee754_sqrt+0x28>
 801235e:	152a      	asrs	r2, r5, #20
 8012360:	d115      	bne.n	801238e <__ieee754_sqrt+0x86>
 8012362:	2000      	movs	r0, #0
 8012364:	e009      	b.n	801237a <__ieee754_sqrt+0x72>
 8012366:	0acb      	lsrs	r3, r1, #11
 8012368:	3a15      	subs	r2, #21
 801236a:	0549      	lsls	r1, r1, #21
 801236c:	2b00      	cmp	r3, #0
 801236e:	d0fa      	beq.n	8012366 <__ieee754_sqrt+0x5e>
 8012370:	e7f7      	b.n	8012362 <__ieee754_sqrt+0x5a>
 8012372:	462a      	mov	r2, r5
 8012374:	e7fa      	b.n	801236c <__ieee754_sqrt+0x64>
 8012376:	005b      	lsls	r3, r3, #1
 8012378:	3001      	adds	r0, #1
 801237a:	02dc      	lsls	r4, r3, #11
 801237c:	d5fb      	bpl.n	8012376 <__ieee754_sqrt+0x6e>
 801237e:	1e44      	subs	r4, r0, #1
 8012380:	1b12      	subs	r2, r2, r4
 8012382:	f1c0 0420 	rsb	r4, r0, #32
 8012386:	fa21 f404 	lsr.w	r4, r1, r4
 801238a:	4323      	orrs	r3, r4
 801238c:	4081      	lsls	r1, r0
 801238e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012392:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801239a:	07d2      	lsls	r2, r2, #31
 801239c:	bf5c      	itt	pl
 801239e:	005b      	lslpl	r3, r3, #1
 80123a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80123a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80123a8:	bf58      	it	pl
 80123aa:	0049      	lslpl	r1, r1, #1
 80123ac:	2600      	movs	r6, #0
 80123ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80123b2:	106d      	asrs	r5, r5, #1
 80123b4:	0049      	lsls	r1, r1, #1
 80123b6:	2016      	movs	r0, #22
 80123b8:	4632      	mov	r2, r6
 80123ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80123be:	1917      	adds	r7, r2, r4
 80123c0:	429f      	cmp	r7, r3
 80123c2:	bfde      	ittt	le
 80123c4:	193a      	addle	r2, r7, r4
 80123c6:	1bdb      	suble	r3, r3, r7
 80123c8:	1936      	addle	r6, r6, r4
 80123ca:	0fcf      	lsrs	r7, r1, #31
 80123cc:	3801      	subs	r0, #1
 80123ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80123d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80123d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80123da:	d1f0      	bne.n	80123be <__ieee754_sqrt+0xb6>
 80123dc:	4604      	mov	r4, r0
 80123de:	2720      	movs	r7, #32
 80123e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80123e4:	429a      	cmp	r2, r3
 80123e6:	eb00 0e0c 	add.w	lr, r0, ip
 80123ea:	db02      	blt.n	80123f2 <__ieee754_sqrt+0xea>
 80123ec:	d113      	bne.n	8012416 <__ieee754_sqrt+0x10e>
 80123ee:	458e      	cmp	lr, r1
 80123f0:	d811      	bhi.n	8012416 <__ieee754_sqrt+0x10e>
 80123f2:	f1be 0f00 	cmp.w	lr, #0
 80123f6:	eb0e 000c 	add.w	r0, lr, ip
 80123fa:	da42      	bge.n	8012482 <__ieee754_sqrt+0x17a>
 80123fc:	2800      	cmp	r0, #0
 80123fe:	db40      	blt.n	8012482 <__ieee754_sqrt+0x17a>
 8012400:	f102 0801 	add.w	r8, r2, #1
 8012404:	1a9b      	subs	r3, r3, r2
 8012406:	458e      	cmp	lr, r1
 8012408:	bf88      	it	hi
 801240a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801240e:	eba1 010e 	sub.w	r1, r1, lr
 8012412:	4464      	add	r4, ip
 8012414:	4642      	mov	r2, r8
 8012416:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801241a:	3f01      	subs	r7, #1
 801241c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012420:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012424:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012428:	d1dc      	bne.n	80123e4 <__ieee754_sqrt+0xdc>
 801242a:	4319      	orrs	r1, r3
 801242c:	d01b      	beq.n	8012466 <__ieee754_sqrt+0x15e>
 801242e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80124b4 <__ieee754_sqrt+0x1ac>
 8012432:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80124b8 <__ieee754_sqrt+0x1b0>
 8012436:	e9da 0100 	ldrd	r0, r1, [sl]
 801243a:	e9db 2300 	ldrd	r2, r3, [fp]
 801243e:	f7ed ff53 	bl	80002e8 <__aeabi_dsub>
 8012442:	e9da 8900 	ldrd	r8, r9, [sl]
 8012446:	4602      	mov	r2, r0
 8012448:	460b      	mov	r3, r1
 801244a:	4640      	mov	r0, r8
 801244c:	4649      	mov	r1, r9
 801244e:	f7ee fb7f 	bl	8000b50 <__aeabi_dcmple>
 8012452:	b140      	cbz	r0, 8012466 <__ieee754_sqrt+0x15e>
 8012454:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012458:	e9da 0100 	ldrd	r0, r1, [sl]
 801245c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012460:	d111      	bne.n	8012486 <__ieee754_sqrt+0x17e>
 8012462:	3601      	adds	r6, #1
 8012464:	463c      	mov	r4, r7
 8012466:	1072      	asrs	r2, r6, #1
 8012468:	0863      	lsrs	r3, r4, #1
 801246a:	07f1      	lsls	r1, r6, #31
 801246c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012470:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012474:	bf48      	it	mi
 8012476:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801247a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801247e:	4618      	mov	r0, r3
 8012480:	e756      	b.n	8012330 <__ieee754_sqrt+0x28>
 8012482:	4690      	mov	r8, r2
 8012484:	e7be      	b.n	8012404 <__ieee754_sqrt+0xfc>
 8012486:	f7ed ff31 	bl	80002ec <__adddf3>
 801248a:	e9da 8900 	ldrd	r8, r9, [sl]
 801248e:	4602      	mov	r2, r0
 8012490:	460b      	mov	r3, r1
 8012492:	4640      	mov	r0, r8
 8012494:	4649      	mov	r1, r9
 8012496:	f7ee fb51 	bl	8000b3c <__aeabi_dcmplt>
 801249a:	b120      	cbz	r0, 80124a6 <__ieee754_sqrt+0x19e>
 801249c:	1ca0      	adds	r0, r4, #2
 801249e:	bf08      	it	eq
 80124a0:	3601      	addeq	r6, #1
 80124a2:	3402      	adds	r4, #2
 80124a4:	e7df      	b.n	8012466 <__ieee754_sqrt+0x15e>
 80124a6:	1c63      	adds	r3, r4, #1
 80124a8:	f023 0401 	bic.w	r4, r3, #1
 80124ac:	e7db      	b.n	8012466 <__ieee754_sqrt+0x15e>
 80124ae:	bf00      	nop
 80124b0:	7ff00000 	.word	0x7ff00000
 80124b4:	20000020 	.word	0x20000020
 80124b8:	20000018 	.word	0x20000018

080124bc <abort>:
 80124bc:	b508      	push	{r3, lr}
 80124be:	2006      	movs	r0, #6
 80124c0:	f000 fe5e 	bl	8013180 <raise>
 80124c4:	2001      	movs	r0, #1
 80124c6:	f7fb f8f7 	bl	800d6b8 <_exit>
	...

080124cc <malloc>:
 80124cc:	4b02      	ldr	r3, [pc, #8]	@ (80124d8 <malloc+0xc>)
 80124ce:	4601      	mov	r1, r0
 80124d0:	6818      	ldr	r0, [r3, #0]
 80124d2:	f000 b82d 	b.w	8012530 <_malloc_r>
 80124d6:	bf00      	nop
 80124d8:	20000034 	.word	0x20000034

080124dc <free>:
 80124dc:	4b02      	ldr	r3, [pc, #8]	@ (80124e8 <free+0xc>)
 80124de:	4601      	mov	r1, r0
 80124e0:	6818      	ldr	r0, [r3, #0]
 80124e2:	f001 bd4d 	b.w	8013f80 <_free_r>
 80124e6:	bf00      	nop
 80124e8:	20000034 	.word	0x20000034

080124ec <sbrk_aligned>:
 80124ec:	b570      	push	{r4, r5, r6, lr}
 80124ee:	4e0f      	ldr	r6, [pc, #60]	@ (801252c <sbrk_aligned+0x40>)
 80124f0:	460c      	mov	r4, r1
 80124f2:	6831      	ldr	r1, [r6, #0]
 80124f4:	4605      	mov	r5, r0
 80124f6:	b911      	cbnz	r1, 80124fe <sbrk_aligned+0x12>
 80124f8:	f000 fe96 	bl	8013228 <_sbrk_r>
 80124fc:	6030      	str	r0, [r6, #0]
 80124fe:	4621      	mov	r1, r4
 8012500:	4628      	mov	r0, r5
 8012502:	f000 fe91 	bl	8013228 <_sbrk_r>
 8012506:	1c43      	adds	r3, r0, #1
 8012508:	d103      	bne.n	8012512 <sbrk_aligned+0x26>
 801250a:	f04f 34ff 	mov.w	r4, #4294967295
 801250e:	4620      	mov	r0, r4
 8012510:	bd70      	pop	{r4, r5, r6, pc}
 8012512:	1cc4      	adds	r4, r0, #3
 8012514:	f024 0403 	bic.w	r4, r4, #3
 8012518:	42a0      	cmp	r0, r4
 801251a:	d0f8      	beq.n	801250e <sbrk_aligned+0x22>
 801251c:	1a21      	subs	r1, r4, r0
 801251e:	4628      	mov	r0, r5
 8012520:	f000 fe82 	bl	8013228 <_sbrk_r>
 8012524:	3001      	adds	r0, #1
 8012526:	d1f2      	bne.n	801250e <sbrk_aligned+0x22>
 8012528:	e7ef      	b.n	801250a <sbrk_aligned+0x1e>
 801252a:	bf00      	nop
 801252c:	20000584 	.word	0x20000584

08012530 <_malloc_r>:
 8012530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012534:	1ccd      	adds	r5, r1, #3
 8012536:	f025 0503 	bic.w	r5, r5, #3
 801253a:	3508      	adds	r5, #8
 801253c:	2d0c      	cmp	r5, #12
 801253e:	bf38      	it	cc
 8012540:	250c      	movcc	r5, #12
 8012542:	2d00      	cmp	r5, #0
 8012544:	4606      	mov	r6, r0
 8012546:	db01      	blt.n	801254c <_malloc_r+0x1c>
 8012548:	42a9      	cmp	r1, r5
 801254a:	d904      	bls.n	8012556 <_malloc_r+0x26>
 801254c:	230c      	movs	r3, #12
 801254e:	6033      	str	r3, [r6, #0]
 8012550:	2000      	movs	r0, #0
 8012552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801262c <_malloc_r+0xfc>
 801255a:	f000 f869 	bl	8012630 <__malloc_lock>
 801255e:	f8d8 3000 	ldr.w	r3, [r8]
 8012562:	461c      	mov	r4, r3
 8012564:	bb44      	cbnz	r4, 80125b8 <_malloc_r+0x88>
 8012566:	4629      	mov	r1, r5
 8012568:	4630      	mov	r0, r6
 801256a:	f7ff ffbf 	bl	80124ec <sbrk_aligned>
 801256e:	1c43      	adds	r3, r0, #1
 8012570:	4604      	mov	r4, r0
 8012572:	d158      	bne.n	8012626 <_malloc_r+0xf6>
 8012574:	f8d8 4000 	ldr.w	r4, [r8]
 8012578:	4627      	mov	r7, r4
 801257a:	2f00      	cmp	r7, #0
 801257c:	d143      	bne.n	8012606 <_malloc_r+0xd6>
 801257e:	2c00      	cmp	r4, #0
 8012580:	d04b      	beq.n	801261a <_malloc_r+0xea>
 8012582:	6823      	ldr	r3, [r4, #0]
 8012584:	4639      	mov	r1, r7
 8012586:	4630      	mov	r0, r6
 8012588:	eb04 0903 	add.w	r9, r4, r3
 801258c:	f000 fe4c 	bl	8013228 <_sbrk_r>
 8012590:	4581      	cmp	r9, r0
 8012592:	d142      	bne.n	801261a <_malloc_r+0xea>
 8012594:	6821      	ldr	r1, [r4, #0]
 8012596:	1a6d      	subs	r5, r5, r1
 8012598:	4629      	mov	r1, r5
 801259a:	4630      	mov	r0, r6
 801259c:	f7ff ffa6 	bl	80124ec <sbrk_aligned>
 80125a0:	3001      	adds	r0, #1
 80125a2:	d03a      	beq.n	801261a <_malloc_r+0xea>
 80125a4:	6823      	ldr	r3, [r4, #0]
 80125a6:	442b      	add	r3, r5
 80125a8:	6023      	str	r3, [r4, #0]
 80125aa:	f8d8 3000 	ldr.w	r3, [r8]
 80125ae:	685a      	ldr	r2, [r3, #4]
 80125b0:	bb62      	cbnz	r2, 801260c <_malloc_r+0xdc>
 80125b2:	f8c8 7000 	str.w	r7, [r8]
 80125b6:	e00f      	b.n	80125d8 <_malloc_r+0xa8>
 80125b8:	6822      	ldr	r2, [r4, #0]
 80125ba:	1b52      	subs	r2, r2, r5
 80125bc:	d420      	bmi.n	8012600 <_malloc_r+0xd0>
 80125be:	2a0b      	cmp	r2, #11
 80125c0:	d917      	bls.n	80125f2 <_malloc_r+0xc2>
 80125c2:	1961      	adds	r1, r4, r5
 80125c4:	42a3      	cmp	r3, r4
 80125c6:	6025      	str	r5, [r4, #0]
 80125c8:	bf18      	it	ne
 80125ca:	6059      	strne	r1, [r3, #4]
 80125cc:	6863      	ldr	r3, [r4, #4]
 80125ce:	bf08      	it	eq
 80125d0:	f8c8 1000 	streq.w	r1, [r8]
 80125d4:	5162      	str	r2, [r4, r5]
 80125d6:	604b      	str	r3, [r1, #4]
 80125d8:	4630      	mov	r0, r6
 80125da:	f000 f82f 	bl	801263c <__malloc_unlock>
 80125de:	f104 000b 	add.w	r0, r4, #11
 80125e2:	1d23      	adds	r3, r4, #4
 80125e4:	f020 0007 	bic.w	r0, r0, #7
 80125e8:	1ac2      	subs	r2, r0, r3
 80125ea:	bf1c      	itt	ne
 80125ec:	1a1b      	subne	r3, r3, r0
 80125ee:	50a3      	strne	r3, [r4, r2]
 80125f0:	e7af      	b.n	8012552 <_malloc_r+0x22>
 80125f2:	6862      	ldr	r2, [r4, #4]
 80125f4:	42a3      	cmp	r3, r4
 80125f6:	bf0c      	ite	eq
 80125f8:	f8c8 2000 	streq.w	r2, [r8]
 80125fc:	605a      	strne	r2, [r3, #4]
 80125fe:	e7eb      	b.n	80125d8 <_malloc_r+0xa8>
 8012600:	4623      	mov	r3, r4
 8012602:	6864      	ldr	r4, [r4, #4]
 8012604:	e7ae      	b.n	8012564 <_malloc_r+0x34>
 8012606:	463c      	mov	r4, r7
 8012608:	687f      	ldr	r7, [r7, #4]
 801260a:	e7b6      	b.n	801257a <_malloc_r+0x4a>
 801260c:	461a      	mov	r2, r3
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	42a3      	cmp	r3, r4
 8012612:	d1fb      	bne.n	801260c <_malloc_r+0xdc>
 8012614:	2300      	movs	r3, #0
 8012616:	6053      	str	r3, [r2, #4]
 8012618:	e7de      	b.n	80125d8 <_malloc_r+0xa8>
 801261a:	230c      	movs	r3, #12
 801261c:	6033      	str	r3, [r6, #0]
 801261e:	4630      	mov	r0, r6
 8012620:	f000 f80c 	bl	801263c <__malloc_unlock>
 8012624:	e794      	b.n	8012550 <_malloc_r+0x20>
 8012626:	6005      	str	r5, [r0, #0]
 8012628:	e7d6      	b.n	80125d8 <_malloc_r+0xa8>
 801262a:	bf00      	nop
 801262c:	20000588 	.word	0x20000588

08012630 <__malloc_lock>:
 8012630:	4801      	ldr	r0, [pc, #4]	@ (8012638 <__malloc_lock+0x8>)
 8012632:	f000 be46 	b.w	80132c2 <__retarget_lock_acquire_recursive>
 8012636:	bf00      	nop
 8012638:	200006cc 	.word	0x200006cc

0801263c <__malloc_unlock>:
 801263c:	4801      	ldr	r0, [pc, #4]	@ (8012644 <__malloc_unlock+0x8>)
 801263e:	f000 be41 	b.w	80132c4 <__retarget_lock_release_recursive>
 8012642:	bf00      	nop
 8012644:	200006cc 	.word	0x200006cc

08012648 <__cxa_atexit>:
 8012648:	b510      	push	{r4, lr}
 801264a:	4604      	mov	r4, r0
 801264c:	4804      	ldr	r0, [pc, #16]	@ (8012660 <__cxa_atexit+0x18>)
 801264e:	4613      	mov	r3, r2
 8012650:	b120      	cbz	r0, 801265c <__cxa_atexit+0x14>
 8012652:	460a      	mov	r2, r1
 8012654:	2002      	movs	r0, #2
 8012656:	4621      	mov	r1, r4
 8012658:	f3af 8000 	nop.w
 801265c:	bd10      	pop	{r4, pc}
 801265e:	bf00      	nop
 8012660:	00000000 	.word	0x00000000

08012664 <__cvt>:
 8012664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012668:	ec57 6b10 	vmov	r6, r7, d0
 801266c:	2f00      	cmp	r7, #0
 801266e:	460c      	mov	r4, r1
 8012670:	4619      	mov	r1, r3
 8012672:	463b      	mov	r3, r7
 8012674:	bfbb      	ittet	lt
 8012676:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801267a:	461f      	movlt	r7, r3
 801267c:	2300      	movge	r3, #0
 801267e:	232d      	movlt	r3, #45	@ 0x2d
 8012680:	700b      	strb	r3, [r1, #0]
 8012682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012684:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012688:	4691      	mov	r9, r2
 801268a:	f023 0820 	bic.w	r8, r3, #32
 801268e:	bfbc      	itt	lt
 8012690:	4632      	movlt	r2, r6
 8012692:	4616      	movlt	r6, r2
 8012694:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012698:	d005      	beq.n	80126a6 <__cvt+0x42>
 801269a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801269e:	d100      	bne.n	80126a2 <__cvt+0x3e>
 80126a0:	3401      	adds	r4, #1
 80126a2:	2102      	movs	r1, #2
 80126a4:	e000      	b.n	80126a8 <__cvt+0x44>
 80126a6:	2103      	movs	r1, #3
 80126a8:	ab03      	add	r3, sp, #12
 80126aa:	9301      	str	r3, [sp, #4]
 80126ac:	ab02      	add	r3, sp, #8
 80126ae:	9300      	str	r3, [sp, #0]
 80126b0:	ec47 6b10 	vmov	d0, r6, r7
 80126b4:	4653      	mov	r3, sl
 80126b6:	4622      	mov	r2, r4
 80126b8:	f000 fe9e 	bl	80133f8 <_dtoa_r>
 80126bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80126c0:	4605      	mov	r5, r0
 80126c2:	d119      	bne.n	80126f8 <__cvt+0x94>
 80126c4:	f019 0f01 	tst.w	r9, #1
 80126c8:	d00e      	beq.n	80126e8 <__cvt+0x84>
 80126ca:	eb00 0904 	add.w	r9, r0, r4
 80126ce:	2200      	movs	r2, #0
 80126d0:	2300      	movs	r3, #0
 80126d2:	4630      	mov	r0, r6
 80126d4:	4639      	mov	r1, r7
 80126d6:	f7ee fa27 	bl	8000b28 <__aeabi_dcmpeq>
 80126da:	b108      	cbz	r0, 80126e0 <__cvt+0x7c>
 80126dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80126e0:	2230      	movs	r2, #48	@ 0x30
 80126e2:	9b03      	ldr	r3, [sp, #12]
 80126e4:	454b      	cmp	r3, r9
 80126e6:	d31e      	bcc.n	8012726 <__cvt+0xc2>
 80126e8:	9b03      	ldr	r3, [sp, #12]
 80126ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126ec:	1b5b      	subs	r3, r3, r5
 80126ee:	4628      	mov	r0, r5
 80126f0:	6013      	str	r3, [r2, #0]
 80126f2:	b004      	add	sp, #16
 80126f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80126fc:	eb00 0904 	add.w	r9, r0, r4
 8012700:	d1e5      	bne.n	80126ce <__cvt+0x6a>
 8012702:	7803      	ldrb	r3, [r0, #0]
 8012704:	2b30      	cmp	r3, #48	@ 0x30
 8012706:	d10a      	bne.n	801271e <__cvt+0xba>
 8012708:	2200      	movs	r2, #0
 801270a:	2300      	movs	r3, #0
 801270c:	4630      	mov	r0, r6
 801270e:	4639      	mov	r1, r7
 8012710:	f7ee fa0a 	bl	8000b28 <__aeabi_dcmpeq>
 8012714:	b918      	cbnz	r0, 801271e <__cvt+0xba>
 8012716:	f1c4 0401 	rsb	r4, r4, #1
 801271a:	f8ca 4000 	str.w	r4, [sl]
 801271e:	f8da 3000 	ldr.w	r3, [sl]
 8012722:	4499      	add	r9, r3
 8012724:	e7d3      	b.n	80126ce <__cvt+0x6a>
 8012726:	1c59      	adds	r1, r3, #1
 8012728:	9103      	str	r1, [sp, #12]
 801272a:	701a      	strb	r2, [r3, #0]
 801272c:	e7d9      	b.n	80126e2 <__cvt+0x7e>

0801272e <__exponent>:
 801272e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012730:	2900      	cmp	r1, #0
 8012732:	bfba      	itte	lt
 8012734:	4249      	neglt	r1, r1
 8012736:	232d      	movlt	r3, #45	@ 0x2d
 8012738:	232b      	movge	r3, #43	@ 0x2b
 801273a:	2909      	cmp	r1, #9
 801273c:	7002      	strb	r2, [r0, #0]
 801273e:	7043      	strb	r3, [r0, #1]
 8012740:	dd29      	ble.n	8012796 <__exponent+0x68>
 8012742:	f10d 0307 	add.w	r3, sp, #7
 8012746:	461d      	mov	r5, r3
 8012748:	270a      	movs	r7, #10
 801274a:	461a      	mov	r2, r3
 801274c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012750:	fb07 1416 	mls	r4, r7, r6, r1
 8012754:	3430      	adds	r4, #48	@ 0x30
 8012756:	f802 4c01 	strb.w	r4, [r2, #-1]
 801275a:	460c      	mov	r4, r1
 801275c:	2c63      	cmp	r4, #99	@ 0x63
 801275e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012762:	4631      	mov	r1, r6
 8012764:	dcf1      	bgt.n	801274a <__exponent+0x1c>
 8012766:	3130      	adds	r1, #48	@ 0x30
 8012768:	1e94      	subs	r4, r2, #2
 801276a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801276e:	1c41      	adds	r1, r0, #1
 8012770:	4623      	mov	r3, r4
 8012772:	42ab      	cmp	r3, r5
 8012774:	d30a      	bcc.n	801278c <__exponent+0x5e>
 8012776:	f10d 0309 	add.w	r3, sp, #9
 801277a:	1a9b      	subs	r3, r3, r2
 801277c:	42ac      	cmp	r4, r5
 801277e:	bf88      	it	hi
 8012780:	2300      	movhi	r3, #0
 8012782:	3302      	adds	r3, #2
 8012784:	4403      	add	r3, r0
 8012786:	1a18      	subs	r0, r3, r0
 8012788:	b003      	add	sp, #12
 801278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801278c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012790:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012794:	e7ed      	b.n	8012772 <__exponent+0x44>
 8012796:	2330      	movs	r3, #48	@ 0x30
 8012798:	3130      	adds	r1, #48	@ 0x30
 801279a:	7083      	strb	r3, [r0, #2]
 801279c:	70c1      	strb	r1, [r0, #3]
 801279e:	1d03      	adds	r3, r0, #4
 80127a0:	e7f1      	b.n	8012786 <__exponent+0x58>
	...

080127a4 <_printf_float>:
 80127a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a8:	b08d      	sub	sp, #52	@ 0x34
 80127aa:	460c      	mov	r4, r1
 80127ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80127b0:	4616      	mov	r6, r2
 80127b2:	461f      	mov	r7, r3
 80127b4:	4605      	mov	r5, r0
 80127b6:	f000 fceb 	bl	8013190 <_localeconv_r>
 80127ba:	6803      	ldr	r3, [r0, #0]
 80127bc:	9304      	str	r3, [sp, #16]
 80127be:	4618      	mov	r0, r3
 80127c0:	f7ed fd86 	bl	80002d0 <strlen>
 80127c4:	2300      	movs	r3, #0
 80127c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80127c8:	f8d8 3000 	ldr.w	r3, [r8]
 80127cc:	9005      	str	r0, [sp, #20]
 80127ce:	3307      	adds	r3, #7
 80127d0:	f023 0307 	bic.w	r3, r3, #7
 80127d4:	f103 0208 	add.w	r2, r3, #8
 80127d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80127dc:	f8d4 b000 	ldr.w	fp, [r4]
 80127e0:	f8c8 2000 	str.w	r2, [r8]
 80127e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80127e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80127ec:	9307      	str	r3, [sp, #28]
 80127ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80127f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80127f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127fa:	4b9c      	ldr	r3, [pc, #624]	@ (8012a6c <_printf_float+0x2c8>)
 80127fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012800:	f7ee f9c4 	bl	8000b8c <__aeabi_dcmpun>
 8012804:	bb70      	cbnz	r0, 8012864 <_printf_float+0xc0>
 8012806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801280a:	4b98      	ldr	r3, [pc, #608]	@ (8012a6c <_printf_float+0x2c8>)
 801280c:	f04f 32ff 	mov.w	r2, #4294967295
 8012810:	f7ee f99e 	bl	8000b50 <__aeabi_dcmple>
 8012814:	bb30      	cbnz	r0, 8012864 <_printf_float+0xc0>
 8012816:	2200      	movs	r2, #0
 8012818:	2300      	movs	r3, #0
 801281a:	4640      	mov	r0, r8
 801281c:	4649      	mov	r1, r9
 801281e:	f7ee f98d 	bl	8000b3c <__aeabi_dcmplt>
 8012822:	b110      	cbz	r0, 801282a <_printf_float+0x86>
 8012824:	232d      	movs	r3, #45	@ 0x2d
 8012826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801282a:	4a91      	ldr	r2, [pc, #580]	@ (8012a70 <_printf_float+0x2cc>)
 801282c:	4b91      	ldr	r3, [pc, #580]	@ (8012a74 <_printf_float+0x2d0>)
 801282e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012832:	bf94      	ite	ls
 8012834:	4690      	movls	r8, r2
 8012836:	4698      	movhi	r8, r3
 8012838:	2303      	movs	r3, #3
 801283a:	6123      	str	r3, [r4, #16]
 801283c:	f02b 0304 	bic.w	r3, fp, #4
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	f04f 0900 	mov.w	r9, #0
 8012846:	9700      	str	r7, [sp, #0]
 8012848:	4633      	mov	r3, r6
 801284a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801284c:	4621      	mov	r1, r4
 801284e:	4628      	mov	r0, r5
 8012850:	f000 f9d2 	bl	8012bf8 <_printf_common>
 8012854:	3001      	adds	r0, #1
 8012856:	f040 808d 	bne.w	8012974 <_printf_float+0x1d0>
 801285a:	f04f 30ff 	mov.w	r0, #4294967295
 801285e:	b00d      	add	sp, #52	@ 0x34
 8012860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012864:	4642      	mov	r2, r8
 8012866:	464b      	mov	r3, r9
 8012868:	4640      	mov	r0, r8
 801286a:	4649      	mov	r1, r9
 801286c:	f7ee f98e 	bl	8000b8c <__aeabi_dcmpun>
 8012870:	b140      	cbz	r0, 8012884 <_printf_float+0xe0>
 8012872:	464b      	mov	r3, r9
 8012874:	2b00      	cmp	r3, #0
 8012876:	bfbc      	itt	lt
 8012878:	232d      	movlt	r3, #45	@ 0x2d
 801287a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801287e:	4a7e      	ldr	r2, [pc, #504]	@ (8012a78 <_printf_float+0x2d4>)
 8012880:	4b7e      	ldr	r3, [pc, #504]	@ (8012a7c <_printf_float+0x2d8>)
 8012882:	e7d4      	b.n	801282e <_printf_float+0x8a>
 8012884:	6863      	ldr	r3, [r4, #4]
 8012886:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801288a:	9206      	str	r2, [sp, #24]
 801288c:	1c5a      	adds	r2, r3, #1
 801288e:	d13b      	bne.n	8012908 <_printf_float+0x164>
 8012890:	2306      	movs	r3, #6
 8012892:	6063      	str	r3, [r4, #4]
 8012894:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012898:	2300      	movs	r3, #0
 801289a:	6022      	str	r2, [r4, #0]
 801289c:	9303      	str	r3, [sp, #12]
 801289e:	ab0a      	add	r3, sp, #40	@ 0x28
 80128a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80128a4:	ab09      	add	r3, sp, #36	@ 0x24
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	6861      	ldr	r1, [r4, #4]
 80128aa:	ec49 8b10 	vmov	d0, r8, r9
 80128ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80128b2:	4628      	mov	r0, r5
 80128b4:	f7ff fed6 	bl	8012664 <__cvt>
 80128b8:	9b06      	ldr	r3, [sp, #24]
 80128ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80128bc:	2b47      	cmp	r3, #71	@ 0x47
 80128be:	4680      	mov	r8, r0
 80128c0:	d129      	bne.n	8012916 <_printf_float+0x172>
 80128c2:	1cc8      	adds	r0, r1, #3
 80128c4:	db02      	blt.n	80128cc <_printf_float+0x128>
 80128c6:	6863      	ldr	r3, [r4, #4]
 80128c8:	4299      	cmp	r1, r3
 80128ca:	dd41      	ble.n	8012950 <_printf_float+0x1ac>
 80128cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80128d0:	fa5f fa8a 	uxtb.w	sl, sl
 80128d4:	3901      	subs	r1, #1
 80128d6:	4652      	mov	r2, sl
 80128d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80128dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80128de:	f7ff ff26 	bl	801272e <__exponent>
 80128e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128e4:	1813      	adds	r3, r2, r0
 80128e6:	2a01      	cmp	r2, #1
 80128e8:	4681      	mov	r9, r0
 80128ea:	6123      	str	r3, [r4, #16]
 80128ec:	dc02      	bgt.n	80128f4 <_printf_float+0x150>
 80128ee:	6822      	ldr	r2, [r4, #0]
 80128f0:	07d2      	lsls	r2, r2, #31
 80128f2:	d501      	bpl.n	80128f8 <_printf_float+0x154>
 80128f4:	3301      	adds	r3, #1
 80128f6:	6123      	str	r3, [r4, #16]
 80128f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d0a2      	beq.n	8012846 <_printf_float+0xa2>
 8012900:	232d      	movs	r3, #45	@ 0x2d
 8012902:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012906:	e79e      	b.n	8012846 <_printf_float+0xa2>
 8012908:	9a06      	ldr	r2, [sp, #24]
 801290a:	2a47      	cmp	r2, #71	@ 0x47
 801290c:	d1c2      	bne.n	8012894 <_printf_float+0xf0>
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1c0      	bne.n	8012894 <_printf_float+0xf0>
 8012912:	2301      	movs	r3, #1
 8012914:	e7bd      	b.n	8012892 <_printf_float+0xee>
 8012916:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801291a:	d9db      	bls.n	80128d4 <_printf_float+0x130>
 801291c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012920:	d118      	bne.n	8012954 <_printf_float+0x1b0>
 8012922:	2900      	cmp	r1, #0
 8012924:	6863      	ldr	r3, [r4, #4]
 8012926:	dd0b      	ble.n	8012940 <_printf_float+0x19c>
 8012928:	6121      	str	r1, [r4, #16]
 801292a:	b913      	cbnz	r3, 8012932 <_printf_float+0x18e>
 801292c:	6822      	ldr	r2, [r4, #0]
 801292e:	07d0      	lsls	r0, r2, #31
 8012930:	d502      	bpl.n	8012938 <_printf_float+0x194>
 8012932:	3301      	adds	r3, #1
 8012934:	440b      	add	r3, r1
 8012936:	6123      	str	r3, [r4, #16]
 8012938:	65a1      	str	r1, [r4, #88]	@ 0x58
 801293a:	f04f 0900 	mov.w	r9, #0
 801293e:	e7db      	b.n	80128f8 <_printf_float+0x154>
 8012940:	b913      	cbnz	r3, 8012948 <_printf_float+0x1a4>
 8012942:	6822      	ldr	r2, [r4, #0]
 8012944:	07d2      	lsls	r2, r2, #31
 8012946:	d501      	bpl.n	801294c <_printf_float+0x1a8>
 8012948:	3302      	adds	r3, #2
 801294a:	e7f4      	b.n	8012936 <_printf_float+0x192>
 801294c:	2301      	movs	r3, #1
 801294e:	e7f2      	b.n	8012936 <_printf_float+0x192>
 8012950:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012956:	4299      	cmp	r1, r3
 8012958:	db05      	blt.n	8012966 <_printf_float+0x1c2>
 801295a:	6823      	ldr	r3, [r4, #0]
 801295c:	6121      	str	r1, [r4, #16]
 801295e:	07d8      	lsls	r0, r3, #31
 8012960:	d5ea      	bpl.n	8012938 <_printf_float+0x194>
 8012962:	1c4b      	adds	r3, r1, #1
 8012964:	e7e7      	b.n	8012936 <_printf_float+0x192>
 8012966:	2900      	cmp	r1, #0
 8012968:	bfd4      	ite	le
 801296a:	f1c1 0202 	rsble	r2, r1, #2
 801296e:	2201      	movgt	r2, #1
 8012970:	4413      	add	r3, r2
 8012972:	e7e0      	b.n	8012936 <_printf_float+0x192>
 8012974:	6823      	ldr	r3, [r4, #0]
 8012976:	055a      	lsls	r2, r3, #21
 8012978:	d407      	bmi.n	801298a <_printf_float+0x1e6>
 801297a:	6923      	ldr	r3, [r4, #16]
 801297c:	4642      	mov	r2, r8
 801297e:	4631      	mov	r1, r6
 8012980:	4628      	mov	r0, r5
 8012982:	47b8      	blx	r7
 8012984:	3001      	adds	r0, #1
 8012986:	d12b      	bne.n	80129e0 <_printf_float+0x23c>
 8012988:	e767      	b.n	801285a <_printf_float+0xb6>
 801298a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801298e:	f240 80dd 	bls.w	8012b4c <_printf_float+0x3a8>
 8012992:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012996:	2200      	movs	r2, #0
 8012998:	2300      	movs	r3, #0
 801299a:	f7ee f8c5 	bl	8000b28 <__aeabi_dcmpeq>
 801299e:	2800      	cmp	r0, #0
 80129a0:	d033      	beq.n	8012a0a <_printf_float+0x266>
 80129a2:	4a37      	ldr	r2, [pc, #220]	@ (8012a80 <_printf_float+0x2dc>)
 80129a4:	2301      	movs	r3, #1
 80129a6:	4631      	mov	r1, r6
 80129a8:	4628      	mov	r0, r5
 80129aa:	47b8      	blx	r7
 80129ac:	3001      	adds	r0, #1
 80129ae:	f43f af54 	beq.w	801285a <_printf_float+0xb6>
 80129b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80129b6:	4543      	cmp	r3, r8
 80129b8:	db02      	blt.n	80129c0 <_printf_float+0x21c>
 80129ba:	6823      	ldr	r3, [r4, #0]
 80129bc:	07d8      	lsls	r0, r3, #31
 80129be:	d50f      	bpl.n	80129e0 <_printf_float+0x23c>
 80129c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129c4:	4631      	mov	r1, r6
 80129c6:	4628      	mov	r0, r5
 80129c8:	47b8      	blx	r7
 80129ca:	3001      	adds	r0, #1
 80129cc:	f43f af45 	beq.w	801285a <_printf_float+0xb6>
 80129d0:	f04f 0900 	mov.w	r9, #0
 80129d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80129d8:	f104 0a1a 	add.w	sl, r4, #26
 80129dc:	45c8      	cmp	r8, r9
 80129de:	dc09      	bgt.n	80129f4 <_printf_float+0x250>
 80129e0:	6823      	ldr	r3, [r4, #0]
 80129e2:	079b      	lsls	r3, r3, #30
 80129e4:	f100 8103 	bmi.w	8012bee <_printf_float+0x44a>
 80129e8:	68e0      	ldr	r0, [r4, #12]
 80129ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129ec:	4298      	cmp	r0, r3
 80129ee:	bfb8      	it	lt
 80129f0:	4618      	movlt	r0, r3
 80129f2:	e734      	b.n	801285e <_printf_float+0xba>
 80129f4:	2301      	movs	r3, #1
 80129f6:	4652      	mov	r2, sl
 80129f8:	4631      	mov	r1, r6
 80129fa:	4628      	mov	r0, r5
 80129fc:	47b8      	blx	r7
 80129fe:	3001      	adds	r0, #1
 8012a00:	f43f af2b 	beq.w	801285a <_printf_float+0xb6>
 8012a04:	f109 0901 	add.w	r9, r9, #1
 8012a08:	e7e8      	b.n	80129dc <_printf_float+0x238>
 8012a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	dc39      	bgt.n	8012a84 <_printf_float+0x2e0>
 8012a10:	4a1b      	ldr	r2, [pc, #108]	@ (8012a80 <_printf_float+0x2dc>)
 8012a12:	2301      	movs	r3, #1
 8012a14:	4631      	mov	r1, r6
 8012a16:	4628      	mov	r0, r5
 8012a18:	47b8      	blx	r7
 8012a1a:	3001      	adds	r0, #1
 8012a1c:	f43f af1d 	beq.w	801285a <_printf_float+0xb6>
 8012a20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012a24:	ea59 0303 	orrs.w	r3, r9, r3
 8012a28:	d102      	bne.n	8012a30 <_printf_float+0x28c>
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	07d9      	lsls	r1, r3, #31
 8012a2e:	d5d7      	bpl.n	80129e0 <_printf_float+0x23c>
 8012a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a34:	4631      	mov	r1, r6
 8012a36:	4628      	mov	r0, r5
 8012a38:	47b8      	blx	r7
 8012a3a:	3001      	adds	r0, #1
 8012a3c:	f43f af0d 	beq.w	801285a <_printf_float+0xb6>
 8012a40:	f04f 0a00 	mov.w	sl, #0
 8012a44:	f104 0b1a 	add.w	fp, r4, #26
 8012a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a4a:	425b      	negs	r3, r3
 8012a4c:	4553      	cmp	r3, sl
 8012a4e:	dc01      	bgt.n	8012a54 <_printf_float+0x2b0>
 8012a50:	464b      	mov	r3, r9
 8012a52:	e793      	b.n	801297c <_printf_float+0x1d8>
 8012a54:	2301      	movs	r3, #1
 8012a56:	465a      	mov	r2, fp
 8012a58:	4631      	mov	r1, r6
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	47b8      	blx	r7
 8012a5e:	3001      	adds	r0, #1
 8012a60:	f43f aefb 	beq.w	801285a <_printf_float+0xb6>
 8012a64:	f10a 0a01 	add.w	sl, sl, #1
 8012a68:	e7ee      	b.n	8012a48 <_printf_float+0x2a4>
 8012a6a:	bf00      	nop
 8012a6c:	7fefffff 	.word	0x7fefffff
 8012a70:	0801639c 	.word	0x0801639c
 8012a74:	080163a0 	.word	0x080163a0
 8012a78:	080163a4 	.word	0x080163a4
 8012a7c:	080163a8 	.word	0x080163a8
 8012a80:	080163ac 	.word	0x080163ac
 8012a84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012a86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a8a:	4553      	cmp	r3, sl
 8012a8c:	bfa8      	it	ge
 8012a8e:	4653      	movge	r3, sl
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	4699      	mov	r9, r3
 8012a94:	dc36      	bgt.n	8012b04 <_printf_float+0x360>
 8012a96:	f04f 0b00 	mov.w	fp, #0
 8012a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a9e:	f104 021a 	add.w	r2, r4, #26
 8012aa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012aa4:	9306      	str	r3, [sp, #24]
 8012aa6:	eba3 0309 	sub.w	r3, r3, r9
 8012aaa:	455b      	cmp	r3, fp
 8012aac:	dc31      	bgt.n	8012b12 <_printf_float+0x36e>
 8012aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ab0:	459a      	cmp	sl, r3
 8012ab2:	dc3a      	bgt.n	8012b2a <_printf_float+0x386>
 8012ab4:	6823      	ldr	r3, [r4, #0]
 8012ab6:	07da      	lsls	r2, r3, #31
 8012ab8:	d437      	bmi.n	8012b2a <_printf_float+0x386>
 8012aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012abc:	ebaa 0903 	sub.w	r9, sl, r3
 8012ac0:	9b06      	ldr	r3, [sp, #24]
 8012ac2:	ebaa 0303 	sub.w	r3, sl, r3
 8012ac6:	4599      	cmp	r9, r3
 8012ac8:	bfa8      	it	ge
 8012aca:	4699      	movge	r9, r3
 8012acc:	f1b9 0f00 	cmp.w	r9, #0
 8012ad0:	dc33      	bgt.n	8012b3a <_printf_float+0x396>
 8012ad2:	f04f 0800 	mov.w	r8, #0
 8012ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ada:	f104 0b1a 	add.w	fp, r4, #26
 8012ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ae0:	ebaa 0303 	sub.w	r3, sl, r3
 8012ae4:	eba3 0309 	sub.w	r3, r3, r9
 8012ae8:	4543      	cmp	r3, r8
 8012aea:	f77f af79 	ble.w	80129e0 <_printf_float+0x23c>
 8012aee:	2301      	movs	r3, #1
 8012af0:	465a      	mov	r2, fp
 8012af2:	4631      	mov	r1, r6
 8012af4:	4628      	mov	r0, r5
 8012af6:	47b8      	blx	r7
 8012af8:	3001      	adds	r0, #1
 8012afa:	f43f aeae 	beq.w	801285a <_printf_float+0xb6>
 8012afe:	f108 0801 	add.w	r8, r8, #1
 8012b02:	e7ec      	b.n	8012ade <_printf_float+0x33a>
 8012b04:	4642      	mov	r2, r8
 8012b06:	4631      	mov	r1, r6
 8012b08:	4628      	mov	r0, r5
 8012b0a:	47b8      	blx	r7
 8012b0c:	3001      	adds	r0, #1
 8012b0e:	d1c2      	bne.n	8012a96 <_printf_float+0x2f2>
 8012b10:	e6a3      	b.n	801285a <_printf_float+0xb6>
 8012b12:	2301      	movs	r3, #1
 8012b14:	4631      	mov	r1, r6
 8012b16:	4628      	mov	r0, r5
 8012b18:	9206      	str	r2, [sp, #24]
 8012b1a:	47b8      	blx	r7
 8012b1c:	3001      	adds	r0, #1
 8012b1e:	f43f ae9c 	beq.w	801285a <_printf_float+0xb6>
 8012b22:	9a06      	ldr	r2, [sp, #24]
 8012b24:	f10b 0b01 	add.w	fp, fp, #1
 8012b28:	e7bb      	b.n	8012aa2 <_printf_float+0x2fe>
 8012b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b2e:	4631      	mov	r1, r6
 8012b30:	4628      	mov	r0, r5
 8012b32:	47b8      	blx	r7
 8012b34:	3001      	adds	r0, #1
 8012b36:	d1c0      	bne.n	8012aba <_printf_float+0x316>
 8012b38:	e68f      	b.n	801285a <_printf_float+0xb6>
 8012b3a:	9a06      	ldr	r2, [sp, #24]
 8012b3c:	464b      	mov	r3, r9
 8012b3e:	4442      	add	r2, r8
 8012b40:	4631      	mov	r1, r6
 8012b42:	4628      	mov	r0, r5
 8012b44:	47b8      	blx	r7
 8012b46:	3001      	adds	r0, #1
 8012b48:	d1c3      	bne.n	8012ad2 <_printf_float+0x32e>
 8012b4a:	e686      	b.n	801285a <_printf_float+0xb6>
 8012b4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012b50:	f1ba 0f01 	cmp.w	sl, #1
 8012b54:	dc01      	bgt.n	8012b5a <_printf_float+0x3b6>
 8012b56:	07db      	lsls	r3, r3, #31
 8012b58:	d536      	bpl.n	8012bc8 <_printf_float+0x424>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	4642      	mov	r2, r8
 8012b5e:	4631      	mov	r1, r6
 8012b60:	4628      	mov	r0, r5
 8012b62:	47b8      	blx	r7
 8012b64:	3001      	adds	r0, #1
 8012b66:	f43f ae78 	beq.w	801285a <_printf_float+0xb6>
 8012b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b6e:	4631      	mov	r1, r6
 8012b70:	4628      	mov	r0, r5
 8012b72:	47b8      	blx	r7
 8012b74:	3001      	adds	r0, #1
 8012b76:	f43f ae70 	beq.w	801285a <_printf_float+0xb6>
 8012b7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012b7e:	2200      	movs	r2, #0
 8012b80:	2300      	movs	r3, #0
 8012b82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b86:	f7ed ffcf 	bl	8000b28 <__aeabi_dcmpeq>
 8012b8a:	b9c0      	cbnz	r0, 8012bbe <_printf_float+0x41a>
 8012b8c:	4653      	mov	r3, sl
 8012b8e:	f108 0201 	add.w	r2, r8, #1
 8012b92:	4631      	mov	r1, r6
 8012b94:	4628      	mov	r0, r5
 8012b96:	47b8      	blx	r7
 8012b98:	3001      	adds	r0, #1
 8012b9a:	d10c      	bne.n	8012bb6 <_printf_float+0x412>
 8012b9c:	e65d      	b.n	801285a <_printf_float+0xb6>
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	465a      	mov	r2, fp
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	47b8      	blx	r7
 8012ba8:	3001      	adds	r0, #1
 8012baa:	f43f ae56 	beq.w	801285a <_printf_float+0xb6>
 8012bae:	f108 0801 	add.w	r8, r8, #1
 8012bb2:	45d0      	cmp	r8, sl
 8012bb4:	dbf3      	blt.n	8012b9e <_printf_float+0x3fa>
 8012bb6:	464b      	mov	r3, r9
 8012bb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012bbc:	e6df      	b.n	801297e <_printf_float+0x1da>
 8012bbe:	f04f 0800 	mov.w	r8, #0
 8012bc2:	f104 0b1a 	add.w	fp, r4, #26
 8012bc6:	e7f4      	b.n	8012bb2 <_printf_float+0x40e>
 8012bc8:	2301      	movs	r3, #1
 8012bca:	4642      	mov	r2, r8
 8012bcc:	e7e1      	b.n	8012b92 <_printf_float+0x3ee>
 8012bce:	2301      	movs	r3, #1
 8012bd0:	464a      	mov	r2, r9
 8012bd2:	4631      	mov	r1, r6
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	47b8      	blx	r7
 8012bd8:	3001      	adds	r0, #1
 8012bda:	f43f ae3e 	beq.w	801285a <_printf_float+0xb6>
 8012bde:	f108 0801 	add.w	r8, r8, #1
 8012be2:	68e3      	ldr	r3, [r4, #12]
 8012be4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012be6:	1a5b      	subs	r3, r3, r1
 8012be8:	4543      	cmp	r3, r8
 8012bea:	dcf0      	bgt.n	8012bce <_printf_float+0x42a>
 8012bec:	e6fc      	b.n	80129e8 <_printf_float+0x244>
 8012bee:	f04f 0800 	mov.w	r8, #0
 8012bf2:	f104 0919 	add.w	r9, r4, #25
 8012bf6:	e7f4      	b.n	8012be2 <_printf_float+0x43e>

08012bf8 <_printf_common>:
 8012bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bfc:	4616      	mov	r6, r2
 8012bfe:	4698      	mov	r8, r3
 8012c00:	688a      	ldr	r2, [r1, #8]
 8012c02:	690b      	ldr	r3, [r1, #16]
 8012c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	bfb8      	it	lt
 8012c0c:	4613      	movlt	r3, r2
 8012c0e:	6033      	str	r3, [r6, #0]
 8012c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012c14:	4607      	mov	r7, r0
 8012c16:	460c      	mov	r4, r1
 8012c18:	b10a      	cbz	r2, 8012c1e <_printf_common+0x26>
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	6033      	str	r3, [r6, #0]
 8012c1e:	6823      	ldr	r3, [r4, #0]
 8012c20:	0699      	lsls	r1, r3, #26
 8012c22:	bf42      	ittt	mi
 8012c24:	6833      	ldrmi	r3, [r6, #0]
 8012c26:	3302      	addmi	r3, #2
 8012c28:	6033      	strmi	r3, [r6, #0]
 8012c2a:	6825      	ldr	r5, [r4, #0]
 8012c2c:	f015 0506 	ands.w	r5, r5, #6
 8012c30:	d106      	bne.n	8012c40 <_printf_common+0x48>
 8012c32:	f104 0a19 	add.w	sl, r4, #25
 8012c36:	68e3      	ldr	r3, [r4, #12]
 8012c38:	6832      	ldr	r2, [r6, #0]
 8012c3a:	1a9b      	subs	r3, r3, r2
 8012c3c:	42ab      	cmp	r3, r5
 8012c3e:	dc26      	bgt.n	8012c8e <_printf_common+0x96>
 8012c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012c44:	6822      	ldr	r2, [r4, #0]
 8012c46:	3b00      	subs	r3, #0
 8012c48:	bf18      	it	ne
 8012c4a:	2301      	movne	r3, #1
 8012c4c:	0692      	lsls	r2, r2, #26
 8012c4e:	d42b      	bmi.n	8012ca8 <_printf_common+0xb0>
 8012c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012c54:	4641      	mov	r1, r8
 8012c56:	4638      	mov	r0, r7
 8012c58:	47c8      	blx	r9
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	d01e      	beq.n	8012c9c <_printf_common+0xa4>
 8012c5e:	6823      	ldr	r3, [r4, #0]
 8012c60:	6922      	ldr	r2, [r4, #16]
 8012c62:	f003 0306 	and.w	r3, r3, #6
 8012c66:	2b04      	cmp	r3, #4
 8012c68:	bf02      	ittt	eq
 8012c6a:	68e5      	ldreq	r5, [r4, #12]
 8012c6c:	6833      	ldreq	r3, [r6, #0]
 8012c6e:	1aed      	subeq	r5, r5, r3
 8012c70:	68a3      	ldr	r3, [r4, #8]
 8012c72:	bf0c      	ite	eq
 8012c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c78:	2500      	movne	r5, #0
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	bfc4      	itt	gt
 8012c7e:	1a9b      	subgt	r3, r3, r2
 8012c80:	18ed      	addgt	r5, r5, r3
 8012c82:	2600      	movs	r6, #0
 8012c84:	341a      	adds	r4, #26
 8012c86:	42b5      	cmp	r5, r6
 8012c88:	d11a      	bne.n	8012cc0 <_printf_common+0xc8>
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	e008      	b.n	8012ca0 <_printf_common+0xa8>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	4652      	mov	r2, sl
 8012c92:	4641      	mov	r1, r8
 8012c94:	4638      	mov	r0, r7
 8012c96:	47c8      	blx	r9
 8012c98:	3001      	adds	r0, #1
 8012c9a:	d103      	bne.n	8012ca4 <_printf_common+0xac>
 8012c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ca4:	3501      	adds	r5, #1
 8012ca6:	e7c6      	b.n	8012c36 <_printf_common+0x3e>
 8012ca8:	18e1      	adds	r1, r4, r3
 8012caa:	1c5a      	adds	r2, r3, #1
 8012cac:	2030      	movs	r0, #48	@ 0x30
 8012cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012cb2:	4422      	add	r2, r4
 8012cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012cbc:	3302      	adds	r3, #2
 8012cbe:	e7c7      	b.n	8012c50 <_printf_common+0x58>
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	4622      	mov	r2, r4
 8012cc4:	4641      	mov	r1, r8
 8012cc6:	4638      	mov	r0, r7
 8012cc8:	47c8      	blx	r9
 8012cca:	3001      	adds	r0, #1
 8012ccc:	d0e6      	beq.n	8012c9c <_printf_common+0xa4>
 8012cce:	3601      	adds	r6, #1
 8012cd0:	e7d9      	b.n	8012c86 <_printf_common+0x8e>
	...

08012cd4 <_printf_i>:
 8012cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cd8:	7e0f      	ldrb	r7, [r1, #24]
 8012cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012cdc:	2f78      	cmp	r7, #120	@ 0x78
 8012cde:	4691      	mov	r9, r2
 8012ce0:	4680      	mov	r8, r0
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	469a      	mov	sl, r3
 8012ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012cea:	d807      	bhi.n	8012cfc <_printf_i+0x28>
 8012cec:	2f62      	cmp	r7, #98	@ 0x62
 8012cee:	d80a      	bhi.n	8012d06 <_printf_i+0x32>
 8012cf0:	2f00      	cmp	r7, #0
 8012cf2:	f000 80d2 	beq.w	8012e9a <_printf_i+0x1c6>
 8012cf6:	2f58      	cmp	r7, #88	@ 0x58
 8012cf8:	f000 80b9 	beq.w	8012e6e <_printf_i+0x19a>
 8012cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012d04:	e03a      	b.n	8012d7c <_printf_i+0xa8>
 8012d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012d0a:	2b15      	cmp	r3, #21
 8012d0c:	d8f6      	bhi.n	8012cfc <_printf_i+0x28>
 8012d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8012d14 <_printf_i+0x40>)
 8012d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d14:	08012d6d 	.word	0x08012d6d
 8012d18:	08012d81 	.word	0x08012d81
 8012d1c:	08012cfd 	.word	0x08012cfd
 8012d20:	08012cfd 	.word	0x08012cfd
 8012d24:	08012cfd 	.word	0x08012cfd
 8012d28:	08012cfd 	.word	0x08012cfd
 8012d2c:	08012d81 	.word	0x08012d81
 8012d30:	08012cfd 	.word	0x08012cfd
 8012d34:	08012cfd 	.word	0x08012cfd
 8012d38:	08012cfd 	.word	0x08012cfd
 8012d3c:	08012cfd 	.word	0x08012cfd
 8012d40:	08012e81 	.word	0x08012e81
 8012d44:	08012dab 	.word	0x08012dab
 8012d48:	08012e3b 	.word	0x08012e3b
 8012d4c:	08012cfd 	.word	0x08012cfd
 8012d50:	08012cfd 	.word	0x08012cfd
 8012d54:	08012ea3 	.word	0x08012ea3
 8012d58:	08012cfd 	.word	0x08012cfd
 8012d5c:	08012dab 	.word	0x08012dab
 8012d60:	08012cfd 	.word	0x08012cfd
 8012d64:	08012cfd 	.word	0x08012cfd
 8012d68:	08012e43 	.word	0x08012e43
 8012d6c:	6833      	ldr	r3, [r6, #0]
 8012d6e:	1d1a      	adds	r2, r3, #4
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	6032      	str	r2, [r6, #0]
 8012d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e09d      	b.n	8012ebc <_printf_i+0x1e8>
 8012d80:	6833      	ldr	r3, [r6, #0]
 8012d82:	6820      	ldr	r0, [r4, #0]
 8012d84:	1d19      	adds	r1, r3, #4
 8012d86:	6031      	str	r1, [r6, #0]
 8012d88:	0606      	lsls	r6, r0, #24
 8012d8a:	d501      	bpl.n	8012d90 <_printf_i+0xbc>
 8012d8c:	681d      	ldr	r5, [r3, #0]
 8012d8e:	e003      	b.n	8012d98 <_printf_i+0xc4>
 8012d90:	0645      	lsls	r5, r0, #25
 8012d92:	d5fb      	bpl.n	8012d8c <_printf_i+0xb8>
 8012d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012d98:	2d00      	cmp	r5, #0
 8012d9a:	da03      	bge.n	8012da4 <_printf_i+0xd0>
 8012d9c:	232d      	movs	r3, #45	@ 0x2d
 8012d9e:	426d      	negs	r5, r5
 8012da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012da4:	4859      	ldr	r0, [pc, #356]	@ (8012f0c <_printf_i+0x238>)
 8012da6:	230a      	movs	r3, #10
 8012da8:	e011      	b.n	8012dce <_printf_i+0xfa>
 8012daa:	6821      	ldr	r1, [r4, #0]
 8012dac:	6833      	ldr	r3, [r6, #0]
 8012dae:	0608      	lsls	r0, r1, #24
 8012db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012db4:	d402      	bmi.n	8012dbc <_printf_i+0xe8>
 8012db6:	0649      	lsls	r1, r1, #25
 8012db8:	bf48      	it	mi
 8012dba:	b2ad      	uxthmi	r5, r5
 8012dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8012dbe:	4853      	ldr	r0, [pc, #332]	@ (8012f0c <_printf_i+0x238>)
 8012dc0:	6033      	str	r3, [r6, #0]
 8012dc2:	bf14      	ite	ne
 8012dc4:	230a      	movne	r3, #10
 8012dc6:	2308      	moveq	r3, #8
 8012dc8:	2100      	movs	r1, #0
 8012dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012dce:	6866      	ldr	r6, [r4, #4]
 8012dd0:	60a6      	str	r6, [r4, #8]
 8012dd2:	2e00      	cmp	r6, #0
 8012dd4:	bfa2      	ittt	ge
 8012dd6:	6821      	ldrge	r1, [r4, #0]
 8012dd8:	f021 0104 	bicge.w	r1, r1, #4
 8012ddc:	6021      	strge	r1, [r4, #0]
 8012dde:	b90d      	cbnz	r5, 8012de4 <_printf_i+0x110>
 8012de0:	2e00      	cmp	r6, #0
 8012de2:	d04b      	beq.n	8012e7c <_printf_i+0x1a8>
 8012de4:	4616      	mov	r6, r2
 8012de6:	fbb5 f1f3 	udiv	r1, r5, r3
 8012dea:	fb03 5711 	mls	r7, r3, r1, r5
 8012dee:	5dc7      	ldrb	r7, [r0, r7]
 8012df0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012df4:	462f      	mov	r7, r5
 8012df6:	42bb      	cmp	r3, r7
 8012df8:	460d      	mov	r5, r1
 8012dfa:	d9f4      	bls.n	8012de6 <_printf_i+0x112>
 8012dfc:	2b08      	cmp	r3, #8
 8012dfe:	d10b      	bne.n	8012e18 <_printf_i+0x144>
 8012e00:	6823      	ldr	r3, [r4, #0]
 8012e02:	07df      	lsls	r7, r3, #31
 8012e04:	d508      	bpl.n	8012e18 <_printf_i+0x144>
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	6861      	ldr	r1, [r4, #4]
 8012e0a:	4299      	cmp	r1, r3
 8012e0c:	bfde      	ittt	le
 8012e0e:	2330      	movle	r3, #48	@ 0x30
 8012e10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012e14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012e18:	1b92      	subs	r2, r2, r6
 8012e1a:	6122      	str	r2, [r4, #16]
 8012e1c:	f8cd a000 	str.w	sl, [sp]
 8012e20:	464b      	mov	r3, r9
 8012e22:	aa03      	add	r2, sp, #12
 8012e24:	4621      	mov	r1, r4
 8012e26:	4640      	mov	r0, r8
 8012e28:	f7ff fee6 	bl	8012bf8 <_printf_common>
 8012e2c:	3001      	adds	r0, #1
 8012e2e:	d14a      	bne.n	8012ec6 <_printf_i+0x1f2>
 8012e30:	f04f 30ff 	mov.w	r0, #4294967295
 8012e34:	b004      	add	sp, #16
 8012e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e3a:	6823      	ldr	r3, [r4, #0]
 8012e3c:	f043 0320 	orr.w	r3, r3, #32
 8012e40:	6023      	str	r3, [r4, #0]
 8012e42:	4833      	ldr	r0, [pc, #204]	@ (8012f10 <_printf_i+0x23c>)
 8012e44:	2778      	movs	r7, #120	@ 0x78
 8012e46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012e4a:	6823      	ldr	r3, [r4, #0]
 8012e4c:	6831      	ldr	r1, [r6, #0]
 8012e4e:	061f      	lsls	r7, r3, #24
 8012e50:	f851 5b04 	ldr.w	r5, [r1], #4
 8012e54:	d402      	bmi.n	8012e5c <_printf_i+0x188>
 8012e56:	065f      	lsls	r7, r3, #25
 8012e58:	bf48      	it	mi
 8012e5a:	b2ad      	uxthmi	r5, r5
 8012e5c:	6031      	str	r1, [r6, #0]
 8012e5e:	07d9      	lsls	r1, r3, #31
 8012e60:	bf44      	itt	mi
 8012e62:	f043 0320 	orrmi.w	r3, r3, #32
 8012e66:	6023      	strmi	r3, [r4, #0]
 8012e68:	b11d      	cbz	r5, 8012e72 <_printf_i+0x19e>
 8012e6a:	2310      	movs	r3, #16
 8012e6c:	e7ac      	b.n	8012dc8 <_printf_i+0xf4>
 8012e6e:	4827      	ldr	r0, [pc, #156]	@ (8012f0c <_printf_i+0x238>)
 8012e70:	e7e9      	b.n	8012e46 <_printf_i+0x172>
 8012e72:	6823      	ldr	r3, [r4, #0]
 8012e74:	f023 0320 	bic.w	r3, r3, #32
 8012e78:	6023      	str	r3, [r4, #0]
 8012e7a:	e7f6      	b.n	8012e6a <_printf_i+0x196>
 8012e7c:	4616      	mov	r6, r2
 8012e7e:	e7bd      	b.n	8012dfc <_printf_i+0x128>
 8012e80:	6833      	ldr	r3, [r6, #0]
 8012e82:	6825      	ldr	r5, [r4, #0]
 8012e84:	6961      	ldr	r1, [r4, #20]
 8012e86:	1d18      	adds	r0, r3, #4
 8012e88:	6030      	str	r0, [r6, #0]
 8012e8a:	062e      	lsls	r6, r5, #24
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	d501      	bpl.n	8012e94 <_printf_i+0x1c0>
 8012e90:	6019      	str	r1, [r3, #0]
 8012e92:	e002      	b.n	8012e9a <_printf_i+0x1c6>
 8012e94:	0668      	lsls	r0, r5, #25
 8012e96:	d5fb      	bpl.n	8012e90 <_printf_i+0x1bc>
 8012e98:	8019      	strh	r1, [r3, #0]
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	6123      	str	r3, [r4, #16]
 8012e9e:	4616      	mov	r6, r2
 8012ea0:	e7bc      	b.n	8012e1c <_printf_i+0x148>
 8012ea2:	6833      	ldr	r3, [r6, #0]
 8012ea4:	1d1a      	adds	r2, r3, #4
 8012ea6:	6032      	str	r2, [r6, #0]
 8012ea8:	681e      	ldr	r6, [r3, #0]
 8012eaa:	6862      	ldr	r2, [r4, #4]
 8012eac:	2100      	movs	r1, #0
 8012eae:	4630      	mov	r0, r6
 8012eb0:	f7ed f9be 	bl	8000230 <memchr>
 8012eb4:	b108      	cbz	r0, 8012eba <_printf_i+0x1e6>
 8012eb6:	1b80      	subs	r0, r0, r6
 8012eb8:	6060      	str	r0, [r4, #4]
 8012eba:	6863      	ldr	r3, [r4, #4]
 8012ebc:	6123      	str	r3, [r4, #16]
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ec4:	e7aa      	b.n	8012e1c <_printf_i+0x148>
 8012ec6:	6923      	ldr	r3, [r4, #16]
 8012ec8:	4632      	mov	r2, r6
 8012eca:	4649      	mov	r1, r9
 8012ecc:	4640      	mov	r0, r8
 8012ece:	47d0      	blx	sl
 8012ed0:	3001      	adds	r0, #1
 8012ed2:	d0ad      	beq.n	8012e30 <_printf_i+0x15c>
 8012ed4:	6823      	ldr	r3, [r4, #0]
 8012ed6:	079b      	lsls	r3, r3, #30
 8012ed8:	d413      	bmi.n	8012f02 <_printf_i+0x22e>
 8012eda:	68e0      	ldr	r0, [r4, #12]
 8012edc:	9b03      	ldr	r3, [sp, #12]
 8012ede:	4298      	cmp	r0, r3
 8012ee0:	bfb8      	it	lt
 8012ee2:	4618      	movlt	r0, r3
 8012ee4:	e7a6      	b.n	8012e34 <_printf_i+0x160>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	4632      	mov	r2, r6
 8012eea:	4649      	mov	r1, r9
 8012eec:	4640      	mov	r0, r8
 8012eee:	47d0      	blx	sl
 8012ef0:	3001      	adds	r0, #1
 8012ef2:	d09d      	beq.n	8012e30 <_printf_i+0x15c>
 8012ef4:	3501      	adds	r5, #1
 8012ef6:	68e3      	ldr	r3, [r4, #12]
 8012ef8:	9903      	ldr	r1, [sp, #12]
 8012efa:	1a5b      	subs	r3, r3, r1
 8012efc:	42ab      	cmp	r3, r5
 8012efe:	dcf2      	bgt.n	8012ee6 <_printf_i+0x212>
 8012f00:	e7eb      	b.n	8012eda <_printf_i+0x206>
 8012f02:	2500      	movs	r5, #0
 8012f04:	f104 0619 	add.w	r6, r4, #25
 8012f08:	e7f5      	b.n	8012ef6 <_printf_i+0x222>
 8012f0a:	bf00      	nop
 8012f0c:	080163ae 	.word	0x080163ae
 8012f10:	080163bf 	.word	0x080163bf

08012f14 <std>:
 8012f14:	2300      	movs	r3, #0
 8012f16:	b510      	push	{r4, lr}
 8012f18:	4604      	mov	r4, r0
 8012f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8012f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f22:	6083      	str	r3, [r0, #8]
 8012f24:	8181      	strh	r1, [r0, #12]
 8012f26:	6643      	str	r3, [r0, #100]	@ 0x64
 8012f28:	81c2      	strh	r2, [r0, #14]
 8012f2a:	6183      	str	r3, [r0, #24]
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	2208      	movs	r2, #8
 8012f30:	305c      	adds	r0, #92	@ 0x5c
 8012f32:	f000 f8f4 	bl	801311e <memset>
 8012f36:	4b0d      	ldr	r3, [pc, #52]	@ (8012f6c <std+0x58>)
 8012f38:	6263      	str	r3, [r4, #36]	@ 0x24
 8012f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012f70 <std+0x5c>)
 8012f3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012f74 <std+0x60>)
 8012f40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012f42:	4b0d      	ldr	r3, [pc, #52]	@ (8012f78 <std+0x64>)
 8012f44:	6323      	str	r3, [r4, #48]	@ 0x30
 8012f46:	4b0d      	ldr	r3, [pc, #52]	@ (8012f7c <std+0x68>)
 8012f48:	6224      	str	r4, [r4, #32]
 8012f4a:	429c      	cmp	r4, r3
 8012f4c:	d006      	beq.n	8012f5c <std+0x48>
 8012f4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012f52:	4294      	cmp	r4, r2
 8012f54:	d002      	beq.n	8012f5c <std+0x48>
 8012f56:	33d0      	adds	r3, #208	@ 0xd0
 8012f58:	429c      	cmp	r4, r3
 8012f5a:	d105      	bne.n	8012f68 <std+0x54>
 8012f5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f64:	f000 b9ac 	b.w	80132c0 <__retarget_lock_init_recursive>
 8012f68:	bd10      	pop	{r4, pc}
 8012f6a:	bf00      	nop
 8012f6c:	08013099 	.word	0x08013099
 8012f70:	080130bb 	.word	0x080130bb
 8012f74:	080130f3 	.word	0x080130f3
 8012f78:	08013117 	.word	0x08013117
 8012f7c:	2000058c 	.word	0x2000058c

08012f80 <stdio_exit_handler>:
 8012f80:	4a02      	ldr	r2, [pc, #8]	@ (8012f8c <stdio_exit_handler+0xc>)
 8012f82:	4903      	ldr	r1, [pc, #12]	@ (8012f90 <stdio_exit_handler+0x10>)
 8012f84:	4803      	ldr	r0, [pc, #12]	@ (8012f94 <stdio_exit_handler+0x14>)
 8012f86:	f000 b869 	b.w	801305c <_fwalk_sglue>
 8012f8a:	bf00      	nop
 8012f8c:	20000028 	.word	0x20000028
 8012f90:	08014821 	.word	0x08014821
 8012f94:	20000038 	.word	0x20000038

08012f98 <cleanup_stdio>:
 8012f98:	6841      	ldr	r1, [r0, #4]
 8012f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8012fcc <cleanup_stdio+0x34>)
 8012f9c:	4299      	cmp	r1, r3
 8012f9e:	b510      	push	{r4, lr}
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	d001      	beq.n	8012fa8 <cleanup_stdio+0x10>
 8012fa4:	f001 fc3c 	bl	8014820 <_fflush_r>
 8012fa8:	68a1      	ldr	r1, [r4, #8]
 8012faa:	4b09      	ldr	r3, [pc, #36]	@ (8012fd0 <cleanup_stdio+0x38>)
 8012fac:	4299      	cmp	r1, r3
 8012fae:	d002      	beq.n	8012fb6 <cleanup_stdio+0x1e>
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f001 fc35 	bl	8014820 <_fflush_r>
 8012fb6:	68e1      	ldr	r1, [r4, #12]
 8012fb8:	4b06      	ldr	r3, [pc, #24]	@ (8012fd4 <cleanup_stdio+0x3c>)
 8012fba:	4299      	cmp	r1, r3
 8012fbc:	d004      	beq.n	8012fc8 <cleanup_stdio+0x30>
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fc4:	f001 bc2c 	b.w	8014820 <_fflush_r>
 8012fc8:	bd10      	pop	{r4, pc}
 8012fca:	bf00      	nop
 8012fcc:	2000058c 	.word	0x2000058c
 8012fd0:	200005f4 	.word	0x200005f4
 8012fd4:	2000065c 	.word	0x2000065c

08012fd8 <global_stdio_init.part.0>:
 8012fd8:	b510      	push	{r4, lr}
 8012fda:	4b0b      	ldr	r3, [pc, #44]	@ (8013008 <global_stdio_init.part.0+0x30>)
 8012fdc:	4c0b      	ldr	r4, [pc, #44]	@ (801300c <global_stdio_init.part.0+0x34>)
 8012fde:	4a0c      	ldr	r2, [pc, #48]	@ (8013010 <global_stdio_init.part.0+0x38>)
 8012fe0:	601a      	str	r2, [r3, #0]
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	2104      	movs	r1, #4
 8012fe8:	f7ff ff94 	bl	8012f14 <std>
 8012fec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	2109      	movs	r1, #9
 8012ff4:	f7ff ff8e 	bl	8012f14 <std>
 8012ff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012ffc:	2202      	movs	r2, #2
 8012ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013002:	2112      	movs	r1, #18
 8013004:	f7ff bf86 	b.w	8012f14 <std>
 8013008:	200006c4 	.word	0x200006c4
 801300c:	2000058c 	.word	0x2000058c
 8013010:	08012f81 	.word	0x08012f81

08013014 <__sfp_lock_acquire>:
 8013014:	4801      	ldr	r0, [pc, #4]	@ (801301c <__sfp_lock_acquire+0x8>)
 8013016:	f000 b954 	b.w	80132c2 <__retarget_lock_acquire_recursive>
 801301a:	bf00      	nop
 801301c:	200006cd 	.word	0x200006cd

08013020 <__sfp_lock_release>:
 8013020:	4801      	ldr	r0, [pc, #4]	@ (8013028 <__sfp_lock_release+0x8>)
 8013022:	f000 b94f 	b.w	80132c4 <__retarget_lock_release_recursive>
 8013026:	bf00      	nop
 8013028:	200006cd 	.word	0x200006cd

0801302c <__sinit>:
 801302c:	b510      	push	{r4, lr}
 801302e:	4604      	mov	r4, r0
 8013030:	f7ff fff0 	bl	8013014 <__sfp_lock_acquire>
 8013034:	6a23      	ldr	r3, [r4, #32]
 8013036:	b11b      	cbz	r3, 8013040 <__sinit+0x14>
 8013038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801303c:	f7ff bff0 	b.w	8013020 <__sfp_lock_release>
 8013040:	4b04      	ldr	r3, [pc, #16]	@ (8013054 <__sinit+0x28>)
 8013042:	6223      	str	r3, [r4, #32]
 8013044:	4b04      	ldr	r3, [pc, #16]	@ (8013058 <__sinit+0x2c>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d1f5      	bne.n	8013038 <__sinit+0xc>
 801304c:	f7ff ffc4 	bl	8012fd8 <global_stdio_init.part.0>
 8013050:	e7f2      	b.n	8013038 <__sinit+0xc>
 8013052:	bf00      	nop
 8013054:	08012f99 	.word	0x08012f99
 8013058:	200006c4 	.word	0x200006c4

0801305c <_fwalk_sglue>:
 801305c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013060:	4607      	mov	r7, r0
 8013062:	4688      	mov	r8, r1
 8013064:	4614      	mov	r4, r2
 8013066:	2600      	movs	r6, #0
 8013068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801306c:	f1b9 0901 	subs.w	r9, r9, #1
 8013070:	d505      	bpl.n	801307e <_fwalk_sglue+0x22>
 8013072:	6824      	ldr	r4, [r4, #0]
 8013074:	2c00      	cmp	r4, #0
 8013076:	d1f7      	bne.n	8013068 <_fwalk_sglue+0xc>
 8013078:	4630      	mov	r0, r6
 801307a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801307e:	89ab      	ldrh	r3, [r5, #12]
 8013080:	2b01      	cmp	r3, #1
 8013082:	d907      	bls.n	8013094 <_fwalk_sglue+0x38>
 8013084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013088:	3301      	adds	r3, #1
 801308a:	d003      	beq.n	8013094 <_fwalk_sglue+0x38>
 801308c:	4629      	mov	r1, r5
 801308e:	4638      	mov	r0, r7
 8013090:	47c0      	blx	r8
 8013092:	4306      	orrs	r6, r0
 8013094:	3568      	adds	r5, #104	@ 0x68
 8013096:	e7e9      	b.n	801306c <_fwalk_sglue+0x10>

08013098 <__sread>:
 8013098:	b510      	push	{r4, lr}
 801309a:	460c      	mov	r4, r1
 801309c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130a0:	f000 f89c 	bl	80131dc <_read_r>
 80130a4:	2800      	cmp	r0, #0
 80130a6:	bfab      	itete	ge
 80130a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80130aa:	89a3      	ldrhlt	r3, [r4, #12]
 80130ac:	181b      	addge	r3, r3, r0
 80130ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80130b2:	bfac      	ite	ge
 80130b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80130b6:	81a3      	strhlt	r3, [r4, #12]
 80130b8:	bd10      	pop	{r4, pc}

080130ba <__swrite>:
 80130ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130be:	461f      	mov	r7, r3
 80130c0:	898b      	ldrh	r3, [r1, #12]
 80130c2:	05db      	lsls	r3, r3, #23
 80130c4:	4605      	mov	r5, r0
 80130c6:	460c      	mov	r4, r1
 80130c8:	4616      	mov	r6, r2
 80130ca:	d505      	bpl.n	80130d8 <__swrite+0x1e>
 80130cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130d0:	2302      	movs	r3, #2
 80130d2:	2200      	movs	r2, #0
 80130d4:	f000 f870 	bl	80131b8 <_lseek_r>
 80130d8:	89a3      	ldrh	r3, [r4, #12]
 80130da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80130e2:	81a3      	strh	r3, [r4, #12]
 80130e4:	4632      	mov	r2, r6
 80130e6:	463b      	mov	r3, r7
 80130e8:	4628      	mov	r0, r5
 80130ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130ee:	f000 b8ab 	b.w	8013248 <_write_r>

080130f2 <__sseek>:
 80130f2:	b510      	push	{r4, lr}
 80130f4:	460c      	mov	r4, r1
 80130f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130fa:	f000 f85d 	bl	80131b8 <_lseek_r>
 80130fe:	1c43      	adds	r3, r0, #1
 8013100:	89a3      	ldrh	r3, [r4, #12]
 8013102:	bf15      	itete	ne
 8013104:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013106:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801310a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801310e:	81a3      	strheq	r3, [r4, #12]
 8013110:	bf18      	it	ne
 8013112:	81a3      	strhne	r3, [r4, #12]
 8013114:	bd10      	pop	{r4, pc}

08013116 <__sclose>:
 8013116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801311a:	f000 b83d 	b.w	8013198 <_close_r>

0801311e <memset>:
 801311e:	4402      	add	r2, r0
 8013120:	4603      	mov	r3, r0
 8013122:	4293      	cmp	r3, r2
 8013124:	d100      	bne.n	8013128 <memset+0xa>
 8013126:	4770      	bx	lr
 8013128:	f803 1b01 	strb.w	r1, [r3], #1
 801312c:	e7f9      	b.n	8013122 <memset+0x4>

0801312e <_raise_r>:
 801312e:	291f      	cmp	r1, #31
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	4605      	mov	r5, r0
 8013134:	460c      	mov	r4, r1
 8013136:	d904      	bls.n	8013142 <_raise_r+0x14>
 8013138:	2316      	movs	r3, #22
 801313a:	6003      	str	r3, [r0, #0]
 801313c:	f04f 30ff 	mov.w	r0, #4294967295
 8013140:	bd38      	pop	{r3, r4, r5, pc}
 8013142:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013144:	b112      	cbz	r2, 801314c <_raise_r+0x1e>
 8013146:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801314a:	b94b      	cbnz	r3, 8013160 <_raise_r+0x32>
 801314c:	4628      	mov	r0, r5
 801314e:	f000 f869 	bl	8013224 <_getpid_r>
 8013152:	4622      	mov	r2, r4
 8013154:	4601      	mov	r1, r0
 8013156:	4628      	mov	r0, r5
 8013158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801315c:	f000 b850 	b.w	8013200 <_kill_r>
 8013160:	2b01      	cmp	r3, #1
 8013162:	d00a      	beq.n	801317a <_raise_r+0x4c>
 8013164:	1c59      	adds	r1, r3, #1
 8013166:	d103      	bne.n	8013170 <_raise_r+0x42>
 8013168:	2316      	movs	r3, #22
 801316a:	6003      	str	r3, [r0, #0]
 801316c:	2001      	movs	r0, #1
 801316e:	e7e7      	b.n	8013140 <_raise_r+0x12>
 8013170:	2100      	movs	r1, #0
 8013172:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013176:	4620      	mov	r0, r4
 8013178:	4798      	blx	r3
 801317a:	2000      	movs	r0, #0
 801317c:	e7e0      	b.n	8013140 <_raise_r+0x12>
	...

08013180 <raise>:
 8013180:	4b02      	ldr	r3, [pc, #8]	@ (801318c <raise+0xc>)
 8013182:	4601      	mov	r1, r0
 8013184:	6818      	ldr	r0, [r3, #0]
 8013186:	f7ff bfd2 	b.w	801312e <_raise_r>
 801318a:	bf00      	nop
 801318c:	20000034 	.word	0x20000034

08013190 <_localeconv_r>:
 8013190:	4800      	ldr	r0, [pc, #0]	@ (8013194 <_localeconv_r+0x4>)
 8013192:	4770      	bx	lr
 8013194:	20000174 	.word	0x20000174

08013198 <_close_r>:
 8013198:	b538      	push	{r3, r4, r5, lr}
 801319a:	4d06      	ldr	r5, [pc, #24]	@ (80131b4 <_close_r+0x1c>)
 801319c:	2300      	movs	r3, #0
 801319e:	4604      	mov	r4, r0
 80131a0:	4608      	mov	r0, r1
 80131a2:	602b      	str	r3, [r5, #0]
 80131a4:	f7fa facc 	bl	800d740 <_close>
 80131a8:	1c43      	adds	r3, r0, #1
 80131aa:	d102      	bne.n	80131b2 <_close_r+0x1a>
 80131ac:	682b      	ldr	r3, [r5, #0]
 80131ae:	b103      	cbz	r3, 80131b2 <_close_r+0x1a>
 80131b0:	6023      	str	r3, [r4, #0]
 80131b2:	bd38      	pop	{r3, r4, r5, pc}
 80131b4:	200006c8 	.word	0x200006c8

080131b8 <_lseek_r>:
 80131b8:	b538      	push	{r3, r4, r5, lr}
 80131ba:	4d07      	ldr	r5, [pc, #28]	@ (80131d8 <_lseek_r+0x20>)
 80131bc:	4604      	mov	r4, r0
 80131be:	4608      	mov	r0, r1
 80131c0:	4611      	mov	r1, r2
 80131c2:	2200      	movs	r2, #0
 80131c4:	602a      	str	r2, [r5, #0]
 80131c6:	461a      	mov	r2, r3
 80131c8:	f7fa fae1 	bl	800d78e <_lseek>
 80131cc:	1c43      	adds	r3, r0, #1
 80131ce:	d102      	bne.n	80131d6 <_lseek_r+0x1e>
 80131d0:	682b      	ldr	r3, [r5, #0]
 80131d2:	b103      	cbz	r3, 80131d6 <_lseek_r+0x1e>
 80131d4:	6023      	str	r3, [r4, #0]
 80131d6:	bd38      	pop	{r3, r4, r5, pc}
 80131d8:	200006c8 	.word	0x200006c8

080131dc <_read_r>:
 80131dc:	b538      	push	{r3, r4, r5, lr}
 80131de:	4d07      	ldr	r5, [pc, #28]	@ (80131fc <_read_r+0x20>)
 80131e0:	4604      	mov	r4, r0
 80131e2:	4608      	mov	r0, r1
 80131e4:	4611      	mov	r1, r2
 80131e6:	2200      	movs	r2, #0
 80131e8:	602a      	str	r2, [r5, #0]
 80131ea:	461a      	mov	r2, r3
 80131ec:	f7fa fa6f 	bl	800d6ce <_read>
 80131f0:	1c43      	adds	r3, r0, #1
 80131f2:	d102      	bne.n	80131fa <_read_r+0x1e>
 80131f4:	682b      	ldr	r3, [r5, #0]
 80131f6:	b103      	cbz	r3, 80131fa <_read_r+0x1e>
 80131f8:	6023      	str	r3, [r4, #0]
 80131fa:	bd38      	pop	{r3, r4, r5, pc}
 80131fc:	200006c8 	.word	0x200006c8

08013200 <_kill_r>:
 8013200:	b538      	push	{r3, r4, r5, lr}
 8013202:	4d07      	ldr	r5, [pc, #28]	@ (8013220 <_kill_r+0x20>)
 8013204:	2300      	movs	r3, #0
 8013206:	4604      	mov	r4, r0
 8013208:	4608      	mov	r0, r1
 801320a:	4611      	mov	r1, r2
 801320c:	602b      	str	r3, [r5, #0]
 801320e:	f7fa fa43 	bl	800d698 <_kill>
 8013212:	1c43      	adds	r3, r0, #1
 8013214:	d102      	bne.n	801321c <_kill_r+0x1c>
 8013216:	682b      	ldr	r3, [r5, #0]
 8013218:	b103      	cbz	r3, 801321c <_kill_r+0x1c>
 801321a:	6023      	str	r3, [r4, #0]
 801321c:	bd38      	pop	{r3, r4, r5, pc}
 801321e:	bf00      	nop
 8013220:	200006c8 	.word	0x200006c8

08013224 <_getpid_r>:
 8013224:	f7fa ba30 	b.w	800d688 <_getpid>

08013228 <_sbrk_r>:
 8013228:	b538      	push	{r3, r4, r5, lr}
 801322a:	4d06      	ldr	r5, [pc, #24]	@ (8013244 <_sbrk_r+0x1c>)
 801322c:	2300      	movs	r3, #0
 801322e:	4604      	mov	r4, r0
 8013230:	4608      	mov	r0, r1
 8013232:	602b      	str	r3, [r5, #0]
 8013234:	f7fa fab8 	bl	800d7a8 <_sbrk>
 8013238:	1c43      	adds	r3, r0, #1
 801323a:	d102      	bne.n	8013242 <_sbrk_r+0x1a>
 801323c:	682b      	ldr	r3, [r5, #0]
 801323e:	b103      	cbz	r3, 8013242 <_sbrk_r+0x1a>
 8013240:	6023      	str	r3, [r4, #0]
 8013242:	bd38      	pop	{r3, r4, r5, pc}
 8013244:	200006c8 	.word	0x200006c8

08013248 <_write_r>:
 8013248:	b538      	push	{r3, r4, r5, lr}
 801324a:	4d07      	ldr	r5, [pc, #28]	@ (8013268 <_write_r+0x20>)
 801324c:	4604      	mov	r4, r0
 801324e:	4608      	mov	r0, r1
 8013250:	4611      	mov	r1, r2
 8013252:	2200      	movs	r2, #0
 8013254:	602a      	str	r2, [r5, #0]
 8013256:	461a      	mov	r2, r3
 8013258:	f7fa fa56 	bl	800d708 <_write>
 801325c:	1c43      	adds	r3, r0, #1
 801325e:	d102      	bne.n	8013266 <_write_r+0x1e>
 8013260:	682b      	ldr	r3, [r5, #0]
 8013262:	b103      	cbz	r3, 8013266 <_write_r+0x1e>
 8013264:	6023      	str	r3, [r4, #0]
 8013266:	bd38      	pop	{r3, r4, r5, pc}
 8013268:	200006c8 	.word	0x200006c8

0801326c <__errno>:
 801326c:	4b01      	ldr	r3, [pc, #4]	@ (8013274 <__errno+0x8>)
 801326e:	6818      	ldr	r0, [r3, #0]
 8013270:	4770      	bx	lr
 8013272:	bf00      	nop
 8013274:	20000034 	.word	0x20000034

08013278 <__libc_init_array>:
 8013278:	b570      	push	{r4, r5, r6, lr}
 801327a:	4d0d      	ldr	r5, [pc, #52]	@ (80132b0 <__libc_init_array+0x38>)
 801327c:	4c0d      	ldr	r4, [pc, #52]	@ (80132b4 <__libc_init_array+0x3c>)
 801327e:	1b64      	subs	r4, r4, r5
 8013280:	10a4      	asrs	r4, r4, #2
 8013282:	2600      	movs	r6, #0
 8013284:	42a6      	cmp	r6, r4
 8013286:	d109      	bne.n	801329c <__libc_init_array+0x24>
 8013288:	4d0b      	ldr	r5, [pc, #44]	@ (80132b8 <__libc_init_array+0x40>)
 801328a:	4c0c      	ldr	r4, [pc, #48]	@ (80132bc <__libc_init_array+0x44>)
 801328c:	f001 fdb4 	bl	8014df8 <_init>
 8013290:	1b64      	subs	r4, r4, r5
 8013292:	10a4      	asrs	r4, r4, #2
 8013294:	2600      	movs	r6, #0
 8013296:	42a6      	cmp	r6, r4
 8013298:	d105      	bne.n	80132a6 <__libc_init_array+0x2e>
 801329a:	bd70      	pop	{r4, r5, r6, pc}
 801329c:	f855 3b04 	ldr.w	r3, [r5], #4
 80132a0:	4798      	blx	r3
 80132a2:	3601      	adds	r6, #1
 80132a4:	e7ee      	b.n	8013284 <__libc_init_array+0xc>
 80132a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80132aa:	4798      	blx	r3
 80132ac:	3601      	adds	r6, #1
 80132ae:	e7f2      	b.n	8013296 <__libc_init_array+0x1e>
 80132b0:	080186a0 	.word	0x080186a0
 80132b4:	080186a0 	.word	0x080186a0
 80132b8:	080186a0 	.word	0x080186a0
 80132bc:	080186a8 	.word	0x080186a8

080132c0 <__retarget_lock_init_recursive>:
 80132c0:	4770      	bx	lr

080132c2 <__retarget_lock_acquire_recursive>:
 80132c2:	4770      	bx	lr

080132c4 <__retarget_lock_release_recursive>:
 80132c4:	4770      	bx	lr

080132c6 <memcpy>:
 80132c6:	440a      	add	r2, r1
 80132c8:	4291      	cmp	r1, r2
 80132ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80132ce:	d100      	bne.n	80132d2 <memcpy+0xc>
 80132d0:	4770      	bx	lr
 80132d2:	b510      	push	{r4, lr}
 80132d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132dc:	4291      	cmp	r1, r2
 80132de:	d1f9      	bne.n	80132d4 <memcpy+0xe>
 80132e0:	bd10      	pop	{r4, pc}

080132e2 <quorem>:
 80132e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e6:	6903      	ldr	r3, [r0, #16]
 80132e8:	690c      	ldr	r4, [r1, #16]
 80132ea:	42a3      	cmp	r3, r4
 80132ec:	4607      	mov	r7, r0
 80132ee:	db7e      	blt.n	80133ee <quorem+0x10c>
 80132f0:	3c01      	subs	r4, #1
 80132f2:	f101 0814 	add.w	r8, r1, #20
 80132f6:	00a3      	lsls	r3, r4, #2
 80132f8:	f100 0514 	add.w	r5, r0, #20
 80132fc:	9300      	str	r3, [sp, #0]
 80132fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013302:	9301      	str	r3, [sp, #4]
 8013304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801330c:	3301      	adds	r3, #1
 801330e:	429a      	cmp	r2, r3
 8013310:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013314:	fbb2 f6f3 	udiv	r6, r2, r3
 8013318:	d32e      	bcc.n	8013378 <quorem+0x96>
 801331a:	f04f 0a00 	mov.w	sl, #0
 801331e:	46c4      	mov	ip, r8
 8013320:	46ae      	mov	lr, r5
 8013322:	46d3      	mov	fp, sl
 8013324:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013328:	b298      	uxth	r0, r3
 801332a:	fb06 a000 	mla	r0, r6, r0, sl
 801332e:	0c02      	lsrs	r2, r0, #16
 8013330:	0c1b      	lsrs	r3, r3, #16
 8013332:	fb06 2303 	mla	r3, r6, r3, r2
 8013336:	f8de 2000 	ldr.w	r2, [lr]
 801333a:	b280      	uxth	r0, r0
 801333c:	b292      	uxth	r2, r2
 801333e:	1a12      	subs	r2, r2, r0
 8013340:	445a      	add	r2, fp
 8013342:	f8de 0000 	ldr.w	r0, [lr]
 8013346:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801334a:	b29b      	uxth	r3, r3
 801334c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013350:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013354:	b292      	uxth	r2, r2
 8013356:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801335a:	45e1      	cmp	r9, ip
 801335c:	f84e 2b04 	str.w	r2, [lr], #4
 8013360:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013364:	d2de      	bcs.n	8013324 <quorem+0x42>
 8013366:	9b00      	ldr	r3, [sp, #0]
 8013368:	58eb      	ldr	r3, [r5, r3]
 801336a:	b92b      	cbnz	r3, 8013378 <quorem+0x96>
 801336c:	9b01      	ldr	r3, [sp, #4]
 801336e:	3b04      	subs	r3, #4
 8013370:	429d      	cmp	r5, r3
 8013372:	461a      	mov	r2, r3
 8013374:	d32f      	bcc.n	80133d6 <quorem+0xf4>
 8013376:	613c      	str	r4, [r7, #16]
 8013378:	4638      	mov	r0, r7
 801337a:	f001 f8c5 	bl	8014508 <__mcmp>
 801337e:	2800      	cmp	r0, #0
 8013380:	db25      	blt.n	80133ce <quorem+0xec>
 8013382:	4629      	mov	r1, r5
 8013384:	2000      	movs	r0, #0
 8013386:	f858 2b04 	ldr.w	r2, [r8], #4
 801338a:	f8d1 c000 	ldr.w	ip, [r1]
 801338e:	fa1f fe82 	uxth.w	lr, r2
 8013392:	fa1f f38c 	uxth.w	r3, ip
 8013396:	eba3 030e 	sub.w	r3, r3, lr
 801339a:	4403      	add	r3, r0
 801339c:	0c12      	lsrs	r2, r2, #16
 801339e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80133a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133ac:	45c1      	cmp	r9, r8
 80133ae:	f841 3b04 	str.w	r3, [r1], #4
 80133b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80133b6:	d2e6      	bcs.n	8013386 <quorem+0xa4>
 80133b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80133c0:	b922      	cbnz	r2, 80133cc <quorem+0xea>
 80133c2:	3b04      	subs	r3, #4
 80133c4:	429d      	cmp	r5, r3
 80133c6:	461a      	mov	r2, r3
 80133c8:	d30b      	bcc.n	80133e2 <quorem+0x100>
 80133ca:	613c      	str	r4, [r7, #16]
 80133cc:	3601      	adds	r6, #1
 80133ce:	4630      	mov	r0, r6
 80133d0:	b003      	add	sp, #12
 80133d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d6:	6812      	ldr	r2, [r2, #0]
 80133d8:	3b04      	subs	r3, #4
 80133da:	2a00      	cmp	r2, #0
 80133dc:	d1cb      	bne.n	8013376 <quorem+0x94>
 80133de:	3c01      	subs	r4, #1
 80133e0:	e7c6      	b.n	8013370 <quorem+0x8e>
 80133e2:	6812      	ldr	r2, [r2, #0]
 80133e4:	3b04      	subs	r3, #4
 80133e6:	2a00      	cmp	r2, #0
 80133e8:	d1ef      	bne.n	80133ca <quorem+0xe8>
 80133ea:	3c01      	subs	r4, #1
 80133ec:	e7ea      	b.n	80133c4 <quorem+0xe2>
 80133ee:	2000      	movs	r0, #0
 80133f0:	e7ee      	b.n	80133d0 <quorem+0xee>
 80133f2:	0000      	movs	r0, r0
 80133f4:	0000      	movs	r0, r0
	...

080133f8 <_dtoa_r>:
 80133f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133fc:	69c7      	ldr	r7, [r0, #28]
 80133fe:	b099      	sub	sp, #100	@ 0x64
 8013400:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013404:	ec55 4b10 	vmov	r4, r5, d0
 8013408:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801340a:	9109      	str	r1, [sp, #36]	@ 0x24
 801340c:	4683      	mov	fp, r0
 801340e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013410:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013412:	b97f      	cbnz	r7, 8013434 <_dtoa_r+0x3c>
 8013414:	2010      	movs	r0, #16
 8013416:	f7ff f859 	bl	80124cc <malloc>
 801341a:	4602      	mov	r2, r0
 801341c:	f8cb 001c 	str.w	r0, [fp, #28]
 8013420:	b920      	cbnz	r0, 801342c <_dtoa_r+0x34>
 8013422:	4ba7      	ldr	r3, [pc, #668]	@ (80136c0 <_dtoa_r+0x2c8>)
 8013424:	21ef      	movs	r1, #239	@ 0xef
 8013426:	48a7      	ldr	r0, [pc, #668]	@ (80136c4 <_dtoa_r+0x2cc>)
 8013428:	f001 fa22 	bl	8014870 <__assert_func>
 801342c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013430:	6007      	str	r7, [r0, #0]
 8013432:	60c7      	str	r7, [r0, #12]
 8013434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013438:	6819      	ldr	r1, [r3, #0]
 801343a:	b159      	cbz	r1, 8013454 <_dtoa_r+0x5c>
 801343c:	685a      	ldr	r2, [r3, #4]
 801343e:	604a      	str	r2, [r1, #4]
 8013440:	2301      	movs	r3, #1
 8013442:	4093      	lsls	r3, r2
 8013444:	608b      	str	r3, [r1, #8]
 8013446:	4658      	mov	r0, fp
 8013448:	f000 fe24 	bl	8014094 <_Bfree>
 801344c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013450:	2200      	movs	r2, #0
 8013452:	601a      	str	r2, [r3, #0]
 8013454:	1e2b      	subs	r3, r5, #0
 8013456:	bfb9      	ittee	lt
 8013458:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801345c:	9303      	strlt	r3, [sp, #12]
 801345e:	2300      	movge	r3, #0
 8013460:	6033      	strge	r3, [r6, #0]
 8013462:	9f03      	ldr	r7, [sp, #12]
 8013464:	4b98      	ldr	r3, [pc, #608]	@ (80136c8 <_dtoa_r+0x2d0>)
 8013466:	bfbc      	itt	lt
 8013468:	2201      	movlt	r2, #1
 801346a:	6032      	strlt	r2, [r6, #0]
 801346c:	43bb      	bics	r3, r7
 801346e:	d112      	bne.n	8013496 <_dtoa_r+0x9e>
 8013470:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013472:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013476:	6013      	str	r3, [r2, #0]
 8013478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801347c:	4323      	orrs	r3, r4
 801347e:	f000 854d 	beq.w	8013f1c <_dtoa_r+0xb24>
 8013482:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013484:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80136dc <_dtoa_r+0x2e4>
 8013488:	2b00      	cmp	r3, #0
 801348a:	f000 854f 	beq.w	8013f2c <_dtoa_r+0xb34>
 801348e:	f10a 0303 	add.w	r3, sl, #3
 8013492:	f000 bd49 	b.w	8013f28 <_dtoa_r+0xb30>
 8013496:	ed9d 7b02 	vldr	d7, [sp, #8]
 801349a:	2200      	movs	r2, #0
 801349c:	ec51 0b17 	vmov	r0, r1, d7
 80134a0:	2300      	movs	r3, #0
 80134a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80134a6:	f7ed fb3f 	bl	8000b28 <__aeabi_dcmpeq>
 80134aa:	4680      	mov	r8, r0
 80134ac:	b158      	cbz	r0, 80134c6 <_dtoa_r+0xce>
 80134ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80134b0:	2301      	movs	r3, #1
 80134b2:	6013      	str	r3, [r2, #0]
 80134b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80134b6:	b113      	cbz	r3, 80134be <_dtoa_r+0xc6>
 80134b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80134ba:	4b84      	ldr	r3, [pc, #528]	@ (80136cc <_dtoa_r+0x2d4>)
 80134bc:	6013      	str	r3, [r2, #0]
 80134be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80136e0 <_dtoa_r+0x2e8>
 80134c2:	f000 bd33 	b.w	8013f2c <_dtoa_r+0xb34>
 80134c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80134ca:	aa16      	add	r2, sp, #88	@ 0x58
 80134cc:	a917      	add	r1, sp, #92	@ 0x5c
 80134ce:	4658      	mov	r0, fp
 80134d0:	f001 f8ca 	bl	8014668 <__d2b>
 80134d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80134d8:	4681      	mov	r9, r0
 80134da:	2e00      	cmp	r6, #0
 80134dc:	d077      	beq.n	80135ce <_dtoa_r+0x1d6>
 80134de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80134e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80134e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80134ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80134f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80134f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80134f8:	4619      	mov	r1, r3
 80134fa:	2200      	movs	r2, #0
 80134fc:	4b74      	ldr	r3, [pc, #464]	@ (80136d0 <_dtoa_r+0x2d8>)
 80134fe:	f7ec fef3 	bl	80002e8 <__aeabi_dsub>
 8013502:	a369      	add	r3, pc, #420	@ (adr r3, 80136a8 <_dtoa_r+0x2b0>)
 8013504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013508:	f7ed f8a6 	bl	8000658 <__aeabi_dmul>
 801350c:	a368      	add	r3, pc, #416	@ (adr r3, 80136b0 <_dtoa_r+0x2b8>)
 801350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013512:	f7ec feeb 	bl	80002ec <__adddf3>
 8013516:	4604      	mov	r4, r0
 8013518:	4630      	mov	r0, r6
 801351a:	460d      	mov	r5, r1
 801351c:	f7ed f832 	bl	8000584 <__aeabi_i2d>
 8013520:	a365      	add	r3, pc, #404	@ (adr r3, 80136b8 <_dtoa_r+0x2c0>)
 8013522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013526:	f7ed f897 	bl	8000658 <__aeabi_dmul>
 801352a:	4602      	mov	r2, r0
 801352c:	460b      	mov	r3, r1
 801352e:	4620      	mov	r0, r4
 8013530:	4629      	mov	r1, r5
 8013532:	f7ec fedb 	bl	80002ec <__adddf3>
 8013536:	4604      	mov	r4, r0
 8013538:	460d      	mov	r5, r1
 801353a:	f7ed fb3d 	bl	8000bb8 <__aeabi_d2iz>
 801353e:	2200      	movs	r2, #0
 8013540:	4607      	mov	r7, r0
 8013542:	2300      	movs	r3, #0
 8013544:	4620      	mov	r0, r4
 8013546:	4629      	mov	r1, r5
 8013548:	f7ed faf8 	bl	8000b3c <__aeabi_dcmplt>
 801354c:	b140      	cbz	r0, 8013560 <_dtoa_r+0x168>
 801354e:	4638      	mov	r0, r7
 8013550:	f7ed f818 	bl	8000584 <__aeabi_i2d>
 8013554:	4622      	mov	r2, r4
 8013556:	462b      	mov	r3, r5
 8013558:	f7ed fae6 	bl	8000b28 <__aeabi_dcmpeq>
 801355c:	b900      	cbnz	r0, 8013560 <_dtoa_r+0x168>
 801355e:	3f01      	subs	r7, #1
 8013560:	2f16      	cmp	r7, #22
 8013562:	d851      	bhi.n	8013608 <_dtoa_r+0x210>
 8013564:	4b5b      	ldr	r3, [pc, #364]	@ (80136d4 <_dtoa_r+0x2dc>)
 8013566:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013572:	f7ed fae3 	bl	8000b3c <__aeabi_dcmplt>
 8013576:	2800      	cmp	r0, #0
 8013578:	d048      	beq.n	801360c <_dtoa_r+0x214>
 801357a:	3f01      	subs	r7, #1
 801357c:	2300      	movs	r3, #0
 801357e:	9312      	str	r3, [sp, #72]	@ 0x48
 8013580:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013582:	1b9b      	subs	r3, r3, r6
 8013584:	1e5a      	subs	r2, r3, #1
 8013586:	bf44      	itt	mi
 8013588:	f1c3 0801 	rsbmi	r8, r3, #1
 801358c:	2300      	movmi	r3, #0
 801358e:	9208      	str	r2, [sp, #32]
 8013590:	bf54      	ite	pl
 8013592:	f04f 0800 	movpl.w	r8, #0
 8013596:	9308      	strmi	r3, [sp, #32]
 8013598:	2f00      	cmp	r7, #0
 801359a:	db39      	blt.n	8013610 <_dtoa_r+0x218>
 801359c:	9b08      	ldr	r3, [sp, #32]
 801359e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80135a0:	443b      	add	r3, r7
 80135a2:	9308      	str	r3, [sp, #32]
 80135a4:	2300      	movs	r3, #0
 80135a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80135a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135aa:	2b09      	cmp	r3, #9
 80135ac:	d864      	bhi.n	8013678 <_dtoa_r+0x280>
 80135ae:	2b05      	cmp	r3, #5
 80135b0:	bfc4      	itt	gt
 80135b2:	3b04      	subgt	r3, #4
 80135b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80135b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135b8:	f1a3 0302 	sub.w	r3, r3, #2
 80135bc:	bfcc      	ite	gt
 80135be:	2400      	movgt	r4, #0
 80135c0:	2401      	movle	r4, #1
 80135c2:	2b03      	cmp	r3, #3
 80135c4:	d863      	bhi.n	801368e <_dtoa_r+0x296>
 80135c6:	e8df f003 	tbb	[pc, r3]
 80135ca:	372a      	.short	0x372a
 80135cc:	5535      	.short	0x5535
 80135ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80135d2:	441e      	add	r6, r3
 80135d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80135d8:	2b20      	cmp	r3, #32
 80135da:	bfc1      	itttt	gt
 80135dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80135e0:	409f      	lslgt	r7, r3
 80135e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80135e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80135ea:	bfd6      	itet	le
 80135ec:	f1c3 0320 	rsble	r3, r3, #32
 80135f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80135f4:	fa04 f003 	lslle.w	r0, r4, r3
 80135f8:	f7ec ffb4 	bl	8000564 <__aeabi_ui2d>
 80135fc:	2201      	movs	r2, #1
 80135fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013602:	3e01      	subs	r6, #1
 8013604:	9214      	str	r2, [sp, #80]	@ 0x50
 8013606:	e777      	b.n	80134f8 <_dtoa_r+0x100>
 8013608:	2301      	movs	r3, #1
 801360a:	e7b8      	b.n	801357e <_dtoa_r+0x186>
 801360c:	9012      	str	r0, [sp, #72]	@ 0x48
 801360e:	e7b7      	b.n	8013580 <_dtoa_r+0x188>
 8013610:	427b      	negs	r3, r7
 8013612:	930a      	str	r3, [sp, #40]	@ 0x28
 8013614:	2300      	movs	r3, #0
 8013616:	eba8 0807 	sub.w	r8, r8, r7
 801361a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801361c:	e7c4      	b.n	80135a8 <_dtoa_r+0x1b0>
 801361e:	2300      	movs	r3, #0
 8013620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013624:	2b00      	cmp	r3, #0
 8013626:	dc35      	bgt.n	8013694 <_dtoa_r+0x29c>
 8013628:	2301      	movs	r3, #1
 801362a:	9300      	str	r3, [sp, #0]
 801362c:	9307      	str	r3, [sp, #28]
 801362e:	461a      	mov	r2, r3
 8013630:	920e      	str	r2, [sp, #56]	@ 0x38
 8013632:	e00b      	b.n	801364c <_dtoa_r+0x254>
 8013634:	2301      	movs	r3, #1
 8013636:	e7f3      	b.n	8013620 <_dtoa_r+0x228>
 8013638:	2300      	movs	r3, #0
 801363a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801363c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801363e:	18fb      	adds	r3, r7, r3
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	3301      	adds	r3, #1
 8013644:	2b01      	cmp	r3, #1
 8013646:	9307      	str	r3, [sp, #28]
 8013648:	bfb8      	it	lt
 801364a:	2301      	movlt	r3, #1
 801364c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013650:	2100      	movs	r1, #0
 8013652:	2204      	movs	r2, #4
 8013654:	f102 0514 	add.w	r5, r2, #20
 8013658:	429d      	cmp	r5, r3
 801365a:	d91f      	bls.n	801369c <_dtoa_r+0x2a4>
 801365c:	6041      	str	r1, [r0, #4]
 801365e:	4658      	mov	r0, fp
 8013660:	f000 fcd8 	bl	8014014 <_Balloc>
 8013664:	4682      	mov	sl, r0
 8013666:	2800      	cmp	r0, #0
 8013668:	d13c      	bne.n	80136e4 <_dtoa_r+0x2ec>
 801366a:	4b1b      	ldr	r3, [pc, #108]	@ (80136d8 <_dtoa_r+0x2e0>)
 801366c:	4602      	mov	r2, r0
 801366e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013672:	e6d8      	b.n	8013426 <_dtoa_r+0x2e>
 8013674:	2301      	movs	r3, #1
 8013676:	e7e0      	b.n	801363a <_dtoa_r+0x242>
 8013678:	2401      	movs	r4, #1
 801367a:	2300      	movs	r3, #0
 801367c:	9309      	str	r3, [sp, #36]	@ 0x24
 801367e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013680:	f04f 33ff 	mov.w	r3, #4294967295
 8013684:	9300      	str	r3, [sp, #0]
 8013686:	9307      	str	r3, [sp, #28]
 8013688:	2200      	movs	r2, #0
 801368a:	2312      	movs	r3, #18
 801368c:	e7d0      	b.n	8013630 <_dtoa_r+0x238>
 801368e:	2301      	movs	r3, #1
 8013690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013692:	e7f5      	b.n	8013680 <_dtoa_r+0x288>
 8013694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013696:	9300      	str	r3, [sp, #0]
 8013698:	9307      	str	r3, [sp, #28]
 801369a:	e7d7      	b.n	801364c <_dtoa_r+0x254>
 801369c:	3101      	adds	r1, #1
 801369e:	0052      	lsls	r2, r2, #1
 80136a0:	e7d8      	b.n	8013654 <_dtoa_r+0x25c>
 80136a2:	bf00      	nop
 80136a4:	f3af 8000 	nop.w
 80136a8:	636f4361 	.word	0x636f4361
 80136ac:	3fd287a7 	.word	0x3fd287a7
 80136b0:	8b60c8b3 	.word	0x8b60c8b3
 80136b4:	3fc68a28 	.word	0x3fc68a28
 80136b8:	509f79fb 	.word	0x509f79fb
 80136bc:	3fd34413 	.word	0x3fd34413
 80136c0:	080163dd 	.word	0x080163dd
 80136c4:	080163f4 	.word	0x080163f4
 80136c8:	7ff00000 	.word	0x7ff00000
 80136cc:	080163ad 	.word	0x080163ad
 80136d0:	3ff80000 	.word	0x3ff80000
 80136d4:	080164f0 	.word	0x080164f0
 80136d8:	0801644c 	.word	0x0801644c
 80136dc:	080163d9 	.word	0x080163d9
 80136e0:	080163ac 	.word	0x080163ac
 80136e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80136e8:	6018      	str	r0, [r3, #0]
 80136ea:	9b07      	ldr	r3, [sp, #28]
 80136ec:	2b0e      	cmp	r3, #14
 80136ee:	f200 80a4 	bhi.w	801383a <_dtoa_r+0x442>
 80136f2:	2c00      	cmp	r4, #0
 80136f4:	f000 80a1 	beq.w	801383a <_dtoa_r+0x442>
 80136f8:	2f00      	cmp	r7, #0
 80136fa:	dd33      	ble.n	8013764 <_dtoa_r+0x36c>
 80136fc:	4bad      	ldr	r3, [pc, #692]	@ (80139b4 <_dtoa_r+0x5bc>)
 80136fe:	f007 020f 	and.w	r2, r7, #15
 8013702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013706:	ed93 7b00 	vldr	d7, [r3]
 801370a:	05f8      	lsls	r0, r7, #23
 801370c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013710:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013714:	d516      	bpl.n	8013744 <_dtoa_r+0x34c>
 8013716:	4ba8      	ldr	r3, [pc, #672]	@ (80139b8 <_dtoa_r+0x5c0>)
 8013718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801371c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013720:	f7ed f8c4 	bl	80008ac <__aeabi_ddiv>
 8013724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013728:	f004 040f 	and.w	r4, r4, #15
 801372c:	2603      	movs	r6, #3
 801372e:	4da2      	ldr	r5, [pc, #648]	@ (80139b8 <_dtoa_r+0x5c0>)
 8013730:	b954      	cbnz	r4, 8013748 <_dtoa_r+0x350>
 8013732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801373a:	f7ed f8b7 	bl	80008ac <__aeabi_ddiv>
 801373e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013742:	e028      	b.n	8013796 <_dtoa_r+0x39e>
 8013744:	2602      	movs	r6, #2
 8013746:	e7f2      	b.n	801372e <_dtoa_r+0x336>
 8013748:	07e1      	lsls	r1, r4, #31
 801374a:	d508      	bpl.n	801375e <_dtoa_r+0x366>
 801374c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013750:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013754:	f7ec ff80 	bl	8000658 <__aeabi_dmul>
 8013758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801375c:	3601      	adds	r6, #1
 801375e:	1064      	asrs	r4, r4, #1
 8013760:	3508      	adds	r5, #8
 8013762:	e7e5      	b.n	8013730 <_dtoa_r+0x338>
 8013764:	f000 80d2 	beq.w	801390c <_dtoa_r+0x514>
 8013768:	427c      	negs	r4, r7
 801376a:	4b92      	ldr	r3, [pc, #584]	@ (80139b4 <_dtoa_r+0x5bc>)
 801376c:	4d92      	ldr	r5, [pc, #584]	@ (80139b8 <_dtoa_r+0x5c0>)
 801376e:	f004 020f 	and.w	r2, r4, #15
 8013772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801377e:	f7ec ff6b 	bl	8000658 <__aeabi_dmul>
 8013782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013786:	1124      	asrs	r4, r4, #4
 8013788:	2300      	movs	r3, #0
 801378a:	2602      	movs	r6, #2
 801378c:	2c00      	cmp	r4, #0
 801378e:	f040 80b2 	bne.w	80138f6 <_dtoa_r+0x4fe>
 8013792:	2b00      	cmp	r3, #0
 8013794:	d1d3      	bne.n	801373e <_dtoa_r+0x346>
 8013796:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013798:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801379c:	2b00      	cmp	r3, #0
 801379e:	f000 80b7 	beq.w	8013910 <_dtoa_r+0x518>
 80137a2:	4b86      	ldr	r3, [pc, #536]	@ (80139bc <_dtoa_r+0x5c4>)
 80137a4:	2200      	movs	r2, #0
 80137a6:	4620      	mov	r0, r4
 80137a8:	4629      	mov	r1, r5
 80137aa:	f7ed f9c7 	bl	8000b3c <__aeabi_dcmplt>
 80137ae:	2800      	cmp	r0, #0
 80137b0:	f000 80ae 	beq.w	8013910 <_dtoa_r+0x518>
 80137b4:	9b07      	ldr	r3, [sp, #28]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f000 80aa 	beq.w	8013910 <_dtoa_r+0x518>
 80137bc:	9b00      	ldr	r3, [sp, #0]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	dd37      	ble.n	8013832 <_dtoa_r+0x43a>
 80137c2:	1e7b      	subs	r3, r7, #1
 80137c4:	9304      	str	r3, [sp, #16]
 80137c6:	4620      	mov	r0, r4
 80137c8:	4b7d      	ldr	r3, [pc, #500]	@ (80139c0 <_dtoa_r+0x5c8>)
 80137ca:	2200      	movs	r2, #0
 80137cc:	4629      	mov	r1, r5
 80137ce:	f7ec ff43 	bl	8000658 <__aeabi_dmul>
 80137d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137d6:	9c00      	ldr	r4, [sp, #0]
 80137d8:	3601      	adds	r6, #1
 80137da:	4630      	mov	r0, r6
 80137dc:	f7ec fed2 	bl	8000584 <__aeabi_i2d>
 80137e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80137e4:	f7ec ff38 	bl	8000658 <__aeabi_dmul>
 80137e8:	4b76      	ldr	r3, [pc, #472]	@ (80139c4 <_dtoa_r+0x5cc>)
 80137ea:	2200      	movs	r2, #0
 80137ec:	f7ec fd7e 	bl	80002ec <__adddf3>
 80137f0:	4605      	mov	r5, r0
 80137f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80137f6:	2c00      	cmp	r4, #0
 80137f8:	f040 808d 	bne.w	8013916 <_dtoa_r+0x51e>
 80137fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013800:	4b71      	ldr	r3, [pc, #452]	@ (80139c8 <_dtoa_r+0x5d0>)
 8013802:	2200      	movs	r2, #0
 8013804:	f7ec fd70 	bl	80002e8 <__aeabi_dsub>
 8013808:	4602      	mov	r2, r0
 801380a:	460b      	mov	r3, r1
 801380c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013810:	462a      	mov	r2, r5
 8013812:	4633      	mov	r3, r6
 8013814:	f7ed f9b0 	bl	8000b78 <__aeabi_dcmpgt>
 8013818:	2800      	cmp	r0, #0
 801381a:	f040 828b 	bne.w	8013d34 <_dtoa_r+0x93c>
 801381e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013822:	462a      	mov	r2, r5
 8013824:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013828:	f7ed f988 	bl	8000b3c <__aeabi_dcmplt>
 801382c:	2800      	cmp	r0, #0
 801382e:	f040 8128 	bne.w	8013a82 <_dtoa_r+0x68a>
 8013832:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013836:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801383a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801383c:	2b00      	cmp	r3, #0
 801383e:	f2c0 815a 	blt.w	8013af6 <_dtoa_r+0x6fe>
 8013842:	2f0e      	cmp	r7, #14
 8013844:	f300 8157 	bgt.w	8013af6 <_dtoa_r+0x6fe>
 8013848:	4b5a      	ldr	r3, [pc, #360]	@ (80139b4 <_dtoa_r+0x5bc>)
 801384a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801384e:	ed93 7b00 	vldr	d7, [r3]
 8013852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013854:	2b00      	cmp	r3, #0
 8013856:	ed8d 7b00 	vstr	d7, [sp]
 801385a:	da03      	bge.n	8013864 <_dtoa_r+0x46c>
 801385c:	9b07      	ldr	r3, [sp, #28]
 801385e:	2b00      	cmp	r3, #0
 8013860:	f340 8101 	ble.w	8013a66 <_dtoa_r+0x66e>
 8013864:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013868:	4656      	mov	r6, sl
 801386a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801386e:	4620      	mov	r0, r4
 8013870:	4629      	mov	r1, r5
 8013872:	f7ed f81b 	bl	80008ac <__aeabi_ddiv>
 8013876:	f7ed f99f 	bl	8000bb8 <__aeabi_d2iz>
 801387a:	4680      	mov	r8, r0
 801387c:	f7ec fe82 	bl	8000584 <__aeabi_i2d>
 8013880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013884:	f7ec fee8 	bl	8000658 <__aeabi_dmul>
 8013888:	4602      	mov	r2, r0
 801388a:	460b      	mov	r3, r1
 801388c:	4620      	mov	r0, r4
 801388e:	4629      	mov	r1, r5
 8013890:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013894:	f7ec fd28 	bl	80002e8 <__aeabi_dsub>
 8013898:	f806 4b01 	strb.w	r4, [r6], #1
 801389c:	9d07      	ldr	r5, [sp, #28]
 801389e:	eba6 040a 	sub.w	r4, r6, sl
 80138a2:	42a5      	cmp	r5, r4
 80138a4:	4602      	mov	r2, r0
 80138a6:	460b      	mov	r3, r1
 80138a8:	f040 8117 	bne.w	8013ada <_dtoa_r+0x6e2>
 80138ac:	f7ec fd1e 	bl	80002ec <__adddf3>
 80138b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138b4:	4604      	mov	r4, r0
 80138b6:	460d      	mov	r5, r1
 80138b8:	f7ed f95e 	bl	8000b78 <__aeabi_dcmpgt>
 80138bc:	2800      	cmp	r0, #0
 80138be:	f040 80f9 	bne.w	8013ab4 <_dtoa_r+0x6bc>
 80138c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138c6:	4620      	mov	r0, r4
 80138c8:	4629      	mov	r1, r5
 80138ca:	f7ed f92d 	bl	8000b28 <__aeabi_dcmpeq>
 80138ce:	b118      	cbz	r0, 80138d8 <_dtoa_r+0x4e0>
 80138d0:	f018 0f01 	tst.w	r8, #1
 80138d4:	f040 80ee 	bne.w	8013ab4 <_dtoa_r+0x6bc>
 80138d8:	4649      	mov	r1, r9
 80138da:	4658      	mov	r0, fp
 80138dc:	f000 fbda 	bl	8014094 <_Bfree>
 80138e0:	2300      	movs	r3, #0
 80138e2:	7033      	strb	r3, [r6, #0]
 80138e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80138e6:	3701      	adds	r7, #1
 80138e8:	601f      	str	r7, [r3, #0]
 80138ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	f000 831d 	beq.w	8013f2c <_dtoa_r+0xb34>
 80138f2:	601e      	str	r6, [r3, #0]
 80138f4:	e31a      	b.n	8013f2c <_dtoa_r+0xb34>
 80138f6:	07e2      	lsls	r2, r4, #31
 80138f8:	d505      	bpl.n	8013906 <_dtoa_r+0x50e>
 80138fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80138fe:	f7ec feab 	bl	8000658 <__aeabi_dmul>
 8013902:	3601      	adds	r6, #1
 8013904:	2301      	movs	r3, #1
 8013906:	1064      	asrs	r4, r4, #1
 8013908:	3508      	adds	r5, #8
 801390a:	e73f      	b.n	801378c <_dtoa_r+0x394>
 801390c:	2602      	movs	r6, #2
 801390e:	e742      	b.n	8013796 <_dtoa_r+0x39e>
 8013910:	9c07      	ldr	r4, [sp, #28]
 8013912:	9704      	str	r7, [sp, #16]
 8013914:	e761      	b.n	80137da <_dtoa_r+0x3e2>
 8013916:	4b27      	ldr	r3, [pc, #156]	@ (80139b4 <_dtoa_r+0x5bc>)
 8013918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801391a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801391e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013922:	4454      	add	r4, sl
 8013924:	2900      	cmp	r1, #0
 8013926:	d053      	beq.n	80139d0 <_dtoa_r+0x5d8>
 8013928:	4928      	ldr	r1, [pc, #160]	@ (80139cc <_dtoa_r+0x5d4>)
 801392a:	2000      	movs	r0, #0
 801392c:	f7ec ffbe 	bl	80008ac <__aeabi_ddiv>
 8013930:	4633      	mov	r3, r6
 8013932:	462a      	mov	r2, r5
 8013934:	f7ec fcd8 	bl	80002e8 <__aeabi_dsub>
 8013938:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801393c:	4656      	mov	r6, sl
 801393e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013942:	f7ed f939 	bl	8000bb8 <__aeabi_d2iz>
 8013946:	4605      	mov	r5, r0
 8013948:	f7ec fe1c 	bl	8000584 <__aeabi_i2d>
 801394c:	4602      	mov	r2, r0
 801394e:	460b      	mov	r3, r1
 8013950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013954:	f7ec fcc8 	bl	80002e8 <__aeabi_dsub>
 8013958:	3530      	adds	r5, #48	@ 0x30
 801395a:	4602      	mov	r2, r0
 801395c:	460b      	mov	r3, r1
 801395e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013962:	f806 5b01 	strb.w	r5, [r6], #1
 8013966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801396a:	f7ed f8e7 	bl	8000b3c <__aeabi_dcmplt>
 801396e:	2800      	cmp	r0, #0
 8013970:	d171      	bne.n	8013a56 <_dtoa_r+0x65e>
 8013972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013976:	4911      	ldr	r1, [pc, #68]	@ (80139bc <_dtoa_r+0x5c4>)
 8013978:	2000      	movs	r0, #0
 801397a:	f7ec fcb5 	bl	80002e8 <__aeabi_dsub>
 801397e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013982:	f7ed f8db 	bl	8000b3c <__aeabi_dcmplt>
 8013986:	2800      	cmp	r0, #0
 8013988:	f040 8095 	bne.w	8013ab6 <_dtoa_r+0x6be>
 801398c:	42a6      	cmp	r6, r4
 801398e:	f43f af50 	beq.w	8013832 <_dtoa_r+0x43a>
 8013992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013996:	4b0a      	ldr	r3, [pc, #40]	@ (80139c0 <_dtoa_r+0x5c8>)
 8013998:	2200      	movs	r2, #0
 801399a:	f7ec fe5d 	bl	8000658 <__aeabi_dmul>
 801399e:	4b08      	ldr	r3, [pc, #32]	@ (80139c0 <_dtoa_r+0x5c8>)
 80139a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80139a4:	2200      	movs	r2, #0
 80139a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139aa:	f7ec fe55 	bl	8000658 <__aeabi_dmul>
 80139ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139b2:	e7c4      	b.n	801393e <_dtoa_r+0x546>
 80139b4:	080164f0 	.word	0x080164f0
 80139b8:	080164c8 	.word	0x080164c8
 80139bc:	3ff00000 	.word	0x3ff00000
 80139c0:	40240000 	.word	0x40240000
 80139c4:	401c0000 	.word	0x401c0000
 80139c8:	40140000 	.word	0x40140000
 80139cc:	3fe00000 	.word	0x3fe00000
 80139d0:	4631      	mov	r1, r6
 80139d2:	4628      	mov	r0, r5
 80139d4:	f7ec fe40 	bl	8000658 <__aeabi_dmul>
 80139d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80139dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80139de:	4656      	mov	r6, sl
 80139e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139e4:	f7ed f8e8 	bl	8000bb8 <__aeabi_d2iz>
 80139e8:	4605      	mov	r5, r0
 80139ea:	f7ec fdcb 	bl	8000584 <__aeabi_i2d>
 80139ee:	4602      	mov	r2, r0
 80139f0:	460b      	mov	r3, r1
 80139f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139f6:	f7ec fc77 	bl	80002e8 <__aeabi_dsub>
 80139fa:	3530      	adds	r5, #48	@ 0x30
 80139fc:	f806 5b01 	strb.w	r5, [r6], #1
 8013a00:	4602      	mov	r2, r0
 8013a02:	460b      	mov	r3, r1
 8013a04:	42a6      	cmp	r6, r4
 8013a06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013a0a:	f04f 0200 	mov.w	r2, #0
 8013a0e:	d124      	bne.n	8013a5a <_dtoa_r+0x662>
 8013a10:	4bac      	ldr	r3, [pc, #688]	@ (8013cc4 <_dtoa_r+0x8cc>)
 8013a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013a16:	f7ec fc69 	bl	80002ec <__adddf3>
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a22:	f7ed f8a9 	bl	8000b78 <__aeabi_dcmpgt>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d145      	bne.n	8013ab6 <_dtoa_r+0x6be>
 8013a2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013a2e:	49a5      	ldr	r1, [pc, #660]	@ (8013cc4 <_dtoa_r+0x8cc>)
 8013a30:	2000      	movs	r0, #0
 8013a32:	f7ec fc59 	bl	80002e8 <__aeabi_dsub>
 8013a36:	4602      	mov	r2, r0
 8013a38:	460b      	mov	r3, r1
 8013a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a3e:	f7ed f87d 	bl	8000b3c <__aeabi_dcmplt>
 8013a42:	2800      	cmp	r0, #0
 8013a44:	f43f aef5 	beq.w	8013832 <_dtoa_r+0x43a>
 8013a48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013a4a:	1e73      	subs	r3, r6, #1
 8013a4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8013a4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013a52:	2b30      	cmp	r3, #48	@ 0x30
 8013a54:	d0f8      	beq.n	8013a48 <_dtoa_r+0x650>
 8013a56:	9f04      	ldr	r7, [sp, #16]
 8013a58:	e73e      	b.n	80138d8 <_dtoa_r+0x4e0>
 8013a5a:	4b9b      	ldr	r3, [pc, #620]	@ (8013cc8 <_dtoa_r+0x8d0>)
 8013a5c:	f7ec fdfc 	bl	8000658 <__aeabi_dmul>
 8013a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a64:	e7bc      	b.n	80139e0 <_dtoa_r+0x5e8>
 8013a66:	d10c      	bne.n	8013a82 <_dtoa_r+0x68a>
 8013a68:	4b98      	ldr	r3, [pc, #608]	@ (8013ccc <_dtoa_r+0x8d4>)
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a70:	f7ec fdf2 	bl	8000658 <__aeabi_dmul>
 8013a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a78:	f7ed f874 	bl	8000b64 <__aeabi_dcmpge>
 8013a7c:	2800      	cmp	r0, #0
 8013a7e:	f000 8157 	beq.w	8013d30 <_dtoa_r+0x938>
 8013a82:	2400      	movs	r4, #0
 8013a84:	4625      	mov	r5, r4
 8013a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a88:	43db      	mvns	r3, r3
 8013a8a:	9304      	str	r3, [sp, #16]
 8013a8c:	4656      	mov	r6, sl
 8013a8e:	2700      	movs	r7, #0
 8013a90:	4621      	mov	r1, r4
 8013a92:	4658      	mov	r0, fp
 8013a94:	f000 fafe 	bl	8014094 <_Bfree>
 8013a98:	2d00      	cmp	r5, #0
 8013a9a:	d0dc      	beq.n	8013a56 <_dtoa_r+0x65e>
 8013a9c:	b12f      	cbz	r7, 8013aaa <_dtoa_r+0x6b2>
 8013a9e:	42af      	cmp	r7, r5
 8013aa0:	d003      	beq.n	8013aaa <_dtoa_r+0x6b2>
 8013aa2:	4639      	mov	r1, r7
 8013aa4:	4658      	mov	r0, fp
 8013aa6:	f000 faf5 	bl	8014094 <_Bfree>
 8013aaa:	4629      	mov	r1, r5
 8013aac:	4658      	mov	r0, fp
 8013aae:	f000 faf1 	bl	8014094 <_Bfree>
 8013ab2:	e7d0      	b.n	8013a56 <_dtoa_r+0x65e>
 8013ab4:	9704      	str	r7, [sp, #16]
 8013ab6:	4633      	mov	r3, r6
 8013ab8:	461e      	mov	r6, r3
 8013aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013abe:	2a39      	cmp	r2, #57	@ 0x39
 8013ac0:	d107      	bne.n	8013ad2 <_dtoa_r+0x6da>
 8013ac2:	459a      	cmp	sl, r3
 8013ac4:	d1f8      	bne.n	8013ab8 <_dtoa_r+0x6c0>
 8013ac6:	9a04      	ldr	r2, [sp, #16]
 8013ac8:	3201      	adds	r2, #1
 8013aca:	9204      	str	r2, [sp, #16]
 8013acc:	2230      	movs	r2, #48	@ 0x30
 8013ace:	f88a 2000 	strb.w	r2, [sl]
 8013ad2:	781a      	ldrb	r2, [r3, #0]
 8013ad4:	3201      	adds	r2, #1
 8013ad6:	701a      	strb	r2, [r3, #0]
 8013ad8:	e7bd      	b.n	8013a56 <_dtoa_r+0x65e>
 8013ada:	4b7b      	ldr	r3, [pc, #492]	@ (8013cc8 <_dtoa_r+0x8d0>)
 8013adc:	2200      	movs	r2, #0
 8013ade:	f7ec fdbb 	bl	8000658 <__aeabi_dmul>
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	4604      	mov	r4, r0
 8013ae8:	460d      	mov	r5, r1
 8013aea:	f7ed f81d 	bl	8000b28 <__aeabi_dcmpeq>
 8013aee:	2800      	cmp	r0, #0
 8013af0:	f43f aebb 	beq.w	801386a <_dtoa_r+0x472>
 8013af4:	e6f0      	b.n	80138d8 <_dtoa_r+0x4e0>
 8013af6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013af8:	2a00      	cmp	r2, #0
 8013afa:	f000 80db 	beq.w	8013cb4 <_dtoa_r+0x8bc>
 8013afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b00:	2a01      	cmp	r2, #1
 8013b02:	f300 80bf 	bgt.w	8013c84 <_dtoa_r+0x88c>
 8013b06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013b08:	2a00      	cmp	r2, #0
 8013b0a:	f000 80b7 	beq.w	8013c7c <_dtoa_r+0x884>
 8013b0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013b12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013b14:	4646      	mov	r6, r8
 8013b16:	9a08      	ldr	r2, [sp, #32]
 8013b18:	2101      	movs	r1, #1
 8013b1a:	441a      	add	r2, r3
 8013b1c:	4658      	mov	r0, fp
 8013b1e:	4498      	add	r8, r3
 8013b20:	9208      	str	r2, [sp, #32]
 8013b22:	f000 fb6b 	bl	80141fc <__i2b>
 8013b26:	4605      	mov	r5, r0
 8013b28:	b15e      	cbz	r6, 8013b42 <_dtoa_r+0x74a>
 8013b2a:	9b08      	ldr	r3, [sp, #32]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	dd08      	ble.n	8013b42 <_dtoa_r+0x74a>
 8013b30:	42b3      	cmp	r3, r6
 8013b32:	9a08      	ldr	r2, [sp, #32]
 8013b34:	bfa8      	it	ge
 8013b36:	4633      	movge	r3, r6
 8013b38:	eba8 0803 	sub.w	r8, r8, r3
 8013b3c:	1af6      	subs	r6, r6, r3
 8013b3e:	1ad3      	subs	r3, r2, r3
 8013b40:	9308      	str	r3, [sp, #32]
 8013b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b44:	b1f3      	cbz	r3, 8013b84 <_dtoa_r+0x78c>
 8013b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f000 80b7 	beq.w	8013cbc <_dtoa_r+0x8c4>
 8013b4e:	b18c      	cbz	r4, 8013b74 <_dtoa_r+0x77c>
 8013b50:	4629      	mov	r1, r5
 8013b52:	4622      	mov	r2, r4
 8013b54:	4658      	mov	r0, fp
 8013b56:	f000 fc11 	bl	801437c <__pow5mult>
 8013b5a:	464a      	mov	r2, r9
 8013b5c:	4601      	mov	r1, r0
 8013b5e:	4605      	mov	r5, r0
 8013b60:	4658      	mov	r0, fp
 8013b62:	f000 fb61 	bl	8014228 <__multiply>
 8013b66:	4649      	mov	r1, r9
 8013b68:	9004      	str	r0, [sp, #16]
 8013b6a:	4658      	mov	r0, fp
 8013b6c:	f000 fa92 	bl	8014094 <_Bfree>
 8013b70:	9b04      	ldr	r3, [sp, #16]
 8013b72:	4699      	mov	r9, r3
 8013b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b76:	1b1a      	subs	r2, r3, r4
 8013b78:	d004      	beq.n	8013b84 <_dtoa_r+0x78c>
 8013b7a:	4649      	mov	r1, r9
 8013b7c:	4658      	mov	r0, fp
 8013b7e:	f000 fbfd 	bl	801437c <__pow5mult>
 8013b82:	4681      	mov	r9, r0
 8013b84:	2101      	movs	r1, #1
 8013b86:	4658      	mov	r0, fp
 8013b88:	f000 fb38 	bl	80141fc <__i2b>
 8013b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b8e:	4604      	mov	r4, r0
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	f000 81cf 	beq.w	8013f34 <_dtoa_r+0xb3c>
 8013b96:	461a      	mov	r2, r3
 8013b98:	4601      	mov	r1, r0
 8013b9a:	4658      	mov	r0, fp
 8013b9c:	f000 fbee 	bl	801437c <__pow5mult>
 8013ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	f300 8095 	bgt.w	8013cd4 <_dtoa_r+0x8dc>
 8013baa:	9b02      	ldr	r3, [sp, #8]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f040 8087 	bne.w	8013cc0 <_dtoa_r+0x8c8>
 8013bb2:	9b03      	ldr	r3, [sp, #12]
 8013bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f040 8089 	bne.w	8013cd0 <_dtoa_r+0x8d8>
 8013bbe:	9b03      	ldr	r3, [sp, #12]
 8013bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013bc4:	0d1b      	lsrs	r3, r3, #20
 8013bc6:	051b      	lsls	r3, r3, #20
 8013bc8:	b12b      	cbz	r3, 8013bd6 <_dtoa_r+0x7de>
 8013bca:	9b08      	ldr	r3, [sp, #32]
 8013bcc:	3301      	adds	r3, #1
 8013bce:	9308      	str	r3, [sp, #32]
 8013bd0:	f108 0801 	add.w	r8, r8, #1
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f000 81b0 	beq.w	8013f40 <_dtoa_r+0xb48>
 8013be0:	6923      	ldr	r3, [r4, #16]
 8013be2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013be6:	6918      	ldr	r0, [r3, #16]
 8013be8:	f000 fabc 	bl	8014164 <__hi0bits>
 8013bec:	f1c0 0020 	rsb	r0, r0, #32
 8013bf0:	9b08      	ldr	r3, [sp, #32]
 8013bf2:	4418      	add	r0, r3
 8013bf4:	f010 001f 	ands.w	r0, r0, #31
 8013bf8:	d077      	beq.n	8013cea <_dtoa_r+0x8f2>
 8013bfa:	f1c0 0320 	rsb	r3, r0, #32
 8013bfe:	2b04      	cmp	r3, #4
 8013c00:	dd6b      	ble.n	8013cda <_dtoa_r+0x8e2>
 8013c02:	9b08      	ldr	r3, [sp, #32]
 8013c04:	f1c0 001c 	rsb	r0, r0, #28
 8013c08:	4403      	add	r3, r0
 8013c0a:	4480      	add	r8, r0
 8013c0c:	4406      	add	r6, r0
 8013c0e:	9308      	str	r3, [sp, #32]
 8013c10:	f1b8 0f00 	cmp.w	r8, #0
 8013c14:	dd05      	ble.n	8013c22 <_dtoa_r+0x82a>
 8013c16:	4649      	mov	r1, r9
 8013c18:	4642      	mov	r2, r8
 8013c1a:	4658      	mov	r0, fp
 8013c1c:	f000 fc08 	bl	8014430 <__lshift>
 8013c20:	4681      	mov	r9, r0
 8013c22:	9b08      	ldr	r3, [sp, #32]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	dd05      	ble.n	8013c34 <_dtoa_r+0x83c>
 8013c28:	4621      	mov	r1, r4
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	4658      	mov	r0, fp
 8013c2e:	f000 fbff 	bl	8014430 <__lshift>
 8013c32:	4604      	mov	r4, r0
 8013c34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d059      	beq.n	8013cee <_dtoa_r+0x8f6>
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	4648      	mov	r0, r9
 8013c3e:	f000 fc63 	bl	8014508 <__mcmp>
 8013c42:	2800      	cmp	r0, #0
 8013c44:	da53      	bge.n	8013cee <_dtoa_r+0x8f6>
 8013c46:	1e7b      	subs	r3, r7, #1
 8013c48:	9304      	str	r3, [sp, #16]
 8013c4a:	4649      	mov	r1, r9
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	220a      	movs	r2, #10
 8013c50:	4658      	mov	r0, fp
 8013c52:	f000 fa41 	bl	80140d8 <__multadd>
 8013c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c58:	4681      	mov	r9, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f000 8172 	beq.w	8013f44 <_dtoa_r+0xb4c>
 8013c60:	2300      	movs	r3, #0
 8013c62:	4629      	mov	r1, r5
 8013c64:	220a      	movs	r2, #10
 8013c66:	4658      	mov	r0, fp
 8013c68:	f000 fa36 	bl	80140d8 <__multadd>
 8013c6c:	9b00      	ldr	r3, [sp, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	4605      	mov	r5, r0
 8013c72:	dc67      	bgt.n	8013d44 <_dtoa_r+0x94c>
 8013c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c76:	2b02      	cmp	r3, #2
 8013c78:	dc41      	bgt.n	8013cfe <_dtoa_r+0x906>
 8013c7a:	e063      	b.n	8013d44 <_dtoa_r+0x94c>
 8013c7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013c7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013c82:	e746      	b.n	8013b12 <_dtoa_r+0x71a>
 8013c84:	9b07      	ldr	r3, [sp, #28]
 8013c86:	1e5c      	subs	r4, r3, #1
 8013c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c8a:	42a3      	cmp	r3, r4
 8013c8c:	bfbf      	itttt	lt
 8013c8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013c90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013c92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013c94:	1ae3      	sublt	r3, r4, r3
 8013c96:	bfb4      	ite	lt
 8013c98:	18d2      	addlt	r2, r2, r3
 8013c9a:	1b1c      	subge	r4, r3, r4
 8013c9c:	9b07      	ldr	r3, [sp, #28]
 8013c9e:	bfbc      	itt	lt
 8013ca0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013ca2:	2400      	movlt	r4, #0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	bfb5      	itete	lt
 8013ca8:	eba8 0603 	sublt.w	r6, r8, r3
 8013cac:	9b07      	ldrge	r3, [sp, #28]
 8013cae:	2300      	movlt	r3, #0
 8013cb0:	4646      	movge	r6, r8
 8013cb2:	e730      	b.n	8013b16 <_dtoa_r+0x71e>
 8013cb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013cb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013cb8:	4646      	mov	r6, r8
 8013cba:	e735      	b.n	8013b28 <_dtoa_r+0x730>
 8013cbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013cbe:	e75c      	b.n	8013b7a <_dtoa_r+0x782>
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	e788      	b.n	8013bd6 <_dtoa_r+0x7de>
 8013cc4:	3fe00000 	.word	0x3fe00000
 8013cc8:	40240000 	.word	0x40240000
 8013ccc:	40140000 	.word	0x40140000
 8013cd0:	9b02      	ldr	r3, [sp, #8]
 8013cd2:	e780      	b.n	8013bd6 <_dtoa_r+0x7de>
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013cd8:	e782      	b.n	8013be0 <_dtoa_r+0x7e8>
 8013cda:	d099      	beq.n	8013c10 <_dtoa_r+0x818>
 8013cdc:	9a08      	ldr	r2, [sp, #32]
 8013cde:	331c      	adds	r3, #28
 8013ce0:	441a      	add	r2, r3
 8013ce2:	4498      	add	r8, r3
 8013ce4:	441e      	add	r6, r3
 8013ce6:	9208      	str	r2, [sp, #32]
 8013ce8:	e792      	b.n	8013c10 <_dtoa_r+0x818>
 8013cea:	4603      	mov	r3, r0
 8013cec:	e7f6      	b.n	8013cdc <_dtoa_r+0x8e4>
 8013cee:	9b07      	ldr	r3, [sp, #28]
 8013cf0:	9704      	str	r7, [sp, #16]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	dc20      	bgt.n	8013d38 <_dtoa_r+0x940>
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cfa:	2b02      	cmp	r3, #2
 8013cfc:	dd1e      	ble.n	8013d3c <_dtoa_r+0x944>
 8013cfe:	9b00      	ldr	r3, [sp, #0]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	f47f aec0 	bne.w	8013a86 <_dtoa_r+0x68e>
 8013d06:	4621      	mov	r1, r4
 8013d08:	2205      	movs	r2, #5
 8013d0a:	4658      	mov	r0, fp
 8013d0c:	f000 f9e4 	bl	80140d8 <__multadd>
 8013d10:	4601      	mov	r1, r0
 8013d12:	4604      	mov	r4, r0
 8013d14:	4648      	mov	r0, r9
 8013d16:	f000 fbf7 	bl	8014508 <__mcmp>
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	f77f aeb3 	ble.w	8013a86 <_dtoa_r+0x68e>
 8013d20:	4656      	mov	r6, sl
 8013d22:	2331      	movs	r3, #49	@ 0x31
 8013d24:	f806 3b01 	strb.w	r3, [r6], #1
 8013d28:	9b04      	ldr	r3, [sp, #16]
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	9304      	str	r3, [sp, #16]
 8013d2e:	e6ae      	b.n	8013a8e <_dtoa_r+0x696>
 8013d30:	9c07      	ldr	r4, [sp, #28]
 8013d32:	9704      	str	r7, [sp, #16]
 8013d34:	4625      	mov	r5, r4
 8013d36:	e7f3      	b.n	8013d20 <_dtoa_r+0x928>
 8013d38:	9b07      	ldr	r3, [sp, #28]
 8013d3a:	9300      	str	r3, [sp, #0]
 8013d3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	f000 8104 	beq.w	8013f4c <_dtoa_r+0xb54>
 8013d44:	2e00      	cmp	r6, #0
 8013d46:	dd05      	ble.n	8013d54 <_dtoa_r+0x95c>
 8013d48:	4629      	mov	r1, r5
 8013d4a:	4632      	mov	r2, r6
 8013d4c:	4658      	mov	r0, fp
 8013d4e:	f000 fb6f 	bl	8014430 <__lshift>
 8013d52:	4605      	mov	r5, r0
 8013d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d05a      	beq.n	8013e10 <_dtoa_r+0xa18>
 8013d5a:	6869      	ldr	r1, [r5, #4]
 8013d5c:	4658      	mov	r0, fp
 8013d5e:	f000 f959 	bl	8014014 <_Balloc>
 8013d62:	4606      	mov	r6, r0
 8013d64:	b928      	cbnz	r0, 8013d72 <_dtoa_r+0x97a>
 8013d66:	4b84      	ldr	r3, [pc, #528]	@ (8013f78 <_dtoa_r+0xb80>)
 8013d68:	4602      	mov	r2, r0
 8013d6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013d6e:	f7ff bb5a 	b.w	8013426 <_dtoa_r+0x2e>
 8013d72:	692a      	ldr	r2, [r5, #16]
 8013d74:	3202      	adds	r2, #2
 8013d76:	0092      	lsls	r2, r2, #2
 8013d78:	f105 010c 	add.w	r1, r5, #12
 8013d7c:	300c      	adds	r0, #12
 8013d7e:	f7ff faa2 	bl	80132c6 <memcpy>
 8013d82:	2201      	movs	r2, #1
 8013d84:	4631      	mov	r1, r6
 8013d86:	4658      	mov	r0, fp
 8013d88:	f000 fb52 	bl	8014430 <__lshift>
 8013d8c:	f10a 0301 	add.w	r3, sl, #1
 8013d90:	9307      	str	r3, [sp, #28]
 8013d92:	9b00      	ldr	r3, [sp, #0]
 8013d94:	4453      	add	r3, sl
 8013d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013d98:	9b02      	ldr	r3, [sp, #8]
 8013d9a:	f003 0301 	and.w	r3, r3, #1
 8013d9e:	462f      	mov	r7, r5
 8013da0:	930a      	str	r3, [sp, #40]	@ 0x28
 8013da2:	4605      	mov	r5, r0
 8013da4:	9b07      	ldr	r3, [sp, #28]
 8013da6:	4621      	mov	r1, r4
 8013da8:	3b01      	subs	r3, #1
 8013daa:	4648      	mov	r0, r9
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	f7ff fa98 	bl	80132e2 <quorem>
 8013db2:	4639      	mov	r1, r7
 8013db4:	9002      	str	r0, [sp, #8]
 8013db6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013dba:	4648      	mov	r0, r9
 8013dbc:	f000 fba4 	bl	8014508 <__mcmp>
 8013dc0:	462a      	mov	r2, r5
 8013dc2:	9008      	str	r0, [sp, #32]
 8013dc4:	4621      	mov	r1, r4
 8013dc6:	4658      	mov	r0, fp
 8013dc8:	f000 fbba 	bl	8014540 <__mdiff>
 8013dcc:	68c2      	ldr	r2, [r0, #12]
 8013dce:	4606      	mov	r6, r0
 8013dd0:	bb02      	cbnz	r2, 8013e14 <_dtoa_r+0xa1c>
 8013dd2:	4601      	mov	r1, r0
 8013dd4:	4648      	mov	r0, r9
 8013dd6:	f000 fb97 	bl	8014508 <__mcmp>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	4631      	mov	r1, r6
 8013dde:	4658      	mov	r0, fp
 8013de0:	920e      	str	r2, [sp, #56]	@ 0x38
 8013de2:	f000 f957 	bl	8014094 <_Bfree>
 8013de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013de8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013dea:	9e07      	ldr	r6, [sp, #28]
 8013dec:	ea43 0102 	orr.w	r1, r3, r2
 8013df0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013df2:	4319      	orrs	r1, r3
 8013df4:	d110      	bne.n	8013e18 <_dtoa_r+0xa20>
 8013df6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013dfa:	d029      	beq.n	8013e50 <_dtoa_r+0xa58>
 8013dfc:	9b08      	ldr	r3, [sp, #32]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	dd02      	ble.n	8013e08 <_dtoa_r+0xa10>
 8013e02:	9b02      	ldr	r3, [sp, #8]
 8013e04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013e08:	9b00      	ldr	r3, [sp, #0]
 8013e0a:	f883 8000 	strb.w	r8, [r3]
 8013e0e:	e63f      	b.n	8013a90 <_dtoa_r+0x698>
 8013e10:	4628      	mov	r0, r5
 8013e12:	e7bb      	b.n	8013d8c <_dtoa_r+0x994>
 8013e14:	2201      	movs	r2, #1
 8013e16:	e7e1      	b.n	8013ddc <_dtoa_r+0x9e4>
 8013e18:	9b08      	ldr	r3, [sp, #32]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	db04      	blt.n	8013e28 <_dtoa_r+0xa30>
 8013e1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013e20:	430b      	orrs	r3, r1
 8013e22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013e24:	430b      	orrs	r3, r1
 8013e26:	d120      	bne.n	8013e6a <_dtoa_r+0xa72>
 8013e28:	2a00      	cmp	r2, #0
 8013e2a:	dded      	ble.n	8013e08 <_dtoa_r+0xa10>
 8013e2c:	4649      	mov	r1, r9
 8013e2e:	2201      	movs	r2, #1
 8013e30:	4658      	mov	r0, fp
 8013e32:	f000 fafd 	bl	8014430 <__lshift>
 8013e36:	4621      	mov	r1, r4
 8013e38:	4681      	mov	r9, r0
 8013e3a:	f000 fb65 	bl	8014508 <__mcmp>
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	dc03      	bgt.n	8013e4a <_dtoa_r+0xa52>
 8013e42:	d1e1      	bne.n	8013e08 <_dtoa_r+0xa10>
 8013e44:	f018 0f01 	tst.w	r8, #1
 8013e48:	d0de      	beq.n	8013e08 <_dtoa_r+0xa10>
 8013e4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013e4e:	d1d8      	bne.n	8013e02 <_dtoa_r+0xa0a>
 8013e50:	9a00      	ldr	r2, [sp, #0]
 8013e52:	2339      	movs	r3, #57	@ 0x39
 8013e54:	7013      	strb	r3, [r2, #0]
 8013e56:	4633      	mov	r3, r6
 8013e58:	461e      	mov	r6, r3
 8013e5a:	3b01      	subs	r3, #1
 8013e5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013e60:	2a39      	cmp	r2, #57	@ 0x39
 8013e62:	d052      	beq.n	8013f0a <_dtoa_r+0xb12>
 8013e64:	3201      	adds	r2, #1
 8013e66:	701a      	strb	r2, [r3, #0]
 8013e68:	e612      	b.n	8013a90 <_dtoa_r+0x698>
 8013e6a:	2a00      	cmp	r2, #0
 8013e6c:	dd07      	ble.n	8013e7e <_dtoa_r+0xa86>
 8013e6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013e72:	d0ed      	beq.n	8013e50 <_dtoa_r+0xa58>
 8013e74:	9a00      	ldr	r2, [sp, #0]
 8013e76:	f108 0301 	add.w	r3, r8, #1
 8013e7a:	7013      	strb	r3, [r2, #0]
 8013e7c:	e608      	b.n	8013a90 <_dtoa_r+0x698>
 8013e7e:	9b07      	ldr	r3, [sp, #28]
 8013e80:	9a07      	ldr	r2, [sp, #28]
 8013e82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	d028      	beq.n	8013ede <_dtoa_r+0xae6>
 8013e8c:	4649      	mov	r1, r9
 8013e8e:	2300      	movs	r3, #0
 8013e90:	220a      	movs	r2, #10
 8013e92:	4658      	mov	r0, fp
 8013e94:	f000 f920 	bl	80140d8 <__multadd>
 8013e98:	42af      	cmp	r7, r5
 8013e9a:	4681      	mov	r9, r0
 8013e9c:	f04f 0300 	mov.w	r3, #0
 8013ea0:	f04f 020a 	mov.w	r2, #10
 8013ea4:	4639      	mov	r1, r7
 8013ea6:	4658      	mov	r0, fp
 8013ea8:	d107      	bne.n	8013eba <_dtoa_r+0xac2>
 8013eaa:	f000 f915 	bl	80140d8 <__multadd>
 8013eae:	4607      	mov	r7, r0
 8013eb0:	4605      	mov	r5, r0
 8013eb2:	9b07      	ldr	r3, [sp, #28]
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	9307      	str	r3, [sp, #28]
 8013eb8:	e774      	b.n	8013da4 <_dtoa_r+0x9ac>
 8013eba:	f000 f90d 	bl	80140d8 <__multadd>
 8013ebe:	4629      	mov	r1, r5
 8013ec0:	4607      	mov	r7, r0
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	220a      	movs	r2, #10
 8013ec6:	4658      	mov	r0, fp
 8013ec8:	f000 f906 	bl	80140d8 <__multadd>
 8013ecc:	4605      	mov	r5, r0
 8013ece:	e7f0      	b.n	8013eb2 <_dtoa_r+0xaba>
 8013ed0:	9b00      	ldr	r3, [sp, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	bfcc      	ite	gt
 8013ed6:	461e      	movgt	r6, r3
 8013ed8:	2601      	movle	r6, #1
 8013eda:	4456      	add	r6, sl
 8013edc:	2700      	movs	r7, #0
 8013ede:	4649      	mov	r1, r9
 8013ee0:	2201      	movs	r2, #1
 8013ee2:	4658      	mov	r0, fp
 8013ee4:	f000 faa4 	bl	8014430 <__lshift>
 8013ee8:	4621      	mov	r1, r4
 8013eea:	4681      	mov	r9, r0
 8013eec:	f000 fb0c 	bl	8014508 <__mcmp>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	dcb0      	bgt.n	8013e56 <_dtoa_r+0xa5e>
 8013ef4:	d102      	bne.n	8013efc <_dtoa_r+0xb04>
 8013ef6:	f018 0f01 	tst.w	r8, #1
 8013efa:	d1ac      	bne.n	8013e56 <_dtoa_r+0xa5e>
 8013efc:	4633      	mov	r3, r6
 8013efe:	461e      	mov	r6, r3
 8013f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f04:	2a30      	cmp	r2, #48	@ 0x30
 8013f06:	d0fa      	beq.n	8013efe <_dtoa_r+0xb06>
 8013f08:	e5c2      	b.n	8013a90 <_dtoa_r+0x698>
 8013f0a:	459a      	cmp	sl, r3
 8013f0c:	d1a4      	bne.n	8013e58 <_dtoa_r+0xa60>
 8013f0e:	9b04      	ldr	r3, [sp, #16]
 8013f10:	3301      	adds	r3, #1
 8013f12:	9304      	str	r3, [sp, #16]
 8013f14:	2331      	movs	r3, #49	@ 0x31
 8013f16:	f88a 3000 	strb.w	r3, [sl]
 8013f1a:	e5b9      	b.n	8013a90 <_dtoa_r+0x698>
 8013f1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013f1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8013f7c <_dtoa_r+0xb84>
 8013f22:	b11b      	cbz	r3, 8013f2c <_dtoa_r+0xb34>
 8013f24:	f10a 0308 	add.w	r3, sl, #8
 8013f28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013f2a:	6013      	str	r3, [r2, #0]
 8013f2c:	4650      	mov	r0, sl
 8013f2e:	b019      	add	sp, #100	@ 0x64
 8013f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f36:	2b01      	cmp	r3, #1
 8013f38:	f77f ae37 	ble.w	8013baa <_dtoa_r+0x7b2>
 8013f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f40:	2001      	movs	r0, #1
 8013f42:	e655      	b.n	8013bf0 <_dtoa_r+0x7f8>
 8013f44:	9b00      	ldr	r3, [sp, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	f77f aed6 	ble.w	8013cf8 <_dtoa_r+0x900>
 8013f4c:	4656      	mov	r6, sl
 8013f4e:	4621      	mov	r1, r4
 8013f50:	4648      	mov	r0, r9
 8013f52:	f7ff f9c6 	bl	80132e2 <quorem>
 8013f56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013f5a:	f806 8b01 	strb.w	r8, [r6], #1
 8013f5e:	9b00      	ldr	r3, [sp, #0]
 8013f60:	eba6 020a 	sub.w	r2, r6, sl
 8013f64:	4293      	cmp	r3, r2
 8013f66:	ddb3      	ble.n	8013ed0 <_dtoa_r+0xad8>
 8013f68:	4649      	mov	r1, r9
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	220a      	movs	r2, #10
 8013f6e:	4658      	mov	r0, fp
 8013f70:	f000 f8b2 	bl	80140d8 <__multadd>
 8013f74:	4681      	mov	r9, r0
 8013f76:	e7ea      	b.n	8013f4e <_dtoa_r+0xb56>
 8013f78:	0801644c 	.word	0x0801644c
 8013f7c:	080163d0 	.word	0x080163d0

08013f80 <_free_r>:
 8013f80:	b538      	push	{r3, r4, r5, lr}
 8013f82:	4605      	mov	r5, r0
 8013f84:	2900      	cmp	r1, #0
 8013f86:	d041      	beq.n	801400c <_free_r+0x8c>
 8013f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f8c:	1f0c      	subs	r4, r1, #4
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	bfb8      	it	lt
 8013f92:	18e4      	addlt	r4, r4, r3
 8013f94:	f7fe fb4c 	bl	8012630 <__malloc_lock>
 8013f98:	4a1d      	ldr	r2, [pc, #116]	@ (8014010 <_free_r+0x90>)
 8013f9a:	6813      	ldr	r3, [r2, #0]
 8013f9c:	b933      	cbnz	r3, 8013fac <_free_r+0x2c>
 8013f9e:	6063      	str	r3, [r4, #4]
 8013fa0:	6014      	str	r4, [r2, #0]
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fa8:	f7fe bb48 	b.w	801263c <__malloc_unlock>
 8013fac:	42a3      	cmp	r3, r4
 8013fae:	d908      	bls.n	8013fc2 <_free_r+0x42>
 8013fb0:	6820      	ldr	r0, [r4, #0]
 8013fb2:	1821      	adds	r1, r4, r0
 8013fb4:	428b      	cmp	r3, r1
 8013fb6:	bf01      	itttt	eq
 8013fb8:	6819      	ldreq	r1, [r3, #0]
 8013fba:	685b      	ldreq	r3, [r3, #4]
 8013fbc:	1809      	addeq	r1, r1, r0
 8013fbe:	6021      	streq	r1, [r4, #0]
 8013fc0:	e7ed      	b.n	8013f9e <_free_r+0x1e>
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	b10b      	cbz	r3, 8013fcc <_free_r+0x4c>
 8013fc8:	42a3      	cmp	r3, r4
 8013fca:	d9fa      	bls.n	8013fc2 <_free_r+0x42>
 8013fcc:	6811      	ldr	r1, [r2, #0]
 8013fce:	1850      	adds	r0, r2, r1
 8013fd0:	42a0      	cmp	r0, r4
 8013fd2:	d10b      	bne.n	8013fec <_free_r+0x6c>
 8013fd4:	6820      	ldr	r0, [r4, #0]
 8013fd6:	4401      	add	r1, r0
 8013fd8:	1850      	adds	r0, r2, r1
 8013fda:	4283      	cmp	r3, r0
 8013fdc:	6011      	str	r1, [r2, #0]
 8013fde:	d1e0      	bne.n	8013fa2 <_free_r+0x22>
 8013fe0:	6818      	ldr	r0, [r3, #0]
 8013fe2:	685b      	ldr	r3, [r3, #4]
 8013fe4:	6053      	str	r3, [r2, #4]
 8013fe6:	4408      	add	r0, r1
 8013fe8:	6010      	str	r0, [r2, #0]
 8013fea:	e7da      	b.n	8013fa2 <_free_r+0x22>
 8013fec:	d902      	bls.n	8013ff4 <_free_r+0x74>
 8013fee:	230c      	movs	r3, #12
 8013ff0:	602b      	str	r3, [r5, #0]
 8013ff2:	e7d6      	b.n	8013fa2 <_free_r+0x22>
 8013ff4:	6820      	ldr	r0, [r4, #0]
 8013ff6:	1821      	adds	r1, r4, r0
 8013ff8:	428b      	cmp	r3, r1
 8013ffa:	bf04      	itt	eq
 8013ffc:	6819      	ldreq	r1, [r3, #0]
 8013ffe:	685b      	ldreq	r3, [r3, #4]
 8014000:	6063      	str	r3, [r4, #4]
 8014002:	bf04      	itt	eq
 8014004:	1809      	addeq	r1, r1, r0
 8014006:	6021      	streq	r1, [r4, #0]
 8014008:	6054      	str	r4, [r2, #4]
 801400a:	e7ca      	b.n	8013fa2 <_free_r+0x22>
 801400c:	bd38      	pop	{r3, r4, r5, pc}
 801400e:	bf00      	nop
 8014010:	20000588 	.word	0x20000588

08014014 <_Balloc>:
 8014014:	b570      	push	{r4, r5, r6, lr}
 8014016:	69c6      	ldr	r6, [r0, #28]
 8014018:	4604      	mov	r4, r0
 801401a:	460d      	mov	r5, r1
 801401c:	b976      	cbnz	r6, 801403c <_Balloc+0x28>
 801401e:	2010      	movs	r0, #16
 8014020:	f7fe fa54 	bl	80124cc <malloc>
 8014024:	4602      	mov	r2, r0
 8014026:	61e0      	str	r0, [r4, #28]
 8014028:	b920      	cbnz	r0, 8014034 <_Balloc+0x20>
 801402a:	4b18      	ldr	r3, [pc, #96]	@ (801408c <_Balloc+0x78>)
 801402c:	4818      	ldr	r0, [pc, #96]	@ (8014090 <_Balloc+0x7c>)
 801402e:	216b      	movs	r1, #107	@ 0x6b
 8014030:	f000 fc1e 	bl	8014870 <__assert_func>
 8014034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014038:	6006      	str	r6, [r0, #0]
 801403a:	60c6      	str	r6, [r0, #12]
 801403c:	69e6      	ldr	r6, [r4, #28]
 801403e:	68f3      	ldr	r3, [r6, #12]
 8014040:	b183      	cbz	r3, 8014064 <_Balloc+0x50>
 8014042:	69e3      	ldr	r3, [r4, #28]
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801404a:	b9b8      	cbnz	r0, 801407c <_Balloc+0x68>
 801404c:	2101      	movs	r1, #1
 801404e:	fa01 f605 	lsl.w	r6, r1, r5
 8014052:	1d72      	adds	r2, r6, #5
 8014054:	0092      	lsls	r2, r2, #2
 8014056:	4620      	mov	r0, r4
 8014058:	f000 fc28 	bl	80148ac <_calloc_r>
 801405c:	b160      	cbz	r0, 8014078 <_Balloc+0x64>
 801405e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014062:	e00e      	b.n	8014082 <_Balloc+0x6e>
 8014064:	2221      	movs	r2, #33	@ 0x21
 8014066:	2104      	movs	r1, #4
 8014068:	4620      	mov	r0, r4
 801406a:	f000 fc1f 	bl	80148ac <_calloc_r>
 801406e:	69e3      	ldr	r3, [r4, #28]
 8014070:	60f0      	str	r0, [r6, #12]
 8014072:	68db      	ldr	r3, [r3, #12]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d1e4      	bne.n	8014042 <_Balloc+0x2e>
 8014078:	2000      	movs	r0, #0
 801407a:	bd70      	pop	{r4, r5, r6, pc}
 801407c:	6802      	ldr	r2, [r0, #0]
 801407e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014082:	2300      	movs	r3, #0
 8014084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014088:	e7f7      	b.n	801407a <_Balloc+0x66>
 801408a:	bf00      	nop
 801408c:	080163dd 	.word	0x080163dd
 8014090:	0801645d 	.word	0x0801645d

08014094 <_Bfree>:
 8014094:	b570      	push	{r4, r5, r6, lr}
 8014096:	69c6      	ldr	r6, [r0, #28]
 8014098:	4605      	mov	r5, r0
 801409a:	460c      	mov	r4, r1
 801409c:	b976      	cbnz	r6, 80140bc <_Bfree+0x28>
 801409e:	2010      	movs	r0, #16
 80140a0:	f7fe fa14 	bl	80124cc <malloc>
 80140a4:	4602      	mov	r2, r0
 80140a6:	61e8      	str	r0, [r5, #28]
 80140a8:	b920      	cbnz	r0, 80140b4 <_Bfree+0x20>
 80140aa:	4b09      	ldr	r3, [pc, #36]	@ (80140d0 <_Bfree+0x3c>)
 80140ac:	4809      	ldr	r0, [pc, #36]	@ (80140d4 <_Bfree+0x40>)
 80140ae:	218f      	movs	r1, #143	@ 0x8f
 80140b0:	f000 fbde 	bl	8014870 <__assert_func>
 80140b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140b8:	6006      	str	r6, [r0, #0]
 80140ba:	60c6      	str	r6, [r0, #12]
 80140bc:	b13c      	cbz	r4, 80140ce <_Bfree+0x3a>
 80140be:	69eb      	ldr	r3, [r5, #28]
 80140c0:	6862      	ldr	r2, [r4, #4]
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80140c8:	6021      	str	r1, [r4, #0]
 80140ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80140ce:	bd70      	pop	{r4, r5, r6, pc}
 80140d0:	080163dd 	.word	0x080163dd
 80140d4:	0801645d 	.word	0x0801645d

080140d8 <__multadd>:
 80140d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140dc:	690d      	ldr	r5, [r1, #16]
 80140de:	4607      	mov	r7, r0
 80140e0:	460c      	mov	r4, r1
 80140e2:	461e      	mov	r6, r3
 80140e4:	f101 0c14 	add.w	ip, r1, #20
 80140e8:	2000      	movs	r0, #0
 80140ea:	f8dc 3000 	ldr.w	r3, [ip]
 80140ee:	b299      	uxth	r1, r3
 80140f0:	fb02 6101 	mla	r1, r2, r1, r6
 80140f4:	0c1e      	lsrs	r6, r3, #16
 80140f6:	0c0b      	lsrs	r3, r1, #16
 80140f8:	fb02 3306 	mla	r3, r2, r6, r3
 80140fc:	b289      	uxth	r1, r1
 80140fe:	3001      	adds	r0, #1
 8014100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014104:	4285      	cmp	r5, r0
 8014106:	f84c 1b04 	str.w	r1, [ip], #4
 801410a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801410e:	dcec      	bgt.n	80140ea <__multadd+0x12>
 8014110:	b30e      	cbz	r6, 8014156 <__multadd+0x7e>
 8014112:	68a3      	ldr	r3, [r4, #8]
 8014114:	42ab      	cmp	r3, r5
 8014116:	dc19      	bgt.n	801414c <__multadd+0x74>
 8014118:	6861      	ldr	r1, [r4, #4]
 801411a:	4638      	mov	r0, r7
 801411c:	3101      	adds	r1, #1
 801411e:	f7ff ff79 	bl	8014014 <_Balloc>
 8014122:	4680      	mov	r8, r0
 8014124:	b928      	cbnz	r0, 8014132 <__multadd+0x5a>
 8014126:	4602      	mov	r2, r0
 8014128:	4b0c      	ldr	r3, [pc, #48]	@ (801415c <__multadd+0x84>)
 801412a:	480d      	ldr	r0, [pc, #52]	@ (8014160 <__multadd+0x88>)
 801412c:	21ba      	movs	r1, #186	@ 0xba
 801412e:	f000 fb9f 	bl	8014870 <__assert_func>
 8014132:	6922      	ldr	r2, [r4, #16]
 8014134:	3202      	adds	r2, #2
 8014136:	f104 010c 	add.w	r1, r4, #12
 801413a:	0092      	lsls	r2, r2, #2
 801413c:	300c      	adds	r0, #12
 801413e:	f7ff f8c2 	bl	80132c6 <memcpy>
 8014142:	4621      	mov	r1, r4
 8014144:	4638      	mov	r0, r7
 8014146:	f7ff ffa5 	bl	8014094 <_Bfree>
 801414a:	4644      	mov	r4, r8
 801414c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014150:	3501      	adds	r5, #1
 8014152:	615e      	str	r6, [r3, #20]
 8014154:	6125      	str	r5, [r4, #16]
 8014156:	4620      	mov	r0, r4
 8014158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801415c:	0801644c 	.word	0x0801644c
 8014160:	0801645d 	.word	0x0801645d

08014164 <__hi0bits>:
 8014164:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014168:	4603      	mov	r3, r0
 801416a:	bf36      	itet	cc
 801416c:	0403      	lslcc	r3, r0, #16
 801416e:	2000      	movcs	r0, #0
 8014170:	2010      	movcc	r0, #16
 8014172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014176:	bf3c      	itt	cc
 8014178:	021b      	lslcc	r3, r3, #8
 801417a:	3008      	addcc	r0, #8
 801417c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014180:	bf3c      	itt	cc
 8014182:	011b      	lslcc	r3, r3, #4
 8014184:	3004      	addcc	r0, #4
 8014186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801418a:	bf3c      	itt	cc
 801418c:	009b      	lslcc	r3, r3, #2
 801418e:	3002      	addcc	r0, #2
 8014190:	2b00      	cmp	r3, #0
 8014192:	db05      	blt.n	80141a0 <__hi0bits+0x3c>
 8014194:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014198:	f100 0001 	add.w	r0, r0, #1
 801419c:	bf08      	it	eq
 801419e:	2020      	moveq	r0, #32
 80141a0:	4770      	bx	lr

080141a2 <__lo0bits>:
 80141a2:	6803      	ldr	r3, [r0, #0]
 80141a4:	4602      	mov	r2, r0
 80141a6:	f013 0007 	ands.w	r0, r3, #7
 80141aa:	d00b      	beq.n	80141c4 <__lo0bits+0x22>
 80141ac:	07d9      	lsls	r1, r3, #31
 80141ae:	d421      	bmi.n	80141f4 <__lo0bits+0x52>
 80141b0:	0798      	lsls	r0, r3, #30
 80141b2:	bf49      	itett	mi
 80141b4:	085b      	lsrmi	r3, r3, #1
 80141b6:	089b      	lsrpl	r3, r3, #2
 80141b8:	2001      	movmi	r0, #1
 80141ba:	6013      	strmi	r3, [r2, #0]
 80141bc:	bf5c      	itt	pl
 80141be:	6013      	strpl	r3, [r2, #0]
 80141c0:	2002      	movpl	r0, #2
 80141c2:	4770      	bx	lr
 80141c4:	b299      	uxth	r1, r3
 80141c6:	b909      	cbnz	r1, 80141cc <__lo0bits+0x2a>
 80141c8:	0c1b      	lsrs	r3, r3, #16
 80141ca:	2010      	movs	r0, #16
 80141cc:	b2d9      	uxtb	r1, r3
 80141ce:	b909      	cbnz	r1, 80141d4 <__lo0bits+0x32>
 80141d0:	3008      	adds	r0, #8
 80141d2:	0a1b      	lsrs	r3, r3, #8
 80141d4:	0719      	lsls	r1, r3, #28
 80141d6:	bf04      	itt	eq
 80141d8:	091b      	lsreq	r3, r3, #4
 80141da:	3004      	addeq	r0, #4
 80141dc:	0799      	lsls	r1, r3, #30
 80141de:	bf04      	itt	eq
 80141e0:	089b      	lsreq	r3, r3, #2
 80141e2:	3002      	addeq	r0, #2
 80141e4:	07d9      	lsls	r1, r3, #31
 80141e6:	d403      	bmi.n	80141f0 <__lo0bits+0x4e>
 80141e8:	085b      	lsrs	r3, r3, #1
 80141ea:	f100 0001 	add.w	r0, r0, #1
 80141ee:	d003      	beq.n	80141f8 <__lo0bits+0x56>
 80141f0:	6013      	str	r3, [r2, #0]
 80141f2:	4770      	bx	lr
 80141f4:	2000      	movs	r0, #0
 80141f6:	4770      	bx	lr
 80141f8:	2020      	movs	r0, #32
 80141fa:	4770      	bx	lr

080141fc <__i2b>:
 80141fc:	b510      	push	{r4, lr}
 80141fe:	460c      	mov	r4, r1
 8014200:	2101      	movs	r1, #1
 8014202:	f7ff ff07 	bl	8014014 <_Balloc>
 8014206:	4602      	mov	r2, r0
 8014208:	b928      	cbnz	r0, 8014216 <__i2b+0x1a>
 801420a:	4b05      	ldr	r3, [pc, #20]	@ (8014220 <__i2b+0x24>)
 801420c:	4805      	ldr	r0, [pc, #20]	@ (8014224 <__i2b+0x28>)
 801420e:	f240 1145 	movw	r1, #325	@ 0x145
 8014212:	f000 fb2d 	bl	8014870 <__assert_func>
 8014216:	2301      	movs	r3, #1
 8014218:	6144      	str	r4, [r0, #20]
 801421a:	6103      	str	r3, [r0, #16]
 801421c:	bd10      	pop	{r4, pc}
 801421e:	bf00      	nop
 8014220:	0801644c 	.word	0x0801644c
 8014224:	0801645d 	.word	0x0801645d

08014228 <__multiply>:
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	4614      	mov	r4, r2
 801422e:	690a      	ldr	r2, [r1, #16]
 8014230:	6923      	ldr	r3, [r4, #16]
 8014232:	429a      	cmp	r2, r3
 8014234:	bfa8      	it	ge
 8014236:	4623      	movge	r3, r4
 8014238:	460f      	mov	r7, r1
 801423a:	bfa4      	itt	ge
 801423c:	460c      	movge	r4, r1
 801423e:	461f      	movge	r7, r3
 8014240:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014244:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014248:	68a3      	ldr	r3, [r4, #8]
 801424a:	6861      	ldr	r1, [r4, #4]
 801424c:	eb0a 0609 	add.w	r6, sl, r9
 8014250:	42b3      	cmp	r3, r6
 8014252:	b085      	sub	sp, #20
 8014254:	bfb8      	it	lt
 8014256:	3101      	addlt	r1, #1
 8014258:	f7ff fedc 	bl	8014014 <_Balloc>
 801425c:	b930      	cbnz	r0, 801426c <__multiply+0x44>
 801425e:	4602      	mov	r2, r0
 8014260:	4b44      	ldr	r3, [pc, #272]	@ (8014374 <__multiply+0x14c>)
 8014262:	4845      	ldr	r0, [pc, #276]	@ (8014378 <__multiply+0x150>)
 8014264:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014268:	f000 fb02 	bl	8014870 <__assert_func>
 801426c:	f100 0514 	add.w	r5, r0, #20
 8014270:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014274:	462b      	mov	r3, r5
 8014276:	2200      	movs	r2, #0
 8014278:	4543      	cmp	r3, r8
 801427a:	d321      	bcc.n	80142c0 <__multiply+0x98>
 801427c:	f107 0114 	add.w	r1, r7, #20
 8014280:	f104 0214 	add.w	r2, r4, #20
 8014284:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014288:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801428c:	9302      	str	r3, [sp, #8]
 801428e:	1b13      	subs	r3, r2, r4
 8014290:	3b15      	subs	r3, #21
 8014292:	f023 0303 	bic.w	r3, r3, #3
 8014296:	3304      	adds	r3, #4
 8014298:	f104 0715 	add.w	r7, r4, #21
 801429c:	42ba      	cmp	r2, r7
 801429e:	bf38      	it	cc
 80142a0:	2304      	movcc	r3, #4
 80142a2:	9301      	str	r3, [sp, #4]
 80142a4:	9b02      	ldr	r3, [sp, #8]
 80142a6:	9103      	str	r1, [sp, #12]
 80142a8:	428b      	cmp	r3, r1
 80142aa:	d80c      	bhi.n	80142c6 <__multiply+0x9e>
 80142ac:	2e00      	cmp	r6, #0
 80142ae:	dd03      	ble.n	80142b8 <__multiply+0x90>
 80142b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d05b      	beq.n	8014370 <__multiply+0x148>
 80142b8:	6106      	str	r6, [r0, #16]
 80142ba:	b005      	add	sp, #20
 80142bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142c0:	f843 2b04 	str.w	r2, [r3], #4
 80142c4:	e7d8      	b.n	8014278 <__multiply+0x50>
 80142c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80142ca:	f1ba 0f00 	cmp.w	sl, #0
 80142ce:	d024      	beq.n	801431a <__multiply+0xf2>
 80142d0:	f104 0e14 	add.w	lr, r4, #20
 80142d4:	46a9      	mov	r9, r5
 80142d6:	f04f 0c00 	mov.w	ip, #0
 80142da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80142de:	f8d9 3000 	ldr.w	r3, [r9]
 80142e2:	fa1f fb87 	uxth.w	fp, r7
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80142ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80142f0:	f8d9 7000 	ldr.w	r7, [r9]
 80142f4:	4463      	add	r3, ip
 80142f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80142fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80142fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014302:	b29b      	uxth	r3, r3
 8014304:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014308:	4572      	cmp	r2, lr
 801430a:	f849 3b04 	str.w	r3, [r9], #4
 801430e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014312:	d8e2      	bhi.n	80142da <__multiply+0xb2>
 8014314:	9b01      	ldr	r3, [sp, #4]
 8014316:	f845 c003 	str.w	ip, [r5, r3]
 801431a:	9b03      	ldr	r3, [sp, #12]
 801431c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014320:	3104      	adds	r1, #4
 8014322:	f1b9 0f00 	cmp.w	r9, #0
 8014326:	d021      	beq.n	801436c <__multiply+0x144>
 8014328:	682b      	ldr	r3, [r5, #0]
 801432a:	f104 0c14 	add.w	ip, r4, #20
 801432e:	46ae      	mov	lr, r5
 8014330:	f04f 0a00 	mov.w	sl, #0
 8014334:	f8bc b000 	ldrh.w	fp, [ip]
 8014338:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801433c:	fb09 770b 	mla	r7, r9, fp, r7
 8014340:	4457      	add	r7, sl
 8014342:	b29b      	uxth	r3, r3
 8014344:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014348:	f84e 3b04 	str.w	r3, [lr], #4
 801434c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014350:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014354:	f8be 3000 	ldrh.w	r3, [lr]
 8014358:	fb09 330a 	mla	r3, r9, sl, r3
 801435c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014360:	4562      	cmp	r2, ip
 8014362:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014366:	d8e5      	bhi.n	8014334 <__multiply+0x10c>
 8014368:	9f01      	ldr	r7, [sp, #4]
 801436a:	51eb      	str	r3, [r5, r7]
 801436c:	3504      	adds	r5, #4
 801436e:	e799      	b.n	80142a4 <__multiply+0x7c>
 8014370:	3e01      	subs	r6, #1
 8014372:	e79b      	b.n	80142ac <__multiply+0x84>
 8014374:	0801644c 	.word	0x0801644c
 8014378:	0801645d 	.word	0x0801645d

0801437c <__pow5mult>:
 801437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014380:	4615      	mov	r5, r2
 8014382:	f012 0203 	ands.w	r2, r2, #3
 8014386:	4607      	mov	r7, r0
 8014388:	460e      	mov	r6, r1
 801438a:	d007      	beq.n	801439c <__pow5mult+0x20>
 801438c:	4c25      	ldr	r4, [pc, #148]	@ (8014424 <__pow5mult+0xa8>)
 801438e:	3a01      	subs	r2, #1
 8014390:	2300      	movs	r3, #0
 8014392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014396:	f7ff fe9f 	bl	80140d8 <__multadd>
 801439a:	4606      	mov	r6, r0
 801439c:	10ad      	asrs	r5, r5, #2
 801439e:	d03d      	beq.n	801441c <__pow5mult+0xa0>
 80143a0:	69fc      	ldr	r4, [r7, #28]
 80143a2:	b97c      	cbnz	r4, 80143c4 <__pow5mult+0x48>
 80143a4:	2010      	movs	r0, #16
 80143a6:	f7fe f891 	bl	80124cc <malloc>
 80143aa:	4602      	mov	r2, r0
 80143ac:	61f8      	str	r0, [r7, #28]
 80143ae:	b928      	cbnz	r0, 80143bc <__pow5mult+0x40>
 80143b0:	4b1d      	ldr	r3, [pc, #116]	@ (8014428 <__pow5mult+0xac>)
 80143b2:	481e      	ldr	r0, [pc, #120]	@ (801442c <__pow5mult+0xb0>)
 80143b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80143b8:	f000 fa5a 	bl	8014870 <__assert_func>
 80143bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80143c0:	6004      	str	r4, [r0, #0]
 80143c2:	60c4      	str	r4, [r0, #12]
 80143c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80143c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80143cc:	b94c      	cbnz	r4, 80143e2 <__pow5mult+0x66>
 80143ce:	f240 2171 	movw	r1, #625	@ 0x271
 80143d2:	4638      	mov	r0, r7
 80143d4:	f7ff ff12 	bl	80141fc <__i2b>
 80143d8:	2300      	movs	r3, #0
 80143da:	f8c8 0008 	str.w	r0, [r8, #8]
 80143de:	4604      	mov	r4, r0
 80143e0:	6003      	str	r3, [r0, #0]
 80143e2:	f04f 0900 	mov.w	r9, #0
 80143e6:	07eb      	lsls	r3, r5, #31
 80143e8:	d50a      	bpl.n	8014400 <__pow5mult+0x84>
 80143ea:	4631      	mov	r1, r6
 80143ec:	4622      	mov	r2, r4
 80143ee:	4638      	mov	r0, r7
 80143f0:	f7ff ff1a 	bl	8014228 <__multiply>
 80143f4:	4631      	mov	r1, r6
 80143f6:	4680      	mov	r8, r0
 80143f8:	4638      	mov	r0, r7
 80143fa:	f7ff fe4b 	bl	8014094 <_Bfree>
 80143fe:	4646      	mov	r6, r8
 8014400:	106d      	asrs	r5, r5, #1
 8014402:	d00b      	beq.n	801441c <__pow5mult+0xa0>
 8014404:	6820      	ldr	r0, [r4, #0]
 8014406:	b938      	cbnz	r0, 8014418 <__pow5mult+0x9c>
 8014408:	4622      	mov	r2, r4
 801440a:	4621      	mov	r1, r4
 801440c:	4638      	mov	r0, r7
 801440e:	f7ff ff0b 	bl	8014228 <__multiply>
 8014412:	6020      	str	r0, [r4, #0]
 8014414:	f8c0 9000 	str.w	r9, [r0]
 8014418:	4604      	mov	r4, r0
 801441a:	e7e4      	b.n	80143e6 <__pow5mult+0x6a>
 801441c:	4630      	mov	r0, r6
 801441e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014422:	bf00      	nop
 8014424:	080164b8 	.word	0x080164b8
 8014428:	080163dd 	.word	0x080163dd
 801442c:	0801645d 	.word	0x0801645d

08014430 <__lshift>:
 8014430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014434:	460c      	mov	r4, r1
 8014436:	6849      	ldr	r1, [r1, #4]
 8014438:	6923      	ldr	r3, [r4, #16]
 801443a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801443e:	68a3      	ldr	r3, [r4, #8]
 8014440:	4607      	mov	r7, r0
 8014442:	4691      	mov	r9, r2
 8014444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014448:	f108 0601 	add.w	r6, r8, #1
 801444c:	42b3      	cmp	r3, r6
 801444e:	db0b      	blt.n	8014468 <__lshift+0x38>
 8014450:	4638      	mov	r0, r7
 8014452:	f7ff fddf 	bl	8014014 <_Balloc>
 8014456:	4605      	mov	r5, r0
 8014458:	b948      	cbnz	r0, 801446e <__lshift+0x3e>
 801445a:	4602      	mov	r2, r0
 801445c:	4b28      	ldr	r3, [pc, #160]	@ (8014500 <__lshift+0xd0>)
 801445e:	4829      	ldr	r0, [pc, #164]	@ (8014504 <__lshift+0xd4>)
 8014460:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014464:	f000 fa04 	bl	8014870 <__assert_func>
 8014468:	3101      	adds	r1, #1
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	e7ee      	b.n	801444c <__lshift+0x1c>
 801446e:	2300      	movs	r3, #0
 8014470:	f100 0114 	add.w	r1, r0, #20
 8014474:	f100 0210 	add.w	r2, r0, #16
 8014478:	4618      	mov	r0, r3
 801447a:	4553      	cmp	r3, sl
 801447c:	db33      	blt.n	80144e6 <__lshift+0xb6>
 801447e:	6920      	ldr	r0, [r4, #16]
 8014480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014484:	f104 0314 	add.w	r3, r4, #20
 8014488:	f019 091f 	ands.w	r9, r9, #31
 801448c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014494:	d02b      	beq.n	80144ee <__lshift+0xbe>
 8014496:	f1c9 0e20 	rsb	lr, r9, #32
 801449a:	468a      	mov	sl, r1
 801449c:	2200      	movs	r2, #0
 801449e:	6818      	ldr	r0, [r3, #0]
 80144a0:	fa00 f009 	lsl.w	r0, r0, r9
 80144a4:	4310      	orrs	r0, r2
 80144a6:	f84a 0b04 	str.w	r0, [sl], #4
 80144aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80144ae:	459c      	cmp	ip, r3
 80144b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80144b4:	d8f3      	bhi.n	801449e <__lshift+0x6e>
 80144b6:	ebac 0304 	sub.w	r3, ip, r4
 80144ba:	3b15      	subs	r3, #21
 80144bc:	f023 0303 	bic.w	r3, r3, #3
 80144c0:	3304      	adds	r3, #4
 80144c2:	f104 0015 	add.w	r0, r4, #21
 80144c6:	4584      	cmp	ip, r0
 80144c8:	bf38      	it	cc
 80144ca:	2304      	movcc	r3, #4
 80144cc:	50ca      	str	r2, [r1, r3]
 80144ce:	b10a      	cbz	r2, 80144d4 <__lshift+0xa4>
 80144d0:	f108 0602 	add.w	r6, r8, #2
 80144d4:	3e01      	subs	r6, #1
 80144d6:	4638      	mov	r0, r7
 80144d8:	612e      	str	r6, [r5, #16]
 80144da:	4621      	mov	r1, r4
 80144dc:	f7ff fdda 	bl	8014094 <_Bfree>
 80144e0:	4628      	mov	r0, r5
 80144e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80144ea:	3301      	adds	r3, #1
 80144ec:	e7c5      	b.n	801447a <__lshift+0x4a>
 80144ee:	3904      	subs	r1, #4
 80144f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80144f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80144f8:	459c      	cmp	ip, r3
 80144fa:	d8f9      	bhi.n	80144f0 <__lshift+0xc0>
 80144fc:	e7ea      	b.n	80144d4 <__lshift+0xa4>
 80144fe:	bf00      	nop
 8014500:	0801644c 	.word	0x0801644c
 8014504:	0801645d 	.word	0x0801645d

08014508 <__mcmp>:
 8014508:	690a      	ldr	r2, [r1, #16]
 801450a:	4603      	mov	r3, r0
 801450c:	6900      	ldr	r0, [r0, #16]
 801450e:	1a80      	subs	r0, r0, r2
 8014510:	b530      	push	{r4, r5, lr}
 8014512:	d10e      	bne.n	8014532 <__mcmp+0x2a>
 8014514:	3314      	adds	r3, #20
 8014516:	3114      	adds	r1, #20
 8014518:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801451c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014520:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014524:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014528:	4295      	cmp	r5, r2
 801452a:	d003      	beq.n	8014534 <__mcmp+0x2c>
 801452c:	d205      	bcs.n	801453a <__mcmp+0x32>
 801452e:	f04f 30ff 	mov.w	r0, #4294967295
 8014532:	bd30      	pop	{r4, r5, pc}
 8014534:	42a3      	cmp	r3, r4
 8014536:	d3f3      	bcc.n	8014520 <__mcmp+0x18>
 8014538:	e7fb      	b.n	8014532 <__mcmp+0x2a>
 801453a:	2001      	movs	r0, #1
 801453c:	e7f9      	b.n	8014532 <__mcmp+0x2a>
	...

08014540 <__mdiff>:
 8014540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014544:	4689      	mov	r9, r1
 8014546:	4606      	mov	r6, r0
 8014548:	4611      	mov	r1, r2
 801454a:	4648      	mov	r0, r9
 801454c:	4614      	mov	r4, r2
 801454e:	f7ff ffdb 	bl	8014508 <__mcmp>
 8014552:	1e05      	subs	r5, r0, #0
 8014554:	d112      	bne.n	801457c <__mdiff+0x3c>
 8014556:	4629      	mov	r1, r5
 8014558:	4630      	mov	r0, r6
 801455a:	f7ff fd5b 	bl	8014014 <_Balloc>
 801455e:	4602      	mov	r2, r0
 8014560:	b928      	cbnz	r0, 801456e <__mdiff+0x2e>
 8014562:	4b3f      	ldr	r3, [pc, #252]	@ (8014660 <__mdiff+0x120>)
 8014564:	f240 2137 	movw	r1, #567	@ 0x237
 8014568:	483e      	ldr	r0, [pc, #248]	@ (8014664 <__mdiff+0x124>)
 801456a:	f000 f981 	bl	8014870 <__assert_func>
 801456e:	2301      	movs	r3, #1
 8014570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014574:	4610      	mov	r0, r2
 8014576:	b003      	add	sp, #12
 8014578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801457c:	bfbc      	itt	lt
 801457e:	464b      	movlt	r3, r9
 8014580:	46a1      	movlt	r9, r4
 8014582:	4630      	mov	r0, r6
 8014584:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014588:	bfba      	itte	lt
 801458a:	461c      	movlt	r4, r3
 801458c:	2501      	movlt	r5, #1
 801458e:	2500      	movge	r5, #0
 8014590:	f7ff fd40 	bl	8014014 <_Balloc>
 8014594:	4602      	mov	r2, r0
 8014596:	b918      	cbnz	r0, 80145a0 <__mdiff+0x60>
 8014598:	4b31      	ldr	r3, [pc, #196]	@ (8014660 <__mdiff+0x120>)
 801459a:	f240 2145 	movw	r1, #581	@ 0x245
 801459e:	e7e3      	b.n	8014568 <__mdiff+0x28>
 80145a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80145a4:	6926      	ldr	r6, [r4, #16]
 80145a6:	60c5      	str	r5, [r0, #12]
 80145a8:	f109 0310 	add.w	r3, r9, #16
 80145ac:	f109 0514 	add.w	r5, r9, #20
 80145b0:	f104 0e14 	add.w	lr, r4, #20
 80145b4:	f100 0b14 	add.w	fp, r0, #20
 80145b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80145bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80145c0:	9301      	str	r3, [sp, #4]
 80145c2:	46d9      	mov	r9, fp
 80145c4:	f04f 0c00 	mov.w	ip, #0
 80145c8:	9b01      	ldr	r3, [sp, #4]
 80145ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80145ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80145d2:	9301      	str	r3, [sp, #4]
 80145d4:	fa1f f38a 	uxth.w	r3, sl
 80145d8:	4619      	mov	r1, r3
 80145da:	b283      	uxth	r3, r0
 80145dc:	1acb      	subs	r3, r1, r3
 80145de:	0c00      	lsrs	r0, r0, #16
 80145e0:	4463      	add	r3, ip
 80145e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80145e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80145f0:	4576      	cmp	r6, lr
 80145f2:	f849 3b04 	str.w	r3, [r9], #4
 80145f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80145fa:	d8e5      	bhi.n	80145c8 <__mdiff+0x88>
 80145fc:	1b33      	subs	r3, r6, r4
 80145fe:	3b15      	subs	r3, #21
 8014600:	f023 0303 	bic.w	r3, r3, #3
 8014604:	3415      	adds	r4, #21
 8014606:	3304      	adds	r3, #4
 8014608:	42a6      	cmp	r6, r4
 801460a:	bf38      	it	cc
 801460c:	2304      	movcc	r3, #4
 801460e:	441d      	add	r5, r3
 8014610:	445b      	add	r3, fp
 8014612:	461e      	mov	r6, r3
 8014614:	462c      	mov	r4, r5
 8014616:	4544      	cmp	r4, r8
 8014618:	d30e      	bcc.n	8014638 <__mdiff+0xf8>
 801461a:	f108 0103 	add.w	r1, r8, #3
 801461e:	1b49      	subs	r1, r1, r5
 8014620:	f021 0103 	bic.w	r1, r1, #3
 8014624:	3d03      	subs	r5, #3
 8014626:	45a8      	cmp	r8, r5
 8014628:	bf38      	it	cc
 801462a:	2100      	movcc	r1, #0
 801462c:	440b      	add	r3, r1
 801462e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014632:	b191      	cbz	r1, 801465a <__mdiff+0x11a>
 8014634:	6117      	str	r7, [r2, #16]
 8014636:	e79d      	b.n	8014574 <__mdiff+0x34>
 8014638:	f854 1b04 	ldr.w	r1, [r4], #4
 801463c:	46e6      	mov	lr, ip
 801463e:	0c08      	lsrs	r0, r1, #16
 8014640:	fa1c fc81 	uxtah	ip, ip, r1
 8014644:	4471      	add	r1, lr
 8014646:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801464a:	b289      	uxth	r1, r1
 801464c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014650:	f846 1b04 	str.w	r1, [r6], #4
 8014654:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014658:	e7dd      	b.n	8014616 <__mdiff+0xd6>
 801465a:	3f01      	subs	r7, #1
 801465c:	e7e7      	b.n	801462e <__mdiff+0xee>
 801465e:	bf00      	nop
 8014660:	0801644c 	.word	0x0801644c
 8014664:	0801645d 	.word	0x0801645d

08014668 <__d2b>:
 8014668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801466c:	460f      	mov	r7, r1
 801466e:	2101      	movs	r1, #1
 8014670:	ec59 8b10 	vmov	r8, r9, d0
 8014674:	4616      	mov	r6, r2
 8014676:	f7ff fccd 	bl	8014014 <_Balloc>
 801467a:	4604      	mov	r4, r0
 801467c:	b930      	cbnz	r0, 801468c <__d2b+0x24>
 801467e:	4602      	mov	r2, r0
 8014680:	4b23      	ldr	r3, [pc, #140]	@ (8014710 <__d2b+0xa8>)
 8014682:	4824      	ldr	r0, [pc, #144]	@ (8014714 <__d2b+0xac>)
 8014684:	f240 310f 	movw	r1, #783	@ 0x30f
 8014688:	f000 f8f2 	bl	8014870 <__assert_func>
 801468c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014694:	b10d      	cbz	r5, 801469a <__d2b+0x32>
 8014696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801469a:	9301      	str	r3, [sp, #4]
 801469c:	f1b8 0300 	subs.w	r3, r8, #0
 80146a0:	d023      	beq.n	80146ea <__d2b+0x82>
 80146a2:	4668      	mov	r0, sp
 80146a4:	9300      	str	r3, [sp, #0]
 80146a6:	f7ff fd7c 	bl	80141a2 <__lo0bits>
 80146aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80146ae:	b1d0      	cbz	r0, 80146e6 <__d2b+0x7e>
 80146b0:	f1c0 0320 	rsb	r3, r0, #32
 80146b4:	fa02 f303 	lsl.w	r3, r2, r3
 80146b8:	430b      	orrs	r3, r1
 80146ba:	40c2      	lsrs	r2, r0
 80146bc:	6163      	str	r3, [r4, #20]
 80146be:	9201      	str	r2, [sp, #4]
 80146c0:	9b01      	ldr	r3, [sp, #4]
 80146c2:	61a3      	str	r3, [r4, #24]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	bf0c      	ite	eq
 80146c8:	2201      	moveq	r2, #1
 80146ca:	2202      	movne	r2, #2
 80146cc:	6122      	str	r2, [r4, #16]
 80146ce:	b1a5      	cbz	r5, 80146fa <__d2b+0x92>
 80146d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80146d4:	4405      	add	r5, r0
 80146d6:	603d      	str	r5, [r7, #0]
 80146d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80146dc:	6030      	str	r0, [r6, #0]
 80146de:	4620      	mov	r0, r4
 80146e0:	b003      	add	sp, #12
 80146e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146e6:	6161      	str	r1, [r4, #20]
 80146e8:	e7ea      	b.n	80146c0 <__d2b+0x58>
 80146ea:	a801      	add	r0, sp, #4
 80146ec:	f7ff fd59 	bl	80141a2 <__lo0bits>
 80146f0:	9b01      	ldr	r3, [sp, #4]
 80146f2:	6163      	str	r3, [r4, #20]
 80146f4:	3020      	adds	r0, #32
 80146f6:	2201      	movs	r2, #1
 80146f8:	e7e8      	b.n	80146cc <__d2b+0x64>
 80146fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80146fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014702:	6038      	str	r0, [r7, #0]
 8014704:	6918      	ldr	r0, [r3, #16]
 8014706:	f7ff fd2d 	bl	8014164 <__hi0bits>
 801470a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801470e:	e7e5      	b.n	80146dc <__d2b+0x74>
 8014710:	0801644c 	.word	0x0801644c
 8014714:	0801645d 	.word	0x0801645d

08014718 <__sflush_r>:
 8014718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014720:	0716      	lsls	r6, r2, #28
 8014722:	4605      	mov	r5, r0
 8014724:	460c      	mov	r4, r1
 8014726:	d454      	bmi.n	80147d2 <__sflush_r+0xba>
 8014728:	684b      	ldr	r3, [r1, #4]
 801472a:	2b00      	cmp	r3, #0
 801472c:	dc02      	bgt.n	8014734 <__sflush_r+0x1c>
 801472e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014730:	2b00      	cmp	r3, #0
 8014732:	dd48      	ble.n	80147c6 <__sflush_r+0xae>
 8014734:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014736:	2e00      	cmp	r6, #0
 8014738:	d045      	beq.n	80147c6 <__sflush_r+0xae>
 801473a:	2300      	movs	r3, #0
 801473c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014740:	682f      	ldr	r7, [r5, #0]
 8014742:	6a21      	ldr	r1, [r4, #32]
 8014744:	602b      	str	r3, [r5, #0]
 8014746:	d030      	beq.n	80147aa <__sflush_r+0x92>
 8014748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801474a:	89a3      	ldrh	r3, [r4, #12]
 801474c:	0759      	lsls	r1, r3, #29
 801474e:	d505      	bpl.n	801475c <__sflush_r+0x44>
 8014750:	6863      	ldr	r3, [r4, #4]
 8014752:	1ad2      	subs	r2, r2, r3
 8014754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014756:	b10b      	cbz	r3, 801475c <__sflush_r+0x44>
 8014758:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801475a:	1ad2      	subs	r2, r2, r3
 801475c:	2300      	movs	r3, #0
 801475e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014760:	6a21      	ldr	r1, [r4, #32]
 8014762:	4628      	mov	r0, r5
 8014764:	47b0      	blx	r6
 8014766:	1c43      	adds	r3, r0, #1
 8014768:	89a3      	ldrh	r3, [r4, #12]
 801476a:	d106      	bne.n	801477a <__sflush_r+0x62>
 801476c:	6829      	ldr	r1, [r5, #0]
 801476e:	291d      	cmp	r1, #29
 8014770:	d82b      	bhi.n	80147ca <__sflush_r+0xb2>
 8014772:	4a2a      	ldr	r2, [pc, #168]	@ (801481c <__sflush_r+0x104>)
 8014774:	410a      	asrs	r2, r1
 8014776:	07d6      	lsls	r6, r2, #31
 8014778:	d427      	bmi.n	80147ca <__sflush_r+0xb2>
 801477a:	2200      	movs	r2, #0
 801477c:	6062      	str	r2, [r4, #4]
 801477e:	04d9      	lsls	r1, r3, #19
 8014780:	6922      	ldr	r2, [r4, #16]
 8014782:	6022      	str	r2, [r4, #0]
 8014784:	d504      	bpl.n	8014790 <__sflush_r+0x78>
 8014786:	1c42      	adds	r2, r0, #1
 8014788:	d101      	bne.n	801478e <__sflush_r+0x76>
 801478a:	682b      	ldr	r3, [r5, #0]
 801478c:	b903      	cbnz	r3, 8014790 <__sflush_r+0x78>
 801478e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014792:	602f      	str	r7, [r5, #0]
 8014794:	b1b9      	cbz	r1, 80147c6 <__sflush_r+0xae>
 8014796:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801479a:	4299      	cmp	r1, r3
 801479c:	d002      	beq.n	80147a4 <__sflush_r+0x8c>
 801479e:	4628      	mov	r0, r5
 80147a0:	f7ff fbee 	bl	8013f80 <_free_r>
 80147a4:	2300      	movs	r3, #0
 80147a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80147a8:	e00d      	b.n	80147c6 <__sflush_r+0xae>
 80147aa:	2301      	movs	r3, #1
 80147ac:	4628      	mov	r0, r5
 80147ae:	47b0      	blx	r6
 80147b0:	4602      	mov	r2, r0
 80147b2:	1c50      	adds	r0, r2, #1
 80147b4:	d1c9      	bne.n	801474a <__sflush_r+0x32>
 80147b6:	682b      	ldr	r3, [r5, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d0c6      	beq.n	801474a <__sflush_r+0x32>
 80147bc:	2b1d      	cmp	r3, #29
 80147be:	d001      	beq.n	80147c4 <__sflush_r+0xac>
 80147c0:	2b16      	cmp	r3, #22
 80147c2:	d11e      	bne.n	8014802 <__sflush_r+0xea>
 80147c4:	602f      	str	r7, [r5, #0]
 80147c6:	2000      	movs	r0, #0
 80147c8:	e022      	b.n	8014810 <__sflush_r+0xf8>
 80147ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147ce:	b21b      	sxth	r3, r3
 80147d0:	e01b      	b.n	801480a <__sflush_r+0xf2>
 80147d2:	690f      	ldr	r7, [r1, #16]
 80147d4:	2f00      	cmp	r7, #0
 80147d6:	d0f6      	beq.n	80147c6 <__sflush_r+0xae>
 80147d8:	0793      	lsls	r3, r2, #30
 80147da:	680e      	ldr	r6, [r1, #0]
 80147dc:	bf08      	it	eq
 80147de:	694b      	ldreq	r3, [r1, #20]
 80147e0:	600f      	str	r7, [r1, #0]
 80147e2:	bf18      	it	ne
 80147e4:	2300      	movne	r3, #0
 80147e6:	eba6 0807 	sub.w	r8, r6, r7
 80147ea:	608b      	str	r3, [r1, #8]
 80147ec:	f1b8 0f00 	cmp.w	r8, #0
 80147f0:	dde9      	ble.n	80147c6 <__sflush_r+0xae>
 80147f2:	6a21      	ldr	r1, [r4, #32]
 80147f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80147f6:	4643      	mov	r3, r8
 80147f8:	463a      	mov	r2, r7
 80147fa:	4628      	mov	r0, r5
 80147fc:	47b0      	blx	r6
 80147fe:	2800      	cmp	r0, #0
 8014800:	dc08      	bgt.n	8014814 <__sflush_r+0xfc>
 8014802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801480a:	81a3      	strh	r3, [r4, #12]
 801480c:	f04f 30ff 	mov.w	r0, #4294967295
 8014810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014814:	4407      	add	r7, r0
 8014816:	eba8 0800 	sub.w	r8, r8, r0
 801481a:	e7e7      	b.n	80147ec <__sflush_r+0xd4>
 801481c:	dfbffffe 	.word	0xdfbffffe

08014820 <_fflush_r>:
 8014820:	b538      	push	{r3, r4, r5, lr}
 8014822:	690b      	ldr	r3, [r1, #16]
 8014824:	4605      	mov	r5, r0
 8014826:	460c      	mov	r4, r1
 8014828:	b913      	cbnz	r3, 8014830 <_fflush_r+0x10>
 801482a:	2500      	movs	r5, #0
 801482c:	4628      	mov	r0, r5
 801482e:	bd38      	pop	{r3, r4, r5, pc}
 8014830:	b118      	cbz	r0, 801483a <_fflush_r+0x1a>
 8014832:	6a03      	ldr	r3, [r0, #32]
 8014834:	b90b      	cbnz	r3, 801483a <_fflush_r+0x1a>
 8014836:	f7fe fbf9 	bl	801302c <__sinit>
 801483a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d0f3      	beq.n	801482a <_fflush_r+0xa>
 8014842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014844:	07d0      	lsls	r0, r2, #31
 8014846:	d404      	bmi.n	8014852 <_fflush_r+0x32>
 8014848:	0599      	lsls	r1, r3, #22
 801484a:	d402      	bmi.n	8014852 <_fflush_r+0x32>
 801484c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801484e:	f7fe fd38 	bl	80132c2 <__retarget_lock_acquire_recursive>
 8014852:	4628      	mov	r0, r5
 8014854:	4621      	mov	r1, r4
 8014856:	f7ff ff5f 	bl	8014718 <__sflush_r>
 801485a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801485c:	07da      	lsls	r2, r3, #31
 801485e:	4605      	mov	r5, r0
 8014860:	d4e4      	bmi.n	801482c <_fflush_r+0xc>
 8014862:	89a3      	ldrh	r3, [r4, #12]
 8014864:	059b      	lsls	r3, r3, #22
 8014866:	d4e1      	bmi.n	801482c <_fflush_r+0xc>
 8014868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801486a:	f7fe fd2b 	bl	80132c4 <__retarget_lock_release_recursive>
 801486e:	e7dd      	b.n	801482c <_fflush_r+0xc>

08014870 <__assert_func>:
 8014870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014872:	4614      	mov	r4, r2
 8014874:	461a      	mov	r2, r3
 8014876:	4b09      	ldr	r3, [pc, #36]	@ (801489c <__assert_func+0x2c>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	4605      	mov	r5, r0
 801487c:	68d8      	ldr	r0, [r3, #12]
 801487e:	b954      	cbnz	r4, 8014896 <__assert_func+0x26>
 8014880:	4b07      	ldr	r3, [pc, #28]	@ (80148a0 <__assert_func+0x30>)
 8014882:	461c      	mov	r4, r3
 8014884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014888:	9100      	str	r1, [sp, #0]
 801488a:	462b      	mov	r3, r5
 801488c:	4905      	ldr	r1, [pc, #20]	@ (80148a4 <__assert_func+0x34>)
 801488e:	f000 f841 	bl	8014914 <fiprintf>
 8014892:	f7fd fe13 	bl	80124bc <abort>
 8014896:	4b04      	ldr	r3, [pc, #16]	@ (80148a8 <__assert_func+0x38>)
 8014898:	e7f4      	b.n	8014884 <__assert_func+0x14>
 801489a:	bf00      	nop
 801489c:	20000034 	.word	0x20000034
 80148a0:	080165fd 	.word	0x080165fd
 80148a4:	080165cf 	.word	0x080165cf
 80148a8:	080165c2 	.word	0x080165c2

080148ac <_calloc_r>:
 80148ac:	b570      	push	{r4, r5, r6, lr}
 80148ae:	fba1 5402 	umull	r5, r4, r1, r2
 80148b2:	b93c      	cbnz	r4, 80148c4 <_calloc_r+0x18>
 80148b4:	4629      	mov	r1, r5
 80148b6:	f7fd fe3b 	bl	8012530 <_malloc_r>
 80148ba:	4606      	mov	r6, r0
 80148bc:	b928      	cbnz	r0, 80148ca <_calloc_r+0x1e>
 80148be:	2600      	movs	r6, #0
 80148c0:	4630      	mov	r0, r6
 80148c2:	bd70      	pop	{r4, r5, r6, pc}
 80148c4:	220c      	movs	r2, #12
 80148c6:	6002      	str	r2, [r0, #0]
 80148c8:	e7f9      	b.n	80148be <_calloc_r+0x12>
 80148ca:	462a      	mov	r2, r5
 80148cc:	4621      	mov	r1, r4
 80148ce:	f7fe fc26 	bl	801311e <memset>
 80148d2:	e7f5      	b.n	80148c0 <_calloc_r+0x14>

080148d4 <__ascii_mbtowc>:
 80148d4:	b082      	sub	sp, #8
 80148d6:	b901      	cbnz	r1, 80148da <__ascii_mbtowc+0x6>
 80148d8:	a901      	add	r1, sp, #4
 80148da:	b142      	cbz	r2, 80148ee <__ascii_mbtowc+0x1a>
 80148dc:	b14b      	cbz	r3, 80148f2 <__ascii_mbtowc+0x1e>
 80148de:	7813      	ldrb	r3, [r2, #0]
 80148e0:	600b      	str	r3, [r1, #0]
 80148e2:	7812      	ldrb	r2, [r2, #0]
 80148e4:	1e10      	subs	r0, r2, #0
 80148e6:	bf18      	it	ne
 80148e8:	2001      	movne	r0, #1
 80148ea:	b002      	add	sp, #8
 80148ec:	4770      	bx	lr
 80148ee:	4610      	mov	r0, r2
 80148f0:	e7fb      	b.n	80148ea <__ascii_mbtowc+0x16>
 80148f2:	f06f 0001 	mvn.w	r0, #1
 80148f6:	e7f8      	b.n	80148ea <__ascii_mbtowc+0x16>

080148f8 <__ascii_wctomb>:
 80148f8:	4603      	mov	r3, r0
 80148fa:	4608      	mov	r0, r1
 80148fc:	b141      	cbz	r1, 8014910 <__ascii_wctomb+0x18>
 80148fe:	2aff      	cmp	r2, #255	@ 0xff
 8014900:	d904      	bls.n	801490c <__ascii_wctomb+0x14>
 8014902:	228a      	movs	r2, #138	@ 0x8a
 8014904:	601a      	str	r2, [r3, #0]
 8014906:	f04f 30ff 	mov.w	r0, #4294967295
 801490a:	4770      	bx	lr
 801490c:	700a      	strb	r2, [r1, #0]
 801490e:	2001      	movs	r0, #1
 8014910:	4770      	bx	lr
	...

08014914 <fiprintf>:
 8014914:	b40e      	push	{r1, r2, r3}
 8014916:	b503      	push	{r0, r1, lr}
 8014918:	4601      	mov	r1, r0
 801491a:	ab03      	add	r3, sp, #12
 801491c:	4805      	ldr	r0, [pc, #20]	@ (8014934 <fiprintf+0x20>)
 801491e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014922:	6800      	ldr	r0, [r0, #0]
 8014924:	9301      	str	r3, [sp, #4]
 8014926:	f000 f831 	bl	801498c <_vfiprintf_r>
 801492a:	b002      	add	sp, #8
 801492c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014930:	b003      	add	sp, #12
 8014932:	4770      	bx	lr
 8014934:	20000034 	.word	0x20000034

08014938 <__sfputc_r>:
 8014938:	6893      	ldr	r3, [r2, #8]
 801493a:	3b01      	subs	r3, #1
 801493c:	2b00      	cmp	r3, #0
 801493e:	b410      	push	{r4}
 8014940:	6093      	str	r3, [r2, #8]
 8014942:	da08      	bge.n	8014956 <__sfputc_r+0x1e>
 8014944:	6994      	ldr	r4, [r2, #24]
 8014946:	42a3      	cmp	r3, r4
 8014948:	db01      	blt.n	801494e <__sfputc_r+0x16>
 801494a:	290a      	cmp	r1, #10
 801494c:	d103      	bne.n	8014956 <__sfputc_r+0x1e>
 801494e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014952:	f000 b933 	b.w	8014bbc <__swbuf_r>
 8014956:	6813      	ldr	r3, [r2, #0]
 8014958:	1c58      	adds	r0, r3, #1
 801495a:	6010      	str	r0, [r2, #0]
 801495c:	7019      	strb	r1, [r3, #0]
 801495e:	4608      	mov	r0, r1
 8014960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014964:	4770      	bx	lr

08014966 <__sfputs_r>:
 8014966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014968:	4606      	mov	r6, r0
 801496a:	460f      	mov	r7, r1
 801496c:	4614      	mov	r4, r2
 801496e:	18d5      	adds	r5, r2, r3
 8014970:	42ac      	cmp	r4, r5
 8014972:	d101      	bne.n	8014978 <__sfputs_r+0x12>
 8014974:	2000      	movs	r0, #0
 8014976:	e007      	b.n	8014988 <__sfputs_r+0x22>
 8014978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801497c:	463a      	mov	r2, r7
 801497e:	4630      	mov	r0, r6
 8014980:	f7ff ffda 	bl	8014938 <__sfputc_r>
 8014984:	1c43      	adds	r3, r0, #1
 8014986:	d1f3      	bne.n	8014970 <__sfputs_r+0xa>
 8014988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801498c <_vfiprintf_r>:
 801498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014990:	460d      	mov	r5, r1
 8014992:	b09d      	sub	sp, #116	@ 0x74
 8014994:	4614      	mov	r4, r2
 8014996:	4698      	mov	r8, r3
 8014998:	4606      	mov	r6, r0
 801499a:	b118      	cbz	r0, 80149a4 <_vfiprintf_r+0x18>
 801499c:	6a03      	ldr	r3, [r0, #32]
 801499e:	b90b      	cbnz	r3, 80149a4 <_vfiprintf_r+0x18>
 80149a0:	f7fe fb44 	bl	801302c <__sinit>
 80149a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80149a6:	07d9      	lsls	r1, r3, #31
 80149a8:	d405      	bmi.n	80149b6 <_vfiprintf_r+0x2a>
 80149aa:	89ab      	ldrh	r3, [r5, #12]
 80149ac:	059a      	lsls	r2, r3, #22
 80149ae:	d402      	bmi.n	80149b6 <_vfiprintf_r+0x2a>
 80149b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80149b2:	f7fe fc86 	bl	80132c2 <__retarget_lock_acquire_recursive>
 80149b6:	89ab      	ldrh	r3, [r5, #12]
 80149b8:	071b      	lsls	r3, r3, #28
 80149ba:	d501      	bpl.n	80149c0 <_vfiprintf_r+0x34>
 80149bc:	692b      	ldr	r3, [r5, #16]
 80149be:	b99b      	cbnz	r3, 80149e8 <_vfiprintf_r+0x5c>
 80149c0:	4629      	mov	r1, r5
 80149c2:	4630      	mov	r0, r6
 80149c4:	f000 f938 	bl	8014c38 <__swsetup_r>
 80149c8:	b170      	cbz	r0, 80149e8 <_vfiprintf_r+0x5c>
 80149ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80149cc:	07dc      	lsls	r4, r3, #31
 80149ce:	d504      	bpl.n	80149da <_vfiprintf_r+0x4e>
 80149d0:	f04f 30ff 	mov.w	r0, #4294967295
 80149d4:	b01d      	add	sp, #116	@ 0x74
 80149d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149da:	89ab      	ldrh	r3, [r5, #12]
 80149dc:	0598      	lsls	r0, r3, #22
 80149de:	d4f7      	bmi.n	80149d0 <_vfiprintf_r+0x44>
 80149e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80149e2:	f7fe fc6f 	bl	80132c4 <__retarget_lock_release_recursive>
 80149e6:	e7f3      	b.n	80149d0 <_vfiprintf_r+0x44>
 80149e8:	2300      	movs	r3, #0
 80149ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80149ec:	2320      	movs	r3, #32
 80149ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80149f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80149f6:	2330      	movs	r3, #48	@ 0x30
 80149f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ba8 <_vfiprintf_r+0x21c>
 80149fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a00:	f04f 0901 	mov.w	r9, #1
 8014a04:	4623      	mov	r3, r4
 8014a06:	469a      	mov	sl, r3
 8014a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a0c:	b10a      	cbz	r2, 8014a12 <_vfiprintf_r+0x86>
 8014a0e:	2a25      	cmp	r2, #37	@ 0x25
 8014a10:	d1f9      	bne.n	8014a06 <_vfiprintf_r+0x7a>
 8014a12:	ebba 0b04 	subs.w	fp, sl, r4
 8014a16:	d00b      	beq.n	8014a30 <_vfiprintf_r+0xa4>
 8014a18:	465b      	mov	r3, fp
 8014a1a:	4622      	mov	r2, r4
 8014a1c:	4629      	mov	r1, r5
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f7ff ffa1 	bl	8014966 <__sfputs_r>
 8014a24:	3001      	adds	r0, #1
 8014a26:	f000 80a7 	beq.w	8014b78 <_vfiprintf_r+0x1ec>
 8014a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a2c:	445a      	add	r2, fp
 8014a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014a30:	f89a 3000 	ldrb.w	r3, [sl]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	f000 809f 	beq.w	8014b78 <_vfiprintf_r+0x1ec>
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a44:	f10a 0a01 	add.w	sl, sl, #1
 8014a48:	9304      	str	r3, [sp, #16]
 8014a4a:	9307      	str	r3, [sp, #28]
 8014a4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014a50:	931a      	str	r3, [sp, #104]	@ 0x68
 8014a52:	4654      	mov	r4, sl
 8014a54:	2205      	movs	r2, #5
 8014a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a5a:	4853      	ldr	r0, [pc, #332]	@ (8014ba8 <_vfiprintf_r+0x21c>)
 8014a5c:	f7eb fbe8 	bl	8000230 <memchr>
 8014a60:	9a04      	ldr	r2, [sp, #16]
 8014a62:	b9d8      	cbnz	r0, 8014a9c <_vfiprintf_r+0x110>
 8014a64:	06d1      	lsls	r1, r2, #27
 8014a66:	bf44      	itt	mi
 8014a68:	2320      	movmi	r3, #32
 8014a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014a6e:	0713      	lsls	r3, r2, #28
 8014a70:	bf44      	itt	mi
 8014a72:	232b      	movmi	r3, #43	@ 0x2b
 8014a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014a78:	f89a 3000 	ldrb.w	r3, [sl]
 8014a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a7e:	d015      	beq.n	8014aac <_vfiprintf_r+0x120>
 8014a80:	9a07      	ldr	r2, [sp, #28]
 8014a82:	4654      	mov	r4, sl
 8014a84:	2000      	movs	r0, #0
 8014a86:	f04f 0c0a 	mov.w	ip, #10
 8014a8a:	4621      	mov	r1, r4
 8014a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a90:	3b30      	subs	r3, #48	@ 0x30
 8014a92:	2b09      	cmp	r3, #9
 8014a94:	d94b      	bls.n	8014b2e <_vfiprintf_r+0x1a2>
 8014a96:	b1b0      	cbz	r0, 8014ac6 <_vfiprintf_r+0x13a>
 8014a98:	9207      	str	r2, [sp, #28]
 8014a9a:	e014      	b.n	8014ac6 <_vfiprintf_r+0x13a>
 8014a9c:	eba0 0308 	sub.w	r3, r0, r8
 8014aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8014aa4:	4313      	orrs	r3, r2
 8014aa6:	9304      	str	r3, [sp, #16]
 8014aa8:	46a2      	mov	sl, r4
 8014aaa:	e7d2      	b.n	8014a52 <_vfiprintf_r+0xc6>
 8014aac:	9b03      	ldr	r3, [sp, #12]
 8014aae:	1d19      	adds	r1, r3, #4
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	9103      	str	r1, [sp, #12]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	bfbb      	ittet	lt
 8014ab8:	425b      	neglt	r3, r3
 8014aba:	f042 0202 	orrlt.w	r2, r2, #2
 8014abe:	9307      	strge	r3, [sp, #28]
 8014ac0:	9307      	strlt	r3, [sp, #28]
 8014ac2:	bfb8      	it	lt
 8014ac4:	9204      	strlt	r2, [sp, #16]
 8014ac6:	7823      	ldrb	r3, [r4, #0]
 8014ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8014aca:	d10a      	bne.n	8014ae2 <_vfiprintf_r+0x156>
 8014acc:	7863      	ldrb	r3, [r4, #1]
 8014ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ad0:	d132      	bne.n	8014b38 <_vfiprintf_r+0x1ac>
 8014ad2:	9b03      	ldr	r3, [sp, #12]
 8014ad4:	1d1a      	adds	r2, r3, #4
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	9203      	str	r2, [sp, #12]
 8014ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014ade:	3402      	adds	r4, #2
 8014ae0:	9305      	str	r3, [sp, #20]
 8014ae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014bb8 <_vfiprintf_r+0x22c>
 8014ae6:	7821      	ldrb	r1, [r4, #0]
 8014ae8:	2203      	movs	r2, #3
 8014aea:	4650      	mov	r0, sl
 8014aec:	f7eb fba0 	bl	8000230 <memchr>
 8014af0:	b138      	cbz	r0, 8014b02 <_vfiprintf_r+0x176>
 8014af2:	9b04      	ldr	r3, [sp, #16]
 8014af4:	eba0 000a 	sub.w	r0, r0, sl
 8014af8:	2240      	movs	r2, #64	@ 0x40
 8014afa:	4082      	lsls	r2, r0
 8014afc:	4313      	orrs	r3, r2
 8014afe:	3401      	adds	r4, #1
 8014b00:	9304      	str	r3, [sp, #16]
 8014b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b06:	4829      	ldr	r0, [pc, #164]	@ (8014bac <_vfiprintf_r+0x220>)
 8014b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b0c:	2206      	movs	r2, #6
 8014b0e:	f7eb fb8f 	bl	8000230 <memchr>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	d03f      	beq.n	8014b96 <_vfiprintf_r+0x20a>
 8014b16:	4b26      	ldr	r3, [pc, #152]	@ (8014bb0 <_vfiprintf_r+0x224>)
 8014b18:	bb1b      	cbnz	r3, 8014b62 <_vfiprintf_r+0x1d6>
 8014b1a:	9b03      	ldr	r3, [sp, #12]
 8014b1c:	3307      	adds	r3, #7
 8014b1e:	f023 0307 	bic.w	r3, r3, #7
 8014b22:	3308      	adds	r3, #8
 8014b24:	9303      	str	r3, [sp, #12]
 8014b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b28:	443b      	add	r3, r7
 8014b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b2c:	e76a      	b.n	8014a04 <_vfiprintf_r+0x78>
 8014b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b32:	460c      	mov	r4, r1
 8014b34:	2001      	movs	r0, #1
 8014b36:	e7a8      	b.n	8014a8a <_vfiprintf_r+0xfe>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	3401      	adds	r4, #1
 8014b3c:	9305      	str	r3, [sp, #20]
 8014b3e:	4619      	mov	r1, r3
 8014b40:	f04f 0c0a 	mov.w	ip, #10
 8014b44:	4620      	mov	r0, r4
 8014b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b4a:	3a30      	subs	r2, #48	@ 0x30
 8014b4c:	2a09      	cmp	r2, #9
 8014b4e:	d903      	bls.n	8014b58 <_vfiprintf_r+0x1cc>
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d0c6      	beq.n	8014ae2 <_vfiprintf_r+0x156>
 8014b54:	9105      	str	r1, [sp, #20]
 8014b56:	e7c4      	b.n	8014ae2 <_vfiprintf_r+0x156>
 8014b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b5c:	4604      	mov	r4, r0
 8014b5e:	2301      	movs	r3, #1
 8014b60:	e7f0      	b.n	8014b44 <_vfiprintf_r+0x1b8>
 8014b62:	ab03      	add	r3, sp, #12
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	462a      	mov	r2, r5
 8014b68:	4b12      	ldr	r3, [pc, #72]	@ (8014bb4 <_vfiprintf_r+0x228>)
 8014b6a:	a904      	add	r1, sp, #16
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	f7fd fe19 	bl	80127a4 <_printf_float>
 8014b72:	4607      	mov	r7, r0
 8014b74:	1c78      	adds	r0, r7, #1
 8014b76:	d1d6      	bne.n	8014b26 <_vfiprintf_r+0x19a>
 8014b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b7a:	07d9      	lsls	r1, r3, #31
 8014b7c:	d405      	bmi.n	8014b8a <_vfiprintf_r+0x1fe>
 8014b7e:	89ab      	ldrh	r3, [r5, #12]
 8014b80:	059a      	lsls	r2, r3, #22
 8014b82:	d402      	bmi.n	8014b8a <_vfiprintf_r+0x1fe>
 8014b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b86:	f7fe fb9d 	bl	80132c4 <__retarget_lock_release_recursive>
 8014b8a:	89ab      	ldrh	r3, [r5, #12]
 8014b8c:	065b      	lsls	r3, r3, #25
 8014b8e:	f53f af1f 	bmi.w	80149d0 <_vfiprintf_r+0x44>
 8014b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014b94:	e71e      	b.n	80149d4 <_vfiprintf_r+0x48>
 8014b96:	ab03      	add	r3, sp, #12
 8014b98:	9300      	str	r3, [sp, #0]
 8014b9a:	462a      	mov	r2, r5
 8014b9c:	4b05      	ldr	r3, [pc, #20]	@ (8014bb4 <_vfiprintf_r+0x228>)
 8014b9e:	a904      	add	r1, sp, #16
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	f7fe f897 	bl	8012cd4 <_printf_i>
 8014ba6:	e7e4      	b.n	8014b72 <_vfiprintf_r+0x1e6>
 8014ba8:	080166ff 	.word	0x080166ff
 8014bac:	08016709 	.word	0x08016709
 8014bb0:	080127a5 	.word	0x080127a5
 8014bb4:	08014967 	.word	0x08014967
 8014bb8:	08016705 	.word	0x08016705

08014bbc <__swbuf_r>:
 8014bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bbe:	460e      	mov	r6, r1
 8014bc0:	4614      	mov	r4, r2
 8014bc2:	4605      	mov	r5, r0
 8014bc4:	b118      	cbz	r0, 8014bce <__swbuf_r+0x12>
 8014bc6:	6a03      	ldr	r3, [r0, #32]
 8014bc8:	b90b      	cbnz	r3, 8014bce <__swbuf_r+0x12>
 8014bca:	f7fe fa2f 	bl	801302c <__sinit>
 8014bce:	69a3      	ldr	r3, [r4, #24]
 8014bd0:	60a3      	str	r3, [r4, #8]
 8014bd2:	89a3      	ldrh	r3, [r4, #12]
 8014bd4:	071a      	lsls	r2, r3, #28
 8014bd6:	d501      	bpl.n	8014bdc <__swbuf_r+0x20>
 8014bd8:	6923      	ldr	r3, [r4, #16]
 8014bda:	b943      	cbnz	r3, 8014bee <__swbuf_r+0x32>
 8014bdc:	4621      	mov	r1, r4
 8014bde:	4628      	mov	r0, r5
 8014be0:	f000 f82a 	bl	8014c38 <__swsetup_r>
 8014be4:	b118      	cbz	r0, 8014bee <__swbuf_r+0x32>
 8014be6:	f04f 37ff 	mov.w	r7, #4294967295
 8014bea:	4638      	mov	r0, r7
 8014bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bee:	6823      	ldr	r3, [r4, #0]
 8014bf0:	6922      	ldr	r2, [r4, #16]
 8014bf2:	1a98      	subs	r0, r3, r2
 8014bf4:	6963      	ldr	r3, [r4, #20]
 8014bf6:	b2f6      	uxtb	r6, r6
 8014bf8:	4283      	cmp	r3, r0
 8014bfa:	4637      	mov	r7, r6
 8014bfc:	dc05      	bgt.n	8014c0a <__swbuf_r+0x4e>
 8014bfe:	4621      	mov	r1, r4
 8014c00:	4628      	mov	r0, r5
 8014c02:	f7ff fe0d 	bl	8014820 <_fflush_r>
 8014c06:	2800      	cmp	r0, #0
 8014c08:	d1ed      	bne.n	8014be6 <__swbuf_r+0x2a>
 8014c0a:	68a3      	ldr	r3, [r4, #8]
 8014c0c:	3b01      	subs	r3, #1
 8014c0e:	60a3      	str	r3, [r4, #8]
 8014c10:	6823      	ldr	r3, [r4, #0]
 8014c12:	1c5a      	adds	r2, r3, #1
 8014c14:	6022      	str	r2, [r4, #0]
 8014c16:	701e      	strb	r6, [r3, #0]
 8014c18:	6962      	ldr	r2, [r4, #20]
 8014c1a:	1c43      	adds	r3, r0, #1
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d004      	beq.n	8014c2a <__swbuf_r+0x6e>
 8014c20:	89a3      	ldrh	r3, [r4, #12]
 8014c22:	07db      	lsls	r3, r3, #31
 8014c24:	d5e1      	bpl.n	8014bea <__swbuf_r+0x2e>
 8014c26:	2e0a      	cmp	r6, #10
 8014c28:	d1df      	bne.n	8014bea <__swbuf_r+0x2e>
 8014c2a:	4621      	mov	r1, r4
 8014c2c:	4628      	mov	r0, r5
 8014c2e:	f7ff fdf7 	bl	8014820 <_fflush_r>
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d0d9      	beq.n	8014bea <__swbuf_r+0x2e>
 8014c36:	e7d6      	b.n	8014be6 <__swbuf_r+0x2a>

08014c38 <__swsetup_r>:
 8014c38:	b538      	push	{r3, r4, r5, lr}
 8014c3a:	4b29      	ldr	r3, [pc, #164]	@ (8014ce0 <__swsetup_r+0xa8>)
 8014c3c:	4605      	mov	r5, r0
 8014c3e:	6818      	ldr	r0, [r3, #0]
 8014c40:	460c      	mov	r4, r1
 8014c42:	b118      	cbz	r0, 8014c4c <__swsetup_r+0x14>
 8014c44:	6a03      	ldr	r3, [r0, #32]
 8014c46:	b90b      	cbnz	r3, 8014c4c <__swsetup_r+0x14>
 8014c48:	f7fe f9f0 	bl	801302c <__sinit>
 8014c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c50:	0719      	lsls	r1, r3, #28
 8014c52:	d422      	bmi.n	8014c9a <__swsetup_r+0x62>
 8014c54:	06da      	lsls	r2, r3, #27
 8014c56:	d407      	bmi.n	8014c68 <__swsetup_r+0x30>
 8014c58:	2209      	movs	r2, #9
 8014c5a:	602a      	str	r2, [r5, #0]
 8014c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c60:	81a3      	strh	r3, [r4, #12]
 8014c62:	f04f 30ff 	mov.w	r0, #4294967295
 8014c66:	e033      	b.n	8014cd0 <__swsetup_r+0x98>
 8014c68:	0758      	lsls	r0, r3, #29
 8014c6a:	d512      	bpl.n	8014c92 <__swsetup_r+0x5a>
 8014c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c6e:	b141      	cbz	r1, 8014c82 <__swsetup_r+0x4a>
 8014c70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014c74:	4299      	cmp	r1, r3
 8014c76:	d002      	beq.n	8014c7e <__swsetup_r+0x46>
 8014c78:	4628      	mov	r0, r5
 8014c7a:	f7ff f981 	bl	8013f80 <_free_r>
 8014c7e:	2300      	movs	r3, #0
 8014c80:	6363      	str	r3, [r4, #52]	@ 0x34
 8014c82:	89a3      	ldrh	r3, [r4, #12]
 8014c84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014c88:	81a3      	strh	r3, [r4, #12]
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	6063      	str	r3, [r4, #4]
 8014c8e:	6923      	ldr	r3, [r4, #16]
 8014c90:	6023      	str	r3, [r4, #0]
 8014c92:	89a3      	ldrh	r3, [r4, #12]
 8014c94:	f043 0308 	orr.w	r3, r3, #8
 8014c98:	81a3      	strh	r3, [r4, #12]
 8014c9a:	6923      	ldr	r3, [r4, #16]
 8014c9c:	b94b      	cbnz	r3, 8014cb2 <__swsetup_r+0x7a>
 8014c9e:	89a3      	ldrh	r3, [r4, #12]
 8014ca0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ca8:	d003      	beq.n	8014cb2 <__swsetup_r+0x7a>
 8014caa:	4621      	mov	r1, r4
 8014cac:	4628      	mov	r0, r5
 8014cae:	f000 f83f 	bl	8014d30 <__smakebuf_r>
 8014cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cb6:	f013 0201 	ands.w	r2, r3, #1
 8014cba:	d00a      	beq.n	8014cd2 <__swsetup_r+0x9a>
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	60a2      	str	r2, [r4, #8]
 8014cc0:	6962      	ldr	r2, [r4, #20]
 8014cc2:	4252      	negs	r2, r2
 8014cc4:	61a2      	str	r2, [r4, #24]
 8014cc6:	6922      	ldr	r2, [r4, #16]
 8014cc8:	b942      	cbnz	r2, 8014cdc <__swsetup_r+0xa4>
 8014cca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014cce:	d1c5      	bne.n	8014c5c <__swsetup_r+0x24>
 8014cd0:	bd38      	pop	{r3, r4, r5, pc}
 8014cd2:	0799      	lsls	r1, r3, #30
 8014cd4:	bf58      	it	pl
 8014cd6:	6962      	ldrpl	r2, [r4, #20]
 8014cd8:	60a2      	str	r2, [r4, #8]
 8014cda:	e7f4      	b.n	8014cc6 <__swsetup_r+0x8e>
 8014cdc:	2000      	movs	r0, #0
 8014cde:	e7f7      	b.n	8014cd0 <__swsetup_r+0x98>
 8014ce0:	20000034 	.word	0x20000034

08014ce4 <__swhatbuf_r>:
 8014ce4:	b570      	push	{r4, r5, r6, lr}
 8014ce6:	460c      	mov	r4, r1
 8014ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cec:	2900      	cmp	r1, #0
 8014cee:	b096      	sub	sp, #88	@ 0x58
 8014cf0:	4615      	mov	r5, r2
 8014cf2:	461e      	mov	r6, r3
 8014cf4:	da0d      	bge.n	8014d12 <__swhatbuf_r+0x2e>
 8014cf6:	89a3      	ldrh	r3, [r4, #12]
 8014cf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014cfc:	f04f 0100 	mov.w	r1, #0
 8014d00:	bf14      	ite	ne
 8014d02:	2340      	movne	r3, #64	@ 0x40
 8014d04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014d08:	2000      	movs	r0, #0
 8014d0a:	6031      	str	r1, [r6, #0]
 8014d0c:	602b      	str	r3, [r5, #0]
 8014d0e:	b016      	add	sp, #88	@ 0x58
 8014d10:	bd70      	pop	{r4, r5, r6, pc}
 8014d12:	466a      	mov	r2, sp
 8014d14:	f000 f848 	bl	8014da8 <_fstat_r>
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	dbec      	blt.n	8014cf6 <__swhatbuf_r+0x12>
 8014d1c:	9901      	ldr	r1, [sp, #4]
 8014d1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014d22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014d26:	4259      	negs	r1, r3
 8014d28:	4159      	adcs	r1, r3
 8014d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014d2e:	e7eb      	b.n	8014d08 <__swhatbuf_r+0x24>

08014d30 <__smakebuf_r>:
 8014d30:	898b      	ldrh	r3, [r1, #12]
 8014d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d34:	079d      	lsls	r5, r3, #30
 8014d36:	4606      	mov	r6, r0
 8014d38:	460c      	mov	r4, r1
 8014d3a:	d507      	bpl.n	8014d4c <__smakebuf_r+0x1c>
 8014d3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014d40:	6023      	str	r3, [r4, #0]
 8014d42:	6123      	str	r3, [r4, #16]
 8014d44:	2301      	movs	r3, #1
 8014d46:	6163      	str	r3, [r4, #20]
 8014d48:	b003      	add	sp, #12
 8014d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d4c:	ab01      	add	r3, sp, #4
 8014d4e:	466a      	mov	r2, sp
 8014d50:	f7ff ffc8 	bl	8014ce4 <__swhatbuf_r>
 8014d54:	9f00      	ldr	r7, [sp, #0]
 8014d56:	4605      	mov	r5, r0
 8014d58:	4639      	mov	r1, r7
 8014d5a:	4630      	mov	r0, r6
 8014d5c:	f7fd fbe8 	bl	8012530 <_malloc_r>
 8014d60:	b948      	cbnz	r0, 8014d76 <__smakebuf_r+0x46>
 8014d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d66:	059a      	lsls	r2, r3, #22
 8014d68:	d4ee      	bmi.n	8014d48 <__smakebuf_r+0x18>
 8014d6a:	f023 0303 	bic.w	r3, r3, #3
 8014d6e:	f043 0302 	orr.w	r3, r3, #2
 8014d72:	81a3      	strh	r3, [r4, #12]
 8014d74:	e7e2      	b.n	8014d3c <__smakebuf_r+0xc>
 8014d76:	89a3      	ldrh	r3, [r4, #12]
 8014d78:	6020      	str	r0, [r4, #0]
 8014d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d7e:	81a3      	strh	r3, [r4, #12]
 8014d80:	9b01      	ldr	r3, [sp, #4]
 8014d82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014d86:	b15b      	cbz	r3, 8014da0 <__smakebuf_r+0x70>
 8014d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	f000 f81d 	bl	8014dcc <_isatty_r>
 8014d92:	b128      	cbz	r0, 8014da0 <__smakebuf_r+0x70>
 8014d94:	89a3      	ldrh	r3, [r4, #12]
 8014d96:	f023 0303 	bic.w	r3, r3, #3
 8014d9a:	f043 0301 	orr.w	r3, r3, #1
 8014d9e:	81a3      	strh	r3, [r4, #12]
 8014da0:	89a3      	ldrh	r3, [r4, #12]
 8014da2:	431d      	orrs	r5, r3
 8014da4:	81a5      	strh	r5, [r4, #12]
 8014da6:	e7cf      	b.n	8014d48 <__smakebuf_r+0x18>

08014da8 <_fstat_r>:
 8014da8:	b538      	push	{r3, r4, r5, lr}
 8014daa:	4d07      	ldr	r5, [pc, #28]	@ (8014dc8 <_fstat_r+0x20>)
 8014dac:	2300      	movs	r3, #0
 8014dae:	4604      	mov	r4, r0
 8014db0:	4608      	mov	r0, r1
 8014db2:	4611      	mov	r1, r2
 8014db4:	602b      	str	r3, [r5, #0]
 8014db6:	f7f8 fccf 	bl	800d758 <_fstat>
 8014dba:	1c43      	adds	r3, r0, #1
 8014dbc:	d102      	bne.n	8014dc4 <_fstat_r+0x1c>
 8014dbe:	682b      	ldr	r3, [r5, #0]
 8014dc0:	b103      	cbz	r3, 8014dc4 <_fstat_r+0x1c>
 8014dc2:	6023      	str	r3, [r4, #0]
 8014dc4:	bd38      	pop	{r3, r4, r5, pc}
 8014dc6:	bf00      	nop
 8014dc8:	200006c8 	.word	0x200006c8

08014dcc <_isatty_r>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	4d06      	ldr	r5, [pc, #24]	@ (8014de8 <_isatty_r+0x1c>)
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	4608      	mov	r0, r1
 8014dd6:	602b      	str	r3, [r5, #0]
 8014dd8:	f7f8 fcce 	bl	800d778 <_isatty>
 8014ddc:	1c43      	adds	r3, r0, #1
 8014dde:	d102      	bne.n	8014de6 <_isatty_r+0x1a>
 8014de0:	682b      	ldr	r3, [r5, #0]
 8014de2:	b103      	cbz	r3, 8014de6 <_isatty_r+0x1a>
 8014de4:	6023      	str	r3, [r4, #0]
 8014de6:	bd38      	pop	{r3, r4, r5, pc}
 8014de8:	200006c8 	.word	0x200006c8

08014dec <_Unwind_GetDataRelBase>:
 8014dec:	b508      	push	{r3, lr}
 8014dee:	f7fd fb65 	bl	80124bc <abort>

08014df2 <_Unwind_GetTextRelBase>:
 8014df2:	b508      	push	{r3, lr}
 8014df4:	f7ff fffa 	bl	8014dec <_Unwind_GetDataRelBase>

08014df8 <_init>:
 8014df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dfa:	bf00      	nop
 8014dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dfe:	bc08      	pop	{r3}
 8014e00:	469e      	mov	lr, r3
 8014e02:	4770      	bx	lr

08014e04 <_fini>:
 8014e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e06:	bf00      	nop
 8014e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e0a:	bc08      	pop	{r3}
 8014e0c:	469e      	mov	lr, r3
 8014e0e:	4770      	bx	lr
