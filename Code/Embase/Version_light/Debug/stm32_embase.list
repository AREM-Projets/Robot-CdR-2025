
stm32_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015fe8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001938  080161b8  080161b8  000171b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001220  08017af0  08017af0  00018af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d60  08018d10  08018d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a70  08019a70  0001b200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019a70  08019a70  0001aa70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019a78  08019a78  0001aa78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08019a7c  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000200  08019c7c  0001b200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08019c7c  0001b704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ed1  00000000  00000000  0001b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386b  00000000  00000000  00044101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  00047970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018ba  00000000  00000000  00049940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002840a  00000000  00000000  0004b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dde9  00000000  00000000  00073604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4aea  00000000  00000000  000913ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af14  00000000  00000000  00175f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00180e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080161a0 	.word	0x080161a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080161a0 	.word	0x080161a0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f001 b8f6 	b.w	8001eac <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <selfrel_offset31>:
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	bf4c      	ite	mi
 8000f9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000f9e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fa2:	4418      	add	r0, r3
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <search_EIT_table>:
 8000fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fac:	b349      	cbz	r1, 8001002 <search_EIT_table+0x5a>
 8000fae:	1e4f      	subs	r7, r1, #1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4615      	mov	r5, r2
 8000fb4:	463e      	mov	r6, r7
 8000fb6:	f04f 0900 	mov.w	r9, #0
 8000fba:	eb09 0106 	add.w	r1, r9, r6
 8000fbe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fc2:	1049      	asrs	r1, r1, #1
 8000fc4:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000fc8:	4640      	mov	r0, r8
 8000fca:	f7ff ffe3 	bl	8000f94 <selfrel_offset31>
 8000fce:	428f      	cmp	r7, r1
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000fd6:	d00f      	beq.n	8000ff8 <search_EIT_table+0x50>
 8000fd8:	3008      	adds	r0, #8
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	4420      	add	r0, r4
 8000fde:	d807      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000fe0:	f7ff ffd8 	bl	8000f94 <selfrel_offset31>
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d208      	bcs.n	8000ffc <search_EIT_table+0x54>
 8000fea:	f101 0901 	add.w	r9, r1, #1
 8000fee:	e7e4      	b.n	8000fba <search_EIT_table+0x12>
 8000ff0:	4589      	cmp	r9, r1
 8000ff2:	d006      	beq.n	8001002 <search_EIT_table+0x5a>
 8000ff4:	1e4e      	subs	r6, r1, #1
 8000ff6:	e7e0      	b.n	8000fba <search_EIT_table+0x12>
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	d8f9      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001002:	f04f 0800 	mov.w	r8, #0
 8001006:	4640      	mov	r0, r8
 8001008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800100c <__gnu_unwind_get_pr_addr>:
 800100c:	2801      	cmp	r0, #1
 800100e:	d007      	beq.n	8001020 <__gnu_unwind_get_pr_addr+0x14>
 8001010:	2802      	cmp	r0, #2
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x18>
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__gnu_unwind_get_pr_addr+0x1c>)
 8001016:	2800      	cmp	r0, #0
 8001018:	bf0c      	ite	eq
 800101a:	4618      	moveq	r0, r3
 800101c:	2000      	movne	r0, #0
 800101e:	4770      	bx	lr
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <__gnu_unwind_get_pr_addr+0x20>)
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <__gnu_unwind_get_pr_addr+0x24>)
 8001026:	4770      	bx	lr
 8001028:	080016d5 	.word	0x080016d5
 800102c:	080016d9 	.word	0x080016d9
 8001030:	080016dd 	.word	0x080016dd

08001034 <get_eit_entry>:
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <get_eit_entry+0x88>)
 8001038:	b083      	sub	sp, #12
 800103a:	4604      	mov	r4, r0
 800103c:	1e8d      	subs	r5, r1, #2
 800103e:	b31b      	cbz	r3, 8001088 <get_eit_entry+0x54>
 8001040:	a901      	add	r1, sp, #4
 8001042:	4628      	mov	r0, r5
 8001044:	f3af 8000 	nop.w
 8001048:	b388      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	462a      	mov	r2, r5
 800104e:	f7ff ffab 	bl	8000fa8 <search_EIT_table>
 8001052:	4601      	mov	r1, r0
 8001054:	b358      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 8001056:	f7ff ff9d 	bl	8000f94 <selfrel_offset31>
 800105a:	684b      	ldr	r3, [r1, #4]
 800105c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800105e:	2b01      	cmp	r3, #1
 8001060:	d028      	beq.n	80010b4 <get_eit_entry+0x80>
 8001062:	2b00      	cmp	r3, #0
 8001064:	f101 0004 	add.w	r0, r1, #4
 8001068:	db1f      	blt.n	80010aa <get_eit_entry+0x76>
 800106a:	f7ff ff93 	bl	8000f94 <selfrel_offset31>
 800106e:	2300      	movs	r3, #0
 8001070:	6523      	str	r3, [r4, #80]	@ 0x50
 8001072:	6803      	ldr	r3, [r0, #0]
 8001074:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0d      	blt.n	8001096 <get_eit_entry+0x62>
 800107a:	f7ff ff8b 	bl	8000f94 <selfrel_offset31>
 800107e:	4603      	mov	r3, r0
 8001080:	2000      	movs	r0, #0
 8001082:	6123      	str	r3, [r4, #16]
 8001084:	b003      	add	sp, #12
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <get_eit_entry+0x8c>)
 800108a:	490e      	ldr	r1, [pc, #56]	@ (80010c4 <get_eit_entry+0x90>)
 800108c:	1ac9      	subs	r1, r1, r3
 800108e:	10c9      	asrs	r1, r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	9101      	str	r1, [sp, #4]
 8001094:	e7da      	b.n	800104c <get_eit_entry+0x18>
 8001096:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800109a:	f7ff ffb7 	bl	800100c <__gnu_unwind_get_pr_addr>
 800109e:	4603      	mov	r3, r0
 80010a0:	b128      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 80010a2:	2000      	movs	r0, #0
 80010a4:	6123      	str	r3, [r4, #16]
 80010a6:	b003      	add	sp, #12
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	2301      	movs	r3, #1
 80010ac:	e7e0      	b.n	8001070 <get_eit_entry+0x3c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	2009      	movs	r0, #9
 80010b2:	e7e6      	b.n	8001082 <get_eit_entry+0x4e>
 80010b4:	2300      	movs	r3, #0
 80010b6:	2005      	movs	r0, #5
 80010b8:	e7e3      	b.n	8001082 <get_eit_entry+0x4e>
 80010ba:	bf00      	nop
 80010bc:	00000000 	.word	0x00000000
 80010c0:	08018d10 	.word	0x08018d10
 80010c4:	08019a70 	.word	0x08019a70

080010c8 <restore_non_core_regs>:
 80010c8:	6803      	ldr	r3, [r0, #0]
 80010ca:	07da      	lsls	r2, r3, #31
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	d406      	bmi.n	80010e0 <restore_non_core_regs+0x18>
 80010d2:	079b      	lsls	r3, r3, #30
 80010d4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80010d8:	d509      	bpl.n	80010ee <restore_non_core_regs+0x26>
 80010da:	f000 fc69 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	0759      	lsls	r1, r3, #29
 80010e2:	d509      	bpl.n	80010f8 <restore_non_core_regs+0x30>
 80010e4:	071a      	lsls	r2, r3, #28
 80010e6:	d50e      	bpl.n	8001106 <restore_non_core_regs+0x3e>
 80010e8:	06db      	lsls	r3, r3, #27
 80010ea:	d513      	bpl.n	8001114 <restore_non_core_regs+0x4c>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	f000 fc57 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	0759      	lsls	r1, r3, #29
 80010f6:	d4f5      	bmi.n	80010e4 <restore_non_core_regs+0x1c>
 80010f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010fc:	f000 fc60 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	071a      	lsls	r2, r3, #28
 8001104:	d4f0      	bmi.n	80010e8 <restore_non_core_regs+0x20>
 8001106:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800110a:	f000 fc61 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	06db      	lsls	r3, r3, #27
 8001112:	d4eb      	bmi.n	80010ec <restore_non_core_regs+0x24>
 8001114:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800111c:	f000 bc9c 	b.w	8001a58 <__gnu_Unwind_Restore_WMMXC>

08001120 <__gnu_unwind_24bit.constprop.0>:
 8001120:	2009      	movs	r0, #9
 8001122:	4770      	bx	lr

08001124 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001124:	4603      	mov	r3, r0
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	b100      	cbz	r0, 800112c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800112a:	4418      	add	r0, r3
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_DebugHook>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <unwind_phase2>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	4604      	mov	r4, r0
 8001138:	460e      	mov	r6, r1
 800113a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff79 	bl	8001034 <get_eit_entry>
 8001142:	4605      	mov	r5, r0
 8001144:	b988      	cbnz	r0, 800116a <unwind_phase2+0x36>
 8001146:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001148:	6162      	str	r2, [r4, #20]
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	4632      	mov	r2, r6
 800114e:	4621      	mov	r1, r4
 8001150:	2001      	movs	r0, #1
 8001152:	4798      	blx	r3
 8001154:	2808      	cmp	r0, #8
 8001156:	d0f0      	beq.n	800113a <unwind_phase2+0x6>
 8001158:	2807      	cmp	r0, #7
 800115a:	d106      	bne.n	800116a <unwind_phase2+0x36>
 800115c:	4628      	mov	r0, r5
 800115e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001160:	f7ff ffe6 	bl	8001130 <_Unwind_DebugHook>
 8001164:	1d30      	adds	r0, r6, #4
 8001166:	f000 fc0f 	bl	8001988 <__restore_core_regs>
 800116a:	f012 f9b5 	bl	80134d8 <abort>
 800116e:	bf00      	nop

08001170 <unwind_phase2_forced>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	1d0d      	adds	r5, r1, #4
 8001176:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800117a:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800117e:	4607      	mov	r7, r0
 8001180:	4614      	mov	r4, r2
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001188:	f10d 0c0c 	add.w	ip, sp, #12
 800118c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a0:	ae02      	add	r6, sp, #8
 80011a2:	f04f 0e00 	mov.w	lr, #0
 80011a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011aa:	f8c6 e000 	str.w	lr, [r6]
 80011ae:	e020      	b.n	80011f2 <unwind_phase2_forced+0x82>
 80011b0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011b8:	4631      	mov	r1, r6
 80011ba:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011bc:	f013 f8b1 	bl	8014322 <memcpy>
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80011c4:	4639      	mov	r1, r7
 80011c6:	4650      	mov	r0, sl
 80011c8:	4798      	blx	r3
 80011ca:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80011cc:	6473      	str	r3, [r6, #68]	@ 0x44
 80011ce:	4621      	mov	r1, r4
 80011d0:	e9cd 6900 	strd	r6, r9, [sp]
 80011d4:	4605      	mov	r5, r0
 80011d6:	463b      	mov	r3, r7
 80011d8:	463a      	mov	r2, r7
 80011da:	2001      	movs	r0, #1
 80011dc:	47c0      	blx	r8
 80011de:	4604      	mov	r4, r0
 80011e0:	bb18      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 80011e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011e6:	a97a      	add	r1, sp, #488	@ 0x1e8
 80011e8:	4630      	mov	r0, r6
 80011ea:	f013 f89a 	bl	8014322 <memcpy>
 80011ee:	2d08      	cmp	r5, #8
 80011f0:	d119      	bne.n	8001226 <unwind_phase2_forced+0xb6>
 80011f2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011f4:	4638      	mov	r0, r7
 80011f6:	f7ff ff1d 	bl	8001034 <get_eit_entry>
 80011fa:	3409      	adds	r4, #9
 80011fc:	fa5f fa84 	uxtb.w	sl, r4
 8001200:	4605      	mov	r5, r0
 8001202:	2800      	cmp	r0, #0
 8001204:	d0d4      	beq.n	80011b0 <unwind_phase2_forced+0x40>
 8001206:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001208:	6473      	str	r3, [r6, #68]	@ 0x44
 800120a:	463a      	mov	r2, r7
 800120c:	e9cd 6900 	strd	r6, r9, [sp]
 8001210:	463b      	mov	r3, r7
 8001212:	f04a 0110 	orr.w	r1, sl, #16
 8001216:	2001      	movs	r0, #1
 8001218:	47c0      	blx	r8
 800121a:	b930      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 800121c:	4628      	mov	r0, r5
 800121e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	2d07      	cmp	r5, #7
 8001228:	d005      	beq.n	8001236 <unwind_phase2_forced+0xc6>
 800122a:	2509      	movs	r5, #9
 800122c:	4628      	mov	r0, r5
 800122e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	4620      	mov	r0, r4
 8001238:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800123a:	f7ff ff79 	bl	8001130 <_Unwind_DebugHook>
 800123e:	a803      	add	r0, sp, #12
 8001240:	f000 fba2 	bl	8001988 <__restore_core_regs>

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800124c:	640b      	str	r3, [r1, #64]	@ 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	@ 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed1 	bl	8001034 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	@ 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff13 	bl	80010c8 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff43 	bl	8001134 <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e758      	b.n	8001170 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	@ 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff26 	bl	8001134 <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80012ec:	f7ff ff20 	bl	8001130 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb49 	bl	8001988 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3a 	bl	8001170 <unwind_phase2_forced>
 80012fc:	f012 f8ec 	bl	80134d8 <abort>
 8001300:	f012 f8ea 	bl	80134d8 <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800130a:	640a      	str	r2, [r1, #64]	@ 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e72f      	b.n	8001170 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d010      	beq.n	800134a <_Unwind_VRS_Get+0x26>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b983      	cbnz	r3, 800134e <_Unwind_VRS_Get+0x2a>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80e      	bhi.n	800134e <_Unwind_VRS_Get+0x2a>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf8c      	ite	hi
 8001344:	2002      	movhi	r0, #2
 8001346:	2001      	movls	r0, #1
 8001348:	4770      	bx	lr
 800134a:	4608      	mov	r0, r1
 800134c:	4770      	bx	lr
 800134e:	2002      	movs	r0, #2
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d010      	beq.n	8001396 <_Unwind_VRS_Set+0x26>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b983      	cbnz	r3, 800139a <_Unwind_VRS_Set+0x2a>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80e      	bhi.n	800139a <_Unwind_VRS_Set+0x2a>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf8c      	ite	hi
 8001390:	2002      	movhi	r0, #2
 8001392:	2001      	movls	r0, #1
 8001394:	4770      	bx	lr
 8001396:	4608      	mov	r0, r1
 8001398:	4770      	bx	lr
 800139a:	2002      	movs	r0, #2
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	@ 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	@ 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	@ 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0a 	bl	8001034 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	@ 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	@ 0x58
 8001430:	f7ff fe4a 	bl	80010c8 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	4693      	mov	fp, r2
 8001442:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001444:	b089      	sub	sp, #36	@ 0x24
 8001446:	460d      	mov	r5, r1
 8001448:	f852 1b04 	ldr.w	r1, [r2], #4
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	f000 0c03 	and.w	ip, r0, #3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d079      	beq.n	800154a <__gnu_unwind_pr_common+0x10e>
 8001456:	0c0c      	lsrs	r4, r1, #16
 8001458:	f88d 401d 	strb.w	r4, [sp, #29]
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	b2e4      	uxtb	r4, r4
 8001460:	9105      	str	r1, [sp, #20]
 8001462:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001466:	2102      	movs	r1, #2
 8001468:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800146a:	f88d 101c 	strb.w	r1, [sp, #28]
 800146e:	f1bc 0f02 	cmp.w	ip, #2
 8001472:	bf08      	it	eq
 8001474:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001476:	f017 0701 	ands.w	r7, r7, #1
 800147a:	d00c      	beq.n	8001496 <__gnu_unwind_pr_common+0x5a>
 800147c:	a905      	add	r1, sp, #20
 800147e:	4658      	mov	r0, fp
 8001480:	f000 fb84 	bl	8001b8c <__gnu_unwind_execute>
 8001484:	b918      	cbnz	r0, 800148e <__gnu_unwind_pr_common+0x52>
 8001486:	2008      	movs	r0, #8
 8001488:	b009      	add	sp, #36	@ 0x24
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148e:	2009      	movs	r0, #9
 8001490:	b009      	add	sp, #36	@ 0x24
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001496:	6816      	ldr	r6, [r2, #0]
 8001498:	2e00      	cmp	r6, #0
 800149a:	d0ef      	beq.n	800147c <__gnu_unwind_pr_common+0x40>
 800149c:	f000 0108 	and.w	r1, r0, #8
 80014a0:	9101      	str	r1, [sp, #4]
 80014a2:	46b2      	mov	sl, r6
 80014a4:	9702      	str	r7, [sp, #8]
 80014a6:	4664      	mov	r4, ip
 80014a8:	4699      	mov	r9, r3
 80014aa:	f1b9 0f02 	cmp.w	r9, #2
 80014ae:	d048      	beq.n	8001542 <__gnu_unwind_pr_common+0x106>
 80014b0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014b4:	8856      	ldrh	r6, [r2, #2]
 80014b6:	f102 0804 	add.w	r8, r2, #4
 80014ba:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014bc:	f026 0301 	bic.w	r3, r6, #1
 80014c0:	210f      	movs	r1, #15
 80014c2:	4658      	mov	r0, fp
 80014c4:	189f      	adds	r7, r3, r2
 80014c6:	f7ff ff45 	bl	8001354 <_Unwind_GetGR>
 80014ca:	4287      	cmp	r7, r0
 80014cc:	d837      	bhi.n	800153e <__gnu_unwind_pr_common+0x102>
 80014ce:	f02a 0201 	bic.w	r2, sl, #1
 80014d2:	443a      	add	r2, r7
 80014d4:	4282      	cmp	r2, r0
 80014d6:	bf94      	ite	ls
 80014d8:	2200      	movls	r2, #0
 80014da:	2201      	movhi	r2, #1
 80014dc:	0073      	lsls	r3, r6, #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d047      	beq.n	800157e <__gnu_unwind_pr_common+0x142>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d031      	beq.n	8001556 <__gnu_unwind_pr_common+0x11a>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cb      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 80014f6:	b114      	cbz	r4, 80014fe <__gnu_unwind_pr_common+0xc2>
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	f040 80c9 	bne.w	8001690 <__gnu_unwind_pr_common+0x254>
 80014fe:	f108 0204 	add.w	r2, r8, #4
 8001502:	f8d2 a000 	ldr.w	sl, [r2]
 8001506:	f1ba 0f00 	cmp.w	sl, #0
 800150a:	d1ce      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150c:	a905      	add	r1, sp, #20
 800150e:	4658      	mov	r0, fp
 8001510:	9f02      	ldr	r7, [sp, #8]
 8001512:	f000 fb3b 	bl	8001b8c <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1b9      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 800151a:	2f00      	cmp	r7, #0
 800151c:	d0b3      	beq.n	8001486 <__gnu_unwind_pr_common+0x4a>
 800151e:	210f      	movs	r1, #15
 8001520:	4658      	mov	r0, fp
 8001522:	f7ff ff17 	bl	8001354 <_Unwind_GetGR>
 8001526:	210e      	movs	r1, #14
 8001528:	4602      	mov	r2, r0
 800152a:	4658      	mov	r0, fp
 800152c:	f7ff ff38 	bl	80013a0 <_Unwind_SetGR>
 8001530:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <__gnu_unwind_pr_common+0x294>)
 8001532:	210f      	movs	r1, #15
 8001534:	4658      	mov	r0, fp
 8001536:	f7ff ff33 	bl	80013a0 <_Unwind_SetGR>
 800153a:	2007      	movs	r0, #7
 800153c:	e7a8      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 800153e:	2200      	movs	r2, #0
 8001540:	e7cc      	b.n	80014dc <__gnu_unwind_pr_common+0xa0>
 8001542:	6856      	ldr	r6, [r2, #4]
 8001544:	f102 0808 	add.w	r8, r2, #8
 8001548:	e7b7      	b.n	80014ba <__gnu_unwind_pr_common+0x7e>
 800154a:	0209      	lsls	r1, r1, #8
 800154c:	9105      	str	r1, [sp, #20]
 800154e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001552:	2103      	movs	r1, #3
 8001554:	e788      	b.n	8001468 <__gnu_unwind_pr_common+0x2c>
 8001556:	f8d8 6000 	ldr.w	r6, [r8]
 800155a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800155e:	2c00      	cmp	r4, #0
 8001560:	d144      	bne.n	80015ec <__gnu_unwind_pr_common+0x1b0>
 8001562:	b122      	cbz	r2, 800156e <__gnu_unwind_pr_common+0x132>
 8001564:	9a01      	ldr	r2, [sp, #4]
 8001566:	2a00      	cmp	r2, #0
 8001568:	d05a      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d058      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156e:	2e00      	cmp	r6, #0
 8001570:	da01      	bge.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001572:	f108 0804 	add.w	r8, r8, #4
 8001576:	3301      	adds	r3, #1
 8001578:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 800157c:	e7c1      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 800157e:	b9ec      	cbnz	r4, 80015bc <__gnu_unwind_pr_common+0x180>
 8001580:	b1ca      	cbz	r2, 80015b6 <__gnu_unwind_pr_common+0x17a>
 8001582:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001586:	f8d8 2000 	ldr.w	r2, [r8]
 800158a:	1c99      	adds	r1, r3, #2
 800158c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001590:	f43f af7d 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 8001594:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001598:	3301      	adds	r3, #1
 800159a:	9104      	str	r1, [sp, #16]
 800159c:	f000 808b 	beq.w	80016b6 <__gnu_unwind_pr_common+0x27a>
 80015a0:	f108 0004 	add.w	r0, r8, #4
 80015a4:	f7ff fdbe 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015a8:	ab04      	add	r3, sp, #16
 80015aa:	4601      	mov	r1, r0
 80015ac:	4628      	mov	r0, r5
 80015ae:	f010 fb91 	bl	8011cd4 <__cxa_type_match>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d157      	bne.n	8001666 <__gnu_unwind_pr_common+0x22a>
 80015b6:	f108 0208 	add.w	r2, r8, #8
 80015ba:	e7a2      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80015bc:	210d      	movs	r1, #13
 80015be:	4658      	mov	r0, fp
 80015c0:	f7ff fec8 	bl	8001354 <_Unwind_GetGR>
 80015c4:	6a2b      	ldr	r3, [r5, #32]
 80015c6:	4283      	cmp	r3, r0
 80015c8:	d1f5      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015cc:	4598      	cmp	r8, r3
 80015ce:	d1f2      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7ff fcdf 	bl	8000f94 <selfrel_offset31>
 80015d6:	210f      	movs	r1, #15
 80015d8:	4602      	mov	r2, r0
 80015da:	4658      	mov	r0, fp
 80015dc:	f7ff fee0 	bl	80013a0 <_Unwind_SetGR>
 80015e0:	462a      	mov	r2, r5
 80015e2:	2100      	movs	r1, #0
 80015e4:	4658      	mov	r0, fp
 80015e6:	f7ff fedb 	bl	80013a0 <_Unwind_SetGR>
 80015ea:	e7a6      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80015ec:	210d      	movs	r1, #13
 80015ee:	4658      	mov	r0, fp
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	f7ff feaf 	bl	8001354 <_Unwind_GetGR>
 80015f6:	6a2a      	ldr	r2, [r5, #32]
 80015f8:	9b03      	ldr	r3, [sp, #12]
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d1b7      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 80015fe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001600:	4590      	cmp	r8, r2
 8001602:	d1b4      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 8001604:	2700      	movs	r7, #0
 8001606:	2204      	movs	r2, #4
 8001608:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800160c:	4442      	add	r2, r8
 800160e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001610:	636a      	str	r2, [r5, #52]	@ 0x34
 8001612:	f8d8 2000 	ldr.w	r2, [r8]
 8001616:	42ba      	cmp	r2, r7
 8001618:	db55      	blt.n	80016c6 <__gnu_unwind_pr_common+0x28a>
 800161a:	2201      	movs	r2, #1
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	e7aa      	b.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001620:	9403      	str	r4, [sp, #12]
 8001622:	f108 0a04 	add.w	sl, r8, #4
 8001626:	2600      	movs	r6, #0
 8001628:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800162c:	461c      	mov	r4, r3
 800162e:	e00d      	b.n	800164c <__gnu_unwind_pr_common+0x210>
 8001630:	4650      	mov	r0, sl
 8001632:	9704      	str	r7, [sp, #16]
 8001634:	f7ff fd76 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001638:	2200      	movs	r2, #0
 800163a:	4601      	mov	r1, r0
 800163c:	ab04      	add	r3, sp, #16
 800163e:	4628      	mov	r0, r5
 8001640:	3601      	adds	r6, #1
 8001642:	f10a 0a04 	add.w	sl, sl, #4
 8001646:	f010 fb45 	bl	8011cd4 <__cxa_type_match>
 800164a:	b9e0      	cbnz	r0, 8001686 <__gnu_unwind_pr_common+0x24a>
 800164c:	42a6      	cmp	r6, r4
 800164e:	d1ef      	bne.n	8001630 <__gnu_unwind_pr_common+0x1f4>
 8001650:	210d      	movs	r1, #13
 8001652:	4658      	mov	r0, fp
 8001654:	f7ff fe7e 	bl	8001354 <_Unwind_GetGR>
 8001658:	9b04      	ldr	r3, [sp, #16]
 800165a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800165e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8001662:	2006      	movs	r0, #6
 8001664:	e714      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001666:	4604      	mov	r4, r0
 8001668:	210d      	movs	r1, #13
 800166a:	4658      	mov	r0, fp
 800166c:	f7ff fe72 	bl	8001354 <_Unwind_GetGR>
 8001670:	9e04      	ldr	r6, [sp, #16]
 8001672:	6228      	str	r0, [r5, #32]
 8001674:	2c02      	cmp	r4, #2
 8001676:	bf04      	itt	eq
 8001678:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 800167a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800167e:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001682:	2006      	movs	r0, #6
 8001684:	e704      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001686:	4623      	mov	r3, r4
 8001688:	f8d8 6000 	ldr.w	r6, [r8]
 800168c:	9c03      	ldr	r4, [sp, #12]
 800168e:	e76e      	b.n	800156e <__gnu_unwind_pr_common+0x132>
 8001690:	4640      	mov	r0, r8
 8001692:	f7ff fc7f 	bl	8000f94 <selfrel_offset31>
 8001696:	f108 0204 	add.w	r2, r8, #4
 800169a:	4604      	mov	r4, r0
 800169c:	63aa      	str	r2, [r5, #56]	@ 0x38
 800169e:	4628      	mov	r0, r5
 80016a0:	f010 fb76 	bl	8011d90 <__cxa_begin_cleanup>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	f43f aef2 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 80016aa:	4622      	mov	r2, r4
 80016ac:	210f      	movs	r1, #15
 80016ae:	4658      	mov	r0, fp
 80016b0:	f7ff fe76 	bl	80013a0 <_Unwind_SetGR>
 80016b4:	e741      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80016b6:	460c      	mov	r4, r1
 80016b8:	4658      	mov	r0, fp
 80016ba:	210d      	movs	r1, #13
 80016bc:	f7ff fe4a 	bl	8001354 <_Unwind_GetGR>
 80016c0:	4626      	mov	r6, r4
 80016c2:	6228      	str	r0, [r5, #32]
 80016c4:	e7db      	b.n	800167e <__gnu_unwind_pr_common+0x242>
 80016c6:	1c58      	adds	r0, r3, #1
 80016c8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80016cc:	e781      	b.n	80015d2 <__gnu_unwind_pr_common+0x196>
 80016ce:	bf00      	nop
 80016d0:	080124ff 	.word	0x080124ff

080016d4 <__aeabi_unwind_cpp_pr0>:
 80016d4:	2300      	movs	r3, #0
 80016d6:	e6b1      	b.n	800143c <__gnu_unwind_pr_common>

080016d8 <__aeabi_unwind_cpp_pr1>:
 80016d8:	2301      	movs	r3, #1
 80016da:	e6af      	b.n	800143c <__gnu_unwind_pr_common>

080016dc <__aeabi_unwind_cpp_pr2>:
 80016dc:	2302      	movs	r3, #2
 80016de:	e6ad      	b.n	800143c <__gnu_unwind_pr_common>

080016e0 <_Unwind_VRS_Pop>:
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	4606      	mov	r6, r0
 80016e6:	b0c3      	sub	sp, #268	@ 0x10c
 80016e8:	4615      	mov	r5, r2
 80016ea:	461c      	mov	r4, r3
 80016ec:	2904      	cmp	r1, #4
 80016ee:	f200 80d1 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 80016f2:	e8df f001 	tbb	[pc, r1]
 80016f6:	51ac      	.short	0x51ac
 80016f8:	2acf      	.short	0x2acf
 80016fa:	03          	.byte	0x03
 80016fb:	00          	.byte	0x00
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	f040 80c9 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001702:	2a10      	cmp	r2, #16
 8001704:	f200 80c6 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001708:	6803      	ldr	r3, [r0, #0]
 800170a:	06dc      	lsls	r4, r3, #27
 800170c:	f100 80e7 	bmi.w	80018de <_Unwind_VRS_Pop+0x1fe>
 8001710:	af20      	add	r7, sp, #128	@ 0x80
 8001712:	4638      	mov	r0, r7
 8001714:	f000 f9aa 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 8001718:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800171a:	4639      	mov	r1, r7
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 0c01 	mov.w	ip, #1
 8001722:	fa0c f203 	lsl.w	r2, ip, r3
 8001726:	422a      	tst	r2, r5
 8001728:	4620      	mov	r0, r4
 800172a:	f103 0301 	add.w	r3, r3, #1
 800172e:	d003      	beq.n	8001738 <_Unwind_VRS_Pop+0x58>
 8001730:	f850 2b04 	ldr.w	r2, [r0], #4
 8001734:	600a      	str	r2, [r1, #0]
 8001736:	4604      	mov	r4, r0
 8001738:	2b04      	cmp	r3, #4
 800173a:	f101 0104 	add.w	r1, r1, #4
 800173e:	d1f0      	bne.n	8001722 <_Unwind_VRS_Pop+0x42>
 8001740:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001742:	4638      	mov	r0, r7
 8001744:	f000 f988 	bl	8001a58 <__gnu_Unwind_Restore_WMMXC>
 8001748:	e099      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800174a:	2c03      	cmp	r4, #3
 800174c:	f040 80a2 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001750:	b294      	uxth	r4, r2
 8001752:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001756:	2b10      	cmp	r3, #16
 8001758:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800175c:	f200 809a 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	071f      	lsls	r7, r3, #28
 8001764:	f100 80c3 	bmi.w	80018ee <_Unwind_VRS_Pop+0x20e>
 8001768:	af20      	add	r7, sp, #128	@ 0x80
 800176a:	4638      	mov	r0, r7
 800176c:	f000 f952 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 8001770:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001772:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001776:	b154      	cbz	r4, 800178e <_Unwind_VRS_Pop+0xae>
 8001778:	460b      	mov	r3, r1
 800177a:	1ad0      	subs	r0, r2, r3
 800177c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001780:	00e4      	lsls	r4, r4, #3
 8001782:	581d      	ldr	r5, [r3, r0]
 8001784:	f843 5b04 	str.w	r5, [r3], #4
 8001788:	428b      	cmp	r3, r1
 800178a:	d1fa      	bne.n	8001782 <_Unwind_VRS_Pop+0xa2>
 800178c:	4422      	add	r2, r4
 800178e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001790:	4638      	mov	r0, r7
 8001792:	f000 f91d 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 8001796:	e072      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001798:	2c01      	cmp	r4, #1
 800179a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800179e:	b295      	uxth	r5, r2
 80017a0:	d071      	beq.n	8001886 <_Unwind_VRS_Pop+0x1a6>
 80017a2:	2c05      	cmp	r4, #5
 80017a4:	d176      	bne.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017a6:	eb08 0905 	add.w	r9, r8, r5
 80017aa:	f1b9 0f20 	cmp.w	r9, #32
 80017ae:	d871      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017b0:	f1b8 0f0f 	cmp.w	r8, #15
 80017b4:	d872      	bhi.n	800189c <_Unwind_VRS_Pop+0x1bc>
 80017b6:	f1b9 0f10 	cmp.w	r9, #16
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	f200 809f 	bhi.w	80018fe <_Unwind_VRS_Pop+0x21e>
 80017c0:	07d9      	lsls	r1, r3, #31
 80017c2:	d508      	bpl.n	80017d6 <_Unwind_VRS_Pop+0xf6>
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	4630      	mov	r0, r6
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f840 3b48 	str.w	r3, [r0], #72
 80017d2:	f000 f8f1 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017d6:	af20      	add	r7, sp, #128	@ 0x80
 80017d8:	4638      	mov	r0, r7
 80017da:	f000 f8ed 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017de:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	f000 80b9 	beq.w	8001958 <_Unwind_VRS_Pop+0x278>
 80017e6:	006d      	lsls	r5, r5, #1
 80017e8:	1e6a      	subs	r2, r5, #1
 80017ea:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 80017ee:	2500      	movs	r5, #0
 80017f0:	3201      	adds	r2, #1
 80017f2:	3904      	subs	r1, #4
 80017f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80017f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80017fc:	f841 0f04 	str.w	r0, [r1, #4]!
 8001800:	4293      	cmp	r3, r2
 8001802:	d1f9      	bne.n	80017f8 <_Unwind_VRS_Pop+0x118>
 8001804:	2d00      	cmp	r5, #0
 8001806:	f000 80a1 	beq.w	800194c <_Unwind_VRS_Pop+0x26c>
 800180a:	4641      	mov	r1, r8
 800180c:	2910      	cmp	r1, #16
 800180e:	bf38      	it	cc
 8001810:	2110      	movcc	r1, #16
 8001812:	006b      	lsls	r3, r5, #1
 8001814:	3910      	subs	r1, #16
 8001816:	466f      	mov	r7, sp
 8001818:	3b01      	subs	r3, #1
 800181a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800181e:	3301      	adds	r3, #1
 8001820:	3904      	subs	r1, #4
 8001822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001826:	f852 0b04 	ldr.w	r0, [r2], #4
 800182a:	f841 0f04 	str.w	r0, [r1, #4]!
 800182e:	429a      	cmp	r2, r3
 8001830:	d1f9      	bne.n	8001826 <_Unwind_VRS_Pop+0x146>
 8001832:	2c01      	cmp	r4, #1
 8001834:	f000 8088 	beq.w	8001948 <_Unwind_VRS_Pop+0x268>
 8001838:	f1b8 0f0f 	cmp.w	r8, #15
 800183c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800183e:	d802      	bhi.n	8001846 <_Unwind_VRS_Pop+0x166>
 8001840:	a820      	add	r0, sp, #128	@ 0x80
 8001842:	f000 f8b5 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 8001846:	4638      	mov	r0, r7
 8001848:	f000 f8ba 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800184c:	e017      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800184e:	bb0c      	cbnz	r4, 8001894 <_Unwind_VRS_Pop+0x1b4>
 8001850:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001852:	4623      	mov	r3, r4
 8001854:	fa1f fc82 	uxth.w	ip, r2
 8001858:	2401      	movs	r4, #1
 800185a:	1d37      	adds	r7, r6, #4
 800185c:	fa04 f103 	lsl.w	r1, r4, r3
 8001860:	ea11 0f0c 	tst.w	r1, ip
 8001864:	4602      	mov	r2, r0
 8001866:	d004      	beq.n	8001872 <_Unwind_VRS_Pop+0x192>
 8001868:	f852 1b04 	ldr.w	r1, [r2], #4
 800186c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8001870:	4610      	mov	r0, r2
 8001872:	3301      	adds	r3, #1
 8001874:	2b10      	cmp	r3, #16
 8001876:	d1f1      	bne.n	800185c <_Unwind_VRS_Pop+0x17c>
 8001878:	04ac      	lsls	r4, r5, #18
 800187a:	d400      	bmi.n	800187e <_Unwind_VRS_Pop+0x19e>
 800187c:	63b0      	str	r0, [r6, #56]	@ 0x38
 800187e:	2000      	movs	r0, #0
 8001880:	b043      	add	sp, #268	@ 0x10c
 8001882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001886:	eb08 0305 	add.w	r3, r8, r5
 800188a:	2b10      	cmp	r3, #16
 800188c:	d802      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 800188e:	f1b8 0f10 	cmp.w	r8, #16
 8001892:	d114      	bne.n	80018be <_Unwind_VRS_Pop+0x1de>
 8001894:	2002      	movs	r0, #2
 8001896:	b043      	add	sp, #268	@ 0x10c
 8001898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800189c:	2d00      	cmp	r5, #0
 800189e:	d0ee      	beq.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	075a      	lsls	r2, r3, #29
 80018a4:	d45c      	bmi.n	8001960 <_Unwind_VRS_Pop+0x280>
 80018a6:	466f      	mov	r7, sp
 80018a8:	4638      	mov	r0, r7
 80018aa:	f000 f88d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ae:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018b0:	006b      	lsls	r3, r5, #1
 80018b2:	f1a8 0110 	sub.w	r1, r8, #16
 80018b6:	3b01      	subs	r3, #1
 80018b8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018bc:	e7af      	b.n	800181e <_Unwind_VRS_Pop+0x13e>
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	07da      	lsls	r2, r3, #31
 80018c2:	d459      	bmi.n	8001978 <_Unwind_VRS_Pop+0x298>
 80018c4:	af20      	add	r7, sp, #128	@ 0x80
 80018c6:	4638      	mov	r0, r7
 80018c8:	f000 f86e 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 80018cc:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	d189      	bne.n	80017e6 <_Unwind_VRS_Pop+0x106>
 80018d2:	3304      	adds	r3, #4
 80018d4:	63b3      	str	r3, [r6, #56]	@ 0x38
 80018d6:	4638      	mov	r0, r7
 80018d8:	f000 f862 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80018dc:	e7cf      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018de:	f023 0310 	bic.w	r3, r3, #16
 80018e2:	6003      	str	r3, [r0, #0]
 80018e4:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80018e8:	f000 f8c0 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 80018ec:	e710      	b.n	8001710 <_Unwind_VRS_Pop+0x30>
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	6003      	str	r3, [r0, #0]
 80018f4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 80018f8:	f000 f88c 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 80018fc:	e734      	b.n	8001768 <_Unwind_VRS_Pop+0x88>
 80018fe:	07d9      	lsls	r1, r3, #31
 8001900:	d508      	bpl.n	8001914 <_Unwind_VRS_Pop+0x234>
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f840 3b48 	str.w	r3, [r0], #72
 800190e:	f000 f853 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	0758      	lsls	r0, r3, #29
 8001916:	d506      	bpl.n	8001926 <_Unwind_VRS_Pop+0x246>
 8001918:	4630      	mov	r0, r6
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	f840 3bd0 	str.w	r3, [r0], #208
 8001922:	f000 f851 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001926:	af20      	add	r7, sp, #128	@ 0x80
 8001928:	4638      	mov	r0, r7
 800192a:	f000 f845 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 800192e:	4668      	mov	r0, sp
 8001930:	f000 f84a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001934:	f1c8 0210 	rsb	r2, r8, #16
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800193c:	f1a9 0510 	sub.w	r5, r9, #16
 8001940:	3a01      	subs	r2, #1
 8001942:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001946:	e753      	b.n	80017f0 <_Unwind_VRS_Pop+0x110>
 8001948:	af20      	add	r7, sp, #128	@ 0x80
 800194a:	e7c2      	b.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 800194c:	2c01      	cmp	r4, #1
 800194e:	d0c0      	beq.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 8001950:	f1b8 0f0f 	cmp.w	r8, #15
 8001954:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001956:	d892      	bhi.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001958:	4638      	mov	r0, r7
 800195a:	f000 f829 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 800195e:	e78e      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f840 3bd0 	str.w	r3, [r0], #208
 8001968:	466f      	mov	r7, sp
 800196a:	f000 f82d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800196e:	4638      	mov	r0, r7
 8001970:	f000 f82a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001976:	e79b      	b.n	80018b0 <_Unwind_VRS_Pop+0x1d0>
 8001978:	4630      	mov	r0, r6
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f840 3b48 	str.w	r3, [r0], #72
 8001982:	f000 f811 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 8001986:	e79d      	b.n	80018c4 <_Unwind_VRS_Pop+0x1e4>

08001988 <__restore_core_regs>:
 8001988:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800198c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001990:	469c      	mov	ip, r3
 8001992:	46a6      	mov	lr, r4
 8001994:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001998:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800199c:	46e5      	mov	sp, ip
 800199e:	bd00      	pop	{pc}

080019a0 <__gnu_Unwind_Restore_VFP>:
 80019a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Save_VFP>:
 80019a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Restore_VFP_D>:
 80019b0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <__gnu_Unwind_Save_VFP_D>:
 80019b8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Restore_WMMXD>:
 80019d0:	ecf0 0102 	ldfe	f0, [r0], #8
 80019d4:	ecf0 1102 	ldfe	f1, [r0], #8
 80019d8:	ecf0 2102 	ldfe	f2, [r0], #8
 80019dc:	ecf0 3102 	ldfe	f3, [r0], #8
 80019e0:	ecf0 4102 	ldfe	f4, [r0], #8
 80019e4:	ecf0 5102 	ldfe	f5, [r0], #8
 80019e8:	ecf0 6102 	ldfe	f6, [r0], #8
 80019ec:	ecf0 7102 	ldfe	f7, [r0], #8
 80019f0:	ecf0 8102 	ldfp	f0, [r0], #8
 80019f4:	ecf0 9102 	ldfp	f1, [r0], #8
 80019f8:	ecf0 a102 	ldfp	f2, [r0], #8
 80019fc:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a00:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a04:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a08:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a0c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <__gnu_Unwind_Save_WMMXD>:
 8001a14:	ece0 0102 	stfe	f0, [r0], #8
 8001a18:	ece0 1102 	stfe	f1, [r0], #8
 8001a1c:	ece0 2102 	stfe	f2, [r0], #8
 8001a20:	ece0 3102 	stfe	f3, [r0], #8
 8001a24:	ece0 4102 	stfe	f4, [r0], #8
 8001a28:	ece0 5102 	stfe	f5, [r0], #8
 8001a2c:	ece0 6102 	stfe	f6, [r0], #8
 8001a30:	ece0 7102 	stfe	f7, [r0], #8
 8001a34:	ece0 8102 	stfp	f0, [r0], #8
 8001a38:	ece0 9102 	stfp	f1, [r0], #8
 8001a3c:	ece0 a102 	stfp	f2, [r0], #8
 8001a40:	ece0 b102 	stfp	f3, [r0], #8
 8001a44:	ece0 c102 	stfp	f4, [r0], #8
 8001a48:	ece0 d102 	stfp	f5, [r0], #8
 8001a4c:	ece0 e102 	stfp	f6, [r0], #8
 8001a50:	ece0 f102 	stfp	f7, [r0], #8
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <__gnu_Unwind_Restore_WMMXC>:
 8001a58:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a5c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a60:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a64:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <__gnu_Unwind_Save_WMMXC>:
 8001a6c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a70:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a74:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a78:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <_Unwind_RaiseException>:
 8001a80:	46ec      	mov	ip, sp
 8001a82:	b500      	push	{lr}
 8001a84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a94:	a901      	add	r1, sp, #4
 8001a96:	f7ff fbd7 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001a9a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a9e:	b012      	add	sp, #72	@ 0x48
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <_Unwind_Resume>:
 8001aa4:	46ec      	mov	ip, sp
 8001aa6:	b500      	push	{lr}
 8001aa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ab8:	a901      	add	r1, sp, #4
 8001aba:	f7ff fc01 	bl	80012c0 <__gnu_Unwind_Resume>
 8001abe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ac2:	b012      	add	sp, #72	@ 0x48
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <_Unwind_Resume_or_Rethrow>:
 8001ac8:	46ec      	mov	ip, sp
 8001aca:	b500      	push	{lr}
 8001acc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001adc:	a901      	add	r1, sp, #4
 8001ade:	f7ff fc11 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001ae2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ae6:	b012      	add	sp, #72	@ 0x48
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <_Unwind_ForcedUnwind>:
 8001aec:	46ec      	mov	ip, sp
 8001aee:	b500      	push	{lr}
 8001af0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001af4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b00:	ab01      	add	r3, sp, #4
 8001b02:	f7ff fbd5 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b06:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b0a:	b012      	add	sp, #72	@ 0x48
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <_Unwind_Backtrace>:
 8001b10:	46ec      	mov	ip, sp
 8001b12:	b500      	push	{lr}
 8001b14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b24:	aa01      	add	r2, sp, #4
 8001b26:	f7ff fc47 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b2a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b2e:	b012      	add	sp, #72	@ 0x48
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <next_unwind_byte>:
 8001b34:	7a02      	ldrb	r2, [r0, #8]
 8001b36:	4603      	mov	r3, r0
 8001b38:	b97a      	cbnz	r2, 8001b5a <next_unwind_byte+0x26>
 8001b3a:	7a42      	ldrb	r2, [r0, #9]
 8001b3c:	b1a2      	cbz	r2, 8001b68 <next_unwind_byte+0x34>
 8001b3e:	6841      	ldr	r1, [r0, #4]
 8001b40:	3a01      	subs	r2, #1
 8001b42:	b410      	push	{r4}
 8001b44:	7242      	strb	r2, [r0, #9]
 8001b46:	6808      	ldr	r0, [r1, #0]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	1d0c      	adds	r4, r1, #4
 8001b4c:	721a      	strb	r2, [r3, #8]
 8001b4e:	0202      	lsls	r2, r0, #8
 8001b50:	605c      	str	r4, [r3, #4]
 8001b52:	0e00      	lsrs	r0, r0, #24
 8001b54:	bc10      	pop	{r4}
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	721a      	strb	r2, [r3, #8]
 8001b60:	0202      	lsls	r2, r0, #8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	0e00      	lsrs	r0, r0, #24
 8001b66:	4770      	bx	lr
 8001b68:	20b0      	movs	r0, #176	@ 0xb0
 8001b6a:	4770      	bx	lr

08001b6c <_Unwind_GetGR.constprop.0>:
 8001b6c:	b500      	push	{lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	2300      	movs	r3, #0
 8001b72:	aa03      	add	r2, sp, #12
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	220c      	movs	r2, #12
 8001b7a:	f7ff fbd3 	bl	8001324 <_Unwind_VRS_Get>
 8001b7e:	9803      	ldr	r0, [sp, #12]
 8001b80:	b005      	add	sp, #20
 8001b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b86:	bf00      	nop

08001b88 <unwind_UCB_from_context>:
 8001b88:	e7f0      	b.n	8001b6c <_Unwind_GetGR.constprop.0>
 8001b8a:	bf00      	nop

08001b8c <__gnu_unwind_execute>:
 8001b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b90:	4606      	mov	r6, r0
 8001b92:	b085      	sub	sp, #20
 8001b94:	460d      	mov	r5, r1
 8001b96:	f04f 0800 	mov.w	r8, #0
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff ffca 	bl	8001b34 <next_unwind_byte>
 8001ba0:	28b0      	cmp	r0, #176	@ 0xb0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	f000 80da 	beq.w	8001d5c <__gnu_unwind_execute+0x1d0>
 8001ba8:	0607      	lsls	r7, r0, #24
 8001baa:	d546      	bpl.n	8001c3a <__gnu_unwind_execute+0xae>
 8001bac:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bb0:	2b80      	cmp	r3, #128	@ 0x80
 8001bb2:	d05e      	beq.n	8001c72 <__gnu_unwind_execute+0xe6>
 8001bb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bb6:	d073      	beq.n	8001ca0 <__gnu_unwind_execute+0x114>
 8001bb8:	d81b      	bhi.n	8001bf2 <__gnu_unwind_execute+0x66>
 8001bba:	2b90      	cmp	r3, #144	@ 0x90
 8001bbc:	f000 809b 	beq.w	8001cf6 <__gnu_unwind_execute+0x16a>
 8001bc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bc2:	d112      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001bc4:	43c3      	mvns	r3, r0
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001bce:	411a      	asrs	r2, r3
 8001bd0:	0701      	lsls	r1, r0, #28
 8001bd2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001bd6:	d501      	bpl.n	8001bdc <__gnu_unwind_execute+0x50>
 8001bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff fd7d 	bl	80016e0 <_Unwind_VRS_Pop>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d0d7      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001bea:	2009      	movs	r0, #9
 8001bec:	b005      	add	sp, #20
 8001bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bf4:	d16d      	bne.n	8001cd2 <__gnu_unwind_execute+0x146>
 8001bf6:	28c6      	cmp	r0, #198	@ 0xc6
 8001bf8:	f000 8093 	beq.w	8001d22 <__gnu_unwind_execute+0x196>
 8001bfc:	28c7      	cmp	r0, #199	@ 0xc7
 8001bfe:	f000 80b2 	beq.w	8001d66 <__gnu_unwind_execute+0x1da>
 8001c02:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c08:	f000 80d2 	beq.w	8001db0 <__gnu_unwind_execute+0x224>
 8001c0c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c0e:	f000 80dd 	beq.w	8001dcc <__gnu_unwind_execute+0x240>
 8001c12:	28c9      	cmp	r0, #201	@ 0xc9
 8001c14:	d1e9      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c16:	4628      	mov	r0, r5
 8001c18:	f7ff ff8c 	bl	8001b34 <next_unwind_byte>
 8001c1c:	0302      	lsls	r2, r0, #12
 8001c1e:	f000 000f 	and.w	r0, r0, #15
 8001c22:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c26:	3001      	adds	r0, #1
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fd56 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d0b0      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c38:	e7d7      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c3a:	0083      	lsls	r3, r0, #2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	1d1f      	adds	r7, r3, #4
 8001c40:	f10d 090c 	add.w	r9, sp, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f8cd 9000 	str.w	r9, [sp]
 8001c4c:	220d      	movs	r2, #13
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fb68 	bl	8001324 <_Unwind_VRS_Get>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	f8cd 9000 	str.w	r9, [sp]
 8001c5a:	0660      	lsls	r0, r4, #25
 8001c5c:	bf4c      	ite	mi
 8001c5e:	1bdf      	submi	r7, r3, r7
 8001c60:	18ff      	addpl	r7, r7, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	220d      	movs	r2, #13
 8001c66:	4619      	mov	r1, r3
 8001c68:	4630      	mov	r0, r6
 8001c6a:	9703      	str	r7, [sp, #12]
 8001c6c:	f7ff fb80 	bl	8001370 <_Unwind_VRS_Set>
 8001c70:	e793      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c72:	4628      	mov	r0, r5
 8001c74:	f7ff ff5e 	bl	8001b34 <next_unwind_byte>
 8001c78:	0224      	lsls	r4, r4, #8
 8001c7a:	4320      	orrs	r0, r4
 8001c7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001c80:	d0b3      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c82:	0104      	lsls	r4, r0, #4
 8001c84:	2300      	movs	r3, #0
 8001c86:	b2a2      	uxth	r2, r4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f7ff fd28 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d1aa      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c94:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001c98:	bf18      	it	ne
 8001c9a:	f04f 0801 	movne.w	r8, #1
 8001c9e:	e77c      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001ca0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ca2:	d051      	beq.n	8001d48 <__gnu_unwind_execute+0x1bc>
 8001ca4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ca6:	f000 80ad 	beq.w	8001e04 <__gnu_unwind_execute+0x278>
 8001caa:	28b3      	cmp	r0, #179	@ 0xb3
 8001cac:	d06d      	beq.n	8001d8a <__gnu_unwind_execute+0x1fe>
 8001cae:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cb2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cb4:	d099      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cb6:	f000 0207 	and.w	r2, r0, #7
 8001cba:	3201      	adds	r2, #1
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff fd0b 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f43f af65 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cd0:	e78b      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cd2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001cd6:	2bd0      	cmp	r3, #208	@ 0xd0
 8001cd8:	d187      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cda:	f000 0207 	and.w	r2, r0, #7
 8001cde:	3201      	adds	r2, #1
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f7ff fcf9 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f43f af53 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cf4:	e779      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 030d 	and.w	r3, r0, #13
 8001cfa:	2b0d      	cmp	r3, #13
 8001cfc:	f43f af75 	beq.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d00:	af03      	add	r7, sp, #12
 8001d02:	2300      	movs	r3, #0
 8001d04:	f000 020f 	and.w	r2, r0, #15
 8001d08:	4619      	mov	r1, r3
 8001d0a:	9700      	str	r7, [sp, #0]
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7ff fb09 	bl	8001324 <_Unwind_VRS_Get>
 8001d12:	2300      	movs	r3, #0
 8001d14:	9700      	str	r7, [sp, #0]
 8001d16:	220d      	movs	r2, #13
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff fb28 	bl	8001370 <_Unwind_VRS_Set>
 8001d20:	e73b      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001d22:	4628      	mov	r0, r5
 8001d24:	f7ff ff06 	bl	8001b34 <next_unwind_byte>
 8001d28:	0302      	lsls	r2, r0, #12
 8001d2a:	f000 000f 	and.w	r0, r0, #15
 8001d2e:	3001      	adds	r0, #1
 8001d30:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d34:	2303      	movs	r3, #3
 8001d36:	4302      	orrs	r2, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff fcd0 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f43f af2a 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d46:	e750      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f7ff fef3 	bl	8001b34 <next_unwind_byte>
 8001d4e:	1e43      	subs	r3, r0, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b0e      	cmp	r3, #14
 8001d54:	4602      	mov	r2, r0
 8001d56:	f67f af41 	bls.w	8001bdc <__gnu_unwind_execute+0x50>
 8001d5a:	e746      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d5c:	f1b8 0f00 	cmp.w	r8, #0
 8001d60:	d040      	beq.n	8001de4 <__gnu_unwind_execute+0x258>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e742      	b.n	8001bec <__gnu_unwind_execute+0x60>
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fee4 	bl	8001b34 <next_unwind_byte>
 8001d6c:	1e43      	subs	r3, r0, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b0e      	cmp	r3, #14
 8001d72:	4602      	mov	r2, r0
 8001d74:	f63f af39 	bhi.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff fcaf 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af09 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d88:	e72f      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7ff fed2 	bl	8001b34 <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	3001      	adds	r0, #1
 8001d98:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4302      	orrs	r2, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff fc9c 	bl	80016e0 <_Unwind_VRS_Pop>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f43f aef6 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dae:	e71c      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001db0:	f000 020f 	and.w	r2, r0, #15
 8001db4:	3201      	adds	r2, #1
 8001db6:	2303      	movs	r3, #3
 8001db8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff fc8e 	bl	80016e0 <_Unwind_VRS_Pop>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f43f aee8 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dca:	e70e      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f7ff feb1 	bl	8001b34 <next_unwind_byte>
 8001dd2:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001dd6:	f000 030f 	and.w	r3, r0, #15
 8001dda:	3210      	adds	r2, #16
 8001ddc:	3301      	adds	r3, #1
 8001dde:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001de2:	e722      	b.n	8001c2a <__gnu_unwind_execute+0x9e>
 8001de4:	ac03      	add	r4, sp, #12
 8001de6:	4643      	mov	r3, r8
 8001de8:	4641      	mov	r1, r8
 8001dea:	220e      	movs	r2, #14
 8001dec:	9400      	str	r4, [sp, #0]
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	9400      	str	r4, [sp, #0]
 8001df6:	4643      	mov	r3, r8
 8001df8:	220f      	movs	r2, #15
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fab7 	bl	8001370 <_Unwind_VRS_Set>
 8001e02:	e7ae      	b.n	8001d62 <__gnu_unwind_execute+0x1d6>
 8001e04:	2300      	movs	r3, #0
 8001e06:	f10d 090c 	add.w	r9, sp, #12
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f8cd 9000 	str.w	r9, [sp]
 8001e12:	4630      	mov	r0, r6
 8001e14:	f7ff fa86 	bl	8001324 <_Unwind_VRS_Get>
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff fe8b 	bl	8001b34 <next_unwind_byte>
 8001e1e:	0602      	lsls	r2, r0, #24
 8001e20:	9c03      	ldr	r4, [sp, #12]
 8001e22:	f04f 0702 	mov.w	r7, #2
 8001e26:	d50b      	bpl.n	8001e40 <__gnu_unwind_execute+0x2b4>
 8001e28:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e2c:	40b8      	lsls	r0, r7
 8001e2e:	4404      	add	r4, r0
 8001e30:	4628      	mov	r0, r5
 8001e32:	9403      	str	r4, [sp, #12]
 8001e34:	f7ff fe7e 	bl	8001b34 <next_unwind_byte>
 8001e38:	0603      	lsls	r3, r0, #24
 8001e3a:	f107 0707 	add.w	r7, r7, #7
 8001e3e:	d4f3      	bmi.n	8001e28 <__gnu_unwind_execute+0x29c>
 8001e40:	fa00 f207 	lsl.w	r2, r0, r7
 8001e44:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e48:	4422      	add	r2, r4
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9203      	str	r2, [sp, #12]
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	220d      	movs	r2, #13
 8001e54:	4619      	mov	r1, r3
 8001e56:	4630      	mov	r0, r6
 8001e58:	f7ff fa8a 	bl	8001370 <_Unwind_VRS_Set>
 8001e5c:	e69d      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001e5e:	bf00      	nop

08001e60 <__gnu_unwind_frame>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	b084      	sub	sp, #16
 8001e68:	f04f 0c03 	mov.w	ip, #3
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	021c      	lsls	r4, r3, #8
 8001e70:	4608      	mov	r0, r1
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	a901      	add	r1, sp, #4
 8001e76:	9401      	str	r4, [sp, #4]
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e7e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e82:	f7ff fe83 	bl	8001b8c <__gnu_unwind_execute>
 8001e86:	b004      	add	sp, #16
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	bf00      	nop

08001e8c <_Unwind_GetRegionStart>:
 8001e8c:	b508      	push	{r3, lr}
 8001e8e:	f7ff fe7b 	bl	8001b88 <unwind_UCB_from_context>
 8001e92:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop

08001e98 <_Unwind_GetLanguageSpecificData>:
 8001e98:	b508      	push	{r3, lr}
 8001e9a:	f7ff fe75 	bl	8001b88 <unwind_UCB_from_context>
 8001e9e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ea0:	79c3      	ldrb	r3, [r0, #7]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	bf00      	nop

08001eac <__aeabi_idiv0>:
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ece:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ed8:	f00c f93a 	bl	800e150 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x17c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d126      	bne.n	8001f32 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f010 fa3b 	bl	8012360 <_Znaj>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e018      	b.n	8001f2a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ef8:	206c      	movs	r0, #108	@ 0x6c
 8001efa:	f010 fa20 	bl	801233e <_Znwj>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461c      	mov	r4, r3
 8001f02:	2501      	movs	r5, #1
 8001f04:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f12:	4620      	mov	r0, r4
 8001f14:	f000 fd7a 	bl	8002a0c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	dde3      	ble.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f30:	e054      	b.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f32:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x180>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d126      	bne.n	8001f88 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	f010 fa10 	bl	8012360 <_Znaj>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e018      	b.n	8001f80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f4e:	206c      	movs	r0, #108	@ 0x6c
 8001f50:	f010 f9f5 	bl	801233e <_Znwj>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	2501      	movs	r5, #1
 8001f5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 fdc1 	bl	8002af0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	dde3      	ble.n	8001f4e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001f86:	e029      	b.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d125      	bne.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f90:	2008      	movs	r0, #8
 8001f92:	f010 f9e5 	bl	8012360 <_Znaj>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e018      	b.n	8001fd6 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fa4:	206c      	movs	r0, #108	@ 0x6c
 8001fa6:	f010 f9ca 	bl	801233e <_Znwj>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461c      	mov	r4, r3
 8001fae:	2501      	movs	r5, #1
 8001fb0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f000 fe08 	bl	8002bd4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	dde3      	ble.n	8001fa4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f825 	bl	8002038 <_ZNK14XNucleoIHM02A14initEv>
	        /*Do nothing*/
	    	//throw std::runtime_error("init failed");
	    }
	}
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	e017      	b.n	8002022 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x172>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ff2:	2d00      	cmp	r5, #0
 8001ff4:	d003      	beq.n	8001ffe <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14e>
 8001ff6:	216c      	movs	r1, #108	@ 0x6c
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f00f fe45 	bl	8011c88 <_ZdlPvj>
 8001ffe:	f00f fe45 	bl	8011c8c <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002002:	2d00      	cmp	r5, #0
 8002004:	d003      	beq.n	800200e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x15e>
 8002006:	216c      	movs	r1, #108	@ 0x6c
 8002008:	4620      	mov	r0, r4
 800200a:	f00f fe3d 	bl	8011c88 <_ZdlPvj>
 800200e:	f00f fe3d 	bl	8011c8c <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002012:	2d00      	cmp	r5, #0
 8002014:	d003      	beq.n	800201e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x16e>
 8002016:	216c      	movs	r1, #108	@ 0x6c
 8002018:	4620      	mov	r0, r4
 800201a:	f00f fe35 	bl	8011c88 <_ZdlPvj>
 800201e:	f00f fe35 	bl	8011c8c <__cxa_end_cleanup>
	}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bdb0      	pop	{r4, r5, r7, pc}
 800202a:	bf00      	nop
 800202c:	200002d8 	.word	0x200002d8
 8002030:	200002d9 	.word	0x200002d9
 8002034:	200002da 	.word	0x200002da

08002038 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6998      	ldr	r0, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8b9b      	ldrh	r3, [r3, #28]
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	f00c f880 	bl	800e150 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 8002050:	2001      	movs	r0, #1
 8002052:	f00b fd21 	bl	800da98 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6998      	ldr	r0, [r3, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8b9b      	ldrh	r3, [r3, #28]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f00c f875 	bl	800e150 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f00b fd16 	bl	800da98 <HAL_Delay>



        return init_all_motor_drivers();
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f892 	bl	8002196 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 8002072:	4603      	mov	r3, r0
    }
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
    }
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e040      	b.n	8002124 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4608      	mov	r0, r1
 80020c4:	4798      	blx	r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d023      	beq.n	800211e <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681d      	ldr	r5, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	33cc      	adds	r3, #204	@ 0xcc
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3314      	adds	r3, #20
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4608      	mov	r0, r1
 8002114:	4798      	blx	r3
 8002116:	4603      	mov	r3, r0
 8002118:	4619      	mov	r1, r3
 800211a:	4628      	mov	r0, r5
 800211c:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b01      	cmp	r3, #1
 8002128:	ddbb      	ble.n	80020a2 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4610      	mov	r0, r2
 8002140:	4798      	blx	r3
 8002142:	4603      	mov	r3, r0
 8002144:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e01b      	b.n	8002184 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	4798      	blx	r3
 8002170:	4603      	mov	r3, r0
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	3204      	adds	r2, #4
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	3301      	adds	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	dde0      	ble.n	800214c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3310      	adds	r3, #16
    }
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bdb0      	pop	{r4, r5, r7, pc}

08002196 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e022      	b.n	80021ea <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3308      	adds	r3, #8
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	3102      	adds	r1, #2
 80021c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4798      	blx	r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e006      	b.n	80021f2 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	ddd9      	ble.n	80021a4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 80021f0:	2301      	movs	r3, #1

    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af04      	add	r7, sp, #16
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2):
    index_to_enum{back_right, back_left, front_left, front_right}, //Wiring dependant
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a4a      	ldr	r2, [pc, #296]	@ (8002338 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x13c>)
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	615a      	str	r2, [r3, #20]
    motor_direction_inverter{1.0, -1.0, 1.0, -1.0}
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a49      	ldr	r2, [pc, #292]	@ (800233c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x140>)
 8002216:	f103 0418 	add.w	r4, r3, #24
 800221a:	4613      	mov	r3, r2
 800221c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a46      	ldr	r2, [pc, #280]	@ (8002340 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x144>)
 8002226:	332c      	adds	r3, #44	@ 0x2c
 8002228:	4611      	mov	r1, r2
 800222a:	22b0      	movs	r2, #176	@ 0xb0
 800222c:	4618      	mov	r0, r3
 800222e:	f012 f878 	bl	8014322 <memcpy>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a42      	ldr	r2, [pc, #264]	@ (8002340 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x144>)
 8002236:	33dc      	adds	r3, #220	@ 0xdc
 8002238:	4611      	mov	r1, r2
 800223a:	22b0      	movs	r2, #176	@ 0xb0
 800223c:	4618      	mov	r0, r3
 800223e:	f012 f870 	bl	8014322 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800224e:	605a      	str	r2, [r3, #4]

  shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002250:	2020      	movs	r0, #32
 8002252:	f010 f874 	bl	801233e <_Znwj>
 8002256:	4603      	mov	r3, r0
 8002258:	461c      	mov	r4, r3
 800225a:	2501      	movs	r5, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002268:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800226a:	9303      	str	r3, [sp, #12]
 800226c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4620      	mov	r0, r4
 800227c:	f7ff fe18 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609c      	str	r4, [r3, #8]
  shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002284:	2020      	movs	r0, #32
 8002286:	f010 f85a 	bl	801233e <_Znwj>
 800228a:	4603      	mov	r3, r0
 800228c:	461c      	mov	r4, r3
 800228e:	2501      	movs	r5, #1
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 800229c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800229e:	9303      	str	r3, [sp, #12]
 80022a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff fdfe 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	60dc      	str	r4, [r3, #12]
  abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fedd 	bl	800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022c2:	6178      	str	r0, [r7, #20]
  abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fed7 	bl	800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022ce:	6138      	str	r0, [r7, #16]
  moteurs = new abstractL6470*[NMOTEURS];
 80022d0:	2010      	movs	r0, #16
 80022d2:	f010 f845 	bl	8012360 <_Znaj>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	611a      	str	r2, [r3, #16]



  moteurs[front_left] = moteurs_shield_2[0]; //Wiring dependant
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	601a      	str	r2, [r3, #0]
  moteurs[front_right] = moteurs_shield_2[1]; //Wiring dependant
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	3304      	adds	r3, #4
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	6852      	ldr	r2, [r2, #4]
 80022f2:	601a      	str	r2, [r3, #0]
  moteurs[back_left] = moteurs_shield_1[1];  //Wiring dependant
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	3308      	adds	r3, #8
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6852      	ldr	r2, [r2, #4]
 80022fe:	601a      	str	r2, [r3, #0]
  moteurs[back_right] = moteurs_shield_1[0]; //Wiring dependant
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	330c      	adds	r3, #12
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	601a      	str	r2, [r3, #0]
  // shield_2->perform_prepared_actions();
  // HAL_Delay(4000);
  // motors_stop_hard();


}
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	e00f      	b.n	8002330 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x134>
  shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002310:	2d00      	cmp	r5, #0
 8002312:	d003      	beq.n	800231c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x120>
 8002314:	2120      	movs	r1, #32
 8002316:	4620      	mov	r0, r4
 8002318:	f00f fcb6 	bl	8011c88 <_ZdlPvj>
 800231c:	f00f fcb6 	bl	8011c8c <__cxa_end_cleanup>
  shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002320:	2d00      	cmp	r5, #0
 8002322:	d003      	beq.n	800232c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x130>
 8002324:	2120      	movs	r1, #32
 8002326:	4620      	mov	r0, r4
 8002328:	f00f fcae 	bl	8011c88 <_ZdlPvj>
 800232c:	f00f fcae 	bl	8011c8c <__cxa_end_cleanup>
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bdb0      	pop	{r4, r5, r7, pc}
 8002338:	080161b8 	.word	0x080161b8
 800233c:	080161bc 	.word	0x080161bc
 8002340:	080161cc 	.word	0x080161cc

08002344 <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 8002350:	edd7 7a00 	vldr	s15, [r7]
 8002354:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002370 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 8002358:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800235c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	3d00adfd 	.word	0x3d00adfd

08002374 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b094      	sub	sp, #80	@ 0x50
 8002378:	af00      	add	r7, sp, #0
 800237a:	6178      	str	r0, [r7, #20]
 800237c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002380:	edc7 0a03 	vstr	s1, [r7, #12]
 8002384:	ed87 1a02 	vstr	s2, [r7, #8]
 8002388:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 800238c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	f107 0210 	add.w	r2, r7, #16
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fc8b 	bl	8002cb8 <_ZSt3minIfERKT_S2_S2_>
 80023a2:	4603      	mov	r3, r0
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 80023a8:	4b86      	ldr	r3, [pc, #536]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	f107 0210 	add.w	r2, r7, #16
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fc97 	bl	8002cea <_ZSt3maxIfERKT_S2_S2_>
 80023bc:	4603      	mov	r3, r0
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 80023c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c8:	f107 020c 	add.w	r2, r7, #12
 80023cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fc70 	bl	8002cb8 <_ZSt3minIfERKT_S2_S2_>
 80023d8:	4603      	mov	r3, r0
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 80023de:	4b79      	ldr	r3, [pc, #484]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e2:	f107 020c 	add.w	r2, r7, #12
 80023e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fc7c 	bl	8002cea <_ZSt3maxIfERKT_S2_S2_>
 80023f2:	4603      	mov	r3, r0
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 80023f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023fe:	f107 0208 	add.w	r2, r7, #8
 8002402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fc55 	bl	8002cb8 <_ZSt3minIfERKT_S2_S2_>
 800240e:	4603      	mov	r3, r0
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 8002414:	4b6b      	ldr	r3, [pc, #428]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
 8002418:	f107 0208 	add.w	r2, r7, #8
 800241c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fc61 	bl	8002cea <_ZSt3maxIfERKT_S2_S2_>
 8002428:	4603      	mov	r3, r0
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 800242e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
 8002434:	1d3a      	adds	r2, r7, #4
 8002436:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fc3b 	bl	8002cb8 <_ZSt3minIfERKT_S2_S2_>
 8002442:	4603      	mov	r3, r0
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 8002448:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800244c:	1d3a      	adds	r2, r7, #4
 800244e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fc48 	bl	8002cea <_ZSt3maxIfERKT_S2_S2_>
 800245a:	4603      	mov	r3, r0
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs droits/gauches car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL*motor_direction_inverter[front_left] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	ed93 7a06 	vldr	s14, [r3, #24]
 8002466:	edd7 7a04 	vldr	s15, [r7, #16]
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	db01      	blt.n	800247c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x108>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x10a>
 800247c:	2300      	movs	r3, #0
 800247e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR*motor_direction_inverter[front_right] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	ed93 7a07 	vldr	s14, [r3, #28]
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	db01      	blt.n	800249e <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x12a>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x12c>
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL*motor_direction_inverter[back_left] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	ed93 7a08 	vldr	s14, [r3, #32]
 80024aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	db01      	blt.n	80024c0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x14c>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x14e>
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR*motor_direction_inverter[back_right] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80024cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	db01      	blt.n	80024e2 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x16e>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x170>
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 80024e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002504:	ee17 3a90 	vmov	r3, s15
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 800250a:	edd7 7a03 	vldr	s15, [r7, #12]
 800250e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002526:	ee17 3a90 	vmov	r3, s15
 800252a:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 800252c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002530:	eeb0 7ae7 	vabs.f32	s14, s15
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002548:	ee17 3a90 	vmov	r3, s15
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 800254e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002552:	eeb0 7ae7 	vabs.f32	s14, s15
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256a:	ee17 3a90 	vmov	r3, s15
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 8002570:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002574:	2300      	movs	r3, #0
 8002576:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f000 f825 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 800257e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002582:	2301      	movs	r3, #1
 8002584:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f000 f81e 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 800258c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002590:	2302      	movs	r3, #2
 8002592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f000 f817 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 800259a:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800259e:	2303      	movs	r3, #3
 80025a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f000 f810 	bl	80025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd71 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fd6c 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 80025bc:	bf00      	nop
 80025be:	3750      	adds	r7, #80	@ 0x50
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	bf800000 	.word	0xbf800000

080025c8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	460b      	mov	r3, r1
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	4613      	mov	r3, r2
 80025dc:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	33fc      	adds	r3, #252	@ 0xfc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	79f9      	ldrb	r1, [r7, #7]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 8002610:	e011      	b.n	8002636 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4608      	mov	r0, r1
 8002634:	4798      	blx	r3
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>:
  * @param  vitesse_absolue_FR vitesse du moteur Avant droit
  * @param  vitesse_absolue_BL vitesse du moteur Arriere gauche
  * @param  vitesse_absolue_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_absolues(float vitesse_absolue_FL, float vitesse_absolue_FR, float vitesse_absolue_BL, float vitesse_absolue_BR )
{
 800263e:	b580      	push	{r7, lr}
 8002640:	ed2d 8b04 	vpush	{d8-d9}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	6178      	str	r0, [r7, #20]
 800264a:	ed87 0a04 	vstr	s0, [r7, #16]
 800264e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002652:	ed87 1a02 	vstr	s2, [r7, #8]
 8002656:	edc7 1a01 	vstr	s3, [r7, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800265a:	ed97 0a04 	vldr	s0, [r7, #16]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff fe70 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002664:	eeb0 7a40 	vmov.f32	s14, s0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002674:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002678:	ed97 0a03 	vldr	s0, [r7, #12]
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f7ff fe61 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002682:	eeb0 7a40 	vmov.f32	s14, s0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	eec7 8a27 	vdiv.f32	s17, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 8002696:	ed97 0a02 	vldr	s0, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff fe52 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026a0:	eeb0 7a40 	vmov.f32	s14, s0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b0:	ee87 9a27 	vdiv.f32	s18, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 80026b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f7ff fe43 	bl	8002344 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026be:	eef0 6a40 	vmov.f32	s13, s0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d2:	eef0 1a47 	vmov.f32	s3, s14
 80026d6:	eeb0 1a49 	vmov.f32	s2, s18
 80026da:	eef0 0a68 	vmov.f32	s1, s17
 80026de:	eeb0 0a48 	vmov.f32	s0, s16
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff fe46 	bl	8002374 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>

}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	ecbd 8b04 	vpop	{d8-d9}
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZN11BlocMoteurs16motors_stop_hardEv>:
  * Le passage a la vitesse a zero ne respecte pas les parametre de deceleration maximale du robot
  * et se realise au mieux des capacites du driver
  * (contrairement a la methode motors_stop_soft)
  */
void BlocMoteurs::motors_stop_hard()
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e014      	b.n	8002746 <_ZN11BlocMoteurs16motors_stop_hardEv+0x38>
	{
		moteurs[i]->prepare_hard_stop();
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4608      	mov	r0, r1
 800273e:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b03      	cmp	r3, #3
 800274a:	dde7      	ble.n	800271c <_ZN11BlocMoteurs16motors_stop_hardEv+0xe>
	}
    shield_1->perform_prepared_actions();
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fc9f 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc9a 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800276e:	b5b0      	push	{r4, r5, r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7fd ff03 	bl	8000584 <__aeabi_i2d>
 800277e:	4604      	mov	r4, r0
 8002780:	460d      	mov	r5, r1
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	f7fd fefe 	bl	8000584 <__aeabi_i2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	ec43 2b11 	vmov	d1, r2, r3
 8002790:	ec45 4b10 	vmov	d0, r4, r5
 8002794:	f00f ff16 	bl	80125c4 <pow>
 8002798:	eeb0 7a40 	vmov.f32	s14, s0
 800279c:	eef0 7a60 	vmov.f32	s15, s1
    }
 80027a0:	eeb0 0a47 	vmov.f32	s0, s14
 80027a4:	eef0 0a67 	vmov.f32	s1, s15
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080027b0 <_ZN11BlocMoteurs17mesure_pas_ecouleEv>:
  *
  * @retval tableau float des 4 valeursen des pas ecoulees. Les index correspondent à l'enum motor id
  * ex : id_moteurs::front_left = 0 -> to_return[0] = nombre de pas ecoulees du moteur Avant gauche (front left)
  */
int32_t* BlocMoteurs::mesure_pas_ecoule()
{
 80027b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b4:	b08d      	sub	sp, #52	@ 0x34
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  static uint32_t last_values[NMOTEURS] = {0,0,0,0};
  static int32_t to_return[NMOTEURS];
  
	for( int i = 0; i < NMOTEURS; i ++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027be:	e013      	b.n	80027e8 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x38>
	{
		moteurs[i]->prepare_get_position();
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	6819      	ldr	r1, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	33a0      	adds	r3, #160	@ 0xa0
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4608      	mov	r0, r1
 80027e0:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 80027e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e4:	3301      	adds	r3, #1
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	dde8      	ble.n	80027c0 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x10>
	}
	uint32_t* result1 = shield_1->perform_prepared_actions();
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fc4e 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 80027f8:	6238      	str	r0, [r7, #32]
	uint32_t* result2 = shield_2->perform_prepared_actions();
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fc48 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 8002804:	61f8      	str	r0, [r7, #28]
  uint32_t results[4] = {result1[0], result1[1], result2[0], result2[1]};
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	61bb      	str	r3, [r7, #24]
	
  for( int i = 0; i < NMOTEURS; i ++)
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002822:	e0a2      	b.n	800296a <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1ba>
	{
		int32_t diff = results[i] - last_values[i] ;
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	3330      	adds	r3, #48	@ 0x30
 800282a:	443b      	add	r3, r7
 800282c:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8002830:	4953      	ldr	r1, [pc, #332]	@ (8002980 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d0>)
 8002832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
		if( diff > std::pow(2,21)-1)
 800283c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800283e:	f7fd fea1 	bl	8000584 <__aeabi_i2d>
 8002842:	4680      	mov	r8, r0
 8002844:	4689      	mov	r9, r1
 8002846:	2115      	movs	r1, #21
 8002848:	2002      	movs	r0, #2
 800284a:	f7ff ff90 	bl	800276e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800284e:	ec51 0b10 	vmov	r0, r1, d0
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	4b4b      	ldr	r3, [pc, #300]	@ (8002984 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d4>)
 8002858:	f7fd fd46 	bl	80002e8 <__aeabi_dsub>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	2101      	movs	r1, #1
 8002862:	460e      	mov	r6, r1
 8002864:	4640      	mov	r0, r8
 8002866:	4649      	mov	r1, r9
 8002868:	f7fe f986 	bl	8000b78 <__aeabi_dcmpgt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0xc6>
 8002872:	2300      	movs	r3, #0
 8002874:	461e      	mov	r6, r3
 8002876:	b2f3      	uxtb	r3, r6
 8002878:	2b00      	cmp	r3, #0
 800287a:	d015      	beq.n	80028a8 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0xf8>
		{
		  diff-=std::pow(2,22);
 800287c:	2116      	movs	r1, #22
 800287e:	2002      	movs	r0, #2
 8002880:	f7ff ff75 	bl	800276e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002884:	ec59 8b10 	vmov	r8, r9, d0
 8002888:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800288a:	f7fd fe7b 	bl	8000584 <__aeabi_i2d>
 800288e:	4642      	mov	r2, r8
 8002890:	464b      	mov	r3, r9
 8002892:	f7fd fd29 	bl	80002e8 <__aeabi_dsub>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f7fe f98b 	bl	8000bb8 <__aeabi_d2iz>
 80028a2:	4603      	mov	r3, r0
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a6:	e034      	b.n	8002912 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x162>

		}
		else if( diff < -std::pow(2,21) )
 80028a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028aa:	f7fd fe6b 	bl	8000584 <__aeabi_i2d>
 80028ae:	4680      	mov	r8, r0
 80028b0:	4689      	mov	r9, r1
 80028b2:	2115      	movs	r1, #21
 80028b4:	2002      	movs	r0, #2
 80028b6:	f7ff ff5a 	bl	800276e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028ba:	ec53 2b10 	vmov	r2, r3, d0
 80028be:	4614      	mov	r4, r2
 80028c0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80028c4:	2301      	movs	r3, #1
 80028c6:	461e      	mov	r6, r3
 80028c8:	4622      	mov	r2, r4
 80028ca:	462b      	mov	r3, r5
 80028cc:	4640      	mov	r0, r8
 80028ce:	4649      	mov	r1, r9
 80028d0:	f7fe f934 	bl	8000b3c <__aeabi_dcmplt>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x12e>
 80028da:	2300      	movs	r3, #0
 80028dc:	461e      	mov	r6, r3
 80028de:	b2f3      	uxtb	r3, r6
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d016      	beq.n	8002912 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x162>
		{
		  diff+=std::pow(2,22);
 80028e4:	2116      	movs	r1, #22
 80028e6:	2002      	movs	r0, #2
 80028e8:	f7ff ff41 	bl	800276e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028ec:	ec59 8b10 	vmov	r8, r9, d0
 80028f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028f2:	f7fd fe47 	bl	8000584 <__aeabi_i2d>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4640      	mov	r0, r8
 80028fc:	4649      	mov	r1, r9
 80028fe:	f7fd fcf5 	bl	80002ec <__adddf3>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe f955 	bl	8000bb8 <__aeabi_d2iz>
 800290e:	4603      	mov	r3, r0
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		to_return[index_to_enum[i]] = motor_direction_inverter[index_to_enum[i]]*( diff);
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	4413      	add	r3, r2
 8002918:	3314      	adds	r3, #20
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	3306      	adds	r3, #6
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	ed93 7a00 	vldr	s14, [r3]
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	4413      	add	r3, r2
 800293c:	3314      	adds	r3, #20
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002946:	ee17 1a90 	vmov	r1, s15
 800294a:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d8>)
 800294c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		last_values[i] = results[i];
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	3330      	adds	r3, #48	@ 0x30
 8002956:	443b      	add	r3, r7
 8002958:	f853 2c24 	ldr.w	r2, [r3, #-36]
 800295c:	4908      	ldr	r1, [pc, #32]	@ (8002980 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d0>)
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for( int i = 0; i < NMOTEURS; i ++)
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	3301      	adds	r3, #1
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800296a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296c:	2b03      	cmp	r3, #3
 800296e:	f77f af59 	ble.w	8002824 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x74>
	}
  return to_return;
 8002972:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d8>)

}
 8002974:	4618      	mov	r0, r3
 8002976:	3734      	adds	r7, #52	@ 0x34
 8002978:	46bd      	mov	sp, r7
 800297a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800297e:	bf00      	nop
 8002980:	2000021c 	.word	0x2000021c
 8002984:	3ff00000 	.word	0x3ff00000
 8002988:	2000022c 	.word	0x2000022c

0800298c <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    initShield1[1].step_sel = step_mode;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    initShield2[0].step_sel = step_mode;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    initShield2[0].step_sel = step_mode;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    bool return_value = true;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	e01c      	b.n	80029fc <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3354      	adds	r3, #84	@ 0x54
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4798      	blx	r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	f083 0301 	eor.w	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3301      	adds	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	dddf      	ble.n	80029c2 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]

}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	80fb      	strh	r3, [r7, #6]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f009 fc54 	bl	800c2cc <_ZN13abstractL6470C1Ev>
 8002a24:	4a27      	ldr	r2, [pc, #156]	@ (8002ac4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	819a      	strh	r2, [r3, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8b3a      	ldrh	r2, [r7, #24]
 8002a40:	829a      	strh	r2, [r3, #20]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002a58:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		//throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002acc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002a5e:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002a70:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002a84:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	b2d1      	uxtb	r1, r2
 8002a8c:	4a13      	ldr	r2, [pc, #76]	@ (8002adc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a8e:	7011      	strb	r1, [r2, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002a94:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4811      	ldr	r0, [pc, #68]	@ (8002ae4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002aa0:	f011 fb6b 	bl	801417a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	480f      	ldr	r0, [pc, #60]	@ (8002ae8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002aaa:	f011 fb66 	bl	801417a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002aae:	2208      	movs	r2, #8
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	480e      	ldr	r0, [pc, #56]	@ (8002aec <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002ab4:	f011 fb61 	bl	801417a <memset>
    }
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	08016764 	.word	0x08016764
 8002ac8:	200002d8 	.word	0x200002d8
 8002acc:	08016a28 	.word	0x08016a28
 8002ad0:	08016c1c 	.word	0x08016c1c
 8002ad4:	08016d28 	.word	0x08016d28
 8002ad8:	08016d3c 	.word	0x08016d3c
 8002adc:	2000023c 	.word	0x2000023c
 8002ae0:	2000023d 	.word	0x2000023d
 8002ae4:	20000240 	.word	0x20000240
 8002ae8:	20000260 	.word	0x20000260
 8002aec:	20000268 	.word	0x20000268

08002af0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80fb      	strh	r3, [r7, #6]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f009 fbe2 	bl	800c2cc <_ZN13abstractL6470C1Ev>
 8002b08:	4a27      	ldr	r2, [pc, #156]	@ (8002ba8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	819a      	strh	r2, [r3, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	611a      	str	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8b3a      	ldrh	r2, [r7, #24]
 8002b24:	829a      	strh	r2, [r3, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bac <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002b3c:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002b42:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a1a      	ldr	r2, [pc, #104]	@ (8002bbc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002b54:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002b68:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	b2d1      	uxtb	r1, r2
 8002b70:	4a13      	ldr	r2, [pc, #76]	@ (8002bc0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002b72:	7011      	strb	r1, [r2, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002b7e:	2220      	movs	r2, #32
 8002b80:	2100      	movs	r1, #0
 8002b82:	4811      	ldr	r0, [pc, #68]	@ (8002bc8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002b84:	f011 faf9 	bl	801417a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b88:	2208      	movs	r2, #8
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	480f      	ldr	r0, [pc, #60]	@ (8002bcc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002b8e:	f011 faf4 	bl	801417a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b92:	2208      	movs	r2, #8
 8002b94:	2100      	movs	r1, #0
 8002b96:	480e      	ldr	r0, [pc, #56]	@ (8002bd0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002b98:	f011 faef 	bl	801417a <memset>
    }
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	080164f8 	.word	0x080164f8
 8002bac:	200002d9 	.word	0x200002d9
 8002bb0:	08016d48 	.word	0x08016d48
 8002bb4:	08016f3c 	.word	0x08016f3c
 8002bb8:	08017048 	.word	0x08017048
 8002bbc:	0801705c 	.word	0x0801705c
 8002bc0:	20000270 	.word	0x20000270
 8002bc4:	20000271 	.word	0x20000271
 8002bc8:	20000274 	.word	0x20000274
 8002bcc:	20000294 	.word	0x20000294
 8002bd0:	2000029c 	.word	0x2000029c

08002bd4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f009 fb70 	bl	800c2cc <_ZN13abstractL6470C1Ev>
 8002bec:	4a27      	ldr	r2, [pc, #156]	@ (8002c8c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	819a      	strh	r2, [r3, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	611a      	str	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8b3a      	ldrh	r2, [r7, #24]
 8002c08:	829a      	strh	r2, [r3, #20]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2203      	movs	r2, #3
 8002c14:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002c20:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002c26:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c98 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a1a      	ldr	r2, [pc, #104]	@ (8002c9c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002c32:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002c38:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002c4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	b2d1      	uxtb	r1, r2
 8002c54:	4a13      	ldr	r2, [pc, #76]	@ (8002ca4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002c56:	7011      	strb	r1, [r2, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002c62:	2220      	movs	r2, #32
 8002c64:	2100      	movs	r1, #0
 8002c66:	4811      	ldr	r0, [pc, #68]	@ (8002cac <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002c68:	f011 fa87 	bl	801417a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	2100      	movs	r1, #0
 8002c70:	480f      	ldr	r0, [pc, #60]	@ (8002cb0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002c72:	f011 fa82 	bl	801417a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002c76:	2208      	movs	r2, #8
 8002c78:	2100      	movs	r1, #0
 8002c7a:	480e      	ldr	r0, [pc, #56]	@ (8002cb4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002c7c:	f011 fa7d 	bl	801417a <memset>
    }
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	0801628c 	.word	0x0801628c
 8002c90:	200002da 	.word	0x200002da
 8002c94:	08017068 	.word	0x08017068
 8002c98:	0801725c 	.word	0x0801725c
 8002c9c:	08017368 	.word	0x08017368
 8002ca0:	0801737c 	.word	0x0801737c
 8002ca4:	200002a4 	.word	0x200002a4
 8002ca8:	200002a5 	.word	0x200002a5
 8002cac:	200002a8 	.word	0x200002a8
 8002cb0:	200002c8 	.word	0x200002c8
 8002cb4:	200002d0 	.word	0x200002d0

08002cb8 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	ed93 7a00 	vldr	s14, [r3]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	d501      	bpl.n	8002cdc <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	e000      	b.n	8002cde <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002cdc:	687b      	ldr	r3, [r7, #4]
    }
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	ed93 7a00 	vldr	s14, [r3]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d08:	d501      	bpl.n	8002d0e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	e000      	b.n	8002d10 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002d0e:	687b      	ldr	r3, [r7, #4]
    }
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f009 fadd 	bl	800c2ec <_ZN13abstractL6470D1Ev>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	0801628c 	.word	0x0801628c

08002d40 <_ZN5L6470I8shield_3ED0Ev>:
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ffe7 	bl	8002d1c <_ZN5L6470I8shield_3ED1Ev>
 8002d4e:	216c      	movs	r1, #108	@ 0x6c
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f00e ff99 	bl	8011c88 <_ZdlPvj>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_ZN5L6470I8shield_2ED1Ev>:
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	4a05      	ldr	r2, [pc, #20]	@ (8002d80 <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f009 fabb 	bl	800c2ec <_ZN13abstractL6470D1Ev>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	080164f8 	.word	0x080164f8

08002d84 <_ZN5L6470I8shield_2ED0Ev>:
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ffe7 	bl	8002d60 <_ZN5L6470I8shield_2ED1Ev>
 8002d92:	216c      	movs	r1, #108	@ 0x6c
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f00e ff77 	bl	8011c88 <_ZdlPvj>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_ZN5L6470I8shield_1ED1Ev>:
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	4a05      	ldr	r2, [pc, #20]	@ (8002dc4 <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f009 fa99 	bl	800c2ec <_ZN13abstractL6470D1Ev>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	08016764 	.word	0x08016764

08002dc8 <_ZN5L6470I8shield_1ED0Ev>:
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffe7 	bl	8002da4 <_ZN5L6470I8shield_1ED1Ev>
 8002dd6:	216c      	movs	r1, #108	@ 0x6c
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f00e ff55 	bl	8011c88 <_ZdlPvj>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	4603      	mov	r3, r0
    }
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
 8002e22:	4603      	mov	r3, r0
    }
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	4611      	mov	r1, r2
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
 8002e4a:	4603      	mov	r3, r0
    }
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002e64:	681c      	ldr	r4, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2100      	movs	r1, #0
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	47a0      	blx	r4
 8002e7e:	4603      	mov	r3, r0
    }
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd90      	pop	{r4, r7, pc}

08002e88 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002e98:	681c      	ldr	r4, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	47a0      	blx	r4
 8002eb2:	4603      	mov	r3, r0
    }
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd90      	pop	{r4, r7, pc}

08002ebc <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002ebc:	b5b0      	push	{r4, r5, r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ecc:	681c      	ldr	r4, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002ed6:	681d      	ldr	r5, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	47a8      	blx	r5
 8002ef0:	eef0 7a40 	vmov.f32	s15, s0
 8002ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	47a0      	blx	r4
 8002efc:	4603      	mov	r3, r0
    }
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bdb0      	pop	{r4, r5, r7, pc}

08002f06 <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002f06:	b5b0      	push	{r4, r5, r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f16:	681c      	ldr	r4, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f20:	681d      	ldr	r5, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2106      	movs	r1, #6
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	47a8      	blx	r5
 8002f3c:	eef0 7a40 	vmov.f32	s15, s0
 8002f40:	eeb0 0a67 	vmov.f32	s0, s15
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	47a0      	blx	r4
 8002f48:	4603      	mov	r3, r0
    }
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bdb0      	pop	{r4, r5, r7, pc}

08002f52 <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002f52:	b5b0      	push	{r4, r5, r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f62:	681c      	ldr	r4, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002f6c:	681d      	ldr	r5, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2107      	movs	r1, #7
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	47a8      	blx	r5
 8002f88:	eef0 7a40 	vmov.f32	s15, s0
 8002f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	47a0      	blx	r4
 8002f94:	4603      	mov	r3, r0
    }
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bdb0      	pop	{r4, r5, r7, pc}

08002f9e <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002f9e:	b5b0      	push	{r4, r5, r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fae:	681c      	ldr	r4, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fb8:	681d      	ldr	r5, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2104      	movs	r1, #4
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	47a8      	blx	r5
 8002fd4:	eef0 7a40 	vmov.f32	s15, s0
 8002fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	47a0      	blx	r4
 8002fe0:	4603      	mov	r3, r0
    }
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bdb0      	pop	{r4, r5, r7, pc}

08002fea <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002fea:	b5b0      	push	{r4, r5, r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ffa:	681c      	ldr	r4, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003004:	681d      	ldr	r5, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2105      	movs	r1, #5
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
 8003016:	4603      	mov	r3, r0
 8003018:	b29b      	uxth	r3, r3
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	47a8      	blx	r5
 8003020:	eef0 7a40 	vmov.f32	s15, s0
 8003024:	eeb0 0a67 	vmov.f32	s0, s15
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	47a0      	blx	r4
 800302c:	4603      	mov	r3, r0
    }
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bdb0      	pop	{r4, r5, r7, pc}

08003036 <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2104      	movs	r1, #4
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
 800304e:	4603      	mov	r3, r0
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8003058:	2300      	movs	r3, #0
    }
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	b2d1      	uxtb	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	4798      	blx	r3
    }
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
    }
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2100      	movs	r1, #0
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	2102      	movs	r1, #2
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	47a0      	blx	r4
    }
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd90      	pop	{r4, r7, pc}

080030dc <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80030ee:	681c      	ldr	r4, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4798      	blx	r3
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	2102      	movs	r1, #2
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	47a0      	blx	r4
    }
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}

08003112 <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003124:	681c      	ldr	r4, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	ee07 2a90 	vmov	s15, r2
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eeb0 0a67 	vmov.f32	s0, s15
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	2106      	movs	r1, #6
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	47a0      	blx	r4
        return true;
 800314c:	2301      	movs	r3, #1
    }
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 8003156:	b590      	push	{r4, r7, lr}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003168:	681c      	ldr	r4, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	ee07 2a90 	vmov	s15, r2
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	2107      	movs	r1, #7
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	47a0      	blx	r4
        return true;
 8003190:	2301      	movs	r3, #1
    }
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bd90      	pop	{r4, r7, pc}

0800319a <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 800319a:	b590      	push	{r4, r7, lr}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80031ac:	681c      	ldr	r4, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	ee07 2a90 	vmov	s15, r2
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	eeb0 0a67 	vmov.f32	s0, s15
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	461a      	mov	r2, r3
 80031ce:	2104      	movs	r1, #4
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	47a0      	blx	r4
        return true;
 80031d4:	2301      	movs	r3, #1
    }
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd90      	pop	{r4, r7, pc}

080031de <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 80031de:	b590      	push	{r4, r7, lr}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80031f0:	681c      	ldr	r4, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	ee07 2a90 	vmov	s15, r2
 8003202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003206:	eeb0 0a67 	vmov.f32	s0, s15
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	2105      	movs	r1, #5
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	47a0      	blx	r4
        return true;
 8003218:	2301      	movs	r3, #1
    }
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bd90      	pop	{r4, r7, pc}

08003222 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	2b07      	cmp	r3, #7
 8003232:	d901      	bls.n	8003238 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8003234:	2300      	movs	r3, #0
 8003236:	e00f      	b.n	8003258 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3380      	adds	r3, #128	@ 0x80
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	2115      	movs	r1, #21
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
        return true;
 8003256:	2301      	movs	r3, #1
    }
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8003272:	681c      	ldr	r4, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6839      	ldr	r1, [r7, #0]
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
 8003284:	4603      	mov	r3, r0
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	47a0      	blx	r4
    }
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}

08003294 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8003294:	b5b0      	push	{r4, r5, r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80032aa:	681c      	ldr	r4, [r3, #0]
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 80032b2:	2501      	movs	r5, #1
 80032b4:	e000      	b.n	80032b8 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 80032b6:	2500      	movs	r5, #0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	4798      	blx	r3
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	4629      	mov	r1, r5
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	47a0      	blx	r4
    }
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bdb0      	pop	{r4, r5, r7, pc}

080032da <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
    }
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
    }
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8003316:	b5b0      	push	{r4, r5, r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	72fb      	strb	r3, [r7, #11]
 8003324:	4613      	mov	r3, r2
 8003326:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003330:	681c      	ldr	r4, [r3, #0]
 8003332:	7abb      	ldrb	r3, [r7, #10]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003338:	2501      	movs	r5, #1
 800333a:	e000      	b.n	800333e <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800333c:	2500      	movs	r5, #0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	ee07 2a90 	vmov	s15, r2
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	4798      	blx	r3
 800335a:	4603      	mov	r3, r0
 800335c:	7af9      	ldrb	r1, [r7, #11]
 800335e:	462a      	mov	r2, r5
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	47a0      	blx	r4
    }
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bdb0      	pop	{r4, r5, r7, pc}

0800336c <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 800336c:	b5b0      	push	{r4, r5, r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8003380:	681c      	ldr	r4, [r3, #0]
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8003388:	2501      	movs	r5, #1
 800338a:	e000      	b.n	800338e <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 800338c:	2500      	movs	r5, #0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2106      	movs	r1, #6
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	4629      	mov	r1, r5
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	47a0      	blx	r4
    }
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bdb0      	pop	{r4, r5, r7, pc}

080033b0 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80033b0:	b5b0      	push	{r4, r5, r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	460b      	mov	r3, r1
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80033c6:	681c      	ldr	r4, [r3, #0]
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 80033ce:	2501      	movs	r5, #1
 80033d0:	e000      	b.n	80033d4 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 80033d2:	2500      	movs	r5, #0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	ee07 2a90 	vmov	s15, r2
 80033e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	4798      	blx	r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	4629      	mov	r1, r5
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	47a0      	blx	r4
    }
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bdb0      	pop	{r4, r5, r7, pc}

08003402 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	460b      	mov	r3, r1
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	7afa      	ldrb	r2, [r7, #11]
 800341c:	2a01      	cmp	r2, #1
 800341e:	d101      	bne.n	8003424 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 8003420:	2101      	movs	r1, #1
 8003422:	e000      	b.n	8003426 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 8003424:	2100      	movs	r1, #0
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	4798      	blx	r3
    }
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
    }
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
    }
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
    }
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
    }
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80034b4:	bf00      	nop
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2101      	movs	r1, #1
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1ef      	bne.n	80034b6 <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3380      	adds	r3, #128	@ 0x80
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	2a01      	cmp	r2, #1
 8003506:	d101      	bne.n	800350c <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8003508:	2201      	movs	r2, #1
 800350a:	e000      	b.n	800350e <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800350c:	2200      	movs	r2, #0
 800350e:	4611      	mov	r1, r2
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
    }
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
 8003528:	4613      	mov	r3, r2
 800352a:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	78ba      	ldrb	r2, [r7, #2]
 8003538:	2a01      	cmp	r2, #1
 800353a:	d101      	bne.n	8003540 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800353c:	2201      	movs	r2, #1
 800353e:	e000      	b.n	8003542 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003540:	2200      	movs	r2, #0
 8003542:	78f9      	ldrb	r1, [r7, #3]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
    }
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
    }
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2100      	movs	r1, #0
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2102      	movs	r1, #2
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2103      	movs	r1, #3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2203      	movs	r2, #3
 800362e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2106      	movs	r1, #6
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2204      	movs	r2, #4
 8003656:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2107      	movs	r1, #7
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2205      	movs	r2, #5
 800367e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2104      	movs	r1, #4
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2206      	movs	r2, #6
 80036a6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2105      	movs	r1, #5
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2207      	movs	r2, #7
 80036ce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4906      	ldr	r1, [pc, #24]	@ (8003718 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2208      	movs	r2, #8
 8003706:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200002a5 	.word	0x200002a5
 8003718:	200002a8 	.word	0x200002a8

0800371c <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	b2d1      	uxtb	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	2102      	movs	r1, #2
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2209      	movs	r2, #9
 8003790:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037ae:	681c      	ldr	r4, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	2102      	movs	r1, #2
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}

080037da <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 80037da:	b590      	push	{r4, r7, lr}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037ec:	681c      	ldr	r4, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	ee07 2a90 	vmov	s15, r2
 80037fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003802:	eeb0 0a67 	vmov.f32	s0, s15
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	2103      	movs	r1, #3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bd90      	pop	{r4, r7, pc}

08003824 <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003836:	681c      	ldr	r4, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	ee07 2a90 	vmov	s15, r2
 8003848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384c:	eeb0 0a67 	vmov.f32	s0, s15
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	2106      	movs	r1, #6
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}

0800386e <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 800386e:	b590      	push	{r4, r7, lr}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003880:	681c      	ldr	r4, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	ee07 2a90 	vmov	s15, r2
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eeb0 0a67 	vmov.f32	s0, s15
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	2107      	movs	r1, #7
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}

080038b8 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80038ca:	681c      	ldr	r4, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	ee07 2a90 	vmov	s15, r2
 80038dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	461a      	mov	r2, r3
 80038ec:	2104      	movs	r1, #4
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd90      	pop	{r4, r7, pc}

08003902 <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8003902:	b590      	push	{r4, r7, lr}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003914:	681c      	ldr	r4, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	ee07 2a90 	vmov	s15, r2
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eeb0 0a67 	vmov.f32	s0, s15
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	2105      	movs	r1, #5
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bd90      	pop	{r4, r7, pc}

0800394c <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800395e:	681c      	ldr	r4, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	4603      	mov	r3, r0
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}

08003988 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800399e:	681c      	ldr	r4, [r3, #0]
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 80039a6:	2501      	movs	r5, #1
 80039a8:	e000      	b.n	80039ac <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 80039aa:	2500      	movs	r5, #0
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	4798      	blx	r3
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	4629      	mov	r1, r5
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bdb0      	pop	{r4, r5, r7, pc}

080039d6 <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8003a22:	b5b0      	push	{r4, r5, r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	72fb      	strb	r3, [r7, #11]
 8003a30:	4613      	mov	r3, r2
 8003a32:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003a3c:	681c      	ldr	r4, [r3, #0]
 8003a3e:	7abb      	ldrb	r3, [r7, #10]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003a44:	2501      	movs	r5, #1
 8003a46:	e000      	b.n	8003a4a <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8003a48:	2500      	movs	r5, #0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	ee07 2a90 	vmov	s15, r2
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	4798      	blx	r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	7af9      	ldrb	r1, [r7, #11]
 8003a6a:	462a      	mov	r2, r5
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bdb0      	pop	{r4, r5, r7, pc}

08003a80 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 8003a80:	b5b0      	push	{r4, r5, r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003a94:	681c      	ldr	r4, [r3, #0]
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	e000      	b.n	8003aa2 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8003aa0:	2500      	movs	r5, #0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2106      	movs	r1, #6
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bdb0      	pop	{r4, r5, r7, pc}

08003acc <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003ae2:	681c      	ldr	r4, [r3, #0]
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8003aea:	2501      	movs	r5, #1
 8003aec:	e000      	b.n	8003af0 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8003aee:	2500      	movs	r5, #0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	ee07 2a90 	vmov	s15, r2
 8003b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b04:	eeb0 0a67 	vmov.f32	s0, s15
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	4798      	blx	r3
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4629      	mov	r1, r5
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bdb0      	pop	{r4, r5, r7, pc}

08003b26 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	7afa      	ldrb	r2, [r7, #11]
 8003b40:	2a01      	cmp	r2, #1
 8003b42:	d101      	bne.n	8003b48 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8003b44:	2101      	movs	r1, #1
 8003b46:	e000      	b.n	8003b4a <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003b48:	2100      	movs	r1, #0
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	2a01      	cmp	r2, #1
 8003c12:	d101      	bne.n	8003c18 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003c14:	2201      	movs	r2, #1
 8003c16:	e000      	b.n	8003c1a <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	70fb      	strb	r3, [r7, #3]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	78ba      	ldrb	r2, [r7, #2]
 8003c4c:	2a01      	cmp	r2, #1
 8003c4e:	d101      	bne.n	8003c54 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003c50:	2201      	movs	r2, #1
 8003c52:	e000      	b.n	8003c56 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003c54:	2200      	movs	r2, #0
 8003c56:	78f9      	ldrb	r1, [r7, #3]
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
 8003ca8:	4603      	mov	r3, r0
    }
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003ccc:	b5b0      	push	{r4, r5, r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	2b07      	cmp	r3, #7
 8003ce0:	f200 80fe 	bhi.w	8003ee0 <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cec <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d0d 	.word	0x08003d0d
 8003cf0:	08003d39 	.word	0x08003d39
 8003cf4:	08003d67 	.word	0x08003d67
 8003cf8:	08003dab 	.word	0x08003dab
 8003cfc:	08003df1 	.word	0x08003df1
 8003d00:	08003e37 	.word	0x08003e37
 8003d04:	08003e7d 	.word	0x08003e7d
 8003d08:	08003ec3 	.word	0x08003ec3
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003d14:	681c      	ldr	r4, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6a12      	ldr	r2, [r2, #32]
 8003d24:	7b92      	ldrb	r2, [r2, #14]
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	47a0      	blx	r4
 8003d34:	4603      	mov	r3, r0
 8003d36:	e0d4      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003d40:	681c      	ldr	r4, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6a12      	ldr	r2, [r2, #32]
 8003d50:	3228      	adds	r2, #40	@ 0x28
 8003d52:	7b92      	ldrb	r2, [r2, #14]
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	47a0      	blx	r4
 8003d62:	4603      	mov	r3, r0
 8003d64:	e0bd      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d6e:	681c      	ldr	r4, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003d78:	681d      	ldr	r5, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6a12      	ldr	r2, [r2, #32]
 8003d88:	323c      	adds	r2, #60	@ 0x3c
 8003d8a:	7b92      	ldrb	r2, [r2, #14]
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	47a8      	blx	r5
 8003d9a:	eef0 7a40 	vmov.f32	s15, s0
 8003d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	47a0      	blx	r4
 8003da6:	4603      	mov	r3, r0
 8003da8:	e09b      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003db2:	681c      	ldr	r4, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dbc:	681d      	ldr	r5, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6a12      	ldr	r2, [r2, #32]
 8003dcc:	3278      	adds	r2, #120	@ 0x78
 8003dce:	7b92      	ldrb	r2, [r2, #14]
 8003dd0:	6839      	ldr	r1, [r7, #0]
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	47a8      	blx	r5
 8003de0:	eef0 7a40 	vmov.f32	s15, s0
 8003de4:	eeb0 0a67 	vmov.f32	s0, s15
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	47a0      	blx	r4
 8003dec:	4603      	mov	r3, r0
 8003dee:	e078      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003df8:	681c      	ldr	r4, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003e02:	681d      	ldr	r5, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6a12      	ldr	r2, [r2, #32]
 8003e12:	328c      	adds	r2, #140	@ 0x8c
 8003e14:	7b92      	ldrb	r2, [r2, #14]
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	47a8      	blx	r5
 8003e26:	eef0 7a40 	vmov.f32	s15, s0
 8003e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	47a0      	blx	r4
 8003e32:	4603      	mov	r3, r0
 8003e34:	e055      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e3e:	681c      	ldr	r4, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003e48:	681d      	ldr	r5, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6a12      	ldr	r2, [r2, #32]
 8003e58:	3250      	adds	r2, #80	@ 0x50
 8003e5a:	7b92      	ldrb	r2, [r2, #14]
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	47a8      	blx	r5
 8003e6c:	eef0 7a40 	vmov.f32	s15, s0
 8003e70:	eeb0 0a67 	vmov.f32	s0, s15
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	47a0      	blx	r4
 8003e78:	4603      	mov	r3, r0
 8003e7a:	e032      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e84:	681c      	ldr	r4, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003e8e:	681d      	ldr	r5, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6a12      	ldr	r2, [r2, #32]
 8003e9e:	3264      	adds	r2, #100	@ 0x64
 8003ea0:	7b92      	ldrb	r2, [r2, #14]
 8003ea2:	6839      	ldr	r1, [r7, #0]
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	47a8      	blx	r5
 8003eb2:	eef0 7a40 	vmov.f32	s15, s0
 8003eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	47a0      	blx	r4
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	e00f      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2104      	movs	r1, #4
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	4798      	blx	r3
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e002      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003ee0:	2300      	movs	r3, #0
        }
    }
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eea:	bf00      	nop

08003eec <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6898      	ldr	r0, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	899b      	ldrh	r3, [r3, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	4619      	mov	r1, r3
 8003f00:	f00a f926 	bl	800e150 <HAL_GPIO_WritePin>
    }
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f1c:	d303      	bcc.n	8003f26 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8003f24:	e000      	b.n	8003f28 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003f26:	683b      	ldr	r3, [r7, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db05      	blt.n	8003f50 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f4a:	da01      	bge.n	8003f50 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	e00c      	b.n	8003f6a <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8003f56:	db06      	blt.n	8003f66 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da03      	bge.n	8003f66 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8003f64:	e001      	b.n	8003f6a <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003f66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003fa4 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003f90:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003f94:	eeb0 0a67 	vmov.f32	s0, s15
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	3c74242a 	.word	0x3c74242a

08003fa8 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003fb4:	edd7 7a00 	vldr	s15, [r7]
 8003fb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003fec <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc4:	d80a      	bhi.n	8003fdc <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003fc6:	ed97 7a00 	vldr	s14, [r7]
 8003fca:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003ff0 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd6:	ee17 3a90 	vmov	r3, s15
 8003fda:	e000      	b.n	8003fde <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	4674241b 	.word	0x4674241b
 8003ff0:	3c74242a 	.word	0x3c74242a

08003ff4 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8004000:	887b      	ldrh	r3, [r7, #2]
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004006:	d209      	bcs.n	800401c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004012:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004030 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8004016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800401a:	e001      	b.n	8004020 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 800401c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004034 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8004020:	eeb0 0a67 	vmov.f32	s0, s15
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	4168d4fe 	.word	0x4168d4fe
 8004034:	00000000 	.word	0x00000000

08004038 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8004044:	edd7 7a00 	vldr	s15, [r7]
 8004048:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800407c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 800404c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	d80b      	bhi.n	800406e <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004056:	ed97 7a00 	vldr	s14, [r7]
 800405a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004080 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 800405e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004066:	ee17 3a90 	vmov	r3, s15
 800406a:	b29b      	uxth	r3, r3
 800406c:	e000      	b.n	8004070 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	4768c671 	.word	0x4768c671
 8004080:	4168d4fe 	.word	0x4168d4fe

08004084 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8004090:	887b      	ldrh	r3, [r7, #2]
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004096:	d209      	bcs.n	80040ac <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80040c0 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 80040a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040aa:	e001      	b.n	80040b0 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 80040ac:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80040c4 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 80040b0:	eeb0 0a67 	vmov.f32	s0, s15
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	4168d4fe 	.word	0x4168d4fe
 80040c4:	00000000 	.word	0x00000000

080040c8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80040d4:	edd7 7a00 	vldr	s15, [r7]
 80040d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800410c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 80040dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e4:	d80b      	bhi.n	80040fe <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80040e6:	ed97 7a00 	vldr	s14, [r7]
 80040ea:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004110 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 80040ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f6:	ee17 3a90 	vmov	r3, s15
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	e000      	b.n	8004100 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	4768c671 	.word	0x4768c671
 8004110:	4168d4fe 	.word	0x4168d4fe

08004114 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004126:	d209      	bcs.n	800413c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004132:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004150 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8004136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413a:	e001      	b.n	8004140 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 800413c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004154 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8004140:	eeb0 0a67 	vmov.f32	s0, s15
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	4174240b 	.word	0x4174240b
 8004154:	00000000 	.word	0x00000000

08004158 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004164:	edd7 7a00 	vldr	s15, [r7]
 8004168:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800419c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800416c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004174:	d80b      	bhi.n	800418e <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8004176:	ed97 7a00 	vldr	s14, [r7]
 800417a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80041a0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800417e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004186:	ee17 3a90 	vmov	r3, s15
 800418a:	b29b      	uxth	r3, r3
 800418c:	e000      	b.n	8004190 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	4673e702 	.word	0x4673e702
 80041a0:	4174240b 	.word	0x4174240b

080041a4 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b6:	d209      	bcs.n	80041cc <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80041e0 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 80041c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ca:	e001      	b.n	80041d0 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80041cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80041e4 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 80041d0:	eeb0 0a67 	vmov.f32	s0, s15
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	3e742401 	.word	0x3e742401
 80041e4:	00000000 	.word	0x00000000

080041e8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80041f4:	edd7 7a00 	vldr	s15, [r7]
 80041f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800422c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 80041fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	d80b      	bhi.n	800421e <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8004206:	ed97 7a00 	vldr	s14, [r7]
 800420a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004230 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 800420e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004216:	ee17 3a90 	vmov	r3, s15
 800421a:	b29b      	uxth	r3, r3
 800421c:	e000      	b.n	8004220 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	447414bf 	.word	0x447414bf
 8004230:	3e742401 	.word	0x3e742401

08004234 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 8004240:	887b      	ldrh	r3, [r7, #2]
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004246:	d219      	bcs.n	800427c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8004248:	887b      	ldrh	r3, [r7, #2]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc f99a 	bl	8000584 <__aeabi_i2d>
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	4b0e      	ldr	r3, [pc, #56]	@ (8004290 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8004256:	f7fc f849 	bl	80002ec <__adddf3>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 8004268:	f7fc f9f6 	bl	8000658 <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	f7fc fcc8 	bl	8000c08 <__aeabi_d2f>
 8004278:	4603      	mov	r3, r0
 800427a:	e001      	b.n	8004280 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 800427c:	f04f 0300 	mov.w	r3, #0
}
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eeb0 0a67 	vmov.f32	s0, s15
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	3fe00000 	.word	0x3fe00000
 8004294:	402e8000 	.word	0x402e8000

08004298 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80042a4:	edd7 7a00 	vldr	s15, [r7]
 80042a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80042e4 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 80042ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b4:	d80f      	bhi.n	80042d6 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80042b6:	ed97 7a00 	vldr	s14, [r7]
 80042ba:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80042e8 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 80042be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80042c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ce:	ee17 3a90 	vmov	r3, s15
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	e000      	b.n	80042d8 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	4673e180 	.word	0x4673e180
 80042e8:	41740000 	.word	0x41740000

080042ec <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 80042f8:	887b      	ldrh	r3, [r7, #2]
 80042fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042fe:	d209      	bcs.n	8004314 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800430a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004328 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800430e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004312:	e001      	b.n	8004318 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004314:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800432c <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8004318:	eeb0 0a67 	vmov.f32	s0, s15
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	3d7423f4 	.word	0x3d7423f4
 800432c:	00000000 	.word	0x00000000

08004330 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800433c:	edd7 7a00 	vldr	s15, [r7]
 8004340:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004374 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 8004344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434c:	d80b      	bhi.n	8004366 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800434e:	ed97 7a00 	vldr	s14, [r7]
 8004352:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004378 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 8004356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800435a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435e:	ee17 3a90 	vmov	r3, s15
 8004362:	b29b      	uxth	r3, r3
 8004364:	e000      	b.n	8004368 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	44742023 	.word	0x44742023
 8004378:	3d7423f4 	.word	0x3d7423f4

0800437c <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004392:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80043a8 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 8004396:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 800439a:	eeb0 0a67 	vmov.f32	s0, s15
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	3783956e 	.word	0x3783956e

080043ac <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80043b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80043bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80043f4 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 80043c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d80c      	bhi.n	80043e4 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80043ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80043ce:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80043f8 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 80043d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043da:	edc7 7a01 	vstr	s15, [r7, #4]
 80043de:	793b      	ldrb	r3, [r7, #4]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e000      	b.n	80043e6 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	3b8311d9 	.word	0x3b8311d9
 80043f8:	3783956e 	.word	0x3783956e

080043fc <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004412:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004428 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8004416:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 800441a:	eeb0 0a67 	vmov.f32	s0, s15
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	3783956e 	.word	0x3783956e

0800442c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8004438:	edd7 7a02 	vldr	s15, [r7, #8]
 800443c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004474 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8004440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	d80c      	bhi.n	8004464 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800444a:	ed97 7a02 	vldr	s14, [r7, #8]
 800444e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004478 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8004452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445a:	edc7 7a01 	vstr	s15, [r7, #4]
 800445e:	793b      	ldrb	r3, [r7, #4]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e000      	b.n	8004466 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	3b8311d9 	.word	0x3b8311d9
 8004478:	3783956e 	.word	0x3783956e

0800447c <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004492:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80044a8 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8004496:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 800449a:	eeb0 0a67 	vmov.f32	s0, s15
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	3783956e 	.word	0x3783956e

080044ac <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80044b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80044bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80044f4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80044c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c8:	d80c      	bhi.n	80044e4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80044ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80044ce:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80044f8 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 80044d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044da:	edc7 7a01 	vstr	s15, [r7, #4]
 80044de:	793b      	ldrb	r3, [r7, #4]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e000      	b.n	80044e6 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	3b8311d9 	.word	0x3b8311d9
 80044f8:	3783956e 	.word	0x3783956e

080044fc <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	d80a      	bhi.n	8004524 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	3301      	adds	r3, #1
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800451a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004538 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 800451e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004522:	e001      	b.n	8004528 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 8004524:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800453c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 8004528:	eeb0 0a67 	vmov.f32	s0, s15
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	43bb8000 	.word	0x43bb8000
 800453c:	00000000 	.word	0x00000000

08004540 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800454c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004550:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80045dc <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 8004554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455c:	d836      	bhi.n	80045cc <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 800455e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004562:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80045e0 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 8004566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800456a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800456e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004576:	edc7 7a01 	vstr	s15, [r7, #4]
 800457a:	793b      	ldrb	r3, [r7, #4]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004586:	ed97 7a05 	vldr	s14, [r7, #20]
 800458a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800458e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8004592:	edd7 7a04 	vldr	s15, [r7, #16]
 8004596:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800459a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	d50a      	bpl.n	80045ba <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80045a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80045a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80045b0:	793b      	ldrb	r3, [r7, #4]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e009      	b.n	80045ce <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 80045ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80045be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80045c6:	793b      	ldrb	r3, [r7, #4]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e000      	b.n	80045ce <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	45bb8000 	.word	0x45bb8000
 80045e0:	43bb8000 	.word	0x43bb8000

080045e4 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 80045f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db0a      	blt.n	800460e <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	3301      	adds	r3, #1
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004604:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004620 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8004608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800460c:	e001      	b.n	8004612 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 800460e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004624 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 8004612:	eeb0 0a67 	vmov.f32	s0, s15
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	41fa0000 	.word	0x41fa0000
 8004624:	00000000 	.word	0x00000000

08004628 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8004634:	edd7 7a02 	vldr	s15, [r7, #8]
 8004638:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80046c4 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 800463c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	d836      	bhi.n	80046b4 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 8004646:	ed97 7a02 	vldr	s14, [r7, #8]
 800464a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80046c8 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 800464e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004652:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8004656:	edd7 7a05 	vldr	s15, [r7, #20]
 800465a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800465e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004662:	793b      	ldrb	r3, [r7, #4]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800466e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004676:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 800467a:	edd7 7a04 	vldr	s15, [r7, #16]
 800467e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468a:	d50a      	bpl.n	80046a2 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800468c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004694:	edc7 7a01 	vstr	s15, [r7, #4]
 8004698:	793b      	ldrb	r3, [r7, #4]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	e009      	b.n	80046b6 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 80046a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80046a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80046ae:	793b      	ldrb	r3, [r7, #4]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e000      	b.n	80046b6 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	457a0000 	.word	0x457a0000
 80046c8:	41fa0000 	.word	0x41fa0000

080046cc <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3394      	adds	r3, #148	@ 0x94
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	edd2 7a05 	vldr	s15, [r2, #20]
 8004702:	eeb0 0a67 	vmov.f32	s0, s15
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	4798      	blx	r3
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	edd2 7a06 	vldr	s15, [r2, #24]
 8004724:	eeb0 0a67 	vmov.f32	s0, s15
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	4798      	blx	r3
 800472c:	4603      	mov	r3, r0
 800472e:	461a      	mov	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	edd2 7a07 	vldr	s15, [r2, #28]
 8004746:	eeb0 0a67 	vmov.f32	s0, s15
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	4798      	blx	r3
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	edd2 7a08 	vldr	s15, [r2, #32]
 8004768:	eeb0 0a67 	vmov.f32	s0, s15
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	4798      	blx	r3
 8004770:	4603      	mov	r3, r0
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800478a:	eeb0 0a67 	vmov.f32	s0, s15
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	4798      	blx	r3
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80047a2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8004a74 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80047a6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	ed93 7a00 	vldr	s14, [r3]
 80047b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80047bc:	793b      	ldrb	r3, [r7, #4]
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80047cc:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004a74 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80047d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ed93 7a00 	vldr	s14, [r3]
 80047da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80047e6:	793b      	ldrb	r3, [r7, #4]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80047f6:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8004a74 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80047fa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	ed93 7a00 	vldr	s14, [r3]
 8004804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004810:	793b      	ldrb	r3, [r7, #4]
 8004812:	b2da      	uxtb	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004820:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8004a74 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004824:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	ed93 7a00 	vldr	s14, [r3]
 800482e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004836:	edc7 7a01 	vstr	s15, [r7, #4]
 800483a:	793b      	ldrb	r3, [r7, #4]
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004854:	eeb0 0a67 	vmov.f32	s0, s15
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	4798      	blx	r3
 800485c:	4603      	mov	r3, r0
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8004876:	eeb0 0a67 	vmov.f32	s0, s15
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	4798      	blx	r3
 800487e:	4603      	mov	r3, r0
 8004880:	461a      	mov	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8004898:	eeb0 0a67 	vmov.f32	s0, s15
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	4798      	blx	r3
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 80048ba:	eeb0 0a67 	vmov.f32	s0, s15
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	4798      	blx	r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	461a      	mov	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 80048e8:	eeb0 0a67 	vmov.f32	s0, s15
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	4798      	blx	r3
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800490a:	eeb0 0a67 	vmov.f32	s0, s15
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	4798      	blx	r3
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8004950:	2104      	movs	r1, #4
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8004966:	2105      	movs	r1, #5
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800497c:	2106      	movs	r1, #6
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8004992:	2107      	movs	r1, #7
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80049a8:	2108      	movs	r1, #8
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80049be:	2109      	movs	r1, #9
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 80049d4:	210a      	movs	r1, #10
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80049ea:	210b      	movs	r1, #11
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004a00:	210c      	movs	r1, #12
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8004a16:	210d      	movs	r1, #13
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8004a2c:	210e      	movs	r1, #14
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8004a42:	210f      	movs	r1, #15
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8004a58:	2110      	movs	r1, #16
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8004a6e:	2111      	movs	r1, #17
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	e001      	b.n	8004a78 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 8004a74:	43800000 	.word	0x43800000
 8004a78:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8004a8a:	2113      	movs	r1, #19
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8004aa0:	2114      	movs	r1, #20
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004ab6:	2116      	movs	r1, #22
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8004acc:	2117      	movs	r1, #23
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3354      	adds	r3, #84	@ 0x54
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	4798      	blx	r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f083 0301 	eor.w	r3, r3, #1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b16:	681c      	ldr	r4, [r3, #0]
 8004b18:	7afa      	ldrb	r2, [r7, #11]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	2201      	movs	r2, #1
 8004b26:	490c      	ldr	r1, [pc, #48]	@ (8004b58 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a09      	ldr	r2, [pc, #36]	@ (8004b5c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004b38:	4907      	ldr	r1, [pc, #28]	@ (8004b58 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a05      	ldr	r2, [pc, #20]	@ (8004b60 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004b4a:	4904      	ldr	r1, [pc, #16]	@ (8004b5c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	4798      	blx	r3
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd90      	pop	{r4, r7, pc}
 8004b58:	200002a8 	.word	0x200002a8
 8004b5c:	200002c8 	.word	0x200002c8
 8004b60:	200002d0 	.word	0x200002d0

08004b64 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b78:	681c      	ldr	r4, [r3, #0]
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	9201      	str	r2, [sp, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	9200      	str	r2, [sp, #0]
 8004b84:	2202      	movs	r2, #2
 8004b86:	4917      	ldr	r1, [pc, #92]	@ (8004be4 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a14      	ldr	r2, [pc, #80]	@ (8004be8 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004b98:	4912      	ldr	r1, [pc, #72]	@ (8004be4 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a10      	ldr	r2, [pc, #64]	@ (8004bec <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004baa:	490f      	ldr	r1, [pc, #60]	@ (8004be8 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a19      	ldr	r1, [r3, #32]
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	7b9b      	ldrb	r3, [r3, #14]
 8004bc2:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	4906      	ldr	r1, [pc, #24]	@ (8004bec <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8004bda:	68bb      	ldr	r3, [r7, #8]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	200002a8 	.word	0x200002a8
 8004be8:	200002c8 	.word	0x200002c8
 8004bec:	200002d0 	.word	0x200002d0

08004bf0 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004c06:	681c      	ldr	r4, [r3, #0]
 8004c08:	7afa      	ldrb	r2, [r7, #11]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	2203      	movs	r2, #3
 8004c16:	490c      	ldr	r1, [pc, #48]	@ (8004c48 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a09      	ldr	r2, [pc, #36]	@ (8004c4c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004c28:	4907      	ldr	r1, [pc, #28]	@ (8004c48 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a05      	ldr	r2, [pc, #20]	@ (8004c50 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004c3a:	4904      	ldr	r1, [pc, #16]	@ (8004c4c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	4798      	blx	r3
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}
 8004c48:	200002a8 	.word	0x200002a8
 8004c4c:	200002c8 	.word	0x200002c8
 8004c50:	200002d0 	.word	0x200002d0

08004c54 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004c68:	681c      	ldr	r4, [r3, #0]
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	9201      	str	r2, [sp, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	9200      	str	r2, [sp, #0]
 8004c74:	2204      	movs	r2, #4
 8004c76:	490c      	ldr	r1, [pc, #48]	@ (8004ca8 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a09      	ldr	r2, [pc, #36]	@ (8004cac <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004c88:	4907      	ldr	r1, [pc, #28]	@ (8004ca8 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a05      	ldr	r2, [pc, #20]	@ (8004cb0 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004c9a:	4904      	ldr	r1, [pc, #16]	@ (8004cac <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	200002a8 	.word	0x200002a8
 8004cac:	200002c8 	.word	0x200002c8
 8004cb0:	200002d0 	.word	0x200002d0

08004cb4 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004cca:	681c      	ldr	r4, [r3, #0]
 8004ccc:	7afa      	ldrb	r2, [r7, #11]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	2205      	movs	r2, #5
 8004cda:	490c      	ldr	r1, [pc, #48]	@ (8004d0c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a09      	ldr	r2, [pc, #36]	@ (8004d10 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004cec:	4907      	ldr	r1, [pc, #28]	@ (8004d0c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004cfe:	4904      	ldr	r1, [pc, #16]	@ (8004d10 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	4798      	blx	r3
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd90      	pop	{r4, r7, pc}
 8004d0c:	200002a8 	.word	0x200002a8
 8004d10:	200002c8 	.word	0x200002c8
 8004d14:	200002d0 	.word	0x200002d0

08004d18 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d28:	d21f      	bcs.n	8004d6a <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d32:	681c      	ldr	r4, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2206      	movs	r2, #6
 8004d40:	490c      	ldr	r1, [pc, #48]	@ (8004d74 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a09      	ldr	r2, [pc, #36]	@ (8004d78 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004d52:	4908      	ldr	r1, [pc, #32]	@ (8004d74 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a06      	ldr	r2, [pc, #24]	@ (8004d7c <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004d64:	4904      	ldr	r1, [pc, #16]	@ (8004d78 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd90      	pop	{r4, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	200002a8 	.word	0x200002a8
 8004d78:	200002c8 	.word	0x200002c8
 8004d7c:	200002d0 	.word	0x200002d0

08004d80 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d94:	d220      	bcs.n	8004dd8 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d9e:	681c      	ldr	r4, [r3, #0]
 8004da0:	7afa      	ldrb	r2, [r7, #11]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	2207      	movs	r2, #7
 8004dae:	490c      	ldr	r1, [pc, #48]	@ (8004de0 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a09      	ldr	r2, [pc, #36]	@ (8004de4 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004dc0:	4907      	ldr	r1, [pc, #28]	@ (8004de0 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a05      	ldr	r2, [pc, #20]	@ (8004de8 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004dd2:	4904      	ldr	r1, [pc, #16]	@ (8004de4 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	4798      	blx	r3
}
 8004dd8:	bf00      	nop
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}
 8004de0:	200002a8 	.word	0x200002a8
 8004de4:	200002c8 	.word	0x200002c8
 8004de8:	200002d0 	.word	0x200002d0

08004dec <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	607b      	str	r3, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	72fb      	strb	r3, [r7, #11]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e06:	681c      	ldr	r4, [r3, #0]
 8004e08:	7af9      	ldrb	r1, [r7, #11]
 8004e0a:	7abb      	ldrb	r3, [r7, #10]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	9201      	str	r2, [sp, #4]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	460b      	mov	r3, r1
 8004e14:	2208      	movs	r2, #8
 8004e16:	490c      	ldr	r1, [pc, #48]	@ (8004e48 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a09      	ldr	r2, [pc, #36]	@ (8004e4c <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004e28:	4907      	ldr	r1, [pc, #28]	@ (8004e48 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a05      	ldr	r2, [pc, #20]	@ (8004e50 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004e3a:	4904      	ldr	r1, [pc, #16]	@ (8004e4c <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	4798      	blx	r3
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd90      	pop	{r4, r7, pc}
 8004e48:	200002a8 	.word	0x200002a8
 8004e4c:	200002c8 	.word	0x200002c8
 8004e50:	200002d0 	.word	0x200002d0

08004e54 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
 8004e60:	4613      	mov	r3, r2
 8004e62:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e6c:	681c      	ldr	r4, [r3, #0]
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	78bb      	ldrb	r3, [r7, #2]
 8004e72:	2100      	movs	r1, #0
 8004e74:	9101      	str	r1, [sp, #4]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	2209      	movs	r2, #9
 8004e7c:	490c      	ldr	r1, [pc, #48]	@ (8004eb0 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a09      	ldr	r2, [pc, #36]	@ (8004eb4 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004e8e:	4908      	ldr	r1, [pc, #32]	@ (8004eb0 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a06      	ldr	r2, [pc, #24]	@ (8004eb8 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004ea0:	4904      	ldr	r1, [pc, #16]	@ (8004eb4 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd90      	pop	{r4, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200002a8 	.word	0x200002a8
 8004eb4:	200002c8 	.word	0x200002c8
 8004eb8:	200002d0 	.word	0x200002d0

08004ebc <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004ecc:	681c      	ldr	r4, [r3, #0]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	220a      	movs	r2, #10
 8004eda:	490c      	ldr	r1, [pc, #48]	@ (8004f0c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a09      	ldr	r2, [pc, #36]	@ (8004f10 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004eec:	4907      	ldr	r1, [pc, #28]	@ (8004f0c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a05      	ldr	r2, [pc, #20]	@ (8004f14 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004efe:	4904      	ldr	r1, [pc, #16]	@ (8004f10 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}
 8004f0c:	200002a8 	.word	0x200002a8
 8004f10:	200002c8 	.word	0x200002c8
 8004f14:	200002d0 	.word	0x200002d0

08004f18 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f28:	681c      	ldr	r4, [r3, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	220b      	movs	r2, #11
 8004f36:	490c      	ldr	r1, [pc, #48]	@ (8004f68 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a09      	ldr	r2, [pc, #36]	@ (8004f6c <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004f48:	4907      	ldr	r1, [pc, #28]	@ (8004f68 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a05      	ldr	r2, [pc, #20]	@ (8004f70 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004f5a:	4904      	ldr	r1, [pc, #16]	@ (8004f6c <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd90      	pop	{r4, r7, pc}
 8004f68:	200002a8 	.word	0x200002a8
 8004f6c:	200002c8 	.word	0x200002c8
 8004f70:	200002d0 	.word	0x200002d0

08004f74 <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f84:	681c      	ldr	r4, [r3, #0]
 8004f86:	2300      	movs	r3, #0
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	220c      	movs	r2, #12
 8004f92:	490c      	ldr	r1, [pc, #48]	@ (8004fc4 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a09      	ldr	r2, [pc, #36]	@ (8004fc8 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004fa4:	4907      	ldr	r1, [pc, #28]	@ (8004fc4 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a05      	ldr	r2, [pc, #20]	@ (8004fcc <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004fb6:	4904      	ldr	r1, [pc, #16]	@ (8004fc8 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	4798      	blx	r3
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd90      	pop	{r4, r7, pc}
 8004fc4:	200002a8 	.word	0x200002a8
 8004fc8:	200002c8 	.word	0x200002c8
 8004fcc:	200002d0 	.word	0x200002d0

08004fd0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fe0:	681c      	ldr	r4, [r3, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2300      	movs	r3, #0
 8004fec:	220d      	movs	r2, #13
 8004fee:	490c      	ldr	r1, [pc, #48]	@ (8005020 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a09      	ldr	r2, [pc, #36]	@ (8005024 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8005000:	4907      	ldr	r1, [pc, #28]	@ (8005020 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a05      	ldr	r2, [pc, #20]	@ (8005028 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8005012:	4904      	ldr	r1, [pc, #16]	@ (8005024 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bd90      	pop	{r4, r7, pc}
 8005020:	200002a8 	.word	0x200002a8
 8005024:	200002c8 	.word	0x200002c8
 8005028:	200002d0 	.word	0x200002d0

0800502c <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b085      	sub	sp, #20
 8005030:	af02      	add	r7, sp, #8
 8005032:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800503c:	681c      	ldr	r4, [r3, #0]
 800503e:	2300      	movs	r3, #0
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	2300      	movs	r3, #0
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	2300      	movs	r3, #0
 8005048:	220e      	movs	r2, #14
 800504a:	490c      	ldr	r1, [pc, #48]	@ (800507c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a09      	ldr	r2, [pc, #36]	@ (8005080 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 800505c:	4907      	ldr	r1, [pc, #28]	@ (800507c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a05      	ldr	r2, [pc, #20]	@ (8005084 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 800506e:	4904      	ldr	r1, [pc, #16]	@ (8005080 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bd90      	pop	{r4, r7, pc}
 800507c:	200002a8 	.word	0x200002a8
 8005080:	200002c8 	.word	0x200002c8
 8005084:	200002d0 	.word	0x200002d0

08005088 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b085      	sub	sp, #20
 800508c:	af02      	add	r7, sp, #8
 800508e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005098:	681c      	ldr	r4, [r3, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	2300      	movs	r3, #0
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	220f      	movs	r2, #15
 80050a6:	490c      	ldr	r1, [pc, #48]	@ (80050d8 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a09      	ldr	r2, [pc, #36]	@ (80050dc <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 80050b8:	4907      	ldr	r1, [pc, #28]	@ (80050d8 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a05      	ldr	r2, [pc, #20]	@ (80050e0 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 80050ca:	4904      	ldr	r1, [pc, #16]	@ (80050dc <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	200002a8 	.word	0x200002a8
 80050dc:	200002c8 	.word	0x200002c8
 80050e0:	200002d0 	.word	0x200002d0

080050e4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050f4:	681c      	ldr	r4, [r3, #0]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	2300      	movs	r3, #0
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2300      	movs	r3, #0
 8005100:	2210      	movs	r2, #16
 8005102:	490c      	ldr	r1, [pc, #48]	@ (8005134 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a09      	ldr	r2, [pc, #36]	@ (8005138 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8005114:	4907      	ldr	r1, [pc, #28]	@ (8005134 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a05      	ldr	r2, [pc, #20]	@ (800513c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 8005126:	4904      	ldr	r1, [pc, #16]	@ (8005138 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4798      	blx	r3
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}
 8005134:	200002a8 	.word	0x200002a8
 8005138:	200002c8 	.word	0x200002c8
 800513c:	200002d0 	.word	0x200002d0

08005140 <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b085      	sub	sp, #20
 8005144:	af02      	add	r7, sp, #8
 8005146:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005150:	681c      	ldr	r4, [r3, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	2300      	movs	r3, #0
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2300      	movs	r3, #0
 800515c:	2211      	movs	r2, #17
 800515e:	490c      	ldr	r1, [pc, #48]	@ (8005190 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a09      	ldr	r2, [pc, #36]	@ (8005194 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8005170:	4907      	ldr	r1, [pc, #28]	@ (8005190 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a05      	ldr	r2, [pc, #20]	@ (8005198 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 8005182:	4904      	ldr	r1, [pc, #16]	@ (8005194 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	200002a8 	.word	0x200002a8
 8005194:	200002c8 	.word	0x200002c8
 8005198:	200002d0 	.word	0x200002d0

0800519c <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b087      	sub	sp, #28
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051ac:	681c      	ldr	r4, [r3, #0]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2300      	movs	r3, #0
 80051b8:	2212      	movs	r2, #18
 80051ba:	4912      	ldr	r1, [pc, #72]	@ (8005204 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005208 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 80051cc:	490d      	ldr	r1, [pc, #52]	@ (8005204 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0b      	ldr	r2, [pc, #44]	@ (800520c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 80051de:	490a      	ldr	r1, [pc, #40]	@ (8005208 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2202      	movs	r2, #2
 80051f0:	4906      	ldr	r1, [pc, #24]	@ (800520c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
 80051f6:	4603      	mov	r3, r0
 80051f8:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 80051fa:	89fb      	ldrh	r3, [r7, #14]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}
 8005204:	200002a8 	.word	0x200002a8
 8005208:	200002c8 	.word	0x200002c8
 800520c:	200002d0 	.word	0x200002d0

08005210 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b087      	sub	sp, #28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	460b      	mov	r3, r1
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005226:	681c      	ldr	r4, [r3, #0]
 8005228:	7afa      	ldrb	r2, [r7, #11]
 800522a:	2300      	movs	r3, #0
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	2201      	movs	r2, #1
 8005236:	4903      	ldr	r1, [pc, #12]	@ (8005244 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	47a0      	blx	r4
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}
 8005244:	200002a8 	.word	0x200002a8

08005248 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8005248:	b590      	push	{r4, r7, lr}
 800524a:	b085      	sub	sp, #20
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800525c:	681c      	ldr	r4, [r3, #0]
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	2200      	movs	r2, #0
 8005262:	9201      	str	r2, [sp, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	9200      	str	r2, [sp, #0]
 8005268:	2202      	movs	r2, #2
 800526a:	4903      	ldr	r1, [pc, #12]	@ (8005278 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	47a0      	blx	r4
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}
 8005278:	200002a8 	.word	0x200002a8

0800527c <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b087      	sub	sp, #28
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	460b      	mov	r3, r1
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005292:	681c      	ldr	r4, [r3, #0]
 8005294:	7afa      	ldrb	r2, [r7, #11]
 8005296:	2300      	movs	r3, #0
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	4613      	mov	r3, r2
 80052a0:	2203      	movs	r2, #3
 80052a2:	4903      	ldr	r1, [pc, #12]	@ (80052b0 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	47a0      	blx	r4
}
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd90      	pop	{r4, r7, pc}
 80052b0:	200002a8 	.word	0x200002a8

080052b4 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052c8:	681c      	ldr	r4, [r3, #0]
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	2200      	movs	r2, #0
 80052ce:	9201      	str	r2, [sp, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	9200      	str	r2, [sp, #0]
 80052d4:	2204      	movs	r2, #4
 80052d6:	4903      	ldr	r1, [pc, #12]	@ (80052e4 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	47a0      	blx	r4
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd90      	pop	{r4, r7, pc}
 80052e4:	200002a8 	.word	0x200002a8

080052e8 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	460b      	mov	r3, r1
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052fe:	681c      	ldr	r4, [r3, #0]
 8005300:	7afa      	ldrb	r2, [r7, #11]
 8005302:	2300      	movs	r3, #0
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4613      	mov	r3, r2
 800530c:	2205      	movs	r2, #5
 800530e:	4903      	ldr	r1, [pc, #12]	@ (800531c <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	47a0      	blx	r4
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	bd90      	pop	{r4, r7, pc}
 800531c:	200002a8 	.word	0x200002a8

08005320 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b085      	sub	sp, #20
 8005324:	af02      	add	r7, sp, #8
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005332:	681c      	ldr	r4, [r3, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	2300      	movs	r3, #0
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2206      	movs	r2, #6
 8005340:	4903      	ldr	r1, [pc, #12]	@ (8005350 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	47a0      	blx	r4
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bd90      	pop	{r4, r7, pc}
 800534e:	bf00      	nop
 8005350:	200002a8 	.word	0x200002a8

08005354 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b087      	sub	sp, #28
 8005358:	af02      	add	r7, sp, #8
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	460b      	mov	r3, r1
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800536a:	681c      	ldr	r4, [r3, #0]
 800536c:	7afa      	ldrb	r2, [r7, #11]
 800536e:	2300      	movs	r3, #0
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	2207      	movs	r2, #7
 800537a:	4903      	ldr	r1, [pc, #12]	@ (8005388 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	47a0      	blx	r4
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	bd90      	pop	{r4, r7, pc}
 8005388:	200002a8 	.word	0x200002a8

0800538c <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b087      	sub	sp, #28
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	607b      	str	r3, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	72fb      	strb	r3, [r7, #11]
 800539a:	4613      	mov	r3, r2
 800539c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053a6:	681c      	ldr	r4, [r3, #0]
 80053a8:	7af9      	ldrb	r1, [r7, #11]
 80053aa:	7abb      	ldrb	r3, [r7, #10]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	9201      	str	r2, [sp, #4]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	460b      	mov	r3, r1
 80053b4:	2208      	movs	r2, #8
 80053b6:	4903      	ldr	r1, [pc, #12]	@ (80053c4 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	47a0      	blx	r4
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}
 80053c4:	200002a8 	.word	0x200002a8

080053c8 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
 80053d4:	4613      	mov	r3, r2
 80053d6:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053e0:	681c      	ldr	r4, [r3, #0]
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	78bb      	ldrb	r3, [r7, #2]
 80053e6:	2100      	movs	r1, #0
 80053e8:	9101      	str	r1, [sp, #4]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	2209      	movs	r2, #9
 80053f0:	4903      	ldr	r1, [pc, #12]	@ (8005400 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	47a0      	blx	r4
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd90      	pop	{r4, r7, pc}
 80053fe:	bf00      	nop
 8005400:	200002a8 	.word	0x200002a8

08005404 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8005404:	b590      	push	{r4, r7, lr}
 8005406:	b085      	sub	sp, #20
 8005408:	af02      	add	r7, sp, #8
 800540a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005414:	681c      	ldr	r4, [r3, #0]
 8005416:	2300      	movs	r3, #0
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	2300      	movs	r3, #0
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2300      	movs	r3, #0
 8005420:	220a      	movs	r2, #10
 8005422:	4903      	ldr	r1, [pc, #12]	@ (8005430 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	47a0      	blx	r4
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bd90      	pop	{r4, r7, pc}
 8005430:	200002a8 	.word	0x200002a8

08005434 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8005434:	b590      	push	{r4, r7, lr}
 8005436:	b085      	sub	sp, #20
 8005438:	af02      	add	r7, sp, #8
 800543a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005444:	681c      	ldr	r4, [r3, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	220b      	movs	r2, #11
 8005452:	4903      	ldr	r1, [pc, #12]	@ (8005460 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	47a0      	blx	r4
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bd90      	pop	{r4, r7, pc}
 8005460:	200002a8 	.word	0x200002a8

08005464 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b085      	sub	sp, #20
 8005468:	af02      	add	r7, sp, #8
 800546a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005474:	681c      	ldr	r4, [r3, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	2300      	movs	r3, #0
 8005480:	220c      	movs	r2, #12
 8005482:	4903      	ldr	r1, [pc, #12]	@ (8005490 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	47a0      	blx	r4
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}
 8005490:	200002a8 	.word	0x200002a8

08005494 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b085      	sub	sp, #20
 8005498:	af02      	add	r7, sp, #8
 800549a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054a4:	681c      	ldr	r4, [r3, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	2300      	movs	r3, #0
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	2300      	movs	r3, #0
 80054b0:	220d      	movs	r2, #13
 80054b2:	4903      	ldr	r1, [pc, #12]	@ (80054c0 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	47a0      	blx	r4
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd90      	pop	{r4, r7, pc}
 80054c0:	200002a8 	.word	0x200002a8

080054c4 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054d4:	681c      	ldr	r4, [r3, #0]
 80054d6:	2300      	movs	r3, #0
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	2300      	movs	r3, #0
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	2300      	movs	r3, #0
 80054e0:	220e      	movs	r2, #14
 80054e2:	4903      	ldr	r1, [pc, #12]	@ (80054f0 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	47a0      	blx	r4
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd90      	pop	{r4, r7, pc}
 80054f0:	200002a8 	.word	0x200002a8

080054f4 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005504:	681c      	ldr	r4, [r3, #0]
 8005506:	2300      	movs	r3, #0
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	220f      	movs	r2, #15
 8005512:	4903      	ldr	r1, [pc, #12]	@ (8005520 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	47a0      	blx	r4
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bd90      	pop	{r4, r7, pc}
 8005520:	200002a8 	.word	0x200002a8

08005524 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b085      	sub	sp, #20
 8005528:	af02      	add	r7, sp, #8
 800552a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005534:	681c      	ldr	r4, [r3, #0]
 8005536:	2300      	movs	r3, #0
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	2300      	movs	r3, #0
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	2300      	movs	r3, #0
 8005540:	2210      	movs	r2, #16
 8005542:	4903      	ldr	r1, [pc, #12]	@ (8005550 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	47a0      	blx	r4
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bd90      	pop	{r4, r7, pc}
 8005550:	200002a8 	.word	0x200002a8

08005554 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b085      	sub	sp, #20
 8005558:	af02      	add	r7, sp, #8
 800555a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005564:	681c      	ldr	r4, [r3, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	2300      	movs	r3, #0
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	2300      	movs	r3, #0
 8005570:	2211      	movs	r2, #17
 8005572:	4903      	ldr	r1, [pc, #12]	@ (8005580 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	47a0      	blx	r4
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bd90      	pop	{r4, r7, pc}
 8005580:	200002a8 	.word	0x200002a8

08005584 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8005584:	b590      	push	{r4, r7, lr}
 8005586:	b085      	sub	sp, #20
 8005588:	af02      	add	r7, sp, #8
 800558a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005594:	681c      	ldr	r4, [r3, #0]
 8005596:	2300      	movs	r3, #0
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	2300      	movs	r3, #0
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	2212      	movs	r2, #18
 80055a2:	4903      	ldr	r1, [pc, #12]	@ (80055b0 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	47a0      	blx	r4
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd90      	pop	{r4, r7, pc}
 80055b0:	200002a8 	.word	0x200002a8

080055b4 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a09      	ldr	r2, [pc, #36]	@ (80055ec <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80055c8:	4909      	ldr	r1, [pc, #36]	@ (80055f0 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a06      	ldr	r2, [pc, #24]	@ (80055f4 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 80055da:	4904      	ldr	r1, [pc, #16]	@ (80055ec <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80055e0:	4b04      	ldr	r3, [pc, #16]	@ (80055f4 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	200002c8 	.word	0x200002c8
 80055f0:	200002a8 	.word	0x200002a8
 80055f4:	200002d0 	.word	0x200002d0

080055f8 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b089      	sub	sp, #36	@ 0x24
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8005604:	4b17      	ldr	r3, [pc, #92]	@ (8005664 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
 800560e:	e020      	b.n	8005652 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005618:	681c      	ldr	r4, [r3, #0]
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	461a      	mov	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	1899      	adds	r1, r3, r2
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	461a      	mov	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	441a      	add	r2, r3
 800562e:	230a      	movs	r3, #10
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	2302      	movs	r3, #2
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8005638:	2300      	movs	r3, #0
 800563a:	75bb      	strb	r3, [r7, #22]
 800563c:	e003      	b.n	8005646 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800563e:	bf00      	nop
 8005640:	7dbb      	ldrb	r3, [r7, #22]
 8005642:	3301      	adds	r3, #1
 8005644:	75bb      	strb	r3, [r7, #22]
 8005646:	7dbb      	ldrb	r3, [r7, #22]
 8005648:	2b7c      	cmp	r3, #124	@ 0x7c
 800564a:	d9f8      	bls.n	800563e <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800564c:	7dfb      	ldrb	r3, [r7, #23]
 800564e:	3301      	adds	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d9db      	bls.n	8005610 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8005658:	bf00      	nop
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd90      	pop	{r4, r7, pc}
 8005662:	bf00      	nop
 8005664:	200002a5 	.word	0x200002a5

08005668 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800567a:	2301      	movs	r3, #1
 800567c:	74fb      	strb	r3, [r7, #19]
 800567e:	e016      	b.n	80056ae <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	461a      	mov	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	7f1b      	ldrb	r3, [r3, #28]
 800568a:	4413      	add	r3, r2
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	4413      	add	r3, r2
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	79fa      	ldrb	r2, [r7, #7]
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	3301      	adds	r3, #1
 80056ac:	74fb      	strb	r3, [r7, #19]
 80056ae:	7cfb      	ldrb	r3, [r7, #19]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d9e5      	bls.n	8005680 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80056b4:	697b      	ldr	r3, [r7, #20]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2118      	movs	r1, #24
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ea:	b292      	uxth	r2, r2
 80056ec:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	2b0e      	cmp	r3, #14
 80056f2:	f200 8099 	bhi.w	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 80056f6:	a201      	add	r2, pc, #4	@ (adr r2, 80056fc <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	08005739 	.word	0x08005739
 8005700:	08005749 	.word	0x08005749
 8005704:	08005759 	.word	0x08005759
 8005708:	08005769 	.word	0x08005769
 800570c:	08005779 	.word	0x08005779
 8005710:	08005789 	.word	0x08005789
 8005714:	08005799 	.word	0x08005799
 8005718:	080057a9 	.word	0x080057a9
 800571c:	080057b9 	.word	0x080057b9
 8005720:	080057c9 	.word	0x080057c9
 8005724:	080057d9 	.word	0x080057d9
 8005728:	080057e9 	.word	0x080057e9
 800572c:	080057f9 	.word	0x080057f9
 8005730:	08005809 	.word	0x08005809
 8005734:	08005819 	.word	0x08005819
      state = pL6470_StatusRegister->HiZ;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	73fb      	strb	r3, [r7, #15]
      break;
 8005746:	e06f      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005752:	b2db      	uxtb	r3, r3
 8005754:	73fb      	strb	r3, [r7, #15]
      break;
 8005756:	e067      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	73fb      	strb	r3, [r7, #15]
      break;
 8005766:	e05f      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	73fb      	strb	r3, [r7, #15]
      break;
 8005776:	e057      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005782:	b2db      	uxtb	r3, r3
 8005784:	73fb      	strb	r3, [r7, #15]
      break;
 8005786:	e04f      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8005792:	b2db      	uxtb	r3, r3
 8005794:	73fb      	strb	r3, [r7, #15]
      break;
 8005796:	e047      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	73fb      	strb	r3, [r7, #15]
      break;
 80057a6:	e03f      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	73fb      	strb	r3, [r7, #15]
      break;
 80057b6:	e037      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	73fb      	strb	r3, [r7, #15]
      break;
 80057c6:	e02f      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	73fb      	strb	r3, [r7, #15]
      break;
 80057d6:	e027      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	73fb      	strb	r3, [r7, #15]
      break;
 80057e6:	e01f      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	73fb      	strb	r3, [r7, #15]
      break;
 80057f6:	e017      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	73fb      	strb	r3, [r7, #15]
      break;
 8005806:	e00f      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005812:	b2db      	uxtb	r3, r3
 8005814:	73fb      	strb	r3, [r7, #15]
      break;
 8005816:	e007      	b.n	8005828 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	73fb      	strb	r3, [r7, #15]
      break;
 8005826:	bf00      	nop
  return state;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop

08005834 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	2b18      	cmp	r3, #24
 8005844:	d809      	bhi.n	800585a <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a19      	ldr	r1, [r3, #32]
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	3301      	adds	r3, #1
 8005858:	e000      	b.n	800585c <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
 8005876:	e01a      	b.n	80058ae <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	4413      	add	r3, r2
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	4413      	add	r3, r2
 800588c:	2200      	movs	r2, #0
 800588e:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	4413      	add	r3, r2
 8005898:	2200      	movs	r2, #0
 800589a:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	4413      	add	r3, r2
 80058a4:	2200      	movs	r2, #0
 80058a6:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	3301      	adds	r3, #1
 80058ac:	73fb      	strb	r3, [r7, #15]
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d9e1      	bls.n	8005878 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	603b      	str	r3, [r7, #0]
 80058ce:	4613      	mov	r3, r2
 80058d0:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	7f1b      	ldrb	r3, [r3, #28]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	4413      	add	r3, r2
 80058dc:	79fa      	ldrb	r2, [r7, #7]
 80058de:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	7f1b      	ldrb	r3, [r3, #28]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	7f1b      	ldrb	r3, [r3, #28]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	4413      	add	r3, r2
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	7f1b      	ldrb	r3, [r3, #28]
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4413      	add	r3, r2
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	60da      	str	r2, [r3, #12]
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8005928:	4b10      	ldr	r3, [pc, #64]	@ (800596c <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8005930:	4b0e      	ldr	r3, [pc, #56]	@ (800596c <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800594e:	681c      	ldr	r4, [r3, #0]
 8005950:	79fa      	ldrb	r2, [r7, #7]
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	47a0      	blx	r4
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	bd90      	pop	{r4, r7, pc}
 800596a:	bf00      	nop
 800596c:	200002a5 	.word	0x200002a5

08005970 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005980:	2300      	movs	r3, #0
 8005982:	75bb      	strb	r3, [r7, #22]
 8005984:	e013      	b.n	80059ae <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005986:	2300      	movs	r3, #0
 8005988:	75fb      	strb	r3, [r7, #23]
 800598a:	e00a      	b.n	80059a2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800598c:	7d7b      	ldrb	r3, [r7, #21]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	757a      	strb	r2, [r7, #21]
 8005992:	461a      	mov	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	3301      	adds	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d9f1      	bls.n	800598c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80059a8:	7dbb      	ldrb	r3, [r7, #22]
 80059aa:	3301      	adds	r3, #1
 80059ac:	75bb      	strb	r3, [r7, #22]
 80059ae:	7dbb      	ldrb	r3, [r7, #22]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d9e8      	bls.n	8005986 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	75fb      	strb	r3, [r7, #23]
 80059b8:	e1f1      	b.n	8005d9e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	440b      	add	r3, r1
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	4619      	mov	r1, r3
 80059ca:	460b      	mov	r3, r1
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	1a5b      	subs	r3, r3, r1
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	441a      	add	r2, r3
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	440b      	add	r3, r1
 80059da:	7b12      	ldrb	r2, [r2, #12]
 80059dc:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80059de:	7dfb      	ldrb	r3, [r7, #23]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	4413      	add	r3, r2
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b12      	cmp	r3, #18
 80059ea:	f200 81d5 	bhi.w	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 80059ee:	a201      	add	r2, pc, #4	@ (adr r2, 80059f4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005d99 	.word	0x08005d99
 80059f8:	08005a41 	.word	0x08005a41
 80059fc:	08005ac9 	.word	0x08005ac9
 8005a00:	08005af9 	.word	0x08005af9
 8005a04:	08005b61 	.word	0x08005b61
 8005a08:	08005b8f 	.word	0x08005b8f
 8005a0c:	08005bf7 	.word	0x08005bf7
 8005a10:	08005c33 	.word	0x08005c33
 8005a14:	08005c9b 	.word	0x08005c9b
 8005a18:	08005d37 	.word	0x08005d37
 8005a1c:	08005d99 	.word	0x08005d99
 8005a20:	08005d99 	.word	0x08005d99
 8005a24:	08005d99 	.word	0x08005d99
 8005a28:	08005d99 	.word	0x08005d99
 8005a2c:	08005d99 	.word	0x08005d99
 8005a30:	08005d99 	.word	0x08005d99
 8005a34:	08005d99 	.word	0x08005d99
 8005a38:	08005d99 	.word	0x08005d99
 8005a3c:	08005d99 	.word	0x08005d99
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	7819      	ldrb	r1, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a18      	ldr	r0, [r3, #32]
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	4413      	add	r3, r2
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4403      	add	r3, r0
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4403      	add	r3, r0
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a19      	ldr	r1, [r3, #32]
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	4413      	add	r3, r2
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	7b9b      	ldrb	r3, [r3, #14]
 8005a88:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	75bb      	strb	r3, [r7, #22]
 8005a8e:	e016      	b.n	8005abe <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	4413      	add	r3, r2
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	7d39      	ldrb	r1, [r7, #20]
 8005a9c:	7dbb      	ldrb	r3, [r7, #22]
 8005a9e:	1acb      	subs	r3, r1, r3
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	fa22 f103 	lsr.w	r1, r2, r3
 8005aa6:	7dbb      	ldrb	r3, [r7, #22]
 8005aa8:	005a      	lsls	r2, r3, #1
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	4413      	add	r3, r2
 8005aae:	461a      	mov	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	b2ca      	uxtb	r2, r1
 8005ab6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005ab8:	7dbb      	ldrb	r3, [r7, #22]
 8005aba:	3301      	adds	r3, #1
 8005abc:	75bb      	strb	r3, [r7, #22]
 8005abe:	7d3a      	ldrb	r2, [r7, #20]
 8005ac0:	7dbb      	ldrb	r3, [r7, #22]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d2e4      	bcs.n	8005a90 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8005ac6:	e167      	b.n	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	7819      	ldrb	r1, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a18      	ldr	r0, [r3, #32]
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4413      	add	r3, r2
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4403      	add	r3, r0
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4403      	add	r3, r0
 8005af0:	430a      	orrs	r2, r1
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
      break;
 8005af6:	e14f      	b.n	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	7819      	ldrb	r1, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	4403      	add	r3, r0
 8005b16:	7a1a      	ldrb	r2, [r3, #8]
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	4403      	add	r3, r0
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b24:	2301      	movs	r3, #1
 8005b26:	75bb      	strb	r3, [r7, #22]
 8005b28:	e016      	b.n	8005b58 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4413      	add	r3, r2
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	7dbb      	ldrb	r3, [r7, #22]
 8005b36:	f1c3 0303 	rsb	r3, r3, #3
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	fa22 f103 	lsr.w	r1, r2, r3
 8005b40:	7dbb      	ldrb	r3, [r7, #22]
 8005b42:	005a      	lsls	r2, r3, #1
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	4413      	add	r3, r2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b2ca      	uxtb	r2, r1
 8005b50:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b52:	7dbb      	ldrb	r3, [r7, #22]
 8005b54:	3301      	adds	r3, #1
 8005b56:	75bb      	strb	r3, [r7, #22]
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d9e5      	bls.n	8005b2a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8005b5e:	e11b      	b.n	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	7819      	ldrb	r1, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	4413      	add	r3, r2
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	4403      	add	r3, r0
 8005b7e:	7a1a      	ldrb	r2, [r3, #8]
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	4403      	add	r3, r0
 8005b86:	430a      	orrs	r2, r1
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
      break;
 8005b8c:	e104      	b.n	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	7819      	ldrb	r1, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4413      	add	r3, r2
 8005baa:	4403      	add	r3, r0
 8005bac:	7a1a      	ldrb	r2, [r3, #8]
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4403      	add	r3, r0
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75bb      	strb	r3, [r7, #22]
 8005bbe:	e016      	b.n	8005bee <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	7dbb      	ldrb	r3, [r7, #22]
 8005bcc:	f1c3 0303 	rsb	r3, r3, #3
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	fa22 f103 	lsr.w	r1, r2, r3
 8005bd6:	7dbb      	ldrb	r3, [r7, #22]
 8005bd8:	005a      	lsls	r2, r3, #1
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	4413      	add	r3, r2
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4413      	add	r3, r2
 8005be4:	b2ca      	uxtb	r2, r1
 8005be6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005be8:	7dbb      	ldrb	r3, [r7, #22]
 8005bea:	3301      	adds	r3, #1
 8005bec:	75bb      	strb	r3, [r7, #22]
 8005bee:	7dbb      	ldrb	r3, [r7, #22]
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d9e5      	bls.n	8005bc0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005bf4:	e0d0      	b.n	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75bb      	strb	r3, [r7, #22]
 8005bfa:	e016      	b.n	8005c2a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	4413      	add	r3, r2
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	7dbb      	ldrb	r3, [r7, #22]
 8005c08:	f1c3 0303 	rsb	r3, r3, #3
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	fa22 f103 	lsr.w	r1, r2, r3
 8005c12:	7dbb      	ldrb	r3, [r7, #22]
 8005c14:	005a      	lsls	r2, r3, #1
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	4413      	add	r3, r2
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4413      	add	r3, r2
 8005c20:	b2ca      	uxtb	r2, r1
 8005c22:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c24:	7dbb      	ldrb	r3, [r7, #22]
 8005c26:	3301      	adds	r3, #1
 8005c28:	75bb      	strb	r3, [r7, #22]
 8005c2a:	7dbb      	ldrb	r3, [r7, #22]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d9e5      	bls.n	8005bfc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005c30:	e0b2      	b.n	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	7819      	ldrb	r1, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	4413      	add	r3, r2
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4403      	add	r3, r0
 8005c50:	7a1a      	ldrb	r2, [r3, #8]
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4403      	add	r3, r0
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c5e:	2301      	movs	r3, #1
 8005c60:	75bb      	strb	r3, [r7, #22]
 8005c62:	e016      	b.n	8005c92 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	7dbb      	ldrb	r3, [r7, #22]
 8005c70:	f1c3 0303 	rsb	r3, r3, #3
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	fa22 f103 	lsr.w	r1, r2, r3
 8005c7a:	7dbb      	ldrb	r3, [r7, #22]
 8005c7c:	005a      	lsls	r2, r3, #1
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	4413      	add	r3, r2
 8005c82:	461a      	mov	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	b2ca      	uxtb	r2, r1
 8005c8a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c8c:	7dbb      	ldrb	r3, [r7, #22]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	75bb      	strb	r3, [r7, #22]
 8005c92:	7dbb      	ldrb	r3, [r7, #22]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d9e5      	bls.n	8005c64 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005c98:	e07e      	b.n	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	b259      	sxtb	r1, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	4413      	add	r3, r2
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	4403      	add	r3, r0
 8005cba:	791b      	ldrb	r3, [r3, #4]
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	b25b      	sxtb	r3, r3
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	b259      	sxtb	r1, r3
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4413      	add	r3, r2
 8005cca:	b2ca      	uxtb	r2, r1
 8005ccc:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	7819      	ldrb	r1, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	4403      	add	r3, r0
 8005cec:	7a1a      	ldrb	r2, [r3, #8]
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4403      	add	r3, r0
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	75bb      	strb	r3, [r7, #22]
 8005cfe:	e016      	b.n	8005d2e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4413      	add	r3, r2
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	7dbb      	ldrb	r3, [r7, #22]
 8005d0c:	f1c3 0303 	rsb	r3, r3, #3
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	fa22 f103 	lsr.w	r1, r2, r3
 8005d16:	7dbb      	ldrb	r3, [r7, #22]
 8005d18:	005a      	lsls	r2, r3, #1
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	461a      	mov	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4413      	add	r3, r2
 8005d24:	b2ca      	uxtb	r2, r1
 8005d26:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005d28:	7dbb      	ldrb	r3, [r7, #22]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	75bb      	strb	r3, [r7, #22]
 8005d2e:	7dbb      	ldrb	r3, [r7, #22]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d9e5      	bls.n	8005d00 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005d34:	e030      	b.n	8005d98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b259      	sxtb	r1, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	4403      	add	r3, r0
 8005d56:	791b      	ldrb	r3, [r3, #4]
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	b25b      	sxtb	r3, r3
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	b259      	sxtb	r1, r3
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	b2ca      	uxtb	r2, r1
 8005d68:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4413      	add	r3, r2
 8005d70:	7819      	ldrb	r1, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4413      	add	r3, r2
 8005d86:	4403      	add	r3, r0
 8005d88:	7a1a      	ldrb	r2, [r3, #8]
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4403      	add	r3, r0
 8005d90:	430a      	orrs	r2, r1
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
      break;
 8005d96:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	f67f ae0a 	bls.w	80059ba <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005dc0:	edd7 7a00 	vldr	s15, [r7]
 8005dc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dcc:	db1e      	blt.n	8005e0c <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005dce:	edd7 7a00 	vldr	s15, [r7]
 8005dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dd6:	ee17 2a90 	vmov	r2, s15
 8005dda:	edd7 7a00 	vldr	s15, [r7]
 8005dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de6:	ed97 7a00 	vldr	s14, [r7]
 8005dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfa:	bf4c      	ite	mi
 8005dfc:	2301      	movmi	r3, #1
 8005dfe:	2300      	movpl	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f083 0301 	eor.w	r3, r3, #1
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	4413      	add	r3, r2
 8005e0a:	e01a      	b.n	8005e42 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005e0c:	edd7 7a00 	vldr	s15, [r7]
 8005e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e14:	ee17 2a90 	vmov	r2, s15
 8005e18:	edd7 7a00 	vldr	s15, [r7]
 8005e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e24:	ed97 7a00 	vldr	s14, [r7]
 8005e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e2c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8005e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e38:	d501      	bpl.n	8005e3e <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	1ad3      	subs	r3, r2, r3
        }
    }
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b086      	sub	sp, #24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6918      	ldr	r0, [r3, #16]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8a9b      	ldrh	r3, [r3, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	4619      	mov	r1, r3
 8005e68:	f008 f972 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6998      	ldr	r0, [r3, #24]
 8005e70:	88fa      	ldrh	r2, [r7, #6]
 8005e72:	2364      	movs	r3, #100	@ 0x64
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	f009 f99a 	bl	800f1ae <HAL_SPI_Receive>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6918      	ldr	r0, [r3, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8a9b      	ldrh	r3, [r3, #20]
 8005e86:	2201      	movs	r2, #1
 8005e88:	4619      	mov	r1, r3
 8005e8a:	f008 f961 	bl	800e150 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e98:	2300      	movs	r3, #0
    }
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6918      	ldr	r0, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8a9b      	ldrh	r3, [r3, #20]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f008 f948 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6998      	ldr	r0, [r3, #24]
 8005ec4:	88fa      	ldrh	r2, [r7, #6]
 8005ec6:	2364      	movs	r3, #100	@ 0x64
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	f009 f834 	bl	800ef36 <HAL_SPI_Transmit>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6918      	ldr	r0, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8a9b      	ldrh	r3, [r3, #20]
 8005eda:	2201      	movs	r2, #1
 8005edc:	4619      	mov	r1, r3
 8005ede:	f008 f937 	bl	800e150 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005eec:	2300      	movs	r3, #0
    }
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af02      	add	r7, sp, #8
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
 8005f02:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6918      	ldr	r0, [r3, #16]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8a9b      	ldrh	r3, [r3, #20]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f008 f91e 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6998      	ldr	r0, [r3, #24]
 8005f18:	887b      	ldrh	r3, [r7, #2]
 8005f1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f1e:	9200      	str	r2, [sp, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	f009 fa54 	bl	800f3d0 <HAL_SPI_TransmitReceive>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6918      	ldr	r0, [r3, #16]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8a9b      	ldrh	r3, [r3, #20]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f008 f907 	bl	800e150 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e008      	b.n	8005f58 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6918      	ldr	r0, [r3, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8a9b      	ldrh	r3, [r3, #20]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4619      	mov	r1, r3
 8005f52:	f008 f8fd 	bl	800e150 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005f56:	2300      	movs	r3, #0
    }
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005f76:	681c      	ldr	r4, [r3, #0]
 8005f78:	887b      	ldrh	r3, [r7, #2]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	47a0      	blx	r4
    }
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd90      	pop	{r4, r7, pc}

08005f8a <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
 8005fa4:	4603      	mov	r3, r0
    }
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	4603      	mov	r3, r0
    }
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b082      	sub	sp, #8
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
 8005fec:	4603      	mov	r3, r0
    }
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005ff6:	b590      	push	{r4, r7, lr}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006006:	681c      	ldr	r4, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2100      	movs	r1, #0
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
 8006018:	4603      	mov	r3, r0
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	47a0      	blx	r4
 8006020:	4603      	mov	r3, r0
    }
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	bd90      	pop	{r4, r7, pc}

0800602a <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 800602a:	b590      	push	{r4, r7, lr}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800603a:	681c      	ldr	r4, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2102      	movs	r1, #2
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
 800604c:	4603      	mov	r3, r0
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	47a0      	blx	r4
 8006054:	4603      	mov	r3, r0
    }
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}

0800605e <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 800605e:	b5b0      	push	{r4, r5, r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800606e:	681c      	ldr	r4, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006078:	681d      	ldr	r5, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2103      	movs	r1, #3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
 800608a:	4603      	mov	r3, r0
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	47a8      	blx	r5
 8006092:	eef0 7a40 	vmov.f32	s15, s0
 8006096:	eeb0 0a67 	vmov.f32	s0, s15
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	47a0      	blx	r4
 800609e:	4603      	mov	r3, r0
    }
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bdb0      	pop	{r4, r5, r7, pc}

080060a8 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 80060a8:	b5b0      	push	{r4, r5, r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060b8:	681c      	ldr	r4, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060c2:	681d      	ldr	r5, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2106      	movs	r1, #6
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
 80060d4:	4603      	mov	r3, r0
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	47a8      	blx	r5
 80060de:	eef0 7a40 	vmov.f32	s15, s0
 80060e2:	eeb0 0a67 	vmov.f32	s0, s15
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	47a0      	blx	r4
 80060ea:	4603      	mov	r3, r0
    }
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bdb0      	pop	{r4, r5, r7, pc}

080060f4 <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 80060f4:	b5b0      	push	{r4, r5, r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006104:	681c      	ldr	r4, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800610e:	681d      	ldr	r5, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2107      	movs	r1, #7
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
 8006120:	4603      	mov	r3, r0
 8006122:	b29b      	uxth	r3, r3
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	47a8      	blx	r5
 800612a:	eef0 7a40 	vmov.f32	s15, s0
 800612e:	eeb0 0a67 	vmov.f32	s0, s15
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	47a0      	blx	r4
 8006136:	4603      	mov	r3, r0
    }
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bdb0      	pop	{r4, r5, r7, pc}

08006140 <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8006140:	b5b0      	push	{r4, r5, r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006150:	681c      	ldr	r4, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800615a:	681d      	ldr	r5, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2104      	movs	r1, #4
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
 800616c:	4603      	mov	r3, r0
 800616e:	b29b      	uxth	r3, r3
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	47a8      	blx	r5
 8006176:	eef0 7a40 	vmov.f32	s15, s0
 800617a:	eeb0 0a67 	vmov.f32	s0, s15
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	47a0      	blx	r4
 8006182:	4603      	mov	r3, r0
    }
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bdb0      	pop	{r4, r5, r7, pc}

0800618c <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 800618c:	b5b0      	push	{r4, r5, r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800619c:	681c      	ldr	r4, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80061a6:	681d      	ldr	r5, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2105      	movs	r1, #5
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
 80061b8:	4603      	mov	r3, r0
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	47a8      	blx	r5
 80061c2:	eef0 7a40 	vmov.f32	s15, s0
 80061c6:	eeb0 0a67 	vmov.f32	s0, s15
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	47a0      	blx	r4
 80061ce:	4603      	mov	r3, r0
    }
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bdb0      	pop	{r4, r5, r7, pc}

080061d8 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2104      	movs	r1, #4
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 80061fa:	2300      	movs	r3, #0
    }
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	b2d1      	uxtb	r1, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	4798      	blx	r3
    }
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	4798      	blx	r3
    }
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 800624a:	b590      	push	{r4, r7, lr}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800625a:	681c      	ldr	r4, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2100      	movs	r1, #0
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	2102      	movs	r1, #2
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	47a0      	blx	r4
    }
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}

0800627e <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 800627e:	b590      	push	{r4, r7, lr}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006290:	681c      	ldr	r4, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	2102      	movs	r1, #2
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	47a0      	blx	r4
    }
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd90      	pop	{r4, r7, pc}

080062b4 <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80062c6:	681c      	ldr	r4, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	ee07 2a90 	vmov	s15, r2
 80062d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062dc:	eeb0 0a67 	vmov.f32	s0, s15
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
 80062e4:	4603      	mov	r3, r0
 80062e6:	461a      	mov	r2, r3
 80062e8:	2106      	movs	r1, #6
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	47a0      	blx	r4
        return true;
 80062ee:	2301      	movs	r3, #1
    }
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 80062f8:	b590      	push	{r4, r7, lr}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800630a:	681c      	ldr	r4, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	ee07 2a90 	vmov	s15, r2
 800631c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006320:	eeb0 0a67 	vmov.f32	s0, s15
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
 800632c:	2107      	movs	r1, #7
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	47a0      	blx	r4
        return true;
 8006332:	2301      	movs	r3, #1
    }
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	bd90      	pop	{r4, r7, pc}

0800633c <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800634e:	681c      	ldr	r4, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	ee07 2a90 	vmov	s15, r2
 8006360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006364:	eeb0 0a67 	vmov.f32	s0, s15
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	4798      	blx	r3
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	2104      	movs	r1, #4
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	47a0      	blx	r4
        return true;
 8006376:	2301      	movs	r3, #1
    }
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bd90      	pop	{r4, r7, pc}

08006380 <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006392:	681c      	ldr	r4, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	ee07 2a90 	vmov	s15, r2
 80063a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a8:	eeb0 0a67 	vmov.f32	s0, s15
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	2105      	movs	r1, #5
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	47a0      	blx	r4
        return true;
 80063ba:	2301      	movs	r3, #1
    }
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd90      	pop	{r4, r7, pc}

080063c4 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	2b07      	cmp	r3, #7
 80063d4:	d901      	bls.n	80063da <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80063d6:	2300      	movs	r3, #0
 80063d8:	e00f      	b.n	80063fa <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3380      	adds	r3, #128	@ 0x80
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	2115      	movs	r1, #21
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
        return true;
 80063f8:	2301      	movs	r3, #1
    }
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 8006402:	b590      	push	{r4, r7, lr}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8006414:	681c      	ldr	r4, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
 8006426:	4603      	mov	r3, r0
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	47a0      	blx	r4
    }
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bd90      	pop	{r4, r7, pc}

08006436 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8006436:	b5b0      	push	{r4, r5, r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	4613      	mov	r3, r2
 8006442:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 800644c:	681c      	ldr	r4, [r3, #0]
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 8006454:	2501      	movs	r5, #1
 8006456:	e000      	b.n	800645a <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 8006458:	2500      	movs	r5, #0
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	4798      	blx	r3
 800646a:	4603      	mov	r3, r0
 800646c:	461a      	mov	r2, r3
 800646e:	4629      	mov	r1, r5
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	47a0      	blx	r4
    }
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bdb0      	pop	{r4, r5, r7, pc}

0800647c <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
    }
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
    }
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80064b8:	b5b0      	push	{r4, r5, r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	607b      	str	r3, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	72fb      	strb	r3, [r7, #11]
 80064c6:	4613      	mov	r3, r2
 80064c8:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80064d2:	681c      	ldr	r4, [r3, #0]
 80064d4:	7abb      	ldrb	r3, [r7, #10]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80064da:	2501      	movs	r5, #1
 80064dc:	e000      	b.n	80064e0 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80064de:	2500      	movs	r5, #0
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	ee07 2a90 	vmov	s15, r2
 80064f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f4:	eeb0 0a67 	vmov.f32	s0, s15
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	4798      	blx	r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	7af9      	ldrb	r1, [r7, #11]
 8006500:	462a      	mov	r2, r5
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	47a0      	blx	r4
    }
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bdb0      	pop	{r4, r5, r7, pc}

0800650e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800650e:	b5b0      	push	{r4, r5, r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006522:	681c      	ldr	r4, [r3, #0]
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 800652a:	2501      	movs	r5, #1
 800652c:	e000      	b.n	8006530 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 800652e:	2500      	movs	r5, #0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2106      	movs	r1, #6
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
 8006540:	4603      	mov	r3, r0
 8006542:	461a      	mov	r2, r3
 8006544:	4629      	mov	r1, r5
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	47a0      	blx	r4
    }
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bdb0      	pop	{r4, r5, r7, pc}

08006552 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8006552:	b5b0      	push	{r4, r5, r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	460b      	mov	r3, r1
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006568:	681c      	ldr	r4, [r3, #0]
 800656a:	7afb      	ldrb	r3, [r7, #11]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 8006570:	2501      	movs	r5, #1
 8006572:	e000      	b.n	8006576 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 8006574:	2500      	movs	r5, #0
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	ee07 2a90 	vmov	s15, r2
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eeb0 0a67 	vmov.f32	s0, s15
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	4798      	blx	r3
 8006592:	4603      	mov	r3, r0
 8006594:	461a      	mov	r2, r3
 8006596:	4629      	mov	r1, r5
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	47a0      	blx	r4
    }
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bdb0      	pop	{r4, r5, r7, pc}

080065a4 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	460b      	mov	r3, r1
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	7afa      	ldrb	r2, [r7, #11]
 80065be:	2a01      	cmp	r2, #1
 80065c0:	d101      	bne.n	80065c6 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 80065c2:	2101      	movs	r1, #1
 80065c4:	e000      	b.n	80065c8 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 80065c6:	2100      	movs	r1, #0
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	4798      	blx	r3
    }
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
    }
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
    }
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
    }
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
    }
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8006656:	bf00      	nop
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2101      	movs	r1, #1
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	bf0c      	ite	eq
 800666e:	2301      	moveq	r3, #1
 8006670:	2300      	movne	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1ef      	bne.n	8006658 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3380      	adds	r3, #128	@ 0x80
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	2a01      	cmp	r2, #1
 80066a8:	d101      	bne.n	80066ae <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80066aa:	2201      	movs	r2, #1
 80066ac:	e000      	b.n	80066b0 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80066ae:	2200      	movs	r2, #0
 80066b0:	4611      	mov	r1, r2
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
    }
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
 80066ca:	4613      	mov	r3, r2
 80066cc:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	78ba      	ldrb	r2, [r7, #2]
 80066da:	2a01      	cmp	r2, #1
 80066dc:	d101      	bne.n	80066e2 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80066de:	2201      	movs	r2, #1
 80066e0:	e000      	b.n	80066e4 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80066e2:	2200      	movs	r2, #0
 80066e4:	78f9      	ldrb	r1, [r7, #3]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
    }
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
    }
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	4611      	mov	r1, r2
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2100      	movs	r1, #0
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2102      	movs	r1, #2
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2103      	movs	r1, #3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2203      	movs	r2, #3
 80067d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2106      	movs	r1, #6
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2204      	movs	r2, #4
 80067f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2107      	movs	r1, #7
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2205      	movs	r2, #5
 8006820:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2104      	movs	r1, #4
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2206      	movs	r2, #6
 8006848:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800684c:	bf00      	nop
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2105      	movs	r1, #5
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2207      	movs	r2, #7
 8006870:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8006884:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 800688c:	4b09      	ldr	r3, [pc, #36]	@ (80068b4 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 800688e:	2201      	movs	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4906      	ldr	r1, [pc, #24]	@ (80068b8 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2208      	movs	r2, #8
 80068a6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000271 	.word	0x20000271
 80068b8:	20000274 	.word	0x20000274

080068bc <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	b2d1      	uxtb	r1, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	2102      	movs	r1, #2
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2209      	movs	r2, #9
 8006930:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800694e:	681c      	ldr	r4, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
 8006960:	4603      	mov	r3, r0
 8006962:	461a      	mov	r2, r3
 8006964:	2102      	movs	r1, #2
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	bd90      	pop	{r4, r7, pc}

0800697a <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 800697a:	b590      	push	{r4, r7, lr}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800698c:	681c      	ldr	r4, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	ee07 2a90 	vmov	s15, r2
 800699e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a2:	eeb0 0a67 	vmov.f32	s0, s15
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	461a      	mov	r2, r3
 80069ae:	2103      	movs	r1, #3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd90      	pop	{r4, r7, pc}

080069c4 <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 80069c4:	b590      	push	{r4, r7, lr}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80069d6:	681c      	ldr	r4, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	ee07 2a90 	vmov	s15, r2
 80069e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ec:	eeb0 0a67 	vmov.f32	s0, s15
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
 80069f4:	4603      	mov	r3, r0
 80069f6:	461a      	mov	r2, r3
 80069f8:	2106      	movs	r1, #6
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd90      	pop	{r4, r7, pc}

08006a0e <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8006a0e:	b590      	push	{r4, r7, lr}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006a20:	681c      	ldr	r4, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	ee07 2a90 	vmov	s15, r2
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	eeb0 0a67 	vmov.f32	s0, s15
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	461a      	mov	r2, r3
 8006a42:	2107      	movs	r1, #7
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd90      	pop	{r4, r7, pc}

08006a58 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006a6a:	681c      	ldr	r4, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	ee07 2a90 	vmov	s15, r2
 8006a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a80:	eeb0 0a67 	vmov.f32	s0, s15
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2104      	movs	r1, #4
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd90      	pop	{r4, r7, pc}

08006aa2 <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8006aa2:	b590      	push	{r4, r7, lr}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006ab4:	681c      	ldr	r4, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	ee07 2a90 	vmov	s15, r2
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eeb0 0a67 	vmov.f32	s0, s15
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2105      	movs	r1, #5
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd90      	pop	{r4, r7, pc}

08006aec <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8006aec:	b590      	push	{r4, r7, lr}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8006afe:	681c      	ldr	r4, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
 8006b10:	4603      	mov	r3, r0
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd90      	pop	{r4, r7, pc}

08006b28 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006b28:	b5b0      	push	{r4, r5, r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8006b3e:	681c      	ldr	r4, [r3, #0]
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8006b46:	2501      	movs	r5, #1
 8006b48:	e000      	b.n	8006b4c <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006b4a:	2500      	movs	r5, #0
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	4798      	blx	r3
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4629      	mov	r1, r5
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bdb0      	pop	{r4, r5, r7, pc}

08006b76 <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006bc2:	b5b0      	push	{r4, r5, r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	72fb      	strb	r3, [r7, #11]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006bdc:	681c      	ldr	r4, [r3, #0]
 8006bde:	7abb      	ldrb	r3, [r7, #10]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006be4:	2501      	movs	r5, #1
 8006be6:	e000      	b.n	8006bea <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006be8:	2500      	movs	r5, #0
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	ee07 2a90 	vmov	s15, r2
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	4798      	blx	r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	7af9      	ldrb	r1, [r7, #11]
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bdb0      	pop	{r4, r5, r7, pc}

08006c20 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006c20:	b5b0      	push	{r4, r5, r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006c34:	681c      	ldr	r4, [r3, #0]
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006c3c:	2501      	movs	r5, #1
 8006c3e:	e000      	b.n	8006c42 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006c40:	2500      	movs	r5, #0
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2106      	movs	r1, #6
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
 8006c52:	4603      	mov	r3, r0
 8006c54:	461a      	mov	r2, r3
 8006c56:	4629      	mov	r1, r5
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bdb0      	pop	{r4, r5, r7, pc}

08006c6c <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006c6c:	b5b0      	push	{r4, r5, r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	460b      	mov	r3, r1
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006c82:	681c      	ldr	r4, [r3, #0]
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006c8a:	2501      	movs	r5, #1
 8006c8c:	e000      	b.n	8006c90 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006c8e:	2500      	movs	r5, #0
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	ee07 2a90 	vmov	s15, r2
 8006ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	4798      	blx	r3
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bdb0      	pop	{r4, r5, r7, pc}

08006cc6 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	7afa      	ldrb	r2, [r7, #11]
 8006ce0:	2a01      	cmp	r2, #1
 8006ce2:	d101      	bne.n	8006ce8 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	e000      	b.n	8006cea <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006ce8:	2100      	movs	r1, #0
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	2a01      	cmp	r2, #1
 8006db2:	d101      	bne.n	8006db8 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006db4:	2201      	movs	r2, #1
 8006db6:	e000      	b.n	8006dba <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006db8:	2200      	movs	r2, #0
 8006dba:	4611      	mov	r1, r2
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	70fb      	strb	r3, [r7, #3]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	78ba      	ldrb	r2, [r7, #2]
 8006dec:	2a01      	cmp	r2, #1
 8006dee:	d101      	bne.n	8006df4 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006df0:	2201      	movs	r2, #1
 8006df2:	e000      	b.n	8006df6 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006df4:	2200      	movs	r2, #0
 8006df6:	78f9      	ldrb	r1, [r7, #3]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
 8006e48:	4603      	mov	r3, r0
    }
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006e6c:	b5b0      	push	{r4, r5, r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	2b07      	cmp	r3, #7
 8006e80:	f200 80fe 	bhi.w	8007080 <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006e84:	a201      	add	r2, pc, #4	@ (adr r2, 8006e8c <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006ead 	.word	0x08006ead
 8006e90:	08006ed9 	.word	0x08006ed9
 8006e94:	08006f07 	.word	0x08006f07
 8006e98:	08006f4b 	.word	0x08006f4b
 8006e9c:	08006f91 	.word	0x08006f91
 8006ea0:	08006fd7 	.word	0x08006fd7
 8006ea4:	0800701d 	.word	0x0800701d
 8006ea8:	08007063 	.word	0x08007063
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006eb4:	681c      	ldr	r4, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6a12      	ldr	r2, [r2, #32]
 8006ec4:	7b92      	ldrb	r2, [r2, #14]
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
 8006ecc:	4603      	mov	r3, r0
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	47a0      	blx	r4
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	e0d4      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006ee0:	681c      	ldr	r4, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6a12      	ldr	r2, [r2, #32]
 8006ef0:	3228      	adds	r2, #40	@ 0x28
 8006ef2:	7b92      	ldrb	r2, [r2, #14]
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	47a0      	blx	r4
 8006f02:	4603      	mov	r3, r0
 8006f04:	e0bd      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f0e:	681c      	ldr	r4, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006f18:	681d      	ldr	r5, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6a12      	ldr	r2, [r2, #32]
 8006f28:	323c      	adds	r2, #60	@ 0x3c
 8006f2a:	7b92      	ldrb	r2, [r2, #14]
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
 8006f32:	4603      	mov	r3, r0
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	47a8      	blx	r5
 8006f3a:	eef0 7a40 	vmov.f32	s15, s0
 8006f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	47a0      	blx	r4
 8006f46:	4603      	mov	r3, r0
 8006f48:	e09b      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f52:	681c      	ldr	r4, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f5c:	681d      	ldr	r5, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6a12      	ldr	r2, [r2, #32]
 8006f6c:	3278      	adds	r2, #120	@ 0x78
 8006f6e:	7b92      	ldrb	r2, [r2, #14]
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	47a8      	blx	r5
 8006f80:	eef0 7a40 	vmov.f32	s15, s0
 8006f84:	eeb0 0a67 	vmov.f32	s0, s15
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	47a0      	blx	r4
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	e078      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f98:	681c      	ldr	r4, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006fa2:	681d      	ldr	r5, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6a12      	ldr	r2, [r2, #32]
 8006fb2:	328c      	adds	r2, #140	@ 0x8c
 8006fb4:	7b92      	ldrb	r2, [r2, #14]
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	47a8      	blx	r5
 8006fc6:	eef0 7a40 	vmov.f32	s15, s0
 8006fca:	eeb0 0a67 	vmov.f32	s0, s15
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	47a0      	blx	r4
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	e055      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fde:	681c      	ldr	r4, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006fe8:	681d      	ldr	r5, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6a12      	ldr	r2, [r2, #32]
 8006ff8:	3250      	adds	r2, #80	@ 0x50
 8006ffa:	7b92      	ldrb	r2, [r2, #14]
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	b29b      	uxth	r3, r3
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	47a8      	blx	r5
 800700c:	eef0 7a40 	vmov.f32	s15, s0
 8007010:	eeb0 0a67 	vmov.f32	s0, s15
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	47a0      	blx	r4
 8007018:	4603      	mov	r3, r0
 800701a:	e032      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007024:	681c      	ldr	r4, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800702e:	681d      	ldr	r5, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6a12      	ldr	r2, [r2, #32]
 800703e:	3264      	adds	r2, #100	@ 0x64
 8007040:	7b92      	ldrb	r2, [r2, #14]
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
 8007048:	4603      	mov	r3, r0
 800704a:	b29b      	uxth	r3, r3
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	47a8      	blx	r5
 8007052:	eef0 7a40 	vmov.f32	s15, s0
 8007056:	eeb0 0a67 	vmov.f32	s0, s15
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	47a0      	blx	r4
 800705e:	4603      	mov	r3, r0
 8007060:	e00f      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2104      	movs	r1, #4
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
 8007072:	4603      	mov	r3, r0
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8007078:	2301      	movs	r3, #1
 800707a:	e002      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 800707c:	2300      	movs	r3, #0
 800707e:	e000      	b.n	8007082 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8007080:	2300      	movs	r3, #0
    }
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bdb0      	pop	{r4, r5, r7, pc}
 800708a:	bf00      	nop

0800708c <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6898      	ldr	r0, [r3, #8]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	899b      	ldrh	r3, [r3, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	4619      	mov	r1, r3
 80070a0:	f007 f856 	bl	800e150 <HAL_GPIO_WritePin>
    }
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070bc:	d303      	bcc.n	80070c6 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 80070c4:	e000      	b.n	80070c8 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 80070c6:	683b      	ldr	r3, [r7, #0]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db05      	blt.n	80070f0 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070ea:	da01      	bge.n	80070f0 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	e00c      	b.n	800710a <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 80070f6:	db06      	blt.n	8007106 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	da03      	bge.n	8007106 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8007104:	e001      	b.n	800710a <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 8007106:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
	...

08007118 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007144 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 8007130:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007134:	eeb0 0a67 	vmov.f32	s0, s15
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	3c74242a 	.word	0x3c74242a

08007148 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8007154:	edd7 7a00 	vldr	s15, [r7]
 8007158:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800718c <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 800715c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007164:	d80a      	bhi.n	800717c <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8007166:	ed97 7a00 	vldr	s14, [r7]
 800716a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007190 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 800716e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007176:	ee17 3a90 	vmov	r3, s15
 800717a:	e000      	b.n	800717e <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	4674241b 	.word	0x4674241b
 8007190:	3c74242a 	.word	0x3c74242a

08007194 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 80071a0:	887b      	ldrh	r3, [r7, #2]
 80071a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a6:	d209      	bcs.n	80071bc <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 80071a8:	887b      	ldrh	r3, [r7, #2]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071b2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80071d0 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 80071b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071ba:	e001      	b.n	80071c0 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80071bc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80071d4 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 80071c0:	eeb0 0a67 	vmov.f32	s0, s15
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	4168d4fe 	.word	0x4168d4fe
 80071d4:	00000000 	.word	0x00000000

080071d8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 80071e4:	edd7 7a00 	vldr	s15, [r7]
 80071e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800721c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 80071ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f4:	d80b      	bhi.n	800720e <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80071f6:	ed97 7a00 	vldr	s14, [r7]
 80071fa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007220 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 80071fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007206:	ee17 3a90 	vmov	r3, s15
 800720a:	b29b      	uxth	r3, r3
 800720c:	e000      	b.n	8007210 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	4768c671 	.word	0x4768c671
 8007220:	4168d4fe 	.word	0x4168d4fe

08007224 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 8007230:	887b      	ldrh	r3, [r7, #2]
 8007232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007236:	d209      	bcs.n	800724c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8007238:	887b      	ldrh	r3, [r7, #2]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007242:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007260 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 8007246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800724a:	e001      	b.n	8007250 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800724c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007264 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 8007250:	eeb0 0a67 	vmov.f32	s0, s15
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	4168d4fe 	.word	0x4168d4fe
 8007264:	00000000 	.word	0x00000000

08007268 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8007274:	edd7 7a00 	vldr	s15, [r7]
 8007278:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80072ac <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 800727c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007284:	d80b      	bhi.n	800729e <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8007286:	ed97 7a00 	vldr	s14, [r7]
 800728a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80072b0 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 800728e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007296:	ee17 3a90 	vmov	r3, s15
 800729a:	b29b      	uxth	r3, r3
 800729c:	e000      	b.n	80072a0 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	4768c671 	.word	0x4768c671
 80072b0:	4168d4fe 	.word	0x4168d4fe

080072b4 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 80072c0:	887b      	ldrh	r3, [r7, #2]
 80072c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c6:	d209      	bcs.n	80072dc <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80072c8:	887b      	ldrh	r3, [r7, #2]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072d2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80072f0 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 80072d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072da:	e001      	b.n	80072e0 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80072dc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80072f4 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 80072e0:	eeb0 0a67 	vmov.f32	s0, s15
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	4174240b 	.word	0x4174240b
 80072f4:	00000000 	.word	0x00000000

080072f8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8007304:	edd7 7a00 	vldr	s15, [r7]
 8007308:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800733c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800730c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	d80b      	bhi.n	800732e <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8007316:	ed97 7a00 	vldr	s14, [r7]
 800731a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007340 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800731e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007326:	ee17 3a90 	vmov	r3, s15
 800732a:	b29b      	uxth	r3, r3
 800732c:	e000      	b.n	8007330 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	4673e702 	.word	0x4673e702
 8007340:	4174240b 	.word	0x4174240b

08007344 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8007350:	887b      	ldrh	r3, [r7, #2]
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007356:	d209      	bcs.n	800736c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8007358:	887b      	ldrh	r3, [r7, #2]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007362:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007380 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8007366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800736a:	e001      	b.n	8007370 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800736c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007384 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8007370:	eeb0 0a67 	vmov.f32	s0, s15
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	3e742401 	.word	0x3e742401
 8007384:	00000000 	.word	0x00000000

08007388 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8007394:	edd7 7a00 	vldr	s15, [r7]
 8007398:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80073cc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 800739c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a4:	d80b      	bhi.n	80073be <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80073a6:	ed97 7a00 	vldr	s14, [r7]
 80073aa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80073d0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 80073ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073b6:	ee17 3a90 	vmov	r3, s15
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	e000      	b.n	80073c0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	447414bf 	.word	0x447414bf
 80073d0:	3e742401 	.word	0x3e742401

080073d4 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 80073e0:	887b      	ldrh	r3, [r7, #2]
 80073e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e6:	d219      	bcs.n	800741c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 80073e8:	887b      	ldrh	r3, [r7, #2]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7f9 f8ca 	bl	8000584 <__aeabi_i2d>
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007430 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 80073f6:	f7f8 ff79 	bl	80002ec <__adddf3>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4610      	mov	r0, r2
 8007400:	4619      	mov	r1, r3
 8007402:	f04f 0200 	mov.w	r2, #0
 8007406:	4b0b      	ldr	r3, [pc, #44]	@ (8007434 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8007408:	f7f9 f926 	bl	8000658 <__aeabi_dmul>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4610      	mov	r0, r2
 8007412:	4619      	mov	r1, r3
 8007414:	f7f9 fbf8 	bl	8000c08 <__aeabi_d2f>
 8007418:	4603      	mov	r3, r0
 800741a:	e001      	b.n	8007420 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800741c:	f04f 0300 	mov.w	r3, #0
}
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eeb0 0a67 	vmov.f32	s0, s15
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	3fe00000 	.word	0x3fe00000
 8007434:	402e8000 	.word	0x402e8000

08007438 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8007444:	edd7 7a00 	vldr	s15, [r7]
 8007448:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007484 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 800744c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007454:	d80f      	bhi.n	8007476 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8007456:	ed97 7a00 	vldr	s14, [r7]
 800745a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8007488 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 800745e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007462:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800746a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746e:	ee17 3a90 	vmov	r3, s15
 8007472:	b29b      	uxth	r3, r3
 8007474:	e000      	b.n	8007478 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	4673e180 	.word	0x4673e180
 8007488:	41740000 	.word	0x41740000

0800748c <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8007498:	887b      	ldrh	r3, [r7, #2]
 800749a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800749e:	d209      	bcs.n	80074b4 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 80074a0:	887b      	ldrh	r3, [r7, #2]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074aa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80074c8 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 80074ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074b2:	e001      	b.n	80074b8 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80074b4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80074cc <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 80074b8:	eeb0 0a67 	vmov.f32	s0, s15
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	3d7423f4 	.word	0x3d7423f4
 80074cc:	00000000 	.word	0x00000000

080074d0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 80074dc:	edd7 7a00 	vldr	s15, [r7]
 80074e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007514 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 80074e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	d80b      	bhi.n	8007506 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 80074ee:	ed97 7a00 	vldr	s14, [r7]
 80074f2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007518 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 80074f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fe:	ee17 3a90 	vmov	r3, s15
 8007502:	b29b      	uxth	r3, r3
 8007504:	e000      	b.n	8007508 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	44742023 	.word	0x44742023
 8007518:	3d7423f4 	.word	0x3d7423f4

0800751c <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007532:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007548 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 8007536:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800753a:	eeb0 0a67 	vmov.f32	s0, s15
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	3783956e 	.word	0x3783956e

0800754c <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8007558:	edd7 7a02 	vldr	s15, [r7, #8]
 800755c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007594 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 8007560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007568:	d80c      	bhi.n	8007584 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800756a:	ed97 7a02 	vldr	s14, [r7, #8]
 800756e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007598 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 8007572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757a:	edc7 7a01 	vstr	s15, [r7, #4]
 800757e:	793b      	ldrb	r3, [r7, #4]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	e000      	b.n	8007586 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	3b8311d9 	.word	0x3b8311d9
 8007598:	3783956e 	.word	0x3783956e

0800759c <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075b2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80075c8 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 80075b6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80075ba:	eeb0 0a67 	vmov.f32	s0, s15
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	3783956e 	.word	0x3783956e

080075cc <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80075d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80075dc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007614 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 80075e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e8:	d80c      	bhi.n	8007604 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80075ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80075ee:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007618 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 80075f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80075fe:	793b      	ldrb	r3, [r7, #4]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	e000      	b.n	8007606 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	3b8311d9 	.word	0x3b8311d9
 8007618:	3783956e 	.word	0x3783956e

0800761c <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007632:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007648 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8007636:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800763a:	eeb0 0a67 	vmov.f32	s0, s15
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	3783956e 	.word	0x3783956e

0800764c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8007658:	edd7 7a02 	vldr	s15, [r7, #8]
 800765c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007694 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8007660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007668:	d80c      	bhi.n	8007684 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800766a:	ed97 7a02 	vldr	s14, [r7, #8]
 800766e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007698 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8007672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767a:	edc7 7a01 	vstr	s15, [r7, #4]
 800767e:	793b      	ldrb	r3, [r7, #4]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	e000      	b.n	8007686 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	3b8311d9 	.word	0x3b8311d9
 8007698:	3783956e 	.word	0x3783956e

0800769c <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	2b0f      	cmp	r3, #15
 80076ac:	d80a      	bhi.n	80076c4 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	3301      	adds	r3, #1
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80076d8 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 80076be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076c2:	e001      	b.n	80076c8 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 80076c4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80076dc <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 80076c8:	eeb0 0a67 	vmov.f32	s0, s15
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	43bb8000 	.word	0x43bb8000
 80076dc:	00000000 	.word	0x00000000

080076e0 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80076ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80076f0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800777c <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 80076f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fc:	d836      	bhi.n	800776c <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 80076fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8007702:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007780 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 8007706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800770a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800770e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007716:	edc7 7a01 	vstr	s15, [r7, #4]
 800771a:	793b      	ldrb	r3, [r7, #4]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007726:	ed97 7a05 	vldr	s14, [r7, #20]
 800772a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800772e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8007732:	edd7 7a04 	vldr	s15, [r7, #16]
 8007736:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800773a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800773e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007742:	d50a      	bpl.n	800775a <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8007744:	edd7 7a05 	vldr	s15, [r7, #20]
 8007748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800774c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007750:	793b      	ldrb	r3, [r7, #4]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b2db      	uxtb	r3, r3
 8007758:	e009      	b.n	800776e <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800775a:	edd7 7a05 	vldr	s15, [r7, #20]
 800775e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007762:	edc7 7a01 	vstr	s15, [r7, #4]
 8007766:	793b      	ldrb	r3, [r7, #4]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	e000      	b.n	800776e <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	45bb8000 	.word	0x45bb8000
 8007780:	43bb8000 	.word	0x43bb8000

08007784 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 8007790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007794:	2b00      	cmp	r3, #0
 8007796:	db0a      	blt.n	80077ae <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	3301      	adds	r3, #1
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077a4:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80077c0 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 80077a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077ac:	e001      	b.n	80077b2 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 80077ae:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80077c4 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 80077b2:	eeb0 0a67 	vmov.f32	s0, s15
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	41fa0000 	.word	0x41fa0000
 80077c4:	00000000 	.word	0x00000000

080077c8 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 80077d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80077d8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007864 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 80077dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e4:	d836      	bhi.n	8007854 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 80077e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80077ea:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007868 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 80077ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077f2:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80077f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80077fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8007802:	793b      	ldrb	r3, [r7, #4]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800780e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007816:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800781a:	edd7 7a04 	vldr	s15, [r7, #16]
 800781e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782a:	d50a      	bpl.n	8007842 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800782c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007834:	edc7 7a01 	vstr	s15, [r7, #4]
 8007838:	793b      	ldrb	r3, [r7, #4]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	3b01      	subs	r3, #1
 800783e:	b2db      	uxtb	r3, r3
 8007840:	e009      	b.n	8007856 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 8007842:	edd7 7a05 	vldr	s15, [r7, #20]
 8007846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800784a:	edc7 7a01 	vstr	s15, [r7, #4]
 800784e:	793b      	ldrb	r3, [r7, #4]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	e000      	b.n	8007856 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	457a0000 	.word	0x457a0000
 8007868:	41fa0000 	.word	0x41fa0000

0800786c <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
  reset_device();
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3394      	adds	r3, #148	@ 0x94
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	4798      	blx	r3
  get_status();
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	330c      	adds	r3, #12
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	edd2 7a05 	vldr	s15, [r2, #20]
 80078a2:	eeb0 0a67 	vmov.f32	s0, s15
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	461a      	mov	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	edd2 7a06 	vldr	s15, [r2, #24]
 80078c4:	eeb0 0a67 	vmov.f32	s0, s15
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	4798      	blx	r3
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	edd2 7a07 	vldr	s15, [r2, #28]
 80078e6:	eeb0 0a67 	vmov.f32	s0, s15
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	4798      	blx	r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	461a      	mov	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	edd2 7a08 	vldr	s15, [r2, #32]
 8007908:	eeb0 0a67 	vmov.f32	s0, s15
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	4798      	blx	r3
 8007910:	4603      	mov	r3, r0
 8007912:	461a      	mov	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800792a:	eeb0 0a67 	vmov.f32	s0, s15
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	4798      	blx	r3
 8007932:	4603      	mov	r3, r0
 8007934:	461a      	mov	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007942:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007c14 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007946:	ee67 6a87 	vmul.f32	s13, s15, s14
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	ed93 7a00 	vldr	s14, [r3]
 8007950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007958:	edc7 7a01 	vstr	s15, [r7, #4]
 800795c:	793b      	ldrb	r3, [r7, #4]
 800795e:	b2da      	uxtb	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800796c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007c14 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007970:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	ed93 7a00 	vldr	s14, [r3]
 800797a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007982:	edc7 7a01 	vstr	s15, [r7, #4]
 8007986:	793b      	ldrb	r3, [r7, #4]
 8007988:	b2da      	uxtb	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007996:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8007c14 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800799a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	ed93 7a00 	vldr	s14, [r3]
 80079a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80079b0:	793b      	ldrb	r3, [r7, #4]
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80079c0:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8007c14 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80079c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	ed93 7a00 	vldr	s14, [r3]
 80079ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80079da:	793b      	ldrb	r3, [r7, #4]
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80079f4:	eeb0 0a67 	vmov.f32	s0, s15
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	4798      	blx	r3
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8007a16:	eeb0 0a67 	vmov.f32	s0, s15
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	4798      	blx	r3
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8007a38:	eeb0 0a67 	vmov.f32	s0, s15
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	4798      	blx	r3
 8007a40:	4603      	mov	r3, r0
 8007a42:	461a      	mov	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8007a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	4798      	blx	r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8007a88:	eeb0 0a67 	vmov.f32	s0, s15
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	4798      	blx	r3
 8007a90:	4603      	mov	r3, r0
 8007a92:	461a      	mov	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8007aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	4798      	blx	r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8007af0:	2104      	movs	r1, #4
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8007b06:	2105      	movs	r1, #5
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8007b1c:	2106      	movs	r1, #6
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8007b32:	2107      	movs	r1, #7
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8007b48:	2108      	movs	r1, #8
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8007b5e:	2109      	movs	r1, #9
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8007b74:	210a      	movs	r1, #10
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007b8a:	210b      	movs	r1, #11
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007ba0:	210c      	movs	r1, #12
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8007bb6:	210d      	movs	r1, #13
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8007bcc:	210e      	movs	r1, #14
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8007be2:	210f      	movs	r1, #15
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8007bf8:	2110      	movs	r1, #16
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8007c0e:	2111      	movs	r1, #17
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	e001      	b.n	8007c18 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007c14:	43800000 	.word	0x43800000
 8007c18:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8007c2a:	2113      	movs	r1, #19
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8007c40:	2114      	movs	r1, #20
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007c56:	2116      	movs	r1, #22
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8007c6c:	2117      	movs	r1, #23
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3354      	adds	r3, #84	@ 0x54
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8007c80:	4611      	mov	r1, r2
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	4798      	blx	r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	f083 0301 	eor.w	r3, r3, #1
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e000      	b.n	8007c98 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007cb6:	681c      	ldr	r4, [r3, #0]
 8007cb8:	7afa      	ldrb	r2, [r7, #11]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	490c      	ldr	r1, [pc, #48]	@ (8007cf8 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a09      	ldr	r2, [pc, #36]	@ (8007cfc <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007cd8:	4907      	ldr	r1, [pc, #28]	@ (8007cf8 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a05      	ldr	r2, [pc, #20]	@ (8007d00 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007cea:	4904      	ldr	r1, [pc, #16]	@ (8007cfc <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	4798      	blx	r3
}
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd90      	pop	{r4, r7, pc}
 8007cf8:	20000274 	.word	0x20000274
 8007cfc:	20000294 	.word	0x20000294
 8007d00:	2000029c 	.word	0x2000029c

08007d04 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d18:	681c      	ldr	r4, [r3, #0]
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	9201      	str	r2, [sp, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	9200      	str	r2, [sp, #0]
 8007d24:	2202      	movs	r2, #2
 8007d26:	4917      	ldr	r1, [pc, #92]	@ (8007d84 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a14      	ldr	r2, [pc, #80]	@ (8007d88 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007d38:	4912      	ldr	r1, [pc, #72]	@ (8007d84 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a10      	ldr	r2, [pc, #64]	@ (8007d8c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007d4a:	490f      	ldr	r1, [pc, #60]	@ (8007d88 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a19      	ldr	r1, [r3, #32]
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	7b9b      	ldrb	r3, [r3, #14]
 8007d62:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	7bfa      	ldrb	r2, [r7, #15]
 8007d70:	4906      	ldr	r1, [pc, #24]	@ (8007d8c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd90      	pop	{r4, r7, pc}
 8007d84:	20000274 	.word	0x20000274
 8007d88:	20000294 	.word	0x20000294
 8007d8c:	2000029c 	.word	0x2000029c

08007d90 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007da6:	681c      	ldr	r4, [r3, #0]
 8007da8:	7afa      	ldrb	r2, [r7, #11]
 8007daa:	2300      	movs	r3, #0
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	4613      	mov	r3, r2
 8007db4:	2203      	movs	r2, #3
 8007db6:	490c      	ldr	r1, [pc, #48]	@ (8007de8 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a09      	ldr	r2, [pc, #36]	@ (8007dec <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007dc8:	4907      	ldr	r1, [pc, #28]	@ (8007de8 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a05      	ldr	r2, [pc, #20]	@ (8007df0 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007dda:	4904      	ldr	r1, [pc, #16]	@ (8007dec <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	4798      	blx	r3
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd90      	pop	{r4, r7, pc}
 8007de8:	20000274 	.word	0x20000274
 8007dec:	20000294 	.word	0x20000294
 8007df0:	2000029c 	.word	0x2000029c

08007df4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007df4:	b590      	push	{r4, r7, lr}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e08:	681c      	ldr	r4, [r3, #0]
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	9201      	str	r2, [sp, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	9200      	str	r2, [sp, #0]
 8007e14:	2204      	movs	r2, #4
 8007e16:	490c      	ldr	r1, [pc, #48]	@ (8007e48 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a09      	ldr	r2, [pc, #36]	@ (8007e4c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007e28:	4907      	ldr	r1, [pc, #28]	@ (8007e48 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a05      	ldr	r2, [pc, #20]	@ (8007e50 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007e3a:	4904      	ldr	r1, [pc, #16]	@ (8007e4c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd90      	pop	{r4, r7, pc}
 8007e48:	20000274 	.word	0x20000274
 8007e4c:	20000294 	.word	0x20000294
 8007e50:	2000029c 	.word	0x2000029c

08007e54 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e6a:	681c      	ldr	r4, [r3, #0]
 8007e6c:	7afa      	ldrb	r2, [r7, #11]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4613      	mov	r3, r2
 8007e78:	2205      	movs	r2, #5
 8007e7a:	490c      	ldr	r1, [pc, #48]	@ (8007eac <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007e8c:	4907      	ldr	r1, [pc, #28]	@ (8007eac <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a05      	ldr	r2, [pc, #20]	@ (8007eb4 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007e9e:	4904      	ldr	r1, [pc, #16]	@ (8007eb0 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	4798      	blx	r3
}
 8007ea4:	bf00      	nop
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd90      	pop	{r4, r7, pc}
 8007eac:	20000274 	.word	0x20000274
 8007eb0:	20000294 	.word	0x20000294
 8007eb4:	2000029c 	.word	0x2000029c

08007eb8 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ec8:	d21f      	bcs.n	8007f0a <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ed2:	681c      	ldr	r4, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2206      	movs	r2, #6
 8007ee0:	490c      	ldr	r1, [pc, #48]	@ (8007f14 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a09      	ldr	r2, [pc, #36]	@ (8007f18 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007ef2:	4908      	ldr	r1, [pc, #32]	@ (8007f14 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a06      	ldr	r2, [pc, #24]	@ (8007f1c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007f04:	4904      	ldr	r1, [pc, #16]	@ (8007f18 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd90      	pop	{r4, r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000274 	.word	0x20000274
 8007f18:	20000294 	.word	0x20000294
 8007f1c:	2000029c 	.word	0x2000029c

08007f20 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007f20:	b590      	push	{r4, r7, lr}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f34:	d220      	bcs.n	8007f78 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f3e:	681c      	ldr	r4, [r3, #0]
 8007f40:	7afa      	ldrb	r2, [r7, #11]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	2207      	movs	r2, #7
 8007f4e:	490c      	ldr	r1, [pc, #48]	@ (8007f80 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a09      	ldr	r2, [pc, #36]	@ (8007f84 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007f60:	4907      	ldr	r1, [pc, #28]	@ (8007f80 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a05      	ldr	r2, [pc, #20]	@ (8007f88 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007f72:	4904      	ldr	r1, [pc, #16]	@ (8007f84 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	4798      	blx	r3
}
 8007f78:	bf00      	nop
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd90      	pop	{r4, r7, pc}
 8007f80:	20000274 	.word	0x20000274
 8007f84:	20000294 	.word	0x20000294
 8007f88:	2000029c 	.word	0x2000029c

08007f8c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007f8c:	b590      	push	{r4, r7, lr}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	607b      	str	r3, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	72fb      	strb	r3, [r7, #11]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007fa6:	681c      	ldr	r4, [r3, #0]
 8007fa8:	7af9      	ldrb	r1, [r7, #11]
 8007faa:	7abb      	ldrb	r3, [r7, #10]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	9201      	str	r2, [sp, #4]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	490c      	ldr	r1, [pc, #48]	@ (8007fe8 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a09      	ldr	r2, [pc, #36]	@ (8007fec <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007fc8:	4907      	ldr	r1, [pc, #28]	@ (8007fe8 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a05      	ldr	r2, [pc, #20]	@ (8007ff0 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007fda:	4904      	ldr	r1, [pc, #16]	@ (8007fec <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	4798      	blx	r3
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd90      	pop	{r4, r7, pc}
 8007fe8:	20000274 	.word	0x20000274
 8007fec:	20000294 	.word	0x20000294
 8007ff0:	2000029c 	.word	0x2000029c

08007ff4 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007ff4:	b590      	push	{r4, r7, lr}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
 8008000:	4613      	mov	r3, r2
 8008002:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800800c:	681c      	ldr	r4, [r3, #0]
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	78bb      	ldrb	r3, [r7, #2]
 8008012:	2100      	movs	r1, #0
 8008014:	9101      	str	r1, [sp, #4]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	4613      	mov	r3, r2
 800801a:	2209      	movs	r2, #9
 800801c:	490c      	ldr	r1, [pc, #48]	@ (8008050 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a09      	ldr	r2, [pc, #36]	@ (8008054 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800802e:	4908      	ldr	r1, [pc, #32]	@ (8008050 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a06      	ldr	r2, [pc, #24]	@ (8008058 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	bd90      	pop	{r4, r7, pc}
 800804e:	bf00      	nop
 8008050:	20000274 	.word	0x20000274
 8008054:	20000294 	.word	0x20000294
 8008058:	2000029c 	.word	0x2000029c

0800805c <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800805c:	b590      	push	{r4, r7, lr}
 800805e:	b085      	sub	sp, #20
 8008060:	af02      	add	r7, sp, #8
 8008062:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800806c:	681c      	ldr	r4, [r3, #0]
 800806e:	2300      	movs	r3, #0
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	2300      	movs	r3, #0
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	220a      	movs	r2, #10
 800807a:	490c      	ldr	r1, [pc, #48]	@ (80080ac <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a09      	ldr	r2, [pc, #36]	@ (80080b0 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 800808c:	4907      	ldr	r1, [pc, #28]	@ (80080ac <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a05      	ldr	r2, [pc, #20]	@ (80080b4 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 800809e:	4904      	ldr	r1, [pc, #16]	@ (80080b0 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd90      	pop	{r4, r7, pc}
 80080ac:	20000274 	.word	0x20000274
 80080b0:	20000294 	.word	0x20000294
 80080b4:	2000029c 	.word	0x2000029c

080080b8 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 80080b8:	b590      	push	{r4, r7, lr}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af02      	add	r7, sp, #8
 80080be:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080c8:	681c      	ldr	r4, [r3, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	2300      	movs	r3, #0
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	220b      	movs	r2, #11
 80080d6:	490c      	ldr	r1, [pc, #48]	@ (8008108 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a09      	ldr	r2, [pc, #36]	@ (800810c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 80080e8:	4907      	ldr	r1, [pc, #28]	@ (8008108 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a05      	ldr	r2, [pc, #20]	@ (8008110 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 80080fa:	4904      	ldr	r1, [pc, #16]	@ (800810c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	bd90      	pop	{r4, r7, pc}
 8008108:	20000274 	.word	0x20000274
 800810c:	20000294 	.word	0x20000294
 8008110:	2000029c 	.word	0x2000029c

08008114 <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b085      	sub	sp, #20
 8008118:	af02      	add	r7, sp, #8
 800811a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008124:	681c      	ldr	r4, [r3, #0]
 8008126:	2300      	movs	r3, #0
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	2300      	movs	r3, #0
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	2300      	movs	r3, #0
 8008130:	220c      	movs	r2, #12
 8008132:	490c      	ldr	r1, [pc, #48]	@ (8008164 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a09      	ldr	r2, [pc, #36]	@ (8008168 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8008144:	4907      	ldr	r1, [pc, #28]	@ (8008164 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a05      	ldr	r2, [pc, #20]	@ (800816c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 8008156:	4904      	ldr	r1, [pc, #16]	@ (8008168 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	bd90      	pop	{r4, r7, pc}
 8008164:	20000274 	.word	0x20000274
 8008168:	20000294 	.word	0x20000294
 800816c:	2000029c 	.word	0x2000029c

08008170 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8008170:	b590      	push	{r4, r7, lr}
 8008172:	b085      	sub	sp, #20
 8008174:	af02      	add	r7, sp, #8
 8008176:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008180:	681c      	ldr	r4, [r3, #0]
 8008182:	2300      	movs	r3, #0
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	2300      	movs	r3, #0
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	2300      	movs	r3, #0
 800818c:	220d      	movs	r2, #13
 800818e:	490c      	ldr	r1, [pc, #48]	@ (80081c0 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a09      	ldr	r2, [pc, #36]	@ (80081c4 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 80081a0:	4907      	ldr	r1, [pc, #28]	@ (80081c0 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a05      	ldr	r2, [pc, #20]	@ (80081c8 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 80081b2:	4904      	ldr	r1, [pc, #16]	@ (80081c4 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	4798      	blx	r3
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd90      	pop	{r4, r7, pc}
 80081c0:	20000274 	.word	0x20000274
 80081c4:	20000294 	.word	0x20000294
 80081c8:	2000029c 	.word	0x2000029c

080081cc <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 80081cc:	b590      	push	{r4, r7, lr}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081dc:	681c      	ldr	r4, [r3, #0]
 80081de:	2300      	movs	r3, #0
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	2300      	movs	r3, #0
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	220e      	movs	r2, #14
 80081ea:	490c      	ldr	r1, [pc, #48]	@ (800821c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a09      	ldr	r2, [pc, #36]	@ (8008220 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 80081fc:	4907      	ldr	r1, [pc, #28]	@ (800821c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a05      	ldr	r2, [pc, #20]	@ (8008224 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 800820e:	4904      	ldr	r1, [pc, #16]	@ (8008220 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	4798      	blx	r3
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bd90      	pop	{r4, r7, pc}
 800821c:	20000274 	.word	0x20000274
 8008220:	20000294 	.word	0x20000294
 8008224:	2000029c 	.word	0x2000029c

08008228 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b085      	sub	sp, #20
 800822c:	af02      	add	r7, sp, #8
 800822e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008238:	681c      	ldr	r4, [r3, #0]
 800823a:	2300      	movs	r3, #0
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	2300      	movs	r3, #0
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	2300      	movs	r3, #0
 8008244:	220f      	movs	r2, #15
 8008246:	490c      	ldr	r1, [pc, #48]	@ (8008278 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a09      	ldr	r2, [pc, #36]	@ (800827c <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8008258:	4907      	ldr	r1, [pc, #28]	@ (8008278 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a05      	ldr	r2, [pc, #20]	@ (8008280 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 800826a:	4904      	ldr	r1, [pc, #16]	@ (800827c <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}
 8008278:	20000274 	.word	0x20000274
 800827c:	20000294 	.word	0x20000294
 8008280:	2000029c 	.word	0x2000029c

08008284 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8008284:	b590      	push	{r4, r7, lr}
 8008286:	b085      	sub	sp, #20
 8008288:	af02      	add	r7, sp, #8
 800828a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008294:	681c      	ldr	r4, [r3, #0]
 8008296:	2300      	movs	r3, #0
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	2300      	movs	r3, #0
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	2210      	movs	r2, #16
 80082a2:	490c      	ldr	r1, [pc, #48]	@ (80082d4 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a09      	ldr	r2, [pc, #36]	@ (80082d8 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 80082b4:	4907      	ldr	r1, [pc, #28]	@ (80082d4 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a05      	ldr	r2, [pc, #20]	@ (80082dc <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 80082c6:	4904      	ldr	r1, [pc, #16]	@ (80082d8 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd90      	pop	{r4, r7, pc}
 80082d4:	20000274 	.word	0x20000274
 80082d8:	20000294 	.word	0x20000294
 80082dc:	2000029c 	.word	0x2000029c

080082e0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 80082e0:	b590      	push	{r4, r7, lr}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082f0:	681c      	ldr	r4, [r3, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	2300      	movs	r3, #0
 80082fc:	2211      	movs	r2, #17
 80082fe:	490c      	ldr	r1, [pc, #48]	@ (8008330 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a09      	ldr	r2, [pc, #36]	@ (8008334 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008310:	4907      	ldr	r1, [pc, #28]	@ (8008330 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a05      	ldr	r2, [pc, #20]	@ (8008338 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 8008322:	4904      	ldr	r1, [pc, #16]	@ (8008334 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	4798      	blx	r3
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	bd90      	pop	{r4, r7, pc}
 8008330:	20000274 	.word	0x20000274
 8008334:	20000294 	.word	0x20000294
 8008338:	2000029c 	.word	0x2000029c

0800833c <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800833c:	b590      	push	{r4, r7, lr}
 800833e:	b087      	sub	sp, #28
 8008340:	af02      	add	r7, sp, #8
 8008342:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800834c:	681c      	ldr	r4, [r3, #0]
 800834e:	2300      	movs	r3, #0
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	2300      	movs	r3, #0
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	2300      	movs	r3, #0
 8008358:	2212      	movs	r2, #18
 800835a:	4912      	ldr	r1, [pc, #72]	@ (80083a4 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a0f      	ldr	r2, [pc, #60]	@ (80083a8 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 800836c:	490d      	ldr	r1, [pc, #52]	@ (80083a4 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a0b      	ldr	r2, [pc, #44]	@ (80083ac <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 800837e:	490a      	ldr	r1, [pc, #40]	@ (80083a8 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2202      	movs	r2, #2
 8008390:	4906      	ldr	r1, [pc, #24]	@ (80083ac <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
 8008396:	4603      	mov	r3, r0
 8008398:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800839a:	89fb      	ldrh	r3, [r7, #14]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd90      	pop	{r4, r7, pc}
 80083a4:	20000274 	.word	0x20000274
 80083a8:	20000294 	.word	0x20000294
 80083ac:	2000029c 	.word	0x2000029c

080083b0 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80083b0:	b590      	push	{r4, r7, lr}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	460b      	mov	r3, r1
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083c6:	681c      	ldr	r4, [r3, #0]
 80083c8:	7afa      	ldrb	r2, [r7, #11]
 80083ca:	2300      	movs	r3, #0
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	4613      	mov	r3, r2
 80083d4:	2201      	movs	r2, #1
 80083d6:	4903      	ldr	r1, [pc, #12]	@ (80083e4 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	47a0      	blx	r4
}
 80083dc:	bf00      	nop
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd90      	pop	{r4, r7, pc}
 80083e4:	20000274 	.word	0x20000274

080083e8 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 80083e8:	b590      	push	{r4, r7, lr}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083fc:	681c      	ldr	r4, [r3, #0]
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	2200      	movs	r2, #0
 8008402:	9201      	str	r2, [sp, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	9200      	str	r2, [sp, #0]
 8008408:	2202      	movs	r2, #2
 800840a:	4903      	ldr	r1, [pc, #12]	@ (8008418 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	47a0      	blx	r4
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	bd90      	pop	{r4, r7, pc}
 8008418:	20000274 	.word	0x20000274

0800841c <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b087      	sub	sp, #28
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	460b      	mov	r3, r1
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008432:	681c      	ldr	r4, [r3, #0]
 8008434:	7afa      	ldrb	r2, [r7, #11]
 8008436:	2300      	movs	r3, #0
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	4613      	mov	r3, r2
 8008440:	2203      	movs	r2, #3
 8008442:	4903      	ldr	r1, [pc, #12]	@ (8008450 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	47a0      	blx	r4
}
 8008448:	bf00      	nop
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	bd90      	pop	{r4, r7, pc}
 8008450:	20000274 	.word	0x20000274

08008454 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8008454:	b590      	push	{r4, r7, lr}
 8008456:	b085      	sub	sp, #20
 8008458:	af02      	add	r7, sp, #8
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008468:	681c      	ldr	r4, [r3, #0]
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	2200      	movs	r2, #0
 800846e:	9201      	str	r2, [sp, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	9200      	str	r2, [sp, #0]
 8008474:	2204      	movs	r2, #4
 8008476:	4903      	ldr	r1, [pc, #12]	@ (8008484 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	47a0      	blx	r4
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}
 8008484:	20000274 	.word	0x20000274

08008488 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8008488:	b590      	push	{r4, r7, lr}
 800848a:	b087      	sub	sp, #28
 800848c:	af02      	add	r7, sp, #8
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	460b      	mov	r3, r1
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800849e:	681c      	ldr	r4, [r3, #0]
 80084a0:	7afa      	ldrb	r2, [r7, #11]
 80084a2:	2300      	movs	r3, #0
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	4613      	mov	r3, r2
 80084ac:	2205      	movs	r2, #5
 80084ae:	4903      	ldr	r1, [pc, #12]	@ (80084bc <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	47a0      	blx	r4
}
 80084b4:	bf00      	nop
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd90      	pop	{r4, r7, pc}
 80084bc:	20000274 	.word	0x20000274

080084c0 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 80084c0:	b590      	push	{r4, r7, lr}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084d2:	681c      	ldr	r4, [r3, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	2300      	movs	r3, #0
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2206      	movs	r2, #6
 80084e0:	4903      	ldr	r1, [pc, #12]	@ (80084f0 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	47a0      	blx	r4
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd90      	pop	{r4, r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000274 	.word	0x20000274

080084f4 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80084f4:	b590      	push	{r4, r7, lr}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	460b      	mov	r3, r1
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800850a:	681c      	ldr	r4, [r3, #0]
 800850c:	7afa      	ldrb	r2, [r7, #11]
 800850e:	2300      	movs	r3, #0
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	4613      	mov	r3, r2
 8008518:	2207      	movs	r2, #7
 800851a:	4903      	ldr	r1, [pc, #12]	@ (8008528 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	47a0      	blx	r4
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	bd90      	pop	{r4, r7, pc}
 8008528:	20000274 	.word	0x20000274

0800852c <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800852c:	b590      	push	{r4, r7, lr}
 800852e:	b087      	sub	sp, #28
 8008530:	af02      	add	r7, sp, #8
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	72fb      	strb	r3, [r7, #11]
 800853a:	4613      	mov	r3, r2
 800853c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008546:	681c      	ldr	r4, [r3, #0]
 8008548:	7af9      	ldrb	r1, [r7, #11]
 800854a:	7abb      	ldrb	r3, [r7, #10]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	9201      	str	r2, [sp, #4]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	460b      	mov	r3, r1
 8008554:	2208      	movs	r2, #8
 8008556:	4903      	ldr	r1, [pc, #12]	@ (8008564 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	47a0      	blx	r4
}
 800855c:	bf00      	nop
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	bd90      	pop	{r4, r7, pc}
 8008564:	20000274 	.word	0x20000274

08008568 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8008568:	b590      	push	{r4, r7, lr}
 800856a:	b085      	sub	sp, #20
 800856c:	af02      	add	r7, sp, #8
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
 8008574:	4613      	mov	r3, r2
 8008576:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008580:	681c      	ldr	r4, [r3, #0]
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	78bb      	ldrb	r3, [r7, #2]
 8008586:	2100      	movs	r1, #0
 8008588:	9101      	str	r1, [sp, #4]
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	4613      	mov	r3, r2
 800858e:	2209      	movs	r2, #9
 8008590:	4903      	ldr	r1, [pc, #12]	@ (80085a0 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	47a0      	blx	r4
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	bd90      	pop	{r4, r7, pc}
 800859e:	bf00      	nop
 80085a0:	20000274 	.word	0x20000274

080085a4 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 80085a4:	b590      	push	{r4, r7, lr}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085b4:	681c      	ldr	r4, [r3, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	2300      	movs	r3, #0
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	2300      	movs	r3, #0
 80085c0:	220a      	movs	r2, #10
 80085c2:	4903      	ldr	r1, [pc, #12]	@ (80085d0 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	47a0      	blx	r4
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd90      	pop	{r4, r7, pc}
 80085d0:	20000274 	.word	0x20000274

080085d4 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 80085d4:	b590      	push	{r4, r7, lr}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af02      	add	r7, sp, #8
 80085da:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085e4:	681c      	ldr	r4, [r3, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	2300      	movs	r3, #0
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	2300      	movs	r3, #0
 80085f0:	220b      	movs	r2, #11
 80085f2:	4903      	ldr	r1, [pc, #12]	@ (8008600 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	47a0      	blx	r4
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd90      	pop	{r4, r7, pc}
 8008600:	20000274 	.word	0x20000274

08008604 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8008604:	b590      	push	{r4, r7, lr}
 8008606:	b085      	sub	sp, #20
 8008608:	af02      	add	r7, sp, #8
 800860a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008614:	681c      	ldr	r4, [r3, #0]
 8008616:	2300      	movs	r3, #0
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	2300      	movs	r3, #0
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	2300      	movs	r3, #0
 8008620:	220c      	movs	r2, #12
 8008622:	4903      	ldr	r1, [pc, #12]	@ (8008630 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	47a0      	blx	r4
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	bd90      	pop	{r4, r7, pc}
 8008630:	20000274 	.word	0x20000274

08008634 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8008634:	b590      	push	{r4, r7, lr}
 8008636:	b085      	sub	sp, #20
 8008638:	af02      	add	r7, sp, #8
 800863a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008644:	681c      	ldr	r4, [r3, #0]
 8008646:	2300      	movs	r3, #0
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	2300      	movs	r3, #0
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	220d      	movs	r2, #13
 8008652:	4903      	ldr	r1, [pc, #12]	@ (8008660 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	47a0      	blx	r4
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	bd90      	pop	{r4, r7, pc}
 8008660:	20000274 	.word	0x20000274

08008664 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8008664:	b590      	push	{r4, r7, lr}
 8008666:	b085      	sub	sp, #20
 8008668:	af02      	add	r7, sp, #8
 800866a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008674:	681c      	ldr	r4, [r3, #0]
 8008676:	2300      	movs	r3, #0
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	2300      	movs	r3, #0
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	2300      	movs	r3, #0
 8008680:	220e      	movs	r2, #14
 8008682:	4903      	ldr	r1, [pc, #12]	@ (8008690 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	47a0      	blx	r4
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	bd90      	pop	{r4, r7, pc}
 8008690:	20000274 	.word	0x20000274

08008694 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8008694:	b590      	push	{r4, r7, lr}
 8008696:	b085      	sub	sp, #20
 8008698:	af02      	add	r7, sp, #8
 800869a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80086a4:	681c      	ldr	r4, [r3, #0]
 80086a6:	2300      	movs	r3, #0
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	2300      	movs	r3, #0
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	2300      	movs	r3, #0
 80086b0:	220f      	movs	r2, #15
 80086b2:	4903      	ldr	r1, [pc, #12]	@ (80086c0 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	47a0      	blx	r4
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd90      	pop	{r4, r7, pc}
 80086c0:	20000274 	.word	0x20000274

080086c4 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80086d4:	681c      	ldr	r4, [r3, #0]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	2300      	movs	r3, #0
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2300      	movs	r3, #0
 80086e0:	2210      	movs	r2, #16
 80086e2:	4903      	ldr	r1, [pc, #12]	@ (80086f0 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	47a0      	blx	r4
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd90      	pop	{r4, r7, pc}
 80086f0:	20000274 	.word	0x20000274

080086f4 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af02      	add	r7, sp, #8
 80086fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008704:	681c      	ldr	r4, [r3, #0]
 8008706:	2300      	movs	r3, #0
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	2300      	movs	r3, #0
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	2300      	movs	r3, #0
 8008710:	2211      	movs	r2, #17
 8008712:	4903      	ldr	r1, [pc, #12]	@ (8008720 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	47a0      	blx	r4
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	bd90      	pop	{r4, r7, pc}
 8008720:	20000274 	.word	0x20000274

08008724 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8008724:	b590      	push	{r4, r7, lr}
 8008726:	b085      	sub	sp, #20
 8008728:	af02      	add	r7, sp, #8
 800872a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008734:	681c      	ldr	r4, [r3, #0]
 8008736:	2300      	movs	r3, #0
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	2300      	movs	r3, #0
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	2300      	movs	r3, #0
 8008740:	2212      	movs	r2, #18
 8008742:	4903      	ldr	r1, [pc, #12]	@ (8008750 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	47a0      	blx	r4
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	bd90      	pop	{r4, r7, pc}
 8008750:	20000274 	.word	0x20000274

08008754 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a09      	ldr	r2, [pc, #36]	@ (800878c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008768:	4909      	ldr	r1, [pc, #36]	@ (8008790 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a06      	ldr	r2, [pc, #24]	@ (8008794 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800877a:	4904      	ldr	r1, [pc, #16]	@ (800878c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8008780:	4b04      	ldr	r3, [pc, #16]	@ (8008794 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000294 	.word	0x20000294
 8008790:	20000274 	.word	0x20000274
 8008794:	2000029c 	.word	0x2000029c

08008798 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b089      	sub	sp, #36	@ 0x24
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80087a4:	4b17      	ldr	r3, [pc, #92]	@ (8008804 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80087aa:	2300      	movs	r3, #0
 80087ac:	75fb      	strb	r3, [r7, #23]
 80087ae:	e020      	b.n	80087f2 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80087b8:	681c      	ldr	r4, [r3, #0]
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	461a      	mov	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	1899      	adds	r1, r3, r2
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	461a      	mov	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	441a      	add	r2, r3
 80087ce:	230a      	movs	r3, #10
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	2302      	movs	r3, #2
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80087d8:	2300      	movs	r3, #0
 80087da:	75bb      	strb	r3, [r7, #22]
 80087dc:	e003      	b.n	80087e6 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 80087de:	bf00      	nop
 80087e0:	7dbb      	ldrb	r3, [r7, #22]
 80087e2:	3301      	adds	r3, #1
 80087e4:	75bb      	strb	r3, [r7, #22]
 80087e6:	7dbb      	ldrb	r3, [r7, #22]
 80087e8:	2b7c      	cmp	r3, #124	@ 0x7c
 80087ea:	d9f8      	bls.n	80087de <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	3301      	adds	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d9db      	bls.n	80087b0 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 80087f8:	bf00      	nop
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd90      	pop	{r4, r7, pc}
 8008802:	bf00      	nop
 8008804:	20000271 	.word	0x20000271

08008808 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800881a:	2301      	movs	r3, #1
 800881c:	74fb      	strb	r3, [r7, #19]
 800881e:	e016      	b.n	800884e <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8008820:	7cfb      	ldrb	r3, [r7, #19]
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	461a      	mov	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	7f1b      	ldrb	r3, [r3, #28]
 800882a:	4413      	add	r3, r2
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	4413      	add	r3, r2
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	4619      	mov	r1, r3
 8008834:	79fa      	ldrb	r2, [r7, #7]
 8008836:	7cfb      	ldrb	r3, [r7, #19]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	461a      	mov	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	4313      	orrs	r3, r2
 8008846:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008848:	7cfb      	ldrb	r3, [r7, #19]
 800884a:	3301      	adds	r3, #1
 800884c:	74fb      	strb	r3, [r7, #19]
 800884e:	7cfb      	ldrb	r3, [r7, #19]
 8008850:	2b03      	cmp	r3, #3
 8008852:	d9e5      	bls.n	8008820 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8008854:	697b      	ldr	r3, [r7, #20]
}
 8008856:	4618      	mov	r0, r3
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
	...

08008864 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2118      	movs	r1, #24
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
 8008884:	4602      	mov	r2, r0
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800888a:	b292      	uxth	r2, r2
 800888c:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800888e:	78fb      	ldrb	r3, [r7, #3]
 8008890:	2b0e      	cmp	r3, #14
 8008892:	f200 8099 	bhi.w	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 8008896:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088d9 	.word	0x080088d9
 80088a0:	080088e9 	.word	0x080088e9
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	08008909 	.word	0x08008909
 80088ac:	08008919 	.word	0x08008919
 80088b0:	08008929 	.word	0x08008929
 80088b4:	08008939 	.word	0x08008939
 80088b8:	08008949 	.word	0x08008949
 80088bc:	08008959 	.word	0x08008959
 80088c0:	08008969 	.word	0x08008969
 80088c4:	08008979 	.word	0x08008979
 80088c8:	08008989 	.word	0x08008989
 80088cc:	08008999 	.word	0x08008999
 80088d0:	080089a9 	.word	0x080089a9
 80088d4:	080089b9 	.word	0x080089b9
      state = pL6470_StatusRegister->HiZ;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	73fb      	strb	r3, [r7, #15]
      break;
 80088e6:	e06f      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	73fb      	strb	r3, [r7, #15]
      break;
 80088f6:	e067      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008902:	b2db      	uxtb	r3, r3
 8008904:	73fb      	strb	r3, [r7, #15]
      break;
 8008906:	e05f      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008912:	b2db      	uxtb	r3, r3
 8008914:	73fb      	strb	r3, [r7, #15]
      break;
 8008916:	e057      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008922:	b2db      	uxtb	r3, r3
 8008924:	73fb      	strb	r3, [r7, #15]
      break;
 8008926:	e04f      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008932:	b2db      	uxtb	r3, r3
 8008934:	73fb      	strb	r3, [r7, #15]
      break;
 8008936:	e047      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008942:	b2db      	uxtb	r3, r3
 8008944:	73fb      	strb	r3, [r7, #15]
      break;
 8008946:	e03f      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008952:	b2db      	uxtb	r3, r3
 8008954:	73fb      	strb	r3, [r7, #15]
      break;
 8008956:	e037      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008962:	b2db      	uxtb	r3, r3
 8008964:	73fb      	strb	r3, [r7, #15]
      break;
 8008966:	e02f      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008972:	b2db      	uxtb	r3, r3
 8008974:	73fb      	strb	r3, [r7, #15]
      break;
 8008976:	e027      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008982:	b2db      	uxtb	r3, r3
 8008984:	73fb      	strb	r3, [r7, #15]
      break;
 8008986:	e01f      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008992:	b2db      	uxtb	r3, r3
 8008994:	73fb      	strb	r3, [r7, #15]
      break;
 8008996:	e017      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	73fb      	strb	r3, [r7, #15]
      break;
 80089a6:	e00f      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	73fb      	strb	r3, [r7, #15]
      break;
 80089b6:	e007      	b.n	80089c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089bc:	785b      	ldrb	r3, [r3, #1]
 80089be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	73fb      	strb	r3, [r7, #15]
      break;
 80089c6:	bf00      	nop
  return state;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop

080089d4 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	2b18      	cmp	r3, #24
 80089e4:	d809      	bhi.n	80089fa <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a19      	ldr	r1, [r3, #32]
 80089ea:	78fa      	ldrb	r2, [r7, #3]
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	440b      	add	r3, r1
 80089f6:	3301      	adds	r3, #1
 80089f8:	e000      	b.n	80089fc <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
 8008a16:	e01a      	b.n	8008a4e <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	4413      	add	r3, r2
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	4413      	add	r3, r2
 8008a38:	2200      	movs	r2, #0
 8008a3a:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	4413      	add	r3, r2
 8008a44:	2200      	movs	r2, #0
 8008a46:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	73fb      	strb	r3, [r7, #15]
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d9e1      	bls.n	8008a18 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	603b      	str	r3, [r7, #0]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	7f1b      	ldrb	r3, [r3, #28]
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	79fa      	ldrb	r2, [r7, #7]
 8008a7e:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	7f1b      	ldrb	r3, [r3, #28]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	4413      	add	r3, r2
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	7f1b      	ldrb	r3, [r3, #28]
 8008a92:	011b      	lsls	r3, r3, #4
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	4413      	add	r3, r2
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	7f1b      	ldrb	r3, [r3, #28]
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	60da      	str	r2, [r3, #12]
}
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008ab8:	b590      	push	{r4, r7, lr}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8008ac8:	4b10      	ldr	r3, [pc, #64]	@ (8008b0c <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8008ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8008b0c <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8008aee:	681c      	ldr	r4, [r3, #0]
 8008af0:	79fa      	ldrb	r2, [r7, #7]
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	47a0      	blx	r4
}
 8008b02:	bf00      	nop
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd90      	pop	{r4, r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000271 	.word	0x20000271

08008b10 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008b20:	2300      	movs	r3, #0
 8008b22:	75bb      	strb	r3, [r7, #22]
 8008b24:	e013      	b.n	8008b4e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]
 8008b2a:	e00a      	b.n	8008b42 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8008b2c:	7d7b      	ldrb	r3, [r7, #21]
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	757a      	strb	r2, [r7, #21]
 8008b32:	461a      	mov	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4413      	add	r3, r2
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d9f1      	bls.n	8008b2c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008b48:	7dbb      	ldrb	r3, [r7, #22]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	75bb      	strb	r3, [r7, #22]
 8008b4e:	7dbb      	ldrb	r3, [r7, #22]
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d9e8      	bls.n	8008b26 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008b54:	2300      	movs	r3, #0
 8008b56:	75fb      	strb	r3, [r7, #23]
 8008b58:	e1f1      	b.n	8008f3e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	440b      	add	r3, r1
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	1a5b      	subs	r3, r3, r1
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	441a      	add	r2, r3
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	440b      	add	r3, r1
 8008b7a:	7b12      	ldrb	r2, [r2, #12]
 8008b7c:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	4413      	add	r3, r2
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	2b12      	cmp	r3, #18
 8008b8a:	f200 81d5 	bhi.w	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8008b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008f39 	.word	0x08008f39
 8008b98:	08008be1 	.word	0x08008be1
 8008b9c:	08008c69 	.word	0x08008c69
 8008ba0:	08008c99 	.word	0x08008c99
 8008ba4:	08008d01 	.word	0x08008d01
 8008ba8:	08008d2f 	.word	0x08008d2f
 8008bac:	08008d97 	.word	0x08008d97
 8008bb0:	08008dd3 	.word	0x08008dd3
 8008bb4:	08008e3b 	.word	0x08008e3b
 8008bb8:	08008ed7 	.word	0x08008ed7
 8008bbc:	08008f39 	.word	0x08008f39
 8008bc0:	08008f39 	.word	0x08008f39
 8008bc4:	08008f39 	.word	0x08008f39
 8008bc8:	08008f39 	.word	0x08008f39
 8008bcc:	08008f39 	.word	0x08008f39
 8008bd0:	08008f39 	.word	0x08008f39
 8008bd4:	08008f39 	.word	0x08008f39
 8008bd8:	08008f39 	.word	0x08008f39
 8008bdc:	08008f39 	.word	0x08008f39
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	4413      	add	r3, r2
 8008be6:	7819      	ldrb	r1, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a18      	ldr	r0, [r3, #32]
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4403      	add	r3, r0
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	4403      	add	r3, r0
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a19      	ldr	r1, [r3, #32]
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	4413      	add	r3, r2
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	7b9b      	ldrb	r3, [r3, #14]
 8008c28:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	75bb      	strb	r3, [r7, #22]
 8008c2e:	e016      	b.n	8008c5e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	4413      	add	r3, r2
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	7d39      	ldrb	r1, [r7, #20]
 8008c3c:	7dbb      	ldrb	r3, [r7, #22]
 8008c3e:	1acb      	subs	r3, r1, r3
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	fa22 f103 	lsr.w	r1, r2, r3
 8008c46:	7dbb      	ldrb	r3, [r7, #22]
 8008c48:	005a      	lsls	r2, r3, #1
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4413      	add	r3, r2
 8008c54:	b2ca      	uxtb	r2, r1
 8008c56:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008c58:	7dbb      	ldrb	r3, [r7, #22]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	75bb      	strb	r3, [r7, #22]
 8008c5e:	7d3a      	ldrb	r2, [r7, #20]
 8008c60:	7dbb      	ldrb	r3, [r7, #22]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d2e4      	bcs.n	8008c30 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008c66:	e167      	b.n	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	7819      	ldrb	r1, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a18      	ldr	r0, [r3, #32]
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4403      	add	r3, r0
 8008c88:	781a      	ldrb	r2, [r3, #0]
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	4403      	add	r3, r0
 8008c90:	430a      	orrs	r2, r1
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	701a      	strb	r2, [r3, #0]
      break;
 8008c96:	e14f      	b.n	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	7819      	ldrb	r1, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	4413      	add	r3, r2
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	4403      	add	r3, r0
 8008cb6:	7a1a      	ldrb	r2, [r3, #8]
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	4403      	add	r3, r0
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	b2d2      	uxtb	r2, r2
 8008cc2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	75bb      	strb	r3, [r7, #22]
 8008cc8:	e016      	b.n	8008cf8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	689a      	ldr	r2, [r3, #8]
 8008cd4:	7dbb      	ldrb	r3, [r7, #22]
 8008cd6:	f1c3 0303 	rsb	r3, r3, #3
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	fa22 f103 	lsr.w	r1, r2, r3
 8008ce0:	7dbb      	ldrb	r3, [r7, #22]
 8008ce2:	005a      	lsls	r2, r3, #1
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4413      	add	r3, r2
 8008cee:	b2ca      	uxtb	r2, r1
 8008cf0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cf2:	7dbb      	ldrb	r3, [r7, #22]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	75bb      	strb	r3, [r7, #22]
 8008cf8:	7dbb      	ldrb	r3, [r7, #22]
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d9e5      	bls.n	8008cca <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008cfe:	e11b      	b.n	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	7819      	ldrb	r1, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	011b      	lsls	r3, r3, #4
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	4413      	add	r3, r2
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	4613      	mov	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	4413      	add	r3, r2
 8008d1c:	4403      	add	r3, r0
 8008d1e:	7a1a      	ldrb	r2, [r3, #8]
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4403      	add	r3, r0
 8008d26:	430a      	orrs	r2, r1
 8008d28:	b2d2      	uxtb	r2, r2
 8008d2a:	701a      	strb	r2, [r3, #0]
      break;
 8008d2c:	e104      	b.n	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	7819      	ldrb	r1, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	4613      	mov	r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4413      	add	r3, r2
 8008d4a:	4403      	add	r3, r0
 8008d4c:	7a1a      	ldrb	r2, [r3, #8]
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4403      	add	r3, r0
 8008d54:	430a      	orrs	r2, r1
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75bb      	strb	r3, [r7, #22]
 8008d5e:	e016      	b.n	8008d8e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	4413      	add	r3, r2
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	7dbb      	ldrb	r3, [r7, #22]
 8008d6c:	f1c3 0303 	rsb	r3, r3, #3
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	fa22 f103 	lsr.w	r1, r2, r3
 8008d76:	7dbb      	ldrb	r3, [r7, #22]
 8008d78:	005a      	lsls	r2, r3, #1
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	461a      	mov	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	b2ca      	uxtb	r2, r1
 8008d86:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d88:	7dbb      	ldrb	r3, [r7, #22]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	75bb      	strb	r3, [r7, #22]
 8008d8e:	7dbb      	ldrb	r3, [r7, #22]
 8008d90:	2b03      	cmp	r3, #3
 8008d92:	d9e5      	bls.n	8008d60 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008d94:	e0d0      	b.n	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d96:	2301      	movs	r3, #1
 8008d98:	75bb      	strb	r3, [r7, #22]
 8008d9a:	e016      	b.n	8008dca <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	4413      	add	r3, r2
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	7dbb      	ldrb	r3, [r7, #22]
 8008da8:	f1c3 0303 	rsb	r3, r3, #3
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	fa22 f103 	lsr.w	r1, r2, r3
 8008db2:	7dbb      	ldrb	r3, [r7, #22]
 8008db4:	005a      	lsls	r2, r3, #1
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
 8008db8:	4413      	add	r3, r2
 8008dba:	461a      	mov	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	b2ca      	uxtb	r2, r1
 8008dc2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008dc4:	7dbb      	ldrb	r3, [r7, #22]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	75bb      	strb	r3, [r7, #22]
 8008dca:	7dbb      	ldrb	r3, [r7, #22]
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d9e5      	bls.n	8008d9c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008dd0:	e0b2      	b.n	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	7819      	ldrb	r1, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	4413      	add	r3, r2
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4413      	add	r3, r2
 8008dee:	4403      	add	r3, r0
 8008df0:	7a1a      	ldrb	r2, [r3, #8]
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	4403      	add	r3, r0
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008dfe:	2301      	movs	r3, #1
 8008e00:	75bb      	strb	r3, [r7, #22]
 8008e02:	e016      	b.n	8008e32 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	011b      	lsls	r3, r3, #4
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	7dbb      	ldrb	r3, [r7, #22]
 8008e10:	f1c3 0303 	rsb	r3, r3, #3
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	fa22 f103 	lsr.w	r1, r2, r3
 8008e1a:	7dbb      	ldrb	r3, [r7, #22]
 8008e1c:	005a      	lsls	r2, r3, #1
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	4413      	add	r3, r2
 8008e22:	461a      	mov	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4413      	add	r3, r2
 8008e28:	b2ca      	uxtb	r2, r1
 8008e2a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e2c:	7dbb      	ldrb	r3, [r7, #22]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	75bb      	strb	r3, [r7, #22]
 8008e32:	7dbb      	ldrb	r3, [r7, #22]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d9e5      	bls.n	8008e04 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008e38:	e07e      	b.n	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	4413      	add	r3, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b259      	sxtb	r1, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	4413      	add	r3, r2
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	4403      	add	r3, r0
 8008e5a:	791b      	ldrb	r3, [r3, #4]
 8008e5c:	00db      	lsls	r3, r3, #3
 8008e5e:	b25b      	sxtb	r3, r3
 8008e60:	430b      	orrs	r3, r1
 8008e62:	b259      	sxtb	r1, r3
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	4413      	add	r3, r2
 8008e6a:	b2ca      	uxtb	r2, r1
 8008e6c:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	4413      	add	r3, r2
 8008e74:	7819      	ldrb	r1, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	4413      	add	r3, r2
 8008e82:	689a      	ldr	r2, [r3, #8]
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	4413      	add	r3, r2
 8008e8a:	4403      	add	r3, r0
 8008e8c:	7a1a      	ldrb	r2, [r3, #8]
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4403      	add	r3, r0
 8008e94:	430a      	orrs	r2, r1
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	75bb      	strb	r3, [r7, #22]
 8008e9e:	e016      	b.n	8008ece <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	7dbb      	ldrb	r3, [r7, #22]
 8008eac:	f1c3 0303 	rsb	r3, r3, #3
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	fa22 f103 	lsr.w	r1, r2, r3
 8008eb6:	7dbb      	ldrb	r3, [r7, #22]
 8008eb8:	005a      	lsls	r2, r3, #1
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	b2ca      	uxtb	r2, r1
 8008ec6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008ec8:	7dbb      	ldrb	r3, [r7, #22]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	75bb      	strb	r3, [r7, #22]
 8008ece:	7dbb      	ldrb	r3, [r7, #22]
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d9e5      	bls.n	8008ea0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008ed4:	e030      	b.n	8008f38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b259      	sxtb	r1, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4413      	add	r3, r2
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	4403      	add	r3, r0
 8008ef6:	791b      	ldrb	r3, [r3, #4]
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	b25b      	sxtb	r3, r3
 8008efc:	430b      	orrs	r3, r1
 8008efe:	b259      	sxtb	r1, r3
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	4413      	add	r3, r2
 8008f06:	b2ca      	uxtb	r2, r1
 8008f08:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	4413      	add	r3, r2
 8008f10:	7819      	ldrb	r1, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	4613      	mov	r3, r2
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	4413      	add	r3, r2
 8008f26:	4403      	add	r3, r0
 8008f28:	7a1a      	ldrb	r2, [r3, #8]
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	4403      	add	r3, r0
 8008f30:	430a      	orrs	r2, r1
 8008f32:	b2d2      	uxtb	r2, r2
 8008f34:	701a      	strb	r2, [r3, #0]
      break;
 8008f36:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	f67f ae0a 	bls.w	8008b5a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	371c      	adds	r7, #28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008f60:	edd7 7a00 	vldr	s15, [r7]
 8008f64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6c:	db1e      	blt.n	8008fac <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008f6e:	edd7 7a00 	vldr	s15, [r7]
 8008f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f76:	ee17 2a90 	vmov	r2, s15
 8008f7a:	edd7 7a00 	vldr	s15, [r7]
 8008f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f86:	ed97 7a00 	vldr	s14, [r7]
 8008f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f8e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9a:	bf4c      	ite	mi
 8008f9c:	2301      	movmi	r3, #1
 8008f9e:	2300      	movpl	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	f083 0301 	eor.w	r3, r3, #1
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	4413      	add	r3, r2
 8008faa:	e01a      	b.n	8008fe2 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008fac:	edd7 7a00 	vldr	s15, [r7]
 8008fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fb4:	ee17 2a90 	vmov	r2, s15
 8008fb8:	edd7 7a00 	vldr	s15, [r7]
 8008fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fc4:	ed97 7a00 	vldr	s14, [r7]
 8008fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fcc:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8008fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd8:	d501      	bpl.n	8008fde <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	1ad3      	subs	r3, r2, r3
    }
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6918      	ldr	r0, [r3, #16]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	8a9b      	ldrh	r3, [r3, #20]
 8009004:	2200      	movs	r2, #0
 8009006:	4619      	mov	r1, r3
 8009008:	f005 f8a2 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6998      	ldr	r0, [r3, #24]
 8009010:	88fa      	ldrh	r2, [r7, #6]
 8009012:	2364      	movs	r3, #100	@ 0x64
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	f006 f8ca 	bl	800f1ae <HAL_SPI_Receive>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6918      	ldr	r0, [r3, #16]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8a9b      	ldrh	r3, [r3, #20]
 8009026:	2201      	movs	r2, #1
 8009028:	4619      	mov	r1, r3
 800902a:	f005 f891 	bl	800e150 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e000      	b.n	800903a <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8009038:	2300      	movs	r3, #0
    }
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8009042:	b580      	push	{r7, lr}
 8009044:	b086      	sub	sp, #24
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	4613      	mov	r3, r2
 800904e:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6918      	ldr	r0, [r3, #16]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	8a9b      	ldrh	r3, [r3, #20]
 8009058:	2200      	movs	r2, #0
 800905a:	4619      	mov	r1, r3
 800905c:	f005 f878 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6998      	ldr	r0, [r3, #24]
 8009064:	88fa      	ldrh	r2, [r7, #6]
 8009066:	2364      	movs	r3, #100	@ 0x64
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	f005 ff64 	bl	800ef36 <HAL_SPI_Transmit>
 800906e:	4603      	mov	r3, r0
 8009070:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6918      	ldr	r0, [r3, #16]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8a9b      	ldrh	r3, [r3, #20]
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	f005 f867 	bl	800e150 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e000      	b.n	800908e <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800908c:	2300      	movs	r3, #0
    }
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8009096:	b580      	push	{r7, lr}
 8009098:	b088      	sub	sp, #32
 800909a:	af02      	add	r7, sp, #8
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6918      	ldr	r0, [r3, #16]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8a9b      	ldrh	r3, [r3, #20]
 80090ac:	2200      	movs	r2, #0
 80090ae:	4619      	mov	r1, r3
 80090b0:	f005 f84e 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6998      	ldr	r0, [r3, #24]
 80090b8:	887b      	ldrh	r3, [r7, #2]
 80090ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090be:	9200      	str	r2, [sp, #0]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	f006 f984 	bl	800f3d0 <HAL_SPI_TransmitReceive>
 80090c8:	4603      	mov	r3, r0
 80090ca:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6918      	ldr	r0, [r3, #16]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8a9b      	ldrh	r3, [r3, #20]
 80090da:	2201      	movs	r2, #1
 80090dc:	4619      	mov	r1, r3
 80090de:	f005 f837 	bl	800e150 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e008      	b.n	80090f8 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6918      	ldr	r0, [r3, #16]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8a9b      	ldrh	r3, [r3, #20]
 80090ee:	2201      	movs	r2, #1
 80090f0:	4619      	mov	r1, r3
 80090f2:	f005 f82d 	bl	800e150 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 80090f6:	2300      	movs	r3, #0
    }
 80090f8:	4618      	mov	r0, r3
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8009100:	b590      	push	{r4, r7, lr}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009116:	681c      	ldr	r4, [r3, #0]
 8009118:	887b      	ldrh	r3, [r7, #2]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	47a0      	blx	r4
    }
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	bd90      	pop	{r4, r7, pc}

0800912a <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
 8009144:	4603      	mov	r3, r0
    }
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
 8009164:	4603      	mov	r3, r0
    }
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	b2d2      	uxtb	r2, r2
 8009186:	4611      	mov	r1, r2
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	4798      	blx	r3
 800918c:	4603      	mov	r3, r0
    }
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 8009196:	b590      	push	{r4, r7, lr}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80091a6:	681c      	ldr	r4, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2100      	movs	r1, #0
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	4798      	blx	r3
 80091b8:	4603      	mov	r3, r0
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	47a0      	blx	r4
 80091c0:	4603      	mov	r3, r0
    }
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd90      	pop	{r4, r7, pc}

080091ca <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 80091ca:	b590      	push	{r4, r7, lr}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80091da:	681c      	ldr	r4, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2102      	movs	r1, #2
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	47a0      	blx	r4
 80091f4:	4603      	mov	r3, r0
    }
 80091f6:	4618      	mov	r0, r3
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd90      	pop	{r4, r7, pc}

080091fe <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 80091fe:	b5b0      	push	{r4, r5, r7, lr}
 8009200:	b082      	sub	sp, #8
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800920e:	681c      	ldr	r4, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009218:	681d      	ldr	r5, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2103      	movs	r1, #3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
 800922a:	4603      	mov	r3, r0
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	47a8      	blx	r5
 8009232:	eef0 7a40 	vmov.f32	s15, s0
 8009236:	eeb0 0a67 	vmov.f32	s0, s15
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	47a0      	blx	r4
 800923e:	4603      	mov	r3, r0
    }
 8009240:	4618      	mov	r0, r3
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bdb0      	pop	{r4, r5, r7, pc}

08009248 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8009248:	b5b0      	push	{r4, r5, r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009258:	681c      	ldr	r4, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009262:	681d      	ldr	r5, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2106      	movs	r1, #6
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
 8009274:	4603      	mov	r3, r0
 8009276:	b29b      	uxth	r3, r3
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	47a8      	blx	r5
 800927e:	eef0 7a40 	vmov.f32	s15, s0
 8009282:	eeb0 0a67 	vmov.f32	s0, s15
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	47a0      	blx	r4
 800928a:	4603      	mov	r3, r0
    }
 800928c:	4618      	mov	r0, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bdb0      	pop	{r4, r5, r7, pc}

08009294 <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8009294:	b5b0      	push	{r4, r5, r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092a4:	681c      	ldr	r4, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80092ae:	681d      	ldr	r5, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2107      	movs	r1, #7
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
 80092c0:	4603      	mov	r3, r0
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	47a8      	blx	r5
 80092ca:	eef0 7a40 	vmov.f32	s15, s0
 80092ce:	eeb0 0a67 	vmov.f32	s0, s15
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	47a0      	blx	r4
 80092d6:	4603      	mov	r3, r0
    }
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bdb0      	pop	{r4, r5, r7, pc}

080092e0 <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 80092e0:	b5b0      	push	{r4, r5, r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092f0:	681c      	ldr	r4, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80092fa:	681d      	ldr	r5, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2104      	movs	r1, #4
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3
 800930c:	4603      	mov	r3, r0
 800930e:	b29b      	uxth	r3, r3
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	47a8      	blx	r5
 8009316:	eef0 7a40 	vmov.f32	s15, s0
 800931a:	eeb0 0a67 	vmov.f32	s0, s15
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	47a0      	blx	r4
 8009322:	4603      	mov	r3, r0
    }
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bdb0      	pop	{r4, r5, r7, pc}

0800932c <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 800932c:	b5b0      	push	{r4, r5, r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800933c:	681c      	ldr	r4, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8009346:	681d      	ldr	r5, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2105      	movs	r1, #5
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
 8009358:	4603      	mov	r3, r0
 800935a:	b29b      	uxth	r3, r3
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	47a8      	blx	r5
 8009362:	eef0 7a40 	vmov.f32	s15, s0
 8009366:	eeb0 0a67 	vmov.f32	s0, s15
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	47a0      	blx	r4
 800936e:	4603      	mov	r3, r0
    }
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bdb0      	pop	{r4, r5, r7, pc}

08009378 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2104      	movs	r1, #4
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	4798      	blx	r3
 8009390:	4603      	mov	r3, r0
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 800939a:	2300      	movs	r3, #0
    }
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	b2d1      	uxtb	r1, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	4798      	blx	r3
    }
 80093c4:	bf00      	nop
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	4798      	blx	r3
    }
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 80093ea:	b590      	push	{r4, r7, lr}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093fa:	681c      	ldr	r4, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2100      	movs	r1, #0
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	4798      	blx	r3
 800940c:	4603      	mov	r3, r0
 800940e:	461a      	mov	r2, r3
 8009410:	2102      	movs	r1, #2
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	47a0      	blx	r4
    }
 8009416:	bf00      	nop
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	bd90      	pop	{r4, r7, pc}

0800941e <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 800941e:	b590      	push	{r4, r7, lr}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009430:	681c      	ldr	r4, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
 8009442:	4603      	mov	r3, r0
 8009444:	461a      	mov	r2, r3
 8009446:	2102      	movs	r1, #2
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	47a0      	blx	r4
    }
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	bd90      	pop	{r4, r7, pc}

08009454 <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009466:	681c      	ldr	r4, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	ee07 2a90 	vmov	s15, r2
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	eeb0 0a67 	vmov.f32	s0, s15
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	4603      	mov	r3, r0
 8009486:	461a      	mov	r2, r3
 8009488:	2106      	movs	r1, #6
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	47a0      	blx	r4
        return true;
 800948e:	2301      	movs	r3, #1
    }
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bd90      	pop	{r4, r7, pc}

08009498 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80094aa:	681c      	ldr	r4, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	ee07 2a90 	vmov	s15, r2
 80094bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c0:	eeb0 0a67 	vmov.f32	s0, s15
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	2107      	movs	r1, #7
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	47a0      	blx	r4
        return true;
 80094d2:	2301      	movs	r3, #1
    }
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd90      	pop	{r4, r7, pc}

080094dc <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80094ee:	681c      	ldr	r4, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	ee07 2a90 	vmov	s15, r2
 8009500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009504:	eeb0 0a67 	vmov.f32	s0, s15
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	2104      	movs	r1, #4
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	47a0      	blx	r4
        return true;
 8009516:	2301      	movs	r3, #1
    }
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	bd90      	pop	{r4, r7, pc}

08009520 <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8009520:	b590      	push	{r4, r7, lr}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009532:	681c      	ldr	r4, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	ee07 2a90 	vmov	s15, r2
 8009544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009548:	eeb0 0a67 	vmov.f32	s0, s15
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	4798      	blx	r3
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	2105      	movs	r1, #5
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	47a0      	blx	r4
        return true;
 800955a:	2301      	movs	r3, #1
    }
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	bd90      	pop	{r4, r7, pc}

08009564 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	2b07      	cmp	r3, #7
 8009574:	d901      	bls.n	800957a <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8009576:	2300      	movs	r3, #0
 8009578:	e00f      	b.n	800959a <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3380      	adds	r3, #128	@ 0x80
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	78fa      	ldrb	r2, [r7, #3]
 8009592:	2115      	movs	r1, #21
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	4798      	blx	r3
        return true;
 8009598:	2301      	movs	r3, #1
    }
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 80095a2:	b590      	push	{r4, r7, lr}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80095b4:	681c      	ldr	r4, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	47a0      	blx	r4
    }
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd90      	pop	{r4, r7, pc}

080095d6 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80095d6:	b5b0      	push	{r4, r5, r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	60f8      	str	r0, [r7, #12]
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	4613      	mov	r3, r2
 80095e2:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80095ec:	681c      	ldr	r4, [r3, #0]
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d101      	bne.n	80095f8 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 80095f4:	2501      	movs	r5, #1
 80095f6:	e000      	b.n	80095fa <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 80095f8:	2500      	movs	r5, #0
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68b9      	ldr	r1, [r7, #8]
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	4798      	blx	r3
 800960a:	4603      	mov	r3, r0
 800960c:	461a      	mov	r2, r3
 800960e:	4629      	mov	r1, r5
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	47a0      	blx	r4
    }
 8009614:	bf00      	nop
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bdb0      	pop	{r4, r5, r7, pc}

0800961c <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3
    }
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	4798      	blx	r3
    }
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8009658:	b5b0      	push	{r4, r5, r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	607b      	str	r3, [r7, #4]
 8009662:	460b      	mov	r3, r1
 8009664:	72fb      	strb	r3, [r7, #11]
 8009666:	4613      	mov	r3, r2
 8009668:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009672:	681c      	ldr	r4, [r3, #0]
 8009674:	7abb      	ldrb	r3, [r7, #10]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800967a:	2501      	movs	r5, #1
 800967c:	e000      	b.n	8009680 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800967e:	2500      	movs	r5, #0
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	ee07 2a90 	vmov	s15, r2
 8009690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009694:	eeb0 0a67 	vmov.f32	s0, s15
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	4798      	blx	r3
 800969c:	4603      	mov	r3, r0
 800969e:	7af9      	ldrb	r1, [r7, #11]
 80096a0:	462a      	mov	r2, r5
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	47a0      	blx	r4
    }
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bdb0      	pop	{r4, r5, r7, pc}

080096ae <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 80096ae:	b5b0      	push	{r4, r5, r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	460b      	mov	r3, r1
 80096b8:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80096c2:	681c      	ldr	r4, [r3, #0]
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d101      	bne.n	80096ce <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 80096ca:	2501      	movs	r5, #1
 80096cc:	e000      	b.n	80096d0 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 80096ce:	2500      	movs	r5, #0
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2106      	movs	r1, #6
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	4798      	blx	r3
 80096e0:	4603      	mov	r3, r0
 80096e2:	461a      	mov	r2, r3
 80096e4:	4629      	mov	r1, r5
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	47a0      	blx	r4
    }
 80096ea:	bf00      	nop
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bdb0      	pop	{r4, r5, r7, pc}

080096f2 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80096f2:	b5b0      	push	{r4, r5, r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	460b      	mov	r3, r1
 80096fc:	607a      	str	r2, [r7, #4]
 80096fe:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009708:	681c      	ldr	r4, [r3, #0]
 800970a:	7afb      	ldrb	r3, [r7, #11]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 8009710:	2501      	movs	r5, #1
 8009712:	e000      	b.n	8009716 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 8009714:	2500      	movs	r5, #0
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	ee07 2a90 	vmov	s15, r2
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	eeb0 0a67 	vmov.f32	s0, s15
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	4798      	blx	r3
 8009732:	4603      	mov	r3, r0
 8009734:	461a      	mov	r2, r3
 8009736:	4629      	mov	r1, r5
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	47a0      	blx	r4
    }
 800973c:	bf00      	nop
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bdb0      	pop	{r4, r5, r7, pc}

08009744 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	460b      	mov	r3, r1
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	7afa      	ldrb	r2, [r7, #11]
 800975e:	2a01      	cmp	r2, #1
 8009760:	d101      	bne.n	8009766 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 8009762:	2101      	movs	r1, #1
 8009764:	e000      	b.n	8009768 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 8009766:	2100      	movs	r1, #0
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	4798      	blx	r3
    }
 800976e:	bf00      	nop
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
    }
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
    }
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	4798      	blx	r3
    }
 80097c8:	bf00      	nop
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
    }
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80097f6:	bf00      	nop
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2101      	movs	r1, #1
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	4798      	blx	r3
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	bf0c      	ite	eq
 800980e:	2301      	moveq	r3, #1
 8009810:	2300      	movne	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1ef      	bne.n	80097f8 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3380      	adds	r3, #128	@ 0x80
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	78fa      	ldrb	r2, [r7, #3]
 8009846:	2a01      	cmp	r2, #1
 8009848:	d101      	bne.n	800984e <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 800984a:	2201      	movs	r2, #1
 800984c:	e000      	b.n	8009850 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800984e:	2200      	movs	r2, #0
 8009850:	4611      	mov	r1, r2
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
    }
 8009856:	bf00      	nop
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
 800986a:	4613      	mov	r3, r2
 800986c:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	78ba      	ldrb	r2, [r7, #2]
 800987a:	2a01      	cmp	r2, #1
 800987c:	d101      	bne.n	8009882 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800987e:	2201      	movs	r2, #1
 8009880:	e000      	b.n	8009884 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009882:	2200      	movs	r2, #0
 8009884:	78f9      	ldrb	r1, [r7, #3]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
    }
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	4798      	blx	r3
    }
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	b2d2      	uxtb	r2, r2
 80098ee:	4611      	mov	r1, r2
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2100      	movs	r1, #0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2102      	movs	r1, #2
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2103      	movs	r1, #3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2203      	movs	r2, #3
 8009970:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009974:	bf00      	nop
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2106      	movs	r1, #6
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2204      	movs	r2, #4
 8009998:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2107      	movs	r1, #7
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2205      	movs	r2, #5
 80099c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2104      	movs	r1, #4
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2206      	movs	r2, #6
 80099e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2105      	movs	r1, #5
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2207      	movs	r2, #7
 8009a10:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8009a24:	4b0b      	ldr	r3, [pc, #44]	@ (8009a54 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10a      	bne.n	8009a42 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8009a2c:	4b09      	ldr	r3, [pc, #36]	@ (8009a54 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4906      	ldr	r1, [pc, #24]	@ (8009a58 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2208      	movs	r2, #8
 8009a46:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	2000023d 	.word	0x2000023d
 8009a58:	20000240 	.word	0x20000240

08009a5c <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	b2d1      	uxtb	r1, r2
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2102      	movs	r1, #2
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2209      	movs	r2, #9
 8009ad0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8009adc:	b590      	push	{r4, r7, lr}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009aee:	681c      	ldr	r4, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
 8009b00:	4603      	mov	r3, r0
 8009b02:	461a      	mov	r2, r3
 8009b04:	2102      	movs	r1, #2
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd90      	pop	{r4, r7, pc}

08009b1a <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8009b1a:	b590      	push	{r4, r7, lr}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b2c:	681c      	ldr	r4, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	ee07 2a90 	vmov	s15, r2
 8009b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b42:	eeb0 0a67 	vmov.f32	s0, s15
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4798      	blx	r3
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	2103      	movs	r1, #3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd90      	pop	{r4, r7, pc}

08009b64 <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b76:	681c      	ldr	r4, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	ee07 2a90 	vmov	s15, r2
 8009b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	4798      	blx	r3
 8009b94:	4603      	mov	r3, r0
 8009b96:	461a      	mov	r2, r3
 8009b98:	2106      	movs	r1, #6
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ba6:	bf00      	nop
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd90      	pop	{r4, r7, pc}

08009bae <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8009bae:	b590      	push	{r4, r7, lr}
 8009bb0:	b083      	sub	sp, #12
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009bc0:	681c      	ldr	r4, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	ee07 2a90 	vmov	s15, r2
 8009bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
 8009bde:	4603      	mov	r3, r0
 8009be0:	461a      	mov	r2, r3
 8009be2:	2107      	movs	r1, #7
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd90      	pop	{r4, r7, pc}

08009bf8 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009bf8:	b590      	push	{r4, r7, lr}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009c0a:	681c      	ldr	r4, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	ee07 2a90 	vmov	s15, r2
 8009c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c20:	eeb0 0a67 	vmov.f32	s0, s15
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	2104      	movs	r1, #4
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd90      	pop	{r4, r7, pc}

08009c42 <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8009c42:	b590      	push	{r4, r7, lr}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009c54:	681c      	ldr	r4, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	ee07 2a90 	vmov	s15, r2
 8009c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	4798      	blx	r3
 8009c72:	4603      	mov	r3, r0
 8009c74:	461a      	mov	r2, r3
 8009c76:	2105      	movs	r1, #5
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd90      	pop	{r4, r7, pc}

08009c8c <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009c8c:	b590      	push	{r4, r7, lr}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8009c9e:	681c      	ldr	r4, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd90      	pop	{r4, r7, pc}

08009cc8 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009cc8:	b5b0      	push	{r4, r5, r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009cde:	681c      	ldr	r4, [r3, #0]
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d101      	bne.n	8009cea <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009ce6:	2501      	movs	r5, #1
 8009ce8:	e000      	b.n	8009cec <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009cea:	2500      	movs	r5, #0
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68b9      	ldr	r1, [r7, #8]
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	4798      	blx	r3
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	461a      	mov	r2, r3
 8009d00:	4629      	mov	r1, r5
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bdb0      	pop	{r4, r5, r7, pc}

08009d16 <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b082      	sub	sp, #8
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d34:	bf00      	nop
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009d62:	b5b0      	push	{r4, r5, r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	607b      	str	r3, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	72fb      	strb	r3, [r7, #11]
 8009d70:	4613      	mov	r3, r2
 8009d72:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009d7c:	681c      	ldr	r4, [r3, #0]
 8009d7e:	7abb      	ldrb	r3, [r7, #10]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009d84:	2501      	movs	r5, #1
 8009d86:	e000      	b.n	8009d8a <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009d88:	2500      	movs	r5, #0
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	ee07 2a90 	vmov	s15, r2
 8009d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	4798      	blx	r3
 8009da6:	4603      	mov	r3, r0
 8009da8:	7af9      	ldrb	r1, [r7, #11]
 8009daa:	462a      	mov	r2, r5
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bdb0      	pop	{r4, r5, r7, pc}

08009dc0 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009dc0:	b5b0      	push	{r4, r5, r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009dd4:	681c      	ldr	r4, [r3, #0]
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d101      	bne.n	8009de0 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009ddc:	2501      	movs	r5, #1
 8009dde:	e000      	b.n	8009de2 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009de0:	2500      	movs	r5, #0
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2106      	movs	r1, #6
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	4798      	blx	r3
 8009df2:	4603      	mov	r3, r0
 8009df4:	461a      	mov	r2, r3
 8009df6:	4629      	mov	r1, r5
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bdb0      	pop	{r4, r5, r7, pc}

08009e0c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009e0c:	b5b0      	push	{r4, r5, r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	460b      	mov	r3, r1
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009e22:	681c      	ldr	r4, [r3, #0]
 8009e24:	7afb      	ldrb	r3, [r7, #11]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d101      	bne.n	8009e2e <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009e2a:	2501      	movs	r5, #1
 8009e2c:	e000      	b.n	8009e30 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009e2e:	2500      	movs	r5, #0
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	ee07 2a90 	vmov	s15, r2
 8009e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e44:	eeb0 0a67 	vmov.f32	s0, s15
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	4798      	blx	r3
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	461a      	mov	r2, r3
 8009e50:	4629      	mov	r1, r5
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e5e:	bf00      	nop
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bdb0      	pop	{r4, r5, r7, pc}

08009e66 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	60f8      	str	r0, [r7, #12]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	7afa      	ldrb	r2, [r7, #11]
 8009e80:	2a01      	cmp	r2, #1
 8009e82:	d101      	bne.n	8009e88 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009e84:	2101      	movs	r1, #1
 8009e86:	e000      	b.n	8009e8a <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009e88:	2100      	movs	r1, #0
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e98:	bf00      	nop
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	78fa      	ldrb	r2, [r7, #3]
 8009f50:	2a01      	cmp	r2, #1
 8009f52:	d101      	bne.n	8009f58 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009f54:	2201      	movs	r2, #1
 8009f56:	e000      	b.n	8009f5a <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	78ba      	ldrb	r2, [r7, #2]
 8009f8c:	2a01      	cmp	r2, #1
 8009f8e:	d101      	bne.n	8009f94 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009f90:	2201      	movs	r2, #1
 8009f92:	e000      	b.n	8009f96 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009f94:	2200      	movs	r2, #0
 8009f96:	78f9      	ldrb	r1, [r7, #3]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	4798      	blx	r3
 8009fe8:	4603      	mov	r3, r0
    }
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 800a00c:	b5b0      	push	{r4, r5, r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800a01c:	3b01      	subs	r3, #1
 800a01e:	2b07      	cmp	r3, #7
 800a020:	f200 80fe 	bhi.w	800a220 <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 800a024:	a201      	add	r2, pc, #4	@ (adr r2, 800a02c <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 800a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02a:	bf00      	nop
 800a02c:	0800a04d 	.word	0x0800a04d
 800a030:	0800a079 	.word	0x0800a079
 800a034:	0800a0a7 	.word	0x0800a0a7
 800a038:	0800a0eb 	.word	0x0800a0eb
 800a03c:	0800a131 	.word	0x0800a131
 800a040:	0800a177 	.word	0x0800a177
 800a044:	0800a1bd 	.word	0x0800a1bd
 800a048:	0800a203 	.word	0x0800a203
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800a054:	681c      	ldr	r4, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6a12      	ldr	r2, [r2, #32]
 800a064:	7b92      	ldrb	r2, [r2, #14]
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	4798      	blx	r3
 800a06c:	4603      	mov	r3, r0
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	47a0      	blx	r4
 800a074:	4603      	mov	r3, r0
 800a076:	e0d4      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800a080:	681c      	ldr	r4, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	6a12      	ldr	r2, [r2, #32]
 800a090:	3228      	adds	r2, #40	@ 0x28
 800a092:	7b92      	ldrb	r2, [r2, #14]
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	4798      	blx	r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	47a0      	blx	r4
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	e0bd      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0ae:	681c      	ldr	r4, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800a0b8:	681d      	ldr	r5, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	6a12      	ldr	r2, [r2, #32]
 800a0c8:	323c      	adds	r2, #60	@ 0x3c
 800a0ca:	7b92      	ldrb	r2, [r2, #14]
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	4798      	blx	r3
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	47a8      	blx	r5
 800a0da:	eef0 7a40 	vmov.f32	s15, s0
 800a0de:	eeb0 0a67 	vmov.f32	s0, s15
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	47a0      	blx	r4
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	e09b      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0f2:	681c      	ldr	r4, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a0fc:	681d      	ldr	r5, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	6a12      	ldr	r2, [r2, #32]
 800a10c:	3278      	adds	r2, #120	@ 0x78
 800a10e:	7b92      	ldrb	r2, [r2, #14]
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3
 800a116:	4603      	mov	r3, r0
 800a118:	b29b      	uxth	r3, r3
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	47a8      	blx	r5
 800a120:	eef0 7a40 	vmov.f32	s15, s0
 800a124:	eeb0 0a67 	vmov.f32	s0, s15
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	47a0      	blx	r4
 800a12c:	4603      	mov	r3, r0
 800a12e:	e078      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a138:	681c      	ldr	r4, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a142:	681d      	ldr	r5, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	6a12      	ldr	r2, [r2, #32]
 800a152:	328c      	adds	r2, #140	@ 0x8c
 800a154:	7b92      	ldrb	r2, [r2, #14]
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	4798      	blx	r3
 800a15c:	4603      	mov	r3, r0
 800a15e:	b29b      	uxth	r3, r3
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	47a8      	blx	r5
 800a166:	eef0 7a40 	vmov.f32	s15, s0
 800a16a:	eeb0 0a67 	vmov.f32	s0, s15
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	47a0      	blx	r4
 800a172:	4603      	mov	r3, r0
 800a174:	e055      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a17e:	681c      	ldr	r4, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a188:	681d      	ldr	r5, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	6a12      	ldr	r2, [r2, #32]
 800a198:	3250      	adds	r2, #80	@ 0x50
 800a19a:	7b92      	ldrb	r2, [r2, #14]
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	4798      	blx	r3
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	47a8      	blx	r5
 800a1ac:	eef0 7a40 	vmov.f32	s15, s0
 800a1b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	47a0      	blx	r4
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	e032      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a1c4:	681c      	ldr	r4, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a1ce:	681d      	ldr	r5, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6a12      	ldr	r2, [r2, #32]
 800a1de:	3264      	adds	r2, #100	@ 0x64
 800a1e0:	7b92      	ldrb	r2, [r2, #14]
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	4798      	blx	r3
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	47a8      	blx	r5
 800a1f2:	eef0 7a40 	vmov.f32	s15, s0
 800a1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	47a0      	blx	r4
 800a1fe:	4603      	mov	r3, r0
 800a200:	e00f      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2104      	movs	r1, #4
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
 800a212:	4603      	mov	r3, r0
 800a214:	2b01      	cmp	r3, #1
 800a216:	d101      	bne.n	800a21c <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a218:	2301      	movs	r3, #1
 800a21a:	e002      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a21c:	2300      	movs	r3, #0
 800a21e:	e000      	b.n	800a222 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a220:	2300      	movs	r3, #0
    }
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bdb0      	pop	{r4, r5, r7, pc}
 800a22a:	bf00      	nop

0800a22c <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6898      	ldr	r0, [r3, #8]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	899b      	ldrh	r3, [r3, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	4619      	mov	r1, r3
 800a240:	f003 ff86 	bl	800e150 <HAL_GPIO_WritePin>
    }
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a25c:	d303      	bcc.n	800a266 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800a264:	e000      	b.n	800a268 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a266:	683b      	ldr	r3, [r7, #0]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	db05      	blt.n	800a290 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a28a:	da01      	bge.n	800a290 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	e00c      	b.n	800a2aa <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800a296:	db06      	blt.n	800a2a6 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	da03      	bge.n	800a2a6 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800a2a4:	e001      	b.n	800a2aa <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a2a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	ee07 3a90 	vmov	s15, r3
 800a2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2cc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a2e4 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a2d0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a2d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	3c74242a 	.word	0x3c74242a

0800a2e8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a2f4:	edd7 7a00 	vldr	s15, [r7]
 800a2f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a32c <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a2fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a304:	d80a      	bhi.n	800a31c <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a306:	ed97 7a00 	vldr	s14, [r7]
 800a30a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a330 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a30e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a316:	ee17 3a90 	vmov	r3, s15
 800a31a:	e000      	b.n	800a31e <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	4674241b 	.word	0x4674241b
 800a330:	3c74242a 	.word	0x3c74242a

0800a334 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a340:	887b      	ldrh	r3, [r7, #2]
 800a342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a346:	d209      	bcs.n	800a35c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a348:	887b      	ldrh	r3, [r7, #2]
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a352:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a370 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a35a:	e001      	b.n	800a360 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a35c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a374 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a360:	eeb0 0a67 	vmov.f32	s0, s15
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	4168d4fe 	.word	0x4168d4fe
 800a374:	00000000 	.word	0x00000000

0800a378 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a384:	edd7 7a00 	vldr	s15, [r7]
 800a388:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a3bc <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a38c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a394:	d80b      	bhi.n	800a3ae <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a396:	ed97 7a00 	vldr	s14, [r7]
 800a39a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a3c0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a39e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a6:	ee17 3a90 	vmov	r3, s15
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	e000      	b.n	800a3b0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	4768c671 	.word	0x4768c671
 800a3c0:	4168d4fe 	.word	0x4168d4fe

0800a3c4 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a3d0:	887b      	ldrh	r3, [r7, #2]
 800a3d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3d6:	d209      	bcs.n	800a3ec <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a3d8:	887b      	ldrh	r3, [r7, #2]
 800a3da:	ee07 3a90 	vmov	s15, r3
 800a3de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3e2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a400 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a3e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3ea:	e001      	b.n	800a3f0 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a3ec:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a404 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a3f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	4168d4fe 	.word	0x4168d4fe
 800a404:	00000000 	.word	0x00000000

0800a408 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a414:	edd7 7a00 	vldr	s15, [r7]
 800a418:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a44c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a41c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a424:	d80b      	bhi.n	800a43e <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a426:	ed97 7a00 	vldr	s14, [r7]
 800a42a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a450 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a42e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a436:	ee17 3a90 	vmov	r3, s15
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	e000      	b.n	800a440 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	4768c671 	.word	0x4768c671
 800a450:	4168d4fe 	.word	0x4168d4fe

0800a454 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a460:	887b      	ldrh	r3, [r7, #2]
 800a462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a466:	d209      	bcs.n	800a47c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a468:	887b      	ldrh	r3, [r7, #2]
 800a46a:	ee07 3a90 	vmov	s15, r3
 800a46e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a472:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a490 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a47a:	e001      	b.n	800a480 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a47c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a494 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a480:	eeb0 0a67 	vmov.f32	s0, s15
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	4174240b 	.word	0x4174240b
 800a494:	00000000 	.word	0x00000000

0800a498 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a4a4:	edd7 7a00 	vldr	s15, [r7]
 800a4a8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a4dc <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a4ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b4:	d80b      	bhi.n	800a4ce <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a4b6:	ed97 7a00 	vldr	s14, [r7]
 800a4ba:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a4e0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a4be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c6:	ee17 3a90 	vmov	r3, s15
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	e000      	b.n	800a4d0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	4673e702 	.word	0x4673e702
 800a4e0:	4174240b 	.word	0x4174240b

0800a4e4 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a4f0:	887b      	ldrh	r3, [r7, #2]
 800a4f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4f6:	d209      	bcs.n	800a50c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a4f8:	887b      	ldrh	r3, [r7, #2]
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a502:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a520 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a50a:	e001      	b.n	800a510 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a50c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a524 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a510:	eeb0 0a67 	vmov.f32	s0, s15
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	3e742401 	.word	0x3e742401
 800a524:	00000000 	.word	0x00000000

0800a528 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a534:	edd7 7a00 	vldr	s15, [r7]
 800a538:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a56c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a53c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a544:	d80b      	bhi.n	800a55e <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a546:	ed97 7a00 	vldr	s14, [r7]
 800a54a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a570 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a54e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a556:	ee17 3a90 	vmov	r3, s15
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	e000      	b.n	800a560 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	447414bf 	.word	0x447414bf
 800a570:	3e742401 	.word	0x3e742401

0800a574 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a580:	887b      	ldrh	r3, [r7, #2]
 800a582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a586:	d219      	bcs.n	800a5bc <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a588:	887b      	ldrh	r3, [r7, #2]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7f5 fffa 	bl	8000584 <__aeabi_i2d>
 800a590:	f04f 0200 	mov.w	r2, #0
 800a594:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d0 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a596:	f7f5 fea9 	bl	80002ec <__adddf3>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4610      	mov	r0, r2
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f04f 0200 	mov.w	r2, #0
 800a5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d4 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a5a8:	f7f6 f856 	bl	8000658 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f7f6 fb28 	bl	8000c08 <__aeabi_d2f>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	e001      	b.n	800a5c0 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a5bc:	f04f 0300 	mov.w	r3, #0
}
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	3fe00000 	.word	0x3fe00000
 800a5d4:	402e8000 	.word	0x402e8000

0800a5d8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a5e4:	edd7 7a00 	vldr	s15, [r7]
 800a5e8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a624 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a5ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f4:	d80f      	bhi.n	800a616 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a5f6:	ed97 7a00 	vldr	s14, [r7]
 800a5fa:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800a628 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a5fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a602:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a60a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a60e:	ee17 3a90 	vmov	r3, s15
 800a612:	b29b      	uxth	r3, r3
 800a614:	e000      	b.n	800a618 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	4673e180 	.word	0x4673e180
 800a628:	41740000 	.word	0x41740000

0800a62c <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a638:	887b      	ldrh	r3, [r7, #2]
 800a63a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a63e:	d209      	bcs.n	800a654 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a640:	887b      	ldrh	r3, [r7, #2]
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a64a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a668 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a64e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a652:	e001      	b.n	800a658 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a654:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a66c <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a658:	eeb0 0a67 	vmov.f32	s0, s15
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	3d7423f4 	.word	0x3d7423f4
 800a66c:	00000000 	.word	0x00000000

0800a670 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a67c:	edd7 7a00 	vldr	s15, [r7]
 800a680:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a6b4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a684:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68c:	d80b      	bhi.n	800a6a6 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a68e:	ed97 7a00 	vldr	s14, [r7]
 800a692:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a6b8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69e:	ee17 3a90 	vmov	r3, s15
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	e000      	b.n	800a6a8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	44742023 	.word	0x44742023
 800a6b8:	3d7423f4 	.word	0x3d7423f4

0800a6bc <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a6c8:	78fb      	ldrb	r3, [r7, #3]
 800a6ca:	ee07 3a90 	vmov	s15, r3
 800a6ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6d2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a6e8 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a6d6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a6da:	eeb0 0a67 	vmov.f32	s0, s15
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	3783956e 	.word	0x3783956e

0800a6ec <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a6f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6fc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a734 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a700:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a708:	d80c      	bhi.n	800a724 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a70a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a70e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a738 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a71e:	793b      	ldrb	r3, [r7, #4]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	e000      	b.n	800a726 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	3b8311d9 	.word	0x3b8311d9
 800a738:	3783956e 	.word	0x3783956e

0800a73c <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	ee07 3a90 	vmov	s15, r3
 800a74e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a752:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a768 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a756:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a75a:	eeb0 0a67 	vmov.f32	s0, s15
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	3783956e 	.word	0x3783956e

0800a76c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a778:	edd7 7a02 	vldr	s15, [r7, #8]
 800a77c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a7b4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a780:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a788:	d80c      	bhi.n	800a7a4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a78a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a78e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a7b8 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a79a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a79e:	793b      	ldrb	r3, [r7, #4]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	e000      	b.n	800a7a6 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	3b8311d9 	.word	0x3b8311d9
 800a7b8:	3783956e 	.word	0x3783956e

0800a7bc <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a7c8:	78fb      	ldrb	r3, [r7, #3]
 800a7ca:	ee07 3a90 	vmov	s15, r3
 800a7ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7d2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a7e8 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a7d6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a7da:	eeb0 0a67 	vmov.f32	s0, s15
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	3783956e 	.word	0x3783956e

0800a7ec <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a7f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a7fc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a834 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a800:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	d80c      	bhi.n	800a824 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a80a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a80e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a838 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a81a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a81e:	793b      	ldrb	r3, [r7, #4]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	e000      	b.n	800a826 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	3b8311d9 	.word	0x3b8311d9
 800a838:	3783956e 	.word	0x3783956e

0800a83c <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	2b0f      	cmp	r3, #15
 800a84c:	d80a      	bhi.n	800a864 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a84e:	78fb      	ldrb	r3, [r7, #3]
 800a850:	3301      	adds	r3, #1
 800a852:	ee07 3a90 	vmov	s15, r3
 800a856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a85a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a878 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a85e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a862:	e001      	b.n	800a868 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a864:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a87c <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a868:	eeb0 0a67 	vmov.f32	s0, s15
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	43bb8000 	.word	0x43bb8000
 800a87c:	00000000 	.word	0x00000000

0800a880 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a88c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a890:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a91c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a894:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89c:	d836      	bhi.n	800a90c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a89e:	ed97 7a02 	vldr	s14, [r7, #8]
 800a8a2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a920 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a8a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8aa:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a8ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8ba:	793b      	ldrb	r3, [r7, #4]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800a8ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ce:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a8d2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a8d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a8da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e2:	d50a      	bpl.n	800a8fa <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a8e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ec:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8f0:	793b      	ldrb	r3, [r7, #4]
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	e009      	b.n	800a90e <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a8fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a902:	edc7 7a01 	vstr	s15, [r7, #4]
 800a906:	793b      	ldrb	r3, [r7, #4]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	e000      	b.n	800a90e <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	45bb8000 	.word	0x45bb8000
 800a920:	43bb8000 	.word	0x43bb8000

0800a924 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a934:	2b00      	cmp	r3, #0
 800a936:	db0a      	blt.n	800a94e <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	3301      	adds	r3, #1
 800a93c:	ee07 3a90 	vmov	s15, r3
 800a940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a944:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a960 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a94c:	e001      	b.n	800a952 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a94e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a964 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a952:	eeb0 0a67 	vmov.f32	s0, s15
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	41fa0000 	.word	0x41fa0000
 800a964:	00000000 	.word	0x00000000

0800a968 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a974:	edd7 7a02 	vldr	s15, [r7, #8]
 800a978:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800aa04 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a97c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	d836      	bhi.n	800a9f4 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a986:	ed97 7a02 	vldr	s14, [r7, #8]
 800a98a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800aa08 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a98e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a992:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a996:	edd7 7a05 	vldr	s15, [r7, #20]
 800a99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a99e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a9a2:	793b      	ldrb	r3, [r7, #4]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9ae:	ed97 7a05 	vldr	s14, [r7, #20]
 800a9b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9b6:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a9ba:	edd7 7a04 	vldr	s15, [r7, #16]
 800a9be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a9c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ca:	d50a      	bpl.n	800a9e2 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a9cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800a9d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9d4:	edc7 7a01 	vstr	s15, [r7, #4]
 800a9d8:	793b      	ldrb	r3, [r7, #4]
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	e009      	b.n	800a9f6 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a9e2:	edd7 7a05 	vldr	s15, [r7, #20]
 800a9e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ea:	edc7 7a01 	vstr	s15, [r7, #4]
 800a9ee:	793b      	ldrb	r3, [r7, #4]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	e000      	b.n	800a9f6 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	457a0000 	.word	0x457a0000
 800aa08:	41fa0000 	.word	0x41fa0000

0800aa0c <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
  reset_device();
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3394      	adds	r3, #148	@ 0x94
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	4798      	blx	r3
  get_status();
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	330c      	adds	r3, #12
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	edd2 7a05 	vldr	s15, [r2, #20]
 800aa42:	eeb0 0a67 	vmov.f32	s0, s15
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	4798      	blx	r3
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	edd2 7a06 	vldr	s15, [r2, #24]
 800aa64:	eeb0 0a67 	vmov.f32	s0, s15
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	4798      	blx	r3
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	461a      	mov	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	edd2 7a07 	vldr	s15, [r2, #28]
 800aa86:	eeb0 0a67 	vmov.f32	s0, s15
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	4798      	blx	r3
 800aa8e:	4603      	mov	r3, r0
 800aa90:	461a      	mov	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	edd2 7a08 	vldr	s15, [r2, #32]
 800aaa8:	eeb0 0a67 	vmov.f32	s0, s15
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	4798      	blx	r3
 800aab0:	4603      	mov	r3, r0
 800aab2:	461a      	mov	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800aaca:	eeb0 0a67 	vmov.f32	s0, s15
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	4798      	blx	r3
 800aad2:	4603      	mov	r3, r0
 800aad4:	461a      	mov	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800aae2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800adb4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aae6:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	ed93 7a00 	vldr	s14, [r3]
 800aaf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaf8:	edc7 7a01 	vstr	s15, [r7, #4]
 800aafc:	793b      	ldrb	r3, [r7, #4]
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ab0c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800adb4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800ab10:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	ed93 7a00 	vldr	s14, [r3]
 800ab1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab22:	edc7 7a01 	vstr	s15, [r7, #4]
 800ab26:	793b      	ldrb	r3, [r7, #4]
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ab36:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800adb4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800ab3a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	ed93 7a00 	vldr	s14, [r3]
 800ab44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab4c:	edc7 7a01 	vstr	s15, [r7, #4]
 800ab50:	793b      	ldrb	r3, [r7, #4]
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800ab60:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800adb4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800ab64:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	ed93 7a00 	vldr	s14, [r3]
 800ab6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab76:	edc7 7a01 	vstr	s15, [r7, #4]
 800ab7a:	793b      	ldrb	r3, [r7, #4]
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800ab94:	eeb0 0a67 	vmov.f32	s0, s15
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	4798      	blx	r3
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	461a      	mov	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800abb6:	eeb0 0a67 	vmov.f32	s0, s15
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	4798      	blx	r3
 800abbe:	4603      	mov	r3, r0
 800abc0:	461a      	mov	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800abd8:	eeb0 0a67 	vmov.f32	s0, s15
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	4798      	blx	r3
 800abe0:	4603      	mov	r3, r0
 800abe2:	461a      	mov	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800abfa:	eeb0 0a67 	vmov.f32	s0, s15
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	4798      	blx	r3
 800ac02:	4603      	mov	r3, r0
 800ac04:	461a      	mov	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800ac28:	eeb0 0a67 	vmov.f32	s0, s15
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	4798      	blx	r3
 800ac30:	4603      	mov	r3, r0
 800ac32:	461a      	mov	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800ac4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	4798      	blx	r3
 800ac52:	4603      	mov	r3, r0
 800ac54:	461a      	mov	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800ac90:	2104      	movs	r1, #4
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800aca6:	2105      	movs	r1, #5
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800acbc:	2106      	movs	r1, #6
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800acd2:	2107      	movs	r1, #7
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800ace8:	2108      	movs	r1, #8
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800acfe:	2109      	movs	r1, #9
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800ad14:	210a      	movs	r1, #10
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800ad2a:	210b      	movs	r1, #11
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800ad40:	210c      	movs	r1, #12
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800ad56:	210d      	movs	r1, #13
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800ad6c:	210e      	movs	r1, #14
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800ad82:	210f      	movs	r1, #15
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800ad98:	2110      	movs	r1, #16
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800adae:	2111      	movs	r1, #17
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	e001      	b.n	800adb8 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800adb4:	43800000 	.word	0x43800000
 800adb8:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800adca:	2113      	movs	r1, #19
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800ade0:	2114      	movs	r1, #20
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800adf6:	2116      	movs	r1, #22
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800ae0c:	2117      	movs	r1, #23
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3354      	adds	r3, #84	@ 0x54
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800ae20:	4611      	mov	r1, r2
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	4798      	blx	r3
 800ae26:	4603      	mov	r3, r0
 800ae28:	f083 0301 	eor.w	r3, r3, #1
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e000      	b.n	800ae38 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800ae40:	b590      	push	{r4, r7, lr}
 800ae42:	b087      	sub	sp, #28
 800ae44:	af02      	add	r7, sp, #8
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae56:	681c      	ldr	r4, [r3, #0]
 800ae58:	7afa      	ldrb	r2, [r7, #11]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	4613      	mov	r3, r2
 800ae64:	2201      	movs	r2, #1
 800ae66:	490c      	ldr	r1, [pc, #48]	@ (800ae98 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a09      	ldr	r2, [pc, #36]	@ (800ae9c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ae78:	4907      	ldr	r1, [pc, #28]	@ (800ae98 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a05      	ldr	r2, [pc, #20]	@ (800aea0 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800ae8a:	4904      	ldr	r1, [pc, #16]	@ (800ae9c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	4798      	blx	r3
}
 800ae90:	bf00      	nop
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd90      	pop	{r4, r7, pc}
 800ae98:	20000240 	.word	0x20000240
 800ae9c:	20000260 	.word	0x20000260
 800aea0:	20000268 	.word	0x20000268

0800aea4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800aea4:	b590      	push	{r4, r7, lr}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aeb8:	681c      	ldr	r4, [r3, #0]
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	2200      	movs	r2, #0
 800aebe:	9201      	str	r2, [sp, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	9200      	str	r2, [sp, #0]
 800aec4:	2202      	movs	r2, #2
 800aec6:	4917      	ldr	r1, [pc, #92]	@ (800af24 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a14      	ldr	r2, [pc, #80]	@ (800af28 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800aed8:	4912      	ldr	r1, [pc, #72]	@ (800af24 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a10      	ldr	r2, [pc, #64]	@ (800af2c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800aeea:	490f      	ldr	r1, [pc, #60]	@ (800af28 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a19      	ldr	r1, [r3, #32]
 800aef4:	78fa      	ldrb	r2, [r7, #3]
 800aef6:	4613      	mov	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	440b      	add	r3, r1
 800af00:	7b9b      	ldrb	r3, [r3, #14]
 800af02:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	7bfa      	ldrb	r2, [r7, #15]
 800af10:	4906      	ldr	r1, [pc, #24]	@ (800af2c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	4798      	blx	r3
 800af16:	4603      	mov	r3, r0
 800af18:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800af1a:	68bb      	ldr	r3, [r7, #8]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	bd90      	pop	{r4, r7, pc}
 800af24:	20000240 	.word	0x20000240
 800af28:	20000260 	.word	0x20000260
 800af2c:	20000268 	.word	0x20000268

0800af30 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800af30:	b590      	push	{r4, r7, lr}
 800af32:	b087      	sub	sp, #28
 800af34:	af02      	add	r7, sp, #8
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	460b      	mov	r3, r1
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af46:	681c      	ldr	r4, [r3, #0]
 800af48:	7afa      	ldrb	r2, [r7, #11]
 800af4a:	2300      	movs	r3, #0
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	4613      	mov	r3, r2
 800af54:	2203      	movs	r2, #3
 800af56:	490c      	ldr	r1, [pc, #48]	@ (800af88 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a09      	ldr	r2, [pc, #36]	@ (800af8c <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800af68:	4907      	ldr	r1, [pc, #28]	@ (800af88 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a05      	ldr	r2, [pc, #20]	@ (800af90 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800af7a:	4904      	ldr	r1, [pc, #16]	@ (800af8c <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	4798      	blx	r3
}
 800af80:	bf00      	nop
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	bd90      	pop	{r4, r7, pc}
 800af88:	20000240 	.word	0x20000240
 800af8c:	20000260 	.word	0x20000260
 800af90:	20000268 	.word	0x20000268

0800af94 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800af94:	b590      	push	{r4, r7, lr}
 800af96:	b085      	sub	sp, #20
 800af98:	af02      	add	r7, sp, #8
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800afa8:	681c      	ldr	r4, [r3, #0]
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	2200      	movs	r2, #0
 800afae:	9201      	str	r2, [sp, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	9200      	str	r2, [sp, #0]
 800afb4:	2204      	movs	r2, #4
 800afb6:	490c      	ldr	r1, [pc, #48]	@ (800afe8 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a09      	ldr	r2, [pc, #36]	@ (800afec <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800afc8:	4907      	ldr	r1, [pc, #28]	@ (800afe8 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a05      	ldr	r2, [pc, #20]	@ (800aff0 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800afda:	4904      	ldr	r1, [pc, #16]	@ (800afec <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	4798      	blx	r3
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd90      	pop	{r4, r7, pc}
 800afe8:	20000240 	.word	0x20000240
 800afec:	20000260 	.word	0x20000260
 800aff0:	20000268 	.word	0x20000268

0800aff4 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800aff4:	b590      	push	{r4, r7, lr}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af02      	add	r7, sp, #8
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	460b      	mov	r3, r1
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b00a:	681c      	ldr	r4, [r3, #0]
 800b00c:	7afa      	ldrb	r2, [r7, #11]
 800b00e:	2300      	movs	r3, #0
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	4613      	mov	r3, r2
 800b018:	2205      	movs	r2, #5
 800b01a:	490c      	ldr	r1, [pc, #48]	@ (800b04c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a09      	ldr	r2, [pc, #36]	@ (800b050 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800b02c:	4907      	ldr	r1, [pc, #28]	@ (800b04c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a05      	ldr	r2, [pc, #20]	@ (800b054 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800b03e:	4904      	ldr	r1, [pc, #16]	@ (800b050 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	4798      	blx	r3
}
 800b044:	bf00      	nop
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd90      	pop	{r4, r7, pc}
 800b04c:	20000240 	.word	0x20000240
 800b050:	20000260 	.word	0x20000260
 800b054:	20000268 	.word	0x20000268

0800b058 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b068:	d21f      	bcs.n	800b0aa <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b072:	681c      	ldr	r4, [r3, #0]
 800b074:	2300      	movs	r3, #0
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	2300      	movs	r3, #0
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	2206      	movs	r2, #6
 800b080:	490c      	ldr	r1, [pc, #48]	@ (800b0b4 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a09      	ldr	r2, [pc, #36]	@ (800b0b8 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b092:	4908      	ldr	r1, [pc, #32]	@ (800b0b4 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a06      	ldr	r2, [pc, #24]	@ (800b0bc <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800b0a4:	4904      	ldr	r1, [pc, #16]	@ (800b0b8 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	4798      	blx	r3
}
 800b0aa:	bf00      	nop
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd90      	pop	{r4, r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000240 	.word	0x20000240
 800b0b8:	20000260 	.word	0x20000260
 800b0bc:	20000268 	.word	0x20000268

0800b0c0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b0c0:	b590      	push	{r4, r7, lr}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b0d4:	d220      	bcs.n	800b118 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b0de:	681c      	ldr	r4, [r3, #0]
 800b0e0:	7afa      	ldrb	r2, [r7, #11]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	2207      	movs	r2, #7
 800b0ee:	490c      	ldr	r1, [pc, #48]	@ (800b120 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a09      	ldr	r2, [pc, #36]	@ (800b124 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b100:	4907      	ldr	r1, [pc, #28]	@ (800b120 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a05      	ldr	r2, [pc, #20]	@ (800b128 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800b112:	4904      	ldr	r1, [pc, #16]	@ (800b124 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	4798      	blx	r3
}
 800b118:	bf00      	nop
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd90      	pop	{r4, r7, pc}
 800b120:	20000240 	.word	0x20000240
 800b124:	20000260 	.word	0x20000260
 800b128:	20000268 	.word	0x20000268

0800b12c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b12c:	b590      	push	{r4, r7, lr}
 800b12e:	b087      	sub	sp, #28
 800b130:	af02      	add	r7, sp, #8
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	607b      	str	r3, [r7, #4]
 800b136:	460b      	mov	r3, r1
 800b138:	72fb      	strb	r3, [r7, #11]
 800b13a:	4613      	mov	r3, r2
 800b13c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b146:	681c      	ldr	r4, [r3, #0]
 800b148:	7af9      	ldrb	r1, [r7, #11]
 800b14a:	7abb      	ldrb	r3, [r7, #10]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	9201      	str	r2, [sp, #4]
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	460b      	mov	r3, r1
 800b154:	2208      	movs	r2, #8
 800b156:	490c      	ldr	r1, [pc, #48]	@ (800b188 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a09      	ldr	r2, [pc, #36]	@ (800b18c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b168:	4907      	ldr	r1, [pc, #28]	@ (800b188 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a05      	ldr	r2, [pc, #20]	@ (800b190 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800b17a:	4904      	ldr	r1, [pc, #16]	@ (800b18c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	4798      	blx	r3
}
 800b180:	bf00      	nop
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	bd90      	pop	{r4, r7, pc}
 800b188:	20000240 	.word	0x20000240
 800b18c:	20000260 	.word	0x20000260
 800b190:	20000268 	.word	0x20000268

0800b194 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b085      	sub	sp, #20
 800b198:	af02      	add	r7, sp, #8
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	460b      	mov	r3, r1
 800b19e:	70fb      	strb	r3, [r7, #3]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1ac:	681c      	ldr	r4, [r3, #0]
 800b1ae:	78fa      	ldrb	r2, [r7, #3]
 800b1b0:	78bb      	ldrb	r3, [r7, #2]
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	9101      	str	r1, [sp, #4]
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	2209      	movs	r2, #9
 800b1bc:	490c      	ldr	r1, [pc, #48]	@ (800b1f0 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a09      	ldr	r2, [pc, #36]	@ (800b1f4 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b1ce:	4908      	ldr	r1, [pc, #32]	@ (800b1f0 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a06      	ldr	r2, [pc, #24]	@ (800b1f8 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b1e0:	4904      	ldr	r1, [pc, #16]	@ (800b1f4 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	4798      	blx	r3
}
 800b1e6:	bf00      	nop
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd90      	pop	{r4, r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20000240 	.word	0x20000240
 800b1f4:	20000260 	.word	0x20000260
 800b1f8:	20000268 	.word	0x20000268

0800b1fc <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b1fc:	b590      	push	{r4, r7, lr}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af02      	add	r7, sp, #8
 800b202:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b20c:	681c      	ldr	r4, [r3, #0]
 800b20e:	2300      	movs	r3, #0
 800b210:	9301      	str	r3, [sp, #4]
 800b212:	2300      	movs	r3, #0
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	2300      	movs	r3, #0
 800b218:	220a      	movs	r2, #10
 800b21a:	490c      	ldr	r1, [pc, #48]	@ (800b24c <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a09      	ldr	r2, [pc, #36]	@ (800b250 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b22c:	4907      	ldr	r1, [pc, #28]	@ (800b24c <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a05      	ldr	r2, [pc, #20]	@ (800b254 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b23e:	4904      	ldr	r1, [pc, #16]	@ (800b250 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	4798      	blx	r3
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd90      	pop	{r4, r7, pc}
 800b24c:	20000240 	.word	0x20000240
 800b250:	20000260 	.word	0x20000260
 800b254:	20000268 	.word	0x20000268

0800b258 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b258:	b590      	push	{r4, r7, lr}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af02      	add	r7, sp, #8
 800b25e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b268:	681c      	ldr	r4, [r3, #0]
 800b26a:	2300      	movs	r3, #0
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	2300      	movs	r3, #0
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	2300      	movs	r3, #0
 800b274:	220b      	movs	r2, #11
 800b276:	490c      	ldr	r1, [pc, #48]	@ (800b2a8 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a09      	ldr	r2, [pc, #36]	@ (800b2ac <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b288:	4907      	ldr	r1, [pc, #28]	@ (800b2a8 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a05      	ldr	r2, [pc, #20]	@ (800b2b0 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b29a:	4904      	ldr	r1, [pc, #16]	@ (800b2ac <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	4798      	blx	r3
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd90      	pop	{r4, r7, pc}
 800b2a8:	20000240 	.word	0x20000240
 800b2ac:	20000260 	.word	0x20000260
 800b2b0:	20000268 	.word	0x20000268

0800b2b4 <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b2b4:	b590      	push	{r4, r7, lr}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af02      	add	r7, sp, #8
 800b2ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2c4:	681c      	ldr	r4, [r3, #0]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	220c      	movs	r2, #12
 800b2d2:	490c      	ldr	r1, [pc, #48]	@ (800b304 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a09      	ldr	r2, [pc, #36]	@ (800b308 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b2e4:	4907      	ldr	r1, [pc, #28]	@ (800b304 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a05      	ldr	r2, [pc, #20]	@ (800b30c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b2f6:	4904      	ldr	r1, [pc, #16]	@ (800b308 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	4798      	blx	r3
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	bd90      	pop	{r4, r7, pc}
 800b304:	20000240 	.word	0x20000240
 800b308:	20000260 	.word	0x20000260
 800b30c:	20000268 	.word	0x20000268

0800b310 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b310:	b590      	push	{r4, r7, lr}
 800b312:	b085      	sub	sp, #20
 800b314:	af02      	add	r7, sp, #8
 800b316:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b320:	681c      	ldr	r4, [r3, #0]
 800b322:	2300      	movs	r3, #0
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	2300      	movs	r3, #0
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	2300      	movs	r3, #0
 800b32c:	220d      	movs	r2, #13
 800b32e:	490c      	ldr	r1, [pc, #48]	@ (800b360 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a09      	ldr	r2, [pc, #36]	@ (800b364 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b340:	4907      	ldr	r1, [pc, #28]	@ (800b360 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a05      	ldr	r2, [pc, #20]	@ (800b368 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b352:	4904      	ldr	r1, [pc, #16]	@ (800b364 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd90      	pop	{r4, r7, pc}
 800b360:	20000240 	.word	0x20000240
 800b364:	20000260 	.word	0x20000260
 800b368:	20000268 	.word	0x20000268

0800b36c <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b36c:	b590      	push	{r4, r7, lr}
 800b36e:	b085      	sub	sp, #20
 800b370:	af02      	add	r7, sp, #8
 800b372:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b37c:	681c      	ldr	r4, [r3, #0]
 800b37e:	2300      	movs	r3, #0
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	2300      	movs	r3, #0
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	2300      	movs	r3, #0
 800b388:	220e      	movs	r2, #14
 800b38a:	490c      	ldr	r1, [pc, #48]	@ (800b3bc <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a09      	ldr	r2, [pc, #36]	@ (800b3c0 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b39c:	4907      	ldr	r1, [pc, #28]	@ (800b3bc <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a05      	ldr	r2, [pc, #20]	@ (800b3c4 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b3ae:	4904      	ldr	r1, [pc, #16]	@ (800b3c0 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	4798      	blx	r3
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd90      	pop	{r4, r7, pc}
 800b3bc:	20000240 	.word	0x20000240
 800b3c0:	20000260 	.word	0x20000260
 800b3c4:	20000268 	.word	0x20000268

0800b3c8 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af02      	add	r7, sp, #8
 800b3ce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3d8:	681c      	ldr	r4, [r3, #0]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	220f      	movs	r2, #15
 800b3e6:	490c      	ldr	r1, [pc, #48]	@ (800b418 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a09      	ldr	r2, [pc, #36]	@ (800b41c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b3f8:	4907      	ldr	r1, [pc, #28]	@ (800b418 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a05      	ldr	r2, [pc, #20]	@ (800b420 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b40a:	4904      	ldr	r1, [pc, #16]	@ (800b41c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	4798      	blx	r3
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	bd90      	pop	{r4, r7, pc}
 800b418:	20000240 	.word	0x20000240
 800b41c:	20000260 	.word	0x20000260
 800b420:	20000268 	.word	0x20000268

0800b424 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b424:	b590      	push	{r4, r7, lr}
 800b426:	b085      	sub	sp, #20
 800b428:	af02      	add	r7, sp, #8
 800b42a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b434:	681c      	ldr	r4, [r3, #0]
 800b436:	2300      	movs	r3, #0
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	2300      	movs	r3, #0
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	2300      	movs	r3, #0
 800b440:	2210      	movs	r2, #16
 800b442:	490c      	ldr	r1, [pc, #48]	@ (800b474 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a09      	ldr	r2, [pc, #36]	@ (800b478 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b454:	4907      	ldr	r1, [pc, #28]	@ (800b474 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a05      	ldr	r2, [pc, #20]	@ (800b47c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b466:	4904      	ldr	r1, [pc, #16]	@ (800b478 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	4798      	blx	r3
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	bd90      	pop	{r4, r7, pc}
 800b474:	20000240 	.word	0x20000240
 800b478:	20000260 	.word	0x20000260
 800b47c:	20000268 	.word	0x20000268

0800b480 <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b480:	b590      	push	{r4, r7, lr}
 800b482:	b085      	sub	sp, #20
 800b484:	af02      	add	r7, sp, #8
 800b486:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b490:	681c      	ldr	r4, [r3, #0]
 800b492:	2300      	movs	r3, #0
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	2300      	movs	r3, #0
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	2300      	movs	r3, #0
 800b49c:	2211      	movs	r2, #17
 800b49e:	490c      	ldr	r1, [pc, #48]	@ (800b4d0 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a09      	ldr	r2, [pc, #36]	@ (800b4d4 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b4b0:	4907      	ldr	r1, [pc, #28]	@ (800b4d0 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a05      	ldr	r2, [pc, #20]	@ (800b4d8 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b4c2:	4904      	ldr	r1, [pc, #16]	@ (800b4d4 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	4798      	blx	r3
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd90      	pop	{r4, r7, pc}
 800b4d0:	20000240 	.word	0x20000240
 800b4d4:	20000260 	.word	0x20000260
 800b4d8:	20000268 	.word	0x20000268

0800b4dc <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b4dc:	b590      	push	{r4, r7, lr}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4ec:	681c      	ldr	r4, [r3, #0]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2212      	movs	r2, #18
 800b4fa:	4912      	ldr	r1, [pc, #72]	@ (800b544 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a0f      	ldr	r2, [pc, #60]	@ (800b548 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b50c:	490d      	ldr	r1, [pc, #52]	@ (800b544 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a0b      	ldr	r2, [pc, #44]	@ (800b54c <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b51e:	490a      	ldr	r1, [pc, #40]	@ (800b548 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2202      	movs	r2, #2
 800b530:	4906      	ldr	r1, [pc, #24]	@ (800b54c <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	4798      	blx	r3
 800b536:	4603      	mov	r3, r0
 800b538:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b53a:	89fb      	ldrh	r3, [r7, #14]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	bd90      	pop	{r4, r7, pc}
 800b544:	20000240 	.word	0x20000240
 800b548:	20000260 	.word	0x20000260
 800b54c:	20000268 	.word	0x20000268

0800b550 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b550:	b590      	push	{r4, r7, lr}
 800b552:	b087      	sub	sp, #28
 800b554:	af02      	add	r7, sp, #8
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	460b      	mov	r3, r1
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b566:	681c      	ldr	r4, [r3, #0]
 800b568:	7afa      	ldrb	r2, [r7, #11]
 800b56a:	2300      	movs	r3, #0
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	4613      	mov	r3, r2
 800b574:	2201      	movs	r2, #1
 800b576:	4903      	ldr	r1, [pc, #12]	@ (800b584 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	47a0      	blx	r4
}
 800b57c:	bf00      	nop
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	bd90      	pop	{r4, r7, pc}
 800b584:	20000240 	.word	0x20000240

0800b588 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b588:	b590      	push	{r4, r7, lr}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af02      	add	r7, sp, #8
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b59c:	681c      	ldr	r4, [r3, #0]
 800b59e:	78fb      	ldrb	r3, [r7, #3]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	9201      	str	r2, [sp, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	9200      	str	r2, [sp, #0]
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	4903      	ldr	r1, [pc, #12]	@ (800b5b8 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	47a0      	blx	r4
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd90      	pop	{r4, r7, pc}
 800b5b8:	20000240 	.word	0x20000240

0800b5bc <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b5bc:	b590      	push	{r4, r7, lr}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5d2:	681c      	ldr	r4, [r3, #0]
 800b5d4:	7afa      	ldrb	r2, [r7, #11]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	2203      	movs	r2, #3
 800b5e2:	4903      	ldr	r1, [pc, #12]	@ (800b5f0 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	47a0      	blx	r4
}
 800b5e8:	bf00      	nop
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd90      	pop	{r4, r7, pc}
 800b5f0:	20000240 	.word	0x20000240

0800b5f4 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b5f4:	b590      	push	{r4, r7, lr}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b608:	681c      	ldr	r4, [r3, #0]
 800b60a:	78fb      	ldrb	r3, [r7, #3]
 800b60c:	2200      	movs	r2, #0
 800b60e:	9201      	str	r2, [sp, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	9200      	str	r2, [sp, #0]
 800b614:	2204      	movs	r2, #4
 800b616:	4903      	ldr	r1, [pc, #12]	@ (800b624 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	47a0      	blx	r4
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	bd90      	pop	{r4, r7, pc}
 800b624:	20000240 	.word	0x20000240

0800b628 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b628:	b590      	push	{r4, r7, lr}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af02      	add	r7, sp, #8
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	460b      	mov	r3, r1
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b63e:	681c      	ldr	r4, [r3, #0]
 800b640:	7afa      	ldrb	r2, [r7, #11]
 800b642:	2300      	movs	r3, #0
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	4613      	mov	r3, r2
 800b64c:	2205      	movs	r2, #5
 800b64e:	4903      	ldr	r1, [pc, #12]	@ (800b65c <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	47a0      	blx	r4
}
 800b654:	bf00      	nop
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd90      	pop	{r4, r7, pc}
 800b65c:	20000240 	.word	0x20000240

0800b660 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b085      	sub	sp, #20
 800b664:	af02      	add	r7, sp, #8
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b672:	681c      	ldr	r4, [r3, #0]
 800b674:	2300      	movs	r3, #0
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	2300      	movs	r3, #0
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	2206      	movs	r2, #6
 800b680:	4903      	ldr	r1, [pc, #12]	@ (800b690 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	47a0      	blx	r4
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd90      	pop	{r4, r7, pc}
 800b68e:	bf00      	nop
 800b690:	20000240 	.word	0x20000240

0800b694 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b087      	sub	sp, #28
 800b698:	af02      	add	r7, sp, #8
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	460b      	mov	r3, r1
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6aa:	681c      	ldr	r4, [r3, #0]
 800b6ac:	7afa      	ldrb	r2, [r7, #11]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	2207      	movs	r2, #7
 800b6ba:	4903      	ldr	r1, [pc, #12]	@ (800b6c8 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	47a0      	blx	r4
}
 800b6c0:	bf00      	nop
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd90      	pop	{r4, r7, pc}
 800b6c8:	20000240 	.word	0x20000240

0800b6cc <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b6cc:	b590      	push	{r4, r7, lr}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af02      	add	r7, sp, #8
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	607b      	str	r3, [r7, #4]
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	72fb      	strb	r3, [r7, #11]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6e6:	681c      	ldr	r4, [r3, #0]
 800b6e8:	7af9      	ldrb	r1, [r7, #11]
 800b6ea:	7abb      	ldrb	r3, [r7, #10]
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	9201      	str	r2, [sp, #4]
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	2208      	movs	r2, #8
 800b6f6:	4903      	ldr	r1, [pc, #12]	@ (800b704 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	47a0      	blx	r4
}
 800b6fc:	bf00      	nop
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	bd90      	pop	{r4, r7, pc}
 800b704:	20000240 	.word	0x20000240

0800b708 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b708:	b590      	push	{r4, r7, lr}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af02      	add	r7, sp, #8
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	70fb      	strb	r3, [r7, #3]
 800b714:	4613      	mov	r3, r2
 800b716:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b720:	681c      	ldr	r4, [r3, #0]
 800b722:	78fa      	ldrb	r2, [r7, #3]
 800b724:	78bb      	ldrb	r3, [r7, #2]
 800b726:	2100      	movs	r1, #0
 800b728:	9101      	str	r1, [sp, #4]
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	4613      	mov	r3, r2
 800b72e:	2209      	movs	r2, #9
 800b730:	4903      	ldr	r1, [pc, #12]	@ (800b740 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	47a0      	blx	r4
}
 800b736:	bf00      	nop
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd90      	pop	{r4, r7, pc}
 800b73e:	bf00      	nop
 800b740:	20000240 	.word	0x20000240

0800b744 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b744:	b590      	push	{r4, r7, lr}
 800b746:	b085      	sub	sp, #20
 800b748:	af02      	add	r7, sp, #8
 800b74a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b754:	681c      	ldr	r4, [r3, #0]
 800b756:	2300      	movs	r3, #0
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	2300      	movs	r3, #0
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	2300      	movs	r3, #0
 800b760:	220a      	movs	r2, #10
 800b762:	4903      	ldr	r1, [pc, #12]	@ (800b770 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	47a0      	blx	r4
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd90      	pop	{r4, r7, pc}
 800b770:	20000240 	.word	0x20000240

0800b774 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b085      	sub	sp, #20
 800b778:	af02      	add	r7, sp, #8
 800b77a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b784:	681c      	ldr	r4, [r3, #0]
 800b786:	2300      	movs	r3, #0
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	2300      	movs	r3, #0
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	2300      	movs	r3, #0
 800b790:	220b      	movs	r2, #11
 800b792:	4903      	ldr	r1, [pc, #12]	@ (800b7a0 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	47a0      	blx	r4
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd90      	pop	{r4, r7, pc}
 800b7a0:	20000240 	.word	0x20000240

0800b7a4 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b7a4:	b590      	push	{r4, r7, lr}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af02      	add	r7, sp, #8
 800b7aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7b4:	681c      	ldr	r4, [r3, #0]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	220c      	movs	r2, #12
 800b7c2:	4903      	ldr	r1, [pc, #12]	@ (800b7d0 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	47a0      	blx	r4
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd90      	pop	{r4, r7, pc}
 800b7d0:	20000240 	.word	0x20000240

0800b7d4 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b7d4:	b590      	push	{r4, r7, lr}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af02      	add	r7, sp, #8
 800b7da:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7e4:	681c      	ldr	r4, [r3, #0]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	9301      	str	r3, [sp, #4]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	220d      	movs	r2, #13
 800b7f2:	4903      	ldr	r1, [pc, #12]	@ (800b800 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	47a0      	blx	r4
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd90      	pop	{r4, r7, pc}
 800b800:	20000240 	.word	0x20000240

0800b804 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b804:	b590      	push	{r4, r7, lr}
 800b806:	b085      	sub	sp, #20
 800b808:	af02      	add	r7, sp, #8
 800b80a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b814:	681c      	ldr	r4, [r3, #0]
 800b816:	2300      	movs	r3, #0
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	2300      	movs	r3, #0
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	2300      	movs	r3, #0
 800b820:	220e      	movs	r2, #14
 800b822:	4903      	ldr	r1, [pc, #12]	@ (800b830 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	47a0      	blx	r4
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd90      	pop	{r4, r7, pc}
 800b830:	20000240 	.word	0x20000240

0800b834 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b834:	b590      	push	{r4, r7, lr}
 800b836:	b085      	sub	sp, #20
 800b838:	af02      	add	r7, sp, #8
 800b83a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b844:	681c      	ldr	r4, [r3, #0]
 800b846:	2300      	movs	r3, #0
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	2300      	movs	r3, #0
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	2300      	movs	r3, #0
 800b850:	220f      	movs	r2, #15
 800b852:	4903      	ldr	r1, [pc, #12]	@ (800b860 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	47a0      	blx	r4
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd90      	pop	{r4, r7, pc}
 800b860:	20000240 	.word	0x20000240

0800b864 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b085      	sub	sp, #20
 800b868:	af02      	add	r7, sp, #8
 800b86a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b874:	681c      	ldr	r4, [r3, #0]
 800b876:	2300      	movs	r3, #0
 800b878:	9301      	str	r3, [sp, #4]
 800b87a:	2300      	movs	r3, #0
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	2300      	movs	r3, #0
 800b880:	2210      	movs	r2, #16
 800b882:	4903      	ldr	r1, [pc, #12]	@ (800b890 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	47a0      	blx	r4
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd90      	pop	{r4, r7, pc}
 800b890:	20000240 	.word	0x20000240

0800b894 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b085      	sub	sp, #20
 800b898:	af02      	add	r7, sp, #8
 800b89a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b8a4:	681c      	ldr	r4, [r3, #0]
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	2211      	movs	r2, #17
 800b8b2:	4903      	ldr	r1, [pc, #12]	@ (800b8c0 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	47a0      	blx	r4
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd90      	pop	{r4, r7, pc}
 800b8c0:	20000240 	.word	0x20000240

0800b8c4 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b8c4:	b590      	push	{r4, r7, lr}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af02      	add	r7, sp, #8
 800b8ca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b8d4:	681c      	ldr	r4, [r3, #0]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	2212      	movs	r2, #18
 800b8e2:	4903      	ldr	r1, [pc, #12]	@ (800b8f0 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	47a0      	blx	r4
}
 800b8e8:	bf00      	nop
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd90      	pop	{r4, r7, pc}
 800b8f0:	20000240 	.word	0x20000240

0800b8f4 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a09      	ldr	r2, [pc, #36]	@ (800b92c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b908:	4909      	ldr	r1, [pc, #36]	@ (800b930 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a06      	ldr	r2, [pc, #24]	@ (800b934 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b91a:	4904      	ldr	r1, [pc, #16]	@ (800b92c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b920:	4b04      	ldr	r3, [pc, #16]	@ (800b934 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20000260 	.word	0x20000260
 800b930:	20000240 	.word	0x20000240
 800b934:	20000268 	.word	0x20000268

0800b938 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b089      	sub	sp, #36	@ 0x24
 800b93c:	af02      	add	r7, sp, #8
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b944:	4b17      	ldr	r3, [pc, #92]	@ (800b9a4 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b946:	2200      	movs	r2, #0
 800b948:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b94a:	2300      	movs	r3, #0
 800b94c:	75fb      	strb	r3, [r7, #23]
 800b94e:	e020      	b.n	800b992 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b958:	681c      	ldr	r4, [r3, #0]
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	461a      	mov	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	1899      	adds	r1, r3, r2
 800b964:	7dfb      	ldrb	r3, [r7, #23]
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	461a      	mov	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	441a      	add	r2, r3
 800b96e:	230a      	movs	r3, #10
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	2302      	movs	r3, #2
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b978:	2300      	movs	r3, #0
 800b97a:	75bb      	strb	r3, [r7, #22]
 800b97c:	e003      	b.n	800b986 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b97e:	bf00      	nop
 800b980:	7dbb      	ldrb	r3, [r7, #22]
 800b982:	3301      	adds	r3, #1
 800b984:	75bb      	strb	r3, [r7, #22]
 800b986:	7dbb      	ldrb	r3, [r7, #22]
 800b988:	2b7c      	cmp	r3, #124	@ 0x7c
 800b98a:	d9f8      	bls.n	800b97e <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	3301      	adds	r3, #1
 800b990:	75fb      	strb	r3, [r7, #23]
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	2b03      	cmp	r3, #3
 800b996:	d9db      	bls.n	800b950 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b998:	bf00      	nop
}
 800b99a:	bf00      	nop
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd90      	pop	{r4, r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	2000023d 	.word	0x2000023d

0800b9a8 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b9a8:	b480      	push	{r7}
 800b9aa:	b087      	sub	sp, #28
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	74fb      	strb	r3, [r7, #19]
 800b9be:	e016      	b.n	800b9ee <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b9c0:	7cfb      	ldrb	r3, [r7, #19]
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	7f1b      	ldrb	r3, [r3, #28]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	79fa      	ldrb	r2, [r7, #7]
 800b9d6:	7cfb      	ldrb	r3, [r7, #19]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b9e8:	7cfb      	ldrb	r3, [r7, #19]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	74fb      	strb	r3, [r7, #19]
 800b9ee:	7cfb      	ldrb	r3, [r7, #19]
 800b9f0:	2b03      	cmp	r3, #3
 800b9f2:	d9e5      	bls.n	800b9c0 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b9f4:	697b      	ldr	r3, [r7, #20]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	371c      	adds	r7, #28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
	...

0800ba04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2118      	movs	r1, #24
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	4798      	blx	r3
 800ba24:	4602      	mov	r2, r0
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba2a:	b292      	uxth	r2, r2
 800ba2c:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800ba2e:	78fb      	ldrb	r3, [r7, #3]
 800ba30:	2b0e      	cmp	r3, #14
 800ba32:	f200 8099 	bhi.w	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800ba36:	a201      	add	r2, pc, #4	@ (adr r2, 800ba3c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba79 	.word	0x0800ba79
 800ba40:	0800ba89 	.word	0x0800ba89
 800ba44:	0800ba99 	.word	0x0800ba99
 800ba48:	0800baa9 	.word	0x0800baa9
 800ba4c:	0800bab9 	.word	0x0800bab9
 800ba50:	0800bac9 	.word	0x0800bac9
 800ba54:	0800bad9 	.word	0x0800bad9
 800ba58:	0800bae9 	.word	0x0800bae9
 800ba5c:	0800baf9 	.word	0x0800baf9
 800ba60:	0800bb09 	.word	0x0800bb09
 800ba64:	0800bb19 	.word	0x0800bb19
 800ba68:	0800bb29 	.word	0x0800bb29
 800ba6c:	0800bb39 	.word	0x0800bb39
 800ba70:	0800bb49 	.word	0x0800bb49
 800ba74:	0800bb59 	.word	0x0800bb59
      state = pL6470_StatusRegister->HiZ;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	73fb      	strb	r3, [r7, #15]
      break;
 800ba86:	e06f      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	73fb      	strb	r3, [r7, #15]
      break;
 800ba96:	e067      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	73fb      	strb	r3, [r7, #15]
      break;
 800baa6:	e05f      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	73fb      	strb	r3, [r7, #15]
      break;
 800bab6:	e057      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	73fb      	strb	r3, [r7, #15]
      break;
 800bac6:	e04f      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	73fb      	strb	r3, [r7, #15]
      break;
 800bad6:	e047      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	73fb      	strb	r3, [r7, #15]
      break;
 800bae6:	e03f      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	73fb      	strb	r3, [r7, #15]
      break;
 800baf6:	e037      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bafc:	785b      	ldrb	r3, [r3, #1]
 800bafe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	73fb      	strb	r3, [r7, #15]
      break;
 800bb06:	e02f      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0c:	785b      	ldrb	r3, [r3, #1]
 800bb0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	73fb      	strb	r3, [r7, #15]
      break;
 800bb16:	e027      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb1c:	785b      	ldrb	r3, [r3, #1]
 800bb1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	73fb      	strb	r3, [r7, #15]
      break;
 800bb26:	e01f      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb2c:	785b      	ldrb	r3, [r3, #1]
 800bb2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	73fb      	strb	r3, [r7, #15]
      break;
 800bb36:	e017      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb3c:	785b      	ldrb	r3, [r3, #1]
 800bb3e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	73fb      	strb	r3, [r7, #15]
      break;
 800bb46:	e00f      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb4c:	785b      	ldrb	r3, [r3, #1]
 800bb4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	73fb      	strb	r3, [r7, #15]
      break;
 800bb56:	e007      	b.n	800bb68 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb5c:	785b      	ldrb	r3, [r3, #1]
 800bb5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	73fb      	strb	r3, [r7, #15]
      break;
 800bb66:	bf00      	nop
  return state;
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop

0800bb74 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	2b18      	cmp	r3, #24
 800bb84:	d809      	bhi.n	800bb9a <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a19      	ldr	r1, [r3, #32]
 800bb8a:	78fa      	ldrb	r2, [r7, #3]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	440b      	add	r3, r1
 800bb96:	3301      	adds	r3, #1
 800bb98:	e000      	b.n	800bb9c <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	73fb      	strb	r3, [r7, #15]
 800bbb6:	e01a      	b.n	800bbee <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
 800bbba:	011b      	lsls	r3, r3, #4
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
 800bbc6:	011b      	lsls	r3, r3, #4
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	4413      	add	r3, r2
 800bbcc:	2200      	movs	r2, #0
 800bbce:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	011b      	lsls	r3, r3, #4
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	2200      	movs	r2, #0
 800bbda:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	011b      	lsls	r3, r3, #4
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	3301      	adds	r3, #1
 800bbec:	73fb      	strb	r3, [r7, #15]
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d9e1      	bls.n	800bbb8 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bc02:	b480      	push	{r7}
 800bc04:	b085      	sub	sp, #20
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	603b      	str	r3, [r7, #0]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	7f1b      	ldrb	r3, [r3, #28]
 800bc16:	011b      	lsls	r3, r3, #4
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	79fa      	ldrb	r2, [r7, #7]
 800bc1e:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	7f1b      	ldrb	r3, [r3, #28]
 800bc24:	011b      	lsls	r3, r3, #4
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	4413      	add	r3, r2
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	7f1b      	ldrb	r3, [r3, #28]
 800bc32:	011b      	lsls	r3, r3, #4
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	4413      	add	r3, r2
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	7f1b      	ldrb	r3, [r3, #28]
 800bc40:	011b      	lsls	r3, r3, #4
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	4413      	add	r3, r2
 800bc46:	69fa      	ldr	r2, [r7, #28]
 800bc48:	60da      	str	r2, [r3, #12]
}
 800bc4a:	bf00      	nop
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
	...

0800bc58 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bc58:	b590      	push	{r4, r7, lr}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af02      	add	r7, sp, #8
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	603b      	str	r3, [r7, #0]
 800bc64:	4613      	mov	r3, r2
 800bc66:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800bc68:	4b10      	ldr	r3, [pc, #64]	@ (800bcac <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10a      	bne.n	800bc86 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800bc70:	4b0e      	ldr	r3, [pc, #56]	@ (800bcac <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bc72:	2201      	movs	r2, #1
 800bc74:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68b9      	ldr	r1, [r7, #8]
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800bc8e:	681c      	ldr	r4, [r3, #0]
 800bc90:	79fa      	ldrb	r2, [r7, #7]
 800bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68b9      	ldr	r1, [r7, #8]
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	47a0      	blx	r4
}
 800bca2:	bf00      	nop
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd90      	pop	{r4, r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	2000023d 	.word	0x2000023d

0800bcb0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800bcb0:	b480      	push	{r7}
 800bcb2:	b087      	sub	sp, #28
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	75bb      	strb	r3, [r7, #22]
 800bcc4:	e013      	b.n	800bcee <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75fb      	strb	r3, [r7, #23]
 800bcca:	e00a      	b.n	800bce2 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800bccc:	7d7b      	ldrb	r3, [r7, #21]
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	757a      	strb	r2, [r7, #21]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	3301      	adds	r3, #1
 800bce0:	75fb      	strb	r3, [r7, #23]
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d9f1      	bls.n	800bccc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bce8:	7dbb      	ldrb	r3, [r7, #22]
 800bcea:	3301      	adds	r3, #1
 800bcec:	75bb      	strb	r3, [r7, #22]
 800bcee:	7dbb      	ldrb	r3, [r7, #22]
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d9e8      	bls.n	800bcc6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	75fb      	strb	r3, [r7, #23]
 800bcf8:	e1f1      	b.n	800c0de <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	011b      	lsls	r3, r3, #4
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	440b      	add	r3, r1
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	00db      	lsls	r3, r3, #3
 800bd0e:	1a5b      	subs	r3, r3, r1
 800bd10:	005b      	lsls	r3, r3, #1
 800bd12:	441a      	add	r2, r3
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	440b      	add	r3, r1
 800bd1a:	7b12      	ldrb	r2, [r2, #12]
 800bd1c:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	011b      	lsls	r3, r3, #4
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	4413      	add	r3, r2
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	2b12      	cmp	r3, #18
 800bd2a:	f200 81d5 	bhi.w	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800bd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd34 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd34:	0800c0d9 	.word	0x0800c0d9
 800bd38:	0800bd81 	.word	0x0800bd81
 800bd3c:	0800be09 	.word	0x0800be09
 800bd40:	0800be39 	.word	0x0800be39
 800bd44:	0800bea1 	.word	0x0800bea1
 800bd48:	0800becf 	.word	0x0800becf
 800bd4c:	0800bf37 	.word	0x0800bf37
 800bd50:	0800bf73 	.word	0x0800bf73
 800bd54:	0800bfdb 	.word	0x0800bfdb
 800bd58:	0800c077 	.word	0x0800c077
 800bd5c:	0800c0d9 	.word	0x0800c0d9
 800bd60:	0800c0d9 	.word	0x0800c0d9
 800bd64:	0800c0d9 	.word	0x0800c0d9
 800bd68:	0800c0d9 	.word	0x0800c0d9
 800bd6c:	0800c0d9 	.word	0x0800c0d9
 800bd70:	0800c0d9 	.word	0x0800c0d9
 800bd74:	0800c0d9 	.word	0x0800c0d9
 800bd78:	0800c0d9 	.word	0x0800c0d9
 800bd7c:	0800c0d9 	.word	0x0800c0d9
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	4413      	add	r3, r2
 800bd86:	7819      	ldrb	r1, [r3, #0]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6a18      	ldr	r0, [r3, #32]
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	4413      	add	r3, r2
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4403      	add	r3, r0
 800bda0:	781a      	ldrb	r2, [r3, #0]
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4403      	add	r3, r0
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a19      	ldr	r1, [r3, #32]
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	011b      	lsls	r3, r3, #4
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	4413      	add	r3, r2
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	440b      	add	r3, r1
 800bdc6:	7b9b      	ldrb	r3, [r3, #14]
 800bdc8:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bdca:	2301      	movs	r3, #1
 800bdcc:	75bb      	strb	r3, [r7, #22]
 800bdce:	e016      	b.n	800bdfe <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	7d39      	ldrb	r1, [r7, #20]
 800bddc:	7dbb      	ldrb	r3, [r7, #22]
 800bdde:	1acb      	subs	r3, r1, r3
 800bde0:	00db      	lsls	r3, r3, #3
 800bde2:	fa22 f103 	lsr.w	r1, r2, r3
 800bde6:	7dbb      	ldrb	r3, [r7, #22]
 800bde8:	005a      	lsls	r2, r3, #1
 800bdea:	7dfb      	ldrb	r3, [r7, #23]
 800bdec:	4413      	add	r3, r2
 800bdee:	461a      	mov	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	b2ca      	uxtb	r2, r1
 800bdf6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bdf8:	7dbb      	ldrb	r3, [r7, #22]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	75bb      	strb	r3, [r7, #22]
 800bdfe:	7d3a      	ldrb	r2, [r7, #20]
 800be00:	7dbb      	ldrb	r3, [r7, #22]
 800be02:	429a      	cmp	r2, r3
 800be04:	d2e4      	bcs.n	800bdd0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800be06:	e167      	b.n	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	4413      	add	r3, r2
 800be0e:	7819      	ldrb	r1, [r3, #0]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6a18      	ldr	r0, [r3, #32]
 800be14:	7dfb      	ldrb	r3, [r7, #23]
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	4413      	add	r3, r2
 800be1c:	685a      	ldr	r2, [r3, #4]
 800be1e:	4613      	mov	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	4413      	add	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4403      	add	r3, r0
 800be28:	781a      	ldrb	r2, [r3, #0]
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	4403      	add	r3, r0
 800be30:	430a      	orrs	r2, r1
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	701a      	strb	r2, [r3, #0]
      break;
 800be36:	e14f      	b.n	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	4413      	add	r3, r2
 800be3e:	7819      	ldrb	r1, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800be44:	7dfb      	ldrb	r3, [r7, #23]
 800be46:	011b      	lsls	r3, r3, #4
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	4413      	add	r3, r2
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	4413      	add	r3, r2
 800be54:	4403      	add	r3, r0
 800be56:	7a1a      	ldrb	r2, [r3, #8]
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	4403      	add	r3, r0
 800be5e:	430a      	orrs	r2, r1
 800be60:	b2d2      	uxtb	r2, r2
 800be62:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be64:	2301      	movs	r3, #1
 800be66:	75bb      	strb	r3, [r7, #22]
 800be68:	e016      	b.n	800be98 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	011b      	lsls	r3, r3, #4
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	4413      	add	r3, r2
 800be72:	689a      	ldr	r2, [r3, #8]
 800be74:	7dbb      	ldrb	r3, [r7, #22]
 800be76:	f1c3 0303 	rsb	r3, r3, #3
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	fa22 f103 	lsr.w	r1, r2, r3
 800be80:	7dbb      	ldrb	r3, [r7, #22]
 800be82:	005a      	lsls	r2, r3, #1
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	4413      	add	r3, r2
 800be88:	461a      	mov	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4413      	add	r3, r2
 800be8e:	b2ca      	uxtb	r2, r1
 800be90:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be92:	7dbb      	ldrb	r3, [r7, #22]
 800be94:	3301      	adds	r3, #1
 800be96:	75bb      	strb	r3, [r7, #22]
 800be98:	7dbb      	ldrb	r3, [r7, #22]
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d9e5      	bls.n	800be6a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800be9e:	e11b      	b.n	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	4413      	add	r3, r2
 800bea6:	7819      	ldrb	r1, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800beac:	7dfb      	ldrb	r3, [r7, #23]
 800beae:	011b      	lsls	r3, r3, #4
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	4413      	add	r3, r2
 800beb4:	685a      	ldr	r2, [r3, #4]
 800beb6:	4613      	mov	r3, r2
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	4413      	add	r3, r2
 800bebc:	4403      	add	r3, r0
 800bebe:	7a1a      	ldrb	r2, [r3, #8]
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	4403      	add	r3, r0
 800bec6:	430a      	orrs	r2, r1
 800bec8:	b2d2      	uxtb	r2, r2
 800beca:	701a      	strb	r2, [r3, #0]
      break;
 800becc:	e104      	b.n	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bece:	7dfb      	ldrb	r3, [r7, #23]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	4413      	add	r3, r2
 800bed4:	7819      	ldrb	r1, [r3, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	011b      	lsls	r3, r3, #4
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	4413      	add	r3, r2
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	4613      	mov	r3, r2
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	4413      	add	r3, r2
 800beea:	4403      	add	r3, r0
 800beec:	7a1a      	ldrb	r2, [r3, #8]
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	4403      	add	r3, r0
 800bef4:	430a      	orrs	r2, r1
 800bef6:	b2d2      	uxtb	r2, r2
 800bef8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800befa:	2301      	movs	r3, #1
 800befc:	75bb      	strb	r3, [r7, #22]
 800befe:	e016      	b.n	800bf2e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
 800bf02:	011b      	lsls	r3, r3, #4
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	4413      	add	r3, r2
 800bf08:	689a      	ldr	r2, [r3, #8]
 800bf0a:	7dbb      	ldrb	r3, [r7, #22]
 800bf0c:	f1c3 0303 	rsb	r3, r3, #3
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	fa22 f103 	lsr.w	r1, r2, r3
 800bf16:	7dbb      	ldrb	r3, [r7, #22]
 800bf18:	005a      	lsls	r2, r3, #1
 800bf1a:	7dfb      	ldrb	r3, [r7, #23]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	461a      	mov	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4413      	add	r3, r2
 800bf24:	b2ca      	uxtb	r2, r1
 800bf26:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf28:	7dbb      	ldrb	r3, [r7, #22]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	75bb      	strb	r3, [r7, #22]
 800bf2e:	7dbb      	ldrb	r3, [r7, #22]
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d9e5      	bls.n	800bf00 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800bf34:	e0d0      	b.n	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf36:	2301      	movs	r3, #1
 800bf38:	75bb      	strb	r3, [r7, #22]
 800bf3a:	e016      	b.n	800bf6a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
 800bf3e:	011b      	lsls	r3, r3, #4
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	4413      	add	r3, r2
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	7dbb      	ldrb	r3, [r7, #22]
 800bf48:	f1c3 0303 	rsb	r3, r3, #3
 800bf4c:	00db      	lsls	r3, r3, #3
 800bf4e:	fa22 f103 	lsr.w	r1, r2, r3
 800bf52:	7dbb      	ldrb	r3, [r7, #22]
 800bf54:	005a      	lsls	r2, r3, #1
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	4413      	add	r3, r2
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4413      	add	r3, r2
 800bf60:	b2ca      	uxtb	r2, r1
 800bf62:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf64:	7dbb      	ldrb	r3, [r7, #22]
 800bf66:	3301      	adds	r3, #1
 800bf68:	75bb      	strb	r3, [r7, #22]
 800bf6a:	7dbb      	ldrb	r3, [r7, #22]
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	d9e5      	bls.n	800bf3c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800bf70:	e0b2      	b.n	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bf72:	7dfb      	ldrb	r3, [r7, #23]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	4413      	add	r3, r2
 800bf78:	7819      	ldrb	r1, [r3, #0]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bf7e:	7dfb      	ldrb	r3, [r7, #23]
 800bf80:	011b      	lsls	r3, r3, #4
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	4413      	add	r3, r2
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	00db      	lsls	r3, r3, #3
 800bf8c:	4413      	add	r3, r2
 800bf8e:	4403      	add	r3, r0
 800bf90:	7a1a      	ldrb	r2, [r3, #8]
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	4403      	add	r3, r0
 800bf98:	430a      	orrs	r2, r1
 800bf9a:	b2d2      	uxtb	r2, r2
 800bf9c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	75bb      	strb	r3, [r7, #22]
 800bfa2:	e016      	b.n	800bfd2 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	4413      	add	r3, r2
 800bfac:	689a      	ldr	r2, [r3, #8]
 800bfae:	7dbb      	ldrb	r3, [r7, #22]
 800bfb0:	f1c3 0303 	rsb	r3, r3, #3
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	fa22 f103 	lsr.w	r1, r2, r3
 800bfba:	7dbb      	ldrb	r3, [r7, #22]
 800bfbc:	005a      	lsls	r2, r3, #1
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	b2ca      	uxtb	r2, r1
 800bfca:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bfcc:	7dbb      	ldrb	r3, [r7, #22]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	75bb      	strb	r3, [r7, #22]
 800bfd2:	7dbb      	ldrb	r3, [r7, #22]
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d9e5      	bls.n	800bfa4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800bfd8:	e07e      	b.n	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bfda:	7dfb      	ldrb	r3, [r7, #23]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	4413      	add	r3, r2
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	b259      	sxtb	r1, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
 800bfea:	011b      	lsls	r3, r3, #4
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	4413      	add	r3, r2
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	4403      	add	r3, r0
 800bffa:	791b      	ldrb	r3, [r3, #4]
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	b25b      	sxtb	r3, r3
 800c000:	430b      	orrs	r3, r1
 800c002:	b259      	sxtb	r1, r3
 800c004:	7dfb      	ldrb	r3, [r7, #23]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	4413      	add	r3, r2
 800c00a:	b2ca      	uxtb	r2, r1
 800c00c:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	4413      	add	r3, r2
 800c014:	7819      	ldrb	r1, [r3, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c01a:	7dfb      	ldrb	r3, [r7, #23]
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	4413      	add	r3, r2
 800c022:	689a      	ldr	r2, [r3, #8]
 800c024:	4613      	mov	r3, r2
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	4413      	add	r3, r2
 800c02a:	4403      	add	r3, r0
 800c02c:	7a1a      	ldrb	r2, [r3, #8]
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	4403      	add	r3, r0
 800c034:	430a      	orrs	r2, r1
 800c036:	b2d2      	uxtb	r2, r2
 800c038:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c03a:	2301      	movs	r3, #1
 800c03c:	75bb      	strb	r3, [r7, #22]
 800c03e:	e016      	b.n	800c06e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800c040:	7dfb      	ldrb	r3, [r7, #23]
 800c042:	011b      	lsls	r3, r3, #4
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	4413      	add	r3, r2
 800c048:	68da      	ldr	r2, [r3, #12]
 800c04a:	7dbb      	ldrb	r3, [r7, #22]
 800c04c:	f1c3 0303 	rsb	r3, r3, #3
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	fa22 f103 	lsr.w	r1, r2, r3
 800c056:	7dbb      	ldrb	r3, [r7, #22]
 800c058:	005a      	lsls	r2, r3, #1
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	4413      	add	r3, r2
 800c05e:	461a      	mov	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4413      	add	r3, r2
 800c064:	b2ca      	uxtb	r2, r1
 800c066:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c068:	7dbb      	ldrb	r3, [r7, #22]
 800c06a:	3301      	adds	r3, #1
 800c06c:	75bb      	strb	r3, [r7, #22]
 800c06e:	7dbb      	ldrb	r3, [r7, #22]
 800c070:	2b03      	cmp	r3, #3
 800c072:	d9e5      	bls.n	800c040 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800c074:	e030      	b.n	800c0d8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800c076:	7dfb      	ldrb	r3, [r7, #23]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	b259      	sxtb	r1, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	4413      	add	r3, r2
 800c08c:	685a      	ldr	r2, [r3, #4]
 800c08e:	4613      	mov	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	4403      	add	r3, r0
 800c096:	791b      	ldrb	r3, [r3, #4]
 800c098:	00db      	lsls	r3, r3, #3
 800c09a:	b25b      	sxtb	r3, r3
 800c09c:	430b      	orrs	r3, r1
 800c09e:	b259      	sxtb	r1, r3
 800c0a0:	7dfb      	ldrb	r3, [r7, #23]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	b2ca      	uxtb	r2, r1
 800c0a8:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c0aa:	7dfb      	ldrb	r3, [r7, #23]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	7819      	ldrb	r1, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	011b      	lsls	r3, r3, #4
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	4413      	add	r3, r2
 800c0be:	689a      	ldr	r2, [r3, #8]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	00db      	lsls	r3, r3, #3
 800c0c4:	4413      	add	r3, r2
 800c0c6:	4403      	add	r3, r0
 800c0c8:	7a1a      	ldrb	r2, [r3, #8]
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	4403      	add	r3, r0
 800c0d0:	430a      	orrs	r2, r1
 800c0d2:	b2d2      	uxtb	r2, r2
 800c0d4:	701a      	strb	r2, [r3, #0]
      break;
 800c0d6:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c0d8:	7dfb      	ldrb	r3, [r7, #23]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	75fb      	strb	r3, [r7, #23]
 800c0de:	7dfb      	ldrb	r3, [r7, #23]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	f67f ae0a 	bls.w	800bcfa <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800c0e6:	bf00      	nop
 800c0e8:	bf00      	nop
 800c0ea:	371c      	adds	r7, #28
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800c100:	edd7 7a00 	vldr	s15, [r7]
 800c104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10c:	db1e      	blt.n	800c14c <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800c10e:	edd7 7a00 	vldr	s15, [r7]
 800c112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c116:	ee17 2a90 	vmov	r2, s15
 800c11a:	edd7 7a00 	vldr	s15, [r7]
 800c11e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c126:	ed97 7a00 	vldr	s14, [r7]
 800c12a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c12e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c132:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13a:	bf4c      	ite	mi
 800c13c:	2301      	movmi	r3, #1
 800c13e:	2300      	movpl	r3, #0
 800c140:	b2db      	uxtb	r3, r3
 800c142:	f083 0301 	eor.w	r3, r3, #1
 800c146:	b2db      	uxtb	r3, r3
 800c148:	4413      	add	r3, r2
 800c14a:	e01a      	b.n	800c182 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800c14c:	edd7 7a00 	vldr	s15, [r7]
 800c150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c154:	ee17 2a90 	vmov	r2, s15
 800c158:	edd7 7a00 	vldr	s15, [r7]
 800c15c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c164:	ed97 7a00 	vldr	s14, [r7]
 800c168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c16c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c170:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c178:	d501      	bpl.n	800c17e <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e000      	b.n	800c180 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800c17e:	2300      	movs	r3, #0
 800c180:	1ad3      	subs	r3, r2, r3
    }
 800c182:	4618      	mov	r0, r3
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800c18e:	b580      	push	{r7, lr}
 800c190:	b086      	sub	sp, #24
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	4613      	mov	r3, r2
 800c19a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6918      	ldr	r0, [r3, #16]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	8a9b      	ldrh	r3, [r3, #20]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	f001 ffd2 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6998      	ldr	r0, [r3, #24]
 800c1b0:	88fa      	ldrh	r2, [r7, #6]
 800c1b2:	2364      	movs	r3, #100	@ 0x64
 800c1b4:	68b9      	ldr	r1, [r7, #8]
 800c1b6:	f002 fffa 	bl	800f1ae <HAL_SPI_Receive>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6918      	ldr	r0, [r3, #16]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	8a9b      	ldrh	r3, [r3, #20]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	f001 ffc1 	bl	800e150 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c1ce:	7dfb      	ldrb	r3, [r7, #23]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e000      	b.n	800c1da <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c1d8:	2300      	movs	r3, #0
    }
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b086      	sub	sp, #24
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	60f8      	str	r0, [r7, #12]
 800c1ea:	60b9      	str	r1, [r7, #8]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6918      	ldr	r0, [r3, #16]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	8a9b      	ldrh	r3, [r3, #20]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	f001 ffa8 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6998      	ldr	r0, [r3, #24]
 800c204:	88fa      	ldrh	r2, [r7, #6]
 800c206:	2364      	movs	r3, #100	@ 0x64
 800c208:	68b9      	ldr	r1, [r7, #8]
 800c20a:	f002 fe94 	bl	800ef36 <HAL_SPI_Transmit>
 800c20e:	4603      	mov	r3, r0
 800c210:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6918      	ldr	r0, [r3, #16]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	8a9b      	ldrh	r3, [r3, #20]
 800c21a:	2201      	movs	r2, #1
 800c21c:	4619      	mov	r1, r3
 800c21e:	f001 ff97 	bl	800e150 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	e000      	b.n	800c22e <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c22c:	2300      	movs	r3, #0
    }
 800c22e:	4618      	mov	r0, r3
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c236:	b580      	push	{r7, lr}
 800c238:	b088      	sub	sp, #32
 800c23a:	af02      	add	r7, sp, #8
 800c23c:	60f8      	str	r0, [r7, #12]
 800c23e:	60b9      	str	r1, [r7, #8]
 800c240:	607a      	str	r2, [r7, #4]
 800c242:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6918      	ldr	r0, [r3, #16]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	8a9b      	ldrh	r3, [r3, #20]
 800c24c:	2200      	movs	r2, #0
 800c24e:	4619      	mov	r1, r3
 800c250:	f001 ff7e 	bl	800e150 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6998      	ldr	r0, [r3, #24]
 800c258:	887b      	ldrh	r3, [r7, #2]
 800c25a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c25e:	9200      	str	r2, [sp, #0]
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	f003 f8b4 	bl	800f3d0 <HAL_SPI_TransmitReceive>
 800c268:	4603      	mov	r3, r0
 800c26a:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d009      	beq.n	800c286 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6918      	ldr	r0, [r3, #16]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	8a9b      	ldrh	r3, [r3, #20]
 800c27a:	2201      	movs	r2, #1
 800c27c:	4619      	mov	r1, r3
 800c27e:	f001 ff67 	bl	800e150 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e008      	b.n	800c298 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6918      	ldr	r0, [r3, #16]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	8a9b      	ldrh	r3, [r3, #20]
 800c28e:	2201      	movs	r2, #1
 800c290:	4619      	mov	r1, r3
 800c292:	f001 ff5d 	bl	800e150 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c296:	2300      	movs	r3, #0
    }
 800c298:	4618      	mov	r0, r3
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c2a0:	b590      	push	{r4, r7, lr}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
 800c2ac:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c2b6:	681c      	ldr	r4, [r3, #0]
 800c2b8:	887b      	ldrh	r3, [r7, #2]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	6879      	ldr	r1, [r7, #4]
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	47a0      	blx	r4
    }
 800c2c2:	bf00      	nop
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd90      	pop	{r4, r7, pc}
	...

0800c2cc <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	4a04      	ldr	r2, [pc, #16]	@ (800c2e8 <_ZN13abstractL6470C1Ev+0x1c>)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	601a      	str	r2, [r3, #0]
{

}
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	08017390 	.word	0x08017390

0800c2ec <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	4a04      	ldr	r2, [pc, #16]	@ (800c308 <_ZN13abstractL6470D1Ev+0x1c>)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	601a      	str	r2, [r3, #0]
{

}
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	08017390 	.word	0x08017390
 800c30c:	00000000 	.word	0x00000000

0800c310 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800c310:	b5b0      	push	{r4, r5, r7, lr}
 800c312:	b094      	sub	sp, #80	@ 0x50
 800c314:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800c316:	f001 fb4d 	bl	800d9b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800c31a:	f000 f913 	bl	800c544 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800c31e:	f000 fcdf 	bl	800cce0 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800c322:	f000 fc81 	bl	800cc28 <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 800c326:	f000 faaf 	bl	800c888 <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 800c32a:	f000 f98d 	bl	800c648 <_ZL12MX_SPI1_Initv>
	MX_SPI2_Init();
 800c32e:	f000 f9c7 	bl	800c6c0 <_ZL12MX_SPI2_Initv>
	MX_TIM1_Init();
 800c332:	f000 fa01 	bl	800c738 <_ZL12MX_TIM1_Initv>
	MX_TIM4_Init();
 800c336:	f000 fb37 	bl	800c9a8 <_ZL12MX_TIM4_Initv>
	MX_TIM8_Init();
 800c33a:	f000 fbdd 	bl	800caf8 <_ZL12MX_TIM8_Initv>
	MX_USART3_UART_Init();
 800c33e:	f000 fca1 	bl	800cc84 <_ZL19MX_USART3_UART_Initv>
	MX_TIM6_Init();
 800c342:	f000 fb99 	bl	800ca78 <_ZL12MX_TIM6_Initv>
	/* USER CODE BEGIN 2 */

	//Start Timer2 interrupt (every 20 ms here)
	HAL_TIM_Base_Start_IT(&htim2);
 800c346:	4870      	ldr	r0, [pc, #448]	@ (800c508 <main+0x1f8>)
 800c348:	f003 fc76 	bl	800fc38 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800c34c:	2201      	movs	r2, #1
 800c34e:	496f      	ldr	r1, [pc, #444]	@ (800c50c <main+0x1fc>)
 800c350:	486f      	ldr	r0, [pc, #444]	@ (800c510 <main+0x200>)
 800c352:	f004 fc96 	bl	8010c82 <HAL_UART_Receive_IT>


	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
			reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
			reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port,
			ssel2_Pin);
 800c356:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 800c35a:	f005 fff0 	bl	801233e <_Znwj>
 800c35e:	4603      	mov	r3, r0
 800c360:	461c      	mov	r4, r3
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c362:	2501      	movs	r5, #1
			ssel2_Pin);
 800c364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c368:	9305      	str	r3, [sp, #20]
 800c36a:	4b6a      	ldr	r3, [pc, #424]	@ (800c514 <main+0x204>)
 800c36c:	9304      	str	r3, [sp, #16]
 800c36e:	2310      	movs	r3, #16
 800c370:	9303      	str	r3, [sp, #12]
 800c372:	4b69      	ldr	r3, [pc, #420]	@ (800c518 <main+0x208>)
 800c374:	9302      	str	r3, [sp, #8]
 800c376:	2310      	movs	r3, #16
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	4b66      	ldr	r3, [pc, #408]	@ (800c514 <main+0x204>)
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	2320      	movs	r3, #32
 800c380:	4a65      	ldr	r2, [pc, #404]	@ (800c518 <main+0x208>)
 800c382:	4966      	ldr	r1, [pc, #408]	@ (800c51c <main+0x20c>)
 800c384:	4620      	mov	r0, r4
 800c386:	f7f5 ff39 	bl	80021fc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c38a:	4b65      	ldr	r3, [pc, #404]	@ (800c520 <main+0x210>)
 800c38c:	601c      	str	r4, [r3, #0]

	moteurs->set_microstepping_mode(step_mode_t::STEPPER_STEP_MODE);
 800c38e:	4b64      	ldr	r3, [pc, #400]	@ (800c520 <main+0x210>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2105      	movs	r1, #5
 800c394:	4618      	mov	r0, r3
 800c396:	f7f6 faf9 	bl	800298c <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
//	moteurs->set_max_dec_moteurs(5.0, 5.0, 5.0, 5.0);




	movement_allowed = true;// TODO: false not true !!!
 800c39a:	4b62      	ldr	r3, [pc, #392]	@ (800c524 <main+0x214>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	701a      	strb	r2, [r3, #0]
	robot_started = true; // TODO: false not true !!!
 800c3a0:	4b61      	ldr	r3, [pc, #388]	@ (800c528 <main+0x218>)
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if(transmit_pos) {
 800c3a6:	4b61      	ldr	r3, [pc, #388]	@ (800c52c <main+0x21c>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d0fa      	beq.n	800c3a6 <main+0x96>
			mesures = moteurs->mesure_pas_ecoule();
 800c3b0:	4b5b      	ldr	r3, [pc, #364]	@ (800c520 <main+0x210>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7f6 f9fb 	bl	80027b0 <_ZN11BlocMoteurs17mesure_pas_ecouleEv>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	4a5c      	ldr	r2, [pc, #368]	@ (800c530 <main+0x220>)
 800c3be:	6013      	str	r3, [r2, #0]

			deplacement[0] = cos(M_PI/6) * (double)(mesures[0]*distance_per_elementary_step + mesures[3]*distance_per_elementary_step);
 800c3c0:	4b5b      	ldr	r3, [pc, #364]	@ (800c530 <main+0x220>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f4 f8dc 	bl	8000584 <__aeabi_i2d>
 800c3cc:	4b59      	ldr	r3, [pc, #356]	@ (800c534 <main+0x224>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f4 f941 	bl	8000658 <__aeabi_dmul>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4614      	mov	r4, r2
 800c3dc:	461d      	mov	r5, r3
 800c3de:	4b54      	ldr	r3, [pc, #336]	@ (800c530 <main+0x220>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	330c      	adds	r3, #12
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7f4 f8cc 	bl	8000584 <__aeabi_i2d>
 800c3ec:	4b51      	ldr	r3, [pc, #324]	@ (800c534 <main+0x224>)
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f7f4 f931 	bl	8000658 <__aeabi_dmul>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	f7f3 ff75 	bl	80002ec <__adddf3>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	4610      	mov	r0, r2
 800c408:	4619      	mov	r1, r3
 800c40a:	a33d      	add	r3, pc, #244	@ (adr r3, 800c500 <main+0x1f0>)
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	f7f4 f922 	bl	8000658 <__aeabi_dmul>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4947      	ldr	r1, [pc, #284]	@ (800c538 <main+0x228>)
 800c41a:	e9c1 2300 	strd	r2, r3, [r1]
			deplacement[1] = sin(M_PI/6) * (double)(mesures[0]*distance_per_elementary_step - mesures[3]*distance_per_elementary_step) - (double)(mesures[2]*distance_per_elementary_step);
 800c41e:	4b44      	ldr	r3, [pc, #272]	@ (800c530 <main+0x220>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4618      	mov	r0, r3
 800c426:	f7f4 f8ad 	bl	8000584 <__aeabi_i2d>
 800c42a:	4b42      	ldr	r3, [pc, #264]	@ (800c534 <main+0x224>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f4 f912 	bl	8000658 <__aeabi_dmul>
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	4614      	mov	r4, r2
 800c43a:	461d      	mov	r5, r3
 800c43c:	4b3c      	ldr	r3, [pc, #240]	@ (800c530 <main+0x220>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	330c      	adds	r3, #12
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4618      	mov	r0, r3
 800c446:	f7f4 f89d 	bl	8000584 <__aeabi_i2d>
 800c44a:	4b3a      	ldr	r3, [pc, #232]	@ (800c534 <main+0x224>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f7f4 f902 	bl	8000658 <__aeabi_dmul>
 800c454:	4602      	mov	r2, r0
 800c456:	460b      	mov	r3, r1
 800c458:	4620      	mov	r0, r4
 800c45a:	4629      	mov	r1, r5
 800c45c:	f7f3 ff44 	bl	80002e8 <__aeabi_dsub>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4610      	mov	r0, r2
 800c466:	4619      	mov	r1, r3
 800c468:	f04f 32ff 	mov.w	r2, #4294967295
 800c46c:	4b33      	ldr	r3, [pc, #204]	@ (800c53c <main+0x22c>)
 800c46e:	f7f4 f8f3 	bl	8000658 <__aeabi_dmul>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4614      	mov	r4, r2
 800c478:	461d      	mov	r5, r3
 800c47a:	4b2d      	ldr	r3, [pc, #180]	@ (800c530 <main+0x220>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3308      	adds	r3, #8
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4618      	mov	r0, r3
 800c484:	f7f4 f87e 	bl	8000584 <__aeabi_i2d>
 800c488:	4b2a      	ldr	r3, [pc, #168]	@ (800c534 <main+0x224>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	f7f4 f8e3 	bl	8000658 <__aeabi_dmul>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4620      	mov	r0, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f3 ff25 	bl	80002e8 <__aeabi_dsub>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4925      	ldr	r1, [pc, #148]	@ (800c538 <main+0x228>)
 800c4a4:	e9c1 2302 	strd	r2, r3, [r1, #8]

			char message[50] = "";
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	607b      	str	r3, [r7, #4]
 800c4ac:	f107 0308 	add.w	r3, r7, #8
 800c4b0:	222e      	movs	r2, #46	@ 0x2e
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f007 fe60 	bl	801417a <memset>
			sprintf(message, "%f %f \n", deplacement[0], deplacement[1]); // message pos
 800c4ba:	4b1f      	ldr	r3, [pc, #124]	@ (800c538 <main+0x228>)
 800c4bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c538 <main+0x228>)
 800c4c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c4c6:	1d3c      	adds	r4, r7, #4
 800c4c8:	e9cd 2300 	strd	r2, r3, [sp]
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	491b      	ldr	r1, [pc, #108]	@ (800c540 <main+0x230>)
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f007 fdee 	bl	80140b4 <siprintf>
			//sprintf(message, "%ld %ld %ld\n            ", mesures[3], mesures[2], mesures[0]); //message raw values
			HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), HAL_MAX_DELAY);
 800c4d8:	1d39      	adds	r1, r7, #4
 800c4da:	f04f 33ff 	mov.w	r3, #4294967295
 800c4de:	2232      	movs	r2, #50	@ 0x32
 800c4e0:	480b      	ldr	r0, [pc, #44]	@ (800c510 <main+0x200>)
 800c4e2:	f004 fb3c 	bl	8010b5e <HAL_UART_Transmit>
			transmit_pos = false;
 800c4e6:	4b11      	ldr	r3, [pc, #68]	@ (800c52c <main+0x21c>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
		}

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 800c4ec:	e75b      	b.n	800c3a6 <main+0x96>
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	d004      	beq.n	800c4fc <main+0x1ec>
			ssel2_Pin);
 800c4f2:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f005 fbc6 	bl	8011c88 <_ZdlPvj>
 800c4fc:	f005 fbc6 	bl	8011c8c <__cxa_end_cleanup>
 800c500:	e8584cab 	.word	0xe8584cab
 800c504:	3febb67a 	.word	0x3febb67a
 800c508:	200003d4 	.word	0x200003d4
 800c50c:	2000059c 	.word	0x2000059c
 800c510:	200004f4 	.word	0x200004f4
 800c514:	40020000 	.word	0x40020000
 800c518:	40020400 	.word	0x40020400
 800c51c:	200002dc 	.word	0x200002dc
 800c520:	2000057c 	.word	0x2000057c
 800c524:	2000059a 	.word	0x2000059a
 800c528:	2000059b 	.word	0x2000059b
 800c52c:	20000598 	.word	0x20000598
 800c530:	20000580 	.word	0x20000580
 800c534:	20000008 	.word	0x20000008
 800c538:	20000588 	.word	0x20000588
 800c53c:	3fdfffff 	.word	0x3fdfffff
 800c540:	0801627c 	.word	0x0801627c

0800c544 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800c544:	b580      	push	{r7, lr}
 800c546:	b094      	sub	sp, #80	@ 0x50
 800c548:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800c54a:	f107 031c 	add.w	r3, r7, #28
 800c54e:	2234      	movs	r2, #52	@ 0x34
 800c550:	2100      	movs	r1, #0
 800c552:	4618      	mov	r0, r3
 800c554:	f007 fe11 	bl	801417a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800c558:	f107 0308 	add.w	r3, r7, #8
 800c55c:	2200      	movs	r2, #0
 800c55e:	601a      	str	r2, [r3, #0]
 800c560:	605a      	str	r2, [r3, #4]
 800c562:	609a      	str	r2, [r3, #8]
 800c564:	60da      	str	r2, [r3, #12]
 800c566:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800c568:	2300      	movs	r3, #0
 800c56a:	607b      	str	r3, [r7, #4]
 800c56c:	4b34      	ldr	r3, [pc, #208]	@ (800c640 <_Z18SystemClock_Configv+0xfc>)
 800c56e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c570:	4a33      	ldr	r2, [pc, #204]	@ (800c640 <_Z18SystemClock_Configv+0xfc>)
 800c572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c576:	6413      	str	r3, [r2, #64]	@ 0x40
 800c578:	4b31      	ldr	r3, [pc, #196]	@ (800c640 <_Z18SystemClock_Configv+0xfc>)
 800c57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c57c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c580:	607b      	str	r3, [r7, #4]
 800c582:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c584:	2300      	movs	r3, #0
 800c586:	603b      	str	r3, [r7, #0]
 800c588:	4b2e      	ldr	r3, [pc, #184]	@ (800c644 <_Z18SystemClock_Configv+0x100>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a2d      	ldr	r2, [pc, #180]	@ (800c644 <_Z18SystemClock_Configv+0x100>)
 800c58e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	4b2b      	ldr	r3, [pc, #172]	@ (800c644 <_Z18SystemClock_Configv+0x100>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c59c:	603b      	str	r3, [r7, #0]
 800c59e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800c5b4:	2308      	movs	r3, #8
 800c5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800c5b8:	23b4      	movs	r3, #180	@ 0xb4
 800c5ba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c5bc:	2302      	movs	r3, #2
 800c5be:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c5c8:	f107 031c 	add.w	r3, r7, #28
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f002 f98b 	bl	800e8e8 <HAL_RCC_OscConfig>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bf14      	ite	ne
 800c5d8:	2301      	movne	r3, #1
 800c5da:	2300      	moveq	r3, #0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 800c5e2:	f000 fdbb 	bl	800d15c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800c5e6:	f001 fde5 	bl	800e1b4 <HAL_PWREx_EnableOverDrive>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	bf14      	ite	ne
 800c5f0:	2301      	movne	r3, #1
 800c5f2:	2300      	moveq	r3, #0
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800c5fa:	f000 fdaf 	bl	800d15c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800c5fe:	230f      	movs	r3, #15
 800c600:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c602:	2302      	movs	r3, #2
 800c604:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c606:	2300      	movs	r3, #0
 800c608:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c60a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c60e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800c610:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c614:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800c616:	f107 0308 	add.w	r3, r7, #8
 800c61a:	2105      	movs	r1, #5
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 fe19 	bl	800e254 <HAL_RCC_ClockConfig>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	bf14      	ite	ne
 800c628:	2301      	movne	r3, #1
 800c62a:	2300      	moveq	r3, #0
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800c632:	f000 fd93 	bl	800d15c <Error_Handler>
	}
}
 800c636:	bf00      	nop
 800c638:	3750      	adds	r7, #80	@ 0x50
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	40023800 	.word	0x40023800
 800c644:	40007000 	.word	0x40007000

0800c648 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800c648:	b580      	push	{r7, lr}
 800c64a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800c64c:	4b1a      	ldr	r3, [pc, #104]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c64e:	4a1b      	ldr	r2, [pc, #108]	@ (800c6bc <_ZL12MX_SPI1_Initv+0x74>)
 800c650:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800c652:	4b19      	ldr	r3, [pc, #100]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c658:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c65a:	4b17      	ldr	r3, [pc, #92]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c660:	4b15      	ldr	r3, [pc, #84]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c662:	2200      	movs	r2, #0
 800c664:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c666:	4b14      	ldr	r3, [pc, #80]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c668:	2202      	movs	r2, #2
 800c66a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c66c:	4b12      	ldr	r3, [pc, #72]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c66e:	2201      	movs	r2, #1
 800c670:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800c672:	4b11      	ldr	r3, [pc, #68]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c678:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c67a:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c67c:	2210      	movs	r2, #16
 800c67e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c680:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c682:	2200      	movs	r2, #0
 800c684:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c686:	4b0c      	ldr	r3, [pc, #48]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c688:	2200      	movs	r2, #0
 800c68a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c68c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c68e:	2200      	movs	r2, #0
 800c690:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800c692:	4b09      	ldr	r3, [pc, #36]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c694:	220a      	movs	r2, #10
 800c696:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800c698:	4807      	ldr	r0, [pc, #28]	@ (800c6b8 <_ZL12MX_SPI1_Initv+0x70>)
 800c69a:	f002 fbc3 	bl	800ee24 <HAL_SPI_Init>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	bf14      	ite	ne
 800c6a4:	2301      	movne	r3, #1
 800c6a6:	2300      	moveq	r3, #0
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800c6ae:	f000 fd55 	bl	800d15c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800c6b2:	bf00      	nop
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	200002dc 	.word	0x200002dc
 800c6bc:	40013000 	.word	0x40013000

0800c6c0 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800c6c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6c6:	4a1b      	ldr	r2, [pc, #108]	@ (800c734 <_ZL12MX_SPI2_Initv+0x74>)
 800c6c8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800c6ca:	4b19      	ldr	r3, [pc, #100]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c6d0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c6d2:	4b17      	ldr	r3, [pc, #92]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c6d8:	4b15      	ldr	r3, [pc, #84]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c6de:	4b14      	ldr	r3, [pc, #80]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c6e4:	4b12      	ldr	r3, [pc, #72]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800c6ea:	4b11      	ldr	r3, [pc, #68]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6f0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c6f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c6f8:	4b0d      	ldr	r3, [pc, #52]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c700:	2200      	movs	r2, #0
 800c702:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c704:	4b0a      	ldr	r3, [pc, #40]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c706:	2200      	movs	r2, #0
 800c708:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 800c70a:	4b09      	ldr	r3, [pc, #36]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c70c:	220a      	movs	r2, #10
 800c70e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800c710:	4807      	ldr	r0, [pc, #28]	@ (800c730 <_ZL12MX_SPI2_Initv+0x70>)
 800c712:	f002 fb87 	bl	800ee24 <HAL_SPI_Init>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	bf14      	ite	ne
 800c71c:	2301      	movne	r3, #1
 800c71e:	2300      	moveq	r3, #0
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 800c726:	f000 fd19 	bl	800d15c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800c72a:	bf00      	nop
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	20000334 	.word	0x20000334
 800c734:	40003800 	.word	0x40003800

0800c738 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800c738:	b580      	push	{r7, lr}
 800c73a:	b092      	sub	sp, #72	@ 0x48
 800c73c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c73e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
 800c746:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c74c:	2200      	movs	r2, #0
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	605a      	str	r2, [r3, #4]
 800c752:	609a      	str	r2, [r3, #8]
 800c754:	60da      	str	r2, [r3, #12]
 800c756:	611a      	str	r2, [r3, #16]
 800c758:	615a      	str	r2, [r3, #20]
 800c75a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800c75c:	1d3b      	adds	r3, r7, #4
 800c75e:	2220      	movs	r2, #32
 800c760:	2100      	movs	r1, #0
 800c762:	4618      	mov	r0, r3
 800c764:	f007 fd09 	bl	801417a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800c768:	4b45      	ldr	r3, [pc, #276]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c76a:	4a46      	ldr	r2, [pc, #280]	@ (800c884 <_ZL12MX_TIM1_Initv+0x14c>)
 800c76c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800c76e:	4b44      	ldr	r3, [pc, #272]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c770:	2200      	movs	r2, #0
 800c772:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c774:	4b42      	ldr	r3, [pc, #264]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c776:	2200      	movs	r2, #0
 800c778:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800c77a:	4b41      	ldr	r3, [pc, #260]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c77c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c780:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c782:	4b3f      	ldr	r3, [pc, #252]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c784:	2200      	movs	r2, #0
 800c786:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800c788:	4b3d      	ldr	r3, [pc, #244]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c78e:	4b3c      	ldr	r3, [pc, #240]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c790:	2200      	movs	r2, #0
 800c792:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800c794:	483a      	ldr	r0, [pc, #232]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c796:	f003 fabf 	bl	800fd18 <HAL_TIM_PWM_Init>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	bf14      	ite	ne
 800c7a0:	2301      	movne	r3, #1
 800c7a2:	2300      	moveq	r3, #0
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800c7aa:	f000 fcd7 	bl	800d15c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800c7b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4830      	ldr	r0, [pc, #192]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c7be:	f004 f89f 	bl	8010900 <HAL_TIMEx_MasterConfigSynchronization>
 800c7c2:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	bf14      	ite	ne
 800c7c8:	2301      	movne	r3, #1
 800c7ca:	2300      	moveq	r3, #0
 800c7cc:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 800c7d2:	f000 fcc3 	bl	800d15c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c7d6:	2360      	movs	r3, #96	@ 0x60
 800c7d8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800c7f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7f6:	2204      	movs	r2, #4
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4821      	ldr	r0, [pc, #132]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c7fc:	f003 fbe4 	bl	800ffc8 <HAL_TIM_PWM_ConfigChannel>
 800c800:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c802:	2b00      	cmp	r3, #0
 800c804:	bf14      	ite	ne
 800c806:	2301      	movne	r3, #1
 800c808:	2300      	moveq	r3, #0
 800c80a:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 800c810:	f000 fca4 	bl	800d15c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800c814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c818:	2208      	movs	r2, #8
 800c81a:	4619      	mov	r1, r3
 800c81c:	4818      	ldr	r0, [pc, #96]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c81e:	f003 fbd3 	bl	800ffc8 <HAL_TIM_PWM_ConfigChannel>
 800c822:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c824:	2b00      	cmp	r3, #0
 800c826:	bf14      	ite	ne
 800c828:	2301      	movne	r3, #1
 800c82a:	2300      	moveq	r3, #0
 800c82c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d001      	beq.n	800c836 <_ZL12MX_TIM1_Initv+0xfe>
		Error_Handler();
 800c832:	f000 fc93 	bl	800d15c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c836:	2300      	movs	r3, #0
 800c838:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c83a:	2300      	movs	r3, #0
 800c83c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c83e:	2300      	movs	r3, #0
 800c840:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c846:	2300      	movs	r3, #0
 800c848:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c84a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c84e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c850:	2300      	movs	r3, #0
 800c852:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800c854:	1d3b      	adds	r3, r7, #4
 800c856:	4619      	mov	r1, r3
 800c858:	4809      	ldr	r0, [pc, #36]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c85a:	f004 f8cd 	bl	80109f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800c85e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c860:	2b00      	cmp	r3, #0
 800c862:	bf14      	ite	ne
 800c864:	2301      	movne	r3, #1
 800c866:	2300      	moveq	r3, #0
 800c868:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <_ZL12MX_TIM1_Initv+0x13a>
		Error_Handler();
 800c86e:	f000 fc75 	bl	800d15c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 800c872:	4803      	ldr	r0, [pc, #12]	@ (800c880 <_ZL12MX_TIM1_Initv+0x148>)
 800c874:	f000 fdd8 	bl	800d428 <HAL_TIM_MspPostInit>

}
 800c878:	bf00      	nop
 800c87a:	3748      	adds	r7, #72	@ 0x48
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	2000038c 	.word	0x2000038c
 800c884:	40010000 	.word	0x40010000

0800c888 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08e      	sub	sp, #56	@ 0x38
 800c88c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800c88e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c892:	2200      	movs	r2, #0
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	605a      	str	r2, [r3, #4]
 800c898:	609a      	str	r2, [r3, #8]
 800c89a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c89c:	f107 0320 	add.w	r3, r7, #32
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c8a6:	1d3b      	adds	r3, r7, #4
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	605a      	str	r2, [r3, #4]
 800c8ae:	609a      	str	r2, [r3, #8]
 800c8b0:	60da      	str	r2, [r3, #12]
 800c8b2:	611a      	str	r2, [r3, #16]
 800c8b4:	615a      	str	r2, [r3, #20]
 800c8b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800c8b8:	4b39      	ldr	r3, [pc, #228]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c8ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c8be:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800c8c0:	4b37      	ldr	r3, [pc, #220]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c8c6:	4b36      	ldr	r3, [pc, #216]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1800000;
 800c8cc:	4b34      	ldr	r3, [pc, #208]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c8ce:	4a35      	ldr	r2, [pc, #212]	@ (800c9a4 <_ZL12MX_TIM2_Initv+0x11c>)
 800c8d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c8d2:	4b33      	ldr	r3, [pc, #204]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c8d8:	4b31      	ldr	r3, [pc, #196]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c8da:	2280      	movs	r2, #128	@ 0x80
 800c8dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800c8de:	4830      	ldr	r0, [pc, #192]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c8e0:	f003 f95a 	bl	800fb98 <HAL_TIM_Base_Init>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	bf14      	ite	ne
 800c8ea:	2301      	movne	r3, #1
 800c8ec:	2300      	moveq	r3, #0
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <_ZL12MX_TIM2_Initv+0x70>
		Error_Handler();
 800c8f4:	f000 fc32 	bl	800d15c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c8f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800c8fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c902:	4619      	mov	r1, r3
 800c904:	4826      	ldr	r0, [pc, #152]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c906:	f003 fc21 	bl	801014c <HAL_TIM_ConfigClockSource>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	bf14      	ite	ne
 800c910:	2301      	movne	r3, #1
 800c912:	2300      	moveq	r3, #0
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <_ZL12MX_TIM2_Initv+0x96>
		Error_Handler();
 800c91a:	f000 fc1f 	bl	800d15c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800c91e:	4820      	ldr	r0, [pc, #128]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c920:	f003 f9fa 	bl	800fd18 <HAL_TIM_PWM_Init>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	bf14      	ite	ne
 800c92a:	2301      	movne	r3, #1
 800c92c:	2300      	moveq	r3, #0
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 800c934:	f000 fc12 	bl	800d15c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c938:	2300      	movs	r3, #0
 800c93a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800c940:	f107 0320 	add.w	r3, r7, #32
 800c944:	4619      	mov	r1, r3
 800c946:	4816      	ldr	r0, [pc, #88]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c948:	f003 ffda 	bl	8010900 <HAL_TIMEx_MasterConfigSynchronization>
 800c94c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bf14      	ite	ne
 800c952:	2301      	movne	r3, #1
 800c954:	2300      	moveq	r3, #0
 800c956:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <_ZL12MX_TIM2_Initv+0xd8>
		Error_Handler();
 800c95c:	f000 fbfe 	bl	800d15c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c960:	2360      	movs	r3, #96	@ 0x60
 800c962:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c968:	2300      	movs	r3, #0
 800c96a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c96c:	2300      	movs	r3, #0
 800c96e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800c970:	1d3b      	adds	r3, r7, #4
 800c972:	2200      	movs	r2, #0
 800c974:	4619      	mov	r1, r3
 800c976:	480a      	ldr	r0, [pc, #40]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c978:	f003 fb26 	bl	800ffc8 <HAL_TIM_PWM_ConfigChannel>
 800c97c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c97e:	2b00      	cmp	r3, #0
 800c980:	bf14      	ite	ne
 800c982:	2301      	movne	r3, #1
 800c984:	2300      	moveq	r3, #0
 800c986:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <_ZL12MX_TIM2_Initv+0x108>
		Error_Handler();
 800c98c:	f000 fbe6 	bl	800d15c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800c990:	4803      	ldr	r0, [pc, #12]	@ (800c9a0 <_ZL12MX_TIM2_Initv+0x118>)
 800c992:	f000 fd49 	bl	800d428 <HAL_TIM_MspPostInit>

}
 800c996:	bf00      	nop
 800c998:	3738      	adds	r7, #56	@ 0x38
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	200003d4 	.word	0x200003d4
 800c9a4:	001b7740 	.word	0x001b7740

0800c9a8 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08a      	sub	sp, #40	@ 0x28
 800c9ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c9ae:	f107 0320 	add.w	r3, r7, #32
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c9b8:	1d3b      	adds	r3, r7, #4
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	605a      	str	r2, [r3, #4]
 800c9c0:	609a      	str	r2, [r3, #8]
 800c9c2:	60da      	str	r2, [r3, #12]
 800c9c4:	611a      	str	r2, [r3, #16]
 800c9c6:	615a      	str	r2, [r3, #20]
 800c9c8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800c9ca:	4b29      	ldr	r3, [pc, #164]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800c9cc:	4a29      	ldr	r2, [pc, #164]	@ (800ca74 <_ZL12MX_TIM4_Initv+0xcc>)
 800c9ce:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800c9d0:	4b27      	ldr	r3, [pc, #156]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c9d6:	4b26      	ldr	r3, [pc, #152]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800c9dc:	4b24      	ldr	r3, [pc, #144]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800c9de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c9e2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c9e4:	4b22      	ldr	r3, [pc, #136]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c9ea:	4b21      	ldr	r3, [pc, #132]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800c9f0:	481f      	ldr	r0, [pc, #124]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800c9f2:	f003 f991 	bl	800fd18 <HAL_TIM_PWM_Init>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	bf14      	ite	ne
 800c9fc:	2301      	movne	r3, #1
 800c9fe:	2300      	moveq	r3, #0
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 800ca06:	f000 fba9 	bl	800d15c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800ca12:	f107 0320 	add.w	r3, r7, #32
 800ca16:	4619      	mov	r1, r3
 800ca18:	4815      	ldr	r0, [pc, #84]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800ca1a:	f003 ff71 	bl	8010900 <HAL_TIMEx_MasterConfigSynchronization>
 800ca1e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	bf14      	ite	ne
 800ca24:	2301      	movne	r3, #1
 800ca26:	2300      	moveq	r3, #0
 800ca28:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 800ca2e:	f000 fb95 	bl	800d15c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca32:	2360      	movs	r3, #96	@ 0x60
 800ca34:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800ca36:	2300      	movs	r3, #0
 800ca38:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800ca42:	1d3b      	adds	r3, r7, #4
 800ca44:	2204      	movs	r2, #4
 800ca46:	4619      	mov	r1, r3
 800ca48:	4809      	ldr	r0, [pc, #36]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800ca4a:	f003 fabd 	bl	800ffc8 <HAL_TIM_PWM_ConfigChannel>
 800ca4e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	bf14      	ite	ne
 800ca54:	2301      	movne	r3, #1
 800ca56:	2300      	moveq	r3, #0
 800ca58:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 800ca5e:	f000 fb7d 	bl	800d15c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit (&htim4);
 800ca62:	4803      	ldr	r0, [pc, #12]	@ (800ca70 <_ZL12MX_TIM4_Initv+0xc8>)
 800ca64:	f000 fce0 	bl	800d428 <HAL_TIM_MspPostInit>

}
 800ca68:	bf00      	nop
 800ca6a:	3728      	adds	r7, #40	@ 0x28
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	2000041c 	.word	0x2000041c
 800ca74:	40000800 	.word	0x40000800

0800ca78 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ca7e:	463b      	mov	r3, r7
 800ca80:	2200      	movs	r2, #0
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ca86:	4b1a      	ldr	r3, [pc, #104]	@ (800caf0 <_ZL12MX_TIM6_Initv+0x78>)
 800ca88:	4a1a      	ldr	r2, [pc, #104]	@ (800caf4 <_ZL12MX_TIM6_Initv+0x7c>)
 800ca8a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 800ca8c:	4b18      	ldr	r3, [pc, #96]	@ (800caf0 <_ZL12MX_TIM6_Initv+0x78>)
 800ca8e:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800ca92:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca94:	4b16      	ldr	r3, [pc, #88]	@ (800caf0 <_ZL12MX_TIM6_Initv+0x78>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65520;
 800ca9a:	4b15      	ldr	r3, [pc, #84]	@ (800caf0 <_ZL12MX_TIM6_Initv+0x78>)
 800ca9c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800caa0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800caa2:	4b13      	ldr	r3, [pc, #76]	@ (800caf0 <_ZL12MX_TIM6_Initv+0x78>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800caa8:	4811      	ldr	r0, [pc, #68]	@ (800caf0 <_ZL12MX_TIM6_Initv+0x78>)
 800caaa:	f003 f875 	bl	800fb98 <HAL_TIM_Base_Init>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	bf14      	ite	ne
 800cab4:	2301      	movne	r3, #1
 800cab6:	2300      	moveq	r3, #0
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800cabe:	f000 fb4d 	bl	800d15c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cac2:	2300      	movs	r3, #0
 800cac4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cac6:	2300      	movs	r3, #0
 800cac8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800caca:	463b      	mov	r3, r7
 800cacc:	4619      	mov	r1, r3
 800cace:	4808      	ldr	r0, [pc, #32]	@ (800caf0 <_ZL12MX_TIM6_Initv+0x78>)
 800cad0:	f003 ff16 	bl	8010900 <HAL_TIMEx_MasterConfigSynchronization>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	bf14      	ite	ne
 800cada:	2301      	movne	r3, #1
 800cadc:	2300      	moveq	r3, #0
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d001      	beq.n	800cae8 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800cae4:	f000 fb3a 	bl	800d15c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	20000464 	.word	0x20000464
 800caf4:	40001000 	.word	0x40001000

0800caf8 <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b092      	sub	sp, #72	@ 0x48
 800cafc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800cafe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800cb08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	605a      	str	r2, [r3, #4]
 800cb12:	609a      	str	r2, [r3, #8]
 800cb14:	60da      	str	r2, [r3, #12]
 800cb16:	611a      	str	r2, [r3, #16]
 800cb18:	615a      	str	r2, [r3, #20]
 800cb1a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800cb1c:	1d3b      	adds	r3, r7, #4
 800cb1e:	2220      	movs	r2, #32
 800cb20:	2100      	movs	r1, #0
 800cb22:	4618      	mov	r0, r3
 800cb24:	f007 fb29 	bl	801417a <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800cb28:	4b3d      	ldr	r3, [pc, #244]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb2a:	4a3e      	ldr	r2, [pc, #248]	@ (800cc24 <_ZL12MX_TIM8_Initv+0x12c>)
 800cb2c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800cb2e:	4b3c      	ldr	r3, [pc, #240]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb34:	4b3a      	ldr	r3, [pc, #232]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800cb3a:	4b39      	ldr	r3, [pc, #228]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cb40:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cb42:	4b37      	ldr	r3, [pc, #220]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800cb48:	4b35      	ldr	r3, [pc, #212]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cb4e:	4b34      	ldr	r3, [pc, #208]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800cb54:	4832      	ldr	r0, [pc, #200]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb56:	f003 f8df 	bl	800fd18 <HAL_TIM_PWM_Init>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	bf14      	ite	ne
 800cb60:	2301      	movne	r3, #1
 800cb62:	2300      	moveq	r3, #0
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d001      	beq.n	800cb6e <_ZL12MX_TIM8_Initv+0x76>
		Error_Handler();
 800cb6a:	f000 faf7 	bl	800d15c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb72:	2300      	movs	r3, #0
 800cb74:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800cb76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	4828      	ldr	r0, [pc, #160]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cb7e:	f003 febf 	bl	8010900 <HAL_TIMEx_MasterConfigSynchronization>
 800cb82:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	bf14      	ite	ne
 800cb88:	2301      	movne	r3, #1
 800cb8a:	2300      	moveq	r3, #0
 800cb8c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <_ZL12MX_TIM8_Initv+0x9e>
		Error_Handler();
 800cb92:	f000 fae3 	bl	800d15c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cb96:	2360      	movs	r3, #96	@ 0x60
 800cb98:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800cba2:	2300      	movs	r3, #0
 800cba4:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cba6:	2300      	movs	r3, #0
 800cba8:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800cbb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbb6:	2204      	movs	r2, #4
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4819      	ldr	r0, [pc, #100]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cbbc:	f003 fa04 	bl	800ffc8 <HAL_TIM_PWM_ConfigChannel>
 800cbc0:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	bf14      	ite	ne
 800cbc6:	2301      	movne	r3, #1
 800cbc8:	2300      	moveq	r3, #0
 800cbca:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <_ZL12MX_TIM8_Initv+0xdc>
		Error_Handler();
 800cbd0:	f000 fac4 	bl	800d15c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800cbe8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cbec:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800cbf2:	1d3b      	adds	r3, r7, #4
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	480a      	ldr	r0, [pc, #40]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cbf8:	f003 fefe 	bl	80109f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800cbfc:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bf14      	ite	ne
 800cc02:	2301      	movne	r3, #1
 800cc04:	2300      	moveq	r3, #0
 800cc06:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d001      	beq.n	800cc10 <_ZL12MX_TIM8_Initv+0x118>
		Error_Handler();
 800cc0c:	f000 faa6 	bl	800d15c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit (&htim8);
 800cc10:	4803      	ldr	r0, [pc, #12]	@ (800cc20 <_ZL12MX_TIM8_Initv+0x128>)
 800cc12:	f000 fc09 	bl	800d428 <HAL_TIM_MspPostInit>

}
 800cc16:	bf00      	nop
 800cc18:	3748      	adds	r7, #72	@ 0x48
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	200004ac 	.word	0x200004ac
 800cc24:	40010400 	.word	0x40010400

0800cc28 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800cc2c:	4b13      	ldr	r3, [pc, #76]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc2e:	4a14      	ldr	r2, [pc, #80]	@ (800cc80 <_ZL19MX_USART2_UART_Initv+0x58>)
 800cc30:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800cc32:	4b12      	ldr	r3, [pc, #72]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cc38:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cc3a:	4b10      	ldr	r3, [pc, #64]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800cc40:	4b0e      	ldr	r3, [pc, #56]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800cc46:	4b0d      	ldr	r3, [pc, #52]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800cc4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc4e:	220c      	movs	r2, #12
 800cc50:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cc52:	4b0a      	ldr	r3, [pc, #40]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cc58:	4b08      	ldr	r3, [pc, #32]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800cc5e:	4807      	ldr	r0, [pc, #28]	@ (800cc7c <_ZL19MX_USART2_UART_Initv+0x54>)
 800cc60:	f003 ff30 	bl	8010ac4 <HAL_UART_Init>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	bf14      	ite	ne
 800cc6a:	2301      	movne	r3, #1
 800cc6c:	2300      	moveq	r3, #0
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d001      	beq.n	800cc78 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800cc74:	f000 fa72 	bl	800d15c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800cc78:	bf00      	nop
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	200004f4 	.word	0x200004f4
 800cc80:	40004400 	.word	0x40004400

0800cc84 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800cc84:	b580      	push	{r7, lr}
 800cc86:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800cc88:	4b13      	ldr	r3, [pc, #76]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cc8a:	4a14      	ldr	r2, [pc, #80]	@ (800ccdc <_ZL19MX_USART3_UART_Initv+0x58>)
 800cc8c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800cc8e:	4b12      	ldr	r3, [pc, #72]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cc90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cc94:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800cc96:	4b10      	ldr	r3, [pc, #64]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800cc9c:	4b0e      	ldr	r3, [pc, #56]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800cca2:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800cca8:	4b0b      	ldr	r3, [pc, #44]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800ccaa:	220c      	movs	r2, #12
 800ccac:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ccae:	4b0a      	ldr	r3, [pc, #40]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ccb4:	4b08      	ldr	r3, [pc, #32]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800ccba:	4807      	ldr	r0, [pc, #28]	@ (800ccd8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800ccbc:	f003 ff02 	bl	8010ac4 <HAL_UART_Init>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	bf14      	ite	ne
 800ccc6:	2301      	movne	r3, #1
 800ccc8:	2300      	moveq	r3, #0
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d001      	beq.n	800ccd4 <_ZL19MX_USART3_UART_Initv+0x50>
		Error_Handler();
 800ccd0:	f000 fa44 	bl	800d15c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800ccd4:	bf00      	nop
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	20000538 	.word	0x20000538
 800ccdc:	40004800 	.word	0x40004800

0800cce0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08a      	sub	sp, #40	@ 0x28
 800cce4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800cce6:	f107 0314 	add.w	r3, r7, #20
 800ccea:	2200      	movs	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	605a      	str	r2, [r3, #4]
 800ccf0:	609a      	str	r2, [r3, #8]
 800ccf2:	60da      	str	r2, [r3, #12]
 800ccf4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	613b      	str	r3, [r7, #16]
 800ccfa:	4b43      	ldr	r3, [pc, #268]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800ccfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccfe:	4a42      	ldr	r2, [pc, #264]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd00:	f043 0304 	orr.w	r3, r3, #4
 800cd04:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd06:	4b40      	ldr	r3, [pc, #256]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd0a:	f003 0304 	and.w	r3, r3, #4
 800cd0e:	613b      	str	r3, [r7, #16]
 800cd10:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800cd12:	2300      	movs	r3, #0
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	4b3c      	ldr	r3, [pc, #240]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd1a:	4a3b      	ldr	r2, [pc, #236]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd20:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd22:	4b39      	ldr	r3, [pc, #228]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd2a:	60fb      	str	r3, [r7, #12]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60bb      	str	r3, [r7, #8]
 800cd32:	4b35      	ldr	r3, [pc, #212]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd36:	4a34      	ldr	r2, [pc, #208]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd38:	f043 0301 	orr.w	r3, r3, #1
 800cd3c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd3e:	4b32      	ldr	r3, [pc, #200]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	60bb      	str	r3, [r7, #8]
 800cd48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	607b      	str	r3, [r7, #4]
 800cd4e:	4b2e      	ldr	r3, [pc, #184]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd52:	4a2d      	ldr	r2, [pc, #180]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd54:	f043 0302 	orr.w	r3, r3, #2
 800cd58:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd5a:	4b2b      	ldr	r3, [pc, #172]	@ (800ce08 <_ZL12MX_GPIO_Initv+0x128>)
 800cd5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd5e:	f003 0302 	and.w	r3, r3, #2
 800cd62:	607b      	str	r3, [r7, #4]
 800cd64:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ssel1_Pin | LD2_Pin | ssel2_Pin, GPIO_PIN_RESET);
 800cd66:	2200      	movs	r2, #0
 800cd68:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800cd6c:	4827      	ldr	r0, [pc, #156]	@ (800ce0c <_ZL12MX_GPIO_Initv+0x12c>)
 800cd6e:	f001 f9ef 	bl	800e150 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800cd72:	2200      	movs	r2, #0
 800cd74:	f241 2130 	movw	r1, #4656	@ 0x1230
 800cd78:	4825      	ldr	r0, [pc, #148]	@ (800ce10 <_ZL12MX_GPIO_Initv+0x130>)
 800cd7a:	f001 f9e9 	bl	800e150 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800cd7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800cd84:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800cd88:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800cd8e:	f107 0314 	add.w	r3, r7, #20
 800cd92:	4619      	mov	r1, r3
 800cd94:	481f      	ldr	r0, [pc, #124]	@ (800ce14 <_ZL12MX_GPIO_Initv+0x134>)
 800cd96:	f001 f847 	bl	800de28 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800cda2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cda4:	2301      	movs	r3, #1
 800cda6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cda8:	f107 0314 	add.w	r3, r7, #20
 800cdac:	4619      	mov	r1, r3
 800cdae:	4819      	ldr	r0, [pc, #100]	@ (800ce14 <_ZL12MX_GPIO_Initv+0x134>)
 800cdb0:	f001 f83a 	bl	800de28 <HAL_GPIO_Init>

	/*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
	GPIO_InitStruct.Pin = ssel1_Pin | LD2_Pin | ssel2_Pin;
 800cdb4:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800cdb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdc6:	f107 0314 	add.w	r3, r7, #20
 800cdca:	4619      	mov	r1, r3
 800cdcc:	480f      	ldr	r0, [pc, #60]	@ (800ce0c <_ZL12MX_GPIO_Initv+0x12c>)
 800cdce:	f001 f82b 	bl	800de28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 reset_shield_2_Pin reset_shield_1_Pin PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin
 800cdd2:	f241 2330 	movw	r3, #4656	@ 0x1230
 800cdd6:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cddc:	2300      	movs	r3, #0
 800cdde:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cde0:	2300      	movs	r3, #0
 800cde2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cde4:	f107 0314 	add.w	r3, r7, #20
 800cde8:	4619      	mov	r1, r3
 800cdea:	4809      	ldr	r0, [pc, #36]	@ (800ce10 <_ZL12MX_GPIO_Initv+0x130>)
 800cdec:	f001 f81c 	bl	800de28 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	2006      	movs	r0, #6
 800cdf6:	f000 ff4e 	bl	800dc96 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800cdfa:	2006      	movs	r0, #6
 800cdfc:	f000 ff67 	bl	800dcce <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800ce00:	bf00      	nop
 800ce02:	3728      	adds	r7, #40	@ 0x28
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	40023800 	.word	0x40023800
 800ce0c:	40020000 	.word	0x40020000
 800ce10:	40020400 	.word	0x40020400
 800ce14:	40020800 	.word	0x40020800

0800ce18 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7f3 fbaf 	bl	8000584 <__aeabi_i2d>
 800ce26:	4602      	mov	r2, r0
 800ce28:	460b      	mov	r3, r1
 800ce2a:	ec43 2b10 	vmov	d0, r2, r3
 800ce2e:	f005 fc39 	bl	80126a4 <sqrt>
 800ce32:	eeb0 7a40 	vmov.f32	s14, s0
 800ce36:	eef0 7a60 	vmov.f32	s15, s1
 800ce3a:	eeb0 0a47 	vmov.f32	s0, s14
 800ce3e:	eef0 0a67 	vmov.f32	s1, s15
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <_Z9moveSpeedddd>:

/* USER CODE BEGIN 4 */


void moveSpeed(double vx, double vy, double wz)
{
 800ce48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce4c:	b08f      	sub	sp, #60	@ 0x3c
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	ed87 0b04 	vstr	d0, [r7, #16]
 800ce54:	ed87 1b02 	vstr	d1, [r7, #8]
 800ce58:	ed87 2b00 	vstr	d2, [r7]
//	moteurs->motors_on();
//	moteurs->commande_vitesses_absolues(Vaf, -Vcf, Vbf, 0);



	const double d = 0.13; //m
 800ce5c:	a35a      	add	r3, pc, #360	@ (adr r3, 800cfc8 <_Z9moveSpeedddd+0x180>)
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	//calcul des vitesses
	double Vm1 = -(0.5*vy - sqrt(3)/2*vx - d*wz);
 800ce66:	f04f 0200 	mov.w	r2, #0
 800ce6a:	4b59      	ldr	r3, [pc, #356]	@ (800cfd0 <_Z9moveSpeedddd+0x188>)
 800ce6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce70:	f7f3 fbf2 	bl	8000658 <__aeabi_dmul>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4690      	mov	r8, r2
 800ce7a:	4699      	mov	r9, r3
 800ce7c:	2003      	movs	r0, #3
 800ce7e:	f7ff ffcb 	bl	800ce18 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800ce82:	ec51 0b10 	vmov	r0, r1, d0
 800ce86:	f04f 0200 	mov.w	r2, #0
 800ce8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce8e:	f7f3 fd0d 	bl	80008ac <__aeabi_ddiv>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	4610      	mov	r0, r2
 800ce98:	4619      	mov	r1, r3
 800ce9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce9e:	f7f3 fbdb 	bl	8000658 <__aeabi_dmul>
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	4640      	mov	r0, r8
 800cea8:	4649      	mov	r1, r9
 800ceaa:	f7f3 fa1d 	bl	80002e8 <__aeabi_dsub>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	4690      	mov	r8, r2
 800ceb4:	4699      	mov	r9, r3
 800ceb6:	a344      	add	r3, pc, #272	@ (adr r3, 800cfc8 <_Z9moveSpeedddd+0x180>)
 800ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cec0:	f7f3 fbca 	bl	8000658 <__aeabi_dmul>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	4640      	mov	r0, r8
 800ceca:	4649      	mov	r1, r9
 800cecc:	f7f3 fa0c 	bl	80002e8 <__aeabi_dsub>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	4611      	mov	r1, r2
 800ced6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ced8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800cedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	double Vm3 = 0.5*vy + sqrt(3)/2*vx - d*wz;
 800cede:	f04f 0200 	mov.w	r2, #0
 800cee2:	4b3b      	ldr	r3, [pc, #236]	@ (800cfd0 <_Z9moveSpeedddd+0x188>)
 800cee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cee8:	f7f3 fbb6 	bl	8000658 <__aeabi_dmul>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	4690      	mov	r8, r2
 800cef2:	4699      	mov	r9, r3
 800cef4:	2003      	movs	r0, #3
 800cef6:	f7ff ff8f 	bl	800ce18 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800cefa:	ec51 0b10 	vmov	r0, r1, d0
 800cefe:	f04f 0200 	mov.w	r2, #0
 800cf02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cf06:	f7f3 fcd1 	bl	80008ac <__aeabi_ddiv>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4610      	mov	r0, r2
 800cf10:	4619      	mov	r1, r3
 800cf12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cf16:	f7f3 fb9f 	bl	8000658 <__aeabi_dmul>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4640      	mov	r0, r8
 800cf20:	4649      	mov	r1, r9
 800cf22:	f7f3 f9e3 	bl	80002ec <__adddf3>
 800cf26:	4602      	mov	r2, r0
 800cf28:	460b      	mov	r3, r1
 800cf2a:	4690      	mov	r8, r2
 800cf2c:	4699      	mov	r9, r3
 800cf2e:	a326      	add	r3, pc, #152	@ (adr r3, 800cfc8 <_Z9moveSpeedddd+0x180>)
 800cf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf34:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf38:	f7f3 fb8e 	bl	8000658 <__aeabi_dmul>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	460b      	mov	r3, r1
 800cf40:	4640      	mov	r0, r8
 800cf42:	4649      	mov	r1, r9
 800cf44:	f7f3 f9d0 	bl	80002e8 <__aeabi_dsub>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Vm2 = (-vy - d*wz);
 800cf50:	68bc      	ldr	r4, [r7, #8]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800cf58:	a31b      	add	r3, pc, #108	@ (adr r3, 800cfc8 <_Z9moveSpeedddd+0x180>)
 800cf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf62:	f7f3 fb79 	bl	8000658 <__aeabi_dmul>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 f9bb 	bl	80002e8 <__aeabi_dsub>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//pilotage des moteurs
	moteurs->motors_on();
 800cf7a:	4b16      	ldr	r3, [pc, #88]	@ (800cfd4 <_Z9moveSpeedddd+0x18c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7f5 fbb8 	bl	80026f4 <_ZN11BlocMoteurs9motors_onEv>
	moteurs->commande_vitesses_absolues(Vm3, 0, Vm2, Vm1);
 800cf84:	4b13      	ldr	r3, [pc, #76]	@ (800cfd4 <_Z9moveSpeedddd+0x18c>)
 800cf86:	681c      	ldr	r4, [r3, #0]
 800cf88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cf8c:	f7f3 fe3c 	bl	8000c08 <__aeabi_d2f>
 800cf90:	4605      	mov	r5, r0
 800cf92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cf96:	f7f3 fe37 	bl	8000c08 <__aeabi_d2f>
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cfa0:	f7f3 fe32 	bl	8000c08 <__aeabi_d2f>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	ee01 3a90 	vmov	s3, r3
 800cfaa:	ee01 6a10 	vmov	s2, r6
 800cfae:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800cfd8 <_Z9moveSpeedddd+0x190>
 800cfb2:	ee00 5a10 	vmov	s0, r5
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f7f5 fb41 	bl	800263e <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>
}
 800cfbc:	bf00      	nop
 800cfbe:	373c      	adds	r7, #60	@ 0x3c
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfc6:	bf00      	nop
 800cfc8:	0a3d70a4 	.word	0x0a3d70a4
 800cfcc:	3fc0a3d7 	.word	0x3fc0a3d7
 800cfd0:	3fe00000 	.word	0x3fe00000
 800cfd4:	2000057c 	.word	0x2000057c
 800cfd8:	00000000 	.word	0x00000000

0800cfdc <_Z4stopv>:


void stop()
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	af00      	add	r7, sp, #0
	moteurs->motors_stop_hard();
 800cfe0:	4b03      	ldr	r3, [pc, #12]	@ (800cff0 <_Z4stopv+0x14>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7f5 fb92 	bl	800270e <_ZN11BlocMoteurs16motors_stop_hardEv>
}
 800cfea:	bf00      	nop
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	2000057c 	.word	0x2000057c

0800cff4 <HAL_GPIO_EXTI_Callback>:


// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800cffe:	88fb      	ldrh	r3, [r7, #6]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d102      	bne.n	800d00a <HAL_GPIO_EXTI_Callback+0x16>
		// Motors are busy when pin low. Rising edge -> no longer busy
		motors_busy = false;
 800d004:	4b04      	ldr	r3, [pc, #16]	@ (800d018 <HAL_GPIO_EXTI_Callback+0x24>)
 800d006:	2200      	movs	r2, #0
 800d008:	701a      	strb	r2, [r3, #0]
	}
}
 800d00a:	bf00      	nop
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	20000599 	.word	0x20000599

0800d01c <HAL_UART_TxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]

}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a3e      	ldr	r2, [pc, #248]	@ (800d138 <HAL_UART_RxCpltCallback+0x108>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d15f      	bne.n	800d102 <HAL_UART_RxCpltCallback+0xd2>
	{
		switch(uart_received_char)
 800d042:	4b3e      	ldr	r3, [pc, #248]	@ (800d13c <HAL_UART_RxCpltCallback+0x10c>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	3b30      	subs	r3, #48	@ 0x30
 800d048:	2b09      	cmp	r3, #9
 800d04a:	d854      	bhi.n	800d0f6 <HAL_UART_RxCpltCallback+0xc6>
 800d04c:	a201      	add	r2, pc, #4	@ (adr r2, 800d054 <HAL_UART_RxCpltCallback+0x24>)
 800d04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d052:	bf00      	nop
 800d054:	0800d0ef 	.word	0x0800d0ef
 800d058:	0800d0f7 	.word	0x0800d0f7
 800d05c:	0800d095 	.word	0x0800d095
 800d060:	0800d0f7 	.word	0x0800d0f7
 800d064:	0800d0a7 	.word	0x0800d0a7
 800d068:	0800d07d 	.word	0x0800d07d
 800d06c:	0800d0b9 	.word	0x0800d0b9
 800d070:	0800d0cb 	.word	0x0800d0cb
 800d074:	0800d083 	.word	0x0800d083
 800d078:	0800d0dd 	.word	0x0800d0dd
		{
		case '5':
			stop();
 800d07c:	f7ff ffae 	bl	800cfdc <_Z4stopv>
			break;
 800d080:	e03a      	b.n	800d0f8 <HAL_UART_RxCpltCallback+0xc8>

		case '8':
			moveSpeed(5, 0, 0);
 800d082:	ed9f 2b23 	vldr	d2, [pc, #140]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d086:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d08a:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 800d118 <HAL_UART_RxCpltCallback+0xe8>
 800d08e:	f7ff fedb 	bl	800ce48 <_Z9moveSpeedddd>
			break;
 800d092:	e031      	b.n	800d0f8 <HAL_UART_RxCpltCallback+0xc8>

		case '2':
			moveSpeed(-5, 0, 0);
 800d094:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d098:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d09c:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 800d120 <HAL_UART_RxCpltCallback+0xf0>
 800d0a0:	f7ff fed2 	bl	800ce48 <_Z9moveSpeedddd>
			break;
 800d0a4:	e028      	b.n	800d0f8 <HAL_UART_RxCpltCallback+0xc8>

		case '4':
			moveSpeed(0, -5, 0);
 800d0a6:	ed9f 2b1a 	vldr	d2, [pc, #104]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d0aa:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 800d120 <HAL_UART_RxCpltCallback+0xf0>
 800d0ae:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d0b2:	f7ff fec9 	bl	800ce48 <_Z9moveSpeedddd>
			break;
 800d0b6:	e01f      	b.n	800d0f8 <HAL_UART_RxCpltCallback+0xc8>

		case '6':
			moveSpeed(0, 5, 0);
 800d0b8:	ed9f 2b15 	vldr	d2, [pc, #84]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d0bc:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 800d118 <HAL_UART_RxCpltCallback+0xe8>
 800d0c0:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d0c4:	f7ff fec0 	bl	800ce48 <_Z9moveSpeedddd>
			break;
 800d0c8:	e016      	b.n	800d0f8 <HAL_UART_RxCpltCallback+0xc8>

		case '7':
			moveSpeed(0, 0, -20);
 800d0ca:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 800d128 <HAL_UART_RxCpltCallback+0xf8>
 800d0ce:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d0d2:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d0d6:	f7ff feb7 	bl	800ce48 <_Z9moveSpeedddd>
			break;
 800d0da:	e00d      	b.n	800d0f8 <HAL_UART_RxCpltCallback+0xc8>

		case '9':
			moveSpeed(0, 0, 20);
 800d0dc:	ed9f 2b14 	vldr	d2, [pc, #80]	@ 800d130 <HAL_UART_RxCpltCallback+0x100>
 800d0e0:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d0e4:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 800d110 <HAL_UART_RxCpltCallback+0xe0>
 800d0e8:	f7ff feae 	bl	800ce48 <_Z9moveSpeedddd>
			break;
 800d0ec:	e004      	b.n	800d0f8 <HAL_UART_RxCpltCallback+0xc8>

		case '0':
			transmit_pos = true;
 800d0ee:	4b14      	ldr	r3, [pc, #80]	@ (800d140 <HAL_UART_RxCpltCallback+0x110>)
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	701a      	strb	r2, [r3, #0]
			break;
 800d0f4:	e000      	b.n	800d0f8 <HAL_UART_RxCpltCallback+0xc8>




		default:
			break;
 800d0f6:	bf00      	nop
		}

		// ALWAYS READ UART
		HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	4910      	ldr	r1, [pc, #64]	@ (800d13c <HAL_UART_RxCpltCallback+0x10c>)
 800d0fc:	4811      	ldr	r0, [pc, #68]	@ (800d144 <HAL_UART_RxCpltCallback+0x114>)
 800d0fe:	f003 fdc0 	bl	8010c82 <HAL_UART_Receive_IT>
	}
}
 800d102:	bf00      	nop
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	f3af 8000 	nop.w
	...
 800d11c:	40140000 	.word	0x40140000
 800d120:	00000000 	.word	0x00000000
 800d124:	c0140000 	.word	0xc0140000
 800d128:	00000000 	.word	0x00000000
 800d12c:	c0340000 	.word	0xc0340000
 800d130:	00000000 	.word	0x00000000
 800d134:	40340000 	.word	0x40340000
 800d138:	40004400 	.word	0x40004400
 800d13c:	2000059c 	.word	0x2000059c
 800d140:	20000598 	.word	0x20000598
 800d144:	200004f4 	.word	0x200004f4

0800d148 <HAL_TIM_PeriodElapsedCallback>:

//Timer 2 interrupt (every 20ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]

}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800d15c:	b480      	push	{r7}
 800d15e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d160:	b672      	cpsid	i
}
 800d162:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800d164:	bf00      	nop
 800d166:	e7fd      	b.n	800d164 <Error_Handler+0x8>

0800d168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d16e:	2300      	movs	r3, #0
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	4b10      	ldr	r3, [pc, #64]	@ (800d1b4 <HAL_MspInit+0x4c>)
 800d174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d176:	4a0f      	ldr	r2, [pc, #60]	@ (800d1b4 <HAL_MspInit+0x4c>)
 800d178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d17c:	6453      	str	r3, [r2, #68]	@ 0x44
 800d17e:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b4 <HAL_MspInit+0x4c>)
 800d180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d186:	607b      	str	r3, [r7, #4]
 800d188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d18a:	2300      	movs	r3, #0
 800d18c:	603b      	str	r3, [r7, #0]
 800d18e:	4b09      	ldr	r3, [pc, #36]	@ (800d1b4 <HAL_MspInit+0x4c>)
 800d190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d192:	4a08      	ldr	r2, [pc, #32]	@ (800d1b4 <HAL_MspInit+0x4c>)
 800d194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d198:	6413      	str	r3, [r2, #64]	@ 0x40
 800d19a:	4b06      	ldr	r3, [pc, #24]	@ (800d1b4 <HAL_MspInit+0x4c>)
 800d19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d19e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800d1a6:	2007      	movs	r0, #7
 800d1a8:	f000 fd6a 	bl	800dc80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d1ac:	bf00      	nop
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	40023800 	.word	0x40023800

0800d1b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b08c      	sub	sp, #48	@ 0x30
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1c0:	f107 031c 	add.w	r3, r7, #28
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	601a      	str	r2, [r3, #0]
 800d1c8:	605a      	str	r2, [r3, #4]
 800d1ca:	609a      	str	r2, [r3, #8]
 800d1cc:	60da      	str	r2, [r3, #12]
 800d1ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a45      	ldr	r2, [pc, #276]	@ (800d2ec <HAL_SPI_MspInit+0x134>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d14a      	bne.n	800d270 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d1da:	2300      	movs	r3, #0
 800d1dc:	61bb      	str	r3, [r7, #24]
 800d1de:	4b44      	ldr	r3, [pc, #272]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1e2:	4a43      	ldr	r2, [pc, #268]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d1e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d1e8:	6453      	str	r3, [r2, #68]	@ 0x44
 800d1ea:	4b41      	ldr	r3, [pc, #260]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d1f2:	61bb      	str	r3, [r7, #24]
 800d1f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	4b3d      	ldr	r3, [pc, #244]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1fe:	4a3c      	ldr	r2, [pc, #240]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d200:	f043 0301 	orr.w	r3, r3, #1
 800d204:	6313      	str	r3, [r2, #48]	@ 0x30
 800d206:	4b3a      	ldr	r3, [pc, #232]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	617b      	str	r3, [r7, #20]
 800d210:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d212:	2300      	movs	r3, #0
 800d214:	613b      	str	r3, [r7, #16]
 800d216:	4b36      	ldr	r3, [pc, #216]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d21a:	4a35      	ldr	r2, [pc, #212]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d21c:	f043 0302 	orr.w	r3, r3, #2
 800d220:	6313      	str	r3, [r2, #48]	@ 0x30
 800d222:	4b33      	ldr	r3, [pc, #204]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d226:	f003 0302 	and.w	r3, r3, #2
 800d22a:	613b      	str	r3, [r7, #16]
 800d22c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d22e:	23c0      	movs	r3, #192	@ 0xc0
 800d230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d232:	2302      	movs	r3, #2
 800d234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d236:	2300      	movs	r3, #0
 800d238:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d23a:	2303      	movs	r3, #3
 800d23c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d23e:	2305      	movs	r3, #5
 800d240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d242:	f107 031c 	add.w	r3, r7, #28
 800d246:	4619      	mov	r1, r3
 800d248:	482a      	ldr	r0, [pc, #168]	@ (800d2f4 <HAL_SPI_MspInit+0x13c>)
 800d24a:	f000 fded 	bl	800de28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d24e:	2308      	movs	r3, #8
 800d250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d252:	2302      	movs	r3, #2
 800d254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d256:	2300      	movs	r3, #0
 800d258:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d25a:	2303      	movs	r3, #3
 800d25c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d25e:	2305      	movs	r3, #5
 800d260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d262:	f107 031c 	add.w	r3, r7, #28
 800d266:	4619      	mov	r1, r3
 800d268:	4823      	ldr	r0, [pc, #140]	@ (800d2f8 <HAL_SPI_MspInit+0x140>)
 800d26a:	f000 fddd 	bl	800de28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d26e:	e038      	b.n	800d2e2 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a21      	ldr	r2, [pc, #132]	@ (800d2fc <HAL_SPI_MspInit+0x144>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d133      	bne.n	800d2e2 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d27a:	2300      	movs	r3, #0
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d282:	4a1b      	ldr	r2, [pc, #108]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d288:	6413      	str	r3, [r2, #64]	@ 0x40
 800d28a:	4b19      	ldr	r3, [pc, #100]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d28e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d296:	2300      	movs	r3, #0
 800d298:	60bb      	str	r3, [r7, #8]
 800d29a:	4b15      	ldr	r3, [pc, #84]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d29e:	4a14      	ldr	r2, [pc, #80]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d2a0:	f043 0304 	orr.w	r3, r3, #4
 800d2a4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2a6:	4b12      	ldr	r3, [pc, #72]	@ (800d2f0 <HAL_SPI_MspInit+0x138>)
 800d2a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2aa:	f003 0304 	and.w	r3, r3, #4
 800d2ae:	60bb      	str	r3, [r7, #8]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800d2b2:	238c      	movs	r3, #140	@ 0x8c
 800d2b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d2c2:	2305      	movs	r3, #5
 800d2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d2c6:	f107 031c 	add.w	r3, r7, #28
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	480c      	ldr	r0, [pc, #48]	@ (800d300 <HAL_SPI_MspInit+0x148>)
 800d2ce:	f000 fdab 	bl	800de28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	2024      	movs	r0, #36	@ 0x24
 800d2d8:	f000 fcdd 	bl	800dc96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800d2dc:	2024      	movs	r0, #36	@ 0x24
 800d2de:	f000 fcf6 	bl	800dcce <HAL_NVIC_EnableIRQ>
}
 800d2e2:	bf00      	nop
 800d2e4:	3730      	adds	r7, #48	@ 0x30
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	40013000 	.word	0x40013000
 800d2f0:	40023800 	.word	0x40023800
 800d2f4:	40020000 	.word	0x40020000
 800d2f8:	40020400 	.word	0x40020400
 800d2fc:	40003800 	.word	0x40003800
 800d300:	40020800 	.word	0x40020800

0800d304 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800d304:	b480      	push	{r7}
 800d306:	b087      	sub	sp, #28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a1f      	ldr	r2, [pc, #124]	@ (800d390 <HAL_TIM_PWM_MspInit+0x8c>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d10e      	bne.n	800d334 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d316:	2300      	movs	r3, #0
 800d318:	617b      	str	r3, [r7, #20]
 800d31a:	4b1e      	ldr	r3, [pc, #120]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d31e:	4a1d      	ldr	r2, [pc, #116]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d320:	f043 0301 	orr.w	r3, r3, #1
 800d324:	6453      	str	r3, [r2, #68]	@ 0x44
 800d326:	4b1b      	ldr	r3, [pc, #108]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	617b      	str	r3, [r7, #20]
 800d330:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d332:	e026      	b.n	800d382 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a17      	ldr	r2, [pc, #92]	@ (800d398 <HAL_TIM_PWM_MspInit+0x94>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d10e      	bne.n	800d35c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d33e:	2300      	movs	r3, #0
 800d340:	613b      	str	r3, [r7, #16]
 800d342:	4b14      	ldr	r3, [pc, #80]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d346:	4a13      	ldr	r2, [pc, #76]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d348:	f043 0304 	orr.w	r3, r3, #4
 800d34c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d34e:	4b11      	ldr	r3, [pc, #68]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d352:	f003 0304 	and.w	r3, r3, #4
 800d356:	613b      	str	r3, [r7, #16]
 800d358:	693b      	ldr	r3, [r7, #16]
}
 800d35a:	e012      	b.n	800d382 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a0e      	ldr	r2, [pc, #56]	@ (800d39c <HAL_TIM_PWM_MspInit+0x98>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d10d      	bne.n	800d382 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d366:	2300      	movs	r3, #0
 800d368:	60fb      	str	r3, [r7, #12]
 800d36a:	4b0a      	ldr	r3, [pc, #40]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d36c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d36e:	4a09      	ldr	r2, [pc, #36]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d370:	f043 0302 	orr.w	r3, r3, #2
 800d374:	6453      	str	r3, [r2, #68]	@ 0x44
 800d376:	4b07      	ldr	r3, [pc, #28]	@ (800d394 <HAL_TIM_PWM_MspInit+0x90>)
 800d378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d37a:	f003 0302 	and.w	r3, r3, #2
 800d37e:	60fb      	str	r3, [r7, #12]
 800d380:	68fb      	ldr	r3, [r7, #12]
}
 800d382:	bf00      	nop
 800d384:	371c      	adds	r7, #28
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	40010000 	.word	0x40010000
 800d394:	40023800 	.word	0x40023800
 800d398:	40000800 	.word	0x40000800
 800d39c:	40010400 	.word	0x40010400

0800d3a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3b0:	d116      	bne.n	800d3e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60fb      	str	r3, [r7, #12]
 800d3b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d420 <HAL_TIM_Base_MspInit+0x80>)
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ba:	4a19      	ldr	r2, [pc, #100]	@ (800d420 <HAL_TIM_Base_MspInit+0x80>)
 800d3bc:	f043 0301 	orr.w	r3, r3, #1
 800d3c0:	6413      	str	r3, [r2, #64]	@ 0x40
 800d3c2:	4b17      	ldr	r3, [pc, #92]	@ (800d420 <HAL_TIM_Base_MspInit+0x80>)
 800d3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	201c      	movs	r0, #28
 800d3d4:	f000 fc5f 	bl	800dc96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d3d8:	201c      	movs	r0, #28
 800d3da:	f000 fc78 	bl	800dcce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800d3de:	e01a      	b.n	800d416 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a0f      	ldr	r2, [pc, #60]	@ (800d424 <HAL_TIM_Base_MspInit+0x84>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d115      	bne.n	800d416 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	60bb      	str	r3, [r7, #8]
 800d3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d420 <HAL_TIM_Base_MspInit+0x80>)
 800d3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f2:	4a0b      	ldr	r2, [pc, #44]	@ (800d420 <HAL_TIM_Base_MspInit+0x80>)
 800d3f4:	f043 0310 	orr.w	r3, r3, #16
 800d3f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800d3fa:	4b09      	ldr	r3, [pc, #36]	@ (800d420 <HAL_TIM_Base_MspInit+0x80>)
 800d3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3fe:	f003 0310 	and.w	r3, r3, #16
 800d402:	60bb      	str	r3, [r7, #8]
 800d404:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800d406:	2200      	movs	r2, #0
 800d408:	2100      	movs	r1, #0
 800d40a:	2036      	movs	r0, #54	@ 0x36
 800d40c:	f000 fc43 	bl	800dc96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d410:	2036      	movs	r0, #54	@ 0x36
 800d412:	f000 fc5c 	bl	800dcce <HAL_NVIC_EnableIRQ>
}
 800d416:	bf00      	nop
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	40023800 	.word	0x40023800
 800d424:	40001000 	.word	0x40001000

0800d428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08c      	sub	sp, #48	@ 0x30
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d430:	f107 031c 	add.w	r3, r7, #28
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	605a      	str	r2, [r3, #4]
 800d43a:	609a      	str	r2, [r3, #8]
 800d43c:	60da      	str	r2, [r3, #12]
 800d43e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a49      	ldr	r2, [pc, #292]	@ (800d56c <HAL_TIM_MspPostInit+0x144>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d11f      	bne.n	800d48a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d44a:	2300      	movs	r3, #0
 800d44c:	61bb      	str	r3, [r7, #24]
 800d44e:	4b48      	ldr	r3, [pc, #288]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d452:	4a47      	ldr	r2, [pc, #284]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d454:	f043 0302 	orr.w	r3, r3, #2
 800d458:	6313      	str	r3, [r2, #48]	@ 0x30
 800d45a:	4b45      	ldr	r3, [pc, #276]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d45c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d45e:	f003 0302 	and.w	r3, r3, #2
 800d462:	61bb      	str	r3, [r7, #24]
 800d464:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800d466:	f248 0301 	movw	r3, #32769	@ 0x8001
 800d46a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d46c:	2302      	movs	r3, #2
 800d46e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d470:	2300      	movs	r3, #0
 800d472:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d474:	2300      	movs	r3, #0
 800d476:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d478:	2301      	movs	r3, #1
 800d47a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d47c:	f107 031c 	add.w	r3, r7, #28
 800d480:	4619      	mov	r1, r3
 800d482:	483c      	ldr	r0, [pc, #240]	@ (800d574 <HAL_TIM_MspPostInit+0x14c>)
 800d484:	f000 fcd0 	bl	800de28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800d488:	e06c      	b.n	800d564 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d492:	d11f      	bne.n	800d4d4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d494:	2300      	movs	r3, #0
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	4b35      	ldr	r3, [pc, #212]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d49c:	4a34      	ldr	r2, [pc, #208]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d49e:	f043 0301 	orr.w	r3, r3, #1
 800d4a2:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4a4:	4b32      	ldr	r3, [pc, #200]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a8:	f003 0301 	and.w	r3, r3, #1
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d4b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4c6:	f107 031c 	add.w	r3, r7, #28
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	482a      	ldr	r0, [pc, #168]	@ (800d578 <HAL_TIM_MspPostInit+0x150>)
 800d4ce:	f000 fcab 	bl	800de28 <HAL_GPIO_Init>
}
 800d4d2:	e047      	b.n	800d564 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a28      	ldr	r2, [pc, #160]	@ (800d57c <HAL_TIM_MspPostInit+0x154>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d11e      	bne.n	800d51c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4de:	2300      	movs	r3, #0
 800d4e0:	613b      	str	r3, [r7, #16]
 800d4e2:	4b23      	ldr	r3, [pc, #140]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d4e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4e6:	4a22      	ldr	r2, [pc, #136]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d4e8:	f043 0302 	orr.w	r3, r3, #2
 800d4ec:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4ee:	4b20      	ldr	r3, [pc, #128]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	613b      	str	r3, [r7, #16]
 800d4f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d4fa:	2380      	movs	r3, #128	@ 0x80
 800d4fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4fe:	2302      	movs	r3, #2
 800d500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d502:	2300      	movs	r3, #0
 800d504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d506:	2300      	movs	r3, #0
 800d508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d50a:	2302      	movs	r3, #2
 800d50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d50e:	f107 031c 	add.w	r3, r7, #28
 800d512:	4619      	mov	r1, r3
 800d514:	4817      	ldr	r0, [pc, #92]	@ (800d574 <HAL_TIM_MspPostInit+0x14c>)
 800d516:	f000 fc87 	bl	800de28 <HAL_GPIO_Init>
}
 800d51a:	e023      	b.n	800d564 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a17      	ldr	r2, [pc, #92]	@ (800d580 <HAL_TIM_MspPostInit+0x158>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d11e      	bne.n	800d564 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d526:	2300      	movs	r3, #0
 800d528:	60fb      	str	r3, [r7, #12]
 800d52a:	4b11      	ldr	r3, [pc, #68]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d52e:	4a10      	ldr	r2, [pc, #64]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d530:	f043 0302 	orr.w	r3, r3, #2
 800d534:	6313      	str	r3, [r2, #48]	@ 0x30
 800d536:	4b0e      	ldr	r3, [pc, #56]	@ (800d570 <HAL_TIM_MspPostInit+0x148>)
 800d538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d53a:	f003 0302 	and.w	r3, r3, #2
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800d542:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d548:	2302      	movs	r3, #2
 800d54a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d54c:	2300      	movs	r3, #0
 800d54e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d550:	2300      	movs	r3, #0
 800d552:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d554:	2303      	movs	r3, #3
 800d556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d558:	f107 031c 	add.w	r3, r7, #28
 800d55c:	4619      	mov	r1, r3
 800d55e:	4805      	ldr	r0, [pc, #20]	@ (800d574 <HAL_TIM_MspPostInit+0x14c>)
 800d560:	f000 fc62 	bl	800de28 <HAL_GPIO_Init>
}
 800d564:	bf00      	nop
 800d566:	3730      	adds	r7, #48	@ 0x30
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	40010000 	.word	0x40010000
 800d570:	40023800 	.word	0x40023800
 800d574:	40020400 	.word	0x40020400
 800d578:	40020000 	.word	0x40020000
 800d57c:	40000800 	.word	0x40000800
 800d580:	40010400 	.word	0x40010400

0800d584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b08c      	sub	sp, #48	@ 0x30
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d58c:	f107 031c 	add.w	r3, r7, #28
 800d590:	2200      	movs	r2, #0
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	605a      	str	r2, [r3, #4]
 800d596:	609a      	str	r2, [r3, #8]
 800d598:	60da      	str	r2, [r3, #12]
 800d59a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a49      	ldr	r2, [pc, #292]	@ (800d6c8 <HAL_UART_MspInit+0x144>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d134      	bne.n	800d610 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	61bb      	str	r3, [r7, #24]
 800d5aa:	4b48      	ldr	r3, [pc, #288]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5ae:	4a47      	ldr	r2, [pc, #284]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d5b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d5b4:	6413      	str	r3, [r2, #64]	@ 0x40
 800d5b6:	4b45      	ldr	r3, [pc, #276]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5be:	61bb      	str	r3, [r7, #24]
 800d5c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	617b      	str	r3, [r7, #20]
 800d5c6:	4b41      	ldr	r3, [pc, #260]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5ca:	4a40      	ldr	r2, [pc, #256]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d5cc:	f043 0301 	orr.w	r3, r3, #1
 800d5d0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d5d2:	4b3e      	ldr	r3, [pc, #248]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d5d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	617b      	str	r3, [r7, #20]
 800d5dc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800d5de:	230c      	movs	r3, #12
 800d5e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5e2:	2302      	movs	r3, #2
 800d5e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d5ee:	2307      	movs	r3, #7
 800d5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5f2:	f107 031c 	add.w	r3, r7, #28
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4835      	ldr	r0, [pc, #212]	@ (800d6d0 <HAL_UART_MspInit+0x14c>)
 800d5fa:	f000 fc15 	bl	800de28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d5fe:	2200      	movs	r2, #0
 800d600:	2100      	movs	r1, #0
 800d602:	2026      	movs	r0, #38	@ 0x26
 800d604:	f000 fb47 	bl	800dc96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d608:	2026      	movs	r0, #38	@ 0x26
 800d60a:	f000 fb60 	bl	800dcce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d60e:	e057      	b.n	800d6c0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a2f      	ldr	r2, [pc, #188]	@ (800d6d4 <HAL_UART_MspInit+0x150>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d152      	bne.n	800d6c0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d61a:	2300      	movs	r3, #0
 800d61c:	613b      	str	r3, [r7, #16]
 800d61e:	4b2b      	ldr	r3, [pc, #172]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d622:	4a2a      	ldr	r2, [pc, #168]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d628:	6413      	str	r3, [r2, #64]	@ 0x40
 800d62a:	4b28      	ldr	r3, [pc, #160]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d62e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d632:	613b      	str	r3, [r7, #16]
 800d634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d636:	2300      	movs	r3, #0
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	4b24      	ldr	r3, [pc, #144]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d63e:	4a23      	ldr	r2, [pc, #140]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d640:	f043 0304 	orr.w	r3, r3, #4
 800d644:	6313      	str	r3, [r2, #48]	@ 0x30
 800d646:	4b21      	ldr	r3, [pc, #132]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d64a:	f003 0304 	and.w	r3, r3, #4
 800d64e:	60fb      	str	r3, [r7, #12]
 800d650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d652:	2300      	movs	r3, #0
 800d654:	60bb      	str	r3, [r7, #8]
 800d656:	4b1d      	ldr	r3, [pc, #116]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d65a:	4a1c      	ldr	r2, [pc, #112]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d65c:	f043 0302 	orr.w	r3, r3, #2
 800d660:	6313      	str	r3, [r2, #48]	@ 0x30
 800d662:	4b1a      	ldr	r3, [pc, #104]	@ (800d6cc <HAL_UART_MspInit+0x148>)
 800d664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d666:	f003 0302 	and.w	r3, r3, #2
 800d66a:	60bb      	str	r3, [r7, #8]
 800d66c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d66e:	2320      	movs	r3, #32
 800d670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d672:	2302      	movs	r3, #2
 800d674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d676:	2300      	movs	r3, #0
 800d678:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d67a:	2303      	movs	r3, #3
 800d67c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d67e:	2307      	movs	r3, #7
 800d680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d682:	f107 031c 	add.w	r3, r7, #28
 800d686:	4619      	mov	r1, r3
 800d688:	4813      	ldr	r0, [pc, #76]	@ (800d6d8 <HAL_UART_MspInit+0x154>)
 800d68a:	f000 fbcd 	bl	800de28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d68e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d694:	2302      	movs	r3, #2
 800d696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d698:	2300      	movs	r3, #0
 800d69a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d69c:	2303      	movs	r3, #3
 800d69e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d6a0:	2307      	movs	r3, #7
 800d6a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6a4:	f107 031c 	add.w	r3, r7, #28
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	480c      	ldr	r0, [pc, #48]	@ (800d6dc <HAL_UART_MspInit+0x158>)
 800d6ac:	f000 fbbc 	bl	800de28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	2027      	movs	r0, #39	@ 0x27
 800d6b6:	f000 faee 	bl	800dc96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d6ba:	2027      	movs	r0, #39	@ 0x27
 800d6bc:	f000 fb07 	bl	800dcce <HAL_NVIC_EnableIRQ>
}
 800d6c0:	bf00      	nop
 800d6c2:	3730      	adds	r7, #48	@ 0x30
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	40004400 	.word	0x40004400
 800d6cc:	40023800 	.word	0x40023800
 800d6d0:	40020000 	.word	0x40020000
 800d6d4:	40004800 	.word	0x40004800
 800d6d8:	40020800 	.word	0x40020800
 800d6dc:	40020400 	.word	0x40020400

0800d6e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d6e4:	bf00      	nop
 800d6e6:	e7fd      	b.n	800d6e4 <NMI_Handler+0x4>

0800d6e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d6ec:	bf00      	nop
 800d6ee:	e7fd      	b.n	800d6ec <HardFault_Handler+0x4>

0800d6f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d6f4:	bf00      	nop
 800d6f6:	e7fd      	b.n	800d6f4 <MemManage_Handler+0x4>

0800d6f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d6fc:	bf00      	nop
 800d6fe:	e7fd      	b.n	800d6fc <BusFault_Handler+0x4>

0800d700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d700:	b480      	push	{r7}
 800d702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d704:	bf00      	nop
 800d706:	e7fd      	b.n	800d704 <UsageFault_Handler+0x4>

0800d708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d708:	b480      	push	{r7}
 800d70a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d70c:	bf00      	nop
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d716:	b480      	push	{r7}
 800d718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d71a:	bf00      	nop
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d724:	b480      	push	{r7}
 800d726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d728:	bf00      	nop
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d736:	f000 f98f 	bl	800da58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d73a:	bf00      	nop
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800d742:	2001      	movs	r0, #1
 800d744:	f000 fd1e 	bl	800e184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800d748:	bf00      	nop
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d750:	4802      	ldr	r0, [pc, #8]	@ (800d75c <TIM2_IRQHandler+0x10>)
 800d752:	f002 fb30 	bl	800fdb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800d756:	bf00      	nop
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	200003d4 	.word	0x200003d4

0800d760 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800d764:	4802      	ldr	r0, [pc, #8]	@ (800d770 <SPI2_IRQHandler+0x10>)
 800d766:	f001 ffd5 	bl	800f714 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800d76a:	bf00      	nop
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	20000334 	.word	0x20000334

0800d774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d778:	4802      	ldr	r0, [pc, #8]	@ (800d784 <USART2_IRQHandler+0x10>)
 800d77a:	f003 fab3 	bl	8010ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d77e:	bf00      	nop
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	200004f4 	.word	0x200004f4

0800d788 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d78c:	4802      	ldr	r0, [pc, #8]	@ (800d798 <USART3_IRQHandler+0x10>)
 800d78e:	f003 faa9 	bl	8010ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d792:	bf00      	nop
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	20000538 	.word	0x20000538

0800d79c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d7a0:	4802      	ldr	r0, [pc, #8]	@ (800d7ac <TIM6_DAC_IRQHandler+0x10>)
 800d7a2:	f002 fb08 	bl	800fdb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d7a6:	bf00      	nop
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20000464 	.word	0x20000464

0800d7b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	af00      	add	r7, sp, #0
  return 1;
 800d7b4:	2301      	movs	r3, #1
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <_kill>:

int _kill(int pid, int sig)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d7ca:	f006 fd7d 	bl	80142c8 <__errno>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2216      	movs	r2, #22
 800d7d2:	601a      	str	r2, [r3, #0]
  return -1;
 800d7d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <_exit>:

void _exit (int status)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d7e8:	f04f 31ff 	mov.w	r1, #4294967295
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f7ff ffe7 	bl	800d7c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d7f2:	bf00      	nop
 800d7f4:	e7fd      	b.n	800d7f2 <_exit+0x12>

0800d7f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b086      	sub	sp, #24
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	60f8      	str	r0, [r7, #12]
 800d7fe:	60b9      	str	r1, [r7, #8]
 800d800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d802:	2300      	movs	r3, #0
 800d804:	617b      	str	r3, [r7, #20]
 800d806:	e00a      	b.n	800d81e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d808:	f3af 8000 	nop.w
 800d80c:	4601      	mov	r1, r0
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	60ba      	str	r2, [r7, #8]
 800d814:	b2ca      	uxtb	r2, r1
 800d816:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	3301      	adds	r3, #1
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	429a      	cmp	r2, r3
 800d824:	dbf0      	blt.n	800d808 <_read+0x12>
  }

  return len;
 800d826:	687b      	ldr	r3, [r7, #4]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d83c:	2300      	movs	r3, #0
 800d83e:	617b      	str	r3, [r7, #20]
 800d840:	e009      	b.n	800d856 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	1c5a      	adds	r2, r3, #1
 800d846:	60ba      	str	r2, [r7, #8]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	3301      	adds	r3, #1
 800d854:	617b      	str	r3, [r7, #20]
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	dbf1      	blt.n	800d842 <_write+0x12>
  }
  return len;
 800d85e:	687b      	ldr	r3, [r7, #4]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <_close>:

int _close(int file)
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d870:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d890:	605a      	str	r2, [r3, #4]
  return 0;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <_isatty>:

int _isatty(int file)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d8a8:	2301      	movs	r3, #1
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	370c      	adds	r7, #12
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr

0800d8b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d8b6:	b480      	push	{r7}
 800d8b8:	b085      	sub	sp, #20
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	60f8      	str	r0, [r7, #12]
 800d8be:	60b9      	str	r1, [r7, #8]
 800d8c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d8d8:	4a14      	ldr	r2, [pc, #80]	@ (800d92c <_sbrk+0x5c>)
 800d8da:	4b15      	ldr	r3, [pc, #84]	@ (800d930 <_sbrk+0x60>)
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d8e4:	4b13      	ldr	r3, [pc, #76]	@ (800d934 <_sbrk+0x64>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d102      	bne.n	800d8f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d8ec:	4b11      	ldr	r3, [pc, #68]	@ (800d934 <_sbrk+0x64>)
 800d8ee:	4a12      	ldr	r2, [pc, #72]	@ (800d938 <_sbrk+0x68>)
 800d8f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d8f2:	4b10      	ldr	r3, [pc, #64]	@ (800d934 <_sbrk+0x64>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	693a      	ldr	r2, [r7, #16]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d207      	bcs.n	800d910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d900:	f006 fce2 	bl	80142c8 <__errno>
 800d904:	4603      	mov	r3, r0
 800d906:	220c      	movs	r2, #12
 800d908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d90a:	f04f 33ff 	mov.w	r3, #4294967295
 800d90e:	e009      	b.n	800d924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d910:	4b08      	ldr	r3, [pc, #32]	@ (800d934 <_sbrk+0x64>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d916:	4b07      	ldr	r3, [pc, #28]	@ (800d934 <_sbrk+0x64>)
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4413      	add	r3, r2
 800d91e:	4a05      	ldr	r2, [pc, #20]	@ (800d934 <_sbrk+0x64>)
 800d920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d922:	68fb      	ldr	r3, [r7, #12]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	20020000 	.word	0x20020000
 800d930:	00000400 	.word	0x00000400
 800d934:	200005a0 	.word	0x200005a0
 800d938:	20000708 	.word	0x20000708

0800d93c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d93c:	b480      	push	{r7}
 800d93e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d940:	4b06      	ldr	r3, [pc, #24]	@ (800d95c <SystemInit+0x20>)
 800d942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d946:	4a05      	ldr	r2, [pc, #20]	@ (800d95c <SystemInit+0x20>)
 800d948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d94c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d950:	bf00      	nop
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	e000ed00 	.word	0xe000ed00

0800d960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	;  ldr   sp, =_estack      /* set stack pointer */
 800d960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d964:	480d      	ldr	r0, [pc, #52]	@ (800d99c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800d966:	490e      	ldr	r1, [pc, #56]	@ (800d9a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800d968:	4a0e      	ldr	r2, [pc, #56]	@ (800d9a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d96a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d96c:	e002      	b.n	800d974 <LoopCopyDataInit>

0800d96e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d96e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d972:	3304      	adds	r3, #4

0800d974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d978:	d3f9      	bcc.n	800d96e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d97a:	4a0b      	ldr	r2, [pc, #44]	@ (800d9a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800d97c:	4c0b      	ldr	r4, [pc, #44]	@ (800d9ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800d97e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d980:	e001      	b.n	800d986 <LoopFillZerobss>

0800d982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d984:	3204      	adds	r2, #4

0800d986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d988:	d3fb      	bcc.n	800d982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d98a:	f7ff ffd7 	bl	800d93c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d98e:	f006 fca1 	bl	80142d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d992:	f7fe fcbd 	bl	800c310 <main>
  bx  lr    
 800d996:	4770      	bx	lr
	;  ldr   sp, =_estack      /* set stack pointer */
 800d998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d99c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d9a0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800d9a4:	08019a7c 	.word	0x08019a7c
  ldr r2, =_sbss
 800d9a8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800d9ac:	20000704 	.word	0x20000704

0800d9b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d9b0:	e7fe      	b.n	800d9b0 <ADC_IRQHandler>
	...

0800d9b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d9b8:	4b0e      	ldr	r3, [pc, #56]	@ (800d9f4 <HAL_Init+0x40>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a0d      	ldr	r2, [pc, #52]	@ (800d9f4 <HAL_Init+0x40>)
 800d9be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d9c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d9c4:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f4 <HAL_Init+0x40>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a0a      	ldr	r2, [pc, #40]	@ (800d9f4 <HAL_Init+0x40>)
 800d9ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d9ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d9d0:	4b08      	ldr	r3, [pc, #32]	@ (800d9f4 <HAL_Init+0x40>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a07      	ldr	r2, [pc, #28]	@ (800d9f4 <HAL_Init+0x40>)
 800d9d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d9dc:	2003      	movs	r0, #3
 800d9de:	f000 f94f 	bl	800dc80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	f000 f808 	bl	800d9f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d9e8:	f7ff fbbe 	bl	800d168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	40023c00 	.word	0x40023c00

0800d9f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800da00:	4b12      	ldr	r3, [pc, #72]	@ (800da4c <HAL_InitTick+0x54>)
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	4b12      	ldr	r3, [pc, #72]	@ (800da50 <HAL_InitTick+0x58>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	4619      	mov	r1, r3
 800da0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800da0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800da12:	fbb2 f3f3 	udiv	r3, r2, r3
 800da16:	4618      	mov	r0, r3
 800da18:	f000 f967 	bl	800dcea <HAL_SYSTICK_Config>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	e00e      	b.n	800da44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b0f      	cmp	r3, #15
 800da2a:	d80a      	bhi.n	800da42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800da2c:	2200      	movs	r2, #0
 800da2e:	6879      	ldr	r1, [r7, #4]
 800da30:	f04f 30ff 	mov.w	r0, #4294967295
 800da34:	f000 f92f 	bl	800dc96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800da38:	4a06      	ldr	r2, [pc, #24]	@ (800da54 <HAL_InitTick+0x5c>)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	e000      	b.n	800da44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800da42:	2301      	movs	r3, #1
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20000010 	.word	0x20000010
 800da50:	20000018 	.word	0x20000018
 800da54:	20000014 	.word	0x20000014

0800da58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800da58:	b480      	push	{r7}
 800da5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800da5c:	4b06      	ldr	r3, [pc, #24]	@ (800da78 <HAL_IncTick+0x20>)
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	4b06      	ldr	r3, [pc, #24]	@ (800da7c <HAL_IncTick+0x24>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4413      	add	r3, r2
 800da68:	4a04      	ldr	r2, [pc, #16]	@ (800da7c <HAL_IncTick+0x24>)
 800da6a:	6013      	str	r3, [r2, #0]
}
 800da6c:	bf00      	nop
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	20000018 	.word	0x20000018
 800da7c:	200005a4 	.word	0x200005a4

0800da80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800da80:	b480      	push	{r7}
 800da82:	af00      	add	r7, sp, #0
  return uwTick;
 800da84:	4b03      	ldr	r3, [pc, #12]	@ (800da94 <HAL_GetTick+0x14>)
 800da86:	681b      	ldr	r3, [r3, #0]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	200005a4 	.word	0x200005a4

0800da98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800daa0:	f7ff ffee 	bl	800da80 <HAL_GetTick>
 800daa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab0:	d005      	beq.n	800dabe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800dab2:	4b0a      	ldr	r3, [pc, #40]	@ (800dadc <HAL_Delay+0x44>)
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	461a      	mov	r2, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4413      	add	r3, r2
 800dabc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800dabe:	bf00      	nop
 800dac0:	f7ff ffde 	bl	800da80 <HAL_GetTick>
 800dac4:	4602      	mov	r2, r0
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d8f7      	bhi.n	800dac0 <HAL_Delay+0x28>
  {
  }
}
 800dad0:	bf00      	nop
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20000018 	.word	0x20000018

0800dae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f003 0307 	and.w	r3, r3, #7
 800daee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800daf0:	4b0c      	ldr	r3, [pc, #48]	@ (800db24 <__NVIC_SetPriorityGrouping+0x44>)
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800daf6:	68ba      	ldr	r2, [r7, #8]
 800daf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800dafc:	4013      	ands	r3, r2
 800dafe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800db08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800db0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800db12:	4a04      	ldr	r2, [pc, #16]	@ (800db24 <__NVIC_SetPriorityGrouping+0x44>)
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	60d3      	str	r3, [r2, #12]
}
 800db18:	bf00      	nop
 800db1a:	3714      	adds	r7, #20
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr
 800db24:	e000ed00 	.word	0xe000ed00

0800db28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800db28:	b480      	push	{r7}
 800db2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800db2c:	4b04      	ldr	r3, [pc, #16]	@ (800db40 <__NVIC_GetPriorityGrouping+0x18>)
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	0a1b      	lsrs	r3, r3, #8
 800db32:	f003 0307 	and.w	r3, r3, #7
}
 800db36:	4618      	mov	r0, r3
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	e000ed00 	.word	0xe000ed00

0800db44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db52:	2b00      	cmp	r3, #0
 800db54:	db0b      	blt.n	800db6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800db56:	79fb      	ldrb	r3, [r7, #7]
 800db58:	f003 021f 	and.w	r2, r3, #31
 800db5c:	4907      	ldr	r1, [pc, #28]	@ (800db7c <__NVIC_EnableIRQ+0x38>)
 800db5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db62:	095b      	lsrs	r3, r3, #5
 800db64:	2001      	movs	r0, #1
 800db66:	fa00 f202 	lsl.w	r2, r0, r2
 800db6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800db6e:	bf00      	nop
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	e000e100 	.word	0xe000e100

0800db80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	6039      	str	r1, [r7, #0]
 800db8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db90:	2b00      	cmp	r3, #0
 800db92:	db0a      	blt.n	800dbaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	b2da      	uxtb	r2, r3
 800db98:	490c      	ldr	r1, [pc, #48]	@ (800dbcc <__NVIC_SetPriority+0x4c>)
 800db9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db9e:	0112      	lsls	r2, r2, #4
 800dba0:	b2d2      	uxtb	r2, r2
 800dba2:	440b      	add	r3, r1
 800dba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800dba8:	e00a      	b.n	800dbc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	4908      	ldr	r1, [pc, #32]	@ (800dbd0 <__NVIC_SetPriority+0x50>)
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	f003 030f 	and.w	r3, r3, #15
 800dbb6:	3b04      	subs	r3, #4
 800dbb8:	0112      	lsls	r2, r2, #4
 800dbba:	b2d2      	uxtb	r2, r2
 800dbbc:	440b      	add	r3, r1
 800dbbe:	761a      	strb	r2, [r3, #24]
}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr
 800dbcc:	e000e100 	.word	0xe000e100
 800dbd0:	e000ed00 	.word	0xe000ed00

0800dbd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b089      	sub	sp, #36	@ 0x24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f003 0307 	and.w	r3, r3, #7
 800dbe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	f1c3 0307 	rsb	r3, r3, #7
 800dbee:	2b04      	cmp	r3, #4
 800dbf0:	bf28      	it	cs
 800dbf2:	2304      	movcs	r3, #4
 800dbf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	2b06      	cmp	r3, #6
 800dbfc:	d902      	bls.n	800dc04 <NVIC_EncodePriority+0x30>
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	3b03      	subs	r3, #3
 800dc02:	e000      	b.n	800dc06 <NVIC_EncodePriority+0x32>
 800dc04:	2300      	movs	r3, #0
 800dc06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dc08:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc12:	43da      	mvns	r2, r3
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	401a      	ands	r2, r3
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dc1c:	f04f 31ff 	mov.w	r1, #4294967295
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	fa01 f303 	lsl.w	r3, r1, r3
 800dc26:	43d9      	mvns	r1, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dc2c:	4313      	orrs	r3, r2
         );
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3724      	adds	r7, #36	@ 0x24
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
	...

0800dc3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc4c:	d301      	bcc.n	800dc52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e00f      	b.n	800dc72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dc52:	4a0a      	ldr	r2, [pc, #40]	@ (800dc7c <SysTick_Config+0x40>)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3b01      	subs	r3, #1
 800dc58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dc5a:	210f      	movs	r1, #15
 800dc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc60:	f7ff ff8e 	bl	800db80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dc64:	4b05      	ldr	r3, [pc, #20]	@ (800dc7c <SysTick_Config+0x40>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dc6a:	4b04      	ldr	r3, [pc, #16]	@ (800dc7c <SysTick_Config+0x40>)
 800dc6c:	2207      	movs	r2, #7
 800dc6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	e000e010 	.word	0xe000e010

0800dc80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7ff ff29 	bl	800dae0 <__NVIC_SetPriorityGrouping>
}
 800dc8e:	bf00      	nop
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b086      	sub	sp, #24
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	60b9      	str	r1, [r7, #8]
 800dca0:	607a      	str	r2, [r7, #4]
 800dca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dca4:	2300      	movs	r3, #0
 800dca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dca8:	f7ff ff3e 	bl	800db28 <__NVIC_GetPriorityGrouping>
 800dcac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	68b9      	ldr	r1, [r7, #8]
 800dcb2:	6978      	ldr	r0, [r7, #20]
 800dcb4:	f7ff ff8e 	bl	800dbd4 <NVIC_EncodePriority>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff ff5d 	bl	800db80 <__NVIC_SetPriority>
}
 800dcc6:	bf00      	nop
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dcd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7ff ff31 	bl	800db44 <__NVIC_EnableIRQ>
}
 800dce2:	bf00      	nop
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b082      	sub	sp, #8
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff ffa2 	bl	800dc3c <SysTick_Config>
 800dcf8:	4603      	mov	r3, r0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b084      	sub	sp, #16
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800dd10:	f7ff feb6 	bl	800da80 <HAL_GetTick>
 800dd14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d008      	beq.n	800dd34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2280      	movs	r2, #128	@ 0x80
 800dd26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e052      	b.n	800ddda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f022 0216 	bic.w	r2, r2, #22
 800dd42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	695a      	ldr	r2, [r3, #20]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d103      	bne.n	800dd64 <HAL_DMA_Abort+0x62>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d007      	beq.n	800dd74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f022 0208 	bic.w	r2, r2, #8
 800dd72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f022 0201 	bic.w	r2, r2, #1
 800dd82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dd84:	e013      	b.n	800ddae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800dd86:	f7ff fe7b 	bl	800da80 <HAL_GetTick>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	2b05      	cmp	r3, #5
 800dd92:	d90c      	bls.n	800ddae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2220      	movs	r2, #32
 800dd98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2203      	movs	r2, #3
 800dd9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	e015      	b.n	800ddda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1e4      	bne.n	800dd86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddc0:	223f      	movs	r2, #63	@ 0x3f
 800ddc2:	409a      	lsls	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800dde2:	b480      	push	{r7}
 800dde4:	b083      	sub	sp, #12
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d004      	beq.n	800de00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2280      	movs	r2, #128	@ 0x80
 800ddfa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e00c      	b.n	800de1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2205      	movs	r2, #5
 800de04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f022 0201 	bic.w	r2, r2, #1
 800de16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
	...

0800de28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800de28:	b480      	push	{r7}
 800de2a:	b089      	sub	sp, #36	@ 0x24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800de32:	2300      	movs	r3, #0
 800de34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800de36:	2300      	movs	r3, #0
 800de38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800de3a:	2300      	movs	r3, #0
 800de3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800de3e:	2300      	movs	r3, #0
 800de40:	61fb      	str	r3, [r7, #28]
 800de42:	e165      	b.n	800e110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800de44:	2201      	movs	r2, #1
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	fa02 f303 	lsl.w	r3, r2, r3
 800de4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	697a      	ldr	r2, [r7, #20]
 800de54:	4013      	ands	r3, r2
 800de56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	f040 8154 	bne.w	800e10a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	f003 0303 	and.w	r3, r3, #3
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d005      	beq.n	800de7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800de76:	2b02      	cmp	r3, #2
 800de78:	d130      	bne.n	800dedc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	2203      	movs	r2, #3
 800de86:	fa02 f303 	lsl.w	r3, r2, r3
 800de8a:	43db      	mvns	r3, r3
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	4013      	ands	r3, r2
 800de90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	68da      	ldr	r2, [r3, #12]
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	005b      	lsls	r3, r3, #1
 800de9a:	fa02 f303 	lsl.w	r3, r2, r3
 800de9e:	69ba      	ldr	r2, [r7, #24]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	69ba      	ldr	r2, [r7, #24]
 800dea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800deb0:	2201      	movs	r2, #1
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	fa02 f303 	lsl.w	r3, r2, r3
 800deb8:	43db      	mvns	r3, r3
 800deba:	69ba      	ldr	r2, [r7, #24]
 800debc:	4013      	ands	r3, r2
 800debe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	091b      	lsrs	r3, r3, #4
 800dec6:	f003 0201 	and.w	r2, r3, #1
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	fa02 f303 	lsl.w	r3, r2, r3
 800ded0:	69ba      	ldr	r2, [r7, #24]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	69ba      	ldr	r2, [r7, #24]
 800deda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	f003 0303 	and.w	r3, r3, #3
 800dee4:	2b03      	cmp	r3, #3
 800dee6:	d017      	beq.n	800df18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	2203      	movs	r2, #3
 800def4:	fa02 f303 	lsl.w	r3, r2, r3
 800def8:	43db      	mvns	r3, r3
 800defa:	69ba      	ldr	r2, [r7, #24]
 800defc:	4013      	ands	r3, r2
 800defe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	689a      	ldr	r2, [r3, #8]
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	005b      	lsls	r3, r3, #1
 800df08:	fa02 f303 	lsl.w	r3, r2, r3
 800df0c:	69ba      	ldr	r2, [r7, #24]
 800df0e:	4313      	orrs	r3, r2
 800df10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	69ba      	ldr	r2, [r7, #24]
 800df16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	f003 0303 	and.w	r3, r3, #3
 800df20:	2b02      	cmp	r3, #2
 800df22:	d123      	bne.n	800df6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800df24:	69fb      	ldr	r3, [r7, #28]
 800df26:	08da      	lsrs	r2, r3, #3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3208      	adds	r2, #8
 800df2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	f003 0307 	and.w	r3, r3, #7
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	220f      	movs	r2, #15
 800df3c:	fa02 f303 	lsl.w	r3, r2, r3
 800df40:	43db      	mvns	r3, r3
 800df42:	69ba      	ldr	r2, [r7, #24]
 800df44:	4013      	ands	r3, r2
 800df46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	691a      	ldr	r2, [r3, #16]
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	f003 0307 	and.w	r3, r3, #7
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	fa02 f303 	lsl.w	r3, r2, r3
 800df58:	69ba      	ldr	r2, [r7, #24]
 800df5a:	4313      	orrs	r3, r2
 800df5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	08da      	lsrs	r2, r3, #3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	3208      	adds	r2, #8
 800df66:	69b9      	ldr	r1, [r7, #24]
 800df68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	2203      	movs	r2, #3
 800df78:	fa02 f303 	lsl.w	r3, r2, r3
 800df7c:	43db      	mvns	r3, r3
 800df7e:	69ba      	ldr	r2, [r7, #24]
 800df80:	4013      	ands	r3, r2
 800df82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	f003 0203 	and.w	r2, r3, #3
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	fa02 f303 	lsl.w	r3, r2, r3
 800df94:	69ba      	ldr	r2, [r7, #24]
 800df96:	4313      	orrs	r3, r2
 800df98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	69ba      	ldr	r2, [r7, #24]
 800df9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 80ae 	beq.w	800e10a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	4b5d      	ldr	r3, [pc, #372]	@ (800e128 <HAL_GPIO_Init+0x300>)
 800dfb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfb6:	4a5c      	ldr	r2, [pc, #368]	@ (800e128 <HAL_GPIO_Init+0x300>)
 800dfb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dfbc:	6453      	str	r3, [r2, #68]	@ 0x44
 800dfbe:	4b5a      	ldr	r3, [pc, #360]	@ (800e128 <HAL_GPIO_Init+0x300>)
 800dfc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dfc6:	60fb      	str	r3, [r7, #12]
 800dfc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800dfca:	4a58      	ldr	r2, [pc, #352]	@ (800e12c <HAL_GPIO_Init+0x304>)
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	089b      	lsrs	r3, r3, #2
 800dfd0:	3302      	adds	r3, #2
 800dfd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	f003 0303 	and.w	r3, r3, #3
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	220f      	movs	r2, #15
 800dfe2:	fa02 f303 	lsl.w	r3, r2, r3
 800dfe6:	43db      	mvns	r3, r3
 800dfe8:	69ba      	ldr	r2, [r7, #24]
 800dfea:	4013      	ands	r3, r2
 800dfec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a4f      	ldr	r2, [pc, #316]	@ (800e130 <HAL_GPIO_Init+0x308>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d025      	beq.n	800e042 <HAL_GPIO_Init+0x21a>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a4e      	ldr	r2, [pc, #312]	@ (800e134 <HAL_GPIO_Init+0x30c>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d01f      	beq.n	800e03e <HAL_GPIO_Init+0x216>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a4d      	ldr	r2, [pc, #308]	@ (800e138 <HAL_GPIO_Init+0x310>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d019      	beq.n	800e03a <HAL_GPIO_Init+0x212>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4a4c      	ldr	r2, [pc, #304]	@ (800e13c <HAL_GPIO_Init+0x314>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d013      	beq.n	800e036 <HAL_GPIO_Init+0x20e>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a4b      	ldr	r2, [pc, #300]	@ (800e140 <HAL_GPIO_Init+0x318>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d00d      	beq.n	800e032 <HAL_GPIO_Init+0x20a>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a4a      	ldr	r2, [pc, #296]	@ (800e144 <HAL_GPIO_Init+0x31c>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d007      	beq.n	800e02e <HAL_GPIO_Init+0x206>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4a49      	ldr	r2, [pc, #292]	@ (800e148 <HAL_GPIO_Init+0x320>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d101      	bne.n	800e02a <HAL_GPIO_Init+0x202>
 800e026:	2306      	movs	r3, #6
 800e028:	e00c      	b.n	800e044 <HAL_GPIO_Init+0x21c>
 800e02a:	2307      	movs	r3, #7
 800e02c:	e00a      	b.n	800e044 <HAL_GPIO_Init+0x21c>
 800e02e:	2305      	movs	r3, #5
 800e030:	e008      	b.n	800e044 <HAL_GPIO_Init+0x21c>
 800e032:	2304      	movs	r3, #4
 800e034:	e006      	b.n	800e044 <HAL_GPIO_Init+0x21c>
 800e036:	2303      	movs	r3, #3
 800e038:	e004      	b.n	800e044 <HAL_GPIO_Init+0x21c>
 800e03a:	2302      	movs	r3, #2
 800e03c:	e002      	b.n	800e044 <HAL_GPIO_Init+0x21c>
 800e03e:	2301      	movs	r3, #1
 800e040:	e000      	b.n	800e044 <HAL_GPIO_Init+0x21c>
 800e042:	2300      	movs	r3, #0
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	f002 0203 	and.w	r2, r2, #3
 800e04a:	0092      	lsls	r2, r2, #2
 800e04c:	4093      	lsls	r3, r2
 800e04e:	69ba      	ldr	r2, [r7, #24]
 800e050:	4313      	orrs	r3, r2
 800e052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e054:	4935      	ldr	r1, [pc, #212]	@ (800e12c <HAL_GPIO_Init+0x304>)
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	089b      	lsrs	r3, r3, #2
 800e05a:	3302      	adds	r3, #2
 800e05c:	69ba      	ldr	r2, [r7, #24]
 800e05e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e062:	4b3a      	ldr	r3, [pc, #232]	@ (800e14c <HAL_GPIO_Init+0x324>)
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	43db      	mvns	r3, r3
 800e06c:	69ba      	ldr	r2, [r7, #24]
 800e06e:	4013      	ands	r3, r2
 800e070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800e07e:	69ba      	ldr	r2, [r7, #24]
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	4313      	orrs	r3, r2
 800e084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e086:	4a31      	ldr	r2, [pc, #196]	@ (800e14c <HAL_GPIO_Init+0x324>)
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e08c:	4b2f      	ldr	r3, [pc, #188]	@ (800e14c <HAL_GPIO_Init+0x324>)
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	43db      	mvns	r3, r3
 800e096:	69ba      	ldr	r2, [r7, #24]
 800e098:	4013      	ands	r3, r2
 800e09a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d003      	beq.n	800e0b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e0b0:	4a26      	ldr	r2, [pc, #152]	@ (800e14c <HAL_GPIO_Init+0x324>)
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e0b6:	4b25      	ldr	r3, [pc, #148]	@ (800e14c <HAL_GPIO_Init+0x324>)
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	43db      	mvns	r3, r3
 800e0c0:	69ba      	ldr	r2, [r7, #24]
 800e0c2:	4013      	ands	r3, r2
 800e0c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d003      	beq.n	800e0da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800e0d2:	69ba      	ldr	r2, [r7, #24]
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e0da:	4a1c      	ldr	r2, [pc, #112]	@ (800e14c <HAL_GPIO_Init+0x324>)
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e0e0:	4b1a      	ldr	r3, [pc, #104]	@ (800e14c <HAL_GPIO_Init+0x324>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	43db      	mvns	r3, r3
 800e0ea:	69ba      	ldr	r2, [r7, #24]
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d003      	beq.n	800e104 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800e0fc:	69ba      	ldr	r2, [r7, #24]
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	4313      	orrs	r3, r2
 800e102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e104:	4a11      	ldr	r2, [pc, #68]	@ (800e14c <HAL_GPIO_Init+0x324>)
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	3301      	adds	r3, #1
 800e10e:	61fb      	str	r3, [r7, #28]
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2b0f      	cmp	r3, #15
 800e114:	f67f ae96 	bls.w	800de44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e118:	bf00      	nop
 800e11a:	bf00      	nop
 800e11c:	3724      	adds	r7, #36	@ 0x24
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	40023800 	.word	0x40023800
 800e12c:	40013800 	.word	0x40013800
 800e130:	40020000 	.word	0x40020000
 800e134:	40020400 	.word	0x40020400
 800e138:	40020800 	.word	0x40020800
 800e13c:	40020c00 	.word	0x40020c00
 800e140:	40021000 	.word	0x40021000
 800e144:	40021400 	.word	0x40021400
 800e148:	40021800 	.word	0x40021800
 800e14c:	40013c00 	.word	0x40013c00

0800e150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	807b      	strh	r3, [r7, #2]
 800e15c:	4613      	mov	r3, r2
 800e15e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e160:	787b      	ldrb	r3, [r7, #1]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d003      	beq.n	800e16e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e166:	887a      	ldrh	r2, [r7, #2]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e16c:	e003      	b.n	800e176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e16e:	887b      	ldrh	r3, [r7, #2]
 800e170:	041a      	lsls	r2, r3, #16
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	619a      	str	r2, [r3, #24]
}
 800e176:	bf00      	nop
 800e178:	370c      	adds	r7, #12
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr
	...

0800e184 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	4603      	mov	r3, r0
 800e18c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e18e:	4b08      	ldr	r3, [pc, #32]	@ (800e1b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e190:	695a      	ldr	r2, [r3, #20]
 800e192:	88fb      	ldrh	r3, [r7, #6]
 800e194:	4013      	ands	r3, r2
 800e196:	2b00      	cmp	r3, #0
 800e198:	d006      	beq.n	800e1a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e19a:	4a05      	ldr	r2, [pc, #20]	@ (800e1b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e19c:	88fb      	ldrh	r3, [r7, #6]
 800e19e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e1a0:	88fb      	ldrh	r3, [r7, #6]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe ff26 	bl	800cff4 <HAL_GPIO_EXTI_Callback>
  }
}
 800e1a8:	bf00      	nop
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	40013c00 	.word	0x40013c00

0800e1b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e1be:	2300      	movs	r3, #0
 800e1c0:	603b      	str	r3, [r7, #0]
 800e1c2:	4b20      	ldr	r3, [pc, #128]	@ (800e244 <HAL_PWREx_EnableOverDrive+0x90>)
 800e1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1c6:	4a1f      	ldr	r2, [pc, #124]	@ (800e244 <HAL_PWREx_EnableOverDrive+0x90>)
 800e1c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e1cc:	6413      	str	r3, [r2, #64]	@ 0x40
 800e1ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e244 <HAL_PWREx_EnableOverDrive+0x90>)
 800e1d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1d6:	603b      	str	r3, [r7, #0]
 800e1d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e1da:	4b1b      	ldr	r3, [pc, #108]	@ (800e248 <HAL_PWREx_EnableOverDrive+0x94>)
 800e1dc:	2201      	movs	r2, #1
 800e1de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e1e0:	f7ff fc4e 	bl	800da80 <HAL_GetTick>
 800e1e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e1e6:	e009      	b.n	800e1fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e1e8:	f7ff fc4a 	bl	800da80 <HAL_GetTick>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e1f6:	d901      	bls.n	800e1fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800e1f8:	2303      	movs	r3, #3
 800e1fa:	e01f      	b.n	800e23c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e1fc:	4b13      	ldr	r3, [pc, #76]	@ (800e24c <HAL_PWREx_EnableOverDrive+0x98>)
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e208:	d1ee      	bne.n	800e1e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e20a:	4b11      	ldr	r3, [pc, #68]	@ (800e250 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e20c:	2201      	movs	r2, #1
 800e20e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e210:	f7ff fc36 	bl	800da80 <HAL_GetTick>
 800e214:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e216:	e009      	b.n	800e22c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e218:	f7ff fc32 	bl	800da80 <HAL_GetTick>
 800e21c:	4602      	mov	r2, r0
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e226:	d901      	bls.n	800e22c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800e228:	2303      	movs	r3, #3
 800e22a:	e007      	b.n	800e23c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e22c:	4b07      	ldr	r3, [pc, #28]	@ (800e24c <HAL_PWREx_EnableOverDrive+0x98>)
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e238:	d1ee      	bne.n	800e218 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	40023800 	.word	0x40023800
 800e248:	420e0040 	.word	0x420e0040
 800e24c:	40007000 	.word	0x40007000
 800e250:	420e0044 	.word	0x420e0044

0800e254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d101      	bne.n	800e268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	e0cc      	b.n	800e402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e268:	4b68      	ldr	r3, [pc, #416]	@ (800e40c <HAL_RCC_ClockConfig+0x1b8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 030f 	and.w	r3, r3, #15
 800e270:	683a      	ldr	r2, [r7, #0]
 800e272:	429a      	cmp	r2, r3
 800e274:	d90c      	bls.n	800e290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e276:	4b65      	ldr	r3, [pc, #404]	@ (800e40c <HAL_RCC_ClockConfig+0x1b8>)
 800e278:	683a      	ldr	r2, [r7, #0]
 800e27a:	b2d2      	uxtb	r2, r2
 800e27c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e27e:	4b63      	ldr	r3, [pc, #396]	@ (800e40c <HAL_RCC_ClockConfig+0x1b8>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f003 030f 	and.w	r3, r3, #15
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d001      	beq.n	800e290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	e0b8      	b.n	800e402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f003 0302 	and.w	r3, r3, #2
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d020      	beq.n	800e2de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f003 0304 	and.w	r3, r3, #4
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d005      	beq.n	800e2b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e2a8:	4b59      	ldr	r3, [pc, #356]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	4a58      	ldr	r2, [pc, #352]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e2ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e2b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f003 0308 	and.w	r3, r3, #8
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d005      	beq.n	800e2cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e2c0:	4b53      	ldr	r3, [pc, #332]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	4a52      	ldr	r2, [pc, #328]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e2c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e2ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e2cc:	4b50      	ldr	r3, [pc, #320]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	494d      	ldr	r1, [pc, #308]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d044      	beq.n	800e374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d107      	bne.n	800e302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e2f2:	4b47      	ldr	r3, [pc, #284]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d119      	bne.n	800e332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e2fe:	2301      	movs	r3, #1
 800e300:	e07f      	b.n	800e402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	2b02      	cmp	r3, #2
 800e308:	d003      	beq.n	800e312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e30e:	2b03      	cmp	r3, #3
 800e310:	d107      	bne.n	800e322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e312:	4b3f      	ldr	r3, [pc, #252]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d109      	bne.n	800e332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e06f      	b.n	800e402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e322:	4b3b      	ldr	r3, [pc, #236]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f003 0302 	and.w	r3, r3, #2
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e067      	b.n	800e402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e332:	4b37      	ldr	r3, [pc, #220]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	f023 0203 	bic.w	r2, r3, #3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	4934      	ldr	r1, [pc, #208]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e340:	4313      	orrs	r3, r2
 800e342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e344:	f7ff fb9c 	bl	800da80 <HAL_GetTick>
 800e348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e34a:	e00a      	b.n	800e362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e34c:	f7ff fb98 	bl	800da80 <HAL_GetTick>
 800e350:	4602      	mov	r2, r0
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	1ad3      	subs	r3, r2, r3
 800e356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d901      	bls.n	800e362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e35e:	2303      	movs	r3, #3
 800e360:	e04f      	b.n	800e402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e362:	4b2b      	ldr	r3, [pc, #172]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	f003 020c 	and.w	r2, r3, #12
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	429a      	cmp	r2, r3
 800e372:	d1eb      	bne.n	800e34c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e374:	4b25      	ldr	r3, [pc, #148]	@ (800e40c <HAL_RCC_ClockConfig+0x1b8>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f003 030f 	and.w	r3, r3, #15
 800e37c:	683a      	ldr	r2, [r7, #0]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d20c      	bcs.n	800e39c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e382:	4b22      	ldr	r3, [pc, #136]	@ (800e40c <HAL_RCC_ClockConfig+0x1b8>)
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	b2d2      	uxtb	r2, r2
 800e388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e38a:	4b20      	ldr	r3, [pc, #128]	@ (800e40c <HAL_RCC_ClockConfig+0x1b8>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f003 030f 	and.w	r3, r3, #15
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	429a      	cmp	r2, r3
 800e396:	d001      	beq.n	800e39c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	e032      	b.n	800e402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d008      	beq.n	800e3ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e3a8:	4b19      	ldr	r3, [pc, #100]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	4916      	ldr	r1, [pc, #88]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f003 0308 	and.w	r3, r3, #8
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d009      	beq.n	800e3da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e3c6:	4b12      	ldr	r3, [pc, #72]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	00db      	lsls	r3, r3, #3
 800e3d4:	490e      	ldr	r1, [pc, #56]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e3da:	f000 f855 	bl	800e488 <HAL_RCC_GetSysClockFreq>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e410 <HAL_RCC_ClockConfig+0x1bc>)
 800e3e2:	689b      	ldr	r3, [r3, #8]
 800e3e4:	091b      	lsrs	r3, r3, #4
 800e3e6:	f003 030f 	and.w	r3, r3, #15
 800e3ea:	490a      	ldr	r1, [pc, #40]	@ (800e414 <HAL_RCC_ClockConfig+0x1c0>)
 800e3ec:	5ccb      	ldrb	r3, [r1, r3]
 800e3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e3f2:	4a09      	ldr	r2, [pc, #36]	@ (800e418 <HAL_RCC_ClockConfig+0x1c4>)
 800e3f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e3f6:	4b09      	ldr	r3, [pc, #36]	@ (800e41c <HAL_RCC_ClockConfig+0x1c8>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7ff fafc 	bl	800d9f8 <HAL_InitTick>

  return HAL_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	40023c00 	.word	0x40023c00
 800e410:	40023800 	.word	0x40023800
 800e414:	0801760c 	.word	0x0801760c
 800e418:	20000010 	.word	0x20000010
 800e41c:	20000014 	.word	0x20000014

0800e420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e420:	b480      	push	{r7}
 800e422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e424:	4b03      	ldr	r3, [pc, #12]	@ (800e434 <HAL_RCC_GetHCLKFreq+0x14>)
 800e426:	681b      	ldr	r3, [r3, #0]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	20000010 	.word	0x20000010

0800e438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e43c:	f7ff fff0 	bl	800e420 <HAL_RCC_GetHCLKFreq>
 800e440:	4602      	mov	r2, r0
 800e442:	4b05      	ldr	r3, [pc, #20]	@ (800e458 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	0a9b      	lsrs	r3, r3, #10
 800e448:	f003 0307 	and.w	r3, r3, #7
 800e44c:	4903      	ldr	r1, [pc, #12]	@ (800e45c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e44e:	5ccb      	ldrb	r3, [r1, r3]
 800e450:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e454:	4618      	mov	r0, r3
 800e456:	bd80      	pop	{r7, pc}
 800e458:	40023800 	.word	0x40023800
 800e45c:	0801761c 	.word	0x0801761c

0800e460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e464:	f7ff ffdc 	bl	800e420 <HAL_RCC_GetHCLKFreq>
 800e468:	4602      	mov	r2, r0
 800e46a:	4b05      	ldr	r3, [pc, #20]	@ (800e480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	0b5b      	lsrs	r3, r3, #13
 800e470:	f003 0307 	and.w	r3, r3, #7
 800e474:	4903      	ldr	r1, [pc, #12]	@ (800e484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e476:	5ccb      	ldrb	r3, [r1, r3]
 800e478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	40023800 	.word	0x40023800
 800e484:	0801761c 	.word	0x0801761c

0800e488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e48c:	b0ae      	sub	sp, #184	@ 0xb8
 800e48e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e490:	2300      	movs	r3, #0
 800e492:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800e496:	2300      	movs	r3, #0
 800e498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800e49c:	2300      	movs	r3, #0
 800e49e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e4ae:	4bcb      	ldr	r3, [pc, #812]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	f003 030c 	and.w	r3, r3, #12
 800e4b6:	2b0c      	cmp	r3, #12
 800e4b8:	f200 8206 	bhi.w	800e8c8 <HAL_RCC_GetSysClockFreq+0x440>
 800e4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e4c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800e4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c2:	bf00      	nop
 800e4c4:	0800e4f9 	.word	0x0800e4f9
 800e4c8:	0800e8c9 	.word	0x0800e8c9
 800e4cc:	0800e8c9 	.word	0x0800e8c9
 800e4d0:	0800e8c9 	.word	0x0800e8c9
 800e4d4:	0800e501 	.word	0x0800e501
 800e4d8:	0800e8c9 	.word	0x0800e8c9
 800e4dc:	0800e8c9 	.word	0x0800e8c9
 800e4e0:	0800e8c9 	.word	0x0800e8c9
 800e4e4:	0800e509 	.word	0x0800e509
 800e4e8:	0800e8c9 	.word	0x0800e8c9
 800e4ec:	0800e8c9 	.word	0x0800e8c9
 800e4f0:	0800e8c9 	.word	0x0800e8c9
 800e4f4:	0800e6f9 	.word	0x0800e6f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e4f8:	4bb9      	ldr	r3, [pc, #740]	@ (800e7e0 <HAL_RCC_GetSysClockFreq+0x358>)
 800e4fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800e4fe:	e1e7      	b.n	800e8d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e500:	4bb8      	ldr	r3, [pc, #736]	@ (800e7e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800e502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e506:	e1e3      	b.n	800e8d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e508:	4bb4      	ldr	r3, [pc, #720]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e514:	4bb1      	ldr	r3, [pc, #708]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d071      	beq.n	800e604 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e520:	4bae      	ldr	r3, [pc, #696]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	099b      	lsrs	r3, r3, #6
 800e526:	2200      	movs	r2, #0
 800e528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e52c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800e530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e53c:	2300      	movs	r3, #0
 800e53e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e546:	4622      	mov	r2, r4
 800e548:	462b      	mov	r3, r5
 800e54a:	f04f 0000 	mov.w	r0, #0
 800e54e:	f04f 0100 	mov.w	r1, #0
 800e552:	0159      	lsls	r1, r3, #5
 800e554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e558:	0150      	lsls	r0, r2, #5
 800e55a:	4602      	mov	r2, r0
 800e55c:	460b      	mov	r3, r1
 800e55e:	4621      	mov	r1, r4
 800e560:	1a51      	subs	r1, r2, r1
 800e562:	6439      	str	r1, [r7, #64]	@ 0x40
 800e564:	4629      	mov	r1, r5
 800e566:	eb63 0301 	sbc.w	r3, r3, r1
 800e56a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e56c:	f04f 0200 	mov.w	r2, #0
 800e570:	f04f 0300 	mov.w	r3, #0
 800e574:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800e578:	4649      	mov	r1, r9
 800e57a:	018b      	lsls	r3, r1, #6
 800e57c:	4641      	mov	r1, r8
 800e57e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e582:	4641      	mov	r1, r8
 800e584:	018a      	lsls	r2, r1, #6
 800e586:	4641      	mov	r1, r8
 800e588:	1a51      	subs	r1, r2, r1
 800e58a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e58c:	4649      	mov	r1, r9
 800e58e:	eb63 0301 	sbc.w	r3, r3, r1
 800e592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e594:	f04f 0200 	mov.w	r2, #0
 800e598:	f04f 0300 	mov.w	r3, #0
 800e59c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800e5a0:	4649      	mov	r1, r9
 800e5a2:	00cb      	lsls	r3, r1, #3
 800e5a4:	4641      	mov	r1, r8
 800e5a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e5aa:	4641      	mov	r1, r8
 800e5ac:	00ca      	lsls	r2, r1, #3
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	189b      	adds	r3, r3, r2
 800e5b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5ba:	462b      	mov	r3, r5
 800e5bc:	460a      	mov	r2, r1
 800e5be:	eb42 0303 	adc.w	r3, r2, r3
 800e5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5c4:	f04f 0200 	mov.w	r2, #0
 800e5c8:	f04f 0300 	mov.w	r3, #0
 800e5cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	024b      	lsls	r3, r1, #9
 800e5d4:	4621      	mov	r1, r4
 800e5d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e5da:	4621      	mov	r1, r4
 800e5dc:	024a      	lsls	r2, r1, #9
 800e5de:	4610      	mov	r0, r2
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e5ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e5f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e5f4:	f7f2 fb58 	bl	8000ca8 <__aeabi_uldivmod>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e602:	e067      	b.n	800e6d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e604:	4b75      	ldr	r3, [pc, #468]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	099b      	lsrs	r3, r3, #6
 800e60a:	2200      	movs	r2, #0
 800e60c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e610:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e614:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e61c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e61e:	2300      	movs	r3, #0
 800e620:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e622:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e626:	4622      	mov	r2, r4
 800e628:	462b      	mov	r3, r5
 800e62a:	f04f 0000 	mov.w	r0, #0
 800e62e:	f04f 0100 	mov.w	r1, #0
 800e632:	0159      	lsls	r1, r3, #5
 800e634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e638:	0150      	lsls	r0, r2, #5
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	4621      	mov	r1, r4
 800e640:	1a51      	subs	r1, r2, r1
 800e642:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e644:	4629      	mov	r1, r5
 800e646:	eb63 0301 	sbc.w	r3, r3, r1
 800e64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e64c:	f04f 0200 	mov.w	r2, #0
 800e650:	f04f 0300 	mov.w	r3, #0
 800e654:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800e658:	4649      	mov	r1, r9
 800e65a:	018b      	lsls	r3, r1, #6
 800e65c:	4641      	mov	r1, r8
 800e65e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e662:	4641      	mov	r1, r8
 800e664:	018a      	lsls	r2, r1, #6
 800e666:	4641      	mov	r1, r8
 800e668:	ebb2 0a01 	subs.w	sl, r2, r1
 800e66c:	4649      	mov	r1, r9
 800e66e:	eb63 0b01 	sbc.w	fp, r3, r1
 800e672:	f04f 0200 	mov.w	r2, #0
 800e676:	f04f 0300 	mov.w	r3, #0
 800e67a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e67e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e686:	4692      	mov	sl, r2
 800e688:	469b      	mov	fp, r3
 800e68a:	4623      	mov	r3, r4
 800e68c:	eb1a 0303 	adds.w	r3, sl, r3
 800e690:	623b      	str	r3, [r7, #32]
 800e692:	462b      	mov	r3, r5
 800e694:	eb4b 0303 	adc.w	r3, fp, r3
 800e698:	627b      	str	r3, [r7, #36]	@ 0x24
 800e69a:	f04f 0200 	mov.w	r2, #0
 800e69e:	f04f 0300 	mov.w	r3, #0
 800e6a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	028b      	lsls	r3, r1, #10
 800e6aa:	4621      	mov	r1, r4
 800e6ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	028a      	lsls	r2, r1, #10
 800e6b4:	4610      	mov	r0, r2
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6bc:	2200      	movs	r2, #0
 800e6be:	673b      	str	r3, [r7, #112]	@ 0x70
 800e6c0:	677a      	str	r2, [r7, #116]	@ 0x74
 800e6c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e6c6:	f7f2 faef 	bl	8000ca8 <__aeabi_uldivmod>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e6d4:	4b41      	ldr	r3, [pc, #260]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	0c1b      	lsrs	r3, r3, #16
 800e6da:	f003 0303 	and.w	r3, r3, #3
 800e6de:	3301      	adds	r3, #1
 800e6e0:	005b      	lsls	r3, r3, #1
 800e6e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800e6e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e6ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e6f6:	e0eb      	b.n	800e8d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e6f8:	4b38      	ldr	r3, [pc, #224]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e704:	4b35      	ldr	r3, [pc, #212]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d06b      	beq.n	800e7e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e710:	4b32      	ldr	r3, [pc, #200]	@ (800e7dc <HAL_RCC_GetSysClockFreq+0x354>)
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	099b      	lsrs	r3, r3, #6
 800e716:	2200      	movs	r2, #0
 800e718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e71a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e71c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e722:	663b      	str	r3, [r7, #96]	@ 0x60
 800e724:	2300      	movs	r3, #0
 800e726:	667b      	str	r3, [r7, #100]	@ 0x64
 800e728:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e72c:	4622      	mov	r2, r4
 800e72e:	462b      	mov	r3, r5
 800e730:	f04f 0000 	mov.w	r0, #0
 800e734:	f04f 0100 	mov.w	r1, #0
 800e738:	0159      	lsls	r1, r3, #5
 800e73a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e73e:	0150      	lsls	r0, r2, #5
 800e740:	4602      	mov	r2, r0
 800e742:	460b      	mov	r3, r1
 800e744:	4621      	mov	r1, r4
 800e746:	1a51      	subs	r1, r2, r1
 800e748:	61b9      	str	r1, [r7, #24]
 800e74a:	4629      	mov	r1, r5
 800e74c:	eb63 0301 	sbc.w	r3, r3, r1
 800e750:	61fb      	str	r3, [r7, #28]
 800e752:	f04f 0200 	mov.w	r2, #0
 800e756:	f04f 0300 	mov.w	r3, #0
 800e75a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800e75e:	4659      	mov	r1, fp
 800e760:	018b      	lsls	r3, r1, #6
 800e762:	4651      	mov	r1, sl
 800e764:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e768:	4651      	mov	r1, sl
 800e76a:	018a      	lsls	r2, r1, #6
 800e76c:	4651      	mov	r1, sl
 800e76e:	ebb2 0801 	subs.w	r8, r2, r1
 800e772:	4659      	mov	r1, fp
 800e774:	eb63 0901 	sbc.w	r9, r3, r1
 800e778:	f04f 0200 	mov.w	r2, #0
 800e77c:	f04f 0300 	mov.w	r3, #0
 800e780:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e784:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e788:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e78c:	4690      	mov	r8, r2
 800e78e:	4699      	mov	r9, r3
 800e790:	4623      	mov	r3, r4
 800e792:	eb18 0303 	adds.w	r3, r8, r3
 800e796:	613b      	str	r3, [r7, #16]
 800e798:	462b      	mov	r3, r5
 800e79a:	eb49 0303 	adc.w	r3, r9, r3
 800e79e:	617b      	str	r3, [r7, #20]
 800e7a0:	f04f 0200 	mov.w	r2, #0
 800e7a4:	f04f 0300 	mov.w	r3, #0
 800e7a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	024b      	lsls	r3, r1, #9
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e7b6:	4621      	mov	r1, r4
 800e7b8:	024a      	lsls	r2, r1, #9
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	4619      	mov	r1, r3
 800e7be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e7c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e7c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e7cc:	f7f2 fa6c 	bl	8000ca8 <__aeabi_uldivmod>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e7da:	e065      	b.n	800e8a8 <HAL_RCC_GetSysClockFreq+0x420>
 800e7dc:	40023800 	.word	0x40023800
 800e7e0:	00f42400 	.word	0x00f42400
 800e7e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e7e8:	4b3d      	ldr	r3, [pc, #244]	@ (800e8e0 <HAL_RCC_GetSysClockFreq+0x458>)
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	099b      	lsrs	r3, r3, #6
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	4611      	mov	r1, r2
 800e7f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e7f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800e7fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800e802:	4642      	mov	r2, r8
 800e804:	464b      	mov	r3, r9
 800e806:	f04f 0000 	mov.w	r0, #0
 800e80a:	f04f 0100 	mov.w	r1, #0
 800e80e:	0159      	lsls	r1, r3, #5
 800e810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e814:	0150      	lsls	r0, r2, #5
 800e816:	4602      	mov	r2, r0
 800e818:	460b      	mov	r3, r1
 800e81a:	4641      	mov	r1, r8
 800e81c:	1a51      	subs	r1, r2, r1
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	4649      	mov	r1, r9
 800e822:	eb63 0301 	sbc.w	r3, r3, r1
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	f04f 0200 	mov.w	r2, #0
 800e82c:	f04f 0300 	mov.w	r3, #0
 800e830:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e834:	4659      	mov	r1, fp
 800e836:	018b      	lsls	r3, r1, #6
 800e838:	4651      	mov	r1, sl
 800e83a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e83e:	4651      	mov	r1, sl
 800e840:	018a      	lsls	r2, r1, #6
 800e842:	4651      	mov	r1, sl
 800e844:	1a54      	subs	r4, r2, r1
 800e846:	4659      	mov	r1, fp
 800e848:	eb63 0501 	sbc.w	r5, r3, r1
 800e84c:	f04f 0200 	mov.w	r2, #0
 800e850:	f04f 0300 	mov.w	r3, #0
 800e854:	00eb      	lsls	r3, r5, #3
 800e856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e85a:	00e2      	lsls	r2, r4, #3
 800e85c:	4614      	mov	r4, r2
 800e85e:	461d      	mov	r5, r3
 800e860:	4643      	mov	r3, r8
 800e862:	18e3      	adds	r3, r4, r3
 800e864:	603b      	str	r3, [r7, #0]
 800e866:	464b      	mov	r3, r9
 800e868:	eb45 0303 	adc.w	r3, r5, r3
 800e86c:	607b      	str	r3, [r7, #4]
 800e86e:	f04f 0200 	mov.w	r2, #0
 800e872:	f04f 0300 	mov.w	r3, #0
 800e876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e87a:	4629      	mov	r1, r5
 800e87c:	028b      	lsls	r3, r1, #10
 800e87e:	4621      	mov	r1, r4
 800e880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e884:	4621      	mov	r1, r4
 800e886:	028a      	lsls	r2, r1, #10
 800e888:	4610      	mov	r0, r2
 800e88a:	4619      	mov	r1, r3
 800e88c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e890:	2200      	movs	r2, #0
 800e892:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e894:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e896:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e89a:	f7f2 fa05 	bl	8000ca8 <__aeabi_uldivmod>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800e8a8:	4b0d      	ldr	r3, [pc, #52]	@ (800e8e0 <HAL_RCC_GetSysClockFreq+0x458>)
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	0f1b      	lsrs	r3, r3, #28
 800e8ae:	f003 0307 	and.w	r3, r3, #7
 800e8b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800e8b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e8ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e8c6:	e003      	b.n	800e8d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e8c8:	4b06      	ldr	r3, [pc, #24]	@ (800e8e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800e8ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e8ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e8d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	37b8      	adds	r7, #184	@ 0xb8
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8de:	bf00      	nop
 800e8e0:	40023800 	.word	0x40023800
 800e8e4:	00f42400 	.word	0x00f42400

0800e8e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d101      	bne.n	800e8fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e28d      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 0301 	and.w	r3, r3, #1
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 8083 	beq.w	800ea0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e908:	4b94      	ldr	r3, [pc, #592]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	f003 030c 	and.w	r3, r3, #12
 800e910:	2b04      	cmp	r3, #4
 800e912:	d019      	beq.n	800e948 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e914:	4b91      	ldr	r3, [pc, #580]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e91c:	2b08      	cmp	r3, #8
 800e91e:	d106      	bne.n	800e92e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e920:	4b8e      	ldr	r3, [pc, #568]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e92c:	d00c      	beq.n	800e948 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e92e:	4b8b      	ldr	r3, [pc, #556]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e936:	2b0c      	cmp	r3, #12
 800e938:	d112      	bne.n	800e960 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e93a:	4b88      	ldr	r3, [pc, #544]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e946:	d10b      	bne.n	800e960 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e948:	4b84      	ldr	r3, [pc, #528]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e950:	2b00      	cmp	r3, #0
 800e952:	d05b      	beq.n	800ea0c <HAL_RCC_OscConfig+0x124>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d157      	bne.n	800ea0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800e95c:	2301      	movs	r3, #1
 800e95e:	e25a      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e968:	d106      	bne.n	800e978 <HAL_RCC_OscConfig+0x90>
 800e96a:	4b7c      	ldr	r3, [pc, #496]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4a7b      	ldr	r2, [pc, #492]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e974:	6013      	str	r3, [r2, #0]
 800e976:	e01d      	b.n	800e9b4 <HAL_RCC_OscConfig+0xcc>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e980:	d10c      	bne.n	800e99c <HAL_RCC_OscConfig+0xb4>
 800e982:	4b76      	ldr	r3, [pc, #472]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a75      	ldr	r2, [pc, #468]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	4b73      	ldr	r3, [pc, #460]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a72      	ldr	r2, [pc, #456]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e998:	6013      	str	r3, [r2, #0]
 800e99a:	e00b      	b.n	800e9b4 <HAL_RCC_OscConfig+0xcc>
 800e99c:	4b6f      	ldr	r3, [pc, #444]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a6e      	ldr	r2, [pc, #440]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e9a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9a6:	6013      	str	r3, [r2, #0]
 800e9a8:	4b6c      	ldr	r3, [pc, #432]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a6b      	ldr	r2, [pc, #428]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e9ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e9b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d013      	beq.n	800e9e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9bc:	f7ff f860 	bl	800da80 <HAL_GetTick>
 800e9c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9c2:	e008      	b.n	800e9d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e9c4:	f7ff f85c 	bl	800da80 <HAL_GetTick>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	2b64      	cmp	r3, #100	@ 0x64
 800e9d0:	d901      	bls.n	800e9d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e9d2:	2303      	movs	r3, #3
 800e9d4:	e21f      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9d6:	4b61      	ldr	r3, [pc, #388]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d0f0      	beq.n	800e9c4 <HAL_RCC_OscConfig+0xdc>
 800e9e2:	e014      	b.n	800ea0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9e4:	f7ff f84c 	bl	800da80 <HAL_GetTick>
 800e9e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e9ea:	e008      	b.n	800e9fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e9ec:	f7ff f848 	bl	800da80 <HAL_GetTick>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	2b64      	cmp	r3, #100	@ 0x64
 800e9f8:	d901      	bls.n	800e9fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800e9fa:	2303      	movs	r3, #3
 800e9fc:	e20b      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e9fe:	4b57      	ldr	r3, [pc, #348]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d1f0      	bne.n	800e9ec <HAL_RCC_OscConfig+0x104>
 800ea0a:	e000      	b.n	800ea0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f003 0302 	and.w	r3, r3, #2
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d06f      	beq.n	800eafa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ea1a:	4b50      	ldr	r3, [pc, #320]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	f003 030c 	and.w	r3, r3, #12
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d017      	beq.n	800ea56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ea26:	4b4d      	ldr	r3, [pc, #308]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea28:	689b      	ldr	r3, [r3, #8]
 800ea2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ea2e:	2b08      	cmp	r3, #8
 800ea30:	d105      	bne.n	800ea3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ea32:	4b4a      	ldr	r3, [pc, #296]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00b      	beq.n	800ea56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea3e:	4b47      	ldr	r3, [pc, #284]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ea46:	2b0c      	cmp	r3, #12
 800ea48:	d11c      	bne.n	800ea84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea4a:	4b44      	ldr	r3, [pc, #272]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d116      	bne.n	800ea84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea56:	4b41      	ldr	r3, [pc, #260]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f003 0302 	and.w	r3, r3, #2
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d005      	beq.n	800ea6e <HAL_RCC_OscConfig+0x186>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d001      	beq.n	800ea6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	e1d3      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea6e:	4b3b      	ldr	r3, [pc, #236]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	4937      	ldr	r1, [pc, #220]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea82:	e03a      	b.n	800eafa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d020      	beq.n	800eace <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ea8c:	4b34      	ldr	r3, [pc, #208]	@ (800eb60 <HAL_RCC_OscConfig+0x278>)
 800ea8e:	2201      	movs	r2, #1
 800ea90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea92:	f7fe fff5 	bl	800da80 <HAL_GetTick>
 800ea96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea98:	e008      	b.n	800eaac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ea9a:	f7fe fff1 	bl	800da80 <HAL_GetTick>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	2b02      	cmp	r3, #2
 800eaa6:	d901      	bls.n	800eaac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800eaa8:	2303      	movs	r3, #3
 800eaaa:	e1b4      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eaac:	4b2b      	ldr	r3, [pc, #172]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f003 0302 	and.w	r3, r3, #2
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d0f0      	beq.n	800ea9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eab8:	4b28      	ldr	r3, [pc, #160]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	691b      	ldr	r3, [r3, #16]
 800eac4:	00db      	lsls	r3, r3, #3
 800eac6:	4925      	ldr	r1, [pc, #148]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800eac8:	4313      	orrs	r3, r2
 800eaca:	600b      	str	r3, [r1, #0]
 800eacc:	e015      	b.n	800eafa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eace:	4b24      	ldr	r3, [pc, #144]	@ (800eb60 <HAL_RCC_OscConfig+0x278>)
 800ead0:	2200      	movs	r2, #0
 800ead2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ead4:	f7fe ffd4 	bl	800da80 <HAL_GetTick>
 800ead8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eada:	e008      	b.n	800eaee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eadc:	f7fe ffd0 	bl	800da80 <HAL_GetTick>
 800eae0:	4602      	mov	r2, r0
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	d901      	bls.n	800eaee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800eaea:	2303      	movs	r3, #3
 800eaec:	e193      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eaee:	4b1b      	ldr	r3, [pc, #108]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f003 0302 	and.w	r3, r3, #2
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1f0      	bne.n	800eadc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f003 0308 	and.w	r3, r3, #8
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d036      	beq.n	800eb74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	695b      	ldr	r3, [r3, #20]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d016      	beq.n	800eb3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb0e:	4b15      	ldr	r3, [pc, #84]	@ (800eb64 <HAL_RCC_OscConfig+0x27c>)
 800eb10:	2201      	movs	r2, #1
 800eb12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb14:	f7fe ffb4 	bl	800da80 <HAL_GetTick>
 800eb18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb1a:	e008      	b.n	800eb2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb1c:	f7fe ffb0 	bl	800da80 <HAL_GetTick>
 800eb20:	4602      	mov	r2, r0
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d901      	bls.n	800eb2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800eb2a:	2303      	movs	r3, #3
 800eb2c:	e173      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb2e:	4b0b      	ldr	r3, [pc, #44]	@ (800eb5c <HAL_RCC_OscConfig+0x274>)
 800eb30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb32:	f003 0302 	and.w	r3, r3, #2
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d0f0      	beq.n	800eb1c <HAL_RCC_OscConfig+0x234>
 800eb3a:	e01b      	b.n	800eb74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eb3c:	4b09      	ldr	r3, [pc, #36]	@ (800eb64 <HAL_RCC_OscConfig+0x27c>)
 800eb3e:	2200      	movs	r2, #0
 800eb40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb42:	f7fe ff9d 	bl	800da80 <HAL_GetTick>
 800eb46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb48:	e00e      	b.n	800eb68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb4a:	f7fe ff99 	bl	800da80 <HAL_GetTick>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d907      	bls.n	800eb68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	e15c      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
 800eb5c:	40023800 	.word	0x40023800
 800eb60:	42470000 	.word	0x42470000
 800eb64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb68:	4b8a      	ldr	r3, [pc, #552]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800eb6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb6c:	f003 0302 	and.w	r3, r3, #2
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1ea      	bne.n	800eb4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f003 0304 	and.w	r3, r3, #4
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f000 8097 	beq.w	800ecb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb82:	2300      	movs	r3, #0
 800eb84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb86:	4b83      	ldr	r3, [pc, #524]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800eb88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d10f      	bne.n	800ebb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb92:	2300      	movs	r3, #0
 800eb94:	60bb      	str	r3, [r7, #8]
 800eb96:	4b7f      	ldr	r3, [pc, #508]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800eb98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb9a:	4a7e      	ldr	r2, [pc, #504]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800eb9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eba0:	6413      	str	r3, [r2, #64]	@ 0x40
 800eba2:	4b7c      	ldr	r3, [pc, #496]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800eba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ebaa:	60bb      	str	r3, [r7, #8]
 800ebac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebb2:	4b79      	ldr	r3, [pc, #484]	@ (800ed98 <HAL_RCC_OscConfig+0x4b0>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d118      	bne.n	800ebf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ebbe:	4b76      	ldr	r3, [pc, #472]	@ (800ed98 <HAL_RCC_OscConfig+0x4b0>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4a75      	ldr	r2, [pc, #468]	@ (800ed98 <HAL_RCC_OscConfig+0x4b0>)
 800ebc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ebc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ebca:	f7fe ff59 	bl	800da80 <HAL_GetTick>
 800ebce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebd0:	e008      	b.n	800ebe4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebd2:	f7fe ff55 	bl	800da80 <HAL_GetTick>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	1ad3      	subs	r3, r2, r3
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d901      	bls.n	800ebe4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ebe0:	2303      	movs	r3, #3
 800ebe2:	e118      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebe4:	4b6c      	ldr	r3, [pc, #432]	@ (800ed98 <HAL_RCC_OscConfig+0x4b0>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d0f0      	beq.n	800ebd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d106      	bne.n	800ec06 <HAL_RCC_OscConfig+0x31e>
 800ebf8:	4b66      	ldr	r3, [pc, #408]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ebfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebfc:	4a65      	ldr	r2, [pc, #404]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ebfe:	f043 0301 	orr.w	r3, r3, #1
 800ec02:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec04:	e01c      	b.n	800ec40 <HAL_RCC_OscConfig+0x358>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	689b      	ldr	r3, [r3, #8]
 800ec0a:	2b05      	cmp	r3, #5
 800ec0c:	d10c      	bne.n	800ec28 <HAL_RCC_OscConfig+0x340>
 800ec0e:	4b61      	ldr	r3, [pc, #388]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec12:	4a60      	ldr	r2, [pc, #384]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec14:	f043 0304 	orr.w	r3, r3, #4
 800ec18:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec1a:	4b5e      	ldr	r3, [pc, #376]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec1e:	4a5d      	ldr	r2, [pc, #372]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec20:	f043 0301 	orr.w	r3, r3, #1
 800ec24:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec26:	e00b      	b.n	800ec40 <HAL_RCC_OscConfig+0x358>
 800ec28:	4b5a      	ldr	r3, [pc, #360]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec2c:	4a59      	ldr	r2, [pc, #356]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec2e:	f023 0301 	bic.w	r3, r3, #1
 800ec32:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec34:	4b57      	ldr	r3, [pc, #348]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec38:	4a56      	ldr	r2, [pc, #344]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec3a:	f023 0304 	bic.w	r3, r3, #4
 800ec3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d015      	beq.n	800ec74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec48:	f7fe ff1a 	bl	800da80 <HAL_GetTick>
 800ec4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec4e:	e00a      	b.n	800ec66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec50:	f7fe ff16 	bl	800da80 <HAL_GetTick>
 800ec54:	4602      	mov	r2, r0
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d901      	bls.n	800ec66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ec62:	2303      	movs	r3, #3
 800ec64:	e0d7      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec66:	4b4b      	ldr	r3, [pc, #300]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec6a:	f003 0302 	and.w	r3, r3, #2
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d0ee      	beq.n	800ec50 <HAL_RCC_OscConfig+0x368>
 800ec72:	e014      	b.n	800ec9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec74:	f7fe ff04 	bl	800da80 <HAL_GetTick>
 800ec78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec7a:	e00a      	b.n	800ec92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec7c:	f7fe ff00 	bl	800da80 <HAL_GetTick>
 800ec80:	4602      	mov	r2, r0
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d901      	bls.n	800ec92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ec8e:	2303      	movs	r3, #3
 800ec90:	e0c1      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec92:	4b40      	ldr	r3, [pc, #256]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ec94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec96:	f003 0302 	and.w	r3, r3, #2
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1ee      	bne.n	800ec7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d105      	bne.n	800ecb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eca4:	4b3b      	ldr	r3, [pc, #236]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800eca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eca8:	4a3a      	ldr	r2, [pc, #232]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ecaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ecae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	699b      	ldr	r3, [r3, #24]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f000 80ad 	beq.w	800ee14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ecba:	4b36      	ldr	r3, [pc, #216]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f003 030c 	and.w	r3, r3, #12
 800ecc2:	2b08      	cmp	r3, #8
 800ecc4:	d060      	beq.n	800ed88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	699b      	ldr	r3, [r3, #24]
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d145      	bne.n	800ed5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecce:	4b33      	ldr	r3, [pc, #204]	@ (800ed9c <HAL_RCC_OscConfig+0x4b4>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecd4:	f7fe fed4 	bl	800da80 <HAL_GetTick>
 800ecd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecda:	e008      	b.n	800ecee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ecdc:	f7fe fed0 	bl	800da80 <HAL_GetTick>
 800ece0:	4602      	mov	r2, r0
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d901      	bls.n	800ecee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800ecea:	2303      	movs	r3, #3
 800ecec:	e093      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecee:	4b29      	ldr	r3, [pc, #164]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1f0      	bne.n	800ecdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	69da      	ldr	r2, [r3, #28]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6a1b      	ldr	r3, [r3, #32]
 800ed02:	431a      	orrs	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed08:	019b      	lsls	r3, r3, #6
 800ed0a:	431a      	orrs	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed10:	085b      	lsrs	r3, r3, #1
 800ed12:	3b01      	subs	r3, #1
 800ed14:	041b      	lsls	r3, r3, #16
 800ed16:	431a      	orrs	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed1c:	061b      	lsls	r3, r3, #24
 800ed1e:	431a      	orrs	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed24:	071b      	lsls	r3, r3, #28
 800ed26:	491b      	ldr	r1, [pc, #108]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed2c:	4b1b      	ldr	r3, [pc, #108]	@ (800ed9c <HAL_RCC_OscConfig+0x4b4>)
 800ed2e:	2201      	movs	r2, #1
 800ed30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed32:	f7fe fea5 	bl	800da80 <HAL_GetTick>
 800ed36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed38:	e008      	b.n	800ed4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed3a:	f7fe fea1 	bl	800da80 <HAL_GetTick>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	1ad3      	subs	r3, r2, r3
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d901      	bls.n	800ed4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ed48:	2303      	movs	r3, #3
 800ed4a:	e064      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed4c:	4b11      	ldr	r3, [pc, #68]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d0f0      	beq.n	800ed3a <HAL_RCC_OscConfig+0x452>
 800ed58:	e05c      	b.n	800ee14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed5a:	4b10      	ldr	r3, [pc, #64]	@ (800ed9c <HAL_RCC_OscConfig+0x4b4>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed60:	f7fe fe8e 	bl	800da80 <HAL_GetTick>
 800ed64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed66:	e008      	b.n	800ed7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed68:	f7fe fe8a 	bl	800da80 <HAL_GetTick>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d901      	bls.n	800ed7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ed76:	2303      	movs	r3, #3
 800ed78:	e04d      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed7a:	4b06      	ldr	r3, [pc, #24]	@ (800ed94 <HAL_RCC_OscConfig+0x4ac>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1f0      	bne.n	800ed68 <HAL_RCC_OscConfig+0x480>
 800ed86:	e045      	b.n	800ee14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	699b      	ldr	r3, [r3, #24]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d107      	bne.n	800eda0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ed90:	2301      	movs	r3, #1
 800ed92:	e040      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
 800ed94:	40023800 	.word	0x40023800
 800ed98:	40007000 	.word	0x40007000
 800ed9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800eda0:	4b1f      	ldr	r3, [pc, #124]	@ (800ee20 <HAL_RCC_OscConfig+0x538>)
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	699b      	ldr	r3, [r3, #24]
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d030      	beq.n	800ee10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800edb8:	429a      	cmp	r2, r3
 800edba:	d129      	bne.n	800ee10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d122      	bne.n	800ee10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800edd0:	4013      	ands	r3, r2
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800edd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800edd8:	4293      	cmp	r3, r2
 800edda:	d119      	bne.n	800ee10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ede6:	085b      	lsrs	r3, r3, #1
 800ede8:	3b01      	subs	r3, #1
 800edea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800edec:	429a      	cmp	r2, r3
 800edee:	d10f      	bne.n	800ee10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d107      	bne.n	800ee10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d001      	beq.n	800ee14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800ee10:	2301      	movs	r3, #1
 800ee12:	e000      	b.n	800ee16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	40023800 	.word	0x40023800

0800ee24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	e07b      	b.n	800ef2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d108      	bne.n	800ee50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ee46:	d009      	beq.n	800ee5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	61da      	str	r2, [r3, #28]
 800ee4e:	e005      	b.n	800ee5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d106      	bne.n	800ee7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7fe f99e 	bl	800d1b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ee92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800eea4:	431a      	orrs	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	f003 0302 	and.w	r3, r3, #2
 800eeb8:	431a      	orrs	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	695b      	ldr	r3, [r3, #20]
 800eebe:	f003 0301 	and.w	r3, r3, #1
 800eec2:	431a      	orrs	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	699b      	ldr	r3, [r3, #24]
 800eec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eecc:	431a      	orrs	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	69db      	ldr	r3, [r3, #28]
 800eed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eed6:	431a      	orrs	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6a1b      	ldr	r3, [r3, #32]
 800eedc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eee0:	ea42 0103 	orr.w	r1, r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eee8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	430a      	orrs	r2, r1
 800eef2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	0c1b      	lsrs	r3, r3, #16
 800eefa:	f003 0104 	and.w	r1, r3, #4
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef02:	f003 0210 	and.w	r2, r3, #16
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	430a      	orrs	r2, r1
 800ef0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	69da      	ldr	r2, [r3, #28]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ef1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b088      	sub	sp, #32
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	60f8      	str	r0, [r7, #12]
 800ef3e:	60b9      	str	r1, [r7, #8]
 800ef40:	603b      	str	r3, [r7, #0]
 800ef42:	4613      	mov	r3, r2
 800ef44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	d101      	bne.n	800ef58 <HAL_SPI_Transmit+0x22>
 800ef54:	2302      	movs	r3, #2
 800ef56:	e126      	b.n	800f1a6 <HAL_SPI_Transmit+0x270>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef60:	f7fe fd8e 	bl	800da80 <HAL_GetTick>
 800ef64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ef66:	88fb      	ldrh	r3, [r7, #6]
 800ef68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d002      	beq.n	800ef7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ef76:	2302      	movs	r3, #2
 800ef78:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ef7a:	e10b      	b.n	800f194 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d002      	beq.n	800ef88 <HAL_SPI_Transmit+0x52>
 800ef82:	88fb      	ldrh	r3, [r7, #6]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d102      	bne.n	800ef8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ef8c:	e102      	b.n	800f194 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2203      	movs	r2, #3
 800ef92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	88fa      	ldrh	r2, [r7, #6]
 800efa6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	88fa      	ldrh	r2, [r7, #6]
 800efac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2200      	movs	r2, #0
 800efb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2200      	movs	r2, #0
 800efbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2200      	movs	r2, #0
 800efca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800efd4:	d10f      	bne.n	800eff6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800efe4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eff4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f000:	2b40      	cmp	r3, #64	@ 0x40
 800f002:	d007      	beq.n	800f014 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f012:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f01c:	d14b      	bne.n	800f0b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <HAL_SPI_Transmit+0xf6>
 800f026:	8afb      	ldrh	r3, [r7, #22]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d13e      	bne.n	800f0aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f030:	881a      	ldrh	r2, [r3, #0]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f03c:	1c9a      	adds	r2, r3, #2
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f046:	b29b      	uxth	r3, r3
 800f048:	3b01      	subs	r3, #1
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f050:	e02b      	b.n	800f0aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	f003 0302 	and.w	r3, r3, #2
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	d112      	bne.n	800f086 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f064:	881a      	ldrh	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f070:	1c9a      	adds	r2, r3, #2
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	3b01      	subs	r3, #1
 800f07e:	b29a      	uxth	r2, r3
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f084:	e011      	b.n	800f0aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f086:	f7fe fcfb 	bl	800da80 <HAL_GetTick>
 800f08a:	4602      	mov	r2, r0
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	683a      	ldr	r2, [r7, #0]
 800f092:	429a      	cmp	r2, r3
 800f094:	d803      	bhi.n	800f09e <HAL_SPI_Transmit+0x168>
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09c:	d102      	bne.n	800f0a4 <HAL_SPI_Transmit+0x16e>
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d102      	bne.n	800f0aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800f0a4:	2303      	movs	r3, #3
 800f0a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f0a8:	e074      	b.n	800f194 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1ce      	bne.n	800f052 <HAL_SPI_Transmit+0x11c>
 800f0b4:	e04c      	b.n	800f150 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <HAL_SPI_Transmit+0x18e>
 800f0be:	8afb      	ldrh	r3, [r7, #22]
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d140      	bne.n	800f146 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	330c      	adds	r3, #12
 800f0ce:	7812      	ldrb	r2, [r2, #0]
 800f0d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0d6:	1c5a      	adds	r2, r3, #1
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	3b01      	subs	r3, #1
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f0ea:	e02c      	b.n	800f146 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	f003 0302 	and.w	r3, r3, #2
 800f0f6:	2b02      	cmp	r3, #2
 800f0f8:	d113      	bne.n	800f122 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	330c      	adds	r3, #12
 800f104:	7812      	ldrb	r2, [r2, #0]
 800f106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f10c:	1c5a      	adds	r2, r3, #1
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f116:	b29b      	uxth	r3, r3
 800f118:	3b01      	subs	r3, #1
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f120:	e011      	b.n	800f146 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f122:	f7fe fcad 	bl	800da80 <HAL_GetTick>
 800f126:	4602      	mov	r2, r0
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	683a      	ldr	r2, [r7, #0]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d803      	bhi.n	800f13a <HAL_SPI_Transmit+0x204>
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f138:	d102      	bne.n	800f140 <HAL_SPI_Transmit+0x20a>
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800f140:	2303      	movs	r3, #3
 800f142:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f144:	e026      	b.n	800f194 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d1cd      	bne.n	800f0ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f150:	69ba      	ldr	r2, [r7, #24]
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f000 fcdd 	bl	800fb14 <SPI_EndRxTxTransaction>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2220      	movs	r2, #32
 800f164:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10a      	bne.n	800f184 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f16e:	2300      	movs	r3, #0
 800f170:	613b      	str	r3, [r7, #16]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	613b      	str	r3, [r7, #16]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	613b      	str	r3, [r7, #16]
 800f182:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d002      	beq.n	800f192 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	77fb      	strb	r3, [r7, #31]
 800f190:	e000      	b.n	800f194 <HAL_SPI_Transmit+0x25e>
  }

error:
 800f192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2201      	movs	r2, #1
 800f198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f1a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3720      	adds	r7, #32
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b088      	sub	sp, #32
 800f1b2:	af02      	add	r7, sp, #8
 800f1b4:	60f8      	str	r0, [r7, #12]
 800f1b6:	60b9      	str	r1, [r7, #8]
 800f1b8:	603b      	str	r3, [r7, #0]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f1ca:	d112      	bne.n	800f1f2 <HAL_SPI_Receive+0x44>
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d10e      	bne.n	800f1f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2204      	movs	r2, #4
 800f1d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f1dc:	88fa      	ldrh	r2, [r7, #6]
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	68b9      	ldr	r1, [r7, #8]
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f000 f8f1 	bl	800f3d0 <HAL_SPI_TransmitReceive>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	e0ea      	b.n	800f3c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d101      	bne.n	800f200 <HAL_SPI_Receive+0x52>
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	e0e3      	b.n	800f3c8 <HAL_SPI_Receive+0x21a>
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2201      	movs	r2, #1
 800f204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f208:	f7fe fc3a 	bl	800da80 <HAL_GetTick>
 800f20c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f214:	b2db      	uxtb	r3, r3
 800f216:	2b01      	cmp	r3, #1
 800f218:	d002      	beq.n	800f220 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f21a:	2302      	movs	r3, #2
 800f21c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f21e:	e0ca      	b.n	800f3b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d002      	beq.n	800f22c <HAL_SPI_Receive+0x7e>
 800f226:	88fb      	ldrh	r3, [r7, #6]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d102      	bne.n	800f232 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f22c:	2301      	movs	r3, #1
 800f22e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f230:	e0c1      	b.n	800f3b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2204      	movs	r2, #4
 800f236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2200      	movs	r2, #0
 800f23e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	68ba      	ldr	r2, [r7, #8]
 800f244:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	88fa      	ldrh	r2, [r7, #6]
 800f24a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	88fa      	ldrh	r2, [r7, #6]
 800f250:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2200      	movs	r2, #0
 800f256:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2200      	movs	r2, #0
 800f25c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2200      	movs	r2, #0
 800f262:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2200      	movs	r2, #0
 800f268:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2200      	movs	r2, #0
 800f26e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f278:	d10f      	bne.n	800f29a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f288:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f298:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2a4:	2b40      	cmp	r3, #64	@ 0x40
 800f2a6:	d007      	beq.n	800f2b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f2b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d162      	bne.n	800f386 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f2c0:	e02e      	b.n	800f320 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f003 0301 	and.w	r3, r3, #1
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d115      	bne.n	800f2fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f103 020c 	add.w	r2, r3, #12
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2dc:	7812      	ldrb	r2, [r2, #0]
 800f2de:	b2d2      	uxtb	r2, r2
 800f2e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	b29a      	uxth	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f2fa:	e011      	b.n	800f320 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2fc:	f7fe fbc0 	bl	800da80 <HAL_GetTick>
 800f300:	4602      	mov	r2, r0
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	683a      	ldr	r2, [r7, #0]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d803      	bhi.n	800f314 <HAL_SPI_Receive+0x166>
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f312:	d102      	bne.n	800f31a <HAL_SPI_Receive+0x16c>
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d102      	bne.n	800f320 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800f31a:	2303      	movs	r3, #3
 800f31c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f31e:	e04a      	b.n	800f3b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f324:	b29b      	uxth	r3, r3
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1cb      	bne.n	800f2c2 <HAL_SPI_Receive+0x114>
 800f32a:	e031      	b.n	800f390 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	f003 0301 	and.w	r3, r3, #1
 800f336:	2b01      	cmp	r3, #1
 800f338:	d113      	bne.n	800f362 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	68da      	ldr	r2, [r3, #12]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f344:	b292      	uxth	r2, r2
 800f346:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f34c:	1c9a      	adds	r2, r3, #2
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f356:	b29b      	uxth	r3, r3
 800f358:	3b01      	subs	r3, #1
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f360:	e011      	b.n	800f386 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f362:	f7fe fb8d 	bl	800da80 <HAL_GetTick>
 800f366:	4602      	mov	r2, r0
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	1ad3      	subs	r3, r2, r3
 800f36c:	683a      	ldr	r2, [r7, #0]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d803      	bhi.n	800f37a <HAL_SPI_Receive+0x1cc>
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f378:	d102      	bne.n	800f380 <HAL_SPI_Receive+0x1d2>
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d102      	bne.n	800f386 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800f380:	2303      	movs	r3, #3
 800f382:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f384:	e017      	b.n	800f3b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1cd      	bne.n	800f32c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f390:	693a      	ldr	r2, [r7, #16]
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 fb57 	bl	800fa48 <SPI_EndRxTransaction>
 800f39a:	4603      	mov	r3, r0
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d002      	beq.n	800f3a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2220      	movs	r2, #32
 800f3a4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d002      	beq.n	800f3b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	75fb      	strb	r3, [r7, #23]
 800f3b2:	e000      	b.n	800f3b6 <HAL_SPI_Receive+0x208>
  }

error :
 800f3b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b08c      	sub	sp, #48	@ 0x30
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d101      	bne.n	800f3f6 <HAL_SPI_TransmitReceive+0x26>
 800f3f2:	2302      	movs	r3, #2
 800f3f4:	e18a      	b.n	800f70c <HAL_SPI_TransmitReceive+0x33c>
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3fe:	f7fe fb3f 	bl	800da80 <HAL_GetTick>
 800f402:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f40a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f414:	887b      	ldrh	r3, [r7, #2]
 800f416:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f418:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d00f      	beq.n	800f440 <HAL_SPI_TransmitReceive+0x70>
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f426:	d107      	bne.n	800f438 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d103      	bne.n	800f438 <HAL_SPI_TransmitReceive+0x68>
 800f430:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f434:	2b04      	cmp	r3, #4
 800f436:	d003      	beq.n	800f440 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f438:	2302      	movs	r3, #2
 800f43a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f43e:	e15b      	b.n	800f6f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d005      	beq.n	800f452 <HAL_SPI_TransmitReceive+0x82>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d002      	beq.n	800f452 <HAL_SPI_TransmitReceive+0x82>
 800f44c:	887b      	ldrh	r3, [r7, #2]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d103      	bne.n	800f45a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f458:	e14e      	b.n	800f6f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b04      	cmp	r3, #4
 800f464:	d003      	beq.n	800f46e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2205      	movs	r2, #5
 800f46a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	887a      	ldrh	r2, [r7, #2]
 800f47e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	887a      	ldrh	r2, [r7, #2]
 800f484:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	68ba      	ldr	r2, [r7, #8]
 800f48a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	887a      	ldrh	r2, [r7, #2]
 800f490:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	887a      	ldrh	r2, [r7, #2]
 800f496:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2200      	movs	r2, #0
 800f49c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4ae:	2b40      	cmp	r3, #64	@ 0x40
 800f4b0:	d007      	beq.n	800f4c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f4c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4ca:	d178      	bne.n	800f5be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d002      	beq.n	800f4da <HAL_SPI_TransmitReceive+0x10a>
 800f4d4:	8b7b      	ldrh	r3, [r7, #26]
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d166      	bne.n	800f5a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4de:	881a      	ldrh	r2, [r3, #0]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4ea:	1c9a      	adds	r2, r3, #2
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	b29a      	uxth	r2, r3
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4fe:	e053      	b.n	800f5a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	f003 0302 	and.w	r3, r3, #2
 800f50a:	2b02      	cmp	r3, #2
 800f50c:	d11b      	bne.n	800f546 <HAL_SPI_TransmitReceive+0x176>
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f512:	b29b      	uxth	r3, r3
 800f514:	2b00      	cmp	r3, #0
 800f516:	d016      	beq.n	800f546 <HAL_SPI_TransmitReceive+0x176>
 800f518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d113      	bne.n	800f546 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f522:	881a      	ldrh	r2, [r3, #0]
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f52e:	1c9a      	adds	r2, r3, #2
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f538:	b29b      	uxth	r3, r3
 800f53a:	3b01      	subs	r3, #1
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f542:	2300      	movs	r3, #0
 800f544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	f003 0301 	and.w	r3, r3, #1
 800f550:	2b01      	cmp	r3, #1
 800f552:	d119      	bne.n	800f588 <HAL_SPI_TransmitReceive+0x1b8>
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f558:	b29b      	uxth	r3, r3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d014      	beq.n	800f588 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68da      	ldr	r2, [r3, #12]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f568:	b292      	uxth	r2, r2
 800f56a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f570:	1c9a      	adds	r2, r3, #2
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	3b01      	subs	r3, #1
 800f57e:	b29a      	uxth	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f584:	2301      	movs	r3, #1
 800f586:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f588:	f7fe fa7a 	bl	800da80 <HAL_GetTick>
 800f58c:	4602      	mov	r2, r0
 800f58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f594:	429a      	cmp	r2, r3
 800f596:	d807      	bhi.n	800f5a8 <HAL_SPI_TransmitReceive+0x1d8>
 800f598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59e:	d003      	beq.n	800f5a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f5a0:	2303      	movs	r3, #3
 800f5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800f5a6:	e0a7      	b.n	800f6f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1a6      	bne.n	800f500 <HAL_SPI_TransmitReceive+0x130>
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d1a1      	bne.n	800f500 <HAL_SPI_TransmitReceive+0x130>
 800f5bc:	e07c      	b.n	800f6b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d002      	beq.n	800f5cc <HAL_SPI_TransmitReceive+0x1fc>
 800f5c6:	8b7b      	ldrh	r3, [r7, #26]
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d16b      	bne.n	800f6a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	330c      	adds	r3, #12
 800f5d6:	7812      	ldrb	r2, [r2, #0]
 800f5d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f5f2:	e057      	b.n	800f6a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	689b      	ldr	r3, [r3, #8]
 800f5fa:	f003 0302 	and.w	r3, r3, #2
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	d11c      	bne.n	800f63c <HAL_SPI_TransmitReceive+0x26c>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f606:	b29b      	uxth	r3, r3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d017      	beq.n	800f63c <HAL_SPI_TransmitReceive+0x26c>
 800f60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d114      	bne.n	800f63c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	330c      	adds	r3, #12
 800f61c:	7812      	ldrb	r2, [r2, #0]
 800f61e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f624:	1c5a      	adds	r2, r3, #1
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f62e:	b29b      	uxth	r3, r3
 800f630:	3b01      	subs	r3, #1
 800f632:	b29a      	uxth	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f638:	2300      	movs	r3, #0
 800f63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	f003 0301 	and.w	r3, r3, #1
 800f646:	2b01      	cmp	r3, #1
 800f648:	d119      	bne.n	800f67e <HAL_SPI_TransmitReceive+0x2ae>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f64e:	b29b      	uxth	r3, r3
 800f650:	2b00      	cmp	r3, #0
 800f652:	d014      	beq.n	800f67e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68da      	ldr	r2, [r3, #12]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f65e:	b2d2      	uxtb	r2, r2
 800f660:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f666:	1c5a      	adds	r2, r3, #1
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f670:	b29b      	uxth	r3, r3
 800f672:	3b01      	subs	r3, #1
 800f674:	b29a      	uxth	r2, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f67a:	2301      	movs	r3, #1
 800f67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f67e:	f7fe f9ff 	bl	800da80 <HAL_GetTick>
 800f682:	4602      	mov	r2, r0
 800f684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f686:	1ad3      	subs	r3, r2, r3
 800f688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d803      	bhi.n	800f696 <HAL_SPI_TransmitReceive+0x2c6>
 800f68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f694:	d102      	bne.n	800f69c <HAL_SPI_TransmitReceive+0x2cc>
 800f696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d103      	bne.n	800f6a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f69c:	2303      	movs	r3, #3
 800f69e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800f6a2:	e029      	b.n	800f6f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1a2      	bne.n	800f5f4 <HAL_SPI_TransmitReceive+0x224>
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d19d      	bne.n	800f5f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f6b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f6bc:	68f8      	ldr	r0, [r7, #12]
 800f6be:	f000 fa29 	bl	800fb14 <SPI_EndRxTxTransaction>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d006      	beq.n	800f6d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2220      	movs	r2, #32
 800f6d2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800f6d4:	e010      	b.n	800f6f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	689b      	ldr	r3, [r3, #8]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d10b      	bne.n	800f6f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f6de:	2300      	movs	r3, #0
 800f6e0:	617b      	str	r3, [r7, #20]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	617b      	str	r3, [r7, #20]
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	617b      	str	r3, [r7, #20]
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	e000      	b.n	800f6f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f6f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2200      	movs	r2, #0
 800f704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f708:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3730      	adds	r7, #48	@ 0x30
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b088      	sub	sp, #32
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f732:	2b00      	cmp	r3, #0
 800f734:	d10e      	bne.n	800f754 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d009      	beq.n	800f754 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f746:	2b00      	cmp	r3, #0
 800f748:	d004      	beq.n	800f754 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	4798      	blx	r3
    return;
 800f752:	e0ce      	b.n	800f8f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	f003 0302 	and.w	r3, r3, #2
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d009      	beq.n	800f772 <HAL_SPI_IRQHandler+0x5e>
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f764:	2b00      	cmp	r3, #0
 800f766:	d004      	beq.n	800f772 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	4798      	blx	r3
    return;
 800f770:	e0bf      	b.n	800f8f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	f003 0320 	and.w	r3, r3, #32
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d10a      	bne.n	800f792 <HAL_SPI_IRQHandler+0x7e>
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f782:	2b00      	cmp	r3, #0
 800f784:	d105      	bne.n	800f792 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 80b0 	beq.w	800f8f2 <HAL_SPI_IRQHandler+0x1de>
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	f003 0320 	and.w	r3, r3, #32
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f000 80aa 	beq.w	800f8f2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f79e:	69bb      	ldr	r3, [r7, #24]
 800f7a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d023      	beq.n	800f7f0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	d011      	beq.n	800f7d8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7b8:	f043 0204 	orr.w	r2, r3, #4
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	617b      	str	r3, [r7, #20]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	617b      	str	r3, [r7, #20]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	617b      	str	r3, [r7, #20]
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	e00b      	b.n	800f7f0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f7d8:	2300      	movs	r3, #0
 800f7da:	613b      	str	r3, [r7, #16]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	613b      	str	r3, [r7, #16]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	613b      	str	r3, [r7, #16]
 800f7ec:	693b      	ldr	r3, [r7, #16]
        return;
 800f7ee:	e080      	b.n	800f8f2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	f003 0320 	and.w	r3, r3, #32
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d014      	beq.n	800f824 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7fe:	f043 0201 	orr.w	r2, r3, #1
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f806:	2300      	movs	r3, #0
 800f808:	60fb      	str	r3, [r7, #12]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	60fb      	str	r3, [r7, #12]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f820:	601a      	str	r2, [r3, #0]
 800f822:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f824:	69bb      	ldr	r3, [r7, #24]
 800f826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00c      	beq.n	800f848 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f832:	f043 0208 	orr.w	r2, r3, #8
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f83a:	2300      	movs	r3, #0
 800f83c:	60bb      	str	r3, [r7, #8]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	60bb      	str	r3, [r7, #8]
 800f846:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d04f      	beq.n	800f8f0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f85e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2201      	movs	r2, #1
 800f864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	f003 0302 	and.w	r3, r3, #2
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d104      	bne.n	800f87c <HAL_SPI_IRQHandler+0x168>
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	f003 0301 	and.w	r3, r3, #1
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d034      	beq.n	800f8e6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	685a      	ldr	r2, [r3, #4]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f022 0203 	bic.w	r2, r2, #3
 800f88a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f890:	2b00      	cmp	r3, #0
 800f892:	d011      	beq.n	800f8b8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f898:	4a17      	ldr	r2, [pc, #92]	@ (800f8f8 <HAL_SPI_IRQHandler+0x1e4>)
 800f89a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fe fa9e 	bl	800dde2 <HAL_DMA_Abort_IT>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d005      	beq.n	800f8b8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d016      	beq.n	800f8ee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8c4:	4a0c      	ldr	r2, [pc, #48]	@ (800f8f8 <HAL_SPI_IRQHandler+0x1e4>)
 800f8c6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fe fa88 	bl	800dde2 <HAL_DMA_Abort_IT>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00a      	beq.n	800f8ee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800f8e4:	e003      	b.n	800f8ee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 f808 	bl	800f8fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f8ec:	e000      	b.n	800f8f0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f8ee:	bf00      	nop
    return;
 800f8f0:	bf00      	nop
  }
}
 800f8f2:	3720      	adds	r7, #32
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	0800f911 	.word	0x0800f911

0800f8fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f91c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2200      	movs	r2, #0
 800f928:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f7ff ffe6 	bl	800f8fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f930:	bf00      	nop
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b088      	sub	sp, #32
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	603b      	str	r3, [r7, #0]
 800f944:	4613      	mov	r3, r2
 800f946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f948:	f7fe f89a 	bl	800da80 <HAL_GetTick>
 800f94c:	4602      	mov	r2, r0
 800f94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f950:	1a9b      	subs	r3, r3, r2
 800f952:	683a      	ldr	r2, [r7, #0]
 800f954:	4413      	add	r3, r2
 800f956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f958:	f7fe f892 	bl	800da80 <HAL_GetTick>
 800f95c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f95e:	4b39      	ldr	r3, [pc, #228]	@ (800fa44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	015b      	lsls	r3, r3, #5
 800f964:	0d1b      	lsrs	r3, r3, #20
 800f966:	69fa      	ldr	r2, [r7, #28]
 800f968:	fb02 f303 	mul.w	r3, r2, r3
 800f96c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f96e:	e054      	b.n	800fa1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f976:	d050      	beq.n	800fa1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f978:	f7fe f882 	bl	800da80 <HAL_GetTick>
 800f97c:	4602      	mov	r2, r0
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	1ad3      	subs	r3, r2, r3
 800f982:	69fa      	ldr	r2, [r7, #28]
 800f984:	429a      	cmp	r2, r3
 800f986:	d902      	bls.n	800f98e <SPI_WaitFlagStateUntilTimeout+0x56>
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d13d      	bne.n	800fa0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	685a      	ldr	r2, [r3, #4]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f99c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f9a6:	d111      	bne.n	800f9cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f9b0:	d004      	beq.n	800f9bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	689b      	ldr	r3, [r3, #8]
 800f9b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f9ba:	d107      	bne.n	800f9cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f9ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f9d4:	d10f      	bne.n	800f9f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f9e4:	601a      	str	r2, [r3, #0]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f9f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2200      	movs	r2, #0
 800fa02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800fa06:	2303      	movs	r3, #3
 800fa08:	e017      	b.n	800fa3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fa10:	2300      	movs	r3, #0
 800fa12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	3b01      	subs	r3, #1
 800fa18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	689a      	ldr	r2, [r3, #8]
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	4013      	ands	r3, r2
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	bf0c      	ite	eq
 800fa2a:	2301      	moveq	r3, #1
 800fa2c:	2300      	movne	r3, #0
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	461a      	mov	r2, r3
 800fa32:	79fb      	ldrb	r3, [r7, #7]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d19b      	bne.n	800f970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3720      	adds	r7, #32
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	20000010 	.word	0x20000010

0800fa48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b086      	sub	sp, #24
 800fa4c:	af02      	add	r7, sp, #8
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa5c:	d111      	bne.n	800fa82 <SPI_EndRxTransaction+0x3a>
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa66:	d004      	beq.n	800fa72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa70:	d107      	bne.n	800fa82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fa80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa8a:	d12a      	bne.n	800fae2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa94:	d012      	beq.n	800fabc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	2180      	movs	r1, #128	@ 0x80
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f7ff ff49 	bl	800f938 <SPI_WaitFlagStateUntilTimeout>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d02d      	beq.n	800fb08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fab0:	f043 0220 	orr.w	r2, r3, #32
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800fab8:	2303      	movs	r3, #3
 800faba:	e026      	b.n	800fb0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	2200      	movs	r2, #0
 800fac4:	2101      	movs	r1, #1
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f7ff ff36 	bl	800f938 <SPI_WaitFlagStateUntilTimeout>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d01a      	beq.n	800fb08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fad6:	f043 0220 	orr.w	r2, r3, #32
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800fade:	2303      	movs	r3, #3
 800fae0:	e013      	b.n	800fb0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	9300      	str	r3, [sp, #0]
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	2200      	movs	r2, #0
 800faea:	2101      	movs	r1, #1
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f7ff ff23 	bl	800f938 <SPI_WaitFlagStateUntilTimeout>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d007      	beq.n	800fb08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fafc:	f043 0220 	orr.w	r2, r3, #32
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fb04:	2303      	movs	r3, #3
 800fb06:	e000      	b.n	800fb0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3710      	adds	r7, #16
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
	...

0800fb14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b088      	sub	sp, #32
 800fb18:	af02      	add	r7, sp, #8
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fb20:	4b1b      	ldr	r3, [pc, #108]	@ (800fb90 <SPI_EndRxTxTransaction+0x7c>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a1b      	ldr	r2, [pc, #108]	@ (800fb94 <SPI_EndRxTxTransaction+0x80>)
 800fb26:	fba2 2303 	umull	r2, r3, r2, r3
 800fb2a:	0d5b      	lsrs	r3, r3, #21
 800fb2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fb30:	fb02 f303 	mul.w	r3, r2, r3
 800fb34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	685b      	ldr	r3, [r3, #4]
 800fb3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fb3e:	d112      	bne.n	800fb66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	2200      	movs	r2, #0
 800fb48:	2180      	movs	r1, #128	@ 0x80
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7ff fef4 	bl	800f938 <SPI_WaitFlagStateUntilTimeout>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d016      	beq.n	800fb84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb5a:	f043 0220 	orr.w	r2, r3, #32
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fb62:	2303      	movs	r3, #3
 800fb64:	e00f      	b.n	800fb86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00a      	beq.n	800fb82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb7c:	2b80      	cmp	r3, #128	@ 0x80
 800fb7e:	d0f2      	beq.n	800fb66 <SPI_EndRxTxTransaction+0x52>
 800fb80:	e000      	b.n	800fb84 <SPI_EndRxTxTransaction+0x70>
        break;
 800fb82:	bf00      	nop
  }

  return HAL_OK;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3718      	adds	r7, #24
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	20000010 	.word	0x20000010
 800fb94:	165e9f81 	.word	0x165e9f81

0800fb98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d101      	bne.n	800fbaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fba6:	2301      	movs	r3, #1
 800fba8:	e041      	b.n	800fc2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d106      	bne.n	800fbc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f7fd fbee 	bl	800d3a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2202      	movs	r2, #2
 800fbc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	f000 fba8 	bl	801032c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2201      	movs	r2, #1
 800fc08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2201      	movs	r2, #1
 800fc20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2201      	movs	r2, #1
 800fc28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
	...

0800fc38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d001      	beq.n	800fc50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	e04e      	b.n	800fcee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2202      	movs	r2, #2
 800fc54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	68da      	ldr	r2, [r3, #12]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f042 0201 	orr.w	r2, r2, #1
 800fc66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a23      	ldr	r2, [pc, #140]	@ (800fcfc <HAL_TIM_Base_Start_IT+0xc4>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d022      	beq.n	800fcb8 <HAL_TIM_Base_Start_IT+0x80>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc7a:	d01d      	beq.n	800fcb8 <HAL_TIM_Base_Start_IT+0x80>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a1f      	ldr	r2, [pc, #124]	@ (800fd00 <HAL_TIM_Base_Start_IT+0xc8>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d018      	beq.n	800fcb8 <HAL_TIM_Base_Start_IT+0x80>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a1e      	ldr	r2, [pc, #120]	@ (800fd04 <HAL_TIM_Base_Start_IT+0xcc>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d013      	beq.n	800fcb8 <HAL_TIM_Base_Start_IT+0x80>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4a1c      	ldr	r2, [pc, #112]	@ (800fd08 <HAL_TIM_Base_Start_IT+0xd0>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d00e      	beq.n	800fcb8 <HAL_TIM_Base_Start_IT+0x80>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	4a1b      	ldr	r2, [pc, #108]	@ (800fd0c <HAL_TIM_Base_Start_IT+0xd4>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d009      	beq.n	800fcb8 <HAL_TIM_Base_Start_IT+0x80>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4a19      	ldr	r2, [pc, #100]	@ (800fd10 <HAL_TIM_Base_Start_IT+0xd8>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d004      	beq.n	800fcb8 <HAL_TIM_Base_Start_IT+0x80>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a18      	ldr	r2, [pc, #96]	@ (800fd14 <HAL_TIM_Base_Start_IT+0xdc>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d111      	bne.n	800fcdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	f003 0307 	and.w	r3, r3, #7
 800fcc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2b06      	cmp	r3, #6
 800fcc8:	d010      	beq.n	800fcec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	681a      	ldr	r2, [r3, #0]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f042 0201 	orr.w	r2, r2, #1
 800fcd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcda:	e007      	b.n	800fcec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f042 0201 	orr.w	r2, r2, #1
 800fcea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fcec:	2300      	movs	r3, #0
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3714      	adds	r7, #20
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop
 800fcfc:	40010000 	.word	0x40010000
 800fd00:	40000400 	.word	0x40000400
 800fd04:	40000800 	.word	0x40000800
 800fd08:	40000c00 	.word	0x40000c00
 800fd0c:	40010400 	.word	0x40010400
 800fd10:	40014000 	.word	0x40014000
 800fd14:	40001800 	.word	0x40001800

0800fd18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d101      	bne.n	800fd2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e041      	b.n	800fdae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d106      	bne.n	800fd44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7fd fae0 	bl	800d304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2202      	movs	r2, #2
 800fd48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	3304      	adds	r3, #4
 800fd54:	4619      	mov	r1, r3
 800fd56:	4610      	mov	r0, r2
 800fd58:	f000 fae8 	bl	801032c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2201      	movs	r2, #1
 800fd68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2201      	movs	r2, #1
 800fd78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2201      	movs	r2, #1
 800fd88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2201      	movs	r2, #1
 800fda0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2201      	movs	r2, #1
 800fda8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b082      	sub	sp, #8
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	691b      	ldr	r3, [r3, #16]
 800fdc4:	f003 0302 	and.w	r3, r3, #2
 800fdc8:	2b02      	cmp	r3, #2
 800fdca:	d122      	bne.n	800fe12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	f003 0302 	and.w	r3, r3, #2
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	d11b      	bne.n	800fe12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f06f 0202 	mvn.w	r2, #2
 800fde2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2201      	movs	r2, #1
 800fde8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	699b      	ldr	r3, [r3, #24]
 800fdf0:	f003 0303 	and.w	r3, r3, #3
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d003      	beq.n	800fe00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 fa78 	bl	80102ee <HAL_TIM_IC_CaptureCallback>
 800fdfe:	e005      	b.n	800fe0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fa6a 	bl	80102da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fa7b 	bl	8010302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	691b      	ldr	r3, [r3, #16]
 800fe18:	f003 0304 	and.w	r3, r3, #4
 800fe1c:	2b04      	cmp	r3, #4
 800fe1e:	d122      	bne.n	800fe66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	f003 0304 	and.w	r3, r3, #4
 800fe2a:	2b04      	cmp	r3, #4
 800fe2c:	d11b      	bne.n	800fe66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f06f 0204 	mvn.w	r2, #4
 800fe36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	699b      	ldr	r3, [r3, #24]
 800fe44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d003      	beq.n	800fe54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 fa4e 	bl	80102ee <HAL_TIM_IC_CaptureCallback>
 800fe52:	e005      	b.n	800fe60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 fa40 	bl	80102da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 fa51 	bl	8010302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	691b      	ldr	r3, [r3, #16]
 800fe6c:	f003 0308 	and.w	r3, r3, #8
 800fe70:	2b08      	cmp	r3, #8
 800fe72:	d122      	bne.n	800feba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	f003 0308 	and.w	r3, r3, #8
 800fe7e:	2b08      	cmp	r3, #8
 800fe80:	d11b      	bne.n	800feba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f06f 0208 	mvn.w	r2, #8
 800fe8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2204      	movs	r2, #4
 800fe90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	69db      	ldr	r3, [r3, #28]
 800fe98:	f003 0303 	and.w	r3, r3, #3
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d003      	beq.n	800fea8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f000 fa24 	bl	80102ee <HAL_TIM_IC_CaptureCallback>
 800fea6:	e005      	b.n	800feb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 fa16 	bl	80102da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fa27 	bl	8010302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	f003 0310 	and.w	r3, r3, #16
 800fec4:	2b10      	cmp	r3, #16
 800fec6:	d122      	bne.n	800ff0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	f003 0310 	and.w	r3, r3, #16
 800fed2:	2b10      	cmp	r3, #16
 800fed4:	d11b      	bne.n	800ff0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f06f 0210 	mvn.w	r2, #16
 800fede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2208      	movs	r2, #8
 800fee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	69db      	ldr	r3, [r3, #28]
 800feec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d003      	beq.n	800fefc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 f9fa 	bl	80102ee <HAL_TIM_IC_CaptureCallback>
 800fefa:	e005      	b.n	800ff08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f9ec 	bl	80102da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 f9fd 	bl	8010302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	691b      	ldr	r3, [r3, #16]
 800ff14:	f003 0301 	and.w	r3, r3, #1
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d10e      	bne.n	800ff3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	f003 0301 	and.w	r3, r3, #1
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d107      	bne.n	800ff3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f06f 0201 	mvn.w	r2, #1
 800ff32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7fd f907 	bl	800d148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	691b      	ldr	r3, [r3, #16]
 800ff40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff44:	2b80      	cmp	r3, #128	@ 0x80
 800ff46:	d10e      	bne.n	800ff66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff52:	2b80      	cmp	r3, #128	@ 0x80
 800ff54:	d107      	bne.n	800ff66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ff5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 fda5 	bl	8010ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff70:	2b40      	cmp	r3, #64	@ 0x40
 800ff72:	d10e      	bne.n	800ff92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff7e:	2b40      	cmp	r3, #64	@ 0x40
 800ff80:	d107      	bne.n	800ff92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ff8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 f9c2 	bl	8010316 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	691b      	ldr	r3, [r3, #16]
 800ff98:	f003 0320 	and.w	r3, r3, #32
 800ff9c:	2b20      	cmp	r3, #32
 800ff9e:	d10e      	bne.n	800ffbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	f003 0320 	and.w	r3, r3, #32
 800ffaa:	2b20      	cmp	r3, #32
 800ffac:	d107      	bne.n	800ffbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f06f 0220 	mvn.w	r2, #32
 800ffb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fd6f 	bl	8010a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ffbe:	bf00      	nop
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
	...

0800ffc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b086      	sub	sp, #24
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ffde:	2b01      	cmp	r3, #1
 800ffe0:	d101      	bne.n	800ffe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ffe2:	2302      	movs	r3, #2
 800ffe4:	e0ae      	b.n	8010144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b0c      	cmp	r3, #12
 800fff2:	f200 809f 	bhi.w	8010134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fff6:	a201      	add	r2, pc, #4	@ (adr r2, 800fffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fffc:	08010031 	.word	0x08010031
 8010000:	08010135 	.word	0x08010135
 8010004:	08010135 	.word	0x08010135
 8010008:	08010135 	.word	0x08010135
 801000c:	08010071 	.word	0x08010071
 8010010:	08010135 	.word	0x08010135
 8010014:	08010135 	.word	0x08010135
 8010018:	08010135 	.word	0x08010135
 801001c:	080100b3 	.word	0x080100b3
 8010020:	08010135 	.word	0x08010135
 8010024:	08010135 	.word	0x08010135
 8010028:	08010135 	.word	0x08010135
 801002c:	080100f3 	.word	0x080100f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68b9      	ldr	r1, [r7, #8]
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fa18 	bl	801046c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	699a      	ldr	r2, [r3, #24]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f042 0208 	orr.w	r2, r2, #8
 801004a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	699a      	ldr	r2, [r3, #24]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f022 0204 	bic.w	r2, r2, #4
 801005a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	6999      	ldr	r1, [r3, #24]
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	691a      	ldr	r2, [r3, #16]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	430a      	orrs	r2, r1
 801006c:	619a      	str	r2, [r3, #24]
      break;
 801006e:	e064      	b.n	801013a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	68b9      	ldr	r1, [r7, #8]
 8010076:	4618      	mov	r0, r3
 8010078:	f000 fa68 	bl	801054c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	699a      	ldr	r2, [r3, #24]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801008a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	699a      	ldr	r2, [r3, #24]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801009a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6999      	ldr	r1, [r3, #24]
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	021a      	lsls	r2, r3, #8
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	430a      	orrs	r2, r1
 80100ae:	619a      	str	r2, [r3, #24]
      break;
 80100b0:	e043      	b.n	801013a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	68b9      	ldr	r1, [r7, #8]
 80100b8:	4618      	mov	r0, r3
 80100ba:	f000 fabd 	bl	8010638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	69da      	ldr	r2, [r3, #28]
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f042 0208 	orr.w	r2, r2, #8
 80100cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	69da      	ldr	r2, [r3, #28]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f022 0204 	bic.w	r2, r2, #4
 80100dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	69d9      	ldr	r1, [r3, #28]
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	691a      	ldr	r2, [r3, #16]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	430a      	orrs	r2, r1
 80100ee:	61da      	str	r2, [r3, #28]
      break;
 80100f0:	e023      	b.n	801013a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	68b9      	ldr	r1, [r7, #8]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f000 fb11 	bl	8010720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	69da      	ldr	r2, [r3, #28]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801010c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	69da      	ldr	r2, [r3, #28]
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801011c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	69d9      	ldr	r1, [r3, #28]
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	021a      	lsls	r2, r3, #8
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	430a      	orrs	r2, r1
 8010130:	61da      	str	r2, [r3, #28]
      break;
 8010132:	e002      	b.n	801013a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010134:	2301      	movs	r3, #1
 8010136:	75fb      	strb	r3, [r7, #23]
      break;
 8010138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2200      	movs	r2, #0
 801013e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010142:	7dfb      	ldrb	r3, [r7, #23]
}
 8010144:	4618      	mov	r0, r3
 8010146:	3718      	adds	r7, #24
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010156:	2300      	movs	r3, #0
 8010158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010160:	2b01      	cmp	r3, #1
 8010162:	d101      	bne.n	8010168 <HAL_TIM_ConfigClockSource+0x1c>
 8010164:	2302      	movs	r3, #2
 8010166:	e0b4      	b.n	80102d2 <HAL_TIM_ConfigClockSource+0x186>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2201      	movs	r2, #1
 801016c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2202      	movs	r2, #2
 8010174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	689b      	ldr	r3, [r3, #8]
 801017e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801018e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80101a0:	d03e      	beq.n	8010220 <HAL_TIM_ConfigClockSource+0xd4>
 80101a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80101a6:	f200 8087 	bhi.w	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
 80101aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80101ae:	f000 8086 	beq.w	80102be <HAL_TIM_ConfigClockSource+0x172>
 80101b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80101b6:	d87f      	bhi.n	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
 80101b8:	2b70      	cmp	r3, #112	@ 0x70
 80101ba:	d01a      	beq.n	80101f2 <HAL_TIM_ConfigClockSource+0xa6>
 80101bc:	2b70      	cmp	r3, #112	@ 0x70
 80101be:	d87b      	bhi.n	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
 80101c0:	2b60      	cmp	r3, #96	@ 0x60
 80101c2:	d050      	beq.n	8010266 <HAL_TIM_ConfigClockSource+0x11a>
 80101c4:	2b60      	cmp	r3, #96	@ 0x60
 80101c6:	d877      	bhi.n	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
 80101c8:	2b50      	cmp	r3, #80	@ 0x50
 80101ca:	d03c      	beq.n	8010246 <HAL_TIM_ConfigClockSource+0xfa>
 80101cc:	2b50      	cmp	r3, #80	@ 0x50
 80101ce:	d873      	bhi.n	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
 80101d0:	2b40      	cmp	r3, #64	@ 0x40
 80101d2:	d058      	beq.n	8010286 <HAL_TIM_ConfigClockSource+0x13a>
 80101d4:	2b40      	cmp	r3, #64	@ 0x40
 80101d6:	d86f      	bhi.n	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
 80101d8:	2b30      	cmp	r3, #48	@ 0x30
 80101da:	d064      	beq.n	80102a6 <HAL_TIM_ConfigClockSource+0x15a>
 80101dc:	2b30      	cmp	r3, #48	@ 0x30
 80101de:	d86b      	bhi.n	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
 80101e0:	2b20      	cmp	r3, #32
 80101e2:	d060      	beq.n	80102a6 <HAL_TIM_ConfigClockSource+0x15a>
 80101e4:	2b20      	cmp	r3, #32
 80101e6:	d867      	bhi.n	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d05c      	beq.n	80102a6 <HAL_TIM_ConfigClockSource+0x15a>
 80101ec:	2b10      	cmp	r3, #16
 80101ee:	d05a      	beq.n	80102a6 <HAL_TIM_ConfigClockSource+0x15a>
 80101f0:	e062      	b.n	80102b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6818      	ldr	r0, [r3, #0]
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	6899      	ldr	r1, [r3, #8]
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	685a      	ldr	r2, [r3, #4]
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	f000 fb5d 	bl	80108c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	689b      	ldr	r3, [r3, #8]
 801020c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	609a      	str	r2, [r3, #8]
      break;
 801021e:	e04f      	b.n	80102c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6818      	ldr	r0, [r3, #0]
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	6899      	ldr	r1, [r3, #8]
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	685a      	ldr	r2, [r3, #4]
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	f000 fb46 	bl	80108c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	689a      	ldr	r2, [r3, #8]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010242:	609a      	str	r2, [r3, #8]
      break;
 8010244:	e03c      	b.n	80102c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6818      	ldr	r0, [r3, #0]
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	6859      	ldr	r1, [r3, #4]
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	461a      	mov	r2, r3
 8010254:	f000 faba 	bl	80107cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2150      	movs	r1, #80	@ 0x50
 801025e:	4618      	mov	r0, r3
 8010260:	f000 fb13 	bl	801088a <TIM_ITRx_SetConfig>
      break;
 8010264:	e02c      	b.n	80102c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6818      	ldr	r0, [r3, #0]
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	6859      	ldr	r1, [r3, #4]
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	461a      	mov	r2, r3
 8010274:	f000 fad9 	bl	801082a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2160      	movs	r1, #96	@ 0x60
 801027e:	4618      	mov	r0, r3
 8010280:	f000 fb03 	bl	801088a <TIM_ITRx_SetConfig>
      break;
 8010284:	e01c      	b.n	80102c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6818      	ldr	r0, [r3, #0]
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	6859      	ldr	r1, [r3, #4]
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	461a      	mov	r2, r3
 8010294:	f000 fa9a 	bl	80107cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2140      	movs	r1, #64	@ 0x40
 801029e:	4618      	mov	r0, r3
 80102a0:	f000 faf3 	bl	801088a <TIM_ITRx_SetConfig>
      break;
 80102a4:	e00c      	b.n	80102c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4619      	mov	r1, r3
 80102b0:	4610      	mov	r0, r2
 80102b2:	f000 faea 	bl	801088a <TIM_ITRx_SetConfig>
      break;
 80102b6:	e003      	b.n	80102c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80102b8:	2301      	movs	r3, #1
 80102ba:	73fb      	strb	r3, [r7, #15]
      break;
 80102bc:	e000      	b.n	80102c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80102be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2201      	movs	r2, #1
 80102c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2200      	movs	r2, #0
 80102cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80102d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80102da:	b480      	push	{r7}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80102e2:	bf00      	nop
 80102e4:	370c      	adds	r7, #12
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80102ee:	b480      	push	{r7}
 80102f0:	b083      	sub	sp, #12
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80102f6:	bf00      	nop
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010302:	b480      	push	{r7}
 8010304:	b083      	sub	sp, #12
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801030a:	bf00      	nop
 801030c:	370c      	adds	r7, #12
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr

08010316 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010316:	b480      	push	{r7}
 8010318:	b083      	sub	sp, #12
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801031e:	bf00      	nop
 8010320:	370c      	adds	r7, #12
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr
	...

0801032c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801032c:	b480      	push	{r7}
 801032e:	b085      	sub	sp, #20
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	4a40      	ldr	r2, [pc, #256]	@ (8010440 <TIM_Base_SetConfig+0x114>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d013      	beq.n	801036c <TIM_Base_SetConfig+0x40>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801034a:	d00f      	beq.n	801036c <TIM_Base_SetConfig+0x40>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a3d      	ldr	r2, [pc, #244]	@ (8010444 <TIM_Base_SetConfig+0x118>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d00b      	beq.n	801036c <TIM_Base_SetConfig+0x40>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4a3c      	ldr	r2, [pc, #240]	@ (8010448 <TIM_Base_SetConfig+0x11c>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d007      	beq.n	801036c <TIM_Base_SetConfig+0x40>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a3b      	ldr	r2, [pc, #236]	@ (801044c <TIM_Base_SetConfig+0x120>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d003      	beq.n	801036c <TIM_Base_SetConfig+0x40>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4a3a      	ldr	r2, [pc, #232]	@ (8010450 <TIM_Base_SetConfig+0x124>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d108      	bne.n	801037e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	4313      	orrs	r3, r2
 801037c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4a2f      	ldr	r2, [pc, #188]	@ (8010440 <TIM_Base_SetConfig+0x114>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d02b      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801038c:	d027      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	4a2c      	ldr	r2, [pc, #176]	@ (8010444 <TIM_Base_SetConfig+0x118>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d023      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4a2b      	ldr	r2, [pc, #172]	@ (8010448 <TIM_Base_SetConfig+0x11c>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d01f      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4a2a      	ldr	r2, [pc, #168]	@ (801044c <TIM_Base_SetConfig+0x120>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d01b      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4a29      	ldr	r2, [pc, #164]	@ (8010450 <TIM_Base_SetConfig+0x124>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d017      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4a28      	ldr	r2, [pc, #160]	@ (8010454 <TIM_Base_SetConfig+0x128>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d013      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4a27      	ldr	r2, [pc, #156]	@ (8010458 <TIM_Base_SetConfig+0x12c>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d00f      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a26      	ldr	r2, [pc, #152]	@ (801045c <TIM_Base_SetConfig+0x130>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d00b      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4a25      	ldr	r2, [pc, #148]	@ (8010460 <TIM_Base_SetConfig+0x134>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d007      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4a24      	ldr	r2, [pc, #144]	@ (8010464 <TIM_Base_SetConfig+0x138>)
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d003      	beq.n	80103de <TIM_Base_SetConfig+0xb2>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4a23      	ldr	r2, [pc, #140]	@ (8010468 <TIM_Base_SetConfig+0x13c>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d108      	bne.n	80103f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80103e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	4313      	orrs	r3, r2
 80103ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	695b      	ldr	r3, [r3, #20]
 80103fa:	4313      	orrs	r3, r2
 80103fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	68fa      	ldr	r2, [r7, #12]
 8010402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	689a      	ldr	r2, [r3, #8]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4a0a      	ldr	r2, [pc, #40]	@ (8010440 <TIM_Base_SetConfig+0x114>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d003      	beq.n	8010424 <TIM_Base_SetConfig+0xf8>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4a0c      	ldr	r2, [pc, #48]	@ (8010450 <TIM_Base_SetConfig+0x124>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d103      	bne.n	801042c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	691a      	ldr	r2, [r3, #16]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2201      	movs	r2, #1
 8010430:	615a      	str	r2, [r3, #20]
}
 8010432:	bf00      	nop
 8010434:	3714      	adds	r7, #20
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop
 8010440:	40010000 	.word	0x40010000
 8010444:	40000400 	.word	0x40000400
 8010448:	40000800 	.word	0x40000800
 801044c:	40000c00 	.word	0x40000c00
 8010450:	40010400 	.word	0x40010400
 8010454:	40014000 	.word	0x40014000
 8010458:	40014400 	.word	0x40014400
 801045c:	40014800 	.word	0x40014800
 8010460:	40001800 	.word	0x40001800
 8010464:	40001c00 	.word	0x40001c00
 8010468:	40002000 	.word	0x40002000

0801046c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801046c:	b480      	push	{r7}
 801046e:	b087      	sub	sp, #28
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6a1b      	ldr	r3, [r3, #32]
 801047a:	f023 0201 	bic.w	r2, r3, #1
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a1b      	ldr	r3, [r3, #32]
 8010486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801049a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f023 0303 	bic.w	r3, r3, #3
 80104a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	4313      	orrs	r3, r2
 80104ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	f023 0302 	bic.w	r3, r3, #2
 80104b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	689b      	ldr	r3, [r3, #8]
 80104ba:	697a      	ldr	r2, [r7, #20]
 80104bc:	4313      	orrs	r3, r2
 80104be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4a20      	ldr	r2, [pc, #128]	@ (8010544 <TIM_OC1_SetConfig+0xd8>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d003      	beq.n	80104d0 <TIM_OC1_SetConfig+0x64>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4a1f      	ldr	r2, [pc, #124]	@ (8010548 <TIM_OC1_SetConfig+0xdc>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d10c      	bne.n	80104ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	f023 0308 	bic.w	r3, r3, #8
 80104d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	697a      	ldr	r2, [r7, #20]
 80104de:	4313      	orrs	r3, r2
 80104e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	f023 0304 	bic.w	r3, r3, #4
 80104e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a15      	ldr	r2, [pc, #84]	@ (8010544 <TIM_OC1_SetConfig+0xd8>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d003      	beq.n	80104fa <TIM_OC1_SetConfig+0x8e>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a14      	ldr	r2, [pc, #80]	@ (8010548 <TIM_OC1_SetConfig+0xdc>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d111      	bne.n	801051e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	693a      	ldr	r2, [r7, #16]
 8010510:	4313      	orrs	r3, r2
 8010512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	699b      	ldr	r3, [r3, #24]
 8010518:	693a      	ldr	r2, [r7, #16]
 801051a:	4313      	orrs	r3, r2
 801051c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	68fa      	ldr	r2, [r7, #12]
 8010528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	685a      	ldr	r2, [r3, #4]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	697a      	ldr	r2, [r7, #20]
 8010536:	621a      	str	r2, [r3, #32]
}
 8010538:	bf00      	nop
 801053a:	371c      	adds	r7, #28
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr
 8010544:	40010000 	.word	0x40010000
 8010548:	40010400 	.word	0x40010400

0801054c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801054c:	b480      	push	{r7}
 801054e:	b087      	sub	sp, #28
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6a1b      	ldr	r3, [r3, #32]
 801055a:	f023 0210 	bic.w	r2, r3, #16
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6a1b      	ldr	r3, [r3, #32]
 8010566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	699b      	ldr	r3, [r3, #24]
 8010572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801057a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	021b      	lsls	r3, r3, #8
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	4313      	orrs	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	f023 0320 	bic.w	r3, r3, #32
 8010596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	011b      	lsls	r3, r3, #4
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4a22      	ldr	r2, [pc, #136]	@ (8010630 <TIM_OC2_SetConfig+0xe4>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d003      	beq.n	80105b4 <TIM_OC2_SetConfig+0x68>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4a21      	ldr	r2, [pc, #132]	@ (8010634 <TIM_OC2_SetConfig+0xe8>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d10d      	bne.n	80105d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80105ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	011b      	lsls	r3, r3, #4
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4a17      	ldr	r2, [pc, #92]	@ (8010630 <TIM_OC2_SetConfig+0xe4>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d003      	beq.n	80105e0 <TIM_OC2_SetConfig+0x94>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4a16      	ldr	r2, [pc, #88]	@ (8010634 <TIM_OC2_SetConfig+0xe8>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d113      	bne.n	8010608 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80105e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80105ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	693a      	ldr	r2, [r7, #16]
 80105f8:	4313      	orrs	r3, r2
 80105fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	693a      	ldr	r2, [r7, #16]
 8010604:	4313      	orrs	r3, r2
 8010606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	693a      	ldr	r2, [r7, #16]
 801060c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	685a      	ldr	r2, [r3, #4]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	697a      	ldr	r2, [r7, #20]
 8010620:	621a      	str	r2, [r3, #32]
}
 8010622:	bf00      	nop
 8010624:	371c      	adds	r7, #28
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr
 801062e:	bf00      	nop
 8010630:	40010000 	.word	0x40010000
 8010634:	40010400 	.word	0x40010400

08010638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010638:	b480      	push	{r7}
 801063a:	b087      	sub	sp, #28
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6a1b      	ldr	r3, [r3, #32]
 8010652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	69db      	ldr	r3, [r3, #28]
 801065e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f023 0303 	bic.w	r3, r3, #3
 801066e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	68fa      	ldr	r2, [r7, #12]
 8010676:	4313      	orrs	r3, r2
 8010678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	021b      	lsls	r3, r3, #8
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	4313      	orrs	r3, r2
 801068c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a21      	ldr	r2, [pc, #132]	@ (8010718 <TIM_OC3_SetConfig+0xe0>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d003      	beq.n	801069e <TIM_OC3_SetConfig+0x66>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a20      	ldr	r2, [pc, #128]	@ (801071c <TIM_OC3_SetConfig+0xe4>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d10d      	bne.n	80106ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80106a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	021b      	lsls	r3, r3, #8
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80106b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4a16      	ldr	r2, [pc, #88]	@ (8010718 <TIM_OC3_SetConfig+0xe0>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d003      	beq.n	80106ca <TIM_OC3_SetConfig+0x92>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a15      	ldr	r2, [pc, #84]	@ (801071c <TIM_OC3_SetConfig+0xe4>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d113      	bne.n	80106f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80106d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	695b      	ldr	r3, [r3, #20]
 80106de:	011b      	lsls	r3, r3, #4
 80106e0:	693a      	ldr	r2, [r7, #16]
 80106e2:	4313      	orrs	r3, r2
 80106e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	699b      	ldr	r3, [r3, #24]
 80106ea:	011b      	lsls	r3, r3, #4
 80106ec:	693a      	ldr	r2, [r7, #16]
 80106ee:	4313      	orrs	r3, r2
 80106f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	693a      	ldr	r2, [r7, #16]
 80106f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	68fa      	ldr	r2, [r7, #12]
 80106fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	685a      	ldr	r2, [r3, #4]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	697a      	ldr	r2, [r7, #20]
 801070a:	621a      	str	r2, [r3, #32]
}
 801070c:	bf00      	nop
 801070e:	371c      	adds	r7, #28
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr
 8010718:	40010000 	.word	0x40010000
 801071c:	40010400 	.word	0x40010400

08010720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010720:	b480      	push	{r7}
 8010722:	b087      	sub	sp, #28
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6a1b      	ldr	r3, [r3, #32]
 801073a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	69db      	ldr	r3, [r3, #28]
 8010746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801074e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	021b      	lsls	r3, r3, #8
 801075e:	68fa      	ldr	r2, [r7, #12]
 8010760:	4313      	orrs	r3, r2
 8010762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801076a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	031b      	lsls	r3, r3, #12
 8010772:	693a      	ldr	r2, [r7, #16]
 8010774:	4313      	orrs	r3, r2
 8010776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4a12      	ldr	r2, [pc, #72]	@ (80107c4 <TIM_OC4_SetConfig+0xa4>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d003      	beq.n	8010788 <TIM_OC4_SetConfig+0x68>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	4a11      	ldr	r2, [pc, #68]	@ (80107c8 <TIM_OC4_SetConfig+0xa8>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d109      	bne.n	801079c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801078e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	695b      	ldr	r3, [r3, #20]
 8010794:	019b      	lsls	r3, r3, #6
 8010796:	697a      	ldr	r2, [r7, #20]
 8010798:	4313      	orrs	r3, r2
 801079a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	697a      	ldr	r2, [r7, #20]
 80107a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	68fa      	ldr	r2, [r7, #12]
 80107a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	685a      	ldr	r2, [r3, #4]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	693a      	ldr	r2, [r7, #16]
 80107b4:	621a      	str	r2, [r3, #32]
}
 80107b6:	bf00      	nop
 80107b8:	371c      	adds	r7, #28
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	40010000 	.word	0x40010000
 80107c8:	40010400 	.word	0x40010400

080107cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b087      	sub	sp, #28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	6a1b      	ldr	r3, [r3, #32]
 80107dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6a1b      	ldr	r3, [r3, #32]
 80107e2:	f023 0201 	bic.w	r2, r3, #1
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	699b      	ldr	r3, [r3, #24]
 80107ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80107f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	011b      	lsls	r3, r3, #4
 80107fc:	693a      	ldr	r2, [r7, #16]
 80107fe:	4313      	orrs	r3, r2
 8010800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	f023 030a 	bic.w	r3, r3, #10
 8010808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801080a:	697a      	ldr	r2, [r7, #20]
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	4313      	orrs	r3, r2
 8010810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	693a      	ldr	r2, [r7, #16]
 8010816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	697a      	ldr	r2, [r7, #20]
 801081c:	621a      	str	r2, [r3, #32]
}
 801081e:	bf00      	nop
 8010820:	371c      	adds	r7, #28
 8010822:	46bd      	mov	sp, r7
 8010824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010828:	4770      	bx	lr

0801082a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801082a:	b480      	push	{r7}
 801082c:	b087      	sub	sp, #28
 801082e:	af00      	add	r7, sp, #0
 8010830:	60f8      	str	r0, [r7, #12]
 8010832:	60b9      	str	r1, [r7, #8]
 8010834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6a1b      	ldr	r3, [r3, #32]
 801083a:	f023 0210 	bic.w	r2, r3, #16
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	699b      	ldr	r3, [r3, #24]
 8010846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	6a1b      	ldr	r3, [r3, #32]
 801084c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	031b      	lsls	r3, r3, #12
 801085a:	697a      	ldr	r2, [r7, #20]
 801085c:	4313      	orrs	r3, r2
 801085e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	011b      	lsls	r3, r3, #4
 801086c:	693a      	ldr	r2, [r7, #16]
 801086e:	4313      	orrs	r3, r2
 8010870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	697a      	ldr	r2, [r7, #20]
 8010876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	693a      	ldr	r2, [r7, #16]
 801087c:	621a      	str	r2, [r3, #32]
}
 801087e:	bf00      	nop
 8010880:	371c      	adds	r7, #28
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr

0801088a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801088a:	b480      	push	{r7}
 801088c:	b085      	sub	sp, #20
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
 8010892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	4313      	orrs	r3, r2
 80108a8:	f043 0307 	orr.w	r3, r3, #7
 80108ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	68fa      	ldr	r2, [r7, #12]
 80108b2:	609a      	str	r2, [r3, #8]
}
 80108b4:	bf00      	nop
 80108b6:	3714      	adds	r7, #20
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr

080108c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b087      	sub	sp, #28
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80108da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	021a      	lsls	r2, r3, #8
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	431a      	orrs	r2, r3
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	4313      	orrs	r3, r2
 80108e8:	697a      	ldr	r2, [r7, #20]
 80108ea:	4313      	orrs	r3, r2
 80108ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	697a      	ldr	r2, [r7, #20]
 80108f2:	609a      	str	r2, [r3, #8]
}
 80108f4:	bf00      	nop
 80108f6:	371c      	adds	r7, #28
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010900:	b480      	push	{r7}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010910:	2b01      	cmp	r3, #1
 8010912:	d101      	bne.n	8010918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010914:	2302      	movs	r3, #2
 8010916:	e05a      	b.n	80109ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2201      	movs	r2, #1
 801091c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2202      	movs	r2, #2
 8010924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801093e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	68fa      	ldr	r2, [r7, #12]
 8010946:	4313      	orrs	r3, r2
 8010948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4a21      	ldr	r2, [pc, #132]	@ (80109dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d022      	beq.n	80109a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010964:	d01d      	beq.n	80109a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4a1d      	ldr	r2, [pc, #116]	@ (80109e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d018      	beq.n	80109a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4a1b      	ldr	r2, [pc, #108]	@ (80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010976:	4293      	cmp	r3, r2
 8010978:	d013      	beq.n	80109a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4a1a      	ldr	r2, [pc, #104]	@ (80109e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d00e      	beq.n	80109a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	4a18      	ldr	r2, [pc, #96]	@ (80109ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801098a:	4293      	cmp	r3, r2
 801098c:	d009      	beq.n	80109a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	4a17      	ldr	r2, [pc, #92]	@ (80109f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d004      	beq.n	80109a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a15      	ldr	r2, [pc, #84]	@ (80109f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d10c      	bne.n	80109bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80109a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	4313      	orrs	r3, r2
 80109b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2201      	movs	r2, #1
 80109c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3714      	adds	r7, #20
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	40010000 	.word	0x40010000
 80109e0:	40000400 	.word	0x40000400
 80109e4:	40000800 	.word	0x40000800
 80109e8:	40000c00 	.word	0x40000c00
 80109ec:	40010400 	.word	0x40010400
 80109f0:	40014000 	.word	0x40014000
 80109f4:	40001800 	.word	0x40001800

080109f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010a02:	2300      	movs	r3, #0
 8010a04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d101      	bne.n	8010a14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010a10:	2302      	movs	r3, #2
 8010a12:	e03d      	b.n	8010a90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2201      	movs	r2, #1
 8010a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	4313      	orrs	r3, r2
 8010a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	4313      	orrs	r3, r2
 8010a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	4313      	orrs	r3, r2
 8010a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4313      	orrs	r3, r2
 8010a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	691b      	ldr	r3, [r3, #16]
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	695b      	ldr	r3, [r3, #20]
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	69db      	ldr	r3, [r3, #28]
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3714      	adds	r7, #20
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010aa4:	bf00      	nop
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010ab8:	bf00      	nop
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d101      	bne.n	8010ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e03f      	b.n	8010b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f7fc fd4a 	bl	800d584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2224      	movs	r2, #36	@ 0x24
 8010af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	68da      	ldr	r2, [r3, #12]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 fdd5 	bl	80116b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	691a      	ldr	r2, [r3, #16]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	695a      	ldr	r2, [r3, #20]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	68da      	ldr	r2, [r3, #12]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2220      	movs	r2, #32
 8010b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2220      	movs	r2, #32
 8010b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b08a      	sub	sp, #40	@ 0x28
 8010b62:	af02      	add	r7, sp, #8
 8010b64:	60f8      	str	r0, [r7, #12]
 8010b66:	60b9      	str	r1, [r7, #8]
 8010b68:	603b      	str	r3, [r7, #0]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	2b20      	cmp	r3, #32
 8010b7c:	d17c      	bne.n	8010c78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <HAL_UART_Transmit+0x2c>
 8010b84:	88fb      	ldrh	r3, [r7, #6]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d101      	bne.n	8010b8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e075      	b.n	8010c7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	d101      	bne.n	8010b9c <HAL_UART_Transmit+0x3e>
 8010b98:	2302      	movs	r3, #2
 8010b9a:	e06e      	b.n	8010c7a <HAL_UART_Transmit+0x11c>
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2221      	movs	r2, #33	@ 0x21
 8010bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010bb2:	f7fc ff65 	bl	800da80 <HAL_GetTick>
 8010bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	88fa      	ldrh	r2, [r7, #6]
 8010bbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	88fa      	ldrh	r2, [r7, #6]
 8010bc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010bcc:	d108      	bne.n	8010be0 <HAL_UART_Transmit+0x82>
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	691b      	ldr	r3, [r3, #16]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d104      	bne.n	8010be0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	61bb      	str	r3, [r7, #24]
 8010bde:	e003      	b.n	8010be8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010be4:	2300      	movs	r3, #0
 8010be6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2200      	movs	r2, #0
 8010bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8010bf0:	e02a      	b.n	8010c48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	9300      	str	r3, [sp, #0]
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	2180      	movs	r1, #128	@ 0x80
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f000 fb15 	bl	801122c <UART_WaitOnFlagUntilTimeout>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d001      	beq.n	8010c0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010c08:	2303      	movs	r3, #3
 8010c0a:	e036      	b.n	8010c7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d10b      	bne.n	8010c2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	881b      	ldrh	r3, [r3, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	3302      	adds	r3, #2
 8010c26:	61bb      	str	r3, [r7, #24]
 8010c28:	e007      	b.n	8010c3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	781a      	ldrb	r2, [r3, #0]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	3301      	adds	r3, #1
 8010c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	3b01      	subs	r3, #1
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1cf      	bne.n	8010bf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	9300      	str	r3, [sp, #0]
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	2140      	movs	r1, #64	@ 0x40
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f000 fae5 	bl	801122c <UART_WaitOnFlagUntilTimeout>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d001      	beq.n	8010c6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010c68:	2303      	movs	r3, #3
 8010c6a:	e006      	b.n	8010c7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2220      	movs	r2, #32
 8010c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8010c74:	2300      	movs	r3, #0
 8010c76:	e000      	b.n	8010c7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010c78:	2302      	movs	r3, #2
  }
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3720      	adds	r7, #32
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b084      	sub	sp, #16
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	60f8      	str	r0, [r7, #12]
 8010c8a:	60b9      	str	r1, [r7, #8]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	2b20      	cmp	r3, #32
 8010c9a:	d11d      	bne.n	8010cd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d002      	beq.n	8010ca8 <HAL_UART_Receive_IT+0x26>
 8010ca2:	88fb      	ldrh	r3, [r7, #6]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d101      	bne.n	8010cac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	e016      	b.n	8010cda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d101      	bne.n	8010cba <HAL_UART_Receive_IT+0x38>
 8010cb6:	2302      	movs	r3, #2
 8010cb8:	e00f      	b.n	8010cda <HAL_UART_Receive_IT+0x58>
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010cc8:	88fb      	ldrh	r3, [r7, #6]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	68b9      	ldr	r1, [r7, #8]
 8010cce:	68f8      	ldr	r0, [r7, #12]
 8010cd0:	f000 fb1a 	bl	8011308 <UART_Start_Receive_IT>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	e000      	b.n	8010cda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010cd8:	2302      	movs	r3, #2
  }
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
	...

08010ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8010d10:	2300      	movs	r3, #0
 8010d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d1a:	f003 030f 	and.w	r3, r3, #15
 8010d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8010d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d10f      	bne.n	8010d4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d2e:	f003 0320 	and.w	r3, r3, #32
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d009      	beq.n	8010d4a <HAL_UART_IRQHandler+0x66>
 8010d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d3a:	f003 0320 	and.w	r3, r3, #32
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d003      	beq.n	8010d4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 fbfd 	bl	8011542 <UART_Receive_IT>
      return;
 8010d48:	e256      	b.n	80111f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	f000 80de 	beq.w	8010f10 <HAL_UART_IRQHandler+0x22c>
 8010d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d58:	f003 0301 	and.w	r3, r3, #1
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d106      	bne.n	8010d6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 80d1 	beq.w	8010f10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d72:	f003 0301 	and.w	r3, r3, #1
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00b      	beq.n	8010d92 <HAL_UART_IRQHandler+0xae>
 8010d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d005      	beq.n	8010d92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d8a:	f043 0201 	orr.w	r2, r3, #1
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d96:	f003 0304 	and.w	r3, r3, #4
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00b      	beq.n	8010db6 <HAL_UART_IRQHandler+0xd2>
 8010d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d005      	beq.n	8010db6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dae:	f043 0202 	orr.w	r2, r3, #2
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010dba:	f003 0302 	and.w	r3, r3, #2
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00b      	beq.n	8010dda <HAL_UART_IRQHandler+0xf6>
 8010dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d005      	beq.n	8010dda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dd2:	f043 0204 	orr.w	r2, r3, #4
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010dde:	f003 0308 	and.w	r3, r3, #8
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d011      	beq.n	8010e0a <HAL_UART_IRQHandler+0x126>
 8010de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010dea:	f003 0320 	and.w	r3, r3, #32
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d105      	bne.n	8010dfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010df6:	f003 0301 	and.w	r3, r3, #1
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d005      	beq.n	8010e0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e02:	f043 0208 	orr.w	r2, r3, #8
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f000 81ed 	beq.w	80111ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e18:	f003 0320 	and.w	r3, r3, #32
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d008      	beq.n	8010e32 <HAL_UART_IRQHandler+0x14e>
 8010e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e24:	f003 0320 	and.w	r3, r3, #32
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fb88 	bl	8011542 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	695b      	ldr	r3, [r3, #20]
 8010e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e3c:	2b40      	cmp	r3, #64	@ 0x40
 8010e3e:	bf0c      	ite	eq
 8010e40:	2301      	moveq	r3, #1
 8010e42:	2300      	movne	r3, #0
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e4e:	f003 0308 	and.w	r3, r3, #8
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d103      	bne.n	8010e5e <HAL_UART_IRQHandler+0x17a>
 8010e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d04f      	beq.n	8010efe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f000 fa90 	bl	8011384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	695b      	ldr	r3, [r3, #20]
 8010e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e6e:	2b40      	cmp	r3, #64	@ 0x40
 8010e70:	d141      	bne.n	8010ef6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	3314      	adds	r3, #20
 8010e78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e80:	e853 3f00 	ldrex	r3, [r3]
 8010e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	3314      	adds	r3, #20
 8010e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010eae:	e841 2300 	strex	r3, r2, [r1]
 8010eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1d9      	bne.n	8010e72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d013      	beq.n	8010eee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eca:	4a7d      	ldr	r2, [pc, #500]	@ (80110c0 <HAL_UART_IRQHandler+0x3dc>)
 8010ecc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fc ff85 	bl	800dde2 <HAL_DMA_Abort_IT>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d016      	beq.n	8010f0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010ee8:	4610      	mov	r0, r2
 8010eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010eec:	e00e      	b.n	8010f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f000 f986 	bl	8011200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ef4:	e00a      	b.n	8010f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 f982 	bl	8011200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010efc:	e006      	b.n	8010f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f97e 	bl	8011200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8010f0a:	e170      	b.n	80111ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f0c:	bf00      	nop
    return;
 8010f0e:	e16e      	b.n	80111ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	f040 814a 	bne.w	80111ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f1e:	f003 0310 	and.w	r3, r3, #16
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f000 8143 	beq.w	80111ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f2c:	f003 0310 	and.w	r3, r3, #16
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 813c 	beq.w	80111ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010f36:	2300      	movs	r3, #0
 8010f38:	60bb      	str	r3, [r7, #8]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	60bb      	str	r3, [r7, #8]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	60bb      	str	r3, [r7, #8]
 8010f4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	695b      	ldr	r3, [r3, #20]
 8010f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f56:	2b40      	cmp	r3, #64	@ 0x40
 8010f58:	f040 80b4 	bne.w	80110c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 8140 	beq.w	80111f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	f080 8139 	bcs.w	80111f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f8c:	69db      	ldr	r3, [r3, #28]
 8010f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f92:	f000 8088 	beq.w	80110a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	330c      	adds	r3, #12
 8010f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010fa4:	e853 3f00 	ldrex	r3, [r3]
 8010fa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	330c      	adds	r3, #12
 8010fbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010fc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010fce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010fd2:	e841 2300 	strex	r3, r2, [r1]
 8010fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1d9      	bne.n	8010f96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	3314      	adds	r3, #20
 8010fe8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010fec:	e853 3f00 	ldrex	r3, [r3]
 8010ff0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ff4:	f023 0301 	bic.w	r3, r3, #1
 8010ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	3314      	adds	r3, #20
 8011002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011006:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801100a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801100c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801100e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011012:	e841 2300 	strex	r3, r2, [r1]
 8011016:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801101a:	2b00      	cmp	r3, #0
 801101c:	d1e1      	bne.n	8010fe2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	3314      	adds	r3, #20
 8011024:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011028:	e853 3f00 	ldrex	r3, [r3]
 801102c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801102e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	3314      	adds	r3, #20
 801103e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011042:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011044:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011046:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011048:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801104a:	e841 2300 	strex	r3, r2, [r1]
 801104e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1e3      	bne.n	801101e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2220      	movs	r2, #32
 801105a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	330c      	adds	r3, #12
 801106a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801106c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801106e:	e853 3f00 	ldrex	r3, [r3]
 8011072:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011076:	f023 0310 	bic.w	r3, r3, #16
 801107a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	330c      	adds	r3, #12
 8011084:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8011088:	65ba      	str	r2, [r7, #88]	@ 0x58
 801108a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801108c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801108e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011090:	e841 2300 	strex	r3, r2, [r1]
 8011094:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1e3      	bne.n	8011064 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fc fe2e 	bl	800dd02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	1ad3      	subs	r3, r2, r3
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	4619      	mov	r1, r3
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 f8ac 	bl	8011214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80110bc:	e099      	b.n	80111f2 <HAL_UART_IRQHandler+0x50e>
 80110be:	bf00      	nop
 80110c0:	0801144b 	.word	0x0801144b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	1ad3      	subs	r3, r2, r3
 80110d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80110d8:	b29b      	uxth	r3, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	f000 808b 	beq.w	80111f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80110e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f000 8086 	beq.w	80111f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	330c      	adds	r3, #12
 80110f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f4:	e853 3f00 	ldrex	r3, [r3]
 80110f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80110fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011100:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	330c      	adds	r3, #12
 801110a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801110e:	647a      	str	r2, [r7, #68]	@ 0x44
 8011110:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011112:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011116:	e841 2300 	strex	r3, r2, [r1]
 801111a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801111c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801111e:	2b00      	cmp	r3, #0
 8011120:	d1e3      	bne.n	80110ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	3314      	adds	r3, #20
 8011128:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112c:	e853 3f00 	ldrex	r3, [r3]
 8011130:	623b      	str	r3, [r7, #32]
   return(result);
 8011132:	6a3b      	ldr	r3, [r7, #32]
 8011134:	f023 0301 	bic.w	r3, r3, #1
 8011138:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3314      	adds	r3, #20
 8011142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011146:	633a      	str	r2, [r7, #48]	@ 0x30
 8011148:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801114a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801114c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801114e:	e841 2300 	strex	r3, r2, [r1]
 8011152:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011156:	2b00      	cmp	r3, #0
 8011158:	d1e3      	bne.n	8011122 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2220      	movs	r2, #32
 801115e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	330c      	adds	r3, #12
 801116e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	e853 3f00 	ldrex	r3, [r3]
 8011176:	60fb      	str	r3, [r7, #12]
   return(result);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f023 0310 	bic.w	r3, r3, #16
 801117e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	330c      	adds	r3, #12
 8011188:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801118c:	61fa      	str	r2, [r7, #28]
 801118e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011190:	69b9      	ldr	r1, [r7, #24]
 8011192:	69fa      	ldr	r2, [r7, #28]
 8011194:	e841 2300 	strex	r3, r2, [r1]
 8011198:	617b      	str	r3, [r7, #20]
   return(result);
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1e3      	bne.n	8011168 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80111a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80111a4:	4619      	mov	r1, r3
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 f834 	bl	8011214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80111ac:	e023      	b.n	80111f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80111ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d009      	beq.n	80111ce <HAL_UART_IRQHandler+0x4ea>
 80111ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d003      	beq.n	80111ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f000 f953 	bl	8011472 <UART_Transmit_IT>
    return;
 80111cc:	e014      	b.n	80111f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80111ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00e      	beq.n	80111f8 <HAL_UART_IRQHandler+0x514>
 80111da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d008      	beq.n	80111f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 f993 	bl	8011512 <UART_EndTransmit_IT>
    return;
 80111ec:	e004      	b.n	80111f8 <HAL_UART_IRQHandler+0x514>
    return;
 80111ee:	bf00      	nop
 80111f0:	e002      	b.n	80111f8 <HAL_UART_IRQHandler+0x514>
      return;
 80111f2:	bf00      	nop
 80111f4:	e000      	b.n	80111f8 <HAL_UART_IRQHandler+0x514>
      return;
 80111f6:	bf00      	nop
  }
}
 80111f8:	37e8      	adds	r7, #232	@ 0xe8
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop

08011200 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011208:	bf00      	nop
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011214:	b480      	push	{r7}
 8011216:	b083      	sub	sp, #12
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	460b      	mov	r3, r1
 801121e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011220:	bf00      	nop
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b090      	sub	sp, #64	@ 0x40
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	603b      	str	r3, [r7, #0]
 8011238:	4613      	mov	r3, r2
 801123a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801123c:	e050      	b.n	80112e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801123e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011244:	d04c      	beq.n	80112e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011248:	2b00      	cmp	r3, #0
 801124a:	d007      	beq.n	801125c <UART_WaitOnFlagUntilTimeout+0x30>
 801124c:	f7fc fc18 	bl	800da80 <HAL_GetTick>
 8011250:	4602      	mov	r2, r0
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	1ad3      	subs	r3, r2, r3
 8011256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011258:	429a      	cmp	r2, r3
 801125a:	d241      	bcs.n	80112e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	330c      	adds	r3, #12
 8011262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011266:	e853 3f00 	ldrex	r3, [r3]
 801126a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801126e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	330c      	adds	r3, #12
 801127a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801127c:	637a      	str	r2, [r7, #52]	@ 0x34
 801127e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011280:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011284:	e841 2300 	strex	r3, r2, [r1]
 8011288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801128a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801128c:	2b00      	cmp	r3, #0
 801128e:	d1e5      	bne.n	801125c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	3314      	adds	r3, #20
 8011296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	e853 3f00 	ldrex	r3, [r3]
 801129e:	613b      	str	r3, [r7, #16]
   return(result);
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	f023 0301 	bic.w	r3, r3, #1
 80112a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	3314      	adds	r3, #20
 80112ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112b0:	623a      	str	r2, [r7, #32]
 80112b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112b4:	69f9      	ldr	r1, [r7, #28]
 80112b6:	6a3a      	ldr	r2, [r7, #32]
 80112b8:	e841 2300 	strex	r3, r2, [r1]
 80112bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d1e5      	bne.n	8011290 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2220      	movs	r2, #32
 80112c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2220      	movs	r2, #32
 80112d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2200      	movs	r2, #0
 80112d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80112dc:	2303      	movs	r3, #3
 80112de:	e00f      	b.n	8011300 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	4013      	ands	r3, r2
 80112ea:	68ba      	ldr	r2, [r7, #8]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	bf0c      	ite	eq
 80112f0:	2301      	moveq	r3, #1
 80112f2:	2300      	movne	r3, #0
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	461a      	mov	r2, r3
 80112f8:	79fb      	ldrb	r3, [r7, #7]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d09f      	beq.n	801123e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3740      	adds	r7, #64	@ 0x40
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011308:	b480      	push	{r7}
 801130a:	b085      	sub	sp, #20
 801130c:	af00      	add	r7, sp, #0
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	4613      	mov	r3, r2
 8011314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	68ba      	ldr	r2, [r7, #8]
 801131a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	88fa      	ldrh	r2, [r7, #6]
 8011320:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	88fa      	ldrh	r2, [r7, #6]
 8011326:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2200      	movs	r2, #0
 801132c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2222      	movs	r2, #34	@ 0x22
 8011332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2200      	movs	r2, #0
 801133a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d007      	beq.n	8011356 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	68da      	ldr	r2, [r3, #12]
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011354:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	695a      	ldr	r2, [r3, #20]
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f042 0201 	orr.w	r2, r2, #1
 8011364:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68da      	ldr	r2, [r3, #12]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f042 0220 	orr.w	r2, r2, #32
 8011374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011376:	2300      	movs	r3, #0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3714      	adds	r7, #20
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011384:	b480      	push	{r7}
 8011386:	b095      	sub	sp, #84	@ 0x54
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	330c      	adds	r3, #12
 8011392:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011396:	e853 3f00 	ldrex	r3, [r3]
 801139a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801139c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801139e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80113a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	330c      	adds	r3, #12
 80113aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80113ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80113ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80113b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80113b4:	e841 2300 	strex	r3, r2, [r1]
 80113b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80113ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d1e5      	bne.n	801138c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	3314      	adds	r3, #20
 80113c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	e853 3f00 	ldrex	r3, [r3]
 80113ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	f023 0301 	bic.w	r3, r3, #1
 80113d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	3314      	adds	r3, #20
 80113de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80113e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80113e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113e8:	e841 2300 	strex	r3, r2, [r1]
 80113ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80113ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d1e5      	bne.n	80113c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d119      	bne.n	8011430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	330c      	adds	r3, #12
 8011402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	e853 3f00 	ldrex	r3, [r3]
 801140a:	60bb      	str	r3, [r7, #8]
   return(result);
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	f023 0310 	bic.w	r3, r3, #16
 8011412:	647b      	str	r3, [r7, #68]	@ 0x44
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	330c      	adds	r3, #12
 801141a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801141c:	61ba      	str	r2, [r7, #24]
 801141e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011420:	6979      	ldr	r1, [r7, #20]
 8011422:	69ba      	ldr	r2, [r7, #24]
 8011424:	e841 2300 	strex	r3, r2, [r1]
 8011428:	613b      	str	r3, [r7, #16]
   return(result);
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d1e5      	bne.n	80113fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2220      	movs	r2, #32
 8011434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2200      	movs	r2, #0
 801143c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801143e:	bf00      	nop
 8011440:	3754      	adds	r7, #84	@ 0x54
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr

0801144a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b084      	sub	sp, #16
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2200      	movs	r2, #0
 801145c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2200      	movs	r2, #0
 8011462:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011464:	68f8      	ldr	r0, [r7, #12]
 8011466:	f7ff fecb 	bl	8011200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801146a:	bf00      	nop
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011472:	b480      	push	{r7}
 8011474:	b085      	sub	sp, #20
 8011476:	af00      	add	r7, sp, #0
 8011478:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b21      	cmp	r3, #33	@ 0x21
 8011484:	d13e      	bne.n	8011504 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801148e:	d114      	bne.n	80114ba <UART_Transmit_IT+0x48>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	691b      	ldr	r3, [r3, #16]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d110      	bne.n	80114ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6a1b      	ldr	r3, [r3, #32]
 801149c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	881b      	ldrh	r3, [r3, #0]
 80114a2:	461a      	mov	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80114ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6a1b      	ldr	r3, [r3, #32]
 80114b2:	1c9a      	adds	r2, r3, #2
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	621a      	str	r2, [r3, #32]
 80114b8:	e008      	b.n	80114cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6a1b      	ldr	r3, [r3, #32]
 80114be:	1c59      	adds	r1, r3, #1
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	6211      	str	r1, [r2, #32]
 80114c4:	781a      	ldrb	r2, [r3, #0]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	3b01      	subs	r3, #1
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	4619      	mov	r1, r3
 80114da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d10f      	bne.n	8011500 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	68da      	ldr	r2, [r3, #12]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80114ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	68da      	ldr	r2, [r3, #12]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80114fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011500:	2300      	movs	r3, #0
 8011502:	e000      	b.n	8011506 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011504:	2302      	movs	r3, #2
  }
}
 8011506:	4618      	mov	r0, r3
 8011508:	3714      	adds	r7, #20
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr

08011512 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011512:	b580      	push	{r7, lr}
 8011514:	b082      	sub	sp, #8
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	68da      	ldr	r2, [r3, #12]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011528:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2220      	movs	r2, #32
 801152e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f7fb fd72 	bl	800d01c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011538:	2300      	movs	r3, #0
}
 801153a:	4618      	mov	r0, r3
 801153c:	3708      	adds	r7, #8
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}

08011542 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011542:	b580      	push	{r7, lr}
 8011544:	b08c      	sub	sp, #48	@ 0x30
 8011546:	af00      	add	r7, sp, #0
 8011548:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011550:	b2db      	uxtb	r3, r3
 8011552:	2b22      	cmp	r3, #34	@ 0x22
 8011554:	f040 80ab 	bne.w	80116ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011560:	d117      	bne.n	8011592 <UART_Receive_IT+0x50>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	691b      	ldr	r3, [r3, #16]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d113      	bne.n	8011592 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801156a:	2300      	movs	r3, #0
 801156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011572:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	b29b      	uxth	r3, r3
 801157c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011580:	b29a      	uxth	r2, r3
 8011582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011584:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801158a:	1c9a      	adds	r2, r3, #2
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	629a      	str	r2, [r3, #40]	@ 0x28
 8011590:	e026      	b.n	80115e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011596:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011598:	2300      	movs	r3, #0
 801159a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	689b      	ldr	r3, [r3, #8]
 80115a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80115a4:	d007      	beq.n	80115b6 <UART_Receive_IT+0x74>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	689b      	ldr	r3, [r3, #8]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d10a      	bne.n	80115c4 <UART_Receive_IT+0x82>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	691b      	ldr	r3, [r3, #16]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d106      	bne.n	80115c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	b2da      	uxtb	r2, r3
 80115be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c0:	701a      	strb	r2, [r3, #0]
 80115c2:	e008      	b.n	80115d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115d0:	b2da      	uxtb	r2, r3
 80115d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	3b01      	subs	r3, #1
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	4619      	mov	r1, r3
 80115ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d15a      	bne.n	80116aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	68da      	ldr	r2, [r3, #12]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f022 0220 	bic.w	r2, r2, #32
 8011602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	68da      	ldr	r2, [r3, #12]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	695a      	ldr	r2, [r3, #20]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f022 0201 	bic.w	r2, r2, #1
 8011622:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2220      	movs	r2, #32
 8011628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011630:	2b01      	cmp	r3, #1
 8011632:	d135      	bne.n	80116a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2200      	movs	r2, #0
 8011638:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	330c      	adds	r3, #12
 8011640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	e853 3f00 	ldrex	r3, [r3]
 8011648:	613b      	str	r3, [r7, #16]
   return(result);
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	f023 0310 	bic.w	r3, r3, #16
 8011650:	627b      	str	r3, [r7, #36]	@ 0x24
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	330c      	adds	r3, #12
 8011658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801165a:	623a      	str	r2, [r7, #32]
 801165c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801165e:	69f9      	ldr	r1, [r7, #28]
 8011660:	6a3a      	ldr	r2, [r7, #32]
 8011662:	e841 2300 	strex	r3, r2, [r1]
 8011666:	61bb      	str	r3, [r7, #24]
   return(result);
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d1e5      	bne.n	801163a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f003 0310 	and.w	r3, r3, #16
 8011678:	2b10      	cmp	r3, #16
 801167a:	d10a      	bne.n	8011692 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801167c:	2300      	movs	r3, #0
 801167e:	60fb      	str	r3, [r7, #12]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	60fb      	str	r3, [r7, #12]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	60fb      	str	r3, [r7, #12]
 8011690:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011696:	4619      	mov	r1, r3
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f7ff fdbb 	bl	8011214 <HAL_UARTEx_RxEventCallback>
 801169e:	e002      	b.n	80116a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f7fb fcc5 	bl	800d030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80116a6:	2300      	movs	r3, #0
 80116a8:	e002      	b.n	80116b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80116aa:	2300      	movs	r3, #0
 80116ac:	e000      	b.n	80116b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80116ae:	2302      	movs	r3, #2
  }
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3730      	adds	r7, #48	@ 0x30
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116bc:	b0c0      	sub	sp, #256	@ 0x100
 80116be:	af00      	add	r7, sp, #0
 80116c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80116c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80116d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116d4:	68d9      	ldr	r1, [r3, #12]
 80116d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	ea40 0301 	orr.w	r3, r0, r1
 80116e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80116e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116e6:	689a      	ldr	r2, [r3, #8]
 80116e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116ec:	691b      	ldr	r3, [r3, #16]
 80116ee:	431a      	orrs	r2, r3
 80116f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116f4:	695b      	ldr	r3, [r3, #20]
 80116f6:	431a      	orrs	r2, r3
 80116f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116fc:	69db      	ldr	r3, [r3, #28]
 80116fe:	4313      	orrs	r3, r2
 8011700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011710:	f021 010c 	bic.w	r1, r1, #12
 8011714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801171e:	430b      	orrs	r3, r1
 8011720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	695b      	ldr	r3, [r3, #20]
 801172a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801172e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011732:	6999      	ldr	r1, [r3, #24]
 8011734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	ea40 0301 	orr.w	r3, r0, r1
 801173e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	4b8f      	ldr	r3, [pc, #572]	@ (8011984 <UART_SetConfig+0x2cc>)
 8011748:	429a      	cmp	r2, r3
 801174a:	d005      	beq.n	8011758 <UART_SetConfig+0xa0>
 801174c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	4b8d      	ldr	r3, [pc, #564]	@ (8011988 <UART_SetConfig+0x2d0>)
 8011754:	429a      	cmp	r2, r3
 8011756:	d104      	bne.n	8011762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011758:	f7fc fe82 	bl	800e460 <HAL_RCC_GetPCLK2Freq>
 801175c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011760:	e003      	b.n	801176a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011762:	f7fc fe69 	bl	800e438 <HAL_RCC_GetPCLK1Freq>
 8011766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801176a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801176e:	69db      	ldr	r3, [r3, #28]
 8011770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011774:	f040 810c 	bne.w	8011990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801177c:	2200      	movs	r2, #0
 801177e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801178a:	4622      	mov	r2, r4
 801178c:	462b      	mov	r3, r5
 801178e:	1891      	adds	r1, r2, r2
 8011790:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011792:	415b      	adcs	r3, r3
 8011794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801179a:	4621      	mov	r1, r4
 801179c:	eb12 0801 	adds.w	r8, r2, r1
 80117a0:	4629      	mov	r1, r5
 80117a2:	eb43 0901 	adc.w	r9, r3, r1
 80117a6:	f04f 0200 	mov.w	r2, #0
 80117aa:	f04f 0300 	mov.w	r3, #0
 80117ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80117b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80117b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80117ba:	4690      	mov	r8, r2
 80117bc:	4699      	mov	r9, r3
 80117be:	4623      	mov	r3, r4
 80117c0:	eb18 0303 	adds.w	r3, r8, r3
 80117c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80117c8:	462b      	mov	r3, r5
 80117ca:	eb49 0303 	adc.w	r3, r9, r3
 80117ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80117d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80117de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80117e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80117e6:	460b      	mov	r3, r1
 80117e8:	18db      	adds	r3, r3, r3
 80117ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80117ec:	4613      	mov	r3, r2
 80117ee:	eb42 0303 	adc.w	r3, r2, r3
 80117f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80117f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80117f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80117fc:	f7ef fa54 	bl	8000ca8 <__aeabi_uldivmod>
 8011800:	4602      	mov	r2, r0
 8011802:	460b      	mov	r3, r1
 8011804:	4b61      	ldr	r3, [pc, #388]	@ (801198c <UART_SetConfig+0x2d4>)
 8011806:	fba3 2302 	umull	r2, r3, r3, r2
 801180a:	095b      	lsrs	r3, r3, #5
 801180c:	011c      	lsls	r4, r3, #4
 801180e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011812:	2200      	movs	r2, #0
 8011814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801181c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011820:	4642      	mov	r2, r8
 8011822:	464b      	mov	r3, r9
 8011824:	1891      	adds	r1, r2, r2
 8011826:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011828:	415b      	adcs	r3, r3
 801182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801182c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011830:	4641      	mov	r1, r8
 8011832:	eb12 0a01 	adds.w	sl, r2, r1
 8011836:	4649      	mov	r1, r9
 8011838:	eb43 0b01 	adc.w	fp, r3, r1
 801183c:	f04f 0200 	mov.w	r2, #0
 8011840:	f04f 0300 	mov.w	r3, #0
 8011844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801184c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011850:	4692      	mov	sl, r2
 8011852:	469b      	mov	fp, r3
 8011854:	4643      	mov	r3, r8
 8011856:	eb1a 0303 	adds.w	r3, sl, r3
 801185a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801185e:	464b      	mov	r3, r9
 8011860:	eb4b 0303 	adc.w	r3, fp, r3
 8011864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	2200      	movs	r2, #0
 8011870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801187c:	460b      	mov	r3, r1
 801187e:	18db      	adds	r3, r3, r3
 8011880:	643b      	str	r3, [r7, #64]	@ 0x40
 8011882:	4613      	mov	r3, r2
 8011884:	eb42 0303 	adc.w	r3, r2, r3
 8011888:	647b      	str	r3, [r7, #68]	@ 0x44
 801188a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801188e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011892:	f7ef fa09 	bl	8000ca8 <__aeabi_uldivmod>
 8011896:	4602      	mov	r2, r0
 8011898:	460b      	mov	r3, r1
 801189a:	4611      	mov	r1, r2
 801189c:	4b3b      	ldr	r3, [pc, #236]	@ (801198c <UART_SetConfig+0x2d4>)
 801189e:	fba3 2301 	umull	r2, r3, r3, r1
 80118a2:	095b      	lsrs	r3, r3, #5
 80118a4:	2264      	movs	r2, #100	@ 0x64
 80118a6:	fb02 f303 	mul.w	r3, r2, r3
 80118aa:	1acb      	subs	r3, r1, r3
 80118ac:	00db      	lsls	r3, r3, #3
 80118ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80118b2:	4b36      	ldr	r3, [pc, #216]	@ (801198c <UART_SetConfig+0x2d4>)
 80118b4:	fba3 2302 	umull	r2, r3, r3, r2
 80118b8:	095b      	lsrs	r3, r3, #5
 80118ba:	005b      	lsls	r3, r3, #1
 80118bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80118c0:	441c      	add	r4, r3
 80118c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80118c6:	2200      	movs	r2, #0
 80118c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80118cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80118d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80118d4:	4642      	mov	r2, r8
 80118d6:	464b      	mov	r3, r9
 80118d8:	1891      	adds	r1, r2, r2
 80118da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80118dc:	415b      	adcs	r3, r3
 80118de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80118e4:	4641      	mov	r1, r8
 80118e6:	1851      	adds	r1, r2, r1
 80118e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80118ea:	4649      	mov	r1, r9
 80118ec:	414b      	adcs	r3, r1
 80118ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80118f0:	f04f 0200 	mov.w	r2, #0
 80118f4:	f04f 0300 	mov.w	r3, #0
 80118f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80118fc:	4659      	mov	r1, fp
 80118fe:	00cb      	lsls	r3, r1, #3
 8011900:	4651      	mov	r1, sl
 8011902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011906:	4651      	mov	r1, sl
 8011908:	00ca      	lsls	r2, r1, #3
 801190a:	4610      	mov	r0, r2
 801190c:	4619      	mov	r1, r3
 801190e:	4603      	mov	r3, r0
 8011910:	4642      	mov	r2, r8
 8011912:	189b      	adds	r3, r3, r2
 8011914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011918:	464b      	mov	r3, r9
 801191a:	460a      	mov	r2, r1
 801191c:	eb42 0303 	adc.w	r3, r2, r3
 8011920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011938:	460b      	mov	r3, r1
 801193a:	18db      	adds	r3, r3, r3
 801193c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801193e:	4613      	mov	r3, r2
 8011940:	eb42 0303 	adc.w	r3, r2, r3
 8011944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801194a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801194e:	f7ef f9ab 	bl	8000ca8 <__aeabi_uldivmod>
 8011952:	4602      	mov	r2, r0
 8011954:	460b      	mov	r3, r1
 8011956:	4b0d      	ldr	r3, [pc, #52]	@ (801198c <UART_SetConfig+0x2d4>)
 8011958:	fba3 1302 	umull	r1, r3, r3, r2
 801195c:	095b      	lsrs	r3, r3, #5
 801195e:	2164      	movs	r1, #100	@ 0x64
 8011960:	fb01 f303 	mul.w	r3, r1, r3
 8011964:	1ad3      	subs	r3, r2, r3
 8011966:	00db      	lsls	r3, r3, #3
 8011968:	3332      	adds	r3, #50	@ 0x32
 801196a:	4a08      	ldr	r2, [pc, #32]	@ (801198c <UART_SetConfig+0x2d4>)
 801196c:	fba2 2303 	umull	r2, r3, r2, r3
 8011970:	095b      	lsrs	r3, r3, #5
 8011972:	f003 0207 	and.w	r2, r3, #7
 8011976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4422      	add	r2, r4
 801197e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011980:	e106      	b.n	8011b90 <UART_SetConfig+0x4d8>
 8011982:	bf00      	nop
 8011984:	40011000 	.word	0x40011000
 8011988:	40011400 	.word	0x40011400
 801198c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011994:	2200      	movs	r2, #0
 8011996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801199a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801199e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80119a2:	4642      	mov	r2, r8
 80119a4:	464b      	mov	r3, r9
 80119a6:	1891      	adds	r1, r2, r2
 80119a8:	6239      	str	r1, [r7, #32]
 80119aa:	415b      	adcs	r3, r3
 80119ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80119ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80119b2:	4641      	mov	r1, r8
 80119b4:	1854      	adds	r4, r2, r1
 80119b6:	4649      	mov	r1, r9
 80119b8:	eb43 0501 	adc.w	r5, r3, r1
 80119bc:	f04f 0200 	mov.w	r2, #0
 80119c0:	f04f 0300 	mov.w	r3, #0
 80119c4:	00eb      	lsls	r3, r5, #3
 80119c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80119ca:	00e2      	lsls	r2, r4, #3
 80119cc:	4614      	mov	r4, r2
 80119ce:	461d      	mov	r5, r3
 80119d0:	4643      	mov	r3, r8
 80119d2:	18e3      	adds	r3, r4, r3
 80119d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80119d8:	464b      	mov	r3, r9
 80119da:	eb45 0303 	adc.w	r3, r5, r3
 80119de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	2200      	movs	r2, #0
 80119ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80119ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80119f2:	f04f 0200 	mov.w	r2, #0
 80119f6:	f04f 0300 	mov.w	r3, #0
 80119fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80119fe:	4629      	mov	r1, r5
 8011a00:	008b      	lsls	r3, r1, #2
 8011a02:	4621      	mov	r1, r4
 8011a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a08:	4621      	mov	r1, r4
 8011a0a:	008a      	lsls	r2, r1, #2
 8011a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011a10:	f7ef f94a 	bl	8000ca8 <__aeabi_uldivmod>
 8011a14:	4602      	mov	r2, r0
 8011a16:	460b      	mov	r3, r1
 8011a18:	4b60      	ldr	r3, [pc, #384]	@ (8011b9c <UART_SetConfig+0x4e4>)
 8011a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8011a1e:	095b      	lsrs	r3, r3, #5
 8011a20:	011c      	lsls	r4, r3, #4
 8011a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011a26:	2200      	movs	r2, #0
 8011a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8011a34:	4642      	mov	r2, r8
 8011a36:	464b      	mov	r3, r9
 8011a38:	1891      	adds	r1, r2, r2
 8011a3a:	61b9      	str	r1, [r7, #24]
 8011a3c:	415b      	adcs	r3, r3
 8011a3e:	61fb      	str	r3, [r7, #28]
 8011a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011a44:	4641      	mov	r1, r8
 8011a46:	1851      	adds	r1, r2, r1
 8011a48:	6139      	str	r1, [r7, #16]
 8011a4a:	4649      	mov	r1, r9
 8011a4c:	414b      	adcs	r3, r1
 8011a4e:	617b      	str	r3, [r7, #20]
 8011a50:	f04f 0200 	mov.w	r2, #0
 8011a54:	f04f 0300 	mov.w	r3, #0
 8011a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011a5c:	4659      	mov	r1, fp
 8011a5e:	00cb      	lsls	r3, r1, #3
 8011a60:	4651      	mov	r1, sl
 8011a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011a66:	4651      	mov	r1, sl
 8011a68:	00ca      	lsls	r2, r1, #3
 8011a6a:	4610      	mov	r0, r2
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	4603      	mov	r3, r0
 8011a70:	4642      	mov	r2, r8
 8011a72:	189b      	adds	r3, r3, r2
 8011a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a78:	464b      	mov	r3, r9
 8011a7a:	460a      	mov	r2, r1
 8011a7c:	eb42 0303 	adc.w	r3, r2, r3
 8011a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011a90:	f04f 0200 	mov.w	r2, #0
 8011a94:	f04f 0300 	mov.w	r3, #0
 8011a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011a9c:	4649      	mov	r1, r9
 8011a9e:	008b      	lsls	r3, r1, #2
 8011aa0:	4641      	mov	r1, r8
 8011aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011aa6:	4641      	mov	r1, r8
 8011aa8:	008a      	lsls	r2, r1, #2
 8011aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011aae:	f7ef f8fb 	bl	8000ca8 <__aeabi_uldivmod>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4b38      	ldr	r3, [pc, #224]	@ (8011b9c <UART_SetConfig+0x4e4>)
 8011aba:	fba3 2301 	umull	r2, r3, r3, r1
 8011abe:	095b      	lsrs	r3, r3, #5
 8011ac0:	2264      	movs	r2, #100	@ 0x64
 8011ac2:	fb02 f303 	mul.w	r3, r2, r3
 8011ac6:	1acb      	subs	r3, r1, r3
 8011ac8:	011b      	lsls	r3, r3, #4
 8011aca:	3332      	adds	r3, #50	@ 0x32
 8011acc:	4a33      	ldr	r2, [pc, #204]	@ (8011b9c <UART_SetConfig+0x4e4>)
 8011ace:	fba2 2303 	umull	r2, r3, r2, r3
 8011ad2:	095b      	lsrs	r3, r3, #5
 8011ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011ad8:	441c      	add	r4, r3
 8011ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011ade:	2200      	movs	r2, #0
 8011ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8011ae2:	677a      	str	r2, [r7, #116]	@ 0x74
 8011ae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011ae8:	4642      	mov	r2, r8
 8011aea:	464b      	mov	r3, r9
 8011aec:	1891      	adds	r1, r2, r2
 8011aee:	60b9      	str	r1, [r7, #8]
 8011af0:	415b      	adcs	r3, r3
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011af8:	4641      	mov	r1, r8
 8011afa:	1851      	adds	r1, r2, r1
 8011afc:	6039      	str	r1, [r7, #0]
 8011afe:	4649      	mov	r1, r9
 8011b00:	414b      	adcs	r3, r1
 8011b02:	607b      	str	r3, [r7, #4]
 8011b04:	f04f 0200 	mov.w	r2, #0
 8011b08:	f04f 0300 	mov.w	r3, #0
 8011b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011b10:	4659      	mov	r1, fp
 8011b12:	00cb      	lsls	r3, r1, #3
 8011b14:	4651      	mov	r1, sl
 8011b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011b1a:	4651      	mov	r1, sl
 8011b1c:	00ca      	lsls	r2, r1, #3
 8011b1e:	4610      	mov	r0, r2
 8011b20:	4619      	mov	r1, r3
 8011b22:	4603      	mov	r3, r0
 8011b24:	4642      	mov	r2, r8
 8011b26:	189b      	adds	r3, r3, r2
 8011b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b2a:	464b      	mov	r3, r9
 8011b2c:	460a      	mov	r2, r1
 8011b2e:	eb42 0303 	adc.w	r3, r2, r3
 8011b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8011b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8011b40:	f04f 0200 	mov.w	r2, #0
 8011b44:	f04f 0300 	mov.w	r3, #0
 8011b48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011b4c:	4649      	mov	r1, r9
 8011b4e:	008b      	lsls	r3, r1, #2
 8011b50:	4641      	mov	r1, r8
 8011b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011b56:	4641      	mov	r1, r8
 8011b58:	008a      	lsls	r2, r1, #2
 8011b5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011b5e:	f7ef f8a3 	bl	8000ca8 <__aeabi_uldivmod>
 8011b62:	4602      	mov	r2, r0
 8011b64:	460b      	mov	r3, r1
 8011b66:	4b0d      	ldr	r3, [pc, #52]	@ (8011b9c <UART_SetConfig+0x4e4>)
 8011b68:	fba3 1302 	umull	r1, r3, r3, r2
 8011b6c:	095b      	lsrs	r3, r3, #5
 8011b6e:	2164      	movs	r1, #100	@ 0x64
 8011b70:	fb01 f303 	mul.w	r3, r1, r3
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	011b      	lsls	r3, r3, #4
 8011b78:	3332      	adds	r3, #50	@ 0x32
 8011b7a:	4a08      	ldr	r2, [pc, #32]	@ (8011b9c <UART_SetConfig+0x4e4>)
 8011b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8011b80:	095b      	lsrs	r3, r3, #5
 8011b82:	f003 020f 	and.w	r2, r3, #15
 8011b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	4422      	add	r2, r4
 8011b8e:	609a      	str	r2, [r3, #8]
}
 8011b90:	bf00      	nop
 8011b92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011b96:	46bd      	mov	sp, r7
 8011b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b9c:	51eb851f 	.word	0x51eb851f

08011ba0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8011ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011ba2:	2400      	movs	r4, #0
 8011ba4:	2310      	movs	r3, #16
 8011ba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011baa:	6803      	ldr	r3, [r0, #0]
 8011bac:	4615      	mov	r5, r2
 8011bae:	699e      	ldr	r6, [r3, #24]
 8011bb0:	6812      	ldr	r2, [r2, #0]
 8011bb2:	466b      	mov	r3, sp
 8011bb4:	e9cd 4400 	strd	r4, r4, [sp]
 8011bb8:	47b0      	blx	r6
 8011bba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011bbe:	f003 0306 	and.w	r3, r3, #6
 8011bc2:	2b06      	cmp	r3, #6
 8011bc4:	bf03      	ittte	eq
 8011bc6:	9b00      	ldreq	r3, [sp, #0]
 8011bc8:	602b      	streq	r3, [r5, #0]
 8011bca:	2001      	moveq	r0, #1
 8011bcc:	4620      	movne	r0, r4
 8011bce:	b004      	add	sp, #16
 8011bd0:	bd70      	pop	{r4, r5, r6, pc}

08011bd2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8011bd2:	9800      	ldr	r0, [sp, #0]
 8011bd4:	4290      	cmp	r0, r2
 8011bd6:	bf0c      	ite	eq
 8011bd8:	2006      	moveq	r0, #6
 8011bda:	2001      	movne	r0, #1
 8011bdc:	4770      	bx	lr
	...

08011be0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8011be0:	b510      	push	{r4, lr}
 8011be2:	4b03      	ldr	r3, [pc, #12]	@ (8011bf0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8011be4:	6003      	str	r3, [r0, #0]
 8011be6:	4604      	mov	r4, r0
 8011be8:	f000 fc3d 	bl	8012466 <_ZNSt9type_infoD1Ev>
 8011bec:	4620      	mov	r0, r4
 8011bee:	bd10      	pop	{r4, pc}
 8011bf0:	0801765c 	.word	0x0801765c

08011bf4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8011bf4:	b510      	push	{r4, lr}
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	f7ff fff2 	bl	8011be0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	2108      	movs	r1, #8
 8011c00:	f000 f842 	bl	8011c88 <_ZdlPvj>
 8011c04:	4620      	mov	r0, r4
 8011c06:	bd10      	pop	{r4, pc}

08011c08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8011c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c0c:	461f      	mov	r7, r3
 8011c0e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8011c12:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011c16:	4598      	cmp	r8, r3
 8011c18:	4606      	mov	r6, r0
 8011c1a:	4615      	mov	r5, r2
 8011c1c:	d107      	bne.n	8011c2e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8011c1e:	9907      	ldr	r1, [sp, #28]
 8011c20:	f000 fc24 	bl	801246c <_ZNKSt9type_info7__equalERKS_>
 8011c24:	b118      	cbz	r0, 8011c2e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8011c26:	7165      	strb	r5, [r4, #5]
 8011c28:	2000      	movs	r0, #0
 8011c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c2e:	4639      	mov	r1, r7
 8011c30:	4630      	mov	r0, r6
 8011c32:	f000 fc1b 	bl	801246c <_ZNKSt9type_info7__equalERKS_>
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d0f6      	beq.n	8011c28 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	f8c4 8000 	str.w	r8, [r4]
 8011c40:	7125      	strb	r5, [r4, #4]
 8011c42:	71a3      	strb	r3, [r4, #6]
 8011c44:	e7f0      	b.n	8011c28 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08011c46 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8011c46:	b538      	push	{r3, r4, r5, lr}
 8011c48:	4615      	mov	r5, r2
 8011c4a:	461c      	mov	r4, r3
 8011c4c:	f000 fc0e 	bl	801246c <_ZNKSt9type_info7__equalERKS_>
 8011c50:	b120      	cbz	r0, 8011c5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8011c52:	2308      	movs	r3, #8
 8011c54:	60e3      	str	r3, [r4, #12]
 8011c56:	2306      	movs	r3, #6
 8011c58:	6025      	str	r5, [r4, #0]
 8011c5a:	7123      	strb	r3, [r4, #4]
 8011c5c:	bd38      	pop	{r3, r4, r5, pc}

08011c5e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8011c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c62:	4605      	mov	r5, r0
 8011c64:	460c      	mov	r4, r1
 8011c66:	4616      	mov	r6, r2
 8011c68:	461f      	mov	r7, r3
 8011c6a:	f000 fbff 	bl	801246c <_ZNKSt9type_info7__equalERKS_>
 8011c6e:	b948      	cbnz	r0, 8011c84 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8011c70:	2f03      	cmp	r7, #3
 8011c72:	d807      	bhi.n	8011c84 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8011c74:	6823      	ldr	r3, [r4, #0]
 8011c76:	4632      	mov	r2, r6
 8011c78:	4629      	mov	r1, r5
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	695b      	ldr	r3, [r3, #20]
 8011c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c82:	4718      	bx	r3
 8011c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c88 <_ZdlPvj>:
 8011c88:	f000 bc0b 	b.w	80124a2 <_ZdlPv>

08011c8c <__cxa_end_cleanup>:
 8011c8c:	b41e      	push	{r1, r2, r3, r4}
 8011c8e:	f000 f89c 	bl	8011dca <__gnu_end_cleanup>
 8011c92:	bc1e      	pop	{r1, r2, r3, r4}
 8011c94:	f7ef ff06 	bl	8001aa4 <_Unwind_Resume>

08011c98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8011c98:	7803      	ldrb	r3, [r0, #0]
 8011c9a:	2b47      	cmp	r3, #71	@ 0x47
 8011c9c:	d117      	bne.n	8011cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011c9e:	7843      	ldrb	r3, [r0, #1]
 8011ca0:	2b4e      	cmp	r3, #78	@ 0x4e
 8011ca2:	d114      	bne.n	8011cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011ca4:	7883      	ldrb	r3, [r0, #2]
 8011ca6:	2b55      	cmp	r3, #85	@ 0x55
 8011ca8:	d111      	bne.n	8011cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011caa:	78c3      	ldrb	r3, [r0, #3]
 8011cac:	2b43      	cmp	r3, #67	@ 0x43
 8011cae:	d10e      	bne.n	8011cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011cb0:	7903      	ldrb	r3, [r0, #4]
 8011cb2:	2b43      	cmp	r3, #67	@ 0x43
 8011cb4:	d10b      	bne.n	8011cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011cb6:	7943      	ldrb	r3, [r0, #5]
 8011cb8:	2b2b      	cmp	r3, #43	@ 0x2b
 8011cba:	d108      	bne.n	8011cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011cbc:	7983      	ldrb	r3, [r0, #6]
 8011cbe:	2b2b      	cmp	r3, #43	@ 0x2b
 8011cc0:	d105      	bne.n	8011cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011cc2:	79c0      	ldrb	r0, [r0, #7]
 8011cc4:	2801      	cmp	r0, #1
 8011cc6:	bf8c      	ite	hi
 8011cc8:	2000      	movhi	r0, #0
 8011cca:	2001      	movls	r0, #1
 8011ccc:	4770      	bx	lr
 8011cce:	2000      	movs	r0, #0
 8011cd0:	4770      	bx	lr
	...

08011cd4 <__cxa_type_match>:
 8011cd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011cd8:	461d      	mov	r5, r3
 8011cda:	7803      	ldrb	r3, [r0, #0]
 8011cdc:	2b47      	cmp	r3, #71	@ 0x47
 8011cde:	460e      	mov	r6, r1
 8011ce0:	4602      	mov	r2, r0
 8011ce2:	79c1      	ldrb	r1, [r0, #7]
 8011ce4:	d113      	bne.n	8011d0e <__cxa_type_match+0x3a>
 8011ce6:	7843      	ldrb	r3, [r0, #1]
 8011ce8:	2b4e      	cmp	r3, #78	@ 0x4e
 8011cea:	d110      	bne.n	8011d0e <__cxa_type_match+0x3a>
 8011cec:	7883      	ldrb	r3, [r0, #2]
 8011cee:	2b55      	cmp	r3, #85	@ 0x55
 8011cf0:	d10d      	bne.n	8011d0e <__cxa_type_match+0x3a>
 8011cf2:	78c3      	ldrb	r3, [r0, #3]
 8011cf4:	2b43      	cmp	r3, #67	@ 0x43
 8011cf6:	d10a      	bne.n	8011d0e <__cxa_type_match+0x3a>
 8011cf8:	7903      	ldrb	r3, [r0, #4]
 8011cfa:	2b46      	cmp	r3, #70	@ 0x46
 8011cfc:	d107      	bne.n	8011d0e <__cxa_type_match+0x3a>
 8011cfe:	7943      	ldrb	r3, [r0, #5]
 8011d00:	2b4f      	cmp	r3, #79	@ 0x4f
 8011d02:	d104      	bne.n	8011d0e <__cxa_type_match+0x3a>
 8011d04:	7983      	ldrb	r3, [r0, #6]
 8011d06:	2b52      	cmp	r3, #82	@ 0x52
 8011d08:	d101      	bne.n	8011d0e <__cxa_type_match+0x3a>
 8011d0a:	2900      	cmp	r1, #0
 8011d0c:	d031      	beq.n	8011d72 <__cxa_type_match+0x9e>
 8011d0e:	4610      	mov	r0, r2
 8011d10:	f7ff ffc2 	bl	8011c98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011d14:	f080 0401 	eor.w	r4, r0, #1
 8011d18:	b2e4      	uxtb	r4, r4
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	9001      	str	r0, [sp, #4]
 8011d20:	bb53      	cbnz	r3, 8011d78 <__cxa_type_match+0xa4>
 8011d22:	bb5c      	cbnz	r4, 8011d7c <__cxa_type_match+0xa8>
 8011d24:	2901      	cmp	r1, #1
 8011d26:	bf0a      	itet	eq
 8011d28:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8011d2c:	f1a2 0320 	subne.w	r3, r2, #32
 8011d30:	3b78      	subeq	r3, #120	@ 0x78
 8011d32:	2901      	cmp	r1, #1
 8011d34:	bf08      	it	eq
 8011d36:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8011d3a:	681c      	ldr	r4, [r3, #0]
 8011d3c:	bf18      	it	ne
 8011d3e:	3258      	addne	r2, #88	@ 0x58
 8011d40:	9201      	str	r2, [sp, #4]
 8011d42:	6823      	ldr	r3, [r4, #0]
 8011d44:	4620      	mov	r0, r4
 8011d46:	689b      	ldr	r3, [r3, #8]
 8011d48:	4798      	blx	r3
 8011d4a:	b1c8      	cbz	r0, 8011d80 <__cxa_type_match+0xac>
 8011d4c:	9b01      	ldr	r3, [sp, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	9301      	str	r3, [sp, #4]
 8011d52:	2702      	movs	r7, #2
 8011d54:	6833      	ldr	r3, [r6, #0]
 8011d56:	aa01      	add	r2, sp, #4
 8011d58:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8011d5c:	4621      	mov	r1, r4
 8011d5e:	2301      	movs	r3, #1
 8011d60:	4630      	mov	r0, r6
 8011d62:	47c0      	blx	r8
 8011d64:	b170      	cbz	r0, 8011d84 <__cxa_type_match+0xb0>
 8011d66:	9b01      	ldr	r3, [sp, #4]
 8011d68:	602b      	str	r3, [r5, #0]
 8011d6a:	4638      	mov	r0, r7
 8011d6c:	b002      	add	sp, #8
 8011d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d72:	2301      	movs	r3, #1
 8011d74:	460c      	mov	r4, r1
 8011d76:	e7d1      	b.n	8011d1c <__cxa_type_match+0x48>
 8011d78:	4c03      	ldr	r4, [pc, #12]	@ (8011d88 <__cxa_type_match+0xb4>)
 8011d7a:	e7e2      	b.n	8011d42 <__cxa_type_match+0x6e>
 8011d7c:	4c03      	ldr	r4, [pc, #12]	@ (8011d8c <__cxa_type_match+0xb8>)
 8011d7e:	e7e0      	b.n	8011d42 <__cxa_type_match+0x6e>
 8011d80:	2701      	movs	r7, #1
 8011d82:	e7e7      	b.n	8011d54 <__cxa_type_match+0x80>
 8011d84:	4607      	mov	r7, r0
 8011d86:	e7f0      	b.n	8011d6a <__cxa_type_match+0x96>
 8011d88:	080176a0 	.word	0x080176a0
 8011d8c:	080176cc 	.word	0x080176cc

08011d90 <__cxa_begin_cleanup>:
 8011d90:	b510      	push	{r4, lr}
 8011d92:	4604      	mov	r4, r0
 8011d94:	f000 f834 	bl	8011e00 <__cxa_get_globals>
 8011d98:	4602      	mov	r2, r0
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f1a4 0120 	sub.w	r1, r4, #32
 8011da0:	f7ff ff7a 	bl	8011c98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011da4:	b160      	cbz	r0, 8011dc0 <__cxa_begin_cleanup+0x30>
 8011da6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011daa:	3301      	adds	r3, #1
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	f844 3c04 	str.w	r3, [r4, #-4]
 8011db2:	d103      	bne.n	8011dbc <__cxa_begin_cleanup+0x2c>
 8011db4:	6893      	ldr	r3, [r2, #8]
 8011db6:	f844 3c08 	str.w	r3, [r4, #-8]
 8011dba:	6091      	str	r1, [r2, #8]
 8011dbc:	2001      	movs	r0, #1
 8011dbe:	bd10      	pop	{r4, pc}
 8011dc0:	6893      	ldr	r3, [r2, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d0f9      	beq.n	8011dba <__cxa_begin_cleanup+0x2a>
 8011dc6:	f000 faa3 	bl	8012310 <_ZSt9terminatev>

08011dca <__gnu_end_cleanup>:
 8011dca:	b510      	push	{r4, lr}
 8011dcc:	f000 f818 	bl	8011e00 <__cxa_get_globals>
 8011dd0:	6882      	ldr	r2, [r0, #8]
 8011dd2:	4601      	mov	r1, r0
 8011dd4:	b90a      	cbnz	r2, 8011dda <__gnu_end_cleanup+0x10>
 8011dd6:	f000 fa9b 	bl	8012310 <_ZSt9terminatev>
 8011dda:	f102 0420 	add.w	r4, r2, #32
 8011dde:	4620      	mov	r0, r4
 8011de0:	f7ff ff5a 	bl	8011c98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011de4:	b140      	cbz	r0, 8011df8 <__gnu_end_cleanup+0x2e>
 8011de6:	69d3      	ldr	r3, [r2, #28]
 8011de8:	3b01      	subs	r3, #1
 8011dea:	61d3      	str	r3, [r2, #28]
 8011dec:	b913      	cbnz	r3, 8011df4 <__gnu_end_cleanup+0x2a>
 8011dee:	6990      	ldr	r0, [r2, #24]
 8011df0:	6088      	str	r0, [r1, #8]
 8011df2:	6193      	str	r3, [r2, #24]
 8011df4:	4620      	mov	r0, r4
 8011df6:	bd10      	pop	{r4, pc}
 8011df8:	6088      	str	r0, [r1, #8]
 8011dfa:	e7fb      	b.n	8011df4 <__gnu_end_cleanup+0x2a>

08011dfc <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8011dfc:	4770      	bx	lr
	...

08011e00 <__cxa_get_globals>:
 8011e00:	4800      	ldr	r0, [pc, #0]	@ (8011e04 <__cxa_get_globals+0x4>)
 8011e02:	4770      	bx	lr
 8011e04:	200005a8 	.word	0x200005a8

08011e08 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8011e08:	4a02      	ldr	r2, [pc, #8]	@ (8011e14 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8011e0a:	4903      	ldr	r1, [pc, #12]	@ (8011e18 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8011e0c:	4803      	ldr	r0, [pc, #12]	@ (8011e1c <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 8011e0e:	f000 bb43 	b.w	8012498 <__aeabi_atexit>
 8011e12:	bf00      	nop
 8011e14:	20000000 	.word	0x20000000
 8011e18:	08011dfd 	.word	0x08011dfd
 8011e1c:	200005a8 	.word	0x200005a8

08011e20 <_ZL12read_uleb128PKhPm>:
 8011e20:	b530      	push	{r4, r5, lr}
 8011e22:	2300      	movs	r3, #0
 8011e24:	461a      	mov	r2, r3
 8011e26:	f810 5b01 	ldrb.w	r5, [r0], #1
 8011e2a:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 8011e2e:	4094      	lsls	r4, r2
 8011e30:	4323      	orrs	r3, r4
 8011e32:	062c      	lsls	r4, r5, #24
 8011e34:	f102 0207 	add.w	r2, r2, #7
 8011e38:	d4f5      	bmi.n	8011e26 <_ZL12read_uleb128PKhPm+0x6>
 8011e3a:	600b      	str	r3, [r1, #0]
 8011e3c:	bd30      	pop	{r4, r5, pc}

08011e3e <_ZL12read_sleb128PKhPl>:
 8011e3e:	b530      	push	{r4, r5, lr}
 8011e40:	2300      	movs	r3, #0
 8011e42:	461a      	mov	r2, r3
 8011e44:	f810 4b01 	ldrb.w	r4, [r0], #1
 8011e48:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 8011e4c:	4095      	lsls	r5, r2
 8011e4e:	432b      	orrs	r3, r5
 8011e50:	0625      	lsls	r5, r4, #24
 8011e52:	f102 0207 	add.w	r2, r2, #7
 8011e56:	d4f5      	bmi.n	8011e44 <_ZL12read_sleb128PKhPl+0x6>
 8011e58:	2a1f      	cmp	r2, #31
 8011e5a:	d806      	bhi.n	8011e6a <_ZL12read_sleb128PKhPl+0x2c>
 8011e5c:	0664      	lsls	r4, r4, #25
 8011e5e:	bf42      	ittt	mi
 8011e60:	f04f 34ff 	movmi.w	r4, #4294967295
 8011e64:	fa04 f202 	lslmi.w	r2, r4, r2
 8011e68:	4313      	orrmi	r3, r2
 8011e6a:	600b      	str	r3, [r1, #0]
 8011e6c:	bd30      	pop	{r4, r5, pc}

08011e6e <_ZL28read_encoded_value_with_basehjPKhPj>:
 8011e6e:	2850      	cmp	r0, #80	@ 0x50
 8011e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011e74:	4606      	mov	r6, r0
 8011e76:	4688      	mov	r8, r1
 8011e78:	4615      	mov	r5, r2
 8011e7a:	461f      	mov	r7, r3
 8011e7c:	d108      	bne.n	8011e90 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8011e7e:	1cd0      	adds	r0, r2, #3
 8011e80:	f020 0003 	bic.w	r0, r0, #3
 8011e84:	f850 4b04 	ldr.w	r4, [r0], #4
 8011e88:	603c      	str	r4, [r7, #0]
 8011e8a:	b002      	add	sp, #8
 8011e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e90:	f000 030f 	and.w	r3, r0, #15
 8011e94:	2b0c      	cmp	r3, #12
 8011e96:	d82e      	bhi.n	8011ef6 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8011e98:	e8df f003 	tbb	[pc, r3]
 8011e9c:	251d0725 	.word	0x251d0725
 8011ea0:	2d2d2d29 	.word	0x2d2d2d29
 8011ea4:	2521182d 	.word	0x2521182d
 8011ea8:	29          	.byte	0x29
 8011ea9:	00          	.byte	0x00
 8011eaa:	a901      	add	r1, sp, #4
 8011eac:	4628      	mov	r0, r5
 8011eae:	f7ff ffb7 	bl	8011e20 <_ZL12read_uleb128PKhPm>
 8011eb2:	9c01      	ldr	r4, [sp, #4]
 8011eb4:	2c00      	cmp	r4, #0
 8011eb6:	d0e7      	beq.n	8011e88 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8011eb8:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 8011ebc:	2b10      	cmp	r3, #16
 8011ebe:	bf08      	it	eq
 8011ec0:	46a8      	moveq	r8, r5
 8011ec2:	4444      	add	r4, r8
 8011ec4:	0633      	lsls	r3, r6, #24
 8011ec6:	bf48      	it	mi
 8011ec8:	6824      	ldrmi	r4, [r4, #0]
 8011eca:	e7dd      	b.n	8011e88 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8011ecc:	a901      	add	r1, sp, #4
 8011ece:	4628      	mov	r0, r5
 8011ed0:	f7ff ffb5 	bl	8011e3e <_ZL12read_sleb128PKhPl>
 8011ed4:	e7ed      	b.n	8011eb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	f830 4b02 	ldrh.w	r4, [r0], #2
 8011edc:	e7ea      	b.n	8011eb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8011ee4:	e7e6      	b.n	8011eb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	f850 4b04 	ldr.w	r4, [r0], #4
 8011eec:	e7e2      	b.n	8011eb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8011eee:	4628      	mov	r0, r5
 8011ef0:	f850 4b08 	ldr.w	r4, [r0], #8
 8011ef4:	e7de      	b.n	8011eb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8011ef6:	f001 faef 	bl	80134d8 <abort>

08011efa <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8011efa:	b508      	push	{r3, lr}
 8011efc:	4603      	mov	r3, r0
 8011efe:	2bff      	cmp	r3, #255	@ 0xff
 8011f00:	4608      	mov	r0, r1
 8011f02:	d00d      	beq.n	8011f20 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8011f04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011f08:	2b30      	cmp	r3, #48	@ 0x30
 8011f0a:	d00f      	beq.n	8011f2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8011f0c:	d804      	bhi.n	8011f18 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8011f0e:	2b20      	cmp	r3, #32
 8011f10:	d008      	beq.n	8011f24 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8011f12:	d905      	bls.n	8011f20 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8011f14:	f001 fae0 	bl	80134d8 <abort>
 8011f18:	2b40      	cmp	r3, #64	@ 0x40
 8011f1a:	d00b      	beq.n	8011f34 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8011f1c:	2b50      	cmp	r3, #80	@ 0x50
 8011f1e:	d1f9      	bne.n	8011f14 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8011f20:	2000      	movs	r0, #0
 8011f22:	bd08      	pop	{r3, pc}
 8011f24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011f28:	f004 b937 	b.w	801619a <_Unwind_GetTextRelBase>
 8011f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011f30:	f004 b930 	b.w	8016194 <_Unwind_GetDataRelBase>
 8011f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011f38:	f7ef bfa8 	b.w	8001e8c <_Unwind_GetRegionStart>

08011f3c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8011f3c:	b570      	push	{r4, r5, r6, lr}
 8011f3e:	460c      	mov	r4, r1
 8011f40:	4601      	mov	r1, r0
 8011f42:	4620      	mov	r0, r4
 8011f44:	4615      	mov	r5, r2
 8011f46:	461e      	mov	r6, r3
 8011f48:	f7ff ffd7 	bl	8011efa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011f4c:	4633      	mov	r3, r6
 8011f4e:	4601      	mov	r1, r0
 8011f50:	462a      	mov	r2, r5
 8011f52:	4620      	mov	r0, r4
 8011f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f58:	f7ff bf89 	b.w	8011e6e <_ZL28read_encoded_value_with_basehjPKhPj>

08011f5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8011f5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f5e:	460c      	mov	r4, r1
 8011f60:	4615      	mov	r5, r2
 8011f62:	4606      	mov	r6, r0
 8011f64:	b108      	cbz	r0, 8011f6a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8011f66:	f7ef ff91 	bl	8001e8c <_Unwind_GetRegionStart>
 8011f6a:	4622      	mov	r2, r4
 8011f6c:	6028      	str	r0, [r5, #0]
 8011f6e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011f72:	29ff      	cmp	r1, #255	@ 0xff
 8011f74:	d01c      	beq.n	8011fb0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8011f76:	1d2b      	adds	r3, r5, #4
 8011f78:	4630      	mov	r0, r6
 8011f7a:	f7ff ffdf 	bl	8011f3c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	4610      	mov	r0, r2
 8011f82:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011f86:	2bff      	cmp	r3, #255	@ 0xff
 8011f88:	d014      	beq.n	8011fb4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8011f8a:	2310      	movs	r3, #16
 8011f8c:	752b      	strb	r3, [r5, #20]
 8011f8e:	a901      	add	r1, sp, #4
 8011f90:	f7ff ff46 	bl	8011e20 <_ZL12read_uleb128PKhPm>
 8011f94:	9b01      	ldr	r3, [sp, #4]
 8011f96:	4403      	add	r3, r0
 8011f98:	60eb      	str	r3, [r5, #12]
 8011f9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011f9e:	756b      	strb	r3, [r5, #21]
 8011fa0:	a901      	add	r1, sp, #4
 8011fa2:	f7ff ff3d 	bl	8011e20 <_ZL12read_uleb128PKhPm>
 8011fa6:	9b01      	ldr	r3, [sp, #4]
 8011fa8:	4403      	add	r3, r0
 8011faa:	612b      	str	r3, [r5, #16]
 8011fac:	b002      	add	sp, #8
 8011fae:	bd70      	pop	{r4, r5, r6, pc}
 8011fb0:	6068      	str	r0, [r5, #4]
 8011fb2:	e7e5      	b.n	8011f80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8011fb4:	752b      	strb	r3, [r5, #20]
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	e7ee      	b.n	8011f98 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

08011fba <_Unwind_GetGR>:
 8011fba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fbc:	ab03      	add	r3, sp, #12
 8011fbe:	9300      	str	r3, [sp, #0]
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	460a      	mov	r2, r1
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	f7ef f9ad 	bl	8001324 <_Unwind_VRS_Get>
 8011fca:	9803      	ldr	r0, [sp, #12]
 8011fcc:	b005      	add	sp, #20
 8011fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011fd4 <__gxx_personality_v0>:
 8011fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd8:	b093      	sub	sp, #76	@ 0x4c
 8011fda:	2300      	movs	r3, #0
 8011fdc:	9307      	str	r3, [sp, #28]
 8011fde:	f000 0303 	and.w	r3, r0, #3
 8011fe2:	2b01      	cmp	r3, #1
 8011fe4:	4605      	mov	r5, r0
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	4616      	mov	r6, r2
 8011fea:	d010      	beq.n	801200e <__gxx_personality_v0+0x3a>
 8011fec:	2b02      	cmp	r3, #2
 8011fee:	d003      	beq.n	8011ff8 <__gxx_personality_v0+0x24>
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d13b      	bne.n	801206c <__gxx_personality_v0+0x98>
 8011ff4:	0701      	lsls	r1, r0, #28
 8011ff6:	d53b      	bpl.n	8012070 <__gxx_personality_v0+0x9c>
 8011ff8:	4631      	mov	r1, r6
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f7ef ff30 	bl	8001e60 <__gnu_unwind_frame>
 8012000:	b118      	cbz	r0, 801200a <__gxx_personality_v0+0x36>
 8012002:	2009      	movs	r0, #9
 8012004:	b013      	add	sp, #76	@ 0x4c
 8012006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200a:	2008      	movs	r0, #8
 801200c:	e7fa      	b.n	8012004 <__gxx_personality_v0+0x30>
 801200e:	0702      	lsls	r2, r0, #28
 8012010:	d523      	bpl.n	801205a <__gxx_personality_v0+0x86>
 8012012:	2302      	movs	r3, #2
 8012014:	f005 0508 	and.w	r5, r5, #8
 8012018:	431d      	orrs	r5, r3
 801201a:	ab0c      	add	r3, sp, #48	@ 0x30
 801201c:	9300      	str	r3, [sp, #0]
 801201e:	2300      	movs	r3, #0
 8012020:	220c      	movs	r2, #12
 8012022:	4619      	mov	r1, r3
 8012024:	4630      	mov	r0, r6
 8012026:	940c      	str	r4, [sp, #48]	@ 0x30
 8012028:	f7ef f9a2 	bl	8001370 <_Unwind_VRS_Set>
 801202c:	2d06      	cmp	r5, #6
 801202e:	d121      	bne.n	8012074 <__gxx_personality_v0+0xa0>
 8012030:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 8012034:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 8012038:	f1b8 0f00 	cmp.w	r8, #0
 801203c:	bf0c      	ite	eq
 801203e:	f04f 0a01 	moveq.w	sl, #1
 8012042:	f04f 0a03 	movne.w	sl, #3
 8012046:	f015 0508 	ands.w	r5, r5, #8
 801204a:	f000 8103 	beq.w	8012254 <__gxx_personality_v0+0x280>
 801204e:	f1ba 0f01 	cmp.w	sl, #1
 8012052:	f040 80fb 	bne.w	801224c <__gxx_personality_v0+0x278>
 8012056:	f000 f95b 	bl	8012310 <_ZSt9terminatev>
 801205a:	6a0f      	ldr	r7, [r1, #32]
 801205c:	4630      	mov	r0, r6
 801205e:	210d      	movs	r1, #13
 8012060:	f7ff ffab 	bl	8011fba <_Unwind_GetGR>
 8012064:	4287      	cmp	r7, r0
 8012066:	d1d4      	bne.n	8012012 <__gxx_personality_v0+0x3e>
 8012068:	2306      	movs	r3, #6
 801206a:	e7d3      	b.n	8012014 <__gxx_personality_v0+0x40>
 801206c:	f001 fa34 	bl	80134d8 <abort>
 8012070:	2301      	movs	r3, #1
 8012072:	e7cf      	b.n	8012014 <__gxx_personality_v0+0x40>
 8012074:	4630      	mov	r0, r6
 8012076:	f7ef ff0f 	bl	8001e98 <_Unwind_GetLanguageSpecificData>
 801207a:	4681      	mov	r9, r0
 801207c:	2800      	cmp	r0, #0
 801207e:	d0bb      	beq.n	8011ff8 <__gxx_personality_v0+0x24>
 8012080:	aa0c      	add	r2, sp, #48	@ 0x30
 8012082:	4601      	mov	r1, r0
 8012084:	4630      	mov	r0, r6
 8012086:	f7ff ff69 	bl	8011f5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 801208a:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 801208e:	9003      	str	r0, [sp, #12]
 8012090:	4631      	mov	r1, r6
 8012092:	4658      	mov	r0, fp
 8012094:	f7ff ff31 	bl	8011efa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012098:	210f      	movs	r1, #15
 801209a:	9002      	str	r0, [sp, #8]
 801209c:	900e      	str	r0, [sp, #56]	@ 0x38
 801209e:	4630      	mov	r0, r6
 80120a0:	f7ff ff8b 	bl	8011fba <_Unwind_GetGR>
 80120a4:	9a03      	ldr	r2, [sp, #12]
 80120a6:	f020 0801 	bic.w	r8, r0, #1
 80120aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80120ae:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80120b0:	4297      	cmp	r7, r2
 80120b2:	d815      	bhi.n	80120e0 <__gxx_personality_v0+0x10c>
 80120b4:	2700      	movs	r7, #0
 80120b6:	46b8      	mov	r8, r7
 80120b8:	f04f 0a01 	mov.w	sl, #1
 80120bc:	07eb      	lsls	r3, r5, #31
 80120be:	d5c2      	bpl.n	8012046 <__gxx_personality_v0+0x72>
 80120c0:	f1ba 0f02 	cmp.w	sl, #2
 80120c4:	d098      	beq.n	8011ff8 <__gxx_personality_v0+0x24>
 80120c6:	210d      	movs	r1, #13
 80120c8:	4630      	mov	r0, r6
 80120ca:	9d07      	ldr	r5, [sp, #28]
 80120cc:	f7ff ff75 	bl	8011fba <_Unwind_GetGR>
 80120d0:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 80120d4:	e9c4 0508 	strd	r0, r5, [r4, #32]
 80120d8:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 80120dc:	2006      	movs	r0, #6
 80120de:	e791      	b.n	8012004 <__gxx_personality_v0+0x30>
 80120e0:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 80120e4:	ab08      	add	r3, sp, #32
 80120e6:	4651      	mov	r1, sl
 80120e8:	2000      	movs	r0, #0
 80120ea:	f7ff ff27 	bl	8011f3c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80120ee:	ab09      	add	r3, sp, #36	@ 0x24
 80120f0:	4602      	mov	r2, r0
 80120f2:	4651      	mov	r1, sl
 80120f4:	2000      	movs	r0, #0
 80120f6:	f7ff ff21 	bl	8011f3c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80120fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80120fc:	4602      	mov	r2, r0
 80120fe:	4651      	mov	r1, sl
 8012100:	2000      	movs	r0, #0
 8012102:	f7ff ff1b 	bl	8011f3c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012106:	a90b      	add	r1, sp, #44	@ 0x2c
 8012108:	f7ff fe8a 	bl	8011e20 <_ZL12read_uleb128PKhPm>
 801210c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801210e:	9908      	ldr	r1, [sp, #32]
 8012110:	440b      	add	r3, r1
 8012112:	4543      	cmp	r3, r8
 8012114:	4602      	mov	r2, r0
 8012116:	d84b      	bhi.n	80121b0 <__gxx_personality_v0+0x1dc>
 8012118:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801211a:	440b      	add	r3, r1
 801211c:	4543      	cmp	r3, r8
 801211e:	d9c6      	bls.n	80120ae <__gxx_personality_v0+0xda>
 8012120:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8012124:	f1b8 0f00 	cmp.w	r8, #0
 8012128:	d001      	beq.n	801212e <__gxx_personality_v0+0x15a>
 801212a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801212c:	4498      	add	r8, r3
 801212e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012130:	b108      	cbz	r0, 8012136 <__gxx_personality_v0+0x162>
 8012132:	3801      	subs	r0, #1
 8012134:	4438      	add	r0, r7
 8012136:	f1b8 0f00 	cmp.w	r8, #0
 801213a:	f43f af5d 	beq.w	8011ff8 <__gxx_personality_v0+0x24>
 801213e:	2800      	cmp	r0, #0
 8012140:	f000 80d6 	beq.w	80122f0 <__gxx_personality_v0+0x31c>
 8012144:	f015 0308 	ands.w	r3, r5, #8
 8012148:	9304      	str	r3, [sp, #16]
 801214a:	d033      	beq.n	80121b4 <__gxx_personality_v0+0x1e0>
 801214c:	2347      	movs	r3, #71	@ 0x47
 801214e:	7023      	strb	r3, [r4, #0]
 8012150:	234e      	movs	r3, #78	@ 0x4e
 8012152:	7063      	strb	r3, [r4, #1]
 8012154:	2355      	movs	r3, #85	@ 0x55
 8012156:	70a3      	strb	r3, [r4, #2]
 8012158:	2343      	movs	r3, #67	@ 0x43
 801215a:	70e3      	strb	r3, [r4, #3]
 801215c:	2346      	movs	r3, #70	@ 0x46
 801215e:	7123      	strb	r3, [r4, #4]
 8012160:	234f      	movs	r3, #79	@ 0x4f
 8012162:	7163      	strb	r3, [r4, #5]
 8012164:	2352      	movs	r3, #82	@ 0x52
 8012166:	71a3      	strb	r3, [r4, #6]
 8012168:	2300      	movs	r3, #0
 801216a:	71e3      	strb	r3, [r4, #7]
 801216c:	2300      	movs	r3, #0
 801216e:	9303      	str	r3, [sp, #12]
 8012170:	a909      	add	r1, sp, #36	@ 0x24
 8012172:	f7ff fe64 	bl	8011e3e <_ZL12read_sleb128PKhPl>
 8012176:	a90a      	add	r1, sp, #40	@ 0x28
 8012178:	9005      	str	r0, [sp, #20]
 801217a:	f7ff fe60 	bl	8011e3e <_ZL12read_sleb128PKhPl>
 801217e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012180:	2f00      	cmp	r7, #0
 8012182:	d060      	beq.n	8012246 <__gxx_personality_v0+0x272>
 8012184:	dd3a      	ble.n	80121fc <__gxx_personality_v0+0x228>
 8012186:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801218a:	d033      	beq.n	80121f4 <__gxx_personality_v0+0x220>
 801218c:	f00b 0307 	and.w	r3, fp, #7
 8012190:	2b04      	cmp	r3, #4
 8012192:	f63f af6b 	bhi.w	801206c <__gxx_personality_v0+0x98>
 8012196:	a201      	add	r2, pc, #4	@ (adr r2, 801219c <__gxx_personality_v0+0x1c8>)
 8012198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801219c:	080121f9 	.word	0x080121f9
 80121a0:	0801206d 	.word	0x0801206d
 80121a4:	080121c7 	.word	0x080121c7
 80121a8:	080121f9 	.word	0x080121f9
 80121ac:	080121f1 	.word	0x080121f1
 80121b0:	463a      	mov	r2, r7
 80121b2:	e77c      	b.n	80120ae <__gxx_personality_v0+0xda>
 80121b4:	79e3      	ldrb	r3, [r4, #7]
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	bf0c      	ite	eq
 80121ba:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80121be:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 80121c2:	9307      	str	r3, [sp, #28]
 80121c4:	e7d2      	b.n	801216c <__gxx_personality_v0+0x198>
 80121c6:	2202      	movs	r2, #2
 80121c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80121ca:	ab0b      	add	r3, sp, #44	@ 0x2c
 80121cc:	fb07 1212 	mls	r2, r7, r2, r1
 80121d0:	4658      	mov	r0, fp
 80121d2:	9902      	ldr	r1, [sp, #8]
 80121d4:	f7ff fe4b 	bl	8011e6e <_ZL28read_encoded_value_with_basehjPKhPj>
 80121d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80121da:	b131      	cbz	r1, 80121ea <__gxx_personality_v0+0x216>
 80121dc:	b33c      	cbz	r4, 801222e <__gxx_personality_v0+0x25a>
 80121de:	ab07      	add	r3, sp, #28
 80121e0:	2200      	movs	r2, #0
 80121e2:	4620      	mov	r0, r4
 80121e4:	f7ff fd76 	bl	8011cd4 <__cxa_type_match>
 80121e8:	b308      	cbz	r0, 801222e <__gxx_personality_v0+0x25a>
 80121ea:	f04f 0a03 	mov.w	sl, #3
 80121ee:	e765      	b.n	80120bc <__gxx_personality_v0+0xe8>
 80121f0:	2208      	movs	r2, #8
 80121f2:	e7e9      	b.n	80121c8 <__gxx_personality_v0+0x1f4>
 80121f4:	2200      	movs	r2, #0
 80121f6:	e7e7      	b.n	80121c8 <__gxx_personality_v0+0x1f4>
 80121f8:	2204      	movs	r2, #4
 80121fa:	e7e5      	b.n	80121c8 <__gxx_personality_v0+0x1f4>
 80121fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121fe:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8012202:	1bd2      	subs	r2, r2, r7
 8012204:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8012208:	b1c4      	cbz	r4, 801223c <__gxx_personality_v0+0x268>
 801220a:	9904      	ldr	r1, [sp, #16]
 801220c:	b9b1      	cbnz	r1, 801223c <__gxx_personality_v0+0x268>
 801220e:	9b07      	ldr	r3, [sp, #28]
 8012210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012212:	f1aa 0a04 	sub.w	sl, sl, #4
 8012216:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 801221a:	2900      	cmp	r1, #0
 801221c:	d0e5      	beq.n	80121ea <__gxx_personality_v0+0x216>
 801221e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012220:	2200      	movs	r2, #0
 8012222:	4451      	add	r1, sl
 8012224:	4620      	mov	r0, r4
 8012226:	f7ff fd55 	bl	8011cd4 <__cxa_type_match>
 801222a:	2800      	cmp	r0, #0
 801222c:	d0f3      	beq.n	8012216 <__gxx_personality_v0+0x242>
 801222e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012230:	2800      	cmp	r0, #0
 8012232:	d059      	beq.n	80122e8 <__gxx_personality_v0+0x314>
 8012234:	9b05      	ldr	r3, [sp, #20]
 8012236:	4403      	add	r3, r0
 8012238:	4618      	mov	r0, r3
 801223a:	e799      	b.n	8012170 <__gxx_personality_v0+0x19c>
 801223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d1f4      	bne.n	801222e <__gxx_personality_v0+0x25a>
 8012244:	e7d1      	b.n	80121ea <__gxx_personality_v0+0x216>
 8012246:	2301      	movs	r3, #1
 8012248:	9303      	str	r3, [sp, #12]
 801224a:	e7f0      	b.n	801222e <__gxx_personality_v0+0x25a>
 801224c:	2f00      	cmp	r7, #0
 801224e:	da1f      	bge.n	8012290 <__gxx_personality_v0+0x2bc>
 8012250:	f000 f870 	bl	8012334 <_ZSt10unexpectedv>
 8012254:	f1ba 0f01 	cmp.w	sl, #1
 8012258:	d102      	bne.n	8012260 <__gxx_personality_v0+0x28c>
 801225a:	4620      	mov	r0, r4
 801225c:	f000 f940 	bl	80124e0 <__cxa_call_terminate>
 8012260:	2f00      	cmp	r7, #0
 8012262:	da15      	bge.n	8012290 <__gxx_personality_v0+0x2bc>
 8012264:	aa0c      	add	r2, sp, #48	@ 0x30
 8012266:	4649      	mov	r1, r9
 8012268:	4630      	mov	r0, r6
 801226a:	f7ff fe77 	bl	8011f5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 801226e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012272:	4631      	mov	r1, r6
 8012274:	f7ff fe41 	bl	8011efa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801227a:	43fa      	mvns	r2, r7
 801227c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012280:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8012284:	bb52      	cbnz	r2, 80122dc <__gxx_personality_v0+0x308>
 8012286:	2204      	movs	r2, #4
 8012288:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 801228c:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8012290:	2300      	movs	r3, #0
 8012292:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012294:	461a      	mov	r2, r3
 8012296:	4619      	mov	r1, r3
 8012298:	9500      	str	r5, [sp, #0]
 801229a:	4630      	mov	r0, r6
 801229c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801229e:	f7ef f867 	bl	8001370 <_Unwind_VRS_Set>
 80122a2:	2300      	movs	r3, #0
 80122a4:	4619      	mov	r1, r3
 80122a6:	2201      	movs	r2, #1
 80122a8:	9500      	str	r5, [sp, #0]
 80122aa:	4630      	mov	r0, r6
 80122ac:	970b      	str	r7, [sp, #44]	@ 0x2c
 80122ae:	f7ef f85f 	bl	8001370 <_Unwind_VRS_Set>
 80122b2:	210f      	movs	r1, #15
 80122b4:	4630      	mov	r0, r6
 80122b6:	f7ff fe80 	bl	8011fba <_Unwind_GetGR>
 80122ba:	f000 0001 	and.w	r0, r0, #1
 80122be:	ea40 0008 	orr.w	r0, r0, r8
 80122c2:	2300      	movs	r3, #0
 80122c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80122c6:	9500      	str	r5, [sp, #0]
 80122c8:	220f      	movs	r2, #15
 80122ca:	4619      	mov	r1, r3
 80122cc:	4630      	mov	r0, r6
 80122ce:	f7ef f84f 	bl	8001370 <_Unwind_VRS_Set>
 80122d2:	f1ba 0f02 	cmp.w	sl, #2
 80122d6:	d003      	beq.n	80122e0 <__gxx_personality_v0+0x30c>
 80122d8:	2007      	movs	r0, #7
 80122da:	e693      	b.n	8012004 <__gxx_personality_v0+0x30>
 80122dc:	3501      	adds	r5, #1
 80122de:	e7cf      	b.n	8012280 <__gxx_personality_v0+0x2ac>
 80122e0:	4620      	mov	r0, r4
 80122e2:	f7ff fd55 	bl	8011d90 <__cxa_begin_cleanup>
 80122e6:	e7f7      	b.n	80122d8 <__gxx_personality_v0+0x304>
 80122e8:	9b03      	ldr	r3, [sp, #12]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f43f ae84 	beq.w	8011ff8 <__gxx_personality_v0+0x24>
 80122f0:	2700      	movs	r7, #0
 80122f2:	f04f 0a02 	mov.w	sl, #2
 80122f6:	e6e1      	b.n	80120bc <__gxx_personality_v0+0xe8>

080122f8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80122f8:	b508      	push	{r3, lr}
 80122fa:	4780      	blx	r0
 80122fc:	f001 f8ec 	bl	80134d8 <abort>

08012300 <_ZSt13get_terminatev>:
 8012300:	4b02      	ldr	r3, [pc, #8]	@ (801230c <_ZSt13get_terminatev+0xc>)
 8012302:	6818      	ldr	r0, [r3, #0]
 8012304:	f3bf 8f5b 	dmb	ish
 8012308:	4770      	bx	lr
 801230a:	bf00      	nop
 801230c:	20000020 	.word	0x20000020

08012310 <_ZSt9terminatev>:
 8012310:	b508      	push	{r3, lr}
 8012312:	f7ff fff5 	bl	8012300 <_ZSt13get_terminatev>
 8012316:	f7ff ffef 	bl	80122f8 <_ZN10__cxxabiv111__terminateEPFvvE>

0801231a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 801231a:	b508      	push	{r3, lr}
 801231c:	4780      	blx	r0
 801231e:	f7ff fff7 	bl	8012310 <_ZSt9terminatev>
	...

08012324 <_ZSt14get_unexpectedv>:
 8012324:	4b02      	ldr	r3, [pc, #8]	@ (8012330 <_ZSt14get_unexpectedv+0xc>)
 8012326:	6818      	ldr	r0, [r3, #0]
 8012328:	f3bf 8f5b 	dmb	ish
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop
 8012330:	2000001c 	.word	0x2000001c

08012334 <_ZSt10unexpectedv>:
 8012334:	b508      	push	{r3, lr}
 8012336:	f7ff fff5 	bl	8012324 <_ZSt14get_unexpectedv>
 801233a:	f7ff ffee 	bl	801231a <_ZN10__cxxabiv112__unexpectedEPFvvE>

0801233e <_Znwj>:
 801233e:	2801      	cmp	r0, #1
 8012340:	bf38      	it	cc
 8012342:	2001      	movcc	r0, #1
 8012344:	b510      	push	{r4, lr}
 8012346:	4604      	mov	r4, r0
 8012348:	4620      	mov	r0, r4
 801234a:	f001 f8cd 	bl	80134e8 <malloc>
 801234e:	b100      	cbz	r0, 8012352 <_Znwj+0x14>
 8012350:	bd10      	pop	{r4, pc}
 8012352:	f000 f92f 	bl	80125b4 <_ZSt15get_new_handlerv>
 8012356:	b908      	cbnz	r0, 801235c <_Znwj+0x1e>
 8012358:	f001 f8be 	bl	80134d8 <abort>
 801235c:	4780      	blx	r0
 801235e:	e7f3      	b.n	8012348 <_Znwj+0xa>

08012360 <_Znaj>:
 8012360:	f7ff bfed 	b.w	801233e <_Znwj>

08012364 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8012364:	b510      	push	{r4, lr}
 8012366:	4b03      	ldr	r3, [pc, #12]	@ (8012374 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8012368:	6003      	str	r3, [r0, #0]
 801236a:	4604      	mov	r4, r0
 801236c:	f7ff fc38 	bl	8011be0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012370:	4620      	mov	r0, r4
 8012372:	bd10      	pop	{r4, pc}
 8012374:	08017710 	.word	0x08017710

08012378 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8012378:	b510      	push	{r4, lr}
 801237a:	4604      	mov	r4, r0
 801237c:	f7ff fff2 	bl	8012364 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8012380:	4620      	mov	r0, r4
 8012382:	210c      	movs	r1, #12
 8012384:	f7ff fc80 	bl	8011c88 <_ZdlPvj>
 8012388:	4620      	mov	r0, r4
 801238a:	bd10      	pop	{r4, pc}

0801238c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012390:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012394:	4590      	cmp	r8, r2
 8012396:	4606      	mov	r6, r0
 8012398:	460f      	mov	r7, r1
 801239a:	4615      	mov	r5, r2
 801239c:	461c      	mov	r4, r3
 801239e:	d00b      	beq.n	80123b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80123a0:	68b0      	ldr	r0, [r6, #8]
 80123a2:	6803      	ldr	r3, [r0, #0]
 80123a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80123a8:	6a1e      	ldr	r6, [r3, #32]
 80123aa:	462a      	mov	r2, r5
 80123ac:	4623      	mov	r3, r4
 80123ae:	4639      	mov	r1, r7
 80123b0:	46b4      	mov	ip, r6
 80123b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123b6:	4760      	bx	ip
 80123b8:	4619      	mov	r1, r3
 80123ba:	f000 f857 	bl	801246c <_ZNKSt9type_info7__equalERKS_>
 80123be:	2800      	cmp	r0, #0
 80123c0:	d0ee      	beq.n	80123a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80123c2:	2006      	movs	r0, #6
 80123c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080123c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80123c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123cc:	460d      	mov	r5, r1
 80123ce:	4619      	mov	r1, r3
 80123d0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 80123d4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 80123d8:	4681      	mov	r9, r0
 80123da:	4617      	mov	r7, r2
 80123dc:	4698      	mov	r8, r3
 80123de:	f000 f845 	bl	801246c <_ZNKSt9type_info7__equalERKS_>
 80123e2:	b190      	cbz	r0, 801240a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80123e4:	2d00      	cmp	r5, #0
 80123e6:	6034      	str	r4, [r6, #0]
 80123e8:	7137      	strb	r7, [r6, #4]
 80123ea:	db09      	blt.n	8012400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80123ec:	442c      	add	r4, r5
 80123ee:	45a2      	cmp	sl, r4
 80123f0:	bf14      	ite	ne
 80123f2:	2401      	movne	r4, #1
 80123f4:	2406      	moveq	r4, #6
 80123f6:	71b4      	strb	r4, [r6, #6]
 80123f8:	2000      	movs	r0, #0
 80123fa:	b001      	add	sp, #4
 80123fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012400:	3502      	adds	r5, #2
 8012402:	d1f9      	bne.n	80123f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012404:	2301      	movs	r3, #1
 8012406:	71b3      	strb	r3, [r6, #6]
 8012408:	e7f6      	b.n	80123f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801240a:	4554      	cmp	r4, sl
 801240c:	d106      	bne.n	801241c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801240e:	4659      	mov	r1, fp
 8012410:	4648      	mov	r0, r9
 8012412:	f000 f82b 	bl	801246c <_ZNKSt9type_info7__equalERKS_>
 8012416:	b108      	cbz	r0, 801241c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8012418:	7177      	strb	r7, [r6, #5]
 801241a:	e7ed      	b.n	80123f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801241c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8012420:	6803      	ldr	r3, [r0, #0]
 8012422:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8012426:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801242a:	69dc      	ldr	r4, [r3, #28]
 801242c:	463a      	mov	r2, r7
 801242e:	4643      	mov	r3, r8
 8012430:	4629      	mov	r1, r5
 8012432:	46a4      	mov	ip, r4
 8012434:	b001      	add	sp, #4
 8012436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243a:	4760      	bx	ip

0801243c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012440:	4607      	mov	r7, r0
 8012442:	460c      	mov	r4, r1
 8012444:	4615      	mov	r5, r2
 8012446:	461e      	mov	r6, r3
 8012448:	f7ff fbfd 	bl	8011c46 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801244c:	b948      	cbnz	r0, 8012462 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801244e:	68b8      	ldr	r0, [r7, #8]
 8012450:	6803      	ldr	r3, [r0, #0]
 8012452:	699f      	ldr	r7, [r3, #24]
 8012454:	462a      	mov	r2, r5
 8012456:	4633      	mov	r3, r6
 8012458:	4621      	mov	r1, r4
 801245a:	46bc      	mov	ip, r7
 801245c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012460:	4760      	bx	ip
 8012462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012466 <_ZNSt9type_infoD1Ev>:
 8012466:	4770      	bx	lr

08012468 <_ZNKSt9type_info14__is_pointer_pEv>:
 8012468:	2000      	movs	r0, #0
 801246a:	4770      	bx	lr

0801246c <_ZNKSt9type_info7__equalERKS_>:
 801246c:	4281      	cmp	r1, r0
 801246e:	b508      	push	{r3, lr}
 8012470:	d00e      	beq.n	8012490 <_ZNKSt9type_info7__equalERKS_+0x24>
 8012472:	6840      	ldr	r0, [r0, #4]
 8012474:	7803      	ldrb	r3, [r0, #0]
 8012476:	2b2a      	cmp	r3, #42	@ 0x2a
 8012478:	d00c      	beq.n	8012494 <_ZNKSt9type_info7__equalERKS_+0x28>
 801247a:	6849      	ldr	r1, [r1, #4]
 801247c:	780b      	ldrb	r3, [r1, #0]
 801247e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012480:	bf08      	it	eq
 8012482:	3101      	addeq	r1, #1
 8012484:	f7ed fec4 	bl	8000210 <strcmp>
 8012488:	fab0 f080 	clz	r0, r0
 801248c:	0940      	lsrs	r0, r0, #5
 801248e:	bd08      	pop	{r3, pc}
 8012490:	2001      	movs	r0, #1
 8012492:	e7fc      	b.n	801248e <_ZNKSt9type_info7__equalERKS_+0x22>
 8012494:	2000      	movs	r0, #0
 8012496:	e7fa      	b.n	801248e <_ZNKSt9type_info7__equalERKS_+0x22>

08012498 <__aeabi_atexit>:
 8012498:	460b      	mov	r3, r1
 801249a:	4601      	mov	r1, r0
 801249c:	4618      	mov	r0, r3
 801249e:	f001 b8e1 	b.w	8013664 <__cxa_atexit>

080124a2 <_ZdlPv>:
 80124a2:	f001 b829 	b.w	80134f8 <free>

080124a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80124a6:	7803      	ldrb	r3, [r0, #0]
 80124a8:	2b47      	cmp	r3, #71	@ 0x47
 80124aa:	d117      	bne.n	80124dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80124ac:	7843      	ldrb	r3, [r0, #1]
 80124ae:	2b4e      	cmp	r3, #78	@ 0x4e
 80124b0:	d114      	bne.n	80124dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80124b2:	7883      	ldrb	r3, [r0, #2]
 80124b4:	2b55      	cmp	r3, #85	@ 0x55
 80124b6:	d111      	bne.n	80124dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80124b8:	78c3      	ldrb	r3, [r0, #3]
 80124ba:	2b43      	cmp	r3, #67	@ 0x43
 80124bc:	d10e      	bne.n	80124dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80124be:	7903      	ldrb	r3, [r0, #4]
 80124c0:	2b43      	cmp	r3, #67	@ 0x43
 80124c2:	d10b      	bne.n	80124dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80124c4:	7943      	ldrb	r3, [r0, #5]
 80124c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80124c8:	d108      	bne.n	80124dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80124ca:	7983      	ldrb	r3, [r0, #6]
 80124cc:	2b2b      	cmp	r3, #43	@ 0x2b
 80124ce:	d105      	bne.n	80124dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80124d0:	79c0      	ldrb	r0, [r0, #7]
 80124d2:	2801      	cmp	r0, #1
 80124d4:	bf8c      	ite	hi
 80124d6:	2000      	movhi	r0, #0
 80124d8:	2001      	movls	r0, #1
 80124da:	4770      	bx	lr
 80124dc:	2000      	movs	r0, #0
 80124de:	4770      	bx	lr

080124e0 <__cxa_call_terminate>:
 80124e0:	b510      	push	{r4, lr}
 80124e2:	4604      	mov	r4, r0
 80124e4:	b148      	cbz	r0, 80124fa <__cxa_call_terminate+0x1a>
 80124e6:	f000 f83b 	bl	8012560 <__cxa_begin_catch>
 80124ea:	4620      	mov	r0, r4
 80124ec:	f7ff ffdb 	bl	80124a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80124f0:	b118      	cbz	r0, 80124fa <__cxa_call_terminate+0x1a>
 80124f2:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80124f6:	f7ff feff 	bl	80122f8 <_ZN10__cxxabiv111__terminateEPFvvE>
 80124fa:	f7ff ff09 	bl	8012310 <_ZSt9terminatev>

080124fe <__cxa_call_unexpected>:
 80124fe:	b538      	push	{r3, r4, r5, lr}
 8012500:	4602      	mov	r2, r0
 8012502:	f7ff ffd0 	bl	80124a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012506:	4604      	mov	r4, r0
 8012508:	b140      	cbz	r0, 801251c <__cxa_call_unexpected+0x1e>
 801250a:	f852 4c18 	ldr.w	r4, [r2, #-24]
 801250e:	2500      	movs	r5, #0
 8012510:	4610      	mov	r0, r2
 8012512:	f000 f825 	bl	8012560 <__cxa_begin_catch>
 8012516:	b11d      	cbz	r5, 8012520 <__cxa_call_unexpected+0x22>
 8012518:	f7ff ff0c 	bl	8012334 <_ZSt10unexpectedv>
 801251c:	2501      	movs	r5, #1
 801251e:	e7f7      	b.n	8012510 <__cxa_call_unexpected+0x12>
 8012520:	4620      	mov	r0, r4
 8012522:	f7ff fefa 	bl	801231a <_ZN10__cxxabiv112__unexpectedEPFvvE>

08012526 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012526:	7803      	ldrb	r3, [r0, #0]
 8012528:	2b47      	cmp	r3, #71	@ 0x47
 801252a:	d117      	bne.n	801255c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801252c:	7843      	ldrb	r3, [r0, #1]
 801252e:	2b4e      	cmp	r3, #78	@ 0x4e
 8012530:	d114      	bne.n	801255c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012532:	7883      	ldrb	r3, [r0, #2]
 8012534:	2b55      	cmp	r3, #85	@ 0x55
 8012536:	d111      	bne.n	801255c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012538:	78c3      	ldrb	r3, [r0, #3]
 801253a:	2b43      	cmp	r3, #67	@ 0x43
 801253c:	d10e      	bne.n	801255c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801253e:	7903      	ldrb	r3, [r0, #4]
 8012540:	2b43      	cmp	r3, #67	@ 0x43
 8012542:	d10b      	bne.n	801255c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012544:	7943      	ldrb	r3, [r0, #5]
 8012546:	2b2b      	cmp	r3, #43	@ 0x2b
 8012548:	d108      	bne.n	801255c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801254a:	7983      	ldrb	r3, [r0, #6]
 801254c:	2b2b      	cmp	r3, #43	@ 0x2b
 801254e:	d105      	bne.n	801255c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012550:	79c0      	ldrb	r0, [r0, #7]
 8012552:	2801      	cmp	r0, #1
 8012554:	bf8c      	ite	hi
 8012556:	2000      	movhi	r0, #0
 8012558:	2001      	movls	r0, #1
 801255a:	4770      	bx	lr
 801255c:	2000      	movs	r0, #0
 801255e:	4770      	bx	lr

08012560 <__cxa_begin_catch>:
 8012560:	b538      	push	{r3, r4, r5, lr}
 8012562:	4604      	mov	r4, r0
 8012564:	f7ff fc4c 	bl	8011e00 <__cxa_get_globals>
 8012568:	6805      	ldr	r5, [r0, #0]
 801256a:	4602      	mov	r2, r0
 801256c:	4620      	mov	r0, r4
 801256e:	f1a4 0120 	sub.w	r1, r4, #32
 8012572:	f7ff ffd8 	bl	8012526 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012576:	b928      	cbnz	r0, 8012584 <__cxa_begin_catch+0x24>
 8012578:	b10d      	cbz	r5, 801257e <__cxa_begin_catch+0x1e>
 801257a:	f7ff fec9 	bl	8012310 <_ZSt9terminatev>
 801257e:	6011      	str	r1, [r2, #0]
 8012580:	4628      	mov	r0, r5
 8012582:	bd38      	pop	{r3, r4, r5, pc}
 8012584:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	bfb4      	ite	lt
 801258c:	f1c3 0301 	rsblt	r3, r3, #1
 8012590:	3301      	addge	r3, #1
 8012592:	f844 3c0c 	str.w	r3, [r4, #-12]
 8012596:	6853      	ldr	r3, [r2, #4]
 8012598:	428d      	cmp	r5, r1
 801259a:	f103 33ff 	add.w	r3, r3, #4294967295
 801259e:	6053      	str	r3, [r2, #4]
 80125a0:	4620      	mov	r0, r4
 80125a2:	bf1c      	itt	ne
 80125a4:	f844 5c10 	strne.w	r5, [r4, #-16]
 80125a8:	6011      	strne	r1, [r2, #0]
 80125aa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80125ac:	f7ee feb2 	bl	8001314 <_Unwind_Complete>
 80125b0:	e7e6      	b.n	8012580 <__cxa_begin_catch+0x20>
	...

080125b4 <_ZSt15get_new_handlerv>:
 80125b4:	4b02      	ldr	r3, [pc, #8]	@ (80125c0 <_ZSt15get_new_handlerv+0xc>)
 80125b6:	6818      	ldr	r0, [r3, #0]
 80125b8:	f3bf 8f5b 	dmb	ish
 80125bc:	4770      	bx	lr
 80125be:	bf00      	nop
 80125c0:	200005b4 	.word	0x200005b4

080125c4 <pow>:
 80125c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125c6:	ed2d 8b02 	vpush	{d8}
 80125ca:	eeb0 8a40 	vmov.f32	s16, s0
 80125ce:	eef0 8a60 	vmov.f32	s17, s1
 80125d2:	ec55 4b11 	vmov	r4, r5, d1
 80125d6:	f000 f977 	bl	80128c8 <__ieee754_pow>
 80125da:	4622      	mov	r2, r4
 80125dc:	462b      	mov	r3, r5
 80125de:	4620      	mov	r0, r4
 80125e0:	4629      	mov	r1, r5
 80125e2:	ec57 6b10 	vmov	r6, r7, d0
 80125e6:	f7ee fad1 	bl	8000b8c <__aeabi_dcmpun>
 80125ea:	2800      	cmp	r0, #0
 80125ec:	d13b      	bne.n	8012666 <pow+0xa2>
 80125ee:	ec51 0b18 	vmov	r0, r1, d8
 80125f2:	2200      	movs	r2, #0
 80125f4:	2300      	movs	r3, #0
 80125f6:	f7ee fa97 	bl	8000b28 <__aeabi_dcmpeq>
 80125fa:	b1b8      	cbz	r0, 801262c <pow+0x68>
 80125fc:	2200      	movs	r2, #0
 80125fe:	2300      	movs	r3, #0
 8012600:	4620      	mov	r0, r4
 8012602:	4629      	mov	r1, r5
 8012604:	f7ee fa90 	bl	8000b28 <__aeabi_dcmpeq>
 8012608:	2800      	cmp	r0, #0
 801260a:	d146      	bne.n	801269a <pow+0xd6>
 801260c:	ec45 4b10 	vmov	d0, r4, r5
 8012610:	f000 f874 	bl	80126fc <finite>
 8012614:	b338      	cbz	r0, 8012666 <pow+0xa2>
 8012616:	2200      	movs	r2, #0
 8012618:	2300      	movs	r3, #0
 801261a:	4620      	mov	r0, r4
 801261c:	4629      	mov	r1, r5
 801261e:	f7ee fa8d 	bl	8000b3c <__aeabi_dcmplt>
 8012622:	b300      	cbz	r0, 8012666 <pow+0xa2>
 8012624:	f001 fe50 	bl	80142c8 <__errno>
 8012628:	2322      	movs	r3, #34	@ 0x22
 801262a:	e01b      	b.n	8012664 <pow+0xa0>
 801262c:	ec47 6b10 	vmov	d0, r6, r7
 8012630:	f000 f864 	bl	80126fc <finite>
 8012634:	b9e0      	cbnz	r0, 8012670 <pow+0xac>
 8012636:	eeb0 0a48 	vmov.f32	s0, s16
 801263a:	eef0 0a68 	vmov.f32	s1, s17
 801263e:	f000 f85d 	bl	80126fc <finite>
 8012642:	b1a8      	cbz	r0, 8012670 <pow+0xac>
 8012644:	ec45 4b10 	vmov	d0, r4, r5
 8012648:	f000 f858 	bl	80126fc <finite>
 801264c:	b180      	cbz	r0, 8012670 <pow+0xac>
 801264e:	4632      	mov	r2, r6
 8012650:	463b      	mov	r3, r7
 8012652:	4630      	mov	r0, r6
 8012654:	4639      	mov	r1, r7
 8012656:	f7ee fa99 	bl	8000b8c <__aeabi_dcmpun>
 801265a:	2800      	cmp	r0, #0
 801265c:	d0e2      	beq.n	8012624 <pow+0x60>
 801265e:	f001 fe33 	bl	80142c8 <__errno>
 8012662:	2321      	movs	r3, #33	@ 0x21
 8012664:	6003      	str	r3, [r0, #0]
 8012666:	ecbd 8b02 	vpop	{d8}
 801266a:	ec47 6b10 	vmov	d0, r6, r7
 801266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012670:	2200      	movs	r2, #0
 8012672:	2300      	movs	r3, #0
 8012674:	4630      	mov	r0, r6
 8012676:	4639      	mov	r1, r7
 8012678:	f7ee fa56 	bl	8000b28 <__aeabi_dcmpeq>
 801267c:	2800      	cmp	r0, #0
 801267e:	d0f2      	beq.n	8012666 <pow+0xa2>
 8012680:	eeb0 0a48 	vmov.f32	s0, s16
 8012684:	eef0 0a68 	vmov.f32	s1, s17
 8012688:	f000 f838 	bl	80126fc <finite>
 801268c:	2800      	cmp	r0, #0
 801268e:	d0ea      	beq.n	8012666 <pow+0xa2>
 8012690:	ec45 4b10 	vmov	d0, r4, r5
 8012694:	f000 f832 	bl	80126fc <finite>
 8012698:	e7c3      	b.n	8012622 <pow+0x5e>
 801269a:	4f01      	ldr	r7, [pc, #4]	@ (80126a0 <pow+0xdc>)
 801269c:	2600      	movs	r6, #0
 801269e:	e7e2      	b.n	8012666 <pow+0xa2>
 80126a0:	3ff00000 	.word	0x3ff00000

080126a4 <sqrt>:
 80126a4:	b538      	push	{r3, r4, r5, lr}
 80126a6:	ed2d 8b02 	vpush	{d8}
 80126aa:	ec55 4b10 	vmov	r4, r5, d0
 80126ae:	f000 f831 	bl	8012714 <__ieee754_sqrt>
 80126b2:	4622      	mov	r2, r4
 80126b4:	462b      	mov	r3, r5
 80126b6:	4620      	mov	r0, r4
 80126b8:	4629      	mov	r1, r5
 80126ba:	eeb0 8a40 	vmov.f32	s16, s0
 80126be:	eef0 8a60 	vmov.f32	s17, s1
 80126c2:	f7ee fa63 	bl	8000b8c <__aeabi_dcmpun>
 80126c6:	b990      	cbnz	r0, 80126ee <sqrt+0x4a>
 80126c8:	2200      	movs	r2, #0
 80126ca:	2300      	movs	r3, #0
 80126cc:	4620      	mov	r0, r4
 80126ce:	4629      	mov	r1, r5
 80126d0:	f7ee fa34 	bl	8000b3c <__aeabi_dcmplt>
 80126d4:	b158      	cbz	r0, 80126ee <sqrt+0x4a>
 80126d6:	f001 fdf7 	bl	80142c8 <__errno>
 80126da:	2321      	movs	r3, #33	@ 0x21
 80126dc:	6003      	str	r3, [r0, #0]
 80126de:	2200      	movs	r2, #0
 80126e0:	2300      	movs	r3, #0
 80126e2:	4610      	mov	r0, r2
 80126e4:	4619      	mov	r1, r3
 80126e6:	f7ee f8e1 	bl	80008ac <__aeabi_ddiv>
 80126ea:	ec41 0b18 	vmov	d8, r0, r1
 80126ee:	eeb0 0a48 	vmov.f32	s0, s16
 80126f2:	eef0 0a68 	vmov.f32	s1, s17
 80126f6:	ecbd 8b02 	vpop	{d8}
 80126fa:	bd38      	pop	{r3, r4, r5, pc}

080126fc <finite>:
 80126fc:	b082      	sub	sp, #8
 80126fe:	ed8d 0b00 	vstr	d0, [sp]
 8012702:	9801      	ldr	r0, [sp, #4]
 8012704:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012708:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801270c:	0fc0      	lsrs	r0, r0, #31
 801270e:	b002      	add	sp, #8
 8012710:	4770      	bx	lr
	...

08012714 <__ieee754_sqrt>:
 8012714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012718:	4a68      	ldr	r2, [pc, #416]	@ (80128bc <__ieee754_sqrt+0x1a8>)
 801271a:	ec55 4b10 	vmov	r4, r5, d0
 801271e:	43aa      	bics	r2, r5
 8012720:	462b      	mov	r3, r5
 8012722:	4621      	mov	r1, r4
 8012724:	d110      	bne.n	8012748 <__ieee754_sqrt+0x34>
 8012726:	4622      	mov	r2, r4
 8012728:	4620      	mov	r0, r4
 801272a:	4629      	mov	r1, r5
 801272c:	f7ed ff94 	bl	8000658 <__aeabi_dmul>
 8012730:	4602      	mov	r2, r0
 8012732:	460b      	mov	r3, r1
 8012734:	4620      	mov	r0, r4
 8012736:	4629      	mov	r1, r5
 8012738:	f7ed fdd8 	bl	80002ec <__adddf3>
 801273c:	4604      	mov	r4, r0
 801273e:	460d      	mov	r5, r1
 8012740:	ec45 4b10 	vmov	d0, r4, r5
 8012744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012748:	2d00      	cmp	r5, #0
 801274a:	dc0e      	bgt.n	801276a <__ieee754_sqrt+0x56>
 801274c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012750:	4322      	orrs	r2, r4
 8012752:	d0f5      	beq.n	8012740 <__ieee754_sqrt+0x2c>
 8012754:	b19d      	cbz	r5, 801277e <__ieee754_sqrt+0x6a>
 8012756:	4622      	mov	r2, r4
 8012758:	4620      	mov	r0, r4
 801275a:	4629      	mov	r1, r5
 801275c:	f7ed fdc4 	bl	80002e8 <__aeabi_dsub>
 8012760:	4602      	mov	r2, r0
 8012762:	460b      	mov	r3, r1
 8012764:	f7ee f8a2 	bl	80008ac <__aeabi_ddiv>
 8012768:	e7e8      	b.n	801273c <__ieee754_sqrt+0x28>
 801276a:	152a      	asrs	r2, r5, #20
 801276c:	d115      	bne.n	801279a <__ieee754_sqrt+0x86>
 801276e:	2000      	movs	r0, #0
 8012770:	e009      	b.n	8012786 <__ieee754_sqrt+0x72>
 8012772:	0acb      	lsrs	r3, r1, #11
 8012774:	3a15      	subs	r2, #21
 8012776:	0549      	lsls	r1, r1, #21
 8012778:	2b00      	cmp	r3, #0
 801277a:	d0fa      	beq.n	8012772 <__ieee754_sqrt+0x5e>
 801277c:	e7f7      	b.n	801276e <__ieee754_sqrt+0x5a>
 801277e:	462a      	mov	r2, r5
 8012780:	e7fa      	b.n	8012778 <__ieee754_sqrt+0x64>
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	3001      	adds	r0, #1
 8012786:	02dc      	lsls	r4, r3, #11
 8012788:	d5fb      	bpl.n	8012782 <__ieee754_sqrt+0x6e>
 801278a:	1e44      	subs	r4, r0, #1
 801278c:	1b12      	subs	r2, r2, r4
 801278e:	f1c0 0420 	rsb	r4, r0, #32
 8012792:	fa21 f404 	lsr.w	r4, r1, r4
 8012796:	4323      	orrs	r3, r4
 8012798:	4081      	lsls	r1, r0
 801279a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801279e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80127a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80127a6:	07d2      	lsls	r2, r2, #31
 80127a8:	bf5c      	itt	pl
 80127aa:	005b      	lslpl	r3, r3, #1
 80127ac:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80127b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80127b4:	bf58      	it	pl
 80127b6:	0049      	lslpl	r1, r1, #1
 80127b8:	2600      	movs	r6, #0
 80127ba:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80127be:	106d      	asrs	r5, r5, #1
 80127c0:	0049      	lsls	r1, r1, #1
 80127c2:	2016      	movs	r0, #22
 80127c4:	4632      	mov	r2, r6
 80127c6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80127ca:	1917      	adds	r7, r2, r4
 80127cc:	429f      	cmp	r7, r3
 80127ce:	bfde      	ittt	le
 80127d0:	193a      	addle	r2, r7, r4
 80127d2:	1bdb      	suble	r3, r3, r7
 80127d4:	1936      	addle	r6, r6, r4
 80127d6:	0fcf      	lsrs	r7, r1, #31
 80127d8:	3801      	subs	r0, #1
 80127da:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80127de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80127e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80127e6:	d1f0      	bne.n	80127ca <__ieee754_sqrt+0xb6>
 80127e8:	4604      	mov	r4, r0
 80127ea:	2720      	movs	r7, #32
 80127ec:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80127f0:	429a      	cmp	r2, r3
 80127f2:	eb00 0e0c 	add.w	lr, r0, ip
 80127f6:	db02      	blt.n	80127fe <__ieee754_sqrt+0xea>
 80127f8:	d113      	bne.n	8012822 <__ieee754_sqrt+0x10e>
 80127fa:	458e      	cmp	lr, r1
 80127fc:	d811      	bhi.n	8012822 <__ieee754_sqrt+0x10e>
 80127fe:	f1be 0f00 	cmp.w	lr, #0
 8012802:	eb0e 000c 	add.w	r0, lr, ip
 8012806:	da42      	bge.n	801288e <__ieee754_sqrt+0x17a>
 8012808:	2800      	cmp	r0, #0
 801280a:	db40      	blt.n	801288e <__ieee754_sqrt+0x17a>
 801280c:	f102 0801 	add.w	r8, r2, #1
 8012810:	1a9b      	subs	r3, r3, r2
 8012812:	458e      	cmp	lr, r1
 8012814:	bf88      	it	hi
 8012816:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801281a:	eba1 010e 	sub.w	r1, r1, lr
 801281e:	4464      	add	r4, ip
 8012820:	4642      	mov	r2, r8
 8012822:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012826:	3f01      	subs	r7, #1
 8012828:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801282c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012830:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012834:	d1dc      	bne.n	80127f0 <__ieee754_sqrt+0xdc>
 8012836:	4319      	orrs	r1, r3
 8012838:	d01b      	beq.n	8012872 <__ieee754_sqrt+0x15e>
 801283a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80128c0 <__ieee754_sqrt+0x1ac>
 801283e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80128c4 <__ieee754_sqrt+0x1b0>
 8012842:	e9da 0100 	ldrd	r0, r1, [sl]
 8012846:	e9db 2300 	ldrd	r2, r3, [fp]
 801284a:	f7ed fd4d 	bl	80002e8 <__aeabi_dsub>
 801284e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012852:	4602      	mov	r2, r0
 8012854:	460b      	mov	r3, r1
 8012856:	4640      	mov	r0, r8
 8012858:	4649      	mov	r1, r9
 801285a:	f7ee f979 	bl	8000b50 <__aeabi_dcmple>
 801285e:	b140      	cbz	r0, 8012872 <__ieee754_sqrt+0x15e>
 8012860:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012864:	e9da 0100 	ldrd	r0, r1, [sl]
 8012868:	e9db 2300 	ldrd	r2, r3, [fp]
 801286c:	d111      	bne.n	8012892 <__ieee754_sqrt+0x17e>
 801286e:	3601      	adds	r6, #1
 8012870:	463c      	mov	r4, r7
 8012872:	1072      	asrs	r2, r6, #1
 8012874:	0863      	lsrs	r3, r4, #1
 8012876:	07f1      	lsls	r1, r6, #31
 8012878:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801287c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012880:	bf48      	it	mi
 8012882:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012886:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801288a:	4618      	mov	r0, r3
 801288c:	e756      	b.n	801273c <__ieee754_sqrt+0x28>
 801288e:	4690      	mov	r8, r2
 8012890:	e7be      	b.n	8012810 <__ieee754_sqrt+0xfc>
 8012892:	f7ed fd2b 	bl	80002ec <__adddf3>
 8012896:	e9da 8900 	ldrd	r8, r9, [sl]
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	4640      	mov	r0, r8
 80128a0:	4649      	mov	r1, r9
 80128a2:	f7ee f94b 	bl	8000b3c <__aeabi_dcmplt>
 80128a6:	b120      	cbz	r0, 80128b2 <__ieee754_sqrt+0x19e>
 80128a8:	1ca0      	adds	r0, r4, #2
 80128aa:	bf08      	it	eq
 80128ac:	3601      	addeq	r6, #1
 80128ae:	3402      	adds	r4, #2
 80128b0:	e7df      	b.n	8012872 <__ieee754_sqrt+0x15e>
 80128b2:	1c63      	adds	r3, r4, #1
 80128b4:	f023 0401 	bic.w	r4, r3, #1
 80128b8:	e7db      	b.n	8012872 <__ieee754_sqrt+0x15e>
 80128ba:	bf00      	nop
 80128bc:	7ff00000 	.word	0x7ff00000
 80128c0:	20000030 	.word	0x20000030
 80128c4:	20000028 	.word	0x20000028

080128c8 <__ieee754_pow>:
 80128c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	b091      	sub	sp, #68	@ 0x44
 80128ce:	ed8d 1b00 	vstr	d1, [sp]
 80128d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80128d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80128da:	ea5a 0001 	orrs.w	r0, sl, r1
 80128de:	ec57 6b10 	vmov	r6, r7, d0
 80128e2:	d113      	bne.n	801290c <__ieee754_pow+0x44>
 80128e4:	19b3      	adds	r3, r6, r6
 80128e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80128ea:	4152      	adcs	r2, r2
 80128ec:	4298      	cmp	r0, r3
 80128ee:	4b98      	ldr	r3, [pc, #608]	@ (8012b50 <__ieee754_pow+0x288>)
 80128f0:	4193      	sbcs	r3, r2
 80128f2:	f080 84ea 	bcs.w	80132ca <__ieee754_pow+0xa02>
 80128f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128fa:	4630      	mov	r0, r6
 80128fc:	4639      	mov	r1, r7
 80128fe:	f7ed fcf5 	bl	80002ec <__adddf3>
 8012902:	ec41 0b10 	vmov	d0, r0, r1
 8012906:	b011      	add	sp, #68	@ 0x44
 8012908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290c:	4a91      	ldr	r2, [pc, #580]	@ (8012b54 <__ieee754_pow+0x28c>)
 801290e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012912:	4590      	cmp	r8, r2
 8012914:	463d      	mov	r5, r7
 8012916:	4633      	mov	r3, r6
 8012918:	d806      	bhi.n	8012928 <__ieee754_pow+0x60>
 801291a:	d101      	bne.n	8012920 <__ieee754_pow+0x58>
 801291c:	2e00      	cmp	r6, #0
 801291e:	d1ea      	bne.n	80128f6 <__ieee754_pow+0x2e>
 8012920:	4592      	cmp	sl, r2
 8012922:	d801      	bhi.n	8012928 <__ieee754_pow+0x60>
 8012924:	d10e      	bne.n	8012944 <__ieee754_pow+0x7c>
 8012926:	b169      	cbz	r1, 8012944 <__ieee754_pow+0x7c>
 8012928:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801292c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012930:	431d      	orrs	r5, r3
 8012932:	d1e0      	bne.n	80128f6 <__ieee754_pow+0x2e>
 8012934:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012938:	18db      	adds	r3, r3, r3
 801293a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801293e:	4152      	adcs	r2, r2
 8012940:	429d      	cmp	r5, r3
 8012942:	e7d4      	b.n	80128ee <__ieee754_pow+0x26>
 8012944:	2d00      	cmp	r5, #0
 8012946:	46c3      	mov	fp, r8
 8012948:	da3a      	bge.n	80129c0 <__ieee754_pow+0xf8>
 801294a:	4a83      	ldr	r2, [pc, #524]	@ (8012b58 <__ieee754_pow+0x290>)
 801294c:	4592      	cmp	sl, r2
 801294e:	d84d      	bhi.n	80129ec <__ieee754_pow+0x124>
 8012950:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012954:	4592      	cmp	sl, r2
 8012956:	f240 84c7 	bls.w	80132e8 <__ieee754_pow+0xa20>
 801295a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801295e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012962:	2a14      	cmp	r2, #20
 8012964:	dd0f      	ble.n	8012986 <__ieee754_pow+0xbe>
 8012966:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801296a:	fa21 f402 	lsr.w	r4, r1, r2
 801296e:	fa04 f202 	lsl.w	r2, r4, r2
 8012972:	428a      	cmp	r2, r1
 8012974:	f040 84b8 	bne.w	80132e8 <__ieee754_pow+0xa20>
 8012978:	f004 0401 	and.w	r4, r4, #1
 801297c:	f1c4 0402 	rsb	r4, r4, #2
 8012980:	2900      	cmp	r1, #0
 8012982:	d158      	bne.n	8012a36 <__ieee754_pow+0x16e>
 8012984:	e00e      	b.n	80129a4 <__ieee754_pow+0xdc>
 8012986:	2900      	cmp	r1, #0
 8012988:	d154      	bne.n	8012a34 <__ieee754_pow+0x16c>
 801298a:	f1c2 0214 	rsb	r2, r2, #20
 801298e:	fa4a f402 	asr.w	r4, sl, r2
 8012992:	fa04 f202 	lsl.w	r2, r4, r2
 8012996:	4552      	cmp	r2, sl
 8012998:	f040 84a3 	bne.w	80132e2 <__ieee754_pow+0xa1a>
 801299c:	f004 0401 	and.w	r4, r4, #1
 80129a0:	f1c4 0402 	rsb	r4, r4, #2
 80129a4:	4a6d      	ldr	r2, [pc, #436]	@ (8012b5c <__ieee754_pow+0x294>)
 80129a6:	4592      	cmp	sl, r2
 80129a8:	d12e      	bne.n	8012a08 <__ieee754_pow+0x140>
 80129aa:	f1b9 0f00 	cmp.w	r9, #0
 80129ae:	f280 8494 	bge.w	80132da <__ieee754_pow+0xa12>
 80129b2:	496a      	ldr	r1, [pc, #424]	@ (8012b5c <__ieee754_pow+0x294>)
 80129b4:	4632      	mov	r2, r6
 80129b6:	463b      	mov	r3, r7
 80129b8:	2000      	movs	r0, #0
 80129ba:	f7ed ff77 	bl	80008ac <__aeabi_ddiv>
 80129be:	e7a0      	b.n	8012902 <__ieee754_pow+0x3a>
 80129c0:	2400      	movs	r4, #0
 80129c2:	bbc1      	cbnz	r1, 8012a36 <__ieee754_pow+0x16e>
 80129c4:	4a63      	ldr	r2, [pc, #396]	@ (8012b54 <__ieee754_pow+0x28c>)
 80129c6:	4592      	cmp	sl, r2
 80129c8:	d1ec      	bne.n	80129a4 <__ieee754_pow+0xdc>
 80129ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80129ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80129d2:	431a      	orrs	r2, r3
 80129d4:	f000 8479 	beq.w	80132ca <__ieee754_pow+0xa02>
 80129d8:	4b61      	ldr	r3, [pc, #388]	@ (8012b60 <__ieee754_pow+0x298>)
 80129da:	4598      	cmp	r8, r3
 80129dc:	d908      	bls.n	80129f0 <__ieee754_pow+0x128>
 80129de:	f1b9 0f00 	cmp.w	r9, #0
 80129e2:	f2c0 8476 	blt.w	80132d2 <__ieee754_pow+0xa0a>
 80129e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129ea:	e78a      	b.n	8012902 <__ieee754_pow+0x3a>
 80129ec:	2402      	movs	r4, #2
 80129ee:	e7e8      	b.n	80129c2 <__ieee754_pow+0xfa>
 80129f0:	f1b9 0f00 	cmp.w	r9, #0
 80129f4:	f04f 0000 	mov.w	r0, #0
 80129f8:	f04f 0100 	mov.w	r1, #0
 80129fc:	da81      	bge.n	8012902 <__ieee754_pow+0x3a>
 80129fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012a02:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012a06:	e77c      	b.n	8012902 <__ieee754_pow+0x3a>
 8012a08:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012a0c:	d106      	bne.n	8012a1c <__ieee754_pow+0x154>
 8012a0e:	4632      	mov	r2, r6
 8012a10:	463b      	mov	r3, r7
 8012a12:	4630      	mov	r0, r6
 8012a14:	4639      	mov	r1, r7
 8012a16:	f7ed fe1f 	bl	8000658 <__aeabi_dmul>
 8012a1a:	e772      	b.n	8012902 <__ieee754_pow+0x3a>
 8012a1c:	4a51      	ldr	r2, [pc, #324]	@ (8012b64 <__ieee754_pow+0x29c>)
 8012a1e:	4591      	cmp	r9, r2
 8012a20:	d109      	bne.n	8012a36 <__ieee754_pow+0x16e>
 8012a22:	2d00      	cmp	r5, #0
 8012a24:	db07      	blt.n	8012a36 <__ieee754_pow+0x16e>
 8012a26:	ec47 6b10 	vmov	d0, r6, r7
 8012a2a:	b011      	add	sp, #68	@ 0x44
 8012a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a30:	f7ff be70 	b.w	8012714 <__ieee754_sqrt>
 8012a34:	2400      	movs	r4, #0
 8012a36:	ec47 6b10 	vmov	d0, r6, r7
 8012a3a:	9302      	str	r3, [sp, #8]
 8012a3c:	f000 fc88 	bl	8013350 <fabs>
 8012a40:	9b02      	ldr	r3, [sp, #8]
 8012a42:	ec51 0b10 	vmov	r0, r1, d0
 8012a46:	bb53      	cbnz	r3, 8012a9e <__ieee754_pow+0x1d6>
 8012a48:	4b44      	ldr	r3, [pc, #272]	@ (8012b5c <__ieee754_pow+0x294>)
 8012a4a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d002      	beq.n	8012a58 <__ieee754_pow+0x190>
 8012a52:	f1b8 0f00 	cmp.w	r8, #0
 8012a56:	d122      	bne.n	8012a9e <__ieee754_pow+0x1d6>
 8012a58:	f1b9 0f00 	cmp.w	r9, #0
 8012a5c:	da05      	bge.n	8012a6a <__ieee754_pow+0x1a2>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	460b      	mov	r3, r1
 8012a62:	2000      	movs	r0, #0
 8012a64:	493d      	ldr	r1, [pc, #244]	@ (8012b5c <__ieee754_pow+0x294>)
 8012a66:	f7ed ff21 	bl	80008ac <__aeabi_ddiv>
 8012a6a:	2d00      	cmp	r5, #0
 8012a6c:	f6bf af49 	bge.w	8012902 <__ieee754_pow+0x3a>
 8012a70:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012a74:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012a78:	ea58 0804 	orrs.w	r8, r8, r4
 8012a7c:	d108      	bne.n	8012a90 <__ieee754_pow+0x1c8>
 8012a7e:	4602      	mov	r2, r0
 8012a80:	460b      	mov	r3, r1
 8012a82:	4610      	mov	r0, r2
 8012a84:	4619      	mov	r1, r3
 8012a86:	f7ed fc2f 	bl	80002e8 <__aeabi_dsub>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	460b      	mov	r3, r1
 8012a8e:	e794      	b.n	80129ba <__ieee754_pow+0xf2>
 8012a90:	2c01      	cmp	r4, #1
 8012a92:	f47f af36 	bne.w	8012902 <__ieee754_pow+0x3a>
 8012a96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	e731      	b.n	8012902 <__ieee754_pow+0x3a>
 8012a9e:	0feb      	lsrs	r3, r5, #31
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	ea53 0204 	orrs.w	r2, r3, r4
 8012aa6:	d102      	bne.n	8012aae <__ieee754_pow+0x1e6>
 8012aa8:	4632      	mov	r2, r6
 8012aaa:	463b      	mov	r3, r7
 8012aac:	e7e9      	b.n	8012a82 <__ieee754_pow+0x1ba>
 8012aae:	3c01      	subs	r4, #1
 8012ab0:	431c      	orrs	r4, r3
 8012ab2:	d016      	beq.n	8012ae2 <__ieee754_pow+0x21a>
 8012ab4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8012b40 <__ieee754_pow+0x278>
 8012ab8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8012abc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012ac0:	f240 8112 	bls.w	8012ce8 <__ieee754_pow+0x420>
 8012ac4:	4b28      	ldr	r3, [pc, #160]	@ (8012b68 <__ieee754_pow+0x2a0>)
 8012ac6:	459a      	cmp	sl, r3
 8012ac8:	4b25      	ldr	r3, [pc, #148]	@ (8012b60 <__ieee754_pow+0x298>)
 8012aca:	d916      	bls.n	8012afa <__ieee754_pow+0x232>
 8012acc:	4598      	cmp	r8, r3
 8012ace:	d80b      	bhi.n	8012ae8 <__ieee754_pow+0x220>
 8012ad0:	f1b9 0f00 	cmp.w	r9, #0
 8012ad4:	da0b      	bge.n	8012aee <__ieee754_pow+0x226>
 8012ad6:	2000      	movs	r0, #0
 8012ad8:	b011      	add	sp, #68	@ 0x44
 8012ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ade:	f000 bcf3 	b.w	80134c8 <__math_oflow>
 8012ae2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8012b48 <__ieee754_pow+0x280>
 8012ae6:	e7e7      	b.n	8012ab8 <__ieee754_pow+0x1f0>
 8012ae8:	f1b9 0f00 	cmp.w	r9, #0
 8012aec:	dcf3      	bgt.n	8012ad6 <__ieee754_pow+0x20e>
 8012aee:	2000      	movs	r0, #0
 8012af0:	b011      	add	sp, #68	@ 0x44
 8012af2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af6:	f000 bcdf 	b.w	80134b8 <__math_uflow>
 8012afa:	4598      	cmp	r8, r3
 8012afc:	d20c      	bcs.n	8012b18 <__ieee754_pow+0x250>
 8012afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b02:	2200      	movs	r2, #0
 8012b04:	2300      	movs	r3, #0
 8012b06:	f7ee f819 	bl	8000b3c <__aeabi_dcmplt>
 8012b0a:	3800      	subs	r0, #0
 8012b0c:	bf18      	it	ne
 8012b0e:	2001      	movne	r0, #1
 8012b10:	f1b9 0f00 	cmp.w	r9, #0
 8012b14:	daec      	bge.n	8012af0 <__ieee754_pow+0x228>
 8012b16:	e7df      	b.n	8012ad8 <__ieee754_pow+0x210>
 8012b18:	4b10      	ldr	r3, [pc, #64]	@ (8012b5c <__ieee754_pow+0x294>)
 8012b1a:	4598      	cmp	r8, r3
 8012b1c:	f04f 0200 	mov.w	r2, #0
 8012b20:	d924      	bls.n	8012b6c <__ieee754_pow+0x2a4>
 8012b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b26:	2300      	movs	r3, #0
 8012b28:	f7ee f808 	bl	8000b3c <__aeabi_dcmplt>
 8012b2c:	3800      	subs	r0, #0
 8012b2e:	bf18      	it	ne
 8012b30:	2001      	movne	r0, #1
 8012b32:	f1b9 0f00 	cmp.w	r9, #0
 8012b36:	dccf      	bgt.n	8012ad8 <__ieee754_pow+0x210>
 8012b38:	e7da      	b.n	8012af0 <__ieee754_pow+0x228>
 8012b3a:	bf00      	nop
 8012b3c:	f3af 8000 	nop.w
 8012b40:	00000000 	.word	0x00000000
 8012b44:	3ff00000 	.word	0x3ff00000
 8012b48:	00000000 	.word	0x00000000
 8012b4c:	bff00000 	.word	0xbff00000
 8012b50:	fff00000 	.word	0xfff00000
 8012b54:	7ff00000 	.word	0x7ff00000
 8012b58:	433fffff 	.word	0x433fffff
 8012b5c:	3ff00000 	.word	0x3ff00000
 8012b60:	3fefffff 	.word	0x3fefffff
 8012b64:	3fe00000 	.word	0x3fe00000
 8012b68:	43f00000 	.word	0x43f00000
 8012b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8012cd8 <__ieee754_pow+0x410>)
 8012b6e:	f7ed fbbb 	bl	80002e8 <__aeabi_dsub>
 8012b72:	a351      	add	r3, pc, #324	@ (adr r3, 8012cb8 <__ieee754_pow+0x3f0>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	4604      	mov	r4, r0
 8012b7a:	460d      	mov	r5, r1
 8012b7c:	f7ed fd6c 	bl	8000658 <__aeabi_dmul>
 8012b80:	a34f      	add	r3, pc, #316	@ (adr r3, 8012cc0 <__ieee754_pow+0x3f8>)
 8012b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b86:	4606      	mov	r6, r0
 8012b88:	460f      	mov	r7, r1
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	f7ed fd63 	bl	8000658 <__aeabi_dmul>
 8012b92:	4b52      	ldr	r3, [pc, #328]	@ (8012cdc <__ieee754_pow+0x414>)
 8012b94:	4682      	mov	sl, r0
 8012b96:	468b      	mov	fp, r1
 8012b98:	2200      	movs	r2, #0
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	4629      	mov	r1, r5
 8012b9e:	f7ed fd5b 	bl	8000658 <__aeabi_dmul>
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	a148      	add	r1, pc, #288	@ (adr r1, 8012cc8 <__ieee754_pow+0x400>)
 8012ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bac:	f7ed fb9c 	bl	80002e8 <__aeabi_dsub>
 8012bb0:	4622      	mov	r2, r4
 8012bb2:	462b      	mov	r3, r5
 8012bb4:	f7ed fd50 	bl	8000658 <__aeabi_dmul>
 8012bb8:	4602      	mov	r2, r0
 8012bba:	460b      	mov	r3, r1
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	4948      	ldr	r1, [pc, #288]	@ (8012ce0 <__ieee754_pow+0x418>)
 8012bc0:	f7ed fb92 	bl	80002e8 <__aeabi_dsub>
 8012bc4:	4622      	mov	r2, r4
 8012bc6:	4680      	mov	r8, r0
 8012bc8:	4689      	mov	r9, r1
 8012bca:	462b      	mov	r3, r5
 8012bcc:	4620      	mov	r0, r4
 8012bce:	4629      	mov	r1, r5
 8012bd0:	f7ed fd42 	bl	8000658 <__aeabi_dmul>
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	460b      	mov	r3, r1
 8012bd8:	4640      	mov	r0, r8
 8012bda:	4649      	mov	r1, r9
 8012bdc:	f7ed fd3c 	bl	8000658 <__aeabi_dmul>
 8012be0:	a33b      	add	r3, pc, #236	@ (adr r3, 8012cd0 <__ieee754_pow+0x408>)
 8012be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be6:	f7ed fd37 	bl	8000658 <__aeabi_dmul>
 8012bea:	4602      	mov	r2, r0
 8012bec:	460b      	mov	r3, r1
 8012bee:	4650      	mov	r0, sl
 8012bf0:	4659      	mov	r1, fp
 8012bf2:	f7ed fb79 	bl	80002e8 <__aeabi_dsub>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	460b      	mov	r3, r1
 8012bfa:	4680      	mov	r8, r0
 8012bfc:	4689      	mov	r9, r1
 8012bfe:	4630      	mov	r0, r6
 8012c00:	4639      	mov	r1, r7
 8012c02:	f7ed fb73 	bl	80002ec <__adddf3>
 8012c06:	2400      	movs	r4, #0
 8012c08:	4632      	mov	r2, r6
 8012c0a:	463b      	mov	r3, r7
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	460d      	mov	r5, r1
 8012c10:	f7ed fb6a 	bl	80002e8 <__aeabi_dsub>
 8012c14:	4602      	mov	r2, r0
 8012c16:	460b      	mov	r3, r1
 8012c18:	4640      	mov	r0, r8
 8012c1a:	4649      	mov	r1, r9
 8012c1c:	f7ed fb64 	bl	80002e8 <__aeabi_dsub>
 8012c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012c28:	2300      	movs	r3, #0
 8012c2a:	9304      	str	r3, [sp, #16]
 8012c2c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012c30:	4606      	mov	r6, r0
 8012c32:	460f      	mov	r7, r1
 8012c34:	4652      	mov	r2, sl
 8012c36:	465b      	mov	r3, fp
 8012c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c3c:	f7ed fb54 	bl	80002e8 <__aeabi_dsub>
 8012c40:	4622      	mov	r2, r4
 8012c42:	462b      	mov	r3, r5
 8012c44:	f7ed fd08 	bl	8000658 <__aeabi_dmul>
 8012c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c4c:	4680      	mov	r8, r0
 8012c4e:	4689      	mov	r9, r1
 8012c50:	4630      	mov	r0, r6
 8012c52:	4639      	mov	r1, r7
 8012c54:	f7ed fd00 	bl	8000658 <__aeabi_dmul>
 8012c58:	4602      	mov	r2, r0
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	4640      	mov	r0, r8
 8012c5e:	4649      	mov	r1, r9
 8012c60:	f7ed fb44 	bl	80002ec <__adddf3>
 8012c64:	4652      	mov	r2, sl
 8012c66:	465b      	mov	r3, fp
 8012c68:	4606      	mov	r6, r0
 8012c6a:	460f      	mov	r7, r1
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f7ed fcf2 	bl	8000658 <__aeabi_dmul>
 8012c74:	460b      	mov	r3, r1
 8012c76:	4602      	mov	r2, r0
 8012c78:	4680      	mov	r8, r0
 8012c7a:	4689      	mov	r9, r1
 8012c7c:	4630      	mov	r0, r6
 8012c7e:	4639      	mov	r1, r7
 8012c80:	f7ed fb34 	bl	80002ec <__adddf3>
 8012c84:	4b17      	ldr	r3, [pc, #92]	@ (8012ce4 <__ieee754_pow+0x41c>)
 8012c86:	4299      	cmp	r1, r3
 8012c88:	4604      	mov	r4, r0
 8012c8a:	460d      	mov	r5, r1
 8012c8c:	468a      	mov	sl, r1
 8012c8e:	468b      	mov	fp, r1
 8012c90:	f340 82ef 	ble.w	8013272 <__ieee754_pow+0x9aa>
 8012c94:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8012c98:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012c9c:	4303      	orrs	r3, r0
 8012c9e:	f000 81e8 	beq.w	8013072 <__ieee754_pow+0x7aa>
 8012ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	2300      	movs	r3, #0
 8012caa:	f7ed ff47 	bl	8000b3c <__aeabi_dcmplt>
 8012cae:	3800      	subs	r0, #0
 8012cb0:	bf18      	it	ne
 8012cb2:	2001      	movne	r0, #1
 8012cb4:	e710      	b.n	8012ad8 <__ieee754_pow+0x210>
 8012cb6:	bf00      	nop
 8012cb8:	60000000 	.word	0x60000000
 8012cbc:	3ff71547 	.word	0x3ff71547
 8012cc0:	f85ddf44 	.word	0xf85ddf44
 8012cc4:	3e54ae0b 	.word	0x3e54ae0b
 8012cc8:	55555555 	.word	0x55555555
 8012ccc:	3fd55555 	.word	0x3fd55555
 8012cd0:	652b82fe 	.word	0x652b82fe
 8012cd4:	3ff71547 	.word	0x3ff71547
 8012cd8:	3ff00000 	.word	0x3ff00000
 8012cdc:	3fd00000 	.word	0x3fd00000
 8012ce0:	3fe00000 	.word	0x3fe00000
 8012ce4:	408fffff 	.word	0x408fffff
 8012ce8:	4bd5      	ldr	r3, [pc, #852]	@ (8013040 <__ieee754_pow+0x778>)
 8012cea:	402b      	ands	r3, r5
 8012cec:	2200      	movs	r2, #0
 8012cee:	b92b      	cbnz	r3, 8012cfc <__ieee754_pow+0x434>
 8012cf0:	4bd4      	ldr	r3, [pc, #848]	@ (8013044 <__ieee754_pow+0x77c>)
 8012cf2:	f7ed fcb1 	bl	8000658 <__aeabi_dmul>
 8012cf6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8012cfa:	468b      	mov	fp, r1
 8012cfc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8012d00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012d04:	4413      	add	r3, r2
 8012d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d08:	4bcf      	ldr	r3, [pc, #828]	@ (8013048 <__ieee754_pow+0x780>)
 8012d0a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012d0e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012d12:	459b      	cmp	fp, r3
 8012d14:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012d18:	dd08      	ble.n	8012d2c <__ieee754_pow+0x464>
 8012d1a:	4bcc      	ldr	r3, [pc, #816]	@ (801304c <__ieee754_pow+0x784>)
 8012d1c:	459b      	cmp	fp, r3
 8012d1e:	f340 81a5 	ble.w	801306c <__ieee754_pow+0x7a4>
 8012d22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d24:	3301      	adds	r3, #1
 8012d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d28:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012d2c:	f04f 0a00 	mov.w	sl, #0
 8012d30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012d34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d36:	4bc6      	ldr	r3, [pc, #792]	@ (8013050 <__ieee754_pow+0x788>)
 8012d38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012d3c:	ed93 7b00 	vldr	d7, [r3]
 8012d40:	4629      	mov	r1, r5
 8012d42:	ec53 2b17 	vmov	r2, r3, d7
 8012d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012d4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d4e:	f7ed facb 	bl	80002e8 <__aeabi_dsub>
 8012d52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012d56:	4606      	mov	r6, r0
 8012d58:	460f      	mov	r7, r1
 8012d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d5e:	f7ed fac5 	bl	80002ec <__adddf3>
 8012d62:	4602      	mov	r2, r0
 8012d64:	460b      	mov	r3, r1
 8012d66:	2000      	movs	r0, #0
 8012d68:	49ba      	ldr	r1, [pc, #744]	@ (8013054 <__ieee754_pow+0x78c>)
 8012d6a:	f7ed fd9f 	bl	80008ac <__aeabi_ddiv>
 8012d6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012d72:	4602      	mov	r2, r0
 8012d74:	460b      	mov	r3, r1
 8012d76:	4630      	mov	r0, r6
 8012d78:	4639      	mov	r1, r7
 8012d7a:	f7ed fc6d 	bl	8000658 <__aeabi_dmul>
 8012d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d82:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012d86:	106d      	asrs	r5, r5, #1
 8012d88:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012d8c:	f04f 0b00 	mov.w	fp, #0
 8012d90:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012d94:	4661      	mov	r1, ip
 8012d96:	2200      	movs	r2, #0
 8012d98:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012d9c:	4658      	mov	r0, fp
 8012d9e:	46e1      	mov	r9, ip
 8012da0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8012da4:	4614      	mov	r4, r2
 8012da6:	461d      	mov	r5, r3
 8012da8:	f7ed fc56 	bl	8000658 <__aeabi_dmul>
 8012dac:	4602      	mov	r2, r0
 8012dae:	460b      	mov	r3, r1
 8012db0:	4630      	mov	r0, r6
 8012db2:	4639      	mov	r1, r7
 8012db4:	f7ed fa98 	bl	80002e8 <__aeabi_dsub>
 8012db8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012dbc:	4606      	mov	r6, r0
 8012dbe:	460f      	mov	r7, r1
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	4629      	mov	r1, r5
 8012dc4:	f7ed fa90 	bl	80002e8 <__aeabi_dsub>
 8012dc8:	4602      	mov	r2, r0
 8012dca:	460b      	mov	r3, r1
 8012dcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012dd0:	f7ed fa8a 	bl	80002e8 <__aeabi_dsub>
 8012dd4:	465a      	mov	r2, fp
 8012dd6:	464b      	mov	r3, r9
 8012dd8:	f7ed fc3e 	bl	8000658 <__aeabi_dmul>
 8012ddc:	4602      	mov	r2, r0
 8012dde:	460b      	mov	r3, r1
 8012de0:	4630      	mov	r0, r6
 8012de2:	4639      	mov	r1, r7
 8012de4:	f7ed fa80 	bl	80002e8 <__aeabi_dsub>
 8012de8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012dec:	f7ed fc34 	bl	8000658 <__aeabi_dmul>
 8012df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012df4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012df8:	4610      	mov	r0, r2
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	f7ed fc2c 	bl	8000658 <__aeabi_dmul>
 8012e00:	a37d      	add	r3, pc, #500	@ (adr r3, 8012ff8 <__ieee754_pow+0x730>)
 8012e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e06:	4604      	mov	r4, r0
 8012e08:	460d      	mov	r5, r1
 8012e0a:	f7ed fc25 	bl	8000658 <__aeabi_dmul>
 8012e0e:	a37c      	add	r3, pc, #496	@ (adr r3, 8013000 <__ieee754_pow+0x738>)
 8012e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e14:	f7ed fa6a 	bl	80002ec <__adddf3>
 8012e18:	4622      	mov	r2, r4
 8012e1a:	462b      	mov	r3, r5
 8012e1c:	f7ed fc1c 	bl	8000658 <__aeabi_dmul>
 8012e20:	a379      	add	r3, pc, #484	@ (adr r3, 8013008 <__ieee754_pow+0x740>)
 8012e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e26:	f7ed fa61 	bl	80002ec <__adddf3>
 8012e2a:	4622      	mov	r2, r4
 8012e2c:	462b      	mov	r3, r5
 8012e2e:	f7ed fc13 	bl	8000658 <__aeabi_dmul>
 8012e32:	a377      	add	r3, pc, #476	@ (adr r3, 8013010 <__ieee754_pow+0x748>)
 8012e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e38:	f7ed fa58 	bl	80002ec <__adddf3>
 8012e3c:	4622      	mov	r2, r4
 8012e3e:	462b      	mov	r3, r5
 8012e40:	f7ed fc0a 	bl	8000658 <__aeabi_dmul>
 8012e44:	a374      	add	r3, pc, #464	@ (adr r3, 8013018 <__ieee754_pow+0x750>)
 8012e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4a:	f7ed fa4f 	bl	80002ec <__adddf3>
 8012e4e:	4622      	mov	r2, r4
 8012e50:	462b      	mov	r3, r5
 8012e52:	f7ed fc01 	bl	8000658 <__aeabi_dmul>
 8012e56:	a372      	add	r3, pc, #456	@ (adr r3, 8013020 <__ieee754_pow+0x758>)
 8012e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e5c:	f7ed fa46 	bl	80002ec <__adddf3>
 8012e60:	4622      	mov	r2, r4
 8012e62:	4606      	mov	r6, r0
 8012e64:	460f      	mov	r7, r1
 8012e66:	462b      	mov	r3, r5
 8012e68:	4620      	mov	r0, r4
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	f7ed fbf4 	bl	8000658 <__aeabi_dmul>
 8012e70:	4602      	mov	r2, r0
 8012e72:	460b      	mov	r3, r1
 8012e74:	4630      	mov	r0, r6
 8012e76:	4639      	mov	r1, r7
 8012e78:	f7ed fbee 	bl	8000658 <__aeabi_dmul>
 8012e7c:	465a      	mov	r2, fp
 8012e7e:	4604      	mov	r4, r0
 8012e80:	460d      	mov	r5, r1
 8012e82:	464b      	mov	r3, r9
 8012e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012e88:	f7ed fa30 	bl	80002ec <__adddf3>
 8012e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e90:	f7ed fbe2 	bl	8000658 <__aeabi_dmul>
 8012e94:	4622      	mov	r2, r4
 8012e96:	462b      	mov	r3, r5
 8012e98:	f7ed fa28 	bl	80002ec <__adddf3>
 8012e9c:	465a      	mov	r2, fp
 8012e9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012ea2:	464b      	mov	r3, r9
 8012ea4:	4658      	mov	r0, fp
 8012ea6:	4649      	mov	r1, r9
 8012ea8:	f7ed fbd6 	bl	8000658 <__aeabi_dmul>
 8012eac:	4b6a      	ldr	r3, [pc, #424]	@ (8013058 <__ieee754_pow+0x790>)
 8012eae:	2200      	movs	r2, #0
 8012eb0:	4606      	mov	r6, r0
 8012eb2:	460f      	mov	r7, r1
 8012eb4:	f7ed fa1a 	bl	80002ec <__adddf3>
 8012eb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012ebc:	f7ed fa16 	bl	80002ec <__adddf3>
 8012ec0:	46d8      	mov	r8, fp
 8012ec2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8012ec6:	460d      	mov	r5, r1
 8012ec8:	465a      	mov	r2, fp
 8012eca:	460b      	mov	r3, r1
 8012ecc:	4640      	mov	r0, r8
 8012ece:	4649      	mov	r1, r9
 8012ed0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8012ed4:	f7ed fbc0 	bl	8000658 <__aeabi_dmul>
 8012ed8:	465c      	mov	r4, fp
 8012eda:	4680      	mov	r8, r0
 8012edc:	4689      	mov	r9, r1
 8012ede:	4b5e      	ldr	r3, [pc, #376]	@ (8013058 <__ieee754_pow+0x790>)
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	4629      	mov	r1, r5
 8012ee6:	f7ed f9ff 	bl	80002e8 <__aeabi_dsub>
 8012eea:	4632      	mov	r2, r6
 8012eec:	463b      	mov	r3, r7
 8012eee:	f7ed f9fb 	bl	80002e8 <__aeabi_dsub>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012efa:	f7ed f9f5 	bl	80002e8 <__aeabi_dsub>
 8012efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f02:	f7ed fba9 	bl	8000658 <__aeabi_dmul>
 8012f06:	4622      	mov	r2, r4
 8012f08:	4606      	mov	r6, r0
 8012f0a:	460f      	mov	r7, r1
 8012f0c:	462b      	mov	r3, r5
 8012f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f12:	f7ed fba1 	bl	8000658 <__aeabi_dmul>
 8012f16:	4602      	mov	r2, r0
 8012f18:	460b      	mov	r3, r1
 8012f1a:	4630      	mov	r0, r6
 8012f1c:	4639      	mov	r1, r7
 8012f1e:	f7ed f9e5 	bl	80002ec <__adddf3>
 8012f22:	4606      	mov	r6, r0
 8012f24:	460f      	mov	r7, r1
 8012f26:	4602      	mov	r2, r0
 8012f28:	460b      	mov	r3, r1
 8012f2a:	4640      	mov	r0, r8
 8012f2c:	4649      	mov	r1, r9
 8012f2e:	f7ed f9dd 	bl	80002ec <__adddf3>
 8012f32:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012f36:	a33c      	add	r3, pc, #240	@ (adr r3, 8013028 <__ieee754_pow+0x760>)
 8012f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3c:	4658      	mov	r0, fp
 8012f3e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012f42:	460d      	mov	r5, r1
 8012f44:	f7ed fb88 	bl	8000658 <__aeabi_dmul>
 8012f48:	465c      	mov	r4, fp
 8012f4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012f4e:	4642      	mov	r2, r8
 8012f50:	464b      	mov	r3, r9
 8012f52:	4620      	mov	r0, r4
 8012f54:	4629      	mov	r1, r5
 8012f56:	f7ed f9c7 	bl	80002e8 <__aeabi_dsub>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	4630      	mov	r0, r6
 8012f60:	4639      	mov	r1, r7
 8012f62:	f7ed f9c1 	bl	80002e8 <__aeabi_dsub>
 8012f66:	a332      	add	r3, pc, #200	@ (adr r3, 8013030 <__ieee754_pow+0x768>)
 8012f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6c:	f7ed fb74 	bl	8000658 <__aeabi_dmul>
 8012f70:	a331      	add	r3, pc, #196	@ (adr r3, 8013038 <__ieee754_pow+0x770>)
 8012f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f76:	4606      	mov	r6, r0
 8012f78:	460f      	mov	r7, r1
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	4629      	mov	r1, r5
 8012f7e:	f7ed fb6b 	bl	8000658 <__aeabi_dmul>
 8012f82:	4602      	mov	r2, r0
 8012f84:	460b      	mov	r3, r1
 8012f86:	4630      	mov	r0, r6
 8012f88:	4639      	mov	r1, r7
 8012f8a:	f7ed f9af 	bl	80002ec <__adddf3>
 8012f8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012f90:	4b32      	ldr	r3, [pc, #200]	@ (801305c <__ieee754_pow+0x794>)
 8012f92:	4413      	add	r3, r2
 8012f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f98:	f7ed f9a8 	bl	80002ec <__adddf3>
 8012f9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012fa0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012fa2:	f7ed faef 	bl	8000584 <__aeabi_i2d>
 8012fa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8013060 <__ieee754_pow+0x798>)
 8012faa:	4413      	add	r3, r2
 8012fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012fb0:	4606      	mov	r6, r0
 8012fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012fb6:	460f      	mov	r7, r1
 8012fb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012fbc:	f7ed f996 	bl	80002ec <__adddf3>
 8012fc0:	4642      	mov	r2, r8
 8012fc2:	464b      	mov	r3, r9
 8012fc4:	f7ed f992 	bl	80002ec <__adddf3>
 8012fc8:	4632      	mov	r2, r6
 8012fca:	463b      	mov	r3, r7
 8012fcc:	f7ed f98e 	bl	80002ec <__adddf3>
 8012fd0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	463b      	mov	r3, r7
 8012fd8:	4658      	mov	r0, fp
 8012fda:	460d      	mov	r5, r1
 8012fdc:	f7ed f984 	bl	80002e8 <__aeabi_dsub>
 8012fe0:	4642      	mov	r2, r8
 8012fe2:	464b      	mov	r3, r9
 8012fe4:	f7ed f980 	bl	80002e8 <__aeabi_dsub>
 8012fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fec:	f7ed f97c 	bl	80002e8 <__aeabi_dsub>
 8012ff0:	465c      	mov	r4, fp
 8012ff2:	4602      	mov	r2, r0
 8012ff4:	e036      	b.n	8013064 <__ieee754_pow+0x79c>
 8012ff6:	bf00      	nop
 8012ff8:	4a454eef 	.word	0x4a454eef
 8012ffc:	3fca7e28 	.word	0x3fca7e28
 8013000:	93c9db65 	.word	0x93c9db65
 8013004:	3fcd864a 	.word	0x3fcd864a
 8013008:	a91d4101 	.word	0xa91d4101
 801300c:	3fd17460 	.word	0x3fd17460
 8013010:	518f264d 	.word	0x518f264d
 8013014:	3fd55555 	.word	0x3fd55555
 8013018:	db6fabff 	.word	0xdb6fabff
 801301c:	3fdb6db6 	.word	0x3fdb6db6
 8013020:	33333303 	.word	0x33333303
 8013024:	3fe33333 	.word	0x3fe33333
 8013028:	e0000000 	.word	0xe0000000
 801302c:	3feec709 	.word	0x3feec709
 8013030:	dc3a03fd 	.word	0xdc3a03fd
 8013034:	3feec709 	.word	0x3feec709
 8013038:	145b01f5 	.word	0x145b01f5
 801303c:	be3e2fe0 	.word	0xbe3e2fe0
 8013040:	7ff00000 	.word	0x7ff00000
 8013044:	43400000 	.word	0x43400000
 8013048:	0003988e 	.word	0x0003988e
 801304c:	000bb679 	.word	0x000bb679
 8013050:	08017770 	.word	0x08017770
 8013054:	3ff00000 	.word	0x3ff00000
 8013058:	40080000 	.word	0x40080000
 801305c:	08017750 	.word	0x08017750
 8013060:	08017760 	.word	0x08017760
 8013064:	460b      	mov	r3, r1
 8013066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801306a:	e5d7      	b.n	8012c1c <__ieee754_pow+0x354>
 801306c:	f04f 0a01 	mov.w	sl, #1
 8013070:	e65e      	b.n	8012d30 <__ieee754_pow+0x468>
 8013072:	a3b4      	add	r3, pc, #720	@ (adr r3, 8013344 <__ieee754_pow+0xa7c>)
 8013074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013078:	4630      	mov	r0, r6
 801307a:	4639      	mov	r1, r7
 801307c:	f7ed f936 	bl	80002ec <__adddf3>
 8013080:	4642      	mov	r2, r8
 8013082:	e9cd 0100 	strd	r0, r1, [sp]
 8013086:	464b      	mov	r3, r9
 8013088:	4620      	mov	r0, r4
 801308a:	4629      	mov	r1, r5
 801308c:	f7ed f92c 	bl	80002e8 <__aeabi_dsub>
 8013090:	4602      	mov	r2, r0
 8013092:	460b      	mov	r3, r1
 8013094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013098:	f7ed fd6e 	bl	8000b78 <__aeabi_dcmpgt>
 801309c:	2800      	cmp	r0, #0
 801309e:	f47f ae00 	bne.w	8012ca2 <__ieee754_pow+0x3da>
 80130a2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80130a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80130aa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80130ae:	fa43 fa0a 	asr.w	sl, r3, sl
 80130b2:	44da      	add	sl, fp
 80130b4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80130b8:	489d      	ldr	r0, [pc, #628]	@ (8013330 <__ieee754_pow+0xa68>)
 80130ba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80130be:	4108      	asrs	r0, r1
 80130c0:	ea00 030a 	and.w	r3, r0, sl
 80130c4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80130c8:	f1c1 0114 	rsb	r1, r1, #20
 80130cc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80130d0:	fa4a fa01 	asr.w	sl, sl, r1
 80130d4:	f1bb 0f00 	cmp.w	fp, #0
 80130d8:	4640      	mov	r0, r8
 80130da:	4649      	mov	r1, r9
 80130dc:	f04f 0200 	mov.w	r2, #0
 80130e0:	bfb8      	it	lt
 80130e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80130e6:	f7ed f8ff 	bl	80002e8 <__aeabi_dsub>
 80130ea:	4680      	mov	r8, r0
 80130ec:	4689      	mov	r9, r1
 80130ee:	4632      	mov	r2, r6
 80130f0:	463b      	mov	r3, r7
 80130f2:	4640      	mov	r0, r8
 80130f4:	4649      	mov	r1, r9
 80130f6:	f7ed f8f9 	bl	80002ec <__adddf3>
 80130fa:	2400      	movs	r4, #0
 80130fc:	a37c      	add	r3, pc, #496	@ (adr r3, 80132f0 <__ieee754_pow+0xa28>)
 80130fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013102:	4620      	mov	r0, r4
 8013104:	460d      	mov	r5, r1
 8013106:	f7ed faa7 	bl	8000658 <__aeabi_dmul>
 801310a:	4642      	mov	r2, r8
 801310c:	e9cd 0100 	strd	r0, r1, [sp]
 8013110:	464b      	mov	r3, r9
 8013112:	4620      	mov	r0, r4
 8013114:	4629      	mov	r1, r5
 8013116:	f7ed f8e7 	bl	80002e8 <__aeabi_dsub>
 801311a:	4602      	mov	r2, r0
 801311c:	460b      	mov	r3, r1
 801311e:	4630      	mov	r0, r6
 8013120:	4639      	mov	r1, r7
 8013122:	f7ed f8e1 	bl	80002e8 <__aeabi_dsub>
 8013126:	a374      	add	r3, pc, #464	@ (adr r3, 80132f8 <__ieee754_pow+0xa30>)
 8013128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312c:	f7ed fa94 	bl	8000658 <__aeabi_dmul>
 8013130:	a373      	add	r3, pc, #460	@ (adr r3, 8013300 <__ieee754_pow+0xa38>)
 8013132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013136:	4680      	mov	r8, r0
 8013138:	4689      	mov	r9, r1
 801313a:	4620      	mov	r0, r4
 801313c:	4629      	mov	r1, r5
 801313e:	f7ed fa8b 	bl	8000658 <__aeabi_dmul>
 8013142:	4602      	mov	r2, r0
 8013144:	460b      	mov	r3, r1
 8013146:	4640      	mov	r0, r8
 8013148:	4649      	mov	r1, r9
 801314a:	f7ed f8cf 	bl	80002ec <__adddf3>
 801314e:	4604      	mov	r4, r0
 8013150:	460d      	mov	r5, r1
 8013152:	4602      	mov	r2, r0
 8013154:	460b      	mov	r3, r1
 8013156:	e9dd 0100 	ldrd	r0, r1, [sp]
 801315a:	f7ed f8c7 	bl	80002ec <__adddf3>
 801315e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013162:	4680      	mov	r8, r0
 8013164:	4689      	mov	r9, r1
 8013166:	f7ed f8bf 	bl	80002e8 <__aeabi_dsub>
 801316a:	4602      	mov	r2, r0
 801316c:	460b      	mov	r3, r1
 801316e:	4620      	mov	r0, r4
 8013170:	4629      	mov	r1, r5
 8013172:	f7ed f8b9 	bl	80002e8 <__aeabi_dsub>
 8013176:	4642      	mov	r2, r8
 8013178:	4606      	mov	r6, r0
 801317a:	460f      	mov	r7, r1
 801317c:	464b      	mov	r3, r9
 801317e:	4640      	mov	r0, r8
 8013180:	4649      	mov	r1, r9
 8013182:	f7ed fa69 	bl	8000658 <__aeabi_dmul>
 8013186:	a360      	add	r3, pc, #384	@ (adr r3, 8013308 <__ieee754_pow+0xa40>)
 8013188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318c:	4604      	mov	r4, r0
 801318e:	460d      	mov	r5, r1
 8013190:	f7ed fa62 	bl	8000658 <__aeabi_dmul>
 8013194:	a35e      	add	r3, pc, #376	@ (adr r3, 8013310 <__ieee754_pow+0xa48>)
 8013196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319a:	f7ed f8a5 	bl	80002e8 <__aeabi_dsub>
 801319e:	4622      	mov	r2, r4
 80131a0:	462b      	mov	r3, r5
 80131a2:	f7ed fa59 	bl	8000658 <__aeabi_dmul>
 80131a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013318 <__ieee754_pow+0xa50>)
 80131a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ac:	f7ed f89e 	bl	80002ec <__adddf3>
 80131b0:	4622      	mov	r2, r4
 80131b2:	462b      	mov	r3, r5
 80131b4:	f7ed fa50 	bl	8000658 <__aeabi_dmul>
 80131b8:	a359      	add	r3, pc, #356	@ (adr r3, 8013320 <__ieee754_pow+0xa58>)
 80131ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131be:	f7ed f893 	bl	80002e8 <__aeabi_dsub>
 80131c2:	4622      	mov	r2, r4
 80131c4:	462b      	mov	r3, r5
 80131c6:	f7ed fa47 	bl	8000658 <__aeabi_dmul>
 80131ca:	a357      	add	r3, pc, #348	@ (adr r3, 8013328 <__ieee754_pow+0xa60>)
 80131cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d0:	f7ed f88c 	bl	80002ec <__adddf3>
 80131d4:	4622      	mov	r2, r4
 80131d6:	462b      	mov	r3, r5
 80131d8:	f7ed fa3e 	bl	8000658 <__aeabi_dmul>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	4640      	mov	r0, r8
 80131e2:	4649      	mov	r1, r9
 80131e4:	f7ed f880 	bl	80002e8 <__aeabi_dsub>
 80131e8:	4604      	mov	r4, r0
 80131ea:	460d      	mov	r5, r1
 80131ec:	4602      	mov	r2, r0
 80131ee:	460b      	mov	r3, r1
 80131f0:	4640      	mov	r0, r8
 80131f2:	4649      	mov	r1, r9
 80131f4:	f7ed fa30 	bl	8000658 <__aeabi_dmul>
 80131f8:	2200      	movs	r2, #0
 80131fa:	e9cd 0100 	strd	r0, r1, [sp]
 80131fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013202:	4620      	mov	r0, r4
 8013204:	4629      	mov	r1, r5
 8013206:	f7ed f86f 	bl	80002e8 <__aeabi_dsub>
 801320a:	4602      	mov	r2, r0
 801320c:	460b      	mov	r3, r1
 801320e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013212:	f7ed fb4b 	bl	80008ac <__aeabi_ddiv>
 8013216:	4632      	mov	r2, r6
 8013218:	4604      	mov	r4, r0
 801321a:	460d      	mov	r5, r1
 801321c:	463b      	mov	r3, r7
 801321e:	4640      	mov	r0, r8
 8013220:	4649      	mov	r1, r9
 8013222:	f7ed fa19 	bl	8000658 <__aeabi_dmul>
 8013226:	4632      	mov	r2, r6
 8013228:	463b      	mov	r3, r7
 801322a:	f7ed f85f 	bl	80002ec <__adddf3>
 801322e:	4602      	mov	r2, r0
 8013230:	460b      	mov	r3, r1
 8013232:	4620      	mov	r0, r4
 8013234:	4629      	mov	r1, r5
 8013236:	f7ed f857 	bl	80002e8 <__aeabi_dsub>
 801323a:	4642      	mov	r2, r8
 801323c:	464b      	mov	r3, r9
 801323e:	f7ed f853 	bl	80002e8 <__aeabi_dsub>
 8013242:	460b      	mov	r3, r1
 8013244:	4602      	mov	r2, r0
 8013246:	493b      	ldr	r1, [pc, #236]	@ (8013334 <__ieee754_pow+0xa6c>)
 8013248:	2000      	movs	r0, #0
 801324a:	f7ed f84d 	bl	80002e8 <__aeabi_dsub>
 801324e:	ec41 0b10 	vmov	d0, r0, r1
 8013252:	ee10 3a90 	vmov	r3, s1
 8013256:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801325a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801325e:	da30      	bge.n	80132c2 <__ieee754_pow+0x9fa>
 8013260:	4650      	mov	r0, sl
 8013262:	f000 f87d 	bl	8013360 <scalbn>
 8013266:	ec51 0b10 	vmov	r0, r1, d0
 801326a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801326e:	f7ff bbd2 	b.w	8012a16 <__ieee754_pow+0x14e>
 8013272:	4c31      	ldr	r4, [pc, #196]	@ (8013338 <__ieee754_pow+0xa70>)
 8013274:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013278:	42a3      	cmp	r3, r4
 801327a:	d91a      	bls.n	80132b2 <__ieee754_pow+0x9ea>
 801327c:	4b2f      	ldr	r3, [pc, #188]	@ (801333c <__ieee754_pow+0xa74>)
 801327e:	440b      	add	r3, r1
 8013280:	4303      	orrs	r3, r0
 8013282:	d009      	beq.n	8013298 <__ieee754_pow+0x9d0>
 8013284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013288:	2200      	movs	r2, #0
 801328a:	2300      	movs	r3, #0
 801328c:	f7ed fc56 	bl	8000b3c <__aeabi_dcmplt>
 8013290:	3800      	subs	r0, #0
 8013292:	bf18      	it	ne
 8013294:	2001      	movne	r0, #1
 8013296:	e42b      	b.n	8012af0 <__ieee754_pow+0x228>
 8013298:	4642      	mov	r2, r8
 801329a:	464b      	mov	r3, r9
 801329c:	f7ed f824 	bl	80002e8 <__aeabi_dsub>
 80132a0:	4632      	mov	r2, r6
 80132a2:	463b      	mov	r3, r7
 80132a4:	f7ed fc5e 	bl	8000b64 <__aeabi_dcmpge>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	d1eb      	bne.n	8013284 <__ieee754_pow+0x9bc>
 80132ac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801334c <__ieee754_pow+0xa84>
 80132b0:	e6f7      	b.n	80130a2 <__ieee754_pow+0x7da>
 80132b2:	469a      	mov	sl, r3
 80132b4:	4b22      	ldr	r3, [pc, #136]	@ (8013340 <__ieee754_pow+0xa78>)
 80132b6:	459a      	cmp	sl, r3
 80132b8:	f63f aef3 	bhi.w	80130a2 <__ieee754_pow+0x7da>
 80132bc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80132c0:	e715      	b.n	80130ee <__ieee754_pow+0x826>
 80132c2:	ec51 0b10 	vmov	r0, r1, d0
 80132c6:	4619      	mov	r1, r3
 80132c8:	e7cf      	b.n	801326a <__ieee754_pow+0x9a2>
 80132ca:	491a      	ldr	r1, [pc, #104]	@ (8013334 <__ieee754_pow+0xa6c>)
 80132cc:	2000      	movs	r0, #0
 80132ce:	f7ff bb18 	b.w	8012902 <__ieee754_pow+0x3a>
 80132d2:	2000      	movs	r0, #0
 80132d4:	2100      	movs	r1, #0
 80132d6:	f7ff bb14 	b.w	8012902 <__ieee754_pow+0x3a>
 80132da:	4630      	mov	r0, r6
 80132dc:	4639      	mov	r1, r7
 80132de:	f7ff bb10 	b.w	8012902 <__ieee754_pow+0x3a>
 80132e2:	460c      	mov	r4, r1
 80132e4:	f7ff bb5e 	b.w	80129a4 <__ieee754_pow+0xdc>
 80132e8:	2400      	movs	r4, #0
 80132ea:	f7ff bb49 	b.w	8012980 <__ieee754_pow+0xb8>
 80132ee:	bf00      	nop
 80132f0:	00000000 	.word	0x00000000
 80132f4:	3fe62e43 	.word	0x3fe62e43
 80132f8:	fefa39ef 	.word	0xfefa39ef
 80132fc:	3fe62e42 	.word	0x3fe62e42
 8013300:	0ca86c39 	.word	0x0ca86c39
 8013304:	be205c61 	.word	0xbe205c61
 8013308:	72bea4d0 	.word	0x72bea4d0
 801330c:	3e663769 	.word	0x3e663769
 8013310:	c5d26bf1 	.word	0xc5d26bf1
 8013314:	3ebbbd41 	.word	0x3ebbbd41
 8013318:	af25de2c 	.word	0xaf25de2c
 801331c:	3f11566a 	.word	0x3f11566a
 8013320:	16bebd93 	.word	0x16bebd93
 8013324:	3f66c16c 	.word	0x3f66c16c
 8013328:	5555553e 	.word	0x5555553e
 801332c:	3fc55555 	.word	0x3fc55555
 8013330:	fff00000 	.word	0xfff00000
 8013334:	3ff00000 	.word	0x3ff00000
 8013338:	4090cbff 	.word	0x4090cbff
 801333c:	3f6f3400 	.word	0x3f6f3400
 8013340:	3fe00000 	.word	0x3fe00000
 8013344:	652b82fe 	.word	0x652b82fe
 8013348:	3c971547 	.word	0x3c971547
 801334c:	4090cc00 	.word	0x4090cc00

08013350 <fabs>:
 8013350:	ec51 0b10 	vmov	r0, r1, d0
 8013354:	4602      	mov	r2, r0
 8013356:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801335a:	ec43 2b10 	vmov	d0, r2, r3
 801335e:	4770      	bx	lr

08013360 <scalbn>:
 8013360:	b570      	push	{r4, r5, r6, lr}
 8013362:	ec55 4b10 	vmov	r4, r5, d0
 8013366:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801336a:	4606      	mov	r6, r0
 801336c:	462b      	mov	r3, r5
 801336e:	b991      	cbnz	r1, 8013396 <scalbn+0x36>
 8013370:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013374:	4323      	orrs	r3, r4
 8013376:	d03d      	beq.n	80133f4 <scalbn+0x94>
 8013378:	4b35      	ldr	r3, [pc, #212]	@ (8013450 <scalbn+0xf0>)
 801337a:	4620      	mov	r0, r4
 801337c:	4629      	mov	r1, r5
 801337e:	2200      	movs	r2, #0
 8013380:	f7ed f96a 	bl	8000658 <__aeabi_dmul>
 8013384:	4b33      	ldr	r3, [pc, #204]	@ (8013454 <scalbn+0xf4>)
 8013386:	429e      	cmp	r6, r3
 8013388:	4604      	mov	r4, r0
 801338a:	460d      	mov	r5, r1
 801338c:	da0f      	bge.n	80133ae <scalbn+0x4e>
 801338e:	a328      	add	r3, pc, #160	@ (adr r3, 8013430 <scalbn+0xd0>)
 8013390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013394:	e01e      	b.n	80133d4 <scalbn+0x74>
 8013396:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801339a:	4291      	cmp	r1, r2
 801339c:	d10b      	bne.n	80133b6 <scalbn+0x56>
 801339e:	4622      	mov	r2, r4
 80133a0:	4620      	mov	r0, r4
 80133a2:	4629      	mov	r1, r5
 80133a4:	f7ec ffa2 	bl	80002ec <__adddf3>
 80133a8:	4604      	mov	r4, r0
 80133aa:	460d      	mov	r5, r1
 80133ac:	e022      	b.n	80133f4 <scalbn+0x94>
 80133ae:	460b      	mov	r3, r1
 80133b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80133b4:	3936      	subs	r1, #54	@ 0x36
 80133b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80133ba:	4296      	cmp	r6, r2
 80133bc:	dd0d      	ble.n	80133da <scalbn+0x7a>
 80133be:	2d00      	cmp	r5, #0
 80133c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013438 <scalbn+0xd8>)
 80133c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133c6:	da02      	bge.n	80133ce <scalbn+0x6e>
 80133c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013440 <scalbn+0xe0>)
 80133ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8013438 <scalbn+0xd8>)
 80133d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d4:	f7ed f940 	bl	8000658 <__aeabi_dmul>
 80133d8:	e7e6      	b.n	80133a8 <scalbn+0x48>
 80133da:	1872      	adds	r2, r6, r1
 80133dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80133e0:	428a      	cmp	r2, r1
 80133e2:	dcec      	bgt.n	80133be <scalbn+0x5e>
 80133e4:	2a00      	cmp	r2, #0
 80133e6:	dd08      	ble.n	80133fa <scalbn+0x9a>
 80133e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80133ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80133f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80133f4:	ec45 4b10 	vmov	d0, r4, r5
 80133f8:	bd70      	pop	{r4, r5, r6, pc}
 80133fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80133fe:	da08      	bge.n	8013412 <scalbn+0xb2>
 8013400:	2d00      	cmp	r5, #0
 8013402:	a10b      	add	r1, pc, #44	@ (adr r1, 8013430 <scalbn+0xd0>)
 8013404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013408:	dac1      	bge.n	801338e <scalbn+0x2e>
 801340a:	a10f      	add	r1, pc, #60	@ (adr r1, 8013448 <scalbn+0xe8>)
 801340c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013410:	e7bd      	b.n	801338e <scalbn+0x2e>
 8013412:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013416:	3236      	adds	r2, #54	@ 0x36
 8013418:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801341c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013420:	4620      	mov	r0, r4
 8013422:	4b0d      	ldr	r3, [pc, #52]	@ (8013458 <scalbn+0xf8>)
 8013424:	4629      	mov	r1, r5
 8013426:	2200      	movs	r2, #0
 8013428:	e7d4      	b.n	80133d4 <scalbn+0x74>
 801342a:	bf00      	nop
 801342c:	f3af 8000 	nop.w
 8013430:	c2f8f359 	.word	0xc2f8f359
 8013434:	01a56e1f 	.word	0x01a56e1f
 8013438:	8800759c 	.word	0x8800759c
 801343c:	7e37e43c 	.word	0x7e37e43c
 8013440:	8800759c 	.word	0x8800759c
 8013444:	fe37e43c 	.word	0xfe37e43c
 8013448:	c2f8f359 	.word	0xc2f8f359
 801344c:	81a56e1f 	.word	0x81a56e1f
 8013450:	43500000 	.word	0x43500000
 8013454:	ffff3cb0 	.word	0xffff3cb0
 8013458:	3c900000 	.word	0x3c900000

0801345c <with_errno>:
 801345c:	b510      	push	{r4, lr}
 801345e:	ed2d 8b02 	vpush	{d8}
 8013462:	eeb0 8a40 	vmov.f32	s16, s0
 8013466:	eef0 8a60 	vmov.f32	s17, s1
 801346a:	4604      	mov	r4, r0
 801346c:	f000 ff2c 	bl	80142c8 <__errno>
 8013470:	eeb0 0a48 	vmov.f32	s0, s16
 8013474:	eef0 0a68 	vmov.f32	s1, s17
 8013478:	ecbd 8b02 	vpop	{d8}
 801347c:	6004      	str	r4, [r0, #0]
 801347e:	bd10      	pop	{r4, pc}

08013480 <xflow>:
 8013480:	4603      	mov	r3, r0
 8013482:	b507      	push	{r0, r1, r2, lr}
 8013484:	ec51 0b10 	vmov	r0, r1, d0
 8013488:	b183      	cbz	r3, 80134ac <xflow+0x2c>
 801348a:	4602      	mov	r2, r0
 801348c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013490:	e9cd 2300 	strd	r2, r3, [sp]
 8013494:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013498:	f7ed f8de 	bl	8000658 <__aeabi_dmul>
 801349c:	ec41 0b10 	vmov	d0, r0, r1
 80134a0:	2022      	movs	r0, #34	@ 0x22
 80134a2:	b003      	add	sp, #12
 80134a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80134a8:	f7ff bfd8 	b.w	801345c <with_errno>
 80134ac:	4602      	mov	r2, r0
 80134ae:	460b      	mov	r3, r1
 80134b0:	e7ee      	b.n	8013490 <xflow+0x10>
 80134b2:	0000      	movs	r0, r0
 80134b4:	0000      	movs	r0, r0
	...

080134b8 <__math_uflow>:
 80134b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80134c0 <__math_uflow+0x8>
 80134bc:	f7ff bfe0 	b.w	8013480 <xflow>
 80134c0:	00000000 	.word	0x00000000
 80134c4:	10000000 	.word	0x10000000

080134c8 <__math_oflow>:
 80134c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80134d0 <__math_oflow+0x8>
 80134cc:	f7ff bfd8 	b.w	8013480 <xflow>
 80134d0:	00000000 	.word	0x00000000
 80134d4:	70000000 	.word	0x70000000

080134d8 <abort>:
 80134d8:	b508      	push	{r3, lr}
 80134da:	2006      	movs	r0, #6
 80134dc:	f000 fe7e 	bl	80141dc <raise>
 80134e0:	2001      	movs	r0, #1
 80134e2:	f7fa f97d 	bl	800d7e0 <_exit>
	...

080134e8 <malloc>:
 80134e8:	4b02      	ldr	r3, [pc, #8]	@ (80134f4 <malloc+0xc>)
 80134ea:	4601      	mov	r1, r0
 80134ec:	6818      	ldr	r0, [r3, #0]
 80134ee:	f000 b82d 	b.w	801354c <_malloc_r>
 80134f2:	bf00      	nop
 80134f4:	20000044 	.word	0x20000044

080134f8 <free>:
 80134f8:	4b02      	ldr	r3, [pc, #8]	@ (8013504 <free+0xc>)
 80134fa:	4601      	mov	r1, r0
 80134fc:	6818      	ldr	r0, [r3, #0]
 80134fe:	f001 bd6b 	b.w	8014fd8 <_free_r>
 8013502:	bf00      	nop
 8013504:	20000044 	.word	0x20000044

08013508 <sbrk_aligned>:
 8013508:	b570      	push	{r4, r5, r6, lr}
 801350a:	4e0f      	ldr	r6, [pc, #60]	@ (8013548 <sbrk_aligned+0x40>)
 801350c:	460c      	mov	r4, r1
 801350e:	6831      	ldr	r1, [r6, #0]
 8013510:	4605      	mov	r5, r0
 8013512:	b911      	cbnz	r1, 801351a <sbrk_aligned+0x12>
 8013514:	f000 feb6 	bl	8014284 <_sbrk_r>
 8013518:	6030      	str	r0, [r6, #0]
 801351a:	4621      	mov	r1, r4
 801351c:	4628      	mov	r0, r5
 801351e:	f000 feb1 	bl	8014284 <_sbrk_r>
 8013522:	1c43      	adds	r3, r0, #1
 8013524:	d103      	bne.n	801352e <sbrk_aligned+0x26>
 8013526:	f04f 34ff 	mov.w	r4, #4294967295
 801352a:	4620      	mov	r0, r4
 801352c:	bd70      	pop	{r4, r5, r6, pc}
 801352e:	1cc4      	adds	r4, r0, #3
 8013530:	f024 0403 	bic.w	r4, r4, #3
 8013534:	42a0      	cmp	r0, r4
 8013536:	d0f8      	beq.n	801352a <sbrk_aligned+0x22>
 8013538:	1a21      	subs	r1, r4, r0
 801353a:	4628      	mov	r0, r5
 801353c:	f000 fea2 	bl	8014284 <_sbrk_r>
 8013540:	3001      	adds	r0, #1
 8013542:	d1f2      	bne.n	801352a <sbrk_aligned+0x22>
 8013544:	e7ef      	b.n	8013526 <sbrk_aligned+0x1e>
 8013546:	bf00      	nop
 8013548:	200005b8 	.word	0x200005b8

0801354c <_malloc_r>:
 801354c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013550:	1ccd      	adds	r5, r1, #3
 8013552:	f025 0503 	bic.w	r5, r5, #3
 8013556:	3508      	adds	r5, #8
 8013558:	2d0c      	cmp	r5, #12
 801355a:	bf38      	it	cc
 801355c:	250c      	movcc	r5, #12
 801355e:	2d00      	cmp	r5, #0
 8013560:	4606      	mov	r6, r0
 8013562:	db01      	blt.n	8013568 <_malloc_r+0x1c>
 8013564:	42a9      	cmp	r1, r5
 8013566:	d904      	bls.n	8013572 <_malloc_r+0x26>
 8013568:	230c      	movs	r3, #12
 801356a:	6033      	str	r3, [r6, #0]
 801356c:	2000      	movs	r0, #0
 801356e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013572:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013648 <_malloc_r+0xfc>
 8013576:	f000 f869 	bl	801364c <__malloc_lock>
 801357a:	f8d8 3000 	ldr.w	r3, [r8]
 801357e:	461c      	mov	r4, r3
 8013580:	bb44      	cbnz	r4, 80135d4 <_malloc_r+0x88>
 8013582:	4629      	mov	r1, r5
 8013584:	4630      	mov	r0, r6
 8013586:	f7ff ffbf 	bl	8013508 <sbrk_aligned>
 801358a:	1c43      	adds	r3, r0, #1
 801358c:	4604      	mov	r4, r0
 801358e:	d158      	bne.n	8013642 <_malloc_r+0xf6>
 8013590:	f8d8 4000 	ldr.w	r4, [r8]
 8013594:	4627      	mov	r7, r4
 8013596:	2f00      	cmp	r7, #0
 8013598:	d143      	bne.n	8013622 <_malloc_r+0xd6>
 801359a:	2c00      	cmp	r4, #0
 801359c:	d04b      	beq.n	8013636 <_malloc_r+0xea>
 801359e:	6823      	ldr	r3, [r4, #0]
 80135a0:	4639      	mov	r1, r7
 80135a2:	4630      	mov	r0, r6
 80135a4:	eb04 0903 	add.w	r9, r4, r3
 80135a8:	f000 fe6c 	bl	8014284 <_sbrk_r>
 80135ac:	4581      	cmp	r9, r0
 80135ae:	d142      	bne.n	8013636 <_malloc_r+0xea>
 80135b0:	6821      	ldr	r1, [r4, #0]
 80135b2:	1a6d      	subs	r5, r5, r1
 80135b4:	4629      	mov	r1, r5
 80135b6:	4630      	mov	r0, r6
 80135b8:	f7ff ffa6 	bl	8013508 <sbrk_aligned>
 80135bc:	3001      	adds	r0, #1
 80135be:	d03a      	beq.n	8013636 <_malloc_r+0xea>
 80135c0:	6823      	ldr	r3, [r4, #0]
 80135c2:	442b      	add	r3, r5
 80135c4:	6023      	str	r3, [r4, #0]
 80135c6:	f8d8 3000 	ldr.w	r3, [r8]
 80135ca:	685a      	ldr	r2, [r3, #4]
 80135cc:	bb62      	cbnz	r2, 8013628 <_malloc_r+0xdc>
 80135ce:	f8c8 7000 	str.w	r7, [r8]
 80135d2:	e00f      	b.n	80135f4 <_malloc_r+0xa8>
 80135d4:	6822      	ldr	r2, [r4, #0]
 80135d6:	1b52      	subs	r2, r2, r5
 80135d8:	d420      	bmi.n	801361c <_malloc_r+0xd0>
 80135da:	2a0b      	cmp	r2, #11
 80135dc:	d917      	bls.n	801360e <_malloc_r+0xc2>
 80135de:	1961      	adds	r1, r4, r5
 80135e0:	42a3      	cmp	r3, r4
 80135e2:	6025      	str	r5, [r4, #0]
 80135e4:	bf18      	it	ne
 80135e6:	6059      	strne	r1, [r3, #4]
 80135e8:	6863      	ldr	r3, [r4, #4]
 80135ea:	bf08      	it	eq
 80135ec:	f8c8 1000 	streq.w	r1, [r8]
 80135f0:	5162      	str	r2, [r4, r5]
 80135f2:	604b      	str	r3, [r1, #4]
 80135f4:	4630      	mov	r0, r6
 80135f6:	f000 f82f 	bl	8013658 <__malloc_unlock>
 80135fa:	f104 000b 	add.w	r0, r4, #11
 80135fe:	1d23      	adds	r3, r4, #4
 8013600:	f020 0007 	bic.w	r0, r0, #7
 8013604:	1ac2      	subs	r2, r0, r3
 8013606:	bf1c      	itt	ne
 8013608:	1a1b      	subne	r3, r3, r0
 801360a:	50a3      	strne	r3, [r4, r2]
 801360c:	e7af      	b.n	801356e <_malloc_r+0x22>
 801360e:	6862      	ldr	r2, [r4, #4]
 8013610:	42a3      	cmp	r3, r4
 8013612:	bf0c      	ite	eq
 8013614:	f8c8 2000 	streq.w	r2, [r8]
 8013618:	605a      	strne	r2, [r3, #4]
 801361a:	e7eb      	b.n	80135f4 <_malloc_r+0xa8>
 801361c:	4623      	mov	r3, r4
 801361e:	6864      	ldr	r4, [r4, #4]
 8013620:	e7ae      	b.n	8013580 <_malloc_r+0x34>
 8013622:	463c      	mov	r4, r7
 8013624:	687f      	ldr	r7, [r7, #4]
 8013626:	e7b6      	b.n	8013596 <_malloc_r+0x4a>
 8013628:	461a      	mov	r2, r3
 801362a:	685b      	ldr	r3, [r3, #4]
 801362c:	42a3      	cmp	r3, r4
 801362e:	d1fb      	bne.n	8013628 <_malloc_r+0xdc>
 8013630:	2300      	movs	r3, #0
 8013632:	6053      	str	r3, [r2, #4]
 8013634:	e7de      	b.n	80135f4 <_malloc_r+0xa8>
 8013636:	230c      	movs	r3, #12
 8013638:	6033      	str	r3, [r6, #0]
 801363a:	4630      	mov	r0, r6
 801363c:	f000 f80c 	bl	8013658 <__malloc_unlock>
 8013640:	e794      	b.n	801356c <_malloc_r+0x20>
 8013642:	6005      	str	r5, [r0, #0]
 8013644:	e7d6      	b.n	80135f4 <_malloc_r+0xa8>
 8013646:	bf00      	nop
 8013648:	200005bc 	.word	0x200005bc

0801364c <__malloc_lock>:
 801364c:	4801      	ldr	r0, [pc, #4]	@ (8013654 <__malloc_lock+0x8>)
 801364e:	f000 be66 	b.w	801431e <__retarget_lock_acquire_recursive>
 8013652:	bf00      	nop
 8013654:	20000700 	.word	0x20000700

08013658 <__malloc_unlock>:
 8013658:	4801      	ldr	r0, [pc, #4]	@ (8013660 <__malloc_unlock+0x8>)
 801365a:	f000 be61 	b.w	8014320 <__retarget_lock_release_recursive>
 801365e:	bf00      	nop
 8013660:	20000700 	.word	0x20000700

08013664 <__cxa_atexit>:
 8013664:	b510      	push	{r4, lr}
 8013666:	4604      	mov	r4, r0
 8013668:	4804      	ldr	r0, [pc, #16]	@ (801367c <__cxa_atexit+0x18>)
 801366a:	4613      	mov	r3, r2
 801366c:	b120      	cbz	r0, 8013678 <__cxa_atexit+0x14>
 801366e:	460a      	mov	r2, r1
 8013670:	2002      	movs	r0, #2
 8013672:	4621      	mov	r1, r4
 8013674:	f3af 8000 	nop.w
 8013678:	bd10      	pop	{r4, pc}
 801367a:	bf00      	nop
 801367c:	00000000 	.word	0x00000000

08013680 <__cvt>:
 8013680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013684:	ec57 6b10 	vmov	r6, r7, d0
 8013688:	2f00      	cmp	r7, #0
 801368a:	460c      	mov	r4, r1
 801368c:	4619      	mov	r1, r3
 801368e:	463b      	mov	r3, r7
 8013690:	bfbb      	ittet	lt
 8013692:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013696:	461f      	movlt	r7, r3
 8013698:	2300      	movge	r3, #0
 801369a:	232d      	movlt	r3, #45	@ 0x2d
 801369c:	700b      	strb	r3, [r1, #0]
 801369e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80136a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80136a4:	4691      	mov	r9, r2
 80136a6:	f023 0820 	bic.w	r8, r3, #32
 80136aa:	bfbc      	itt	lt
 80136ac:	4632      	movlt	r2, r6
 80136ae:	4616      	movlt	r6, r2
 80136b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80136b4:	d005      	beq.n	80136c2 <__cvt+0x42>
 80136b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80136ba:	d100      	bne.n	80136be <__cvt+0x3e>
 80136bc:	3401      	adds	r4, #1
 80136be:	2102      	movs	r1, #2
 80136c0:	e000      	b.n	80136c4 <__cvt+0x44>
 80136c2:	2103      	movs	r1, #3
 80136c4:	ab03      	add	r3, sp, #12
 80136c6:	9301      	str	r3, [sp, #4]
 80136c8:	ab02      	add	r3, sp, #8
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	ec47 6b10 	vmov	d0, r6, r7
 80136d0:	4653      	mov	r3, sl
 80136d2:	4622      	mov	r2, r4
 80136d4:	f000 febc 	bl	8014450 <_dtoa_r>
 80136d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80136dc:	4605      	mov	r5, r0
 80136de:	d119      	bne.n	8013714 <__cvt+0x94>
 80136e0:	f019 0f01 	tst.w	r9, #1
 80136e4:	d00e      	beq.n	8013704 <__cvt+0x84>
 80136e6:	eb00 0904 	add.w	r9, r0, r4
 80136ea:	2200      	movs	r2, #0
 80136ec:	2300      	movs	r3, #0
 80136ee:	4630      	mov	r0, r6
 80136f0:	4639      	mov	r1, r7
 80136f2:	f7ed fa19 	bl	8000b28 <__aeabi_dcmpeq>
 80136f6:	b108      	cbz	r0, 80136fc <__cvt+0x7c>
 80136f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80136fc:	2230      	movs	r2, #48	@ 0x30
 80136fe:	9b03      	ldr	r3, [sp, #12]
 8013700:	454b      	cmp	r3, r9
 8013702:	d31e      	bcc.n	8013742 <__cvt+0xc2>
 8013704:	9b03      	ldr	r3, [sp, #12]
 8013706:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013708:	1b5b      	subs	r3, r3, r5
 801370a:	4628      	mov	r0, r5
 801370c:	6013      	str	r3, [r2, #0]
 801370e:	b004      	add	sp, #16
 8013710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013714:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013718:	eb00 0904 	add.w	r9, r0, r4
 801371c:	d1e5      	bne.n	80136ea <__cvt+0x6a>
 801371e:	7803      	ldrb	r3, [r0, #0]
 8013720:	2b30      	cmp	r3, #48	@ 0x30
 8013722:	d10a      	bne.n	801373a <__cvt+0xba>
 8013724:	2200      	movs	r2, #0
 8013726:	2300      	movs	r3, #0
 8013728:	4630      	mov	r0, r6
 801372a:	4639      	mov	r1, r7
 801372c:	f7ed f9fc 	bl	8000b28 <__aeabi_dcmpeq>
 8013730:	b918      	cbnz	r0, 801373a <__cvt+0xba>
 8013732:	f1c4 0401 	rsb	r4, r4, #1
 8013736:	f8ca 4000 	str.w	r4, [sl]
 801373a:	f8da 3000 	ldr.w	r3, [sl]
 801373e:	4499      	add	r9, r3
 8013740:	e7d3      	b.n	80136ea <__cvt+0x6a>
 8013742:	1c59      	adds	r1, r3, #1
 8013744:	9103      	str	r1, [sp, #12]
 8013746:	701a      	strb	r2, [r3, #0]
 8013748:	e7d9      	b.n	80136fe <__cvt+0x7e>

0801374a <__exponent>:
 801374a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801374c:	2900      	cmp	r1, #0
 801374e:	bfba      	itte	lt
 8013750:	4249      	neglt	r1, r1
 8013752:	232d      	movlt	r3, #45	@ 0x2d
 8013754:	232b      	movge	r3, #43	@ 0x2b
 8013756:	2909      	cmp	r1, #9
 8013758:	7002      	strb	r2, [r0, #0]
 801375a:	7043      	strb	r3, [r0, #1]
 801375c:	dd29      	ble.n	80137b2 <__exponent+0x68>
 801375e:	f10d 0307 	add.w	r3, sp, #7
 8013762:	461d      	mov	r5, r3
 8013764:	270a      	movs	r7, #10
 8013766:	461a      	mov	r2, r3
 8013768:	fbb1 f6f7 	udiv	r6, r1, r7
 801376c:	fb07 1416 	mls	r4, r7, r6, r1
 8013770:	3430      	adds	r4, #48	@ 0x30
 8013772:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013776:	460c      	mov	r4, r1
 8013778:	2c63      	cmp	r4, #99	@ 0x63
 801377a:	f103 33ff 	add.w	r3, r3, #4294967295
 801377e:	4631      	mov	r1, r6
 8013780:	dcf1      	bgt.n	8013766 <__exponent+0x1c>
 8013782:	3130      	adds	r1, #48	@ 0x30
 8013784:	1e94      	subs	r4, r2, #2
 8013786:	f803 1c01 	strb.w	r1, [r3, #-1]
 801378a:	1c41      	adds	r1, r0, #1
 801378c:	4623      	mov	r3, r4
 801378e:	42ab      	cmp	r3, r5
 8013790:	d30a      	bcc.n	80137a8 <__exponent+0x5e>
 8013792:	f10d 0309 	add.w	r3, sp, #9
 8013796:	1a9b      	subs	r3, r3, r2
 8013798:	42ac      	cmp	r4, r5
 801379a:	bf88      	it	hi
 801379c:	2300      	movhi	r3, #0
 801379e:	3302      	adds	r3, #2
 80137a0:	4403      	add	r3, r0
 80137a2:	1a18      	subs	r0, r3, r0
 80137a4:	b003      	add	sp, #12
 80137a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80137ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80137b0:	e7ed      	b.n	801378e <__exponent+0x44>
 80137b2:	2330      	movs	r3, #48	@ 0x30
 80137b4:	3130      	adds	r1, #48	@ 0x30
 80137b6:	7083      	strb	r3, [r0, #2]
 80137b8:	70c1      	strb	r1, [r0, #3]
 80137ba:	1d03      	adds	r3, r0, #4
 80137bc:	e7f1      	b.n	80137a2 <__exponent+0x58>
	...

080137c0 <_printf_float>:
 80137c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c4:	b08d      	sub	sp, #52	@ 0x34
 80137c6:	460c      	mov	r4, r1
 80137c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80137cc:	4616      	mov	r6, r2
 80137ce:	461f      	mov	r7, r3
 80137d0:	4605      	mov	r5, r0
 80137d2:	f000 fd0b 	bl	80141ec <_localeconv_r>
 80137d6:	6803      	ldr	r3, [r0, #0]
 80137d8:	9304      	str	r3, [sp, #16]
 80137da:	4618      	mov	r0, r3
 80137dc:	f7ec fd78 	bl	80002d0 <strlen>
 80137e0:	2300      	movs	r3, #0
 80137e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80137e4:	f8d8 3000 	ldr.w	r3, [r8]
 80137e8:	9005      	str	r0, [sp, #20]
 80137ea:	3307      	adds	r3, #7
 80137ec:	f023 0307 	bic.w	r3, r3, #7
 80137f0:	f103 0208 	add.w	r2, r3, #8
 80137f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80137f8:	f8d4 b000 	ldr.w	fp, [r4]
 80137fc:	f8c8 2000 	str.w	r2, [r8]
 8013800:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013804:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013808:	9307      	str	r3, [sp, #28]
 801380a:	f8cd 8018 	str.w	r8, [sp, #24]
 801380e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013816:	4b9c      	ldr	r3, [pc, #624]	@ (8013a88 <_printf_float+0x2c8>)
 8013818:	f04f 32ff 	mov.w	r2, #4294967295
 801381c:	f7ed f9b6 	bl	8000b8c <__aeabi_dcmpun>
 8013820:	bb70      	cbnz	r0, 8013880 <_printf_float+0xc0>
 8013822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013826:	4b98      	ldr	r3, [pc, #608]	@ (8013a88 <_printf_float+0x2c8>)
 8013828:	f04f 32ff 	mov.w	r2, #4294967295
 801382c:	f7ed f990 	bl	8000b50 <__aeabi_dcmple>
 8013830:	bb30      	cbnz	r0, 8013880 <_printf_float+0xc0>
 8013832:	2200      	movs	r2, #0
 8013834:	2300      	movs	r3, #0
 8013836:	4640      	mov	r0, r8
 8013838:	4649      	mov	r1, r9
 801383a:	f7ed f97f 	bl	8000b3c <__aeabi_dcmplt>
 801383e:	b110      	cbz	r0, 8013846 <_printf_float+0x86>
 8013840:	232d      	movs	r3, #45	@ 0x2d
 8013842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013846:	4a91      	ldr	r2, [pc, #580]	@ (8013a8c <_printf_float+0x2cc>)
 8013848:	4b91      	ldr	r3, [pc, #580]	@ (8013a90 <_printf_float+0x2d0>)
 801384a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801384e:	bf94      	ite	ls
 8013850:	4690      	movls	r8, r2
 8013852:	4698      	movhi	r8, r3
 8013854:	2303      	movs	r3, #3
 8013856:	6123      	str	r3, [r4, #16]
 8013858:	f02b 0304 	bic.w	r3, fp, #4
 801385c:	6023      	str	r3, [r4, #0]
 801385e:	f04f 0900 	mov.w	r9, #0
 8013862:	9700      	str	r7, [sp, #0]
 8013864:	4633      	mov	r3, r6
 8013866:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013868:	4621      	mov	r1, r4
 801386a:	4628      	mov	r0, r5
 801386c:	f000 f9d2 	bl	8013c14 <_printf_common>
 8013870:	3001      	adds	r0, #1
 8013872:	f040 808d 	bne.w	8013990 <_printf_float+0x1d0>
 8013876:	f04f 30ff 	mov.w	r0, #4294967295
 801387a:	b00d      	add	sp, #52	@ 0x34
 801387c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013880:	4642      	mov	r2, r8
 8013882:	464b      	mov	r3, r9
 8013884:	4640      	mov	r0, r8
 8013886:	4649      	mov	r1, r9
 8013888:	f7ed f980 	bl	8000b8c <__aeabi_dcmpun>
 801388c:	b140      	cbz	r0, 80138a0 <_printf_float+0xe0>
 801388e:	464b      	mov	r3, r9
 8013890:	2b00      	cmp	r3, #0
 8013892:	bfbc      	itt	lt
 8013894:	232d      	movlt	r3, #45	@ 0x2d
 8013896:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801389a:	4a7e      	ldr	r2, [pc, #504]	@ (8013a94 <_printf_float+0x2d4>)
 801389c:	4b7e      	ldr	r3, [pc, #504]	@ (8013a98 <_printf_float+0x2d8>)
 801389e:	e7d4      	b.n	801384a <_printf_float+0x8a>
 80138a0:	6863      	ldr	r3, [r4, #4]
 80138a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80138a6:	9206      	str	r2, [sp, #24]
 80138a8:	1c5a      	adds	r2, r3, #1
 80138aa:	d13b      	bne.n	8013924 <_printf_float+0x164>
 80138ac:	2306      	movs	r3, #6
 80138ae:	6063      	str	r3, [r4, #4]
 80138b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80138b4:	2300      	movs	r3, #0
 80138b6:	6022      	str	r2, [r4, #0]
 80138b8:	9303      	str	r3, [sp, #12]
 80138ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80138bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80138c0:	ab09      	add	r3, sp, #36	@ 0x24
 80138c2:	9300      	str	r3, [sp, #0]
 80138c4:	6861      	ldr	r1, [r4, #4]
 80138c6:	ec49 8b10 	vmov	d0, r8, r9
 80138ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80138ce:	4628      	mov	r0, r5
 80138d0:	f7ff fed6 	bl	8013680 <__cvt>
 80138d4:	9b06      	ldr	r3, [sp, #24]
 80138d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80138d8:	2b47      	cmp	r3, #71	@ 0x47
 80138da:	4680      	mov	r8, r0
 80138dc:	d129      	bne.n	8013932 <_printf_float+0x172>
 80138de:	1cc8      	adds	r0, r1, #3
 80138e0:	db02      	blt.n	80138e8 <_printf_float+0x128>
 80138e2:	6863      	ldr	r3, [r4, #4]
 80138e4:	4299      	cmp	r1, r3
 80138e6:	dd41      	ble.n	801396c <_printf_float+0x1ac>
 80138e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80138ec:	fa5f fa8a 	uxtb.w	sl, sl
 80138f0:	3901      	subs	r1, #1
 80138f2:	4652      	mov	r2, sl
 80138f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80138f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80138fa:	f7ff ff26 	bl	801374a <__exponent>
 80138fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013900:	1813      	adds	r3, r2, r0
 8013902:	2a01      	cmp	r2, #1
 8013904:	4681      	mov	r9, r0
 8013906:	6123      	str	r3, [r4, #16]
 8013908:	dc02      	bgt.n	8013910 <_printf_float+0x150>
 801390a:	6822      	ldr	r2, [r4, #0]
 801390c:	07d2      	lsls	r2, r2, #31
 801390e:	d501      	bpl.n	8013914 <_printf_float+0x154>
 8013910:	3301      	adds	r3, #1
 8013912:	6123      	str	r3, [r4, #16]
 8013914:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013918:	2b00      	cmp	r3, #0
 801391a:	d0a2      	beq.n	8013862 <_printf_float+0xa2>
 801391c:	232d      	movs	r3, #45	@ 0x2d
 801391e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013922:	e79e      	b.n	8013862 <_printf_float+0xa2>
 8013924:	9a06      	ldr	r2, [sp, #24]
 8013926:	2a47      	cmp	r2, #71	@ 0x47
 8013928:	d1c2      	bne.n	80138b0 <_printf_float+0xf0>
 801392a:	2b00      	cmp	r3, #0
 801392c:	d1c0      	bne.n	80138b0 <_printf_float+0xf0>
 801392e:	2301      	movs	r3, #1
 8013930:	e7bd      	b.n	80138ae <_printf_float+0xee>
 8013932:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013936:	d9db      	bls.n	80138f0 <_printf_float+0x130>
 8013938:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801393c:	d118      	bne.n	8013970 <_printf_float+0x1b0>
 801393e:	2900      	cmp	r1, #0
 8013940:	6863      	ldr	r3, [r4, #4]
 8013942:	dd0b      	ble.n	801395c <_printf_float+0x19c>
 8013944:	6121      	str	r1, [r4, #16]
 8013946:	b913      	cbnz	r3, 801394e <_printf_float+0x18e>
 8013948:	6822      	ldr	r2, [r4, #0]
 801394a:	07d0      	lsls	r0, r2, #31
 801394c:	d502      	bpl.n	8013954 <_printf_float+0x194>
 801394e:	3301      	adds	r3, #1
 8013950:	440b      	add	r3, r1
 8013952:	6123      	str	r3, [r4, #16]
 8013954:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013956:	f04f 0900 	mov.w	r9, #0
 801395a:	e7db      	b.n	8013914 <_printf_float+0x154>
 801395c:	b913      	cbnz	r3, 8013964 <_printf_float+0x1a4>
 801395e:	6822      	ldr	r2, [r4, #0]
 8013960:	07d2      	lsls	r2, r2, #31
 8013962:	d501      	bpl.n	8013968 <_printf_float+0x1a8>
 8013964:	3302      	adds	r3, #2
 8013966:	e7f4      	b.n	8013952 <_printf_float+0x192>
 8013968:	2301      	movs	r3, #1
 801396a:	e7f2      	b.n	8013952 <_printf_float+0x192>
 801396c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013972:	4299      	cmp	r1, r3
 8013974:	db05      	blt.n	8013982 <_printf_float+0x1c2>
 8013976:	6823      	ldr	r3, [r4, #0]
 8013978:	6121      	str	r1, [r4, #16]
 801397a:	07d8      	lsls	r0, r3, #31
 801397c:	d5ea      	bpl.n	8013954 <_printf_float+0x194>
 801397e:	1c4b      	adds	r3, r1, #1
 8013980:	e7e7      	b.n	8013952 <_printf_float+0x192>
 8013982:	2900      	cmp	r1, #0
 8013984:	bfd4      	ite	le
 8013986:	f1c1 0202 	rsble	r2, r1, #2
 801398a:	2201      	movgt	r2, #1
 801398c:	4413      	add	r3, r2
 801398e:	e7e0      	b.n	8013952 <_printf_float+0x192>
 8013990:	6823      	ldr	r3, [r4, #0]
 8013992:	055a      	lsls	r2, r3, #21
 8013994:	d407      	bmi.n	80139a6 <_printf_float+0x1e6>
 8013996:	6923      	ldr	r3, [r4, #16]
 8013998:	4642      	mov	r2, r8
 801399a:	4631      	mov	r1, r6
 801399c:	4628      	mov	r0, r5
 801399e:	47b8      	blx	r7
 80139a0:	3001      	adds	r0, #1
 80139a2:	d12b      	bne.n	80139fc <_printf_float+0x23c>
 80139a4:	e767      	b.n	8013876 <_printf_float+0xb6>
 80139a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80139aa:	f240 80dd 	bls.w	8013b68 <_printf_float+0x3a8>
 80139ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80139b2:	2200      	movs	r2, #0
 80139b4:	2300      	movs	r3, #0
 80139b6:	f7ed f8b7 	bl	8000b28 <__aeabi_dcmpeq>
 80139ba:	2800      	cmp	r0, #0
 80139bc:	d033      	beq.n	8013a26 <_printf_float+0x266>
 80139be:	4a37      	ldr	r2, [pc, #220]	@ (8013a9c <_printf_float+0x2dc>)
 80139c0:	2301      	movs	r3, #1
 80139c2:	4631      	mov	r1, r6
 80139c4:	4628      	mov	r0, r5
 80139c6:	47b8      	blx	r7
 80139c8:	3001      	adds	r0, #1
 80139ca:	f43f af54 	beq.w	8013876 <_printf_float+0xb6>
 80139ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80139d2:	4543      	cmp	r3, r8
 80139d4:	db02      	blt.n	80139dc <_printf_float+0x21c>
 80139d6:	6823      	ldr	r3, [r4, #0]
 80139d8:	07d8      	lsls	r0, r3, #31
 80139da:	d50f      	bpl.n	80139fc <_printf_float+0x23c>
 80139dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139e0:	4631      	mov	r1, r6
 80139e2:	4628      	mov	r0, r5
 80139e4:	47b8      	blx	r7
 80139e6:	3001      	adds	r0, #1
 80139e8:	f43f af45 	beq.w	8013876 <_printf_float+0xb6>
 80139ec:	f04f 0900 	mov.w	r9, #0
 80139f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80139f4:	f104 0a1a 	add.w	sl, r4, #26
 80139f8:	45c8      	cmp	r8, r9
 80139fa:	dc09      	bgt.n	8013a10 <_printf_float+0x250>
 80139fc:	6823      	ldr	r3, [r4, #0]
 80139fe:	079b      	lsls	r3, r3, #30
 8013a00:	f100 8103 	bmi.w	8013c0a <_printf_float+0x44a>
 8013a04:	68e0      	ldr	r0, [r4, #12]
 8013a06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a08:	4298      	cmp	r0, r3
 8013a0a:	bfb8      	it	lt
 8013a0c:	4618      	movlt	r0, r3
 8013a0e:	e734      	b.n	801387a <_printf_float+0xba>
 8013a10:	2301      	movs	r3, #1
 8013a12:	4652      	mov	r2, sl
 8013a14:	4631      	mov	r1, r6
 8013a16:	4628      	mov	r0, r5
 8013a18:	47b8      	blx	r7
 8013a1a:	3001      	adds	r0, #1
 8013a1c:	f43f af2b 	beq.w	8013876 <_printf_float+0xb6>
 8013a20:	f109 0901 	add.w	r9, r9, #1
 8013a24:	e7e8      	b.n	80139f8 <_printf_float+0x238>
 8013a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	dc39      	bgt.n	8013aa0 <_printf_float+0x2e0>
 8013a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8013a9c <_printf_float+0x2dc>)
 8013a2e:	2301      	movs	r3, #1
 8013a30:	4631      	mov	r1, r6
 8013a32:	4628      	mov	r0, r5
 8013a34:	47b8      	blx	r7
 8013a36:	3001      	adds	r0, #1
 8013a38:	f43f af1d 	beq.w	8013876 <_printf_float+0xb6>
 8013a3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013a40:	ea59 0303 	orrs.w	r3, r9, r3
 8013a44:	d102      	bne.n	8013a4c <_printf_float+0x28c>
 8013a46:	6823      	ldr	r3, [r4, #0]
 8013a48:	07d9      	lsls	r1, r3, #31
 8013a4a:	d5d7      	bpl.n	80139fc <_printf_float+0x23c>
 8013a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a50:	4631      	mov	r1, r6
 8013a52:	4628      	mov	r0, r5
 8013a54:	47b8      	blx	r7
 8013a56:	3001      	adds	r0, #1
 8013a58:	f43f af0d 	beq.w	8013876 <_printf_float+0xb6>
 8013a5c:	f04f 0a00 	mov.w	sl, #0
 8013a60:	f104 0b1a 	add.w	fp, r4, #26
 8013a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a66:	425b      	negs	r3, r3
 8013a68:	4553      	cmp	r3, sl
 8013a6a:	dc01      	bgt.n	8013a70 <_printf_float+0x2b0>
 8013a6c:	464b      	mov	r3, r9
 8013a6e:	e793      	b.n	8013998 <_printf_float+0x1d8>
 8013a70:	2301      	movs	r3, #1
 8013a72:	465a      	mov	r2, fp
 8013a74:	4631      	mov	r1, r6
 8013a76:	4628      	mov	r0, r5
 8013a78:	47b8      	blx	r7
 8013a7a:	3001      	adds	r0, #1
 8013a7c:	f43f aefb 	beq.w	8013876 <_printf_float+0xb6>
 8013a80:	f10a 0a01 	add.w	sl, sl, #1
 8013a84:	e7ee      	b.n	8013a64 <_printf_float+0x2a4>
 8013a86:	bf00      	nop
 8013a88:	7fefffff 	.word	0x7fefffff
 8013a8c:	08017780 	.word	0x08017780
 8013a90:	08017784 	.word	0x08017784
 8013a94:	08017788 	.word	0x08017788
 8013a98:	0801778c 	.word	0x0801778c
 8013a9c:	08017790 	.word	0x08017790
 8013aa0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013aa2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013aa6:	4553      	cmp	r3, sl
 8013aa8:	bfa8      	it	ge
 8013aaa:	4653      	movge	r3, sl
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	4699      	mov	r9, r3
 8013ab0:	dc36      	bgt.n	8013b20 <_printf_float+0x360>
 8013ab2:	f04f 0b00 	mov.w	fp, #0
 8013ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013aba:	f104 021a 	add.w	r2, r4, #26
 8013abe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013ac0:	9306      	str	r3, [sp, #24]
 8013ac2:	eba3 0309 	sub.w	r3, r3, r9
 8013ac6:	455b      	cmp	r3, fp
 8013ac8:	dc31      	bgt.n	8013b2e <_printf_float+0x36e>
 8013aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013acc:	459a      	cmp	sl, r3
 8013ace:	dc3a      	bgt.n	8013b46 <_printf_float+0x386>
 8013ad0:	6823      	ldr	r3, [r4, #0]
 8013ad2:	07da      	lsls	r2, r3, #31
 8013ad4:	d437      	bmi.n	8013b46 <_printf_float+0x386>
 8013ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ad8:	ebaa 0903 	sub.w	r9, sl, r3
 8013adc:	9b06      	ldr	r3, [sp, #24]
 8013ade:	ebaa 0303 	sub.w	r3, sl, r3
 8013ae2:	4599      	cmp	r9, r3
 8013ae4:	bfa8      	it	ge
 8013ae6:	4699      	movge	r9, r3
 8013ae8:	f1b9 0f00 	cmp.w	r9, #0
 8013aec:	dc33      	bgt.n	8013b56 <_printf_float+0x396>
 8013aee:	f04f 0800 	mov.w	r8, #0
 8013af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013af6:	f104 0b1a 	add.w	fp, r4, #26
 8013afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013afc:	ebaa 0303 	sub.w	r3, sl, r3
 8013b00:	eba3 0309 	sub.w	r3, r3, r9
 8013b04:	4543      	cmp	r3, r8
 8013b06:	f77f af79 	ble.w	80139fc <_printf_float+0x23c>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	465a      	mov	r2, fp
 8013b0e:	4631      	mov	r1, r6
 8013b10:	4628      	mov	r0, r5
 8013b12:	47b8      	blx	r7
 8013b14:	3001      	adds	r0, #1
 8013b16:	f43f aeae 	beq.w	8013876 <_printf_float+0xb6>
 8013b1a:	f108 0801 	add.w	r8, r8, #1
 8013b1e:	e7ec      	b.n	8013afa <_printf_float+0x33a>
 8013b20:	4642      	mov	r2, r8
 8013b22:	4631      	mov	r1, r6
 8013b24:	4628      	mov	r0, r5
 8013b26:	47b8      	blx	r7
 8013b28:	3001      	adds	r0, #1
 8013b2a:	d1c2      	bne.n	8013ab2 <_printf_float+0x2f2>
 8013b2c:	e6a3      	b.n	8013876 <_printf_float+0xb6>
 8013b2e:	2301      	movs	r3, #1
 8013b30:	4631      	mov	r1, r6
 8013b32:	4628      	mov	r0, r5
 8013b34:	9206      	str	r2, [sp, #24]
 8013b36:	47b8      	blx	r7
 8013b38:	3001      	adds	r0, #1
 8013b3a:	f43f ae9c 	beq.w	8013876 <_printf_float+0xb6>
 8013b3e:	9a06      	ldr	r2, [sp, #24]
 8013b40:	f10b 0b01 	add.w	fp, fp, #1
 8013b44:	e7bb      	b.n	8013abe <_printf_float+0x2fe>
 8013b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b4a:	4631      	mov	r1, r6
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	47b8      	blx	r7
 8013b50:	3001      	adds	r0, #1
 8013b52:	d1c0      	bne.n	8013ad6 <_printf_float+0x316>
 8013b54:	e68f      	b.n	8013876 <_printf_float+0xb6>
 8013b56:	9a06      	ldr	r2, [sp, #24]
 8013b58:	464b      	mov	r3, r9
 8013b5a:	4442      	add	r2, r8
 8013b5c:	4631      	mov	r1, r6
 8013b5e:	4628      	mov	r0, r5
 8013b60:	47b8      	blx	r7
 8013b62:	3001      	adds	r0, #1
 8013b64:	d1c3      	bne.n	8013aee <_printf_float+0x32e>
 8013b66:	e686      	b.n	8013876 <_printf_float+0xb6>
 8013b68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013b6c:	f1ba 0f01 	cmp.w	sl, #1
 8013b70:	dc01      	bgt.n	8013b76 <_printf_float+0x3b6>
 8013b72:	07db      	lsls	r3, r3, #31
 8013b74:	d536      	bpl.n	8013be4 <_printf_float+0x424>
 8013b76:	2301      	movs	r3, #1
 8013b78:	4642      	mov	r2, r8
 8013b7a:	4631      	mov	r1, r6
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	47b8      	blx	r7
 8013b80:	3001      	adds	r0, #1
 8013b82:	f43f ae78 	beq.w	8013876 <_printf_float+0xb6>
 8013b86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b8a:	4631      	mov	r1, r6
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	47b8      	blx	r7
 8013b90:	3001      	adds	r0, #1
 8013b92:	f43f ae70 	beq.w	8013876 <_printf_float+0xb6>
 8013b96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ba2:	f7ec ffc1 	bl	8000b28 <__aeabi_dcmpeq>
 8013ba6:	b9c0      	cbnz	r0, 8013bda <_printf_float+0x41a>
 8013ba8:	4653      	mov	r3, sl
 8013baa:	f108 0201 	add.w	r2, r8, #1
 8013bae:	4631      	mov	r1, r6
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	47b8      	blx	r7
 8013bb4:	3001      	adds	r0, #1
 8013bb6:	d10c      	bne.n	8013bd2 <_printf_float+0x412>
 8013bb8:	e65d      	b.n	8013876 <_printf_float+0xb6>
 8013bba:	2301      	movs	r3, #1
 8013bbc:	465a      	mov	r2, fp
 8013bbe:	4631      	mov	r1, r6
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	47b8      	blx	r7
 8013bc4:	3001      	adds	r0, #1
 8013bc6:	f43f ae56 	beq.w	8013876 <_printf_float+0xb6>
 8013bca:	f108 0801 	add.w	r8, r8, #1
 8013bce:	45d0      	cmp	r8, sl
 8013bd0:	dbf3      	blt.n	8013bba <_printf_float+0x3fa>
 8013bd2:	464b      	mov	r3, r9
 8013bd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013bd8:	e6df      	b.n	801399a <_printf_float+0x1da>
 8013bda:	f04f 0800 	mov.w	r8, #0
 8013bde:	f104 0b1a 	add.w	fp, r4, #26
 8013be2:	e7f4      	b.n	8013bce <_printf_float+0x40e>
 8013be4:	2301      	movs	r3, #1
 8013be6:	4642      	mov	r2, r8
 8013be8:	e7e1      	b.n	8013bae <_printf_float+0x3ee>
 8013bea:	2301      	movs	r3, #1
 8013bec:	464a      	mov	r2, r9
 8013bee:	4631      	mov	r1, r6
 8013bf0:	4628      	mov	r0, r5
 8013bf2:	47b8      	blx	r7
 8013bf4:	3001      	adds	r0, #1
 8013bf6:	f43f ae3e 	beq.w	8013876 <_printf_float+0xb6>
 8013bfa:	f108 0801 	add.w	r8, r8, #1
 8013bfe:	68e3      	ldr	r3, [r4, #12]
 8013c00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013c02:	1a5b      	subs	r3, r3, r1
 8013c04:	4543      	cmp	r3, r8
 8013c06:	dcf0      	bgt.n	8013bea <_printf_float+0x42a>
 8013c08:	e6fc      	b.n	8013a04 <_printf_float+0x244>
 8013c0a:	f04f 0800 	mov.w	r8, #0
 8013c0e:	f104 0919 	add.w	r9, r4, #25
 8013c12:	e7f4      	b.n	8013bfe <_printf_float+0x43e>

08013c14 <_printf_common>:
 8013c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c18:	4616      	mov	r6, r2
 8013c1a:	4698      	mov	r8, r3
 8013c1c:	688a      	ldr	r2, [r1, #8]
 8013c1e:	690b      	ldr	r3, [r1, #16]
 8013c20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013c24:	4293      	cmp	r3, r2
 8013c26:	bfb8      	it	lt
 8013c28:	4613      	movlt	r3, r2
 8013c2a:	6033      	str	r3, [r6, #0]
 8013c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013c30:	4607      	mov	r7, r0
 8013c32:	460c      	mov	r4, r1
 8013c34:	b10a      	cbz	r2, 8013c3a <_printf_common+0x26>
 8013c36:	3301      	adds	r3, #1
 8013c38:	6033      	str	r3, [r6, #0]
 8013c3a:	6823      	ldr	r3, [r4, #0]
 8013c3c:	0699      	lsls	r1, r3, #26
 8013c3e:	bf42      	ittt	mi
 8013c40:	6833      	ldrmi	r3, [r6, #0]
 8013c42:	3302      	addmi	r3, #2
 8013c44:	6033      	strmi	r3, [r6, #0]
 8013c46:	6825      	ldr	r5, [r4, #0]
 8013c48:	f015 0506 	ands.w	r5, r5, #6
 8013c4c:	d106      	bne.n	8013c5c <_printf_common+0x48>
 8013c4e:	f104 0a19 	add.w	sl, r4, #25
 8013c52:	68e3      	ldr	r3, [r4, #12]
 8013c54:	6832      	ldr	r2, [r6, #0]
 8013c56:	1a9b      	subs	r3, r3, r2
 8013c58:	42ab      	cmp	r3, r5
 8013c5a:	dc26      	bgt.n	8013caa <_printf_common+0x96>
 8013c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013c60:	6822      	ldr	r2, [r4, #0]
 8013c62:	3b00      	subs	r3, #0
 8013c64:	bf18      	it	ne
 8013c66:	2301      	movne	r3, #1
 8013c68:	0692      	lsls	r2, r2, #26
 8013c6a:	d42b      	bmi.n	8013cc4 <_printf_common+0xb0>
 8013c6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013c70:	4641      	mov	r1, r8
 8013c72:	4638      	mov	r0, r7
 8013c74:	47c8      	blx	r9
 8013c76:	3001      	adds	r0, #1
 8013c78:	d01e      	beq.n	8013cb8 <_printf_common+0xa4>
 8013c7a:	6823      	ldr	r3, [r4, #0]
 8013c7c:	6922      	ldr	r2, [r4, #16]
 8013c7e:	f003 0306 	and.w	r3, r3, #6
 8013c82:	2b04      	cmp	r3, #4
 8013c84:	bf02      	ittt	eq
 8013c86:	68e5      	ldreq	r5, [r4, #12]
 8013c88:	6833      	ldreq	r3, [r6, #0]
 8013c8a:	1aed      	subeq	r5, r5, r3
 8013c8c:	68a3      	ldr	r3, [r4, #8]
 8013c8e:	bf0c      	ite	eq
 8013c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c94:	2500      	movne	r5, #0
 8013c96:	4293      	cmp	r3, r2
 8013c98:	bfc4      	itt	gt
 8013c9a:	1a9b      	subgt	r3, r3, r2
 8013c9c:	18ed      	addgt	r5, r5, r3
 8013c9e:	2600      	movs	r6, #0
 8013ca0:	341a      	adds	r4, #26
 8013ca2:	42b5      	cmp	r5, r6
 8013ca4:	d11a      	bne.n	8013cdc <_printf_common+0xc8>
 8013ca6:	2000      	movs	r0, #0
 8013ca8:	e008      	b.n	8013cbc <_printf_common+0xa8>
 8013caa:	2301      	movs	r3, #1
 8013cac:	4652      	mov	r2, sl
 8013cae:	4641      	mov	r1, r8
 8013cb0:	4638      	mov	r0, r7
 8013cb2:	47c8      	blx	r9
 8013cb4:	3001      	adds	r0, #1
 8013cb6:	d103      	bne.n	8013cc0 <_printf_common+0xac>
 8013cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cc0:	3501      	adds	r5, #1
 8013cc2:	e7c6      	b.n	8013c52 <_printf_common+0x3e>
 8013cc4:	18e1      	adds	r1, r4, r3
 8013cc6:	1c5a      	adds	r2, r3, #1
 8013cc8:	2030      	movs	r0, #48	@ 0x30
 8013cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013cce:	4422      	add	r2, r4
 8013cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013cd8:	3302      	adds	r3, #2
 8013cda:	e7c7      	b.n	8013c6c <_printf_common+0x58>
 8013cdc:	2301      	movs	r3, #1
 8013cde:	4622      	mov	r2, r4
 8013ce0:	4641      	mov	r1, r8
 8013ce2:	4638      	mov	r0, r7
 8013ce4:	47c8      	blx	r9
 8013ce6:	3001      	adds	r0, #1
 8013ce8:	d0e6      	beq.n	8013cb8 <_printf_common+0xa4>
 8013cea:	3601      	adds	r6, #1
 8013cec:	e7d9      	b.n	8013ca2 <_printf_common+0x8e>
	...

08013cf0 <_printf_i>:
 8013cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf4:	7e0f      	ldrb	r7, [r1, #24]
 8013cf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013cf8:	2f78      	cmp	r7, #120	@ 0x78
 8013cfa:	4691      	mov	r9, r2
 8013cfc:	4680      	mov	r8, r0
 8013cfe:	460c      	mov	r4, r1
 8013d00:	469a      	mov	sl, r3
 8013d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013d06:	d807      	bhi.n	8013d18 <_printf_i+0x28>
 8013d08:	2f62      	cmp	r7, #98	@ 0x62
 8013d0a:	d80a      	bhi.n	8013d22 <_printf_i+0x32>
 8013d0c:	2f00      	cmp	r7, #0
 8013d0e:	f000 80d2 	beq.w	8013eb6 <_printf_i+0x1c6>
 8013d12:	2f58      	cmp	r7, #88	@ 0x58
 8013d14:	f000 80b9 	beq.w	8013e8a <_printf_i+0x19a>
 8013d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013d20:	e03a      	b.n	8013d98 <_printf_i+0xa8>
 8013d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013d26:	2b15      	cmp	r3, #21
 8013d28:	d8f6      	bhi.n	8013d18 <_printf_i+0x28>
 8013d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8013d30 <_printf_i+0x40>)
 8013d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013d30:	08013d89 	.word	0x08013d89
 8013d34:	08013d9d 	.word	0x08013d9d
 8013d38:	08013d19 	.word	0x08013d19
 8013d3c:	08013d19 	.word	0x08013d19
 8013d40:	08013d19 	.word	0x08013d19
 8013d44:	08013d19 	.word	0x08013d19
 8013d48:	08013d9d 	.word	0x08013d9d
 8013d4c:	08013d19 	.word	0x08013d19
 8013d50:	08013d19 	.word	0x08013d19
 8013d54:	08013d19 	.word	0x08013d19
 8013d58:	08013d19 	.word	0x08013d19
 8013d5c:	08013e9d 	.word	0x08013e9d
 8013d60:	08013dc7 	.word	0x08013dc7
 8013d64:	08013e57 	.word	0x08013e57
 8013d68:	08013d19 	.word	0x08013d19
 8013d6c:	08013d19 	.word	0x08013d19
 8013d70:	08013ebf 	.word	0x08013ebf
 8013d74:	08013d19 	.word	0x08013d19
 8013d78:	08013dc7 	.word	0x08013dc7
 8013d7c:	08013d19 	.word	0x08013d19
 8013d80:	08013d19 	.word	0x08013d19
 8013d84:	08013e5f 	.word	0x08013e5f
 8013d88:	6833      	ldr	r3, [r6, #0]
 8013d8a:	1d1a      	adds	r2, r3, #4
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	6032      	str	r2, [r6, #0]
 8013d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013d98:	2301      	movs	r3, #1
 8013d9a:	e09d      	b.n	8013ed8 <_printf_i+0x1e8>
 8013d9c:	6833      	ldr	r3, [r6, #0]
 8013d9e:	6820      	ldr	r0, [r4, #0]
 8013da0:	1d19      	adds	r1, r3, #4
 8013da2:	6031      	str	r1, [r6, #0]
 8013da4:	0606      	lsls	r6, r0, #24
 8013da6:	d501      	bpl.n	8013dac <_printf_i+0xbc>
 8013da8:	681d      	ldr	r5, [r3, #0]
 8013daa:	e003      	b.n	8013db4 <_printf_i+0xc4>
 8013dac:	0645      	lsls	r5, r0, #25
 8013dae:	d5fb      	bpl.n	8013da8 <_printf_i+0xb8>
 8013db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013db4:	2d00      	cmp	r5, #0
 8013db6:	da03      	bge.n	8013dc0 <_printf_i+0xd0>
 8013db8:	232d      	movs	r3, #45	@ 0x2d
 8013dba:	426d      	negs	r5, r5
 8013dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013dc0:	4859      	ldr	r0, [pc, #356]	@ (8013f28 <_printf_i+0x238>)
 8013dc2:	230a      	movs	r3, #10
 8013dc4:	e011      	b.n	8013dea <_printf_i+0xfa>
 8013dc6:	6821      	ldr	r1, [r4, #0]
 8013dc8:	6833      	ldr	r3, [r6, #0]
 8013dca:	0608      	lsls	r0, r1, #24
 8013dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8013dd0:	d402      	bmi.n	8013dd8 <_printf_i+0xe8>
 8013dd2:	0649      	lsls	r1, r1, #25
 8013dd4:	bf48      	it	mi
 8013dd6:	b2ad      	uxthmi	r5, r5
 8013dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8013dda:	4853      	ldr	r0, [pc, #332]	@ (8013f28 <_printf_i+0x238>)
 8013ddc:	6033      	str	r3, [r6, #0]
 8013dde:	bf14      	ite	ne
 8013de0:	230a      	movne	r3, #10
 8013de2:	2308      	moveq	r3, #8
 8013de4:	2100      	movs	r1, #0
 8013de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013dea:	6866      	ldr	r6, [r4, #4]
 8013dec:	60a6      	str	r6, [r4, #8]
 8013dee:	2e00      	cmp	r6, #0
 8013df0:	bfa2      	ittt	ge
 8013df2:	6821      	ldrge	r1, [r4, #0]
 8013df4:	f021 0104 	bicge.w	r1, r1, #4
 8013df8:	6021      	strge	r1, [r4, #0]
 8013dfa:	b90d      	cbnz	r5, 8013e00 <_printf_i+0x110>
 8013dfc:	2e00      	cmp	r6, #0
 8013dfe:	d04b      	beq.n	8013e98 <_printf_i+0x1a8>
 8013e00:	4616      	mov	r6, r2
 8013e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8013e06:	fb03 5711 	mls	r7, r3, r1, r5
 8013e0a:	5dc7      	ldrb	r7, [r0, r7]
 8013e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013e10:	462f      	mov	r7, r5
 8013e12:	42bb      	cmp	r3, r7
 8013e14:	460d      	mov	r5, r1
 8013e16:	d9f4      	bls.n	8013e02 <_printf_i+0x112>
 8013e18:	2b08      	cmp	r3, #8
 8013e1a:	d10b      	bne.n	8013e34 <_printf_i+0x144>
 8013e1c:	6823      	ldr	r3, [r4, #0]
 8013e1e:	07df      	lsls	r7, r3, #31
 8013e20:	d508      	bpl.n	8013e34 <_printf_i+0x144>
 8013e22:	6923      	ldr	r3, [r4, #16]
 8013e24:	6861      	ldr	r1, [r4, #4]
 8013e26:	4299      	cmp	r1, r3
 8013e28:	bfde      	ittt	le
 8013e2a:	2330      	movle	r3, #48	@ 0x30
 8013e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013e34:	1b92      	subs	r2, r2, r6
 8013e36:	6122      	str	r2, [r4, #16]
 8013e38:	f8cd a000 	str.w	sl, [sp]
 8013e3c:	464b      	mov	r3, r9
 8013e3e:	aa03      	add	r2, sp, #12
 8013e40:	4621      	mov	r1, r4
 8013e42:	4640      	mov	r0, r8
 8013e44:	f7ff fee6 	bl	8013c14 <_printf_common>
 8013e48:	3001      	adds	r0, #1
 8013e4a:	d14a      	bne.n	8013ee2 <_printf_i+0x1f2>
 8013e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e50:	b004      	add	sp, #16
 8013e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e56:	6823      	ldr	r3, [r4, #0]
 8013e58:	f043 0320 	orr.w	r3, r3, #32
 8013e5c:	6023      	str	r3, [r4, #0]
 8013e5e:	4833      	ldr	r0, [pc, #204]	@ (8013f2c <_printf_i+0x23c>)
 8013e60:	2778      	movs	r7, #120	@ 0x78
 8013e62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013e66:	6823      	ldr	r3, [r4, #0]
 8013e68:	6831      	ldr	r1, [r6, #0]
 8013e6a:	061f      	lsls	r7, r3, #24
 8013e6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8013e70:	d402      	bmi.n	8013e78 <_printf_i+0x188>
 8013e72:	065f      	lsls	r7, r3, #25
 8013e74:	bf48      	it	mi
 8013e76:	b2ad      	uxthmi	r5, r5
 8013e78:	6031      	str	r1, [r6, #0]
 8013e7a:	07d9      	lsls	r1, r3, #31
 8013e7c:	bf44      	itt	mi
 8013e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8013e82:	6023      	strmi	r3, [r4, #0]
 8013e84:	b11d      	cbz	r5, 8013e8e <_printf_i+0x19e>
 8013e86:	2310      	movs	r3, #16
 8013e88:	e7ac      	b.n	8013de4 <_printf_i+0xf4>
 8013e8a:	4827      	ldr	r0, [pc, #156]	@ (8013f28 <_printf_i+0x238>)
 8013e8c:	e7e9      	b.n	8013e62 <_printf_i+0x172>
 8013e8e:	6823      	ldr	r3, [r4, #0]
 8013e90:	f023 0320 	bic.w	r3, r3, #32
 8013e94:	6023      	str	r3, [r4, #0]
 8013e96:	e7f6      	b.n	8013e86 <_printf_i+0x196>
 8013e98:	4616      	mov	r6, r2
 8013e9a:	e7bd      	b.n	8013e18 <_printf_i+0x128>
 8013e9c:	6833      	ldr	r3, [r6, #0]
 8013e9e:	6825      	ldr	r5, [r4, #0]
 8013ea0:	6961      	ldr	r1, [r4, #20]
 8013ea2:	1d18      	adds	r0, r3, #4
 8013ea4:	6030      	str	r0, [r6, #0]
 8013ea6:	062e      	lsls	r6, r5, #24
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	d501      	bpl.n	8013eb0 <_printf_i+0x1c0>
 8013eac:	6019      	str	r1, [r3, #0]
 8013eae:	e002      	b.n	8013eb6 <_printf_i+0x1c6>
 8013eb0:	0668      	lsls	r0, r5, #25
 8013eb2:	d5fb      	bpl.n	8013eac <_printf_i+0x1bc>
 8013eb4:	8019      	strh	r1, [r3, #0]
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	6123      	str	r3, [r4, #16]
 8013eba:	4616      	mov	r6, r2
 8013ebc:	e7bc      	b.n	8013e38 <_printf_i+0x148>
 8013ebe:	6833      	ldr	r3, [r6, #0]
 8013ec0:	1d1a      	adds	r2, r3, #4
 8013ec2:	6032      	str	r2, [r6, #0]
 8013ec4:	681e      	ldr	r6, [r3, #0]
 8013ec6:	6862      	ldr	r2, [r4, #4]
 8013ec8:	2100      	movs	r1, #0
 8013eca:	4630      	mov	r0, r6
 8013ecc:	f7ec f9b0 	bl	8000230 <memchr>
 8013ed0:	b108      	cbz	r0, 8013ed6 <_printf_i+0x1e6>
 8013ed2:	1b80      	subs	r0, r0, r6
 8013ed4:	6060      	str	r0, [r4, #4]
 8013ed6:	6863      	ldr	r3, [r4, #4]
 8013ed8:	6123      	str	r3, [r4, #16]
 8013eda:	2300      	movs	r3, #0
 8013edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ee0:	e7aa      	b.n	8013e38 <_printf_i+0x148>
 8013ee2:	6923      	ldr	r3, [r4, #16]
 8013ee4:	4632      	mov	r2, r6
 8013ee6:	4649      	mov	r1, r9
 8013ee8:	4640      	mov	r0, r8
 8013eea:	47d0      	blx	sl
 8013eec:	3001      	adds	r0, #1
 8013eee:	d0ad      	beq.n	8013e4c <_printf_i+0x15c>
 8013ef0:	6823      	ldr	r3, [r4, #0]
 8013ef2:	079b      	lsls	r3, r3, #30
 8013ef4:	d413      	bmi.n	8013f1e <_printf_i+0x22e>
 8013ef6:	68e0      	ldr	r0, [r4, #12]
 8013ef8:	9b03      	ldr	r3, [sp, #12]
 8013efa:	4298      	cmp	r0, r3
 8013efc:	bfb8      	it	lt
 8013efe:	4618      	movlt	r0, r3
 8013f00:	e7a6      	b.n	8013e50 <_printf_i+0x160>
 8013f02:	2301      	movs	r3, #1
 8013f04:	4632      	mov	r2, r6
 8013f06:	4649      	mov	r1, r9
 8013f08:	4640      	mov	r0, r8
 8013f0a:	47d0      	blx	sl
 8013f0c:	3001      	adds	r0, #1
 8013f0e:	d09d      	beq.n	8013e4c <_printf_i+0x15c>
 8013f10:	3501      	adds	r5, #1
 8013f12:	68e3      	ldr	r3, [r4, #12]
 8013f14:	9903      	ldr	r1, [sp, #12]
 8013f16:	1a5b      	subs	r3, r3, r1
 8013f18:	42ab      	cmp	r3, r5
 8013f1a:	dcf2      	bgt.n	8013f02 <_printf_i+0x212>
 8013f1c:	e7eb      	b.n	8013ef6 <_printf_i+0x206>
 8013f1e:	2500      	movs	r5, #0
 8013f20:	f104 0619 	add.w	r6, r4, #25
 8013f24:	e7f5      	b.n	8013f12 <_printf_i+0x222>
 8013f26:	bf00      	nop
 8013f28:	08017792 	.word	0x08017792
 8013f2c:	080177a3 	.word	0x080177a3

08013f30 <std>:
 8013f30:	2300      	movs	r3, #0
 8013f32:	b510      	push	{r4, lr}
 8013f34:	4604      	mov	r4, r0
 8013f36:	e9c0 3300 	strd	r3, r3, [r0]
 8013f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013f3e:	6083      	str	r3, [r0, #8]
 8013f40:	8181      	strh	r1, [r0, #12]
 8013f42:	6643      	str	r3, [r0, #100]	@ 0x64
 8013f44:	81c2      	strh	r2, [r0, #14]
 8013f46:	6183      	str	r3, [r0, #24]
 8013f48:	4619      	mov	r1, r3
 8013f4a:	2208      	movs	r2, #8
 8013f4c:	305c      	adds	r0, #92	@ 0x5c
 8013f4e:	f000 f914 	bl	801417a <memset>
 8013f52:	4b0d      	ldr	r3, [pc, #52]	@ (8013f88 <std+0x58>)
 8013f54:	6263      	str	r3, [r4, #36]	@ 0x24
 8013f56:	4b0d      	ldr	r3, [pc, #52]	@ (8013f8c <std+0x5c>)
 8013f58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8013f90 <std+0x60>)
 8013f5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8013f94 <std+0x64>)
 8013f60:	6323      	str	r3, [r4, #48]	@ 0x30
 8013f62:	4b0d      	ldr	r3, [pc, #52]	@ (8013f98 <std+0x68>)
 8013f64:	6224      	str	r4, [r4, #32]
 8013f66:	429c      	cmp	r4, r3
 8013f68:	d006      	beq.n	8013f78 <std+0x48>
 8013f6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013f6e:	4294      	cmp	r4, r2
 8013f70:	d002      	beq.n	8013f78 <std+0x48>
 8013f72:	33d0      	adds	r3, #208	@ 0xd0
 8013f74:	429c      	cmp	r4, r3
 8013f76:	d105      	bne.n	8013f84 <std+0x54>
 8013f78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f80:	f000 b9cc 	b.w	801431c <__retarget_lock_init_recursive>
 8013f84:	bd10      	pop	{r4, pc}
 8013f86:	bf00      	nop
 8013f88:	080140f5 	.word	0x080140f5
 8013f8c:	08014117 	.word	0x08014117
 8013f90:	0801414f 	.word	0x0801414f
 8013f94:	08014173 	.word	0x08014173
 8013f98:	200005c0 	.word	0x200005c0

08013f9c <stdio_exit_handler>:
 8013f9c:	4a02      	ldr	r2, [pc, #8]	@ (8013fa8 <stdio_exit_handler+0xc>)
 8013f9e:	4903      	ldr	r1, [pc, #12]	@ (8013fac <stdio_exit_handler+0x10>)
 8013fa0:	4803      	ldr	r0, [pc, #12]	@ (8013fb0 <stdio_exit_handler+0x14>)
 8013fa2:	f000 b869 	b.w	8014078 <_fwalk_sglue>
 8013fa6:	bf00      	nop
 8013fa8:	20000038 	.word	0x20000038
 8013fac:	08015b29 	.word	0x08015b29
 8013fb0:	20000048 	.word	0x20000048

08013fb4 <cleanup_stdio>:
 8013fb4:	6841      	ldr	r1, [r0, #4]
 8013fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8013fe8 <cleanup_stdio+0x34>)
 8013fb8:	4299      	cmp	r1, r3
 8013fba:	b510      	push	{r4, lr}
 8013fbc:	4604      	mov	r4, r0
 8013fbe:	d001      	beq.n	8013fc4 <cleanup_stdio+0x10>
 8013fc0:	f001 fdb2 	bl	8015b28 <_fflush_r>
 8013fc4:	68a1      	ldr	r1, [r4, #8]
 8013fc6:	4b09      	ldr	r3, [pc, #36]	@ (8013fec <cleanup_stdio+0x38>)
 8013fc8:	4299      	cmp	r1, r3
 8013fca:	d002      	beq.n	8013fd2 <cleanup_stdio+0x1e>
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f001 fdab 	bl	8015b28 <_fflush_r>
 8013fd2:	68e1      	ldr	r1, [r4, #12]
 8013fd4:	4b06      	ldr	r3, [pc, #24]	@ (8013ff0 <cleanup_stdio+0x3c>)
 8013fd6:	4299      	cmp	r1, r3
 8013fd8:	d004      	beq.n	8013fe4 <cleanup_stdio+0x30>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fe0:	f001 bda2 	b.w	8015b28 <_fflush_r>
 8013fe4:	bd10      	pop	{r4, pc}
 8013fe6:	bf00      	nop
 8013fe8:	200005c0 	.word	0x200005c0
 8013fec:	20000628 	.word	0x20000628
 8013ff0:	20000690 	.word	0x20000690

08013ff4 <global_stdio_init.part.0>:
 8013ff4:	b510      	push	{r4, lr}
 8013ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8014024 <global_stdio_init.part.0+0x30>)
 8013ff8:	4c0b      	ldr	r4, [pc, #44]	@ (8014028 <global_stdio_init.part.0+0x34>)
 8013ffa:	4a0c      	ldr	r2, [pc, #48]	@ (801402c <global_stdio_init.part.0+0x38>)
 8013ffc:	601a      	str	r2, [r3, #0]
 8013ffe:	4620      	mov	r0, r4
 8014000:	2200      	movs	r2, #0
 8014002:	2104      	movs	r1, #4
 8014004:	f7ff ff94 	bl	8013f30 <std>
 8014008:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801400c:	2201      	movs	r2, #1
 801400e:	2109      	movs	r1, #9
 8014010:	f7ff ff8e 	bl	8013f30 <std>
 8014014:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014018:	2202      	movs	r2, #2
 801401a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801401e:	2112      	movs	r1, #18
 8014020:	f7ff bf86 	b.w	8013f30 <std>
 8014024:	200006f8 	.word	0x200006f8
 8014028:	200005c0 	.word	0x200005c0
 801402c:	08013f9d 	.word	0x08013f9d

08014030 <__sfp_lock_acquire>:
 8014030:	4801      	ldr	r0, [pc, #4]	@ (8014038 <__sfp_lock_acquire+0x8>)
 8014032:	f000 b974 	b.w	801431e <__retarget_lock_acquire_recursive>
 8014036:	bf00      	nop
 8014038:	20000701 	.word	0x20000701

0801403c <__sfp_lock_release>:
 801403c:	4801      	ldr	r0, [pc, #4]	@ (8014044 <__sfp_lock_release+0x8>)
 801403e:	f000 b96f 	b.w	8014320 <__retarget_lock_release_recursive>
 8014042:	bf00      	nop
 8014044:	20000701 	.word	0x20000701

08014048 <__sinit>:
 8014048:	b510      	push	{r4, lr}
 801404a:	4604      	mov	r4, r0
 801404c:	f7ff fff0 	bl	8014030 <__sfp_lock_acquire>
 8014050:	6a23      	ldr	r3, [r4, #32]
 8014052:	b11b      	cbz	r3, 801405c <__sinit+0x14>
 8014054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014058:	f7ff bff0 	b.w	801403c <__sfp_lock_release>
 801405c:	4b04      	ldr	r3, [pc, #16]	@ (8014070 <__sinit+0x28>)
 801405e:	6223      	str	r3, [r4, #32]
 8014060:	4b04      	ldr	r3, [pc, #16]	@ (8014074 <__sinit+0x2c>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d1f5      	bne.n	8014054 <__sinit+0xc>
 8014068:	f7ff ffc4 	bl	8013ff4 <global_stdio_init.part.0>
 801406c:	e7f2      	b.n	8014054 <__sinit+0xc>
 801406e:	bf00      	nop
 8014070:	08013fb5 	.word	0x08013fb5
 8014074:	200006f8 	.word	0x200006f8

08014078 <_fwalk_sglue>:
 8014078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801407c:	4607      	mov	r7, r0
 801407e:	4688      	mov	r8, r1
 8014080:	4614      	mov	r4, r2
 8014082:	2600      	movs	r6, #0
 8014084:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014088:	f1b9 0901 	subs.w	r9, r9, #1
 801408c:	d505      	bpl.n	801409a <_fwalk_sglue+0x22>
 801408e:	6824      	ldr	r4, [r4, #0]
 8014090:	2c00      	cmp	r4, #0
 8014092:	d1f7      	bne.n	8014084 <_fwalk_sglue+0xc>
 8014094:	4630      	mov	r0, r6
 8014096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801409a:	89ab      	ldrh	r3, [r5, #12]
 801409c:	2b01      	cmp	r3, #1
 801409e:	d907      	bls.n	80140b0 <_fwalk_sglue+0x38>
 80140a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80140a4:	3301      	adds	r3, #1
 80140a6:	d003      	beq.n	80140b0 <_fwalk_sglue+0x38>
 80140a8:	4629      	mov	r1, r5
 80140aa:	4638      	mov	r0, r7
 80140ac:	47c0      	blx	r8
 80140ae:	4306      	orrs	r6, r0
 80140b0:	3568      	adds	r5, #104	@ 0x68
 80140b2:	e7e9      	b.n	8014088 <_fwalk_sglue+0x10>

080140b4 <siprintf>:
 80140b4:	b40e      	push	{r1, r2, r3}
 80140b6:	b500      	push	{lr}
 80140b8:	b09c      	sub	sp, #112	@ 0x70
 80140ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80140bc:	9002      	str	r0, [sp, #8]
 80140be:	9006      	str	r0, [sp, #24]
 80140c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80140c4:	4809      	ldr	r0, [pc, #36]	@ (80140ec <siprintf+0x38>)
 80140c6:	9107      	str	r1, [sp, #28]
 80140c8:	9104      	str	r1, [sp, #16]
 80140ca:	4909      	ldr	r1, [pc, #36]	@ (80140f0 <siprintf+0x3c>)
 80140cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80140d0:	9105      	str	r1, [sp, #20]
 80140d2:	6800      	ldr	r0, [r0, #0]
 80140d4:	9301      	str	r3, [sp, #4]
 80140d6:	a902      	add	r1, sp, #8
 80140d8:	f001 fba6 	bl	8015828 <_svfiprintf_r>
 80140dc:	9b02      	ldr	r3, [sp, #8]
 80140de:	2200      	movs	r2, #0
 80140e0:	701a      	strb	r2, [r3, #0]
 80140e2:	b01c      	add	sp, #112	@ 0x70
 80140e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80140e8:	b003      	add	sp, #12
 80140ea:	4770      	bx	lr
 80140ec:	20000044 	.word	0x20000044
 80140f0:	ffff0208 	.word	0xffff0208

080140f4 <__sread>:
 80140f4:	b510      	push	{r4, lr}
 80140f6:	460c      	mov	r4, r1
 80140f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140fc:	f000 f89c 	bl	8014238 <_read_r>
 8014100:	2800      	cmp	r0, #0
 8014102:	bfab      	itete	ge
 8014104:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014106:	89a3      	ldrhlt	r3, [r4, #12]
 8014108:	181b      	addge	r3, r3, r0
 801410a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801410e:	bfac      	ite	ge
 8014110:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014112:	81a3      	strhlt	r3, [r4, #12]
 8014114:	bd10      	pop	{r4, pc}

08014116 <__swrite>:
 8014116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801411a:	461f      	mov	r7, r3
 801411c:	898b      	ldrh	r3, [r1, #12]
 801411e:	05db      	lsls	r3, r3, #23
 8014120:	4605      	mov	r5, r0
 8014122:	460c      	mov	r4, r1
 8014124:	4616      	mov	r6, r2
 8014126:	d505      	bpl.n	8014134 <__swrite+0x1e>
 8014128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801412c:	2302      	movs	r3, #2
 801412e:	2200      	movs	r2, #0
 8014130:	f000 f870 	bl	8014214 <_lseek_r>
 8014134:	89a3      	ldrh	r3, [r4, #12]
 8014136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801413a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801413e:	81a3      	strh	r3, [r4, #12]
 8014140:	4632      	mov	r2, r6
 8014142:	463b      	mov	r3, r7
 8014144:	4628      	mov	r0, r5
 8014146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801414a:	f000 b8ab 	b.w	80142a4 <_write_r>

0801414e <__sseek>:
 801414e:	b510      	push	{r4, lr}
 8014150:	460c      	mov	r4, r1
 8014152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014156:	f000 f85d 	bl	8014214 <_lseek_r>
 801415a:	1c43      	adds	r3, r0, #1
 801415c:	89a3      	ldrh	r3, [r4, #12]
 801415e:	bf15      	itete	ne
 8014160:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014162:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014166:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801416a:	81a3      	strheq	r3, [r4, #12]
 801416c:	bf18      	it	ne
 801416e:	81a3      	strhne	r3, [r4, #12]
 8014170:	bd10      	pop	{r4, pc}

08014172 <__sclose>:
 8014172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014176:	f000 b83d 	b.w	80141f4 <_close_r>

0801417a <memset>:
 801417a:	4402      	add	r2, r0
 801417c:	4603      	mov	r3, r0
 801417e:	4293      	cmp	r3, r2
 8014180:	d100      	bne.n	8014184 <memset+0xa>
 8014182:	4770      	bx	lr
 8014184:	f803 1b01 	strb.w	r1, [r3], #1
 8014188:	e7f9      	b.n	801417e <memset+0x4>

0801418a <_raise_r>:
 801418a:	291f      	cmp	r1, #31
 801418c:	b538      	push	{r3, r4, r5, lr}
 801418e:	4605      	mov	r5, r0
 8014190:	460c      	mov	r4, r1
 8014192:	d904      	bls.n	801419e <_raise_r+0x14>
 8014194:	2316      	movs	r3, #22
 8014196:	6003      	str	r3, [r0, #0]
 8014198:	f04f 30ff 	mov.w	r0, #4294967295
 801419c:	bd38      	pop	{r3, r4, r5, pc}
 801419e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80141a0:	b112      	cbz	r2, 80141a8 <_raise_r+0x1e>
 80141a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141a6:	b94b      	cbnz	r3, 80141bc <_raise_r+0x32>
 80141a8:	4628      	mov	r0, r5
 80141aa:	f000 f869 	bl	8014280 <_getpid_r>
 80141ae:	4622      	mov	r2, r4
 80141b0:	4601      	mov	r1, r0
 80141b2:	4628      	mov	r0, r5
 80141b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141b8:	f000 b850 	b.w	801425c <_kill_r>
 80141bc:	2b01      	cmp	r3, #1
 80141be:	d00a      	beq.n	80141d6 <_raise_r+0x4c>
 80141c0:	1c59      	adds	r1, r3, #1
 80141c2:	d103      	bne.n	80141cc <_raise_r+0x42>
 80141c4:	2316      	movs	r3, #22
 80141c6:	6003      	str	r3, [r0, #0]
 80141c8:	2001      	movs	r0, #1
 80141ca:	e7e7      	b.n	801419c <_raise_r+0x12>
 80141cc:	2100      	movs	r1, #0
 80141ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80141d2:	4620      	mov	r0, r4
 80141d4:	4798      	blx	r3
 80141d6:	2000      	movs	r0, #0
 80141d8:	e7e0      	b.n	801419c <_raise_r+0x12>
	...

080141dc <raise>:
 80141dc:	4b02      	ldr	r3, [pc, #8]	@ (80141e8 <raise+0xc>)
 80141de:	4601      	mov	r1, r0
 80141e0:	6818      	ldr	r0, [r3, #0]
 80141e2:	f7ff bfd2 	b.w	801418a <_raise_r>
 80141e6:	bf00      	nop
 80141e8:	20000044 	.word	0x20000044

080141ec <_localeconv_r>:
 80141ec:	4800      	ldr	r0, [pc, #0]	@ (80141f0 <_localeconv_r+0x4>)
 80141ee:	4770      	bx	lr
 80141f0:	20000184 	.word	0x20000184

080141f4 <_close_r>:
 80141f4:	b538      	push	{r3, r4, r5, lr}
 80141f6:	4d06      	ldr	r5, [pc, #24]	@ (8014210 <_close_r+0x1c>)
 80141f8:	2300      	movs	r3, #0
 80141fa:	4604      	mov	r4, r0
 80141fc:	4608      	mov	r0, r1
 80141fe:	602b      	str	r3, [r5, #0]
 8014200:	f7f9 fb32 	bl	800d868 <_close>
 8014204:	1c43      	adds	r3, r0, #1
 8014206:	d102      	bne.n	801420e <_close_r+0x1a>
 8014208:	682b      	ldr	r3, [r5, #0]
 801420a:	b103      	cbz	r3, 801420e <_close_r+0x1a>
 801420c:	6023      	str	r3, [r4, #0]
 801420e:	bd38      	pop	{r3, r4, r5, pc}
 8014210:	200006fc 	.word	0x200006fc

08014214 <_lseek_r>:
 8014214:	b538      	push	{r3, r4, r5, lr}
 8014216:	4d07      	ldr	r5, [pc, #28]	@ (8014234 <_lseek_r+0x20>)
 8014218:	4604      	mov	r4, r0
 801421a:	4608      	mov	r0, r1
 801421c:	4611      	mov	r1, r2
 801421e:	2200      	movs	r2, #0
 8014220:	602a      	str	r2, [r5, #0]
 8014222:	461a      	mov	r2, r3
 8014224:	f7f9 fb47 	bl	800d8b6 <_lseek>
 8014228:	1c43      	adds	r3, r0, #1
 801422a:	d102      	bne.n	8014232 <_lseek_r+0x1e>
 801422c:	682b      	ldr	r3, [r5, #0]
 801422e:	b103      	cbz	r3, 8014232 <_lseek_r+0x1e>
 8014230:	6023      	str	r3, [r4, #0]
 8014232:	bd38      	pop	{r3, r4, r5, pc}
 8014234:	200006fc 	.word	0x200006fc

08014238 <_read_r>:
 8014238:	b538      	push	{r3, r4, r5, lr}
 801423a:	4d07      	ldr	r5, [pc, #28]	@ (8014258 <_read_r+0x20>)
 801423c:	4604      	mov	r4, r0
 801423e:	4608      	mov	r0, r1
 8014240:	4611      	mov	r1, r2
 8014242:	2200      	movs	r2, #0
 8014244:	602a      	str	r2, [r5, #0]
 8014246:	461a      	mov	r2, r3
 8014248:	f7f9 fad5 	bl	800d7f6 <_read>
 801424c:	1c43      	adds	r3, r0, #1
 801424e:	d102      	bne.n	8014256 <_read_r+0x1e>
 8014250:	682b      	ldr	r3, [r5, #0]
 8014252:	b103      	cbz	r3, 8014256 <_read_r+0x1e>
 8014254:	6023      	str	r3, [r4, #0]
 8014256:	bd38      	pop	{r3, r4, r5, pc}
 8014258:	200006fc 	.word	0x200006fc

0801425c <_kill_r>:
 801425c:	b538      	push	{r3, r4, r5, lr}
 801425e:	4d07      	ldr	r5, [pc, #28]	@ (801427c <_kill_r+0x20>)
 8014260:	2300      	movs	r3, #0
 8014262:	4604      	mov	r4, r0
 8014264:	4608      	mov	r0, r1
 8014266:	4611      	mov	r1, r2
 8014268:	602b      	str	r3, [r5, #0]
 801426a:	f7f9 faa9 	bl	800d7c0 <_kill>
 801426e:	1c43      	adds	r3, r0, #1
 8014270:	d102      	bne.n	8014278 <_kill_r+0x1c>
 8014272:	682b      	ldr	r3, [r5, #0]
 8014274:	b103      	cbz	r3, 8014278 <_kill_r+0x1c>
 8014276:	6023      	str	r3, [r4, #0]
 8014278:	bd38      	pop	{r3, r4, r5, pc}
 801427a:	bf00      	nop
 801427c:	200006fc 	.word	0x200006fc

08014280 <_getpid_r>:
 8014280:	f7f9 ba96 	b.w	800d7b0 <_getpid>

08014284 <_sbrk_r>:
 8014284:	b538      	push	{r3, r4, r5, lr}
 8014286:	4d06      	ldr	r5, [pc, #24]	@ (80142a0 <_sbrk_r+0x1c>)
 8014288:	2300      	movs	r3, #0
 801428a:	4604      	mov	r4, r0
 801428c:	4608      	mov	r0, r1
 801428e:	602b      	str	r3, [r5, #0]
 8014290:	f7f9 fb1e 	bl	800d8d0 <_sbrk>
 8014294:	1c43      	adds	r3, r0, #1
 8014296:	d102      	bne.n	801429e <_sbrk_r+0x1a>
 8014298:	682b      	ldr	r3, [r5, #0]
 801429a:	b103      	cbz	r3, 801429e <_sbrk_r+0x1a>
 801429c:	6023      	str	r3, [r4, #0]
 801429e:	bd38      	pop	{r3, r4, r5, pc}
 80142a0:	200006fc 	.word	0x200006fc

080142a4 <_write_r>:
 80142a4:	b538      	push	{r3, r4, r5, lr}
 80142a6:	4d07      	ldr	r5, [pc, #28]	@ (80142c4 <_write_r+0x20>)
 80142a8:	4604      	mov	r4, r0
 80142aa:	4608      	mov	r0, r1
 80142ac:	4611      	mov	r1, r2
 80142ae:	2200      	movs	r2, #0
 80142b0:	602a      	str	r2, [r5, #0]
 80142b2:	461a      	mov	r2, r3
 80142b4:	f7f9 fabc 	bl	800d830 <_write>
 80142b8:	1c43      	adds	r3, r0, #1
 80142ba:	d102      	bne.n	80142c2 <_write_r+0x1e>
 80142bc:	682b      	ldr	r3, [r5, #0]
 80142be:	b103      	cbz	r3, 80142c2 <_write_r+0x1e>
 80142c0:	6023      	str	r3, [r4, #0]
 80142c2:	bd38      	pop	{r3, r4, r5, pc}
 80142c4:	200006fc 	.word	0x200006fc

080142c8 <__errno>:
 80142c8:	4b01      	ldr	r3, [pc, #4]	@ (80142d0 <__errno+0x8>)
 80142ca:	6818      	ldr	r0, [r3, #0]
 80142cc:	4770      	bx	lr
 80142ce:	bf00      	nop
 80142d0:	20000044 	.word	0x20000044

080142d4 <__libc_init_array>:
 80142d4:	b570      	push	{r4, r5, r6, lr}
 80142d6:	4d0d      	ldr	r5, [pc, #52]	@ (801430c <__libc_init_array+0x38>)
 80142d8:	4c0d      	ldr	r4, [pc, #52]	@ (8014310 <__libc_init_array+0x3c>)
 80142da:	1b64      	subs	r4, r4, r5
 80142dc:	10a4      	asrs	r4, r4, #2
 80142de:	2600      	movs	r6, #0
 80142e0:	42a6      	cmp	r6, r4
 80142e2:	d109      	bne.n	80142f8 <__libc_init_array+0x24>
 80142e4:	4d0b      	ldr	r5, [pc, #44]	@ (8014314 <__libc_init_array+0x40>)
 80142e6:	4c0c      	ldr	r4, [pc, #48]	@ (8014318 <__libc_init_array+0x44>)
 80142e8:	f001 ff5a 	bl	80161a0 <_init>
 80142ec:	1b64      	subs	r4, r4, r5
 80142ee:	10a4      	asrs	r4, r4, #2
 80142f0:	2600      	movs	r6, #0
 80142f2:	42a6      	cmp	r6, r4
 80142f4:	d105      	bne.n	8014302 <__libc_init_array+0x2e>
 80142f6:	bd70      	pop	{r4, r5, r6, pc}
 80142f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80142fc:	4798      	blx	r3
 80142fe:	3601      	adds	r6, #1
 8014300:	e7ee      	b.n	80142e0 <__libc_init_array+0xc>
 8014302:	f855 3b04 	ldr.w	r3, [r5], #4
 8014306:	4798      	blx	r3
 8014308:	3601      	adds	r6, #1
 801430a:	e7f2      	b.n	80142f2 <__libc_init_array+0x1e>
 801430c:	08019a70 	.word	0x08019a70
 8014310:	08019a70 	.word	0x08019a70
 8014314:	08019a70 	.word	0x08019a70
 8014318:	08019a78 	.word	0x08019a78

0801431c <__retarget_lock_init_recursive>:
 801431c:	4770      	bx	lr

0801431e <__retarget_lock_acquire_recursive>:
 801431e:	4770      	bx	lr

08014320 <__retarget_lock_release_recursive>:
 8014320:	4770      	bx	lr

08014322 <memcpy>:
 8014322:	440a      	add	r2, r1
 8014324:	4291      	cmp	r1, r2
 8014326:	f100 33ff 	add.w	r3, r0, #4294967295
 801432a:	d100      	bne.n	801432e <memcpy+0xc>
 801432c:	4770      	bx	lr
 801432e:	b510      	push	{r4, lr}
 8014330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014338:	4291      	cmp	r1, r2
 801433a:	d1f9      	bne.n	8014330 <memcpy+0xe>
 801433c:	bd10      	pop	{r4, pc}

0801433e <quorem>:
 801433e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014342:	6903      	ldr	r3, [r0, #16]
 8014344:	690c      	ldr	r4, [r1, #16]
 8014346:	42a3      	cmp	r3, r4
 8014348:	4607      	mov	r7, r0
 801434a:	db7e      	blt.n	801444a <quorem+0x10c>
 801434c:	3c01      	subs	r4, #1
 801434e:	f101 0814 	add.w	r8, r1, #20
 8014352:	00a3      	lsls	r3, r4, #2
 8014354:	f100 0514 	add.w	r5, r0, #20
 8014358:	9300      	str	r3, [sp, #0]
 801435a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801435e:	9301      	str	r3, [sp, #4]
 8014360:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014368:	3301      	adds	r3, #1
 801436a:	429a      	cmp	r2, r3
 801436c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014370:	fbb2 f6f3 	udiv	r6, r2, r3
 8014374:	d32e      	bcc.n	80143d4 <quorem+0x96>
 8014376:	f04f 0a00 	mov.w	sl, #0
 801437a:	46c4      	mov	ip, r8
 801437c:	46ae      	mov	lr, r5
 801437e:	46d3      	mov	fp, sl
 8014380:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014384:	b298      	uxth	r0, r3
 8014386:	fb06 a000 	mla	r0, r6, r0, sl
 801438a:	0c02      	lsrs	r2, r0, #16
 801438c:	0c1b      	lsrs	r3, r3, #16
 801438e:	fb06 2303 	mla	r3, r6, r3, r2
 8014392:	f8de 2000 	ldr.w	r2, [lr]
 8014396:	b280      	uxth	r0, r0
 8014398:	b292      	uxth	r2, r2
 801439a:	1a12      	subs	r2, r2, r0
 801439c:	445a      	add	r2, fp
 801439e:	f8de 0000 	ldr.w	r0, [lr]
 80143a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80143ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80143b0:	b292      	uxth	r2, r2
 80143b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80143b6:	45e1      	cmp	r9, ip
 80143b8:	f84e 2b04 	str.w	r2, [lr], #4
 80143bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80143c0:	d2de      	bcs.n	8014380 <quorem+0x42>
 80143c2:	9b00      	ldr	r3, [sp, #0]
 80143c4:	58eb      	ldr	r3, [r5, r3]
 80143c6:	b92b      	cbnz	r3, 80143d4 <quorem+0x96>
 80143c8:	9b01      	ldr	r3, [sp, #4]
 80143ca:	3b04      	subs	r3, #4
 80143cc:	429d      	cmp	r5, r3
 80143ce:	461a      	mov	r2, r3
 80143d0:	d32f      	bcc.n	8014432 <quorem+0xf4>
 80143d2:	613c      	str	r4, [r7, #16]
 80143d4:	4638      	mov	r0, r7
 80143d6:	f001 f8c3 	bl	8015560 <__mcmp>
 80143da:	2800      	cmp	r0, #0
 80143dc:	db25      	blt.n	801442a <quorem+0xec>
 80143de:	4629      	mov	r1, r5
 80143e0:	2000      	movs	r0, #0
 80143e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80143e6:	f8d1 c000 	ldr.w	ip, [r1]
 80143ea:	fa1f fe82 	uxth.w	lr, r2
 80143ee:	fa1f f38c 	uxth.w	r3, ip
 80143f2:	eba3 030e 	sub.w	r3, r3, lr
 80143f6:	4403      	add	r3, r0
 80143f8:	0c12      	lsrs	r2, r2, #16
 80143fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80143fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014402:	b29b      	uxth	r3, r3
 8014404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014408:	45c1      	cmp	r9, r8
 801440a:	f841 3b04 	str.w	r3, [r1], #4
 801440e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014412:	d2e6      	bcs.n	80143e2 <quorem+0xa4>
 8014414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014418:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801441c:	b922      	cbnz	r2, 8014428 <quorem+0xea>
 801441e:	3b04      	subs	r3, #4
 8014420:	429d      	cmp	r5, r3
 8014422:	461a      	mov	r2, r3
 8014424:	d30b      	bcc.n	801443e <quorem+0x100>
 8014426:	613c      	str	r4, [r7, #16]
 8014428:	3601      	adds	r6, #1
 801442a:	4630      	mov	r0, r6
 801442c:	b003      	add	sp, #12
 801442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014432:	6812      	ldr	r2, [r2, #0]
 8014434:	3b04      	subs	r3, #4
 8014436:	2a00      	cmp	r2, #0
 8014438:	d1cb      	bne.n	80143d2 <quorem+0x94>
 801443a:	3c01      	subs	r4, #1
 801443c:	e7c6      	b.n	80143cc <quorem+0x8e>
 801443e:	6812      	ldr	r2, [r2, #0]
 8014440:	3b04      	subs	r3, #4
 8014442:	2a00      	cmp	r2, #0
 8014444:	d1ef      	bne.n	8014426 <quorem+0xe8>
 8014446:	3c01      	subs	r4, #1
 8014448:	e7ea      	b.n	8014420 <quorem+0xe2>
 801444a:	2000      	movs	r0, #0
 801444c:	e7ee      	b.n	801442c <quorem+0xee>
	...

08014450 <_dtoa_r>:
 8014450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014454:	69c7      	ldr	r7, [r0, #28]
 8014456:	b099      	sub	sp, #100	@ 0x64
 8014458:	ed8d 0b02 	vstr	d0, [sp, #8]
 801445c:	ec55 4b10 	vmov	r4, r5, d0
 8014460:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014462:	9109      	str	r1, [sp, #36]	@ 0x24
 8014464:	4683      	mov	fp, r0
 8014466:	920e      	str	r2, [sp, #56]	@ 0x38
 8014468:	9313      	str	r3, [sp, #76]	@ 0x4c
 801446a:	b97f      	cbnz	r7, 801448c <_dtoa_r+0x3c>
 801446c:	2010      	movs	r0, #16
 801446e:	f7ff f83b 	bl	80134e8 <malloc>
 8014472:	4602      	mov	r2, r0
 8014474:	f8cb 001c 	str.w	r0, [fp, #28]
 8014478:	b920      	cbnz	r0, 8014484 <_dtoa_r+0x34>
 801447a:	4ba7      	ldr	r3, [pc, #668]	@ (8014718 <_dtoa_r+0x2c8>)
 801447c:	21ef      	movs	r1, #239	@ 0xef
 801447e:	48a7      	ldr	r0, [pc, #668]	@ (801471c <_dtoa_r+0x2cc>)
 8014480:	f001 fb94 	bl	8015bac <__assert_func>
 8014484:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014488:	6007      	str	r7, [r0, #0]
 801448a:	60c7      	str	r7, [r0, #12]
 801448c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014490:	6819      	ldr	r1, [r3, #0]
 8014492:	b159      	cbz	r1, 80144ac <_dtoa_r+0x5c>
 8014494:	685a      	ldr	r2, [r3, #4]
 8014496:	604a      	str	r2, [r1, #4]
 8014498:	2301      	movs	r3, #1
 801449a:	4093      	lsls	r3, r2
 801449c:	608b      	str	r3, [r1, #8]
 801449e:	4658      	mov	r0, fp
 80144a0:	f000 fe24 	bl	80150ec <_Bfree>
 80144a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80144a8:	2200      	movs	r2, #0
 80144aa:	601a      	str	r2, [r3, #0]
 80144ac:	1e2b      	subs	r3, r5, #0
 80144ae:	bfb9      	ittee	lt
 80144b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80144b4:	9303      	strlt	r3, [sp, #12]
 80144b6:	2300      	movge	r3, #0
 80144b8:	6033      	strge	r3, [r6, #0]
 80144ba:	9f03      	ldr	r7, [sp, #12]
 80144bc:	4b98      	ldr	r3, [pc, #608]	@ (8014720 <_dtoa_r+0x2d0>)
 80144be:	bfbc      	itt	lt
 80144c0:	2201      	movlt	r2, #1
 80144c2:	6032      	strlt	r2, [r6, #0]
 80144c4:	43bb      	bics	r3, r7
 80144c6:	d112      	bne.n	80144ee <_dtoa_r+0x9e>
 80144c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80144ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80144ce:	6013      	str	r3, [r2, #0]
 80144d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80144d4:	4323      	orrs	r3, r4
 80144d6:	f000 854d 	beq.w	8014f74 <_dtoa_r+0xb24>
 80144da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80144dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014734 <_dtoa_r+0x2e4>
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	f000 854f 	beq.w	8014f84 <_dtoa_r+0xb34>
 80144e6:	f10a 0303 	add.w	r3, sl, #3
 80144ea:	f000 bd49 	b.w	8014f80 <_dtoa_r+0xb30>
 80144ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144f2:	2200      	movs	r2, #0
 80144f4:	ec51 0b17 	vmov	r0, r1, d7
 80144f8:	2300      	movs	r3, #0
 80144fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80144fe:	f7ec fb13 	bl	8000b28 <__aeabi_dcmpeq>
 8014502:	4680      	mov	r8, r0
 8014504:	b158      	cbz	r0, 801451e <_dtoa_r+0xce>
 8014506:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014508:	2301      	movs	r3, #1
 801450a:	6013      	str	r3, [r2, #0]
 801450c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801450e:	b113      	cbz	r3, 8014516 <_dtoa_r+0xc6>
 8014510:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014512:	4b84      	ldr	r3, [pc, #528]	@ (8014724 <_dtoa_r+0x2d4>)
 8014514:	6013      	str	r3, [r2, #0]
 8014516:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014738 <_dtoa_r+0x2e8>
 801451a:	f000 bd33 	b.w	8014f84 <_dtoa_r+0xb34>
 801451e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014522:	aa16      	add	r2, sp, #88	@ 0x58
 8014524:	a917      	add	r1, sp, #92	@ 0x5c
 8014526:	4658      	mov	r0, fp
 8014528:	f001 f8ca 	bl	80156c0 <__d2b>
 801452c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014530:	4681      	mov	r9, r0
 8014532:	2e00      	cmp	r6, #0
 8014534:	d077      	beq.n	8014626 <_dtoa_r+0x1d6>
 8014536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014538:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801453c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014544:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014548:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801454c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014550:	4619      	mov	r1, r3
 8014552:	2200      	movs	r2, #0
 8014554:	4b74      	ldr	r3, [pc, #464]	@ (8014728 <_dtoa_r+0x2d8>)
 8014556:	f7eb fec7 	bl	80002e8 <__aeabi_dsub>
 801455a:	a369      	add	r3, pc, #420	@ (adr r3, 8014700 <_dtoa_r+0x2b0>)
 801455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014560:	f7ec f87a 	bl	8000658 <__aeabi_dmul>
 8014564:	a368      	add	r3, pc, #416	@ (adr r3, 8014708 <_dtoa_r+0x2b8>)
 8014566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456a:	f7eb febf 	bl	80002ec <__adddf3>
 801456e:	4604      	mov	r4, r0
 8014570:	4630      	mov	r0, r6
 8014572:	460d      	mov	r5, r1
 8014574:	f7ec f806 	bl	8000584 <__aeabi_i2d>
 8014578:	a365      	add	r3, pc, #404	@ (adr r3, 8014710 <_dtoa_r+0x2c0>)
 801457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457e:	f7ec f86b 	bl	8000658 <__aeabi_dmul>
 8014582:	4602      	mov	r2, r0
 8014584:	460b      	mov	r3, r1
 8014586:	4620      	mov	r0, r4
 8014588:	4629      	mov	r1, r5
 801458a:	f7eb feaf 	bl	80002ec <__adddf3>
 801458e:	4604      	mov	r4, r0
 8014590:	460d      	mov	r5, r1
 8014592:	f7ec fb11 	bl	8000bb8 <__aeabi_d2iz>
 8014596:	2200      	movs	r2, #0
 8014598:	4607      	mov	r7, r0
 801459a:	2300      	movs	r3, #0
 801459c:	4620      	mov	r0, r4
 801459e:	4629      	mov	r1, r5
 80145a0:	f7ec facc 	bl	8000b3c <__aeabi_dcmplt>
 80145a4:	b140      	cbz	r0, 80145b8 <_dtoa_r+0x168>
 80145a6:	4638      	mov	r0, r7
 80145a8:	f7eb ffec 	bl	8000584 <__aeabi_i2d>
 80145ac:	4622      	mov	r2, r4
 80145ae:	462b      	mov	r3, r5
 80145b0:	f7ec faba 	bl	8000b28 <__aeabi_dcmpeq>
 80145b4:	b900      	cbnz	r0, 80145b8 <_dtoa_r+0x168>
 80145b6:	3f01      	subs	r7, #1
 80145b8:	2f16      	cmp	r7, #22
 80145ba:	d851      	bhi.n	8014660 <_dtoa_r+0x210>
 80145bc:	4b5b      	ldr	r3, [pc, #364]	@ (801472c <_dtoa_r+0x2dc>)
 80145be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80145c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80145ca:	f7ec fab7 	bl	8000b3c <__aeabi_dcmplt>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d048      	beq.n	8014664 <_dtoa_r+0x214>
 80145d2:	3f01      	subs	r7, #1
 80145d4:	2300      	movs	r3, #0
 80145d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80145d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80145da:	1b9b      	subs	r3, r3, r6
 80145dc:	1e5a      	subs	r2, r3, #1
 80145de:	bf44      	itt	mi
 80145e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80145e4:	2300      	movmi	r3, #0
 80145e6:	9208      	str	r2, [sp, #32]
 80145e8:	bf54      	ite	pl
 80145ea:	f04f 0800 	movpl.w	r8, #0
 80145ee:	9308      	strmi	r3, [sp, #32]
 80145f0:	2f00      	cmp	r7, #0
 80145f2:	db39      	blt.n	8014668 <_dtoa_r+0x218>
 80145f4:	9b08      	ldr	r3, [sp, #32]
 80145f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80145f8:	443b      	add	r3, r7
 80145fa:	9308      	str	r3, [sp, #32]
 80145fc:	2300      	movs	r3, #0
 80145fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8014600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014602:	2b09      	cmp	r3, #9
 8014604:	d864      	bhi.n	80146d0 <_dtoa_r+0x280>
 8014606:	2b05      	cmp	r3, #5
 8014608:	bfc4      	itt	gt
 801460a:	3b04      	subgt	r3, #4
 801460c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801460e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014610:	f1a3 0302 	sub.w	r3, r3, #2
 8014614:	bfcc      	ite	gt
 8014616:	2400      	movgt	r4, #0
 8014618:	2401      	movle	r4, #1
 801461a:	2b03      	cmp	r3, #3
 801461c:	d863      	bhi.n	80146e6 <_dtoa_r+0x296>
 801461e:	e8df f003 	tbb	[pc, r3]
 8014622:	372a      	.short	0x372a
 8014624:	5535      	.short	0x5535
 8014626:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801462a:	441e      	add	r6, r3
 801462c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014630:	2b20      	cmp	r3, #32
 8014632:	bfc1      	itttt	gt
 8014634:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014638:	409f      	lslgt	r7, r3
 801463a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801463e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014642:	bfd6      	itet	le
 8014644:	f1c3 0320 	rsble	r3, r3, #32
 8014648:	ea47 0003 	orrgt.w	r0, r7, r3
 801464c:	fa04 f003 	lslle.w	r0, r4, r3
 8014650:	f7eb ff88 	bl	8000564 <__aeabi_ui2d>
 8014654:	2201      	movs	r2, #1
 8014656:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801465a:	3e01      	subs	r6, #1
 801465c:	9214      	str	r2, [sp, #80]	@ 0x50
 801465e:	e777      	b.n	8014550 <_dtoa_r+0x100>
 8014660:	2301      	movs	r3, #1
 8014662:	e7b8      	b.n	80145d6 <_dtoa_r+0x186>
 8014664:	9012      	str	r0, [sp, #72]	@ 0x48
 8014666:	e7b7      	b.n	80145d8 <_dtoa_r+0x188>
 8014668:	427b      	negs	r3, r7
 801466a:	930a      	str	r3, [sp, #40]	@ 0x28
 801466c:	2300      	movs	r3, #0
 801466e:	eba8 0807 	sub.w	r8, r8, r7
 8014672:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014674:	e7c4      	b.n	8014600 <_dtoa_r+0x1b0>
 8014676:	2300      	movs	r3, #0
 8014678:	930b      	str	r3, [sp, #44]	@ 0x2c
 801467a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801467c:	2b00      	cmp	r3, #0
 801467e:	dc35      	bgt.n	80146ec <_dtoa_r+0x29c>
 8014680:	2301      	movs	r3, #1
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	9307      	str	r3, [sp, #28]
 8014686:	461a      	mov	r2, r3
 8014688:	920e      	str	r2, [sp, #56]	@ 0x38
 801468a:	e00b      	b.n	80146a4 <_dtoa_r+0x254>
 801468c:	2301      	movs	r3, #1
 801468e:	e7f3      	b.n	8014678 <_dtoa_r+0x228>
 8014690:	2300      	movs	r3, #0
 8014692:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014696:	18fb      	adds	r3, r7, r3
 8014698:	9300      	str	r3, [sp, #0]
 801469a:	3301      	adds	r3, #1
 801469c:	2b01      	cmp	r3, #1
 801469e:	9307      	str	r3, [sp, #28]
 80146a0:	bfb8      	it	lt
 80146a2:	2301      	movlt	r3, #1
 80146a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80146a8:	2100      	movs	r1, #0
 80146aa:	2204      	movs	r2, #4
 80146ac:	f102 0514 	add.w	r5, r2, #20
 80146b0:	429d      	cmp	r5, r3
 80146b2:	d91f      	bls.n	80146f4 <_dtoa_r+0x2a4>
 80146b4:	6041      	str	r1, [r0, #4]
 80146b6:	4658      	mov	r0, fp
 80146b8:	f000 fcd8 	bl	801506c <_Balloc>
 80146bc:	4682      	mov	sl, r0
 80146be:	2800      	cmp	r0, #0
 80146c0:	d13c      	bne.n	801473c <_dtoa_r+0x2ec>
 80146c2:	4b1b      	ldr	r3, [pc, #108]	@ (8014730 <_dtoa_r+0x2e0>)
 80146c4:	4602      	mov	r2, r0
 80146c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80146ca:	e6d8      	b.n	801447e <_dtoa_r+0x2e>
 80146cc:	2301      	movs	r3, #1
 80146ce:	e7e0      	b.n	8014692 <_dtoa_r+0x242>
 80146d0:	2401      	movs	r4, #1
 80146d2:	2300      	movs	r3, #0
 80146d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80146d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80146d8:	f04f 33ff 	mov.w	r3, #4294967295
 80146dc:	9300      	str	r3, [sp, #0]
 80146de:	9307      	str	r3, [sp, #28]
 80146e0:	2200      	movs	r2, #0
 80146e2:	2312      	movs	r3, #18
 80146e4:	e7d0      	b.n	8014688 <_dtoa_r+0x238>
 80146e6:	2301      	movs	r3, #1
 80146e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80146ea:	e7f5      	b.n	80146d8 <_dtoa_r+0x288>
 80146ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80146ee:	9300      	str	r3, [sp, #0]
 80146f0:	9307      	str	r3, [sp, #28]
 80146f2:	e7d7      	b.n	80146a4 <_dtoa_r+0x254>
 80146f4:	3101      	adds	r1, #1
 80146f6:	0052      	lsls	r2, r2, #1
 80146f8:	e7d8      	b.n	80146ac <_dtoa_r+0x25c>
 80146fa:	bf00      	nop
 80146fc:	f3af 8000 	nop.w
 8014700:	636f4361 	.word	0x636f4361
 8014704:	3fd287a7 	.word	0x3fd287a7
 8014708:	8b60c8b3 	.word	0x8b60c8b3
 801470c:	3fc68a28 	.word	0x3fc68a28
 8014710:	509f79fb 	.word	0x509f79fb
 8014714:	3fd34413 	.word	0x3fd34413
 8014718:	080177c1 	.word	0x080177c1
 801471c:	080177d8 	.word	0x080177d8
 8014720:	7ff00000 	.word	0x7ff00000
 8014724:	08017791 	.word	0x08017791
 8014728:	3ff80000 	.word	0x3ff80000
 801472c:	080178d0 	.word	0x080178d0
 8014730:	08017830 	.word	0x08017830
 8014734:	080177bd 	.word	0x080177bd
 8014738:	08017790 	.word	0x08017790
 801473c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014740:	6018      	str	r0, [r3, #0]
 8014742:	9b07      	ldr	r3, [sp, #28]
 8014744:	2b0e      	cmp	r3, #14
 8014746:	f200 80a4 	bhi.w	8014892 <_dtoa_r+0x442>
 801474a:	2c00      	cmp	r4, #0
 801474c:	f000 80a1 	beq.w	8014892 <_dtoa_r+0x442>
 8014750:	2f00      	cmp	r7, #0
 8014752:	dd33      	ble.n	80147bc <_dtoa_r+0x36c>
 8014754:	4bad      	ldr	r3, [pc, #692]	@ (8014a0c <_dtoa_r+0x5bc>)
 8014756:	f007 020f 	and.w	r2, r7, #15
 801475a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801475e:	ed93 7b00 	vldr	d7, [r3]
 8014762:	05f8      	lsls	r0, r7, #23
 8014764:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014768:	ea4f 1427 	mov.w	r4, r7, asr #4
 801476c:	d516      	bpl.n	801479c <_dtoa_r+0x34c>
 801476e:	4ba8      	ldr	r3, [pc, #672]	@ (8014a10 <_dtoa_r+0x5c0>)
 8014770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014778:	f7ec f898 	bl	80008ac <__aeabi_ddiv>
 801477c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014780:	f004 040f 	and.w	r4, r4, #15
 8014784:	2603      	movs	r6, #3
 8014786:	4da2      	ldr	r5, [pc, #648]	@ (8014a10 <_dtoa_r+0x5c0>)
 8014788:	b954      	cbnz	r4, 80147a0 <_dtoa_r+0x350>
 801478a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801478e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014792:	f7ec f88b 	bl	80008ac <__aeabi_ddiv>
 8014796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801479a:	e028      	b.n	80147ee <_dtoa_r+0x39e>
 801479c:	2602      	movs	r6, #2
 801479e:	e7f2      	b.n	8014786 <_dtoa_r+0x336>
 80147a0:	07e1      	lsls	r1, r4, #31
 80147a2:	d508      	bpl.n	80147b6 <_dtoa_r+0x366>
 80147a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80147a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80147ac:	f7eb ff54 	bl	8000658 <__aeabi_dmul>
 80147b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80147b4:	3601      	adds	r6, #1
 80147b6:	1064      	asrs	r4, r4, #1
 80147b8:	3508      	adds	r5, #8
 80147ba:	e7e5      	b.n	8014788 <_dtoa_r+0x338>
 80147bc:	f000 80d2 	beq.w	8014964 <_dtoa_r+0x514>
 80147c0:	427c      	negs	r4, r7
 80147c2:	4b92      	ldr	r3, [pc, #584]	@ (8014a0c <_dtoa_r+0x5bc>)
 80147c4:	4d92      	ldr	r5, [pc, #584]	@ (8014a10 <_dtoa_r+0x5c0>)
 80147c6:	f004 020f 	and.w	r2, r4, #15
 80147ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80147d6:	f7eb ff3f 	bl	8000658 <__aeabi_dmul>
 80147da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80147de:	1124      	asrs	r4, r4, #4
 80147e0:	2300      	movs	r3, #0
 80147e2:	2602      	movs	r6, #2
 80147e4:	2c00      	cmp	r4, #0
 80147e6:	f040 80b2 	bne.w	801494e <_dtoa_r+0x4fe>
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d1d3      	bne.n	8014796 <_dtoa_r+0x346>
 80147ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80147f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	f000 80b7 	beq.w	8014968 <_dtoa_r+0x518>
 80147fa:	4b86      	ldr	r3, [pc, #536]	@ (8014a14 <_dtoa_r+0x5c4>)
 80147fc:	2200      	movs	r2, #0
 80147fe:	4620      	mov	r0, r4
 8014800:	4629      	mov	r1, r5
 8014802:	f7ec f99b 	bl	8000b3c <__aeabi_dcmplt>
 8014806:	2800      	cmp	r0, #0
 8014808:	f000 80ae 	beq.w	8014968 <_dtoa_r+0x518>
 801480c:	9b07      	ldr	r3, [sp, #28]
 801480e:	2b00      	cmp	r3, #0
 8014810:	f000 80aa 	beq.w	8014968 <_dtoa_r+0x518>
 8014814:	9b00      	ldr	r3, [sp, #0]
 8014816:	2b00      	cmp	r3, #0
 8014818:	dd37      	ble.n	801488a <_dtoa_r+0x43a>
 801481a:	1e7b      	subs	r3, r7, #1
 801481c:	9304      	str	r3, [sp, #16]
 801481e:	4620      	mov	r0, r4
 8014820:	4b7d      	ldr	r3, [pc, #500]	@ (8014a18 <_dtoa_r+0x5c8>)
 8014822:	2200      	movs	r2, #0
 8014824:	4629      	mov	r1, r5
 8014826:	f7eb ff17 	bl	8000658 <__aeabi_dmul>
 801482a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801482e:	9c00      	ldr	r4, [sp, #0]
 8014830:	3601      	adds	r6, #1
 8014832:	4630      	mov	r0, r6
 8014834:	f7eb fea6 	bl	8000584 <__aeabi_i2d>
 8014838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801483c:	f7eb ff0c 	bl	8000658 <__aeabi_dmul>
 8014840:	4b76      	ldr	r3, [pc, #472]	@ (8014a1c <_dtoa_r+0x5cc>)
 8014842:	2200      	movs	r2, #0
 8014844:	f7eb fd52 	bl	80002ec <__adddf3>
 8014848:	4605      	mov	r5, r0
 801484a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801484e:	2c00      	cmp	r4, #0
 8014850:	f040 808d 	bne.w	801496e <_dtoa_r+0x51e>
 8014854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014858:	4b71      	ldr	r3, [pc, #452]	@ (8014a20 <_dtoa_r+0x5d0>)
 801485a:	2200      	movs	r2, #0
 801485c:	f7eb fd44 	bl	80002e8 <__aeabi_dsub>
 8014860:	4602      	mov	r2, r0
 8014862:	460b      	mov	r3, r1
 8014864:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014868:	462a      	mov	r2, r5
 801486a:	4633      	mov	r3, r6
 801486c:	f7ec f984 	bl	8000b78 <__aeabi_dcmpgt>
 8014870:	2800      	cmp	r0, #0
 8014872:	f040 828b 	bne.w	8014d8c <_dtoa_r+0x93c>
 8014876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801487a:	462a      	mov	r2, r5
 801487c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014880:	f7ec f95c 	bl	8000b3c <__aeabi_dcmplt>
 8014884:	2800      	cmp	r0, #0
 8014886:	f040 8128 	bne.w	8014ada <_dtoa_r+0x68a>
 801488a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801488e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014894:	2b00      	cmp	r3, #0
 8014896:	f2c0 815a 	blt.w	8014b4e <_dtoa_r+0x6fe>
 801489a:	2f0e      	cmp	r7, #14
 801489c:	f300 8157 	bgt.w	8014b4e <_dtoa_r+0x6fe>
 80148a0:	4b5a      	ldr	r3, [pc, #360]	@ (8014a0c <_dtoa_r+0x5bc>)
 80148a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80148a6:	ed93 7b00 	vldr	d7, [r3]
 80148aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	ed8d 7b00 	vstr	d7, [sp]
 80148b2:	da03      	bge.n	80148bc <_dtoa_r+0x46c>
 80148b4:	9b07      	ldr	r3, [sp, #28]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	f340 8101 	ble.w	8014abe <_dtoa_r+0x66e>
 80148bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80148c0:	4656      	mov	r6, sl
 80148c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148c6:	4620      	mov	r0, r4
 80148c8:	4629      	mov	r1, r5
 80148ca:	f7eb ffef 	bl	80008ac <__aeabi_ddiv>
 80148ce:	f7ec f973 	bl	8000bb8 <__aeabi_d2iz>
 80148d2:	4680      	mov	r8, r0
 80148d4:	f7eb fe56 	bl	8000584 <__aeabi_i2d>
 80148d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148dc:	f7eb febc 	bl	8000658 <__aeabi_dmul>
 80148e0:	4602      	mov	r2, r0
 80148e2:	460b      	mov	r3, r1
 80148e4:	4620      	mov	r0, r4
 80148e6:	4629      	mov	r1, r5
 80148e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80148ec:	f7eb fcfc 	bl	80002e8 <__aeabi_dsub>
 80148f0:	f806 4b01 	strb.w	r4, [r6], #1
 80148f4:	9d07      	ldr	r5, [sp, #28]
 80148f6:	eba6 040a 	sub.w	r4, r6, sl
 80148fa:	42a5      	cmp	r5, r4
 80148fc:	4602      	mov	r2, r0
 80148fe:	460b      	mov	r3, r1
 8014900:	f040 8117 	bne.w	8014b32 <_dtoa_r+0x6e2>
 8014904:	f7eb fcf2 	bl	80002ec <__adddf3>
 8014908:	e9dd 2300 	ldrd	r2, r3, [sp]
 801490c:	4604      	mov	r4, r0
 801490e:	460d      	mov	r5, r1
 8014910:	f7ec f932 	bl	8000b78 <__aeabi_dcmpgt>
 8014914:	2800      	cmp	r0, #0
 8014916:	f040 80f9 	bne.w	8014b0c <_dtoa_r+0x6bc>
 801491a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801491e:	4620      	mov	r0, r4
 8014920:	4629      	mov	r1, r5
 8014922:	f7ec f901 	bl	8000b28 <__aeabi_dcmpeq>
 8014926:	b118      	cbz	r0, 8014930 <_dtoa_r+0x4e0>
 8014928:	f018 0f01 	tst.w	r8, #1
 801492c:	f040 80ee 	bne.w	8014b0c <_dtoa_r+0x6bc>
 8014930:	4649      	mov	r1, r9
 8014932:	4658      	mov	r0, fp
 8014934:	f000 fbda 	bl	80150ec <_Bfree>
 8014938:	2300      	movs	r3, #0
 801493a:	7033      	strb	r3, [r6, #0]
 801493c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801493e:	3701      	adds	r7, #1
 8014940:	601f      	str	r7, [r3, #0]
 8014942:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014944:	2b00      	cmp	r3, #0
 8014946:	f000 831d 	beq.w	8014f84 <_dtoa_r+0xb34>
 801494a:	601e      	str	r6, [r3, #0]
 801494c:	e31a      	b.n	8014f84 <_dtoa_r+0xb34>
 801494e:	07e2      	lsls	r2, r4, #31
 8014950:	d505      	bpl.n	801495e <_dtoa_r+0x50e>
 8014952:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014956:	f7eb fe7f 	bl	8000658 <__aeabi_dmul>
 801495a:	3601      	adds	r6, #1
 801495c:	2301      	movs	r3, #1
 801495e:	1064      	asrs	r4, r4, #1
 8014960:	3508      	adds	r5, #8
 8014962:	e73f      	b.n	80147e4 <_dtoa_r+0x394>
 8014964:	2602      	movs	r6, #2
 8014966:	e742      	b.n	80147ee <_dtoa_r+0x39e>
 8014968:	9c07      	ldr	r4, [sp, #28]
 801496a:	9704      	str	r7, [sp, #16]
 801496c:	e761      	b.n	8014832 <_dtoa_r+0x3e2>
 801496e:	4b27      	ldr	r3, [pc, #156]	@ (8014a0c <_dtoa_r+0x5bc>)
 8014970:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014972:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014976:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801497a:	4454      	add	r4, sl
 801497c:	2900      	cmp	r1, #0
 801497e:	d053      	beq.n	8014a28 <_dtoa_r+0x5d8>
 8014980:	4928      	ldr	r1, [pc, #160]	@ (8014a24 <_dtoa_r+0x5d4>)
 8014982:	2000      	movs	r0, #0
 8014984:	f7eb ff92 	bl	80008ac <__aeabi_ddiv>
 8014988:	4633      	mov	r3, r6
 801498a:	462a      	mov	r2, r5
 801498c:	f7eb fcac 	bl	80002e8 <__aeabi_dsub>
 8014990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014994:	4656      	mov	r6, sl
 8014996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801499a:	f7ec f90d 	bl	8000bb8 <__aeabi_d2iz>
 801499e:	4605      	mov	r5, r0
 80149a0:	f7eb fdf0 	bl	8000584 <__aeabi_i2d>
 80149a4:	4602      	mov	r2, r0
 80149a6:	460b      	mov	r3, r1
 80149a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149ac:	f7eb fc9c 	bl	80002e8 <__aeabi_dsub>
 80149b0:	3530      	adds	r5, #48	@ 0x30
 80149b2:	4602      	mov	r2, r0
 80149b4:	460b      	mov	r3, r1
 80149b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80149ba:	f806 5b01 	strb.w	r5, [r6], #1
 80149be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80149c2:	f7ec f8bb 	bl	8000b3c <__aeabi_dcmplt>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d171      	bne.n	8014aae <_dtoa_r+0x65e>
 80149ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149ce:	4911      	ldr	r1, [pc, #68]	@ (8014a14 <_dtoa_r+0x5c4>)
 80149d0:	2000      	movs	r0, #0
 80149d2:	f7eb fc89 	bl	80002e8 <__aeabi_dsub>
 80149d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80149da:	f7ec f8af 	bl	8000b3c <__aeabi_dcmplt>
 80149de:	2800      	cmp	r0, #0
 80149e0:	f040 8095 	bne.w	8014b0e <_dtoa_r+0x6be>
 80149e4:	42a6      	cmp	r6, r4
 80149e6:	f43f af50 	beq.w	801488a <_dtoa_r+0x43a>
 80149ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80149ee:	4b0a      	ldr	r3, [pc, #40]	@ (8014a18 <_dtoa_r+0x5c8>)
 80149f0:	2200      	movs	r2, #0
 80149f2:	f7eb fe31 	bl	8000658 <__aeabi_dmul>
 80149f6:	4b08      	ldr	r3, [pc, #32]	@ (8014a18 <_dtoa_r+0x5c8>)
 80149f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80149fc:	2200      	movs	r2, #0
 80149fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a02:	f7eb fe29 	bl	8000658 <__aeabi_dmul>
 8014a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a0a:	e7c4      	b.n	8014996 <_dtoa_r+0x546>
 8014a0c:	080178d0 	.word	0x080178d0
 8014a10:	080178a8 	.word	0x080178a8
 8014a14:	3ff00000 	.word	0x3ff00000
 8014a18:	40240000 	.word	0x40240000
 8014a1c:	401c0000 	.word	0x401c0000
 8014a20:	40140000 	.word	0x40140000
 8014a24:	3fe00000 	.word	0x3fe00000
 8014a28:	4631      	mov	r1, r6
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	f7eb fe14 	bl	8000658 <__aeabi_dmul>
 8014a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014a34:	9415      	str	r4, [sp, #84]	@ 0x54
 8014a36:	4656      	mov	r6, sl
 8014a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a3c:	f7ec f8bc 	bl	8000bb8 <__aeabi_d2iz>
 8014a40:	4605      	mov	r5, r0
 8014a42:	f7eb fd9f 	bl	8000584 <__aeabi_i2d>
 8014a46:	4602      	mov	r2, r0
 8014a48:	460b      	mov	r3, r1
 8014a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a4e:	f7eb fc4b 	bl	80002e8 <__aeabi_dsub>
 8014a52:	3530      	adds	r5, #48	@ 0x30
 8014a54:	f806 5b01 	strb.w	r5, [r6], #1
 8014a58:	4602      	mov	r2, r0
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	42a6      	cmp	r6, r4
 8014a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014a62:	f04f 0200 	mov.w	r2, #0
 8014a66:	d124      	bne.n	8014ab2 <_dtoa_r+0x662>
 8014a68:	4bac      	ldr	r3, [pc, #688]	@ (8014d1c <_dtoa_r+0x8cc>)
 8014a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8014a6e:	f7eb fc3d 	bl	80002ec <__adddf3>
 8014a72:	4602      	mov	r2, r0
 8014a74:	460b      	mov	r3, r1
 8014a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a7a:	f7ec f87d 	bl	8000b78 <__aeabi_dcmpgt>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d145      	bne.n	8014b0e <_dtoa_r+0x6be>
 8014a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014a86:	49a5      	ldr	r1, [pc, #660]	@ (8014d1c <_dtoa_r+0x8cc>)
 8014a88:	2000      	movs	r0, #0
 8014a8a:	f7eb fc2d 	bl	80002e8 <__aeabi_dsub>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	460b      	mov	r3, r1
 8014a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a96:	f7ec f851 	bl	8000b3c <__aeabi_dcmplt>
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	f43f aef5 	beq.w	801488a <_dtoa_r+0x43a>
 8014aa0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014aa2:	1e73      	subs	r3, r6, #1
 8014aa4:	9315      	str	r3, [sp, #84]	@ 0x54
 8014aa6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014aaa:	2b30      	cmp	r3, #48	@ 0x30
 8014aac:	d0f8      	beq.n	8014aa0 <_dtoa_r+0x650>
 8014aae:	9f04      	ldr	r7, [sp, #16]
 8014ab0:	e73e      	b.n	8014930 <_dtoa_r+0x4e0>
 8014ab2:	4b9b      	ldr	r3, [pc, #620]	@ (8014d20 <_dtoa_r+0x8d0>)
 8014ab4:	f7eb fdd0 	bl	8000658 <__aeabi_dmul>
 8014ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014abc:	e7bc      	b.n	8014a38 <_dtoa_r+0x5e8>
 8014abe:	d10c      	bne.n	8014ada <_dtoa_r+0x68a>
 8014ac0:	4b98      	ldr	r3, [pc, #608]	@ (8014d24 <_dtoa_r+0x8d4>)
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ac8:	f7eb fdc6 	bl	8000658 <__aeabi_dmul>
 8014acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014ad0:	f7ec f848 	bl	8000b64 <__aeabi_dcmpge>
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	f000 8157 	beq.w	8014d88 <_dtoa_r+0x938>
 8014ada:	2400      	movs	r4, #0
 8014adc:	4625      	mov	r5, r4
 8014ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ae0:	43db      	mvns	r3, r3
 8014ae2:	9304      	str	r3, [sp, #16]
 8014ae4:	4656      	mov	r6, sl
 8014ae6:	2700      	movs	r7, #0
 8014ae8:	4621      	mov	r1, r4
 8014aea:	4658      	mov	r0, fp
 8014aec:	f000 fafe 	bl	80150ec <_Bfree>
 8014af0:	2d00      	cmp	r5, #0
 8014af2:	d0dc      	beq.n	8014aae <_dtoa_r+0x65e>
 8014af4:	b12f      	cbz	r7, 8014b02 <_dtoa_r+0x6b2>
 8014af6:	42af      	cmp	r7, r5
 8014af8:	d003      	beq.n	8014b02 <_dtoa_r+0x6b2>
 8014afa:	4639      	mov	r1, r7
 8014afc:	4658      	mov	r0, fp
 8014afe:	f000 faf5 	bl	80150ec <_Bfree>
 8014b02:	4629      	mov	r1, r5
 8014b04:	4658      	mov	r0, fp
 8014b06:	f000 faf1 	bl	80150ec <_Bfree>
 8014b0a:	e7d0      	b.n	8014aae <_dtoa_r+0x65e>
 8014b0c:	9704      	str	r7, [sp, #16]
 8014b0e:	4633      	mov	r3, r6
 8014b10:	461e      	mov	r6, r3
 8014b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b16:	2a39      	cmp	r2, #57	@ 0x39
 8014b18:	d107      	bne.n	8014b2a <_dtoa_r+0x6da>
 8014b1a:	459a      	cmp	sl, r3
 8014b1c:	d1f8      	bne.n	8014b10 <_dtoa_r+0x6c0>
 8014b1e:	9a04      	ldr	r2, [sp, #16]
 8014b20:	3201      	adds	r2, #1
 8014b22:	9204      	str	r2, [sp, #16]
 8014b24:	2230      	movs	r2, #48	@ 0x30
 8014b26:	f88a 2000 	strb.w	r2, [sl]
 8014b2a:	781a      	ldrb	r2, [r3, #0]
 8014b2c:	3201      	adds	r2, #1
 8014b2e:	701a      	strb	r2, [r3, #0]
 8014b30:	e7bd      	b.n	8014aae <_dtoa_r+0x65e>
 8014b32:	4b7b      	ldr	r3, [pc, #492]	@ (8014d20 <_dtoa_r+0x8d0>)
 8014b34:	2200      	movs	r2, #0
 8014b36:	f7eb fd8f 	bl	8000658 <__aeabi_dmul>
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	4604      	mov	r4, r0
 8014b40:	460d      	mov	r5, r1
 8014b42:	f7eb fff1 	bl	8000b28 <__aeabi_dcmpeq>
 8014b46:	2800      	cmp	r0, #0
 8014b48:	f43f aebb 	beq.w	80148c2 <_dtoa_r+0x472>
 8014b4c:	e6f0      	b.n	8014930 <_dtoa_r+0x4e0>
 8014b4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014b50:	2a00      	cmp	r2, #0
 8014b52:	f000 80db 	beq.w	8014d0c <_dtoa_r+0x8bc>
 8014b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b58:	2a01      	cmp	r2, #1
 8014b5a:	f300 80bf 	bgt.w	8014cdc <_dtoa_r+0x88c>
 8014b5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014b60:	2a00      	cmp	r2, #0
 8014b62:	f000 80b7 	beq.w	8014cd4 <_dtoa_r+0x884>
 8014b66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014b6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014b6c:	4646      	mov	r6, r8
 8014b6e:	9a08      	ldr	r2, [sp, #32]
 8014b70:	2101      	movs	r1, #1
 8014b72:	441a      	add	r2, r3
 8014b74:	4658      	mov	r0, fp
 8014b76:	4498      	add	r8, r3
 8014b78:	9208      	str	r2, [sp, #32]
 8014b7a:	f000 fb6b 	bl	8015254 <__i2b>
 8014b7e:	4605      	mov	r5, r0
 8014b80:	b15e      	cbz	r6, 8014b9a <_dtoa_r+0x74a>
 8014b82:	9b08      	ldr	r3, [sp, #32]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	dd08      	ble.n	8014b9a <_dtoa_r+0x74a>
 8014b88:	42b3      	cmp	r3, r6
 8014b8a:	9a08      	ldr	r2, [sp, #32]
 8014b8c:	bfa8      	it	ge
 8014b8e:	4633      	movge	r3, r6
 8014b90:	eba8 0803 	sub.w	r8, r8, r3
 8014b94:	1af6      	subs	r6, r6, r3
 8014b96:	1ad3      	subs	r3, r2, r3
 8014b98:	9308      	str	r3, [sp, #32]
 8014b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b9c:	b1f3      	cbz	r3, 8014bdc <_dtoa_r+0x78c>
 8014b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	f000 80b7 	beq.w	8014d14 <_dtoa_r+0x8c4>
 8014ba6:	b18c      	cbz	r4, 8014bcc <_dtoa_r+0x77c>
 8014ba8:	4629      	mov	r1, r5
 8014baa:	4622      	mov	r2, r4
 8014bac:	4658      	mov	r0, fp
 8014bae:	f000 fc11 	bl	80153d4 <__pow5mult>
 8014bb2:	464a      	mov	r2, r9
 8014bb4:	4601      	mov	r1, r0
 8014bb6:	4605      	mov	r5, r0
 8014bb8:	4658      	mov	r0, fp
 8014bba:	f000 fb61 	bl	8015280 <__multiply>
 8014bbe:	4649      	mov	r1, r9
 8014bc0:	9004      	str	r0, [sp, #16]
 8014bc2:	4658      	mov	r0, fp
 8014bc4:	f000 fa92 	bl	80150ec <_Bfree>
 8014bc8:	9b04      	ldr	r3, [sp, #16]
 8014bca:	4699      	mov	r9, r3
 8014bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014bce:	1b1a      	subs	r2, r3, r4
 8014bd0:	d004      	beq.n	8014bdc <_dtoa_r+0x78c>
 8014bd2:	4649      	mov	r1, r9
 8014bd4:	4658      	mov	r0, fp
 8014bd6:	f000 fbfd 	bl	80153d4 <__pow5mult>
 8014bda:	4681      	mov	r9, r0
 8014bdc:	2101      	movs	r1, #1
 8014bde:	4658      	mov	r0, fp
 8014be0:	f000 fb38 	bl	8015254 <__i2b>
 8014be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014be6:	4604      	mov	r4, r0
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	f000 81cf 	beq.w	8014f8c <_dtoa_r+0xb3c>
 8014bee:	461a      	mov	r2, r3
 8014bf0:	4601      	mov	r1, r0
 8014bf2:	4658      	mov	r0, fp
 8014bf4:	f000 fbee 	bl	80153d4 <__pow5mult>
 8014bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bfa:	2b01      	cmp	r3, #1
 8014bfc:	4604      	mov	r4, r0
 8014bfe:	f300 8095 	bgt.w	8014d2c <_dtoa_r+0x8dc>
 8014c02:	9b02      	ldr	r3, [sp, #8]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	f040 8087 	bne.w	8014d18 <_dtoa_r+0x8c8>
 8014c0a:	9b03      	ldr	r3, [sp, #12]
 8014c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	f040 8089 	bne.w	8014d28 <_dtoa_r+0x8d8>
 8014c16:	9b03      	ldr	r3, [sp, #12]
 8014c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014c1c:	0d1b      	lsrs	r3, r3, #20
 8014c1e:	051b      	lsls	r3, r3, #20
 8014c20:	b12b      	cbz	r3, 8014c2e <_dtoa_r+0x7de>
 8014c22:	9b08      	ldr	r3, [sp, #32]
 8014c24:	3301      	adds	r3, #1
 8014c26:	9308      	str	r3, [sp, #32]
 8014c28:	f108 0801 	add.w	r8, r8, #1
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	f000 81b0 	beq.w	8014f98 <_dtoa_r+0xb48>
 8014c38:	6923      	ldr	r3, [r4, #16]
 8014c3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014c3e:	6918      	ldr	r0, [r3, #16]
 8014c40:	f000 fabc 	bl	80151bc <__hi0bits>
 8014c44:	f1c0 0020 	rsb	r0, r0, #32
 8014c48:	9b08      	ldr	r3, [sp, #32]
 8014c4a:	4418      	add	r0, r3
 8014c4c:	f010 001f 	ands.w	r0, r0, #31
 8014c50:	d077      	beq.n	8014d42 <_dtoa_r+0x8f2>
 8014c52:	f1c0 0320 	rsb	r3, r0, #32
 8014c56:	2b04      	cmp	r3, #4
 8014c58:	dd6b      	ble.n	8014d32 <_dtoa_r+0x8e2>
 8014c5a:	9b08      	ldr	r3, [sp, #32]
 8014c5c:	f1c0 001c 	rsb	r0, r0, #28
 8014c60:	4403      	add	r3, r0
 8014c62:	4480      	add	r8, r0
 8014c64:	4406      	add	r6, r0
 8014c66:	9308      	str	r3, [sp, #32]
 8014c68:	f1b8 0f00 	cmp.w	r8, #0
 8014c6c:	dd05      	ble.n	8014c7a <_dtoa_r+0x82a>
 8014c6e:	4649      	mov	r1, r9
 8014c70:	4642      	mov	r2, r8
 8014c72:	4658      	mov	r0, fp
 8014c74:	f000 fc08 	bl	8015488 <__lshift>
 8014c78:	4681      	mov	r9, r0
 8014c7a:	9b08      	ldr	r3, [sp, #32]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	dd05      	ble.n	8014c8c <_dtoa_r+0x83c>
 8014c80:	4621      	mov	r1, r4
 8014c82:	461a      	mov	r2, r3
 8014c84:	4658      	mov	r0, fp
 8014c86:	f000 fbff 	bl	8015488 <__lshift>
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d059      	beq.n	8014d46 <_dtoa_r+0x8f6>
 8014c92:	4621      	mov	r1, r4
 8014c94:	4648      	mov	r0, r9
 8014c96:	f000 fc63 	bl	8015560 <__mcmp>
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	da53      	bge.n	8014d46 <_dtoa_r+0x8f6>
 8014c9e:	1e7b      	subs	r3, r7, #1
 8014ca0:	9304      	str	r3, [sp, #16]
 8014ca2:	4649      	mov	r1, r9
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	220a      	movs	r2, #10
 8014ca8:	4658      	mov	r0, fp
 8014caa:	f000 fa41 	bl	8015130 <__multadd>
 8014cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014cb0:	4681      	mov	r9, r0
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f000 8172 	beq.w	8014f9c <_dtoa_r+0xb4c>
 8014cb8:	2300      	movs	r3, #0
 8014cba:	4629      	mov	r1, r5
 8014cbc:	220a      	movs	r2, #10
 8014cbe:	4658      	mov	r0, fp
 8014cc0:	f000 fa36 	bl	8015130 <__multadd>
 8014cc4:	9b00      	ldr	r3, [sp, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	4605      	mov	r5, r0
 8014cca:	dc67      	bgt.n	8014d9c <_dtoa_r+0x94c>
 8014ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cce:	2b02      	cmp	r3, #2
 8014cd0:	dc41      	bgt.n	8014d56 <_dtoa_r+0x906>
 8014cd2:	e063      	b.n	8014d9c <_dtoa_r+0x94c>
 8014cd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014cd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014cda:	e746      	b.n	8014b6a <_dtoa_r+0x71a>
 8014cdc:	9b07      	ldr	r3, [sp, #28]
 8014cde:	1e5c      	subs	r4, r3, #1
 8014ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ce2:	42a3      	cmp	r3, r4
 8014ce4:	bfbf      	itttt	lt
 8014ce6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014ce8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8014cea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8014cec:	1ae3      	sublt	r3, r4, r3
 8014cee:	bfb4      	ite	lt
 8014cf0:	18d2      	addlt	r2, r2, r3
 8014cf2:	1b1c      	subge	r4, r3, r4
 8014cf4:	9b07      	ldr	r3, [sp, #28]
 8014cf6:	bfbc      	itt	lt
 8014cf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8014cfa:	2400      	movlt	r4, #0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	bfb5      	itete	lt
 8014d00:	eba8 0603 	sublt.w	r6, r8, r3
 8014d04:	9b07      	ldrge	r3, [sp, #28]
 8014d06:	2300      	movlt	r3, #0
 8014d08:	4646      	movge	r6, r8
 8014d0a:	e730      	b.n	8014b6e <_dtoa_r+0x71e>
 8014d0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014d0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014d10:	4646      	mov	r6, r8
 8014d12:	e735      	b.n	8014b80 <_dtoa_r+0x730>
 8014d14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014d16:	e75c      	b.n	8014bd2 <_dtoa_r+0x782>
 8014d18:	2300      	movs	r3, #0
 8014d1a:	e788      	b.n	8014c2e <_dtoa_r+0x7de>
 8014d1c:	3fe00000 	.word	0x3fe00000
 8014d20:	40240000 	.word	0x40240000
 8014d24:	40140000 	.word	0x40140000
 8014d28:	9b02      	ldr	r3, [sp, #8]
 8014d2a:	e780      	b.n	8014c2e <_dtoa_r+0x7de>
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d30:	e782      	b.n	8014c38 <_dtoa_r+0x7e8>
 8014d32:	d099      	beq.n	8014c68 <_dtoa_r+0x818>
 8014d34:	9a08      	ldr	r2, [sp, #32]
 8014d36:	331c      	adds	r3, #28
 8014d38:	441a      	add	r2, r3
 8014d3a:	4498      	add	r8, r3
 8014d3c:	441e      	add	r6, r3
 8014d3e:	9208      	str	r2, [sp, #32]
 8014d40:	e792      	b.n	8014c68 <_dtoa_r+0x818>
 8014d42:	4603      	mov	r3, r0
 8014d44:	e7f6      	b.n	8014d34 <_dtoa_r+0x8e4>
 8014d46:	9b07      	ldr	r3, [sp, #28]
 8014d48:	9704      	str	r7, [sp, #16]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	dc20      	bgt.n	8014d90 <_dtoa_r+0x940>
 8014d4e:	9300      	str	r3, [sp, #0]
 8014d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d52:	2b02      	cmp	r3, #2
 8014d54:	dd1e      	ble.n	8014d94 <_dtoa_r+0x944>
 8014d56:	9b00      	ldr	r3, [sp, #0]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f47f aec0 	bne.w	8014ade <_dtoa_r+0x68e>
 8014d5e:	4621      	mov	r1, r4
 8014d60:	2205      	movs	r2, #5
 8014d62:	4658      	mov	r0, fp
 8014d64:	f000 f9e4 	bl	8015130 <__multadd>
 8014d68:	4601      	mov	r1, r0
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	4648      	mov	r0, r9
 8014d6e:	f000 fbf7 	bl	8015560 <__mcmp>
 8014d72:	2800      	cmp	r0, #0
 8014d74:	f77f aeb3 	ble.w	8014ade <_dtoa_r+0x68e>
 8014d78:	4656      	mov	r6, sl
 8014d7a:	2331      	movs	r3, #49	@ 0x31
 8014d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8014d80:	9b04      	ldr	r3, [sp, #16]
 8014d82:	3301      	adds	r3, #1
 8014d84:	9304      	str	r3, [sp, #16]
 8014d86:	e6ae      	b.n	8014ae6 <_dtoa_r+0x696>
 8014d88:	9c07      	ldr	r4, [sp, #28]
 8014d8a:	9704      	str	r7, [sp, #16]
 8014d8c:	4625      	mov	r5, r4
 8014d8e:	e7f3      	b.n	8014d78 <_dtoa_r+0x928>
 8014d90:	9b07      	ldr	r3, [sp, #28]
 8014d92:	9300      	str	r3, [sp, #0]
 8014d94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	f000 8104 	beq.w	8014fa4 <_dtoa_r+0xb54>
 8014d9c:	2e00      	cmp	r6, #0
 8014d9e:	dd05      	ble.n	8014dac <_dtoa_r+0x95c>
 8014da0:	4629      	mov	r1, r5
 8014da2:	4632      	mov	r2, r6
 8014da4:	4658      	mov	r0, fp
 8014da6:	f000 fb6f 	bl	8015488 <__lshift>
 8014daa:	4605      	mov	r5, r0
 8014dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d05a      	beq.n	8014e68 <_dtoa_r+0xa18>
 8014db2:	6869      	ldr	r1, [r5, #4]
 8014db4:	4658      	mov	r0, fp
 8014db6:	f000 f959 	bl	801506c <_Balloc>
 8014dba:	4606      	mov	r6, r0
 8014dbc:	b928      	cbnz	r0, 8014dca <_dtoa_r+0x97a>
 8014dbe:	4b84      	ldr	r3, [pc, #528]	@ (8014fd0 <_dtoa_r+0xb80>)
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014dc6:	f7ff bb5a 	b.w	801447e <_dtoa_r+0x2e>
 8014dca:	692a      	ldr	r2, [r5, #16]
 8014dcc:	3202      	adds	r2, #2
 8014dce:	0092      	lsls	r2, r2, #2
 8014dd0:	f105 010c 	add.w	r1, r5, #12
 8014dd4:	300c      	adds	r0, #12
 8014dd6:	f7ff faa4 	bl	8014322 <memcpy>
 8014dda:	2201      	movs	r2, #1
 8014ddc:	4631      	mov	r1, r6
 8014dde:	4658      	mov	r0, fp
 8014de0:	f000 fb52 	bl	8015488 <__lshift>
 8014de4:	f10a 0301 	add.w	r3, sl, #1
 8014de8:	9307      	str	r3, [sp, #28]
 8014dea:	9b00      	ldr	r3, [sp, #0]
 8014dec:	4453      	add	r3, sl
 8014dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014df0:	9b02      	ldr	r3, [sp, #8]
 8014df2:	f003 0301 	and.w	r3, r3, #1
 8014df6:	462f      	mov	r7, r5
 8014df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8014dfa:	4605      	mov	r5, r0
 8014dfc:	9b07      	ldr	r3, [sp, #28]
 8014dfe:	4621      	mov	r1, r4
 8014e00:	3b01      	subs	r3, #1
 8014e02:	4648      	mov	r0, r9
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	f7ff fa9a 	bl	801433e <quorem>
 8014e0a:	4639      	mov	r1, r7
 8014e0c:	9002      	str	r0, [sp, #8]
 8014e0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014e12:	4648      	mov	r0, r9
 8014e14:	f000 fba4 	bl	8015560 <__mcmp>
 8014e18:	462a      	mov	r2, r5
 8014e1a:	9008      	str	r0, [sp, #32]
 8014e1c:	4621      	mov	r1, r4
 8014e1e:	4658      	mov	r0, fp
 8014e20:	f000 fbba 	bl	8015598 <__mdiff>
 8014e24:	68c2      	ldr	r2, [r0, #12]
 8014e26:	4606      	mov	r6, r0
 8014e28:	bb02      	cbnz	r2, 8014e6c <_dtoa_r+0xa1c>
 8014e2a:	4601      	mov	r1, r0
 8014e2c:	4648      	mov	r0, r9
 8014e2e:	f000 fb97 	bl	8015560 <__mcmp>
 8014e32:	4602      	mov	r2, r0
 8014e34:	4631      	mov	r1, r6
 8014e36:	4658      	mov	r0, fp
 8014e38:	920e      	str	r2, [sp, #56]	@ 0x38
 8014e3a:	f000 f957 	bl	80150ec <_Bfree>
 8014e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e42:	9e07      	ldr	r6, [sp, #28]
 8014e44:	ea43 0102 	orr.w	r1, r3, r2
 8014e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e4a:	4319      	orrs	r1, r3
 8014e4c:	d110      	bne.n	8014e70 <_dtoa_r+0xa20>
 8014e4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014e52:	d029      	beq.n	8014ea8 <_dtoa_r+0xa58>
 8014e54:	9b08      	ldr	r3, [sp, #32]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	dd02      	ble.n	8014e60 <_dtoa_r+0xa10>
 8014e5a:	9b02      	ldr	r3, [sp, #8]
 8014e5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014e60:	9b00      	ldr	r3, [sp, #0]
 8014e62:	f883 8000 	strb.w	r8, [r3]
 8014e66:	e63f      	b.n	8014ae8 <_dtoa_r+0x698>
 8014e68:	4628      	mov	r0, r5
 8014e6a:	e7bb      	b.n	8014de4 <_dtoa_r+0x994>
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	e7e1      	b.n	8014e34 <_dtoa_r+0x9e4>
 8014e70:	9b08      	ldr	r3, [sp, #32]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	db04      	blt.n	8014e80 <_dtoa_r+0xa30>
 8014e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014e78:	430b      	orrs	r3, r1
 8014e7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014e7c:	430b      	orrs	r3, r1
 8014e7e:	d120      	bne.n	8014ec2 <_dtoa_r+0xa72>
 8014e80:	2a00      	cmp	r2, #0
 8014e82:	dded      	ble.n	8014e60 <_dtoa_r+0xa10>
 8014e84:	4649      	mov	r1, r9
 8014e86:	2201      	movs	r2, #1
 8014e88:	4658      	mov	r0, fp
 8014e8a:	f000 fafd 	bl	8015488 <__lshift>
 8014e8e:	4621      	mov	r1, r4
 8014e90:	4681      	mov	r9, r0
 8014e92:	f000 fb65 	bl	8015560 <__mcmp>
 8014e96:	2800      	cmp	r0, #0
 8014e98:	dc03      	bgt.n	8014ea2 <_dtoa_r+0xa52>
 8014e9a:	d1e1      	bne.n	8014e60 <_dtoa_r+0xa10>
 8014e9c:	f018 0f01 	tst.w	r8, #1
 8014ea0:	d0de      	beq.n	8014e60 <_dtoa_r+0xa10>
 8014ea2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014ea6:	d1d8      	bne.n	8014e5a <_dtoa_r+0xa0a>
 8014ea8:	9a00      	ldr	r2, [sp, #0]
 8014eaa:	2339      	movs	r3, #57	@ 0x39
 8014eac:	7013      	strb	r3, [r2, #0]
 8014eae:	4633      	mov	r3, r6
 8014eb0:	461e      	mov	r6, r3
 8014eb2:	3b01      	subs	r3, #1
 8014eb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014eb8:	2a39      	cmp	r2, #57	@ 0x39
 8014eba:	d052      	beq.n	8014f62 <_dtoa_r+0xb12>
 8014ebc:	3201      	adds	r2, #1
 8014ebe:	701a      	strb	r2, [r3, #0]
 8014ec0:	e612      	b.n	8014ae8 <_dtoa_r+0x698>
 8014ec2:	2a00      	cmp	r2, #0
 8014ec4:	dd07      	ble.n	8014ed6 <_dtoa_r+0xa86>
 8014ec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014eca:	d0ed      	beq.n	8014ea8 <_dtoa_r+0xa58>
 8014ecc:	9a00      	ldr	r2, [sp, #0]
 8014ece:	f108 0301 	add.w	r3, r8, #1
 8014ed2:	7013      	strb	r3, [r2, #0]
 8014ed4:	e608      	b.n	8014ae8 <_dtoa_r+0x698>
 8014ed6:	9b07      	ldr	r3, [sp, #28]
 8014ed8:	9a07      	ldr	r2, [sp, #28]
 8014eda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8014ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ee0:	4293      	cmp	r3, r2
 8014ee2:	d028      	beq.n	8014f36 <_dtoa_r+0xae6>
 8014ee4:	4649      	mov	r1, r9
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	220a      	movs	r2, #10
 8014eea:	4658      	mov	r0, fp
 8014eec:	f000 f920 	bl	8015130 <__multadd>
 8014ef0:	42af      	cmp	r7, r5
 8014ef2:	4681      	mov	r9, r0
 8014ef4:	f04f 0300 	mov.w	r3, #0
 8014ef8:	f04f 020a 	mov.w	r2, #10
 8014efc:	4639      	mov	r1, r7
 8014efe:	4658      	mov	r0, fp
 8014f00:	d107      	bne.n	8014f12 <_dtoa_r+0xac2>
 8014f02:	f000 f915 	bl	8015130 <__multadd>
 8014f06:	4607      	mov	r7, r0
 8014f08:	4605      	mov	r5, r0
 8014f0a:	9b07      	ldr	r3, [sp, #28]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	9307      	str	r3, [sp, #28]
 8014f10:	e774      	b.n	8014dfc <_dtoa_r+0x9ac>
 8014f12:	f000 f90d 	bl	8015130 <__multadd>
 8014f16:	4629      	mov	r1, r5
 8014f18:	4607      	mov	r7, r0
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	220a      	movs	r2, #10
 8014f1e:	4658      	mov	r0, fp
 8014f20:	f000 f906 	bl	8015130 <__multadd>
 8014f24:	4605      	mov	r5, r0
 8014f26:	e7f0      	b.n	8014f0a <_dtoa_r+0xaba>
 8014f28:	9b00      	ldr	r3, [sp, #0]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	bfcc      	ite	gt
 8014f2e:	461e      	movgt	r6, r3
 8014f30:	2601      	movle	r6, #1
 8014f32:	4456      	add	r6, sl
 8014f34:	2700      	movs	r7, #0
 8014f36:	4649      	mov	r1, r9
 8014f38:	2201      	movs	r2, #1
 8014f3a:	4658      	mov	r0, fp
 8014f3c:	f000 faa4 	bl	8015488 <__lshift>
 8014f40:	4621      	mov	r1, r4
 8014f42:	4681      	mov	r9, r0
 8014f44:	f000 fb0c 	bl	8015560 <__mcmp>
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	dcb0      	bgt.n	8014eae <_dtoa_r+0xa5e>
 8014f4c:	d102      	bne.n	8014f54 <_dtoa_r+0xb04>
 8014f4e:	f018 0f01 	tst.w	r8, #1
 8014f52:	d1ac      	bne.n	8014eae <_dtoa_r+0xa5e>
 8014f54:	4633      	mov	r3, r6
 8014f56:	461e      	mov	r6, r3
 8014f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f5c:	2a30      	cmp	r2, #48	@ 0x30
 8014f5e:	d0fa      	beq.n	8014f56 <_dtoa_r+0xb06>
 8014f60:	e5c2      	b.n	8014ae8 <_dtoa_r+0x698>
 8014f62:	459a      	cmp	sl, r3
 8014f64:	d1a4      	bne.n	8014eb0 <_dtoa_r+0xa60>
 8014f66:	9b04      	ldr	r3, [sp, #16]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	9304      	str	r3, [sp, #16]
 8014f6c:	2331      	movs	r3, #49	@ 0x31
 8014f6e:	f88a 3000 	strb.w	r3, [sl]
 8014f72:	e5b9      	b.n	8014ae8 <_dtoa_r+0x698>
 8014f74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014f76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014fd4 <_dtoa_r+0xb84>
 8014f7a:	b11b      	cbz	r3, 8014f84 <_dtoa_r+0xb34>
 8014f7c:	f10a 0308 	add.w	r3, sl, #8
 8014f80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014f82:	6013      	str	r3, [r2, #0]
 8014f84:	4650      	mov	r0, sl
 8014f86:	b019      	add	sp, #100	@ 0x64
 8014f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	f77f ae37 	ble.w	8014c02 <_dtoa_r+0x7b2>
 8014f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f98:	2001      	movs	r0, #1
 8014f9a:	e655      	b.n	8014c48 <_dtoa_r+0x7f8>
 8014f9c:	9b00      	ldr	r3, [sp, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	f77f aed6 	ble.w	8014d50 <_dtoa_r+0x900>
 8014fa4:	4656      	mov	r6, sl
 8014fa6:	4621      	mov	r1, r4
 8014fa8:	4648      	mov	r0, r9
 8014faa:	f7ff f9c8 	bl	801433e <quorem>
 8014fae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014fb2:	f806 8b01 	strb.w	r8, [r6], #1
 8014fb6:	9b00      	ldr	r3, [sp, #0]
 8014fb8:	eba6 020a 	sub.w	r2, r6, sl
 8014fbc:	4293      	cmp	r3, r2
 8014fbe:	ddb3      	ble.n	8014f28 <_dtoa_r+0xad8>
 8014fc0:	4649      	mov	r1, r9
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	220a      	movs	r2, #10
 8014fc6:	4658      	mov	r0, fp
 8014fc8:	f000 f8b2 	bl	8015130 <__multadd>
 8014fcc:	4681      	mov	r9, r0
 8014fce:	e7ea      	b.n	8014fa6 <_dtoa_r+0xb56>
 8014fd0:	08017830 	.word	0x08017830
 8014fd4:	080177b4 	.word	0x080177b4

08014fd8 <_free_r>:
 8014fd8:	b538      	push	{r3, r4, r5, lr}
 8014fda:	4605      	mov	r5, r0
 8014fdc:	2900      	cmp	r1, #0
 8014fde:	d041      	beq.n	8015064 <_free_r+0x8c>
 8014fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014fe4:	1f0c      	subs	r4, r1, #4
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	bfb8      	it	lt
 8014fea:	18e4      	addlt	r4, r4, r3
 8014fec:	f7fe fb2e 	bl	801364c <__malloc_lock>
 8014ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8015068 <_free_r+0x90>)
 8014ff2:	6813      	ldr	r3, [r2, #0]
 8014ff4:	b933      	cbnz	r3, 8015004 <_free_r+0x2c>
 8014ff6:	6063      	str	r3, [r4, #4]
 8014ff8:	6014      	str	r4, [r2, #0]
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015000:	f7fe bb2a 	b.w	8013658 <__malloc_unlock>
 8015004:	42a3      	cmp	r3, r4
 8015006:	d908      	bls.n	801501a <_free_r+0x42>
 8015008:	6820      	ldr	r0, [r4, #0]
 801500a:	1821      	adds	r1, r4, r0
 801500c:	428b      	cmp	r3, r1
 801500e:	bf01      	itttt	eq
 8015010:	6819      	ldreq	r1, [r3, #0]
 8015012:	685b      	ldreq	r3, [r3, #4]
 8015014:	1809      	addeq	r1, r1, r0
 8015016:	6021      	streq	r1, [r4, #0]
 8015018:	e7ed      	b.n	8014ff6 <_free_r+0x1e>
 801501a:	461a      	mov	r2, r3
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	b10b      	cbz	r3, 8015024 <_free_r+0x4c>
 8015020:	42a3      	cmp	r3, r4
 8015022:	d9fa      	bls.n	801501a <_free_r+0x42>
 8015024:	6811      	ldr	r1, [r2, #0]
 8015026:	1850      	adds	r0, r2, r1
 8015028:	42a0      	cmp	r0, r4
 801502a:	d10b      	bne.n	8015044 <_free_r+0x6c>
 801502c:	6820      	ldr	r0, [r4, #0]
 801502e:	4401      	add	r1, r0
 8015030:	1850      	adds	r0, r2, r1
 8015032:	4283      	cmp	r3, r0
 8015034:	6011      	str	r1, [r2, #0]
 8015036:	d1e0      	bne.n	8014ffa <_free_r+0x22>
 8015038:	6818      	ldr	r0, [r3, #0]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	6053      	str	r3, [r2, #4]
 801503e:	4408      	add	r0, r1
 8015040:	6010      	str	r0, [r2, #0]
 8015042:	e7da      	b.n	8014ffa <_free_r+0x22>
 8015044:	d902      	bls.n	801504c <_free_r+0x74>
 8015046:	230c      	movs	r3, #12
 8015048:	602b      	str	r3, [r5, #0]
 801504a:	e7d6      	b.n	8014ffa <_free_r+0x22>
 801504c:	6820      	ldr	r0, [r4, #0]
 801504e:	1821      	adds	r1, r4, r0
 8015050:	428b      	cmp	r3, r1
 8015052:	bf04      	itt	eq
 8015054:	6819      	ldreq	r1, [r3, #0]
 8015056:	685b      	ldreq	r3, [r3, #4]
 8015058:	6063      	str	r3, [r4, #4]
 801505a:	bf04      	itt	eq
 801505c:	1809      	addeq	r1, r1, r0
 801505e:	6021      	streq	r1, [r4, #0]
 8015060:	6054      	str	r4, [r2, #4]
 8015062:	e7ca      	b.n	8014ffa <_free_r+0x22>
 8015064:	bd38      	pop	{r3, r4, r5, pc}
 8015066:	bf00      	nop
 8015068:	200005bc 	.word	0x200005bc

0801506c <_Balloc>:
 801506c:	b570      	push	{r4, r5, r6, lr}
 801506e:	69c6      	ldr	r6, [r0, #28]
 8015070:	4604      	mov	r4, r0
 8015072:	460d      	mov	r5, r1
 8015074:	b976      	cbnz	r6, 8015094 <_Balloc+0x28>
 8015076:	2010      	movs	r0, #16
 8015078:	f7fe fa36 	bl	80134e8 <malloc>
 801507c:	4602      	mov	r2, r0
 801507e:	61e0      	str	r0, [r4, #28]
 8015080:	b920      	cbnz	r0, 801508c <_Balloc+0x20>
 8015082:	4b18      	ldr	r3, [pc, #96]	@ (80150e4 <_Balloc+0x78>)
 8015084:	4818      	ldr	r0, [pc, #96]	@ (80150e8 <_Balloc+0x7c>)
 8015086:	216b      	movs	r1, #107	@ 0x6b
 8015088:	f000 fd90 	bl	8015bac <__assert_func>
 801508c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015090:	6006      	str	r6, [r0, #0]
 8015092:	60c6      	str	r6, [r0, #12]
 8015094:	69e6      	ldr	r6, [r4, #28]
 8015096:	68f3      	ldr	r3, [r6, #12]
 8015098:	b183      	cbz	r3, 80150bc <_Balloc+0x50>
 801509a:	69e3      	ldr	r3, [r4, #28]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80150a2:	b9b8      	cbnz	r0, 80150d4 <_Balloc+0x68>
 80150a4:	2101      	movs	r1, #1
 80150a6:	fa01 f605 	lsl.w	r6, r1, r5
 80150aa:	1d72      	adds	r2, r6, #5
 80150ac:	0092      	lsls	r2, r2, #2
 80150ae:	4620      	mov	r0, r4
 80150b0:	f000 fd9a 	bl	8015be8 <_calloc_r>
 80150b4:	b160      	cbz	r0, 80150d0 <_Balloc+0x64>
 80150b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80150ba:	e00e      	b.n	80150da <_Balloc+0x6e>
 80150bc:	2221      	movs	r2, #33	@ 0x21
 80150be:	2104      	movs	r1, #4
 80150c0:	4620      	mov	r0, r4
 80150c2:	f000 fd91 	bl	8015be8 <_calloc_r>
 80150c6:	69e3      	ldr	r3, [r4, #28]
 80150c8:	60f0      	str	r0, [r6, #12]
 80150ca:	68db      	ldr	r3, [r3, #12]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d1e4      	bne.n	801509a <_Balloc+0x2e>
 80150d0:	2000      	movs	r0, #0
 80150d2:	bd70      	pop	{r4, r5, r6, pc}
 80150d4:	6802      	ldr	r2, [r0, #0]
 80150d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80150da:	2300      	movs	r3, #0
 80150dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80150e0:	e7f7      	b.n	80150d2 <_Balloc+0x66>
 80150e2:	bf00      	nop
 80150e4:	080177c1 	.word	0x080177c1
 80150e8:	08017841 	.word	0x08017841

080150ec <_Bfree>:
 80150ec:	b570      	push	{r4, r5, r6, lr}
 80150ee:	69c6      	ldr	r6, [r0, #28]
 80150f0:	4605      	mov	r5, r0
 80150f2:	460c      	mov	r4, r1
 80150f4:	b976      	cbnz	r6, 8015114 <_Bfree+0x28>
 80150f6:	2010      	movs	r0, #16
 80150f8:	f7fe f9f6 	bl	80134e8 <malloc>
 80150fc:	4602      	mov	r2, r0
 80150fe:	61e8      	str	r0, [r5, #28]
 8015100:	b920      	cbnz	r0, 801510c <_Bfree+0x20>
 8015102:	4b09      	ldr	r3, [pc, #36]	@ (8015128 <_Bfree+0x3c>)
 8015104:	4809      	ldr	r0, [pc, #36]	@ (801512c <_Bfree+0x40>)
 8015106:	218f      	movs	r1, #143	@ 0x8f
 8015108:	f000 fd50 	bl	8015bac <__assert_func>
 801510c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015110:	6006      	str	r6, [r0, #0]
 8015112:	60c6      	str	r6, [r0, #12]
 8015114:	b13c      	cbz	r4, 8015126 <_Bfree+0x3a>
 8015116:	69eb      	ldr	r3, [r5, #28]
 8015118:	6862      	ldr	r2, [r4, #4]
 801511a:	68db      	ldr	r3, [r3, #12]
 801511c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015120:	6021      	str	r1, [r4, #0]
 8015122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015126:	bd70      	pop	{r4, r5, r6, pc}
 8015128:	080177c1 	.word	0x080177c1
 801512c:	08017841 	.word	0x08017841

08015130 <__multadd>:
 8015130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015134:	690d      	ldr	r5, [r1, #16]
 8015136:	4607      	mov	r7, r0
 8015138:	460c      	mov	r4, r1
 801513a:	461e      	mov	r6, r3
 801513c:	f101 0c14 	add.w	ip, r1, #20
 8015140:	2000      	movs	r0, #0
 8015142:	f8dc 3000 	ldr.w	r3, [ip]
 8015146:	b299      	uxth	r1, r3
 8015148:	fb02 6101 	mla	r1, r2, r1, r6
 801514c:	0c1e      	lsrs	r6, r3, #16
 801514e:	0c0b      	lsrs	r3, r1, #16
 8015150:	fb02 3306 	mla	r3, r2, r6, r3
 8015154:	b289      	uxth	r1, r1
 8015156:	3001      	adds	r0, #1
 8015158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801515c:	4285      	cmp	r5, r0
 801515e:	f84c 1b04 	str.w	r1, [ip], #4
 8015162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015166:	dcec      	bgt.n	8015142 <__multadd+0x12>
 8015168:	b30e      	cbz	r6, 80151ae <__multadd+0x7e>
 801516a:	68a3      	ldr	r3, [r4, #8]
 801516c:	42ab      	cmp	r3, r5
 801516e:	dc19      	bgt.n	80151a4 <__multadd+0x74>
 8015170:	6861      	ldr	r1, [r4, #4]
 8015172:	4638      	mov	r0, r7
 8015174:	3101      	adds	r1, #1
 8015176:	f7ff ff79 	bl	801506c <_Balloc>
 801517a:	4680      	mov	r8, r0
 801517c:	b928      	cbnz	r0, 801518a <__multadd+0x5a>
 801517e:	4602      	mov	r2, r0
 8015180:	4b0c      	ldr	r3, [pc, #48]	@ (80151b4 <__multadd+0x84>)
 8015182:	480d      	ldr	r0, [pc, #52]	@ (80151b8 <__multadd+0x88>)
 8015184:	21ba      	movs	r1, #186	@ 0xba
 8015186:	f000 fd11 	bl	8015bac <__assert_func>
 801518a:	6922      	ldr	r2, [r4, #16]
 801518c:	3202      	adds	r2, #2
 801518e:	f104 010c 	add.w	r1, r4, #12
 8015192:	0092      	lsls	r2, r2, #2
 8015194:	300c      	adds	r0, #12
 8015196:	f7ff f8c4 	bl	8014322 <memcpy>
 801519a:	4621      	mov	r1, r4
 801519c:	4638      	mov	r0, r7
 801519e:	f7ff ffa5 	bl	80150ec <_Bfree>
 80151a2:	4644      	mov	r4, r8
 80151a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80151a8:	3501      	adds	r5, #1
 80151aa:	615e      	str	r6, [r3, #20]
 80151ac:	6125      	str	r5, [r4, #16]
 80151ae:	4620      	mov	r0, r4
 80151b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151b4:	08017830 	.word	0x08017830
 80151b8:	08017841 	.word	0x08017841

080151bc <__hi0bits>:
 80151bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80151c0:	4603      	mov	r3, r0
 80151c2:	bf36      	itet	cc
 80151c4:	0403      	lslcc	r3, r0, #16
 80151c6:	2000      	movcs	r0, #0
 80151c8:	2010      	movcc	r0, #16
 80151ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80151ce:	bf3c      	itt	cc
 80151d0:	021b      	lslcc	r3, r3, #8
 80151d2:	3008      	addcc	r0, #8
 80151d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80151d8:	bf3c      	itt	cc
 80151da:	011b      	lslcc	r3, r3, #4
 80151dc:	3004      	addcc	r0, #4
 80151de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80151e2:	bf3c      	itt	cc
 80151e4:	009b      	lslcc	r3, r3, #2
 80151e6:	3002      	addcc	r0, #2
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	db05      	blt.n	80151f8 <__hi0bits+0x3c>
 80151ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80151f0:	f100 0001 	add.w	r0, r0, #1
 80151f4:	bf08      	it	eq
 80151f6:	2020      	moveq	r0, #32
 80151f8:	4770      	bx	lr

080151fa <__lo0bits>:
 80151fa:	6803      	ldr	r3, [r0, #0]
 80151fc:	4602      	mov	r2, r0
 80151fe:	f013 0007 	ands.w	r0, r3, #7
 8015202:	d00b      	beq.n	801521c <__lo0bits+0x22>
 8015204:	07d9      	lsls	r1, r3, #31
 8015206:	d421      	bmi.n	801524c <__lo0bits+0x52>
 8015208:	0798      	lsls	r0, r3, #30
 801520a:	bf49      	itett	mi
 801520c:	085b      	lsrmi	r3, r3, #1
 801520e:	089b      	lsrpl	r3, r3, #2
 8015210:	2001      	movmi	r0, #1
 8015212:	6013      	strmi	r3, [r2, #0]
 8015214:	bf5c      	itt	pl
 8015216:	6013      	strpl	r3, [r2, #0]
 8015218:	2002      	movpl	r0, #2
 801521a:	4770      	bx	lr
 801521c:	b299      	uxth	r1, r3
 801521e:	b909      	cbnz	r1, 8015224 <__lo0bits+0x2a>
 8015220:	0c1b      	lsrs	r3, r3, #16
 8015222:	2010      	movs	r0, #16
 8015224:	b2d9      	uxtb	r1, r3
 8015226:	b909      	cbnz	r1, 801522c <__lo0bits+0x32>
 8015228:	3008      	adds	r0, #8
 801522a:	0a1b      	lsrs	r3, r3, #8
 801522c:	0719      	lsls	r1, r3, #28
 801522e:	bf04      	itt	eq
 8015230:	091b      	lsreq	r3, r3, #4
 8015232:	3004      	addeq	r0, #4
 8015234:	0799      	lsls	r1, r3, #30
 8015236:	bf04      	itt	eq
 8015238:	089b      	lsreq	r3, r3, #2
 801523a:	3002      	addeq	r0, #2
 801523c:	07d9      	lsls	r1, r3, #31
 801523e:	d403      	bmi.n	8015248 <__lo0bits+0x4e>
 8015240:	085b      	lsrs	r3, r3, #1
 8015242:	f100 0001 	add.w	r0, r0, #1
 8015246:	d003      	beq.n	8015250 <__lo0bits+0x56>
 8015248:	6013      	str	r3, [r2, #0]
 801524a:	4770      	bx	lr
 801524c:	2000      	movs	r0, #0
 801524e:	4770      	bx	lr
 8015250:	2020      	movs	r0, #32
 8015252:	4770      	bx	lr

08015254 <__i2b>:
 8015254:	b510      	push	{r4, lr}
 8015256:	460c      	mov	r4, r1
 8015258:	2101      	movs	r1, #1
 801525a:	f7ff ff07 	bl	801506c <_Balloc>
 801525e:	4602      	mov	r2, r0
 8015260:	b928      	cbnz	r0, 801526e <__i2b+0x1a>
 8015262:	4b05      	ldr	r3, [pc, #20]	@ (8015278 <__i2b+0x24>)
 8015264:	4805      	ldr	r0, [pc, #20]	@ (801527c <__i2b+0x28>)
 8015266:	f240 1145 	movw	r1, #325	@ 0x145
 801526a:	f000 fc9f 	bl	8015bac <__assert_func>
 801526e:	2301      	movs	r3, #1
 8015270:	6144      	str	r4, [r0, #20]
 8015272:	6103      	str	r3, [r0, #16]
 8015274:	bd10      	pop	{r4, pc}
 8015276:	bf00      	nop
 8015278:	08017830 	.word	0x08017830
 801527c:	08017841 	.word	0x08017841

08015280 <__multiply>:
 8015280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015284:	4614      	mov	r4, r2
 8015286:	690a      	ldr	r2, [r1, #16]
 8015288:	6923      	ldr	r3, [r4, #16]
 801528a:	429a      	cmp	r2, r3
 801528c:	bfa8      	it	ge
 801528e:	4623      	movge	r3, r4
 8015290:	460f      	mov	r7, r1
 8015292:	bfa4      	itt	ge
 8015294:	460c      	movge	r4, r1
 8015296:	461f      	movge	r7, r3
 8015298:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801529c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80152a0:	68a3      	ldr	r3, [r4, #8]
 80152a2:	6861      	ldr	r1, [r4, #4]
 80152a4:	eb0a 0609 	add.w	r6, sl, r9
 80152a8:	42b3      	cmp	r3, r6
 80152aa:	b085      	sub	sp, #20
 80152ac:	bfb8      	it	lt
 80152ae:	3101      	addlt	r1, #1
 80152b0:	f7ff fedc 	bl	801506c <_Balloc>
 80152b4:	b930      	cbnz	r0, 80152c4 <__multiply+0x44>
 80152b6:	4602      	mov	r2, r0
 80152b8:	4b44      	ldr	r3, [pc, #272]	@ (80153cc <__multiply+0x14c>)
 80152ba:	4845      	ldr	r0, [pc, #276]	@ (80153d0 <__multiply+0x150>)
 80152bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80152c0:	f000 fc74 	bl	8015bac <__assert_func>
 80152c4:	f100 0514 	add.w	r5, r0, #20
 80152c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80152cc:	462b      	mov	r3, r5
 80152ce:	2200      	movs	r2, #0
 80152d0:	4543      	cmp	r3, r8
 80152d2:	d321      	bcc.n	8015318 <__multiply+0x98>
 80152d4:	f107 0114 	add.w	r1, r7, #20
 80152d8:	f104 0214 	add.w	r2, r4, #20
 80152dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80152e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80152e4:	9302      	str	r3, [sp, #8]
 80152e6:	1b13      	subs	r3, r2, r4
 80152e8:	3b15      	subs	r3, #21
 80152ea:	f023 0303 	bic.w	r3, r3, #3
 80152ee:	3304      	adds	r3, #4
 80152f0:	f104 0715 	add.w	r7, r4, #21
 80152f4:	42ba      	cmp	r2, r7
 80152f6:	bf38      	it	cc
 80152f8:	2304      	movcc	r3, #4
 80152fa:	9301      	str	r3, [sp, #4]
 80152fc:	9b02      	ldr	r3, [sp, #8]
 80152fe:	9103      	str	r1, [sp, #12]
 8015300:	428b      	cmp	r3, r1
 8015302:	d80c      	bhi.n	801531e <__multiply+0x9e>
 8015304:	2e00      	cmp	r6, #0
 8015306:	dd03      	ble.n	8015310 <__multiply+0x90>
 8015308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801530c:	2b00      	cmp	r3, #0
 801530e:	d05b      	beq.n	80153c8 <__multiply+0x148>
 8015310:	6106      	str	r6, [r0, #16]
 8015312:	b005      	add	sp, #20
 8015314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015318:	f843 2b04 	str.w	r2, [r3], #4
 801531c:	e7d8      	b.n	80152d0 <__multiply+0x50>
 801531e:	f8b1 a000 	ldrh.w	sl, [r1]
 8015322:	f1ba 0f00 	cmp.w	sl, #0
 8015326:	d024      	beq.n	8015372 <__multiply+0xf2>
 8015328:	f104 0e14 	add.w	lr, r4, #20
 801532c:	46a9      	mov	r9, r5
 801532e:	f04f 0c00 	mov.w	ip, #0
 8015332:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015336:	f8d9 3000 	ldr.w	r3, [r9]
 801533a:	fa1f fb87 	uxth.w	fp, r7
 801533e:	b29b      	uxth	r3, r3
 8015340:	fb0a 330b 	mla	r3, sl, fp, r3
 8015344:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015348:	f8d9 7000 	ldr.w	r7, [r9]
 801534c:	4463      	add	r3, ip
 801534e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015352:	fb0a c70b 	mla	r7, sl, fp, ip
 8015356:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801535a:	b29b      	uxth	r3, r3
 801535c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015360:	4572      	cmp	r2, lr
 8015362:	f849 3b04 	str.w	r3, [r9], #4
 8015366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801536a:	d8e2      	bhi.n	8015332 <__multiply+0xb2>
 801536c:	9b01      	ldr	r3, [sp, #4]
 801536e:	f845 c003 	str.w	ip, [r5, r3]
 8015372:	9b03      	ldr	r3, [sp, #12]
 8015374:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015378:	3104      	adds	r1, #4
 801537a:	f1b9 0f00 	cmp.w	r9, #0
 801537e:	d021      	beq.n	80153c4 <__multiply+0x144>
 8015380:	682b      	ldr	r3, [r5, #0]
 8015382:	f104 0c14 	add.w	ip, r4, #20
 8015386:	46ae      	mov	lr, r5
 8015388:	f04f 0a00 	mov.w	sl, #0
 801538c:	f8bc b000 	ldrh.w	fp, [ip]
 8015390:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015394:	fb09 770b 	mla	r7, r9, fp, r7
 8015398:	4457      	add	r7, sl
 801539a:	b29b      	uxth	r3, r3
 801539c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80153a0:	f84e 3b04 	str.w	r3, [lr], #4
 80153a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80153a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80153ac:	f8be 3000 	ldrh.w	r3, [lr]
 80153b0:	fb09 330a 	mla	r3, r9, sl, r3
 80153b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80153b8:	4562      	cmp	r2, ip
 80153ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80153be:	d8e5      	bhi.n	801538c <__multiply+0x10c>
 80153c0:	9f01      	ldr	r7, [sp, #4]
 80153c2:	51eb      	str	r3, [r5, r7]
 80153c4:	3504      	adds	r5, #4
 80153c6:	e799      	b.n	80152fc <__multiply+0x7c>
 80153c8:	3e01      	subs	r6, #1
 80153ca:	e79b      	b.n	8015304 <__multiply+0x84>
 80153cc:	08017830 	.word	0x08017830
 80153d0:	08017841 	.word	0x08017841

080153d4 <__pow5mult>:
 80153d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153d8:	4615      	mov	r5, r2
 80153da:	f012 0203 	ands.w	r2, r2, #3
 80153de:	4607      	mov	r7, r0
 80153e0:	460e      	mov	r6, r1
 80153e2:	d007      	beq.n	80153f4 <__pow5mult+0x20>
 80153e4:	4c25      	ldr	r4, [pc, #148]	@ (801547c <__pow5mult+0xa8>)
 80153e6:	3a01      	subs	r2, #1
 80153e8:	2300      	movs	r3, #0
 80153ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80153ee:	f7ff fe9f 	bl	8015130 <__multadd>
 80153f2:	4606      	mov	r6, r0
 80153f4:	10ad      	asrs	r5, r5, #2
 80153f6:	d03d      	beq.n	8015474 <__pow5mult+0xa0>
 80153f8:	69fc      	ldr	r4, [r7, #28]
 80153fa:	b97c      	cbnz	r4, 801541c <__pow5mult+0x48>
 80153fc:	2010      	movs	r0, #16
 80153fe:	f7fe f873 	bl	80134e8 <malloc>
 8015402:	4602      	mov	r2, r0
 8015404:	61f8      	str	r0, [r7, #28]
 8015406:	b928      	cbnz	r0, 8015414 <__pow5mult+0x40>
 8015408:	4b1d      	ldr	r3, [pc, #116]	@ (8015480 <__pow5mult+0xac>)
 801540a:	481e      	ldr	r0, [pc, #120]	@ (8015484 <__pow5mult+0xb0>)
 801540c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015410:	f000 fbcc 	bl	8015bac <__assert_func>
 8015414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015418:	6004      	str	r4, [r0, #0]
 801541a:	60c4      	str	r4, [r0, #12]
 801541c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015424:	b94c      	cbnz	r4, 801543a <__pow5mult+0x66>
 8015426:	f240 2171 	movw	r1, #625	@ 0x271
 801542a:	4638      	mov	r0, r7
 801542c:	f7ff ff12 	bl	8015254 <__i2b>
 8015430:	2300      	movs	r3, #0
 8015432:	f8c8 0008 	str.w	r0, [r8, #8]
 8015436:	4604      	mov	r4, r0
 8015438:	6003      	str	r3, [r0, #0]
 801543a:	f04f 0900 	mov.w	r9, #0
 801543e:	07eb      	lsls	r3, r5, #31
 8015440:	d50a      	bpl.n	8015458 <__pow5mult+0x84>
 8015442:	4631      	mov	r1, r6
 8015444:	4622      	mov	r2, r4
 8015446:	4638      	mov	r0, r7
 8015448:	f7ff ff1a 	bl	8015280 <__multiply>
 801544c:	4631      	mov	r1, r6
 801544e:	4680      	mov	r8, r0
 8015450:	4638      	mov	r0, r7
 8015452:	f7ff fe4b 	bl	80150ec <_Bfree>
 8015456:	4646      	mov	r6, r8
 8015458:	106d      	asrs	r5, r5, #1
 801545a:	d00b      	beq.n	8015474 <__pow5mult+0xa0>
 801545c:	6820      	ldr	r0, [r4, #0]
 801545e:	b938      	cbnz	r0, 8015470 <__pow5mult+0x9c>
 8015460:	4622      	mov	r2, r4
 8015462:	4621      	mov	r1, r4
 8015464:	4638      	mov	r0, r7
 8015466:	f7ff ff0b 	bl	8015280 <__multiply>
 801546a:	6020      	str	r0, [r4, #0]
 801546c:	f8c0 9000 	str.w	r9, [r0]
 8015470:	4604      	mov	r4, r0
 8015472:	e7e4      	b.n	801543e <__pow5mult+0x6a>
 8015474:	4630      	mov	r0, r6
 8015476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801547a:	bf00      	nop
 801547c:	0801789c 	.word	0x0801789c
 8015480:	080177c1 	.word	0x080177c1
 8015484:	08017841 	.word	0x08017841

08015488 <__lshift>:
 8015488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801548c:	460c      	mov	r4, r1
 801548e:	6849      	ldr	r1, [r1, #4]
 8015490:	6923      	ldr	r3, [r4, #16]
 8015492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015496:	68a3      	ldr	r3, [r4, #8]
 8015498:	4607      	mov	r7, r0
 801549a:	4691      	mov	r9, r2
 801549c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80154a0:	f108 0601 	add.w	r6, r8, #1
 80154a4:	42b3      	cmp	r3, r6
 80154a6:	db0b      	blt.n	80154c0 <__lshift+0x38>
 80154a8:	4638      	mov	r0, r7
 80154aa:	f7ff fddf 	bl	801506c <_Balloc>
 80154ae:	4605      	mov	r5, r0
 80154b0:	b948      	cbnz	r0, 80154c6 <__lshift+0x3e>
 80154b2:	4602      	mov	r2, r0
 80154b4:	4b28      	ldr	r3, [pc, #160]	@ (8015558 <__lshift+0xd0>)
 80154b6:	4829      	ldr	r0, [pc, #164]	@ (801555c <__lshift+0xd4>)
 80154b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80154bc:	f000 fb76 	bl	8015bac <__assert_func>
 80154c0:	3101      	adds	r1, #1
 80154c2:	005b      	lsls	r3, r3, #1
 80154c4:	e7ee      	b.n	80154a4 <__lshift+0x1c>
 80154c6:	2300      	movs	r3, #0
 80154c8:	f100 0114 	add.w	r1, r0, #20
 80154cc:	f100 0210 	add.w	r2, r0, #16
 80154d0:	4618      	mov	r0, r3
 80154d2:	4553      	cmp	r3, sl
 80154d4:	db33      	blt.n	801553e <__lshift+0xb6>
 80154d6:	6920      	ldr	r0, [r4, #16]
 80154d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80154dc:	f104 0314 	add.w	r3, r4, #20
 80154e0:	f019 091f 	ands.w	r9, r9, #31
 80154e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80154e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80154ec:	d02b      	beq.n	8015546 <__lshift+0xbe>
 80154ee:	f1c9 0e20 	rsb	lr, r9, #32
 80154f2:	468a      	mov	sl, r1
 80154f4:	2200      	movs	r2, #0
 80154f6:	6818      	ldr	r0, [r3, #0]
 80154f8:	fa00 f009 	lsl.w	r0, r0, r9
 80154fc:	4310      	orrs	r0, r2
 80154fe:	f84a 0b04 	str.w	r0, [sl], #4
 8015502:	f853 2b04 	ldr.w	r2, [r3], #4
 8015506:	459c      	cmp	ip, r3
 8015508:	fa22 f20e 	lsr.w	r2, r2, lr
 801550c:	d8f3      	bhi.n	80154f6 <__lshift+0x6e>
 801550e:	ebac 0304 	sub.w	r3, ip, r4
 8015512:	3b15      	subs	r3, #21
 8015514:	f023 0303 	bic.w	r3, r3, #3
 8015518:	3304      	adds	r3, #4
 801551a:	f104 0015 	add.w	r0, r4, #21
 801551e:	4584      	cmp	ip, r0
 8015520:	bf38      	it	cc
 8015522:	2304      	movcc	r3, #4
 8015524:	50ca      	str	r2, [r1, r3]
 8015526:	b10a      	cbz	r2, 801552c <__lshift+0xa4>
 8015528:	f108 0602 	add.w	r6, r8, #2
 801552c:	3e01      	subs	r6, #1
 801552e:	4638      	mov	r0, r7
 8015530:	612e      	str	r6, [r5, #16]
 8015532:	4621      	mov	r1, r4
 8015534:	f7ff fdda 	bl	80150ec <_Bfree>
 8015538:	4628      	mov	r0, r5
 801553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801553e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015542:	3301      	adds	r3, #1
 8015544:	e7c5      	b.n	80154d2 <__lshift+0x4a>
 8015546:	3904      	subs	r1, #4
 8015548:	f853 2b04 	ldr.w	r2, [r3], #4
 801554c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015550:	459c      	cmp	ip, r3
 8015552:	d8f9      	bhi.n	8015548 <__lshift+0xc0>
 8015554:	e7ea      	b.n	801552c <__lshift+0xa4>
 8015556:	bf00      	nop
 8015558:	08017830 	.word	0x08017830
 801555c:	08017841 	.word	0x08017841

08015560 <__mcmp>:
 8015560:	690a      	ldr	r2, [r1, #16]
 8015562:	4603      	mov	r3, r0
 8015564:	6900      	ldr	r0, [r0, #16]
 8015566:	1a80      	subs	r0, r0, r2
 8015568:	b530      	push	{r4, r5, lr}
 801556a:	d10e      	bne.n	801558a <__mcmp+0x2a>
 801556c:	3314      	adds	r3, #20
 801556e:	3114      	adds	r1, #20
 8015570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801557c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015580:	4295      	cmp	r5, r2
 8015582:	d003      	beq.n	801558c <__mcmp+0x2c>
 8015584:	d205      	bcs.n	8015592 <__mcmp+0x32>
 8015586:	f04f 30ff 	mov.w	r0, #4294967295
 801558a:	bd30      	pop	{r4, r5, pc}
 801558c:	42a3      	cmp	r3, r4
 801558e:	d3f3      	bcc.n	8015578 <__mcmp+0x18>
 8015590:	e7fb      	b.n	801558a <__mcmp+0x2a>
 8015592:	2001      	movs	r0, #1
 8015594:	e7f9      	b.n	801558a <__mcmp+0x2a>
	...

08015598 <__mdiff>:
 8015598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801559c:	4689      	mov	r9, r1
 801559e:	4606      	mov	r6, r0
 80155a0:	4611      	mov	r1, r2
 80155a2:	4648      	mov	r0, r9
 80155a4:	4614      	mov	r4, r2
 80155a6:	f7ff ffdb 	bl	8015560 <__mcmp>
 80155aa:	1e05      	subs	r5, r0, #0
 80155ac:	d112      	bne.n	80155d4 <__mdiff+0x3c>
 80155ae:	4629      	mov	r1, r5
 80155b0:	4630      	mov	r0, r6
 80155b2:	f7ff fd5b 	bl	801506c <_Balloc>
 80155b6:	4602      	mov	r2, r0
 80155b8:	b928      	cbnz	r0, 80155c6 <__mdiff+0x2e>
 80155ba:	4b3f      	ldr	r3, [pc, #252]	@ (80156b8 <__mdiff+0x120>)
 80155bc:	f240 2137 	movw	r1, #567	@ 0x237
 80155c0:	483e      	ldr	r0, [pc, #248]	@ (80156bc <__mdiff+0x124>)
 80155c2:	f000 faf3 	bl	8015bac <__assert_func>
 80155c6:	2301      	movs	r3, #1
 80155c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80155cc:	4610      	mov	r0, r2
 80155ce:	b003      	add	sp, #12
 80155d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155d4:	bfbc      	itt	lt
 80155d6:	464b      	movlt	r3, r9
 80155d8:	46a1      	movlt	r9, r4
 80155da:	4630      	mov	r0, r6
 80155dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80155e0:	bfba      	itte	lt
 80155e2:	461c      	movlt	r4, r3
 80155e4:	2501      	movlt	r5, #1
 80155e6:	2500      	movge	r5, #0
 80155e8:	f7ff fd40 	bl	801506c <_Balloc>
 80155ec:	4602      	mov	r2, r0
 80155ee:	b918      	cbnz	r0, 80155f8 <__mdiff+0x60>
 80155f0:	4b31      	ldr	r3, [pc, #196]	@ (80156b8 <__mdiff+0x120>)
 80155f2:	f240 2145 	movw	r1, #581	@ 0x245
 80155f6:	e7e3      	b.n	80155c0 <__mdiff+0x28>
 80155f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80155fc:	6926      	ldr	r6, [r4, #16]
 80155fe:	60c5      	str	r5, [r0, #12]
 8015600:	f109 0310 	add.w	r3, r9, #16
 8015604:	f109 0514 	add.w	r5, r9, #20
 8015608:	f104 0e14 	add.w	lr, r4, #20
 801560c:	f100 0b14 	add.w	fp, r0, #20
 8015610:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015614:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015618:	9301      	str	r3, [sp, #4]
 801561a:	46d9      	mov	r9, fp
 801561c:	f04f 0c00 	mov.w	ip, #0
 8015620:	9b01      	ldr	r3, [sp, #4]
 8015622:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015626:	f853 af04 	ldr.w	sl, [r3, #4]!
 801562a:	9301      	str	r3, [sp, #4]
 801562c:	fa1f f38a 	uxth.w	r3, sl
 8015630:	4619      	mov	r1, r3
 8015632:	b283      	uxth	r3, r0
 8015634:	1acb      	subs	r3, r1, r3
 8015636:	0c00      	lsrs	r0, r0, #16
 8015638:	4463      	add	r3, ip
 801563a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801563e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015642:	b29b      	uxth	r3, r3
 8015644:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015648:	4576      	cmp	r6, lr
 801564a:	f849 3b04 	str.w	r3, [r9], #4
 801564e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015652:	d8e5      	bhi.n	8015620 <__mdiff+0x88>
 8015654:	1b33      	subs	r3, r6, r4
 8015656:	3b15      	subs	r3, #21
 8015658:	f023 0303 	bic.w	r3, r3, #3
 801565c:	3415      	adds	r4, #21
 801565e:	3304      	adds	r3, #4
 8015660:	42a6      	cmp	r6, r4
 8015662:	bf38      	it	cc
 8015664:	2304      	movcc	r3, #4
 8015666:	441d      	add	r5, r3
 8015668:	445b      	add	r3, fp
 801566a:	461e      	mov	r6, r3
 801566c:	462c      	mov	r4, r5
 801566e:	4544      	cmp	r4, r8
 8015670:	d30e      	bcc.n	8015690 <__mdiff+0xf8>
 8015672:	f108 0103 	add.w	r1, r8, #3
 8015676:	1b49      	subs	r1, r1, r5
 8015678:	f021 0103 	bic.w	r1, r1, #3
 801567c:	3d03      	subs	r5, #3
 801567e:	45a8      	cmp	r8, r5
 8015680:	bf38      	it	cc
 8015682:	2100      	movcc	r1, #0
 8015684:	440b      	add	r3, r1
 8015686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801568a:	b191      	cbz	r1, 80156b2 <__mdiff+0x11a>
 801568c:	6117      	str	r7, [r2, #16]
 801568e:	e79d      	b.n	80155cc <__mdiff+0x34>
 8015690:	f854 1b04 	ldr.w	r1, [r4], #4
 8015694:	46e6      	mov	lr, ip
 8015696:	0c08      	lsrs	r0, r1, #16
 8015698:	fa1c fc81 	uxtah	ip, ip, r1
 801569c:	4471      	add	r1, lr
 801569e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80156a2:	b289      	uxth	r1, r1
 80156a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80156a8:	f846 1b04 	str.w	r1, [r6], #4
 80156ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80156b0:	e7dd      	b.n	801566e <__mdiff+0xd6>
 80156b2:	3f01      	subs	r7, #1
 80156b4:	e7e7      	b.n	8015686 <__mdiff+0xee>
 80156b6:	bf00      	nop
 80156b8:	08017830 	.word	0x08017830
 80156bc:	08017841 	.word	0x08017841

080156c0 <__d2b>:
 80156c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80156c4:	460f      	mov	r7, r1
 80156c6:	2101      	movs	r1, #1
 80156c8:	ec59 8b10 	vmov	r8, r9, d0
 80156cc:	4616      	mov	r6, r2
 80156ce:	f7ff fccd 	bl	801506c <_Balloc>
 80156d2:	4604      	mov	r4, r0
 80156d4:	b930      	cbnz	r0, 80156e4 <__d2b+0x24>
 80156d6:	4602      	mov	r2, r0
 80156d8:	4b23      	ldr	r3, [pc, #140]	@ (8015768 <__d2b+0xa8>)
 80156da:	4824      	ldr	r0, [pc, #144]	@ (801576c <__d2b+0xac>)
 80156dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80156e0:	f000 fa64 	bl	8015bac <__assert_func>
 80156e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80156e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80156ec:	b10d      	cbz	r5, 80156f2 <__d2b+0x32>
 80156ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80156f2:	9301      	str	r3, [sp, #4]
 80156f4:	f1b8 0300 	subs.w	r3, r8, #0
 80156f8:	d023      	beq.n	8015742 <__d2b+0x82>
 80156fa:	4668      	mov	r0, sp
 80156fc:	9300      	str	r3, [sp, #0]
 80156fe:	f7ff fd7c 	bl	80151fa <__lo0bits>
 8015702:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015706:	b1d0      	cbz	r0, 801573e <__d2b+0x7e>
 8015708:	f1c0 0320 	rsb	r3, r0, #32
 801570c:	fa02 f303 	lsl.w	r3, r2, r3
 8015710:	430b      	orrs	r3, r1
 8015712:	40c2      	lsrs	r2, r0
 8015714:	6163      	str	r3, [r4, #20]
 8015716:	9201      	str	r2, [sp, #4]
 8015718:	9b01      	ldr	r3, [sp, #4]
 801571a:	61a3      	str	r3, [r4, #24]
 801571c:	2b00      	cmp	r3, #0
 801571e:	bf0c      	ite	eq
 8015720:	2201      	moveq	r2, #1
 8015722:	2202      	movne	r2, #2
 8015724:	6122      	str	r2, [r4, #16]
 8015726:	b1a5      	cbz	r5, 8015752 <__d2b+0x92>
 8015728:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801572c:	4405      	add	r5, r0
 801572e:	603d      	str	r5, [r7, #0]
 8015730:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015734:	6030      	str	r0, [r6, #0]
 8015736:	4620      	mov	r0, r4
 8015738:	b003      	add	sp, #12
 801573a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801573e:	6161      	str	r1, [r4, #20]
 8015740:	e7ea      	b.n	8015718 <__d2b+0x58>
 8015742:	a801      	add	r0, sp, #4
 8015744:	f7ff fd59 	bl	80151fa <__lo0bits>
 8015748:	9b01      	ldr	r3, [sp, #4]
 801574a:	6163      	str	r3, [r4, #20]
 801574c:	3020      	adds	r0, #32
 801574e:	2201      	movs	r2, #1
 8015750:	e7e8      	b.n	8015724 <__d2b+0x64>
 8015752:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015756:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801575a:	6038      	str	r0, [r7, #0]
 801575c:	6918      	ldr	r0, [r3, #16]
 801575e:	f7ff fd2d 	bl	80151bc <__hi0bits>
 8015762:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015766:	e7e5      	b.n	8015734 <__d2b+0x74>
 8015768:	08017830 	.word	0x08017830
 801576c:	08017841 	.word	0x08017841

08015770 <__ssputs_r>:
 8015770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015774:	688e      	ldr	r6, [r1, #8]
 8015776:	461f      	mov	r7, r3
 8015778:	42be      	cmp	r6, r7
 801577a:	680b      	ldr	r3, [r1, #0]
 801577c:	4682      	mov	sl, r0
 801577e:	460c      	mov	r4, r1
 8015780:	4690      	mov	r8, r2
 8015782:	d82d      	bhi.n	80157e0 <__ssputs_r+0x70>
 8015784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015788:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801578c:	d026      	beq.n	80157dc <__ssputs_r+0x6c>
 801578e:	6965      	ldr	r5, [r4, #20]
 8015790:	6909      	ldr	r1, [r1, #16]
 8015792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015796:	eba3 0901 	sub.w	r9, r3, r1
 801579a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801579e:	1c7b      	adds	r3, r7, #1
 80157a0:	444b      	add	r3, r9
 80157a2:	106d      	asrs	r5, r5, #1
 80157a4:	429d      	cmp	r5, r3
 80157a6:	bf38      	it	cc
 80157a8:	461d      	movcc	r5, r3
 80157aa:	0553      	lsls	r3, r2, #21
 80157ac:	d527      	bpl.n	80157fe <__ssputs_r+0x8e>
 80157ae:	4629      	mov	r1, r5
 80157b0:	f7fd fecc 	bl	801354c <_malloc_r>
 80157b4:	4606      	mov	r6, r0
 80157b6:	b360      	cbz	r0, 8015812 <__ssputs_r+0xa2>
 80157b8:	6921      	ldr	r1, [r4, #16]
 80157ba:	464a      	mov	r2, r9
 80157bc:	f7fe fdb1 	bl	8014322 <memcpy>
 80157c0:	89a3      	ldrh	r3, [r4, #12]
 80157c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80157c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80157ca:	81a3      	strh	r3, [r4, #12]
 80157cc:	6126      	str	r6, [r4, #16]
 80157ce:	6165      	str	r5, [r4, #20]
 80157d0:	444e      	add	r6, r9
 80157d2:	eba5 0509 	sub.w	r5, r5, r9
 80157d6:	6026      	str	r6, [r4, #0]
 80157d8:	60a5      	str	r5, [r4, #8]
 80157da:	463e      	mov	r6, r7
 80157dc:	42be      	cmp	r6, r7
 80157de:	d900      	bls.n	80157e2 <__ssputs_r+0x72>
 80157e0:	463e      	mov	r6, r7
 80157e2:	6820      	ldr	r0, [r4, #0]
 80157e4:	4632      	mov	r2, r6
 80157e6:	4641      	mov	r1, r8
 80157e8:	f000 f9c6 	bl	8015b78 <memmove>
 80157ec:	68a3      	ldr	r3, [r4, #8]
 80157ee:	1b9b      	subs	r3, r3, r6
 80157f0:	60a3      	str	r3, [r4, #8]
 80157f2:	6823      	ldr	r3, [r4, #0]
 80157f4:	4433      	add	r3, r6
 80157f6:	6023      	str	r3, [r4, #0]
 80157f8:	2000      	movs	r0, #0
 80157fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157fe:	462a      	mov	r2, r5
 8015800:	f000 fa18 	bl	8015c34 <_realloc_r>
 8015804:	4606      	mov	r6, r0
 8015806:	2800      	cmp	r0, #0
 8015808:	d1e0      	bne.n	80157cc <__ssputs_r+0x5c>
 801580a:	6921      	ldr	r1, [r4, #16]
 801580c:	4650      	mov	r0, sl
 801580e:	f7ff fbe3 	bl	8014fd8 <_free_r>
 8015812:	230c      	movs	r3, #12
 8015814:	f8ca 3000 	str.w	r3, [sl]
 8015818:	89a3      	ldrh	r3, [r4, #12]
 801581a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801581e:	81a3      	strh	r3, [r4, #12]
 8015820:	f04f 30ff 	mov.w	r0, #4294967295
 8015824:	e7e9      	b.n	80157fa <__ssputs_r+0x8a>
	...

08015828 <_svfiprintf_r>:
 8015828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801582c:	4698      	mov	r8, r3
 801582e:	898b      	ldrh	r3, [r1, #12]
 8015830:	061b      	lsls	r3, r3, #24
 8015832:	b09d      	sub	sp, #116	@ 0x74
 8015834:	4607      	mov	r7, r0
 8015836:	460d      	mov	r5, r1
 8015838:	4614      	mov	r4, r2
 801583a:	d510      	bpl.n	801585e <_svfiprintf_r+0x36>
 801583c:	690b      	ldr	r3, [r1, #16]
 801583e:	b973      	cbnz	r3, 801585e <_svfiprintf_r+0x36>
 8015840:	2140      	movs	r1, #64	@ 0x40
 8015842:	f7fd fe83 	bl	801354c <_malloc_r>
 8015846:	6028      	str	r0, [r5, #0]
 8015848:	6128      	str	r0, [r5, #16]
 801584a:	b930      	cbnz	r0, 801585a <_svfiprintf_r+0x32>
 801584c:	230c      	movs	r3, #12
 801584e:	603b      	str	r3, [r7, #0]
 8015850:	f04f 30ff 	mov.w	r0, #4294967295
 8015854:	b01d      	add	sp, #116	@ 0x74
 8015856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801585a:	2340      	movs	r3, #64	@ 0x40
 801585c:	616b      	str	r3, [r5, #20]
 801585e:	2300      	movs	r3, #0
 8015860:	9309      	str	r3, [sp, #36]	@ 0x24
 8015862:	2320      	movs	r3, #32
 8015864:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015868:	f8cd 800c 	str.w	r8, [sp, #12]
 801586c:	2330      	movs	r3, #48	@ 0x30
 801586e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015a0c <_svfiprintf_r+0x1e4>
 8015872:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015876:	f04f 0901 	mov.w	r9, #1
 801587a:	4623      	mov	r3, r4
 801587c:	469a      	mov	sl, r3
 801587e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015882:	b10a      	cbz	r2, 8015888 <_svfiprintf_r+0x60>
 8015884:	2a25      	cmp	r2, #37	@ 0x25
 8015886:	d1f9      	bne.n	801587c <_svfiprintf_r+0x54>
 8015888:	ebba 0b04 	subs.w	fp, sl, r4
 801588c:	d00b      	beq.n	80158a6 <_svfiprintf_r+0x7e>
 801588e:	465b      	mov	r3, fp
 8015890:	4622      	mov	r2, r4
 8015892:	4629      	mov	r1, r5
 8015894:	4638      	mov	r0, r7
 8015896:	f7ff ff6b 	bl	8015770 <__ssputs_r>
 801589a:	3001      	adds	r0, #1
 801589c:	f000 80a7 	beq.w	80159ee <_svfiprintf_r+0x1c6>
 80158a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80158a2:	445a      	add	r2, fp
 80158a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80158a6:	f89a 3000 	ldrb.w	r3, [sl]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	f000 809f 	beq.w	80159ee <_svfiprintf_r+0x1c6>
 80158b0:	2300      	movs	r3, #0
 80158b2:	f04f 32ff 	mov.w	r2, #4294967295
 80158b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158ba:	f10a 0a01 	add.w	sl, sl, #1
 80158be:	9304      	str	r3, [sp, #16]
 80158c0:	9307      	str	r3, [sp, #28]
 80158c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80158c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80158c8:	4654      	mov	r4, sl
 80158ca:	2205      	movs	r2, #5
 80158cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158d0:	484e      	ldr	r0, [pc, #312]	@ (8015a0c <_svfiprintf_r+0x1e4>)
 80158d2:	f7ea fcad 	bl	8000230 <memchr>
 80158d6:	9a04      	ldr	r2, [sp, #16]
 80158d8:	b9d8      	cbnz	r0, 8015912 <_svfiprintf_r+0xea>
 80158da:	06d0      	lsls	r0, r2, #27
 80158dc:	bf44      	itt	mi
 80158de:	2320      	movmi	r3, #32
 80158e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158e4:	0711      	lsls	r1, r2, #28
 80158e6:	bf44      	itt	mi
 80158e8:	232b      	movmi	r3, #43	@ 0x2b
 80158ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158ee:	f89a 3000 	ldrb.w	r3, [sl]
 80158f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80158f4:	d015      	beq.n	8015922 <_svfiprintf_r+0xfa>
 80158f6:	9a07      	ldr	r2, [sp, #28]
 80158f8:	4654      	mov	r4, sl
 80158fa:	2000      	movs	r0, #0
 80158fc:	f04f 0c0a 	mov.w	ip, #10
 8015900:	4621      	mov	r1, r4
 8015902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015906:	3b30      	subs	r3, #48	@ 0x30
 8015908:	2b09      	cmp	r3, #9
 801590a:	d94b      	bls.n	80159a4 <_svfiprintf_r+0x17c>
 801590c:	b1b0      	cbz	r0, 801593c <_svfiprintf_r+0x114>
 801590e:	9207      	str	r2, [sp, #28]
 8015910:	e014      	b.n	801593c <_svfiprintf_r+0x114>
 8015912:	eba0 0308 	sub.w	r3, r0, r8
 8015916:	fa09 f303 	lsl.w	r3, r9, r3
 801591a:	4313      	orrs	r3, r2
 801591c:	9304      	str	r3, [sp, #16]
 801591e:	46a2      	mov	sl, r4
 8015920:	e7d2      	b.n	80158c8 <_svfiprintf_r+0xa0>
 8015922:	9b03      	ldr	r3, [sp, #12]
 8015924:	1d19      	adds	r1, r3, #4
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	9103      	str	r1, [sp, #12]
 801592a:	2b00      	cmp	r3, #0
 801592c:	bfbb      	ittet	lt
 801592e:	425b      	neglt	r3, r3
 8015930:	f042 0202 	orrlt.w	r2, r2, #2
 8015934:	9307      	strge	r3, [sp, #28]
 8015936:	9307      	strlt	r3, [sp, #28]
 8015938:	bfb8      	it	lt
 801593a:	9204      	strlt	r2, [sp, #16]
 801593c:	7823      	ldrb	r3, [r4, #0]
 801593e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015940:	d10a      	bne.n	8015958 <_svfiprintf_r+0x130>
 8015942:	7863      	ldrb	r3, [r4, #1]
 8015944:	2b2a      	cmp	r3, #42	@ 0x2a
 8015946:	d132      	bne.n	80159ae <_svfiprintf_r+0x186>
 8015948:	9b03      	ldr	r3, [sp, #12]
 801594a:	1d1a      	adds	r2, r3, #4
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	9203      	str	r2, [sp, #12]
 8015950:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015954:	3402      	adds	r4, #2
 8015956:	9305      	str	r3, [sp, #20]
 8015958:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015a1c <_svfiprintf_r+0x1f4>
 801595c:	7821      	ldrb	r1, [r4, #0]
 801595e:	2203      	movs	r2, #3
 8015960:	4650      	mov	r0, sl
 8015962:	f7ea fc65 	bl	8000230 <memchr>
 8015966:	b138      	cbz	r0, 8015978 <_svfiprintf_r+0x150>
 8015968:	9b04      	ldr	r3, [sp, #16]
 801596a:	eba0 000a 	sub.w	r0, r0, sl
 801596e:	2240      	movs	r2, #64	@ 0x40
 8015970:	4082      	lsls	r2, r0
 8015972:	4313      	orrs	r3, r2
 8015974:	3401      	adds	r4, #1
 8015976:	9304      	str	r3, [sp, #16]
 8015978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801597c:	4824      	ldr	r0, [pc, #144]	@ (8015a10 <_svfiprintf_r+0x1e8>)
 801597e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015982:	2206      	movs	r2, #6
 8015984:	f7ea fc54 	bl	8000230 <memchr>
 8015988:	2800      	cmp	r0, #0
 801598a:	d036      	beq.n	80159fa <_svfiprintf_r+0x1d2>
 801598c:	4b21      	ldr	r3, [pc, #132]	@ (8015a14 <_svfiprintf_r+0x1ec>)
 801598e:	bb1b      	cbnz	r3, 80159d8 <_svfiprintf_r+0x1b0>
 8015990:	9b03      	ldr	r3, [sp, #12]
 8015992:	3307      	adds	r3, #7
 8015994:	f023 0307 	bic.w	r3, r3, #7
 8015998:	3308      	adds	r3, #8
 801599a:	9303      	str	r3, [sp, #12]
 801599c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801599e:	4433      	add	r3, r6
 80159a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80159a2:	e76a      	b.n	801587a <_svfiprintf_r+0x52>
 80159a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80159a8:	460c      	mov	r4, r1
 80159aa:	2001      	movs	r0, #1
 80159ac:	e7a8      	b.n	8015900 <_svfiprintf_r+0xd8>
 80159ae:	2300      	movs	r3, #0
 80159b0:	3401      	adds	r4, #1
 80159b2:	9305      	str	r3, [sp, #20]
 80159b4:	4619      	mov	r1, r3
 80159b6:	f04f 0c0a 	mov.w	ip, #10
 80159ba:	4620      	mov	r0, r4
 80159bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159c0:	3a30      	subs	r2, #48	@ 0x30
 80159c2:	2a09      	cmp	r2, #9
 80159c4:	d903      	bls.n	80159ce <_svfiprintf_r+0x1a6>
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d0c6      	beq.n	8015958 <_svfiprintf_r+0x130>
 80159ca:	9105      	str	r1, [sp, #20]
 80159cc:	e7c4      	b.n	8015958 <_svfiprintf_r+0x130>
 80159ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80159d2:	4604      	mov	r4, r0
 80159d4:	2301      	movs	r3, #1
 80159d6:	e7f0      	b.n	80159ba <_svfiprintf_r+0x192>
 80159d8:	ab03      	add	r3, sp, #12
 80159da:	9300      	str	r3, [sp, #0]
 80159dc:	462a      	mov	r2, r5
 80159de:	4b0e      	ldr	r3, [pc, #56]	@ (8015a18 <_svfiprintf_r+0x1f0>)
 80159e0:	a904      	add	r1, sp, #16
 80159e2:	4638      	mov	r0, r7
 80159e4:	f7fd feec 	bl	80137c0 <_printf_float>
 80159e8:	1c42      	adds	r2, r0, #1
 80159ea:	4606      	mov	r6, r0
 80159ec:	d1d6      	bne.n	801599c <_svfiprintf_r+0x174>
 80159ee:	89ab      	ldrh	r3, [r5, #12]
 80159f0:	065b      	lsls	r3, r3, #25
 80159f2:	f53f af2d 	bmi.w	8015850 <_svfiprintf_r+0x28>
 80159f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80159f8:	e72c      	b.n	8015854 <_svfiprintf_r+0x2c>
 80159fa:	ab03      	add	r3, sp, #12
 80159fc:	9300      	str	r3, [sp, #0]
 80159fe:	462a      	mov	r2, r5
 8015a00:	4b05      	ldr	r3, [pc, #20]	@ (8015a18 <_svfiprintf_r+0x1f0>)
 8015a02:	a904      	add	r1, sp, #16
 8015a04:	4638      	mov	r0, r7
 8015a06:	f7fe f973 	bl	8013cf0 <_printf_i>
 8015a0a:	e7ed      	b.n	80159e8 <_svfiprintf_r+0x1c0>
 8015a0c:	08017998 	.word	0x08017998
 8015a10:	080179a2 	.word	0x080179a2
 8015a14:	080137c1 	.word	0x080137c1
 8015a18:	08015771 	.word	0x08015771
 8015a1c:	0801799e 	.word	0x0801799e

08015a20 <__sflush_r>:
 8015a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a28:	0716      	lsls	r6, r2, #28
 8015a2a:	4605      	mov	r5, r0
 8015a2c:	460c      	mov	r4, r1
 8015a2e:	d454      	bmi.n	8015ada <__sflush_r+0xba>
 8015a30:	684b      	ldr	r3, [r1, #4]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	dc02      	bgt.n	8015a3c <__sflush_r+0x1c>
 8015a36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	dd48      	ble.n	8015ace <__sflush_r+0xae>
 8015a3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015a3e:	2e00      	cmp	r6, #0
 8015a40:	d045      	beq.n	8015ace <__sflush_r+0xae>
 8015a42:	2300      	movs	r3, #0
 8015a44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015a48:	682f      	ldr	r7, [r5, #0]
 8015a4a:	6a21      	ldr	r1, [r4, #32]
 8015a4c:	602b      	str	r3, [r5, #0]
 8015a4e:	d030      	beq.n	8015ab2 <__sflush_r+0x92>
 8015a50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015a52:	89a3      	ldrh	r3, [r4, #12]
 8015a54:	0759      	lsls	r1, r3, #29
 8015a56:	d505      	bpl.n	8015a64 <__sflush_r+0x44>
 8015a58:	6863      	ldr	r3, [r4, #4]
 8015a5a:	1ad2      	subs	r2, r2, r3
 8015a5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015a5e:	b10b      	cbz	r3, 8015a64 <__sflush_r+0x44>
 8015a60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015a62:	1ad2      	subs	r2, r2, r3
 8015a64:	2300      	movs	r3, #0
 8015a66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015a68:	6a21      	ldr	r1, [r4, #32]
 8015a6a:	4628      	mov	r0, r5
 8015a6c:	47b0      	blx	r6
 8015a6e:	1c43      	adds	r3, r0, #1
 8015a70:	89a3      	ldrh	r3, [r4, #12]
 8015a72:	d106      	bne.n	8015a82 <__sflush_r+0x62>
 8015a74:	6829      	ldr	r1, [r5, #0]
 8015a76:	291d      	cmp	r1, #29
 8015a78:	d82b      	bhi.n	8015ad2 <__sflush_r+0xb2>
 8015a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8015b24 <__sflush_r+0x104>)
 8015a7c:	410a      	asrs	r2, r1
 8015a7e:	07d6      	lsls	r6, r2, #31
 8015a80:	d427      	bmi.n	8015ad2 <__sflush_r+0xb2>
 8015a82:	2200      	movs	r2, #0
 8015a84:	6062      	str	r2, [r4, #4]
 8015a86:	04d9      	lsls	r1, r3, #19
 8015a88:	6922      	ldr	r2, [r4, #16]
 8015a8a:	6022      	str	r2, [r4, #0]
 8015a8c:	d504      	bpl.n	8015a98 <__sflush_r+0x78>
 8015a8e:	1c42      	adds	r2, r0, #1
 8015a90:	d101      	bne.n	8015a96 <__sflush_r+0x76>
 8015a92:	682b      	ldr	r3, [r5, #0]
 8015a94:	b903      	cbnz	r3, 8015a98 <__sflush_r+0x78>
 8015a96:	6560      	str	r0, [r4, #84]	@ 0x54
 8015a98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a9a:	602f      	str	r7, [r5, #0]
 8015a9c:	b1b9      	cbz	r1, 8015ace <__sflush_r+0xae>
 8015a9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015aa2:	4299      	cmp	r1, r3
 8015aa4:	d002      	beq.n	8015aac <__sflush_r+0x8c>
 8015aa6:	4628      	mov	r0, r5
 8015aa8:	f7ff fa96 	bl	8014fd8 <_free_r>
 8015aac:	2300      	movs	r3, #0
 8015aae:	6363      	str	r3, [r4, #52]	@ 0x34
 8015ab0:	e00d      	b.n	8015ace <__sflush_r+0xae>
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	4628      	mov	r0, r5
 8015ab6:	47b0      	blx	r6
 8015ab8:	4602      	mov	r2, r0
 8015aba:	1c50      	adds	r0, r2, #1
 8015abc:	d1c9      	bne.n	8015a52 <__sflush_r+0x32>
 8015abe:	682b      	ldr	r3, [r5, #0]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d0c6      	beq.n	8015a52 <__sflush_r+0x32>
 8015ac4:	2b1d      	cmp	r3, #29
 8015ac6:	d001      	beq.n	8015acc <__sflush_r+0xac>
 8015ac8:	2b16      	cmp	r3, #22
 8015aca:	d11e      	bne.n	8015b0a <__sflush_r+0xea>
 8015acc:	602f      	str	r7, [r5, #0]
 8015ace:	2000      	movs	r0, #0
 8015ad0:	e022      	b.n	8015b18 <__sflush_r+0xf8>
 8015ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ad6:	b21b      	sxth	r3, r3
 8015ad8:	e01b      	b.n	8015b12 <__sflush_r+0xf2>
 8015ada:	690f      	ldr	r7, [r1, #16]
 8015adc:	2f00      	cmp	r7, #0
 8015ade:	d0f6      	beq.n	8015ace <__sflush_r+0xae>
 8015ae0:	0793      	lsls	r3, r2, #30
 8015ae2:	680e      	ldr	r6, [r1, #0]
 8015ae4:	bf08      	it	eq
 8015ae6:	694b      	ldreq	r3, [r1, #20]
 8015ae8:	600f      	str	r7, [r1, #0]
 8015aea:	bf18      	it	ne
 8015aec:	2300      	movne	r3, #0
 8015aee:	eba6 0807 	sub.w	r8, r6, r7
 8015af2:	608b      	str	r3, [r1, #8]
 8015af4:	f1b8 0f00 	cmp.w	r8, #0
 8015af8:	dde9      	ble.n	8015ace <__sflush_r+0xae>
 8015afa:	6a21      	ldr	r1, [r4, #32]
 8015afc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015afe:	4643      	mov	r3, r8
 8015b00:	463a      	mov	r2, r7
 8015b02:	4628      	mov	r0, r5
 8015b04:	47b0      	blx	r6
 8015b06:	2800      	cmp	r0, #0
 8015b08:	dc08      	bgt.n	8015b1c <__sflush_r+0xfc>
 8015b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b12:	81a3      	strh	r3, [r4, #12]
 8015b14:	f04f 30ff 	mov.w	r0, #4294967295
 8015b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b1c:	4407      	add	r7, r0
 8015b1e:	eba8 0800 	sub.w	r8, r8, r0
 8015b22:	e7e7      	b.n	8015af4 <__sflush_r+0xd4>
 8015b24:	dfbffffe 	.word	0xdfbffffe

08015b28 <_fflush_r>:
 8015b28:	b538      	push	{r3, r4, r5, lr}
 8015b2a:	690b      	ldr	r3, [r1, #16]
 8015b2c:	4605      	mov	r5, r0
 8015b2e:	460c      	mov	r4, r1
 8015b30:	b913      	cbnz	r3, 8015b38 <_fflush_r+0x10>
 8015b32:	2500      	movs	r5, #0
 8015b34:	4628      	mov	r0, r5
 8015b36:	bd38      	pop	{r3, r4, r5, pc}
 8015b38:	b118      	cbz	r0, 8015b42 <_fflush_r+0x1a>
 8015b3a:	6a03      	ldr	r3, [r0, #32]
 8015b3c:	b90b      	cbnz	r3, 8015b42 <_fflush_r+0x1a>
 8015b3e:	f7fe fa83 	bl	8014048 <__sinit>
 8015b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d0f3      	beq.n	8015b32 <_fflush_r+0xa>
 8015b4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015b4c:	07d0      	lsls	r0, r2, #31
 8015b4e:	d404      	bmi.n	8015b5a <_fflush_r+0x32>
 8015b50:	0599      	lsls	r1, r3, #22
 8015b52:	d402      	bmi.n	8015b5a <_fflush_r+0x32>
 8015b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b56:	f7fe fbe2 	bl	801431e <__retarget_lock_acquire_recursive>
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	4621      	mov	r1, r4
 8015b5e:	f7ff ff5f 	bl	8015a20 <__sflush_r>
 8015b62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b64:	07da      	lsls	r2, r3, #31
 8015b66:	4605      	mov	r5, r0
 8015b68:	d4e4      	bmi.n	8015b34 <_fflush_r+0xc>
 8015b6a:	89a3      	ldrh	r3, [r4, #12]
 8015b6c:	059b      	lsls	r3, r3, #22
 8015b6e:	d4e1      	bmi.n	8015b34 <_fflush_r+0xc>
 8015b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b72:	f7fe fbd5 	bl	8014320 <__retarget_lock_release_recursive>
 8015b76:	e7dd      	b.n	8015b34 <_fflush_r+0xc>

08015b78 <memmove>:
 8015b78:	4288      	cmp	r0, r1
 8015b7a:	b510      	push	{r4, lr}
 8015b7c:	eb01 0402 	add.w	r4, r1, r2
 8015b80:	d902      	bls.n	8015b88 <memmove+0x10>
 8015b82:	4284      	cmp	r4, r0
 8015b84:	4623      	mov	r3, r4
 8015b86:	d807      	bhi.n	8015b98 <memmove+0x20>
 8015b88:	1e43      	subs	r3, r0, #1
 8015b8a:	42a1      	cmp	r1, r4
 8015b8c:	d008      	beq.n	8015ba0 <memmove+0x28>
 8015b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015b96:	e7f8      	b.n	8015b8a <memmove+0x12>
 8015b98:	4402      	add	r2, r0
 8015b9a:	4601      	mov	r1, r0
 8015b9c:	428a      	cmp	r2, r1
 8015b9e:	d100      	bne.n	8015ba2 <memmove+0x2a>
 8015ba0:	bd10      	pop	{r4, pc}
 8015ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015baa:	e7f7      	b.n	8015b9c <memmove+0x24>

08015bac <__assert_func>:
 8015bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015bae:	4614      	mov	r4, r2
 8015bb0:	461a      	mov	r2, r3
 8015bb2:	4b09      	ldr	r3, [pc, #36]	@ (8015bd8 <__assert_func+0x2c>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	4605      	mov	r5, r0
 8015bb8:	68d8      	ldr	r0, [r3, #12]
 8015bba:	b954      	cbnz	r4, 8015bd2 <__assert_func+0x26>
 8015bbc:	4b07      	ldr	r3, [pc, #28]	@ (8015bdc <__assert_func+0x30>)
 8015bbe:	461c      	mov	r4, r3
 8015bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015bc4:	9100      	str	r1, [sp, #0]
 8015bc6:	462b      	mov	r3, r5
 8015bc8:	4905      	ldr	r1, [pc, #20]	@ (8015be0 <__assert_func+0x34>)
 8015bca:	f000 f86f 	bl	8015cac <fiprintf>
 8015bce:	f7fd fc83 	bl	80134d8 <abort>
 8015bd2:	4b04      	ldr	r3, [pc, #16]	@ (8015be4 <__assert_func+0x38>)
 8015bd4:	e7f4      	b.n	8015bc0 <__assert_func+0x14>
 8015bd6:	bf00      	nop
 8015bd8:	20000044 	.word	0x20000044
 8015bdc:	080179ee 	.word	0x080179ee
 8015be0:	080179c0 	.word	0x080179c0
 8015be4:	080179b3 	.word	0x080179b3

08015be8 <_calloc_r>:
 8015be8:	b570      	push	{r4, r5, r6, lr}
 8015bea:	fba1 5402 	umull	r5, r4, r1, r2
 8015bee:	b93c      	cbnz	r4, 8015c00 <_calloc_r+0x18>
 8015bf0:	4629      	mov	r1, r5
 8015bf2:	f7fd fcab 	bl	801354c <_malloc_r>
 8015bf6:	4606      	mov	r6, r0
 8015bf8:	b928      	cbnz	r0, 8015c06 <_calloc_r+0x1e>
 8015bfa:	2600      	movs	r6, #0
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	220c      	movs	r2, #12
 8015c02:	6002      	str	r2, [r0, #0]
 8015c04:	e7f9      	b.n	8015bfa <_calloc_r+0x12>
 8015c06:	462a      	mov	r2, r5
 8015c08:	4621      	mov	r1, r4
 8015c0a:	f7fe fab6 	bl	801417a <memset>
 8015c0e:	e7f5      	b.n	8015bfc <_calloc_r+0x14>

08015c10 <__ascii_mbtowc>:
 8015c10:	b082      	sub	sp, #8
 8015c12:	b901      	cbnz	r1, 8015c16 <__ascii_mbtowc+0x6>
 8015c14:	a901      	add	r1, sp, #4
 8015c16:	b142      	cbz	r2, 8015c2a <__ascii_mbtowc+0x1a>
 8015c18:	b14b      	cbz	r3, 8015c2e <__ascii_mbtowc+0x1e>
 8015c1a:	7813      	ldrb	r3, [r2, #0]
 8015c1c:	600b      	str	r3, [r1, #0]
 8015c1e:	7812      	ldrb	r2, [r2, #0]
 8015c20:	1e10      	subs	r0, r2, #0
 8015c22:	bf18      	it	ne
 8015c24:	2001      	movne	r0, #1
 8015c26:	b002      	add	sp, #8
 8015c28:	4770      	bx	lr
 8015c2a:	4610      	mov	r0, r2
 8015c2c:	e7fb      	b.n	8015c26 <__ascii_mbtowc+0x16>
 8015c2e:	f06f 0001 	mvn.w	r0, #1
 8015c32:	e7f8      	b.n	8015c26 <__ascii_mbtowc+0x16>

08015c34 <_realloc_r>:
 8015c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c38:	4680      	mov	r8, r0
 8015c3a:	4615      	mov	r5, r2
 8015c3c:	460c      	mov	r4, r1
 8015c3e:	b921      	cbnz	r1, 8015c4a <_realloc_r+0x16>
 8015c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c44:	4611      	mov	r1, r2
 8015c46:	f7fd bc81 	b.w	801354c <_malloc_r>
 8015c4a:	b92a      	cbnz	r2, 8015c58 <_realloc_r+0x24>
 8015c4c:	f7ff f9c4 	bl	8014fd8 <_free_r>
 8015c50:	2400      	movs	r4, #0
 8015c52:	4620      	mov	r0, r4
 8015c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c58:	f000 f83a 	bl	8015cd0 <_malloc_usable_size_r>
 8015c5c:	4285      	cmp	r5, r0
 8015c5e:	4606      	mov	r6, r0
 8015c60:	d802      	bhi.n	8015c68 <_realloc_r+0x34>
 8015c62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015c66:	d8f4      	bhi.n	8015c52 <_realloc_r+0x1e>
 8015c68:	4629      	mov	r1, r5
 8015c6a:	4640      	mov	r0, r8
 8015c6c:	f7fd fc6e 	bl	801354c <_malloc_r>
 8015c70:	4607      	mov	r7, r0
 8015c72:	2800      	cmp	r0, #0
 8015c74:	d0ec      	beq.n	8015c50 <_realloc_r+0x1c>
 8015c76:	42b5      	cmp	r5, r6
 8015c78:	462a      	mov	r2, r5
 8015c7a:	4621      	mov	r1, r4
 8015c7c:	bf28      	it	cs
 8015c7e:	4632      	movcs	r2, r6
 8015c80:	f7fe fb4f 	bl	8014322 <memcpy>
 8015c84:	4621      	mov	r1, r4
 8015c86:	4640      	mov	r0, r8
 8015c88:	f7ff f9a6 	bl	8014fd8 <_free_r>
 8015c8c:	463c      	mov	r4, r7
 8015c8e:	e7e0      	b.n	8015c52 <_realloc_r+0x1e>

08015c90 <__ascii_wctomb>:
 8015c90:	4603      	mov	r3, r0
 8015c92:	4608      	mov	r0, r1
 8015c94:	b141      	cbz	r1, 8015ca8 <__ascii_wctomb+0x18>
 8015c96:	2aff      	cmp	r2, #255	@ 0xff
 8015c98:	d904      	bls.n	8015ca4 <__ascii_wctomb+0x14>
 8015c9a:	228a      	movs	r2, #138	@ 0x8a
 8015c9c:	601a      	str	r2, [r3, #0]
 8015c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8015ca2:	4770      	bx	lr
 8015ca4:	700a      	strb	r2, [r1, #0]
 8015ca6:	2001      	movs	r0, #1
 8015ca8:	4770      	bx	lr
	...

08015cac <fiprintf>:
 8015cac:	b40e      	push	{r1, r2, r3}
 8015cae:	b503      	push	{r0, r1, lr}
 8015cb0:	4601      	mov	r1, r0
 8015cb2:	ab03      	add	r3, sp, #12
 8015cb4:	4805      	ldr	r0, [pc, #20]	@ (8015ccc <fiprintf+0x20>)
 8015cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cba:	6800      	ldr	r0, [r0, #0]
 8015cbc:	9301      	str	r3, [sp, #4]
 8015cbe:	f000 f839 	bl	8015d34 <_vfiprintf_r>
 8015cc2:	b002      	add	sp, #8
 8015cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015cc8:	b003      	add	sp, #12
 8015cca:	4770      	bx	lr
 8015ccc:	20000044 	.word	0x20000044

08015cd0 <_malloc_usable_size_r>:
 8015cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cd4:	1f18      	subs	r0, r3, #4
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	bfbc      	itt	lt
 8015cda:	580b      	ldrlt	r3, [r1, r0]
 8015cdc:	18c0      	addlt	r0, r0, r3
 8015cde:	4770      	bx	lr

08015ce0 <__sfputc_r>:
 8015ce0:	6893      	ldr	r3, [r2, #8]
 8015ce2:	3b01      	subs	r3, #1
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	b410      	push	{r4}
 8015ce8:	6093      	str	r3, [r2, #8]
 8015cea:	da08      	bge.n	8015cfe <__sfputc_r+0x1e>
 8015cec:	6994      	ldr	r4, [r2, #24]
 8015cee:	42a3      	cmp	r3, r4
 8015cf0:	db01      	blt.n	8015cf6 <__sfputc_r+0x16>
 8015cf2:	290a      	cmp	r1, #10
 8015cf4:	d103      	bne.n	8015cfe <__sfputc_r+0x1e>
 8015cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cfa:	f000 b933 	b.w	8015f64 <__swbuf_r>
 8015cfe:	6813      	ldr	r3, [r2, #0]
 8015d00:	1c58      	adds	r0, r3, #1
 8015d02:	6010      	str	r0, [r2, #0]
 8015d04:	7019      	strb	r1, [r3, #0]
 8015d06:	4608      	mov	r0, r1
 8015d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d0c:	4770      	bx	lr

08015d0e <__sfputs_r>:
 8015d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d10:	4606      	mov	r6, r0
 8015d12:	460f      	mov	r7, r1
 8015d14:	4614      	mov	r4, r2
 8015d16:	18d5      	adds	r5, r2, r3
 8015d18:	42ac      	cmp	r4, r5
 8015d1a:	d101      	bne.n	8015d20 <__sfputs_r+0x12>
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	e007      	b.n	8015d30 <__sfputs_r+0x22>
 8015d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d24:	463a      	mov	r2, r7
 8015d26:	4630      	mov	r0, r6
 8015d28:	f7ff ffda 	bl	8015ce0 <__sfputc_r>
 8015d2c:	1c43      	adds	r3, r0, #1
 8015d2e:	d1f3      	bne.n	8015d18 <__sfputs_r+0xa>
 8015d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015d34 <_vfiprintf_r>:
 8015d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d38:	460d      	mov	r5, r1
 8015d3a:	b09d      	sub	sp, #116	@ 0x74
 8015d3c:	4614      	mov	r4, r2
 8015d3e:	4698      	mov	r8, r3
 8015d40:	4606      	mov	r6, r0
 8015d42:	b118      	cbz	r0, 8015d4c <_vfiprintf_r+0x18>
 8015d44:	6a03      	ldr	r3, [r0, #32]
 8015d46:	b90b      	cbnz	r3, 8015d4c <_vfiprintf_r+0x18>
 8015d48:	f7fe f97e 	bl	8014048 <__sinit>
 8015d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d4e:	07d9      	lsls	r1, r3, #31
 8015d50:	d405      	bmi.n	8015d5e <_vfiprintf_r+0x2a>
 8015d52:	89ab      	ldrh	r3, [r5, #12]
 8015d54:	059a      	lsls	r2, r3, #22
 8015d56:	d402      	bmi.n	8015d5e <_vfiprintf_r+0x2a>
 8015d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015d5a:	f7fe fae0 	bl	801431e <__retarget_lock_acquire_recursive>
 8015d5e:	89ab      	ldrh	r3, [r5, #12]
 8015d60:	071b      	lsls	r3, r3, #28
 8015d62:	d501      	bpl.n	8015d68 <_vfiprintf_r+0x34>
 8015d64:	692b      	ldr	r3, [r5, #16]
 8015d66:	b99b      	cbnz	r3, 8015d90 <_vfiprintf_r+0x5c>
 8015d68:	4629      	mov	r1, r5
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	f000 f938 	bl	8015fe0 <__swsetup_r>
 8015d70:	b170      	cbz	r0, 8015d90 <_vfiprintf_r+0x5c>
 8015d72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d74:	07dc      	lsls	r4, r3, #31
 8015d76:	d504      	bpl.n	8015d82 <_vfiprintf_r+0x4e>
 8015d78:	f04f 30ff 	mov.w	r0, #4294967295
 8015d7c:	b01d      	add	sp, #116	@ 0x74
 8015d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d82:	89ab      	ldrh	r3, [r5, #12]
 8015d84:	0598      	lsls	r0, r3, #22
 8015d86:	d4f7      	bmi.n	8015d78 <_vfiprintf_r+0x44>
 8015d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015d8a:	f7fe fac9 	bl	8014320 <__retarget_lock_release_recursive>
 8015d8e:	e7f3      	b.n	8015d78 <_vfiprintf_r+0x44>
 8015d90:	2300      	movs	r3, #0
 8015d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d94:	2320      	movs	r3, #32
 8015d96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d9e:	2330      	movs	r3, #48	@ 0x30
 8015da0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015f50 <_vfiprintf_r+0x21c>
 8015da4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015da8:	f04f 0901 	mov.w	r9, #1
 8015dac:	4623      	mov	r3, r4
 8015dae:	469a      	mov	sl, r3
 8015db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015db4:	b10a      	cbz	r2, 8015dba <_vfiprintf_r+0x86>
 8015db6:	2a25      	cmp	r2, #37	@ 0x25
 8015db8:	d1f9      	bne.n	8015dae <_vfiprintf_r+0x7a>
 8015dba:	ebba 0b04 	subs.w	fp, sl, r4
 8015dbe:	d00b      	beq.n	8015dd8 <_vfiprintf_r+0xa4>
 8015dc0:	465b      	mov	r3, fp
 8015dc2:	4622      	mov	r2, r4
 8015dc4:	4629      	mov	r1, r5
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	f7ff ffa1 	bl	8015d0e <__sfputs_r>
 8015dcc:	3001      	adds	r0, #1
 8015dce:	f000 80a7 	beq.w	8015f20 <_vfiprintf_r+0x1ec>
 8015dd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015dd4:	445a      	add	r2, fp
 8015dd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8015dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	f000 809f 	beq.w	8015f20 <_vfiprintf_r+0x1ec>
 8015de2:	2300      	movs	r3, #0
 8015de4:	f04f 32ff 	mov.w	r2, #4294967295
 8015de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015dec:	f10a 0a01 	add.w	sl, sl, #1
 8015df0:	9304      	str	r3, [sp, #16]
 8015df2:	9307      	str	r3, [sp, #28]
 8015df4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015df8:	931a      	str	r3, [sp, #104]	@ 0x68
 8015dfa:	4654      	mov	r4, sl
 8015dfc:	2205      	movs	r2, #5
 8015dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e02:	4853      	ldr	r0, [pc, #332]	@ (8015f50 <_vfiprintf_r+0x21c>)
 8015e04:	f7ea fa14 	bl	8000230 <memchr>
 8015e08:	9a04      	ldr	r2, [sp, #16]
 8015e0a:	b9d8      	cbnz	r0, 8015e44 <_vfiprintf_r+0x110>
 8015e0c:	06d1      	lsls	r1, r2, #27
 8015e0e:	bf44      	itt	mi
 8015e10:	2320      	movmi	r3, #32
 8015e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e16:	0713      	lsls	r3, r2, #28
 8015e18:	bf44      	itt	mi
 8015e1a:	232b      	movmi	r3, #43	@ 0x2b
 8015e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e20:	f89a 3000 	ldrb.w	r3, [sl]
 8015e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e26:	d015      	beq.n	8015e54 <_vfiprintf_r+0x120>
 8015e28:	9a07      	ldr	r2, [sp, #28]
 8015e2a:	4654      	mov	r4, sl
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	f04f 0c0a 	mov.w	ip, #10
 8015e32:	4621      	mov	r1, r4
 8015e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e38:	3b30      	subs	r3, #48	@ 0x30
 8015e3a:	2b09      	cmp	r3, #9
 8015e3c:	d94b      	bls.n	8015ed6 <_vfiprintf_r+0x1a2>
 8015e3e:	b1b0      	cbz	r0, 8015e6e <_vfiprintf_r+0x13a>
 8015e40:	9207      	str	r2, [sp, #28]
 8015e42:	e014      	b.n	8015e6e <_vfiprintf_r+0x13a>
 8015e44:	eba0 0308 	sub.w	r3, r0, r8
 8015e48:	fa09 f303 	lsl.w	r3, r9, r3
 8015e4c:	4313      	orrs	r3, r2
 8015e4e:	9304      	str	r3, [sp, #16]
 8015e50:	46a2      	mov	sl, r4
 8015e52:	e7d2      	b.n	8015dfa <_vfiprintf_r+0xc6>
 8015e54:	9b03      	ldr	r3, [sp, #12]
 8015e56:	1d19      	adds	r1, r3, #4
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	9103      	str	r1, [sp, #12]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	bfbb      	ittet	lt
 8015e60:	425b      	neglt	r3, r3
 8015e62:	f042 0202 	orrlt.w	r2, r2, #2
 8015e66:	9307      	strge	r3, [sp, #28]
 8015e68:	9307      	strlt	r3, [sp, #28]
 8015e6a:	bfb8      	it	lt
 8015e6c:	9204      	strlt	r2, [sp, #16]
 8015e6e:	7823      	ldrb	r3, [r4, #0]
 8015e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8015e72:	d10a      	bne.n	8015e8a <_vfiprintf_r+0x156>
 8015e74:	7863      	ldrb	r3, [r4, #1]
 8015e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e78:	d132      	bne.n	8015ee0 <_vfiprintf_r+0x1ac>
 8015e7a:	9b03      	ldr	r3, [sp, #12]
 8015e7c:	1d1a      	adds	r2, r3, #4
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	9203      	str	r2, [sp, #12]
 8015e82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015e86:	3402      	adds	r4, #2
 8015e88:	9305      	str	r3, [sp, #20]
 8015e8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015f60 <_vfiprintf_r+0x22c>
 8015e8e:	7821      	ldrb	r1, [r4, #0]
 8015e90:	2203      	movs	r2, #3
 8015e92:	4650      	mov	r0, sl
 8015e94:	f7ea f9cc 	bl	8000230 <memchr>
 8015e98:	b138      	cbz	r0, 8015eaa <_vfiprintf_r+0x176>
 8015e9a:	9b04      	ldr	r3, [sp, #16]
 8015e9c:	eba0 000a 	sub.w	r0, r0, sl
 8015ea0:	2240      	movs	r2, #64	@ 0x40
 8015ea2:	4082      	lsls	r2, r0
 8015ea4:	4313      	orrs	r3, r2
 8015ea6:	3401      	adds	r4, #1
 8015ea8:	9304      	str	r3, [sp, #16]
 8015eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eae:	4829      	ldr	r0, [pc, #164]	@ (8015f54 <_vfiprintf_r+0x220>)
 8015eb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015eb4:	2206      	movs	r2, #6
 8015eb6:	f7ea f9bb 	bl	8000230 <memchr>
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	d03f      	beq.n	8015f3e <_vfiprintf_r+0x20a>
 8015ebe:	4b26      	ldr	r3, [pc, #152]	@ (8015f58 <_vfiprintf_r+0x224>)
 8015ec0:	bb1b      	cbnz	r3, 8015f0a <_vfiprintf_r+0x1d6>
 8015ec2:	9b03      	ldr	r3, [sp, #12]
 8015ec4:	3307      	adds	r3, #7
 8015ec6:	f023 0307 	bic.w	r3, r3, #7
 8015eca:	3308      	adds	r3, #8
 8015ecc:	9303      	str	r3, [sp, #12]
 8015ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ed0:	443b      	add	r3, r7
 8015ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ed4:	e76a      	b.n	8015dac <_vfiprintf_r+0x78>
 8015ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015eda:	460c      	mov	r4, r1
 8015edc:	2001      	movs	r0, #1
 8015ede:	e7a8      	b.n	8015e32 <_vfiprintf_r+0xfe>
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	3401      	adds	r4, #1
 8015ee4:	9305      	str	r3, [sp, #20]
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	f04f 0c0a 	mov.w	ip, #10
 8015eec:	4620      	mov	r0, r4
 8015eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ef2:	3a30      	subs	r2, #48	@ 0x30
 8015ef4:	2a09      	cmp	r2, #9
 8015ef6:	d903      	bls.n	8015f00 <_vfiprintf_r+0x1cc>
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d0c6      	beq.n	8015e8a <_vfiprintf_r+0x156>
 8015efc:	9105      	str	r1, [sp, #20]
 8015efe:	e7c4      	b.n	8015e8a <_vfiprintf_r+0x156>
 8015f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f04:	4604      	mov	r4, r0
 8015f06:	2301      	movs	r3, #1
 8015f08:	e7f0      	b.n	8015eec <_vfiprintf_r+0x1b8>
 8015f0a:	ab03      	add	r3, sp, #12
 8015f0c:	9300      	str	r3, [sp, #0]
 8015f0e:	462a      	mov	r2, r5
 8015f10:	4b12      	ldr	r3, [pc, #72]	@ (8015f5c <_vfiprintf_r+0x228>)
 8015f12:	a904      	add	r1, sp, #16
 8015f14:	4630      	mov	r0, r6
 8015f16:	f7fd fc53 	bl	80137c0 <_printf_float>
 8015f1a:	4607      	mov	r7, r0
 8015f1c:	1c78      	adds	r0, r7, #1
 8015f1e:	d1d6      	bne.n	8015ece <_vfiprintf_r+0x19a>
 8015f20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f22:	07d9      	lsls	r1, r3, #31
 8015f24:	d405      	bmi.n	8015f32 <_vfiprintf_r+0x1fe>
 8015f26:	89ab      	ldrh	r3, [r5, #12]
 8015f28:	059a      	lsls	r2, r3, #22
 8015f2a:	d402      	bmi.n	8015f32 <_vfiprintf_r+0x1fe>
 8015f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f2e:	f7fe f9f7 	bl	8014320 <__retarget_lock_release_recursive>
 8015f32:	89ab      	ldrh	r3, [r5, #12]
 8015f34:	065b      	lsls	r3, r3, #25
 8015f36:	f53f af1f 	bmi.w	8015d78 <_vfiprintf_r+0x44>
 8015f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015f3c:	e71e      	b.n	8015d7c <_vfiprintf_r+0x48>
 8015f3e:	ab03      	add	r3, sp, #12
 8015f40:	9300      	str	r3, [sp, #0]
 8015f42:	462a      	mov	r2, r5
 8015f44:	4b05      	ldr	r3, [pc, #20]	@ (8015f5c <_vfiprintf_r+0x228>)
 8015f46:	a904      	add	r1, sp, #16
 8015f48:	4630      	mov	r0, r6
 8015f4a:	f7fd fed1 	bl	8013cf0 <_printf_i>
 8015f4e:	e7e4      	b.n	8015f1a <_vfiprintf_r+0x1e6>
 8015f50:	08017998 	.word	0x08017998
 8015f54:	080179a2 	.word	0x080179a2
 8015f58:	080137c1 	.word	0x080137c1
 8015f5c:	08015d0f 	.word	0x08015d0f
 8015f60:	0801799e 	.word	0x0801799e

08015f64 <__swbuf_r>:
 8015f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f66:	460e      	mov	r6, r1
 8015f68:	4614      	mov	r4, r2
 8015f6a:	4605      	mov	r5, r0
 8015f6c:	b118      	cbz	r0, 8015f76 <__swbuf_r+0x12>
 8015f6e:	6a03      	ldr	r3, [r0, #32]
 8015f70:	b90b      	cbnz	r3, 8015f76 <__swbuf_r+0x12>
 8015f72:	f7fe f869 	bl	8014048 <__sinit>
 8015f76:	69a3      	ldr	r3, [r4, #24]
 8015f78:	60a3      	str	r3, [r4, #8]
 8015f7a:	89a3      	ldrh	r3, [r4, #12]
 8015f7c:	071a      	lsls	r2, r3, #28
 8015f7e:	d501      	bpl.n	8015f84 <__swbuf_r+0x20>
 8015f80:	6923      	ldr	r3, [r4, #16]
 8015f82:	b943      	cbnz	r3, 8015f96 <__swbuf_r+0x32>
 8015f84:	4621      	mov	r1, r4
 8015f86:	4628      	mov	r0, r5
 8015f88:	f000 f82a 	bl	8015fe0 <__swsetup_r>
 8015f8c:	b118      	cbz	r0, 8015f96 <__swbuf_r+0x32>
 8015f8e:	f04f 37ff 	mov.w	r7, #4294967295
 8015f92:	4638      	mov	r0, r7
 8015f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f96:	6823      	ldr	r3, [r4, #0]
 8015f98:	6922      	ldr	r2, [r4, #16]
 8015f9a:	1a98      	subs	r0, r3, r2
 8015f9c:	6963      	ldr	r3, [r4, #20]
 8015f9e:	b2f6      	uxtb	r6, r6
 8015fa0:	4283      	cmp	r3, r0
 8015fa2:	4637      	mov	r7, r6
 8015fa4:	dc05      	bgt.n	8015fb2 <__swbuf_r+0x4e>
 8015fa6:	4621      	mov	r1, r4
 8015fa8:	4628      	mov	r0, r5
 8015faa:	f7ff fdbd 	bl	8015b28 <_fflush_r>
 8015fae:	2800      	cmp	r0, #0
 8015fb0:	d1ed      	bne.n	8015f8e <__swbuf_r+0x2a>
 8015fb2:	68a3      	ldr	r3, [r4, #8]
 8015fb4:	3b01      	subs	r3, #1
 8015fb6:	60a3      	str	r3, [r4, #8]
 8015fb8:	6823      	ldr	r3, [r4, #0]
 8015fba:	1c5a      	adds	r2, r3, #1
 8015fbc:	6022      	str	r2, [r4, #0]
 8015fbe:	701e      	strb	r6, [r3, #0]
 8015fc0:	6962      	ldr	r2, [r4, #20]
 8015fc2:	1c43      	adds	r3, r0, #1
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d004      	beq.n	8015fd2 <__swbuf_r+0x6e>
 8015fc8:	89a3      	ldrh	r3, [r4, #12]
 8015fca:	07db      	lsls	r3, r3, #31
 8015fcc:	d5e1      	bpl.n	8015f92 <__swbuf_r+0x2e>
 8015fce:	2e0a      	cmp	r6, #10
 8015fd0:	d1df      	bne.n	8015f92 <__swbuf_r+0x2e>
 8015fd2:	4621      	mov	r1, r4
 8015fd4:	4628      	mov	r0, r5
 8015fd6:	f7ff fda7 	bl	8015b28 <_fflush_r>
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	d0d9      	beq.n	8015f92 <__swbuf_r+0x2e>
 8015fde:	e7d6      	b.n	8015f8e <__swbuf_r+0x2a>

08015fe0 <__swsetup_r>:
 8015fe0:	b538      	push	{r3, r4, r5, lr}
 8015fe2:	4b29      	ldr	r3, [pc, #164]	@ (8016088 <__swsetup_r+0xa8>)
 8015fe4:	4605      	mov	r5, r0
 8015fe6:	6818      	ldr	r0, [r3, #0]
 8015fe8:	460c      	mov	r4, r1
 8015fea:	b118      	cbz	r0, 8015ff4 <__swsetup_r+0x14>
 8015fec:	6a03      	ldr	r3, [r0, #32]
 8015fee:	b90b      	cbnz	r3, 8015ff4 <__swsetup_r+0x14>
 8015ff0:	f7fe f82a 	bl	8014048 <__sinit>
 8015ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ff8:	0719      	lsls	r1, r3, #28
 8015ffa:	d422      	bmi.n	8016042 <__swsetup_r+0x62>
 8015ffc:	06da      	lsls	r2, r3, #27
 8015ffe:	d407      	bmi.n	8016010 <__swsetup_r+0x30>
 8016000:	2209      	movs	r2, #9
 8016002:	602a      	str	r2, [r5, #0]
 8016004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016008:	81a3      	strh	r3, [r4, #12]
 801600a:	f04f 30ff 	mov.w	r0, #4294967295
 801600e:	e033      	b.n	8016078 <__swsetup_r+0x98>
 8016010:	0758      	lsls	r0, r3, #29
 8016012:	d512      	bpl.n	801603a <__swsetup_r+0x5a>
 8016014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016016:	b141      	cbz	r1, 801602a <__swsetup_r+0x4a>
 8016018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801601c:	4299      	cmp	r1, r3
 801601e:	d002      	beq.n	8016026 <__swsetup_r+0x46>
 8016020:	4628      	mov	r0, r5
 8016022:	f7fe ffd9 	bl	8014fd8 <_free_r>
 8016026:	2300      	movs	r3, #0
 8016028:	6363      	str	r3, [r4, #52]	@ 0x34
 801602a:	89a3      	ldrh	r3, [r4, #12]
 801602c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016030:	81a3      	strh	r3, [r4, #12]
 8016032:	2300      	movs	r3, #0
 8016034:	6063      	str	r3, [r4, #4]
 8016036:	6923      	ldr	r3, [r4, #16]
 8016038:	6023      	str	r3, [r4, #0]
 801603a:	89a3      	ldrh	r3, [r4, #12]
 801603c:	f043 0308 	orr.w	r3, r3, #8
 8016040:	81a3      	strh	r3, [r4, #12]
 8016042:	6923      	ldr	r3, [r4, #16]
 8016044:	b94b      	cbnz	r3, 801605a <__swsetup_r+0x7a>
 8016046:	89a3      	ldrh	r3, [r4, #12]
 8016048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801604c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016050:	d003      	beq.n	801605a <__swsetup_r+0x7a>
 8016052:	4621      	mov	r1, r4
 8016054:	4628      	mov	r0, r5
 8016056:	f000 f83f 	bl	80160d8 <__smakebuf_r>
 801605a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801605e:	f013 0201 	ands.w	r2, r3, #1
 8016062:	d00a      	beq.n	801607a <__swsetup_r+0x9a>
 8016064:	2200      	movs	r2, #0
 8016066:	60a2      	str	r2, [r4, #8]
 8016068:	6962      	ldr	r2, [r4, #20]
 801606a:	4252      	negs	r2, r2
 801606c:	61a2      	str	r2, [r4, #24]
 801606e:	6922      	ldr	r2, [r4, #16]
 8016070:	b942      	cbnz	r2, 8016084 <__swsetup_r+0xa4>
 8016072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016076:	d1c5      	bne.n	8016004 <__swsetup_r+0x24>
 8016078:	bd38      	pop	{r3, r4, r5, pc}
 801607a:	0799      	lsls	r1, r3, #30
 801607c:	bf58      	it	pl
 801607e:	6962      	ldrpl	r2, [r4, #20]
 8016080:	60a2      	str	r2, [r4, #8]
 8016082:	e7f4      	b.n	801606e <__swsetup_r+0x8e>
 8016084:	2000      	movs	r0, #0
 8016086:	e7f7      	b.n	8016078 <__swsetup_r+0x98>
 8016088:	20000044 	.word	0x20000044

0801608c <__swhatbuf_r>:
 801608c:	b570      	push	{r4, r5, r6, lr}
 801608e:	460c      	mov	r4, r1
 8016090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016094:	2900      	cmp	r1, #0
 8016096:	b096      	sub	sp, #88	@ 0x58
 8016098:	4615      	mov	r5, r2
 801609a:	461e      	mov	r6, r3
 801609c:	da0d      	bge.n	80160ba <__swhatbuf_r+0x2e>
 801609e:	89a3      	ldrh	r3, [r4, #12]
 80160a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80160a4:	f04f 0100 	mov.w	r1, #0
 80160a8:	bf14      	ite	ne
 80160aa:	2340      	movne	r3, #64	@ 0x40
 80160ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80160b0:	2000      	movs	r0, #0
 80160b2:	6031      	str	r1, [r6, #0]
 80160b4:	602b      	str	r3, [r5, #0]
 80160b6:	b016      	add	sp, #88	@ 0x58
 80160b8:	bd70      	pop	{r4, r5, r6, pc}
 80160ba:	466a      	mov	r2, sp
 80160bc:	f000 f848 	bl	8016150 <_fstat_r>
 80160c0:	2800      	cmp	r0, #0
 80160c2:	dbec      	blt.n	801609e <__swhatbuf_r+0x12>
 80160c4:	9901      	ldr	r1, [sp, #4]
 80160c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80160ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80160ce:	4259      	negs	r1, r3
 80160d0:	4159      	adcs	r1, r3
 80160d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80160d6:	e7eb      	b.n	80160b0 <__swhatbuf_r+0x24>

080160d8 <__smakebuf_r>:
 80160d8:	898b      	ldrh	r3, [r1, #12]
 80160da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160dc:	079d      	lsls	r5, r3, #30
 80160de:	4606      	mov	r6, r0
 80160e0:	460c      	mov	r4, r1
 80160e2:	d507      	bpl.n	80160f4 <__smakebuf_r+0x1c>
 80160e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80160e8:	6023      	str	r3, [r4, #0]
 80160ea:	6123      	str	r3, [r4, #16]
 80160ec:	2301      	movs	r3, #1
 80160ee:	6163      	str	r3, [r4, #20]
 80160f0:	b003      	add	sp, #12
 80160f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160f4:	ab01      	add	r3, sp, #4
 80160f6:	466a      	mov	r2, sp
 80160f8:	f7ff ffc8 	bl	801608c <__swhatbuf_r>
 80160fc:	9f00      	ldr	r7, [sp, #0]
 80160fe:	4605      	mov	r5, r0
 8016100:	4639      	mov	r1, r7
 8016102:	4630      	mov	r0, r6
 8016104:	f7fd fa22 	bl	801354c <_malloc_r>
 8016108:	b948      	cbnz	r0, 801611e <__smakebuf_r+0x46>
 801610a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801610e:	059a      	lsls	r2, r3, #22
 8016110:	d4ee      	bmi.n	80160f0 <__smakebuf_r+0x18>
 8016112:	f023 0303 	bic.w	r3, r3, #3
 8016116:	f043 0302 	orr.w	r3, r3, #2
 801611a:	81a3      	strh	r3, [r4, #12]
 801611c:	e7e2      	b.n	80160e4 <__smakebuf_r+0xc>
 801611e:	89a3      	ldrh	r3, [r4, #12]
 8016120:	6020      	str	r0, [r4, #0]
 8016122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016126:	81a3      	strh	r3, [r4, #12]
 8016128:	9b01      	ldr	r3, [sp, #4]
 801612a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801612e:	b15b      	cbz	r3, 8016148 <__smakebuf_r+0x70>
 8016130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016134:	4630      	mov	r0, r6
 8016136:	f000 f81d 	bl	8016174 <_isatty_r>
 801613a:	b128      	cbz	r0, 8016148 <__smakebuf_r+0x70>
 801613c:	89a3      	ldrh	r3, [r4, #12]
 801613e:	f023 0303 	bic.w	r3, r3, #3
 8016142:	f043 0301 	orr.w	r3, r3, #1
 8016146:	81a3      	strh	r3, [r4, #12]
 8016148:	89a3      	ldrh	r3, [r4, #12]
 801614a:	431d      	orrs	r5, r3
 801614c:	81a5      	strh	r5, [r4, #12]
 801614e:	e7cf      	b.n	80160f0 <__smakebuf_r+0x18>

08016150 <_fstat_r>:
 8016150:	b538      	push	{r3, r4, r5, lr}
 8016152:	4d07      	ldr	r5, [pc, #28]	@ (8016170 <_fstat_r+0x20>)
 8016154:	2300      	movs	r3, #0
 8016156:	4604      	mov	r4, r0
 8016158:	4608      	mov	r0, r1
 801615a:	4611      	mov	r1, r2
 801615c:	602b      	str	r3, [r5, #0]
 801615e:	f7f7 fb8f 	bl	800d880 <_fstat>
 8016162:	1c43      	adds	r3, r0, #1
 8016164:	d102      	bne.n	801616c <_fstat_r+0x1c>
 8016166:	682b      	ldr	r3, [r5, #0]
 8016168:	b103      	cbz	r3, 801616c <_fstat_r+0x1c>
 801616a:	6023      	str	r3, [r4, #0]
 801616c:	bd38      	pop	{r3, r4, r5, pc}
 801616e:	bf00      	nop
 8016170:	200006fc 	.word	0x200006fc

08016174 <_isatty_r>:
 8016174:	b538      	push	{r3, r4, r5, lr}
 8016176:	4d06      	ldr	r5, [pc, #24]	@ (8016190 <_isatty_r+0x1c>)
 8016178:	2300      	movs	r3, #0
 801617a:	4604      	mov	r4, r0
 801617c:	4608      	mov	r0, r1
 801617e:	602b      	str	r3, [r5, #0]
 8016180:	f7f7 fb8e 	bl	800d8a0 <_isatty>
 8016184:	1c43      	adds	r3, r0, #1
 8016186:	d102      	bne.n	801618e <_isatty_r+0x1a>
 8016188:	682b      	ldr	r3, [r5, #0]
 801618a:	b103      	cbz	r3, 801618e <_isatty_r+0x1a>
 801618c:	6023      	str	r3, [r4, #0]
 801618e:	bd38      	pop	{r3, r4, r5, pc}
 8016190:	200006fc 	.word	0x200006fc

08016194 <_Unwind_GetDataRelBase>:
 8016194:	b508      	push	{r3, lr}
 8016196:	f7fd f99f 	bl	80134d8 <abort>

0801619a <_Unwind_GetTextRelBase>:
 801619a:	b508      	push	{r3, lr}
 801619c:	f7ff fffa 	bl	8016194 <_Unwind_GetDataRelBase>

080161a0 <_init>:
 80161a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161a2:	bf00      	nop
 80161a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161a6:	bc08      	pop	{r3}
 80161a8:	469e      	mov	lr, r3
 80161aa:	4770      	bx	lr

080161ac <_fini>:
 80161ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161ae:	bf00      	nop
 80161b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161b2:	bc08      	pop	{r3}
 80161b4:	469e      	mov	lr, r3
 80161b6:	4770      	bx	lr
