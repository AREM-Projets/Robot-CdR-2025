
stm32_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e8  08014c20  08014c20  00015c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001230  08016508  08016508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d58  08017738  08017738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018490  08018490  0001a1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018490  08018490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018498  08018498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801849c  0001a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  200001f0  0801868c  0001a1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  0801868c  0001a6b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029487  00000000  00000000  0001a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c2  00000000  00000000  000436a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  00046f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018ff  00000000  00000000  00048f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283cb  00000000  00000000  0004a897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de48  00000000  00000000  00072c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e50b8  00000000  00000000  00090aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175b62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad04  00000000  00000000  00175ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001808ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014c08 	.word	0x08014c08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08014c08 	.word	0x08014c08

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f001 b8f6 	b.w	8001eac <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <selfrel_offset31>:
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	bf4c      	ite	mi
 8000f9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000f9e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fa2:	4418      	add	r0, r3
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <search_EIT_table>:
 8000fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fac:	b349      	cbz	r1, 8001002 <search_EIT_table+0x5a>
 8000fae:	1e4f      	subs	r7, r1, #1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4615      	mov	r5, r2
 8000fb4:	463e      	mov	r6, r7
 8000fb6:	f04f 0900 	mov.w	r9, #0
 8000fba:	eb09 0106 	add.w	r1, r9, r6
 8000fbe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fc2:	1049      	asrs	r1, r1, #1
 8000fc4:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000fc8:	4640      	mov	r0, r8
 8000fca:	f7ff ffe3 	bl	8000f94 <selfrel_offset31>
 8000fce:	428f      	cmp	r7, r1
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000fd6:	d00f      	beq.n	8000ff8 <search_EIT_table+0x50>
 8000fd8:	3008      	adds	r0, #8
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	4420      	add	r0, r4
 8000fde:	d807      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000fe0:	f7ff ffd8 	bl	8000f94 <selfrel_offset31>
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d208      	bcs.n	8000ffc <search_EIT_table+0x54>
 8000fea:	f101 0901 	add.w	r9, r1, #1
 8000fee:	e7e4      	b.n	8000fba <search_EIT_table+0x12>
 8000ff0:	4589      	cmp	r9, r1
 8000ff2:	d006      	beq.n	8001002 <search_EIT_table+0x5a>
 8000ff4:	1e4e      	subs	r6, r1, #1
 8000ff6:	e7e0      	b.n	8000fba <search_EIT_table+0x12>
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	d8f9      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001002:	f04f 0800 	mov.w	r8, #0
 8001006:	4640      	mov	r0, r8
 8001008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800100c <__gnu_unwind_get_pr_addr>:
 800100c:	2801      	cmp	r0, #1
 800100e:	d007      	beq.n	8001020 <__gnu_unwind_get_pr_addr+0x14>
 8001010:	2802      	cmp	r0, #2
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x18>
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__gnu_unwind_get_pr_addr+0x1c>)
 8001016:	2800      	cmp	r0, #0
 8001018:	bf0c      	ite	eq
 800101a:	4618      	moveq	r0, r3
 800101c:	2000      	movne	r0, #0
 800101e:	4770      	bx	lr
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <__gnu_unwind_get_pr_addr+0x20>)
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <__gnu_unwind_get_pr_addr+0x24>)
 8001026:	4770      	bx	lr
 8001028:	080016d5 	.word	0x080016d5
 800102c:	080016d9 	.word	0x080016d9
 8001030:	080016dd 	.word	0x080016dd

08001034 <get_eit_entry>:
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <get_eit_entry+0x88>)
 8001038:	b083      	sub	sp, #12
 800103a:	4604      	mov	r4, r0
 800103c:	1e8d      	subs	r5, r1, #2
 800103e:	b31b      	cbz	r3, 8001088 <get_eit_entry+0x54>
 8001040:	a901      	add	r1, sp, #4
 8001042:	4628      	mov	r0, r5
 8001044:	f3af 8000 	nop.w
 8001048:	b388      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	462a      	mov	r2, r5
 800104e:	f7ff ffab 	bl	8000fa8 <search_EIT_table>
 8001052:	4601      	mov	r1, r0
 8001054:	b358      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 8001056:	f7ff ff9d 	bl	8000f94 <selfrel_offset31>
 800105a:	684b      	ldr	r3, [r1, #4]
 800105c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800105e:	2b01      	cmp	r3, #1
 8001060:	d028      	beq.n	80010b4 <get_eit_entry+0x80>
 8001062:	2b00      	cmp	r3, #0
 8001064:	f101 0004 	add.w	r0, r1, #4
 8001068:	db1f      	blt.n	80010aa <get_eit_entry+0x76>
 800106a:	f7ff ff93 	bl	8000f94 <selfrel_offset31>
 800106e:	2300      	movs	r3, #0
 8001070:	6523      	str	r3, [r4, #80]	@ 0x50
 8001072:	6803      	ldr	r3, [r0, #0]
 8001074:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0d      	blt.n	8001096 <get_eit_entry+0x62>
 800107a:	f7ff ff8b 	bl	8000f94 <selfrel_offset31>
 800107e:	4603      	mov	r3, r0
 8001080:	2000      	movs	r0, #0
 8001082:	6123      	str	r3, [r4, #16]
 8001084:	b003      	add	sp, #12
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <get_eit_entry+0x8c>)
 800108a:	490e      	ldr	r1, [pc, #56]	@ (80010c4 <get_eit_entry+0x90>)
 800108c:	1ac9      	subs	r1, r1, r3
 800108e:	10c9      	asrs	r1, r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	9101      	str	r1, [sp, #4]
 8001094:	e7da      	b.n	800104c <get_eit_entry+0x18>
 8001096:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800109a:	f7ff ffb7 	bl	800100c <__gnu_unwind_get_pr_addr>
 800109e:	4603      	mov	r3, r0
 80010a0:	b128      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 80010a2:	2000      	movs	r0, #0
 80010a4:	6123      	str	r3, [r4, #16]
 80010a6:	b003      	add	sp, #12
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	2301      	movs	r3, #1
 80010ac:	e7e0      	b.n	8001070 <get_eit_entry+0x3c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	2009      	movs	r0, #9
 80010b2:	e7e6      	b.n	8001082 <get_eit_entry+0x4e>
 80010b4:	2300      	movs	r3, #0
 80010b6:	2005      	movs	r0, #5
 80010b8:	e7e3      	b.n	8001082 <get_eit_entry+0x4e>
 80010ba:	bf00      	nop
 80010bc:	00000000 	.word	0x00000000
 80010c0:	08017738 	.word	0x08017738
 80010c4:	08018490 	.word	0x08018490

080010c8 <restore_non_core_regs>:
 80010c8:	6803      	ldr	r3, [r0, #0]
 80010ca:	07da      	lsls	r2, r3, #31
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	d406      	bmi.n	80010e0 <restore_non_core_regs+0x18>
 80010d2:	079b      	lsls	r3, r3, #30
 80010d4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80010d8:	d509      	bpl.n	80010ee <restore_non_core_regs+0x26>
 80010da:	f000 fc69 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	0759      	lsls	r1, r3, #29
 80010e2:	d509      	bpl.n	80010f8 <restore_non_core_regs+0x30>
 80010e4:	071a      	lsls	r2, r3, #28
 80010e6:	d50e      	bpl.n	8001106 <restore_non_core_regs+0x3e>
 80010e8:	06db      	lsls	r3, r3, #27
 80010ea:	d513      	bpl.n	8001114 <restore_non_core_regs+0x4c>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	f000 fc57 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	0759      	lsls	r1, r3, #29
 80010f6:	d4f5      	bmi.n	80010e4 <restore_non_core_regs+0x1c>
 80010f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010fc:	f000 fc60 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	071a      	lsls	r2, r3, #28
 8001104:	d4f0      	bmi.n	80010e8 <restore_non_core_regs+0x20>
 8001106:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800110a:	f000 fc61 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	06db      	lsls	r3, r3, #27
 8001112:	d4eb      	bmi.n	80010ec <restore_non_core_regs+0x24>
 8001114:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800111c:	f000 bc9c 	b.w	8001a58 <__gnu_Unwind_Restore_WMMXC>

08001120 <__gnu_unwind_24bit.constprop.0>:
 8001120:	2009      	movs	r0, #9
 8001122:	4770      	bx	lr

08001124 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001124:	4603      	mov	r3, r0
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	b100      	cbz	r0, 800112c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800112a:	4418      	add	r0, r3
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_DebugHook>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <unwind_phase2>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	4604      	mov	r4, r0
 8001138:	460e      	mov	r6, r1
 800113a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff79 	bl	8001034 <get_eit_entry>
 8001142:	4605      	mov	r5, r0
 8001144:	b988      	cbnz	r0, 800116a <unwind_phase2+0x36>
 8001146:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001148:	6162      	str	r2, [r4, #20]
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	4632      	mov	r2, r6
 800114e:	4621      	mov	r1, r4
 8001150:	2001      	movs	r0, #1
 8001152:	4798      	blx	r3
 8001154:	2808      	cmp	r0, #8
 8001156:	d0f0      	beq.n	800113a <unwind_phase2+0x6>
 8001158:	2807      	cmp	r0, #7
 800115a:	d106      	bne.n	800116a <unwind_phase2+0x36>
 800115c:	4628      	mov	r0, r5
 800115e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001160:	f7ff ffe6 	bl	8001130 <_Unwind_DebugHook>
 8001164:	1d30      	adds	r0, r6, #4
 8001166:	f000 fc0f 	bl	8001988 <__restore_core_regs>
 800116a:	f011 f8af 	bl	80122cc <abort>
 800116e:	bf00      	nop

08001170 <unwind_phase2_forced>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	1d0d      	adds	r5, r1, #4
 8001176:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800117a:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800117e:	4607      	mov	r7, r0
 8001180:	4614      	mov	r4, r2
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001188:	f10d 0c0c 	add.w	ip, sp, #12
 800118c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a0:	ae02      	add	r6, sp, #8
 80011a2:	f04f 0e00 	mov.w	lr, #0
 80011a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011aa:	f8c6 e000 	str.w	lr, [r6]
 80011ae:	e020      	b.n	80011f2 <unwind_phase2_forced+0x82>
 80011b0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011b8:	4631      	mov	r1, r6
 80011ba:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011bc:	f011 ff8b 	bl	80130d6 <memcpy>
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80011c4:	4639      	mov	r1, r7
 80011c6:	4650      	mov	r0, sl
 80011c8:	4798      	blx	r3
 80011ca:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80011cc:	6473      	str	r3, [r6, #68]	@ 0x44
 80011ce:	4621      	mov	r1, r4
 80011d0:	e9cd 6900 	strd	r6, r9, [sp]
 80011d4:	4605      	mov	r5, r0
 80011d6:	463b      	mov	r3, r7
 80011d8:	463a      	mov	r2, r7
 80011da:	2001      	movs	r0, #1
 80011dc:	47c0      	blx	r8
 80011de:	4604      	mov	r4, r0
 80011e0:	bb18      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 80011e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011e6:	a97a      	add	r1, sp, #488	@ 0x1e8
 80011e8:	4630      	mov	r0, r6
 80011ea:	f011 ff74 	bl	80130d6 <memcpy>
 80011ee:	2d08      	cmp	r5, #8
 80011f0:	d119      	bne.n	8001226 <unwind_phase2_forced+0xb6>
 80011f2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011f4:	4638      	mov	r0, r7
 80011f6:	f7ff ff1d 	bl	8001034 <get_eit_entry>
 80011fa:	3409      	adds	r4, #9
 80011fc:	fa5f fa84 	uxtb.w	sl, r4
 8001200:	4605      	mov	r5, r0
 8001202:	2800      	cmp	r0, #0
 8001204:	d0d4      	beq.n	80011b0 <unwind_phase2_forced+0x40>
 8001206:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001208:	6473      	str	r3, [r6, #68]	@ 0x44
 800120a:	463a      	mov	r2, r7
 800120c:	e9cd 6900 	strd	r6, r9, [sp]
 8001210:	463b      	mov	r3, r7
 8001212:	f04a 0110 	orr.w	r1, sl, #16
 8001216:	2001      	movs	r0, #1
 8001218:	47c0      	blx	r8
 800121a:	b930      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 800121c:	4628      	mov	r0, r5
 800121e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	2d07      	cmp	r5, #7
 8001228:	d005      	beq.n	8001236 <unwind_phase2_forced+0xc6>
 800122a:	2509      	movs	r5, #9
 800122c:	4628      	mov	r0, r5
 800122e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	4620      	mov	r0, r4
 8001238:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800123a:	f7ff ff79 	bl	8001130 <_Unwind_DebugHook>
 800123e:	a803      	add	r0, sp, #12
 8001240:	f000 fba2 	bl	8001988 <__restore_core_regs>

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800124c:	640b      	str	r3, [r1, #64]	@ 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	@ 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed1 	bl	8001034 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	@ 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff13 	bl	80010c8 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff43 	bl	8001134 <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e758      	b.n	8001170 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	@ 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff26 	bl	8001134 <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80012ec:	f7ff ff20 	bl	8001130 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb49 	bl	8001988 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3a 	bl	8001170 <unwind_phase2_forced>
 80012fc:	f010 ffe6 	bl	80122cc <abort>
 8001300:	f010 ffe4 	bl	80122cc <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800130a:	640a      	str	r2, [r1, #64]	@ 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e72f      	b.n	8001170 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d010      	beq.n	800134a <_Unwind_VRS_Get+0x26>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b983      	cbnz	r3, 800134e <_Unwind_VRS_Get+0x2a>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80e      	bhi.n	800134e <_Unwind_VRS_Get+0x2a>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf8c      	ite	hi
 8001344:	2002      	movhi	r0, #2
 8001346:	2001      	movls	r0, #1
 8001348:	4770      	bx	lr
 800134a:	4608      	mov	r0, r1
 800134c:	4770      	bx	lr
 800134e:	2002      	movs	r0, #2
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d010      	beq.n	8001396 <_Unwind_VRS_Set+0x26>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b983      	cbnz	r3, 800139a <_Unwind_VRS_Set+0x2a>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80e      	bhi.n	800139a <_Unwind_VRS_Set+0x2a>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf8c      	ite	hi
 8001390:	2002      	movhi	r0, #2
 8001392:	2001      	movls	r0, #1
 8001394:	4770      	bx	lr
 8001396:	4608      	mov	r0, r1
 8001398:	4770      	bx	lr
 800139a:	2002      	movs	r0, #2
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	@ 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	@ 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	@ 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0a 	bl	8001034 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	@ 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	@ 0x58
 8001430:	f7ff fe4a 	bl	80010c8 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	4693      	mov	fp, r2
 8001442:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001444:	b089      	sub	sp, #36	@ 0x24
 8001446:	460d      	mov	r5, r1
 8001448:	f852 1b04 	ldr.w	r1, [r2], #4
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	f000 0c03 	and.w	ip, r0, #3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d079      	beq.n	800154a <__gnu_unwind_pr_common+0x10e>
 8001456:	0c0c      	lsrs	r4, r1, #16
 8001458:	f88d 401d 	strb.w	r4, [sp, #29]
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	b2e4      	uxtb	r4, r4
 8001460:	9105      	str	r1, [sp, #20]
 8001462:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001466:	2102      	movs	r1, #2
 8001468:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800146a:	f88d 101c 	strb.w	r1, [sp, #28]
 800146e:	f1bc 0f02 	cmp.w	ip, #2
 8001472:	bf08      	it	eq
 8001474:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001476:	f017 0701 	ands.w	r7, r7, #1
 800147a:	d00c      	beq.n	8001496 <__gnu_unwind_pr_common+0x5a>
 800147c:	a905      	add	r1, sp, #20
 800147e:	4658      	mov	r0, fp
 8001480:	f000 fb84 	bl	8001b8c <__gnu_unwind_execute>
 8001484:	b918      	cbnz	r0, 800148e <__gnu_unwind_pr_common+0x52>
 8001486:	2008      	movs	r0, #8
 8001488:	b009      	add	sp, #36	@ 0x24
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148e:	2009      	movs	r0, #9
 8001490:	b009      	add	sp, #36	@ 0x24
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001496:	6816      	ldr	r6, [r2, #0]
 8001498:	2e00      	cmp	r6, #0
 800149a:	d0ef      	beq.n	800147c <__gnu_unwind_pr_common+0x40>
 800149c:	f000 0108 	and.w	r1, r0, #8
 80014a0:	9101      	str	r1, [sp, #4]
 80014a2:	46b2      	mov	sl, r6
 80014a4:	9702      	str	r7, [sp, #8]
 80014a6:	4664      	mov	r4, ip
 80014a8:	4699      	mov	r9, r3
 80014aa:	f1b9 0f02 	cmp.w	r9, #2
 80014ae:	d048      	beq.n	8001542 <__gnu_unwind_pr_common+0x106>
 80014b0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014b4:	8856      	ldrh	r6, [r2, #2]
 80014b6:	f102 0804 	add.w	r8, r2, #4
 80014ba:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014bc:	f026 0301 	bic.w	r3, r6, #1
 80014c0:	210f      	movs	r1, #15
 80014c2:	4658      	mov	r0, fp
 80014c4:	189f      	adds	r7, r3, r2
 80014c6:	f7ff ff45 	bl	8001354 <_Unwind_GetGR>
 80014ca:	4287      	cmp	r7, r0
 80014cc:	d837      	bhi.n	800153e <__gnu_unwind_pr_common+0x102>
 80014ce:	f02a 0201 	bic.w	r2, sl, #1
 80014d2:	443a      	add	r2, r7
 80014d4:	4282      	cmp	r2, r0
 80014d6:	bf94      	ite	ls
 80014d8:	2200      	movls	r2, #0
 80014da:	2201      	movhi	r2, #1
 80014dc:	0073      	lsls	r3, r6, #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d047      	beq.n	800157e <__gnu_unwind_pr_common+0x142>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d031      	beq.n	8001556 <__gnu_unwind_pr_common+0x11a>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cb      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 80014f6:	b114      	cbz	r4, 80014fe <__gnu_unwind_pr_common+0xc2>
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	f040 80c9 	bne.w	8001690 <__gnu_unwind_pr_common+0x254>
 80014fe:	f108 0204 	add.w	r2, r8, #4
 8001502:	f8d2 a000 	ldr.w	sl, [r2]
 8001506:	f1ba 0f00 	cmp.w	sl, #0
 800150a:	d1ce      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150c:	a905      	add	r1, sp, #20
 800150e:	4658      	mov	r0, fp
 8001510:	9f02      	ldr	r7, [sp, #8]
 8001512:	f000 fb3b 	bl	8001b8c <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1b9      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 800151a:	2f00      	cmp	r7, #0
 800151c:	d0b3      	beq.n	8001486 <__gnu_unwind_pr_common+0x4a>
 800151e:	210f      	movs	r1, #15
 8001520:	4658      	mov	r0, fp
 8001522:	f7ff ff17 	bl	8001354 <_Unwind_GetGR>
 8001526:	210e      	movs	r1, #14
 8001528:	4602      	mov	r2, r0
 800152a:	4658      	mov	r0, fp
 800152c:	f7ff ff38 	bl	80013a0 <_Unwind_SetGR>
 8001530:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <__gnu_unwind_pr_common+0x294>)
 8001532:	210f      	movs	r1, #15
 8001534:	4658      	mov	r0, fp
 8001536:	f7ff ff33 	bl	80013a0 <_Unwind_SetGR>
 800153a:	2007      	movs	r0, #7
 800153c:	e7a8      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 800153e:	2200      	movs	r2, #0
 8001540:	e7cc      	b.n	80014dc <__gnu_unwind_pr_common+0xa0>
 8001542:	6856      	ldr	r6, [r2, #4]
 8001544:	f102 0808 	add.w	r8, r2, #8
 8001548:	e7b7      	b.n	80014ba <__gnu_unwind_pr_common+0x7e>
 800154a:	0209      	lsls	r1, r1, #8
 800154c:	9105      	str	r1, [sp, #20]
 800154e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001552:	2103      	movs	r1, #3
 8001554:	e788      	b.n	8001468 <__gnu_unwind_pr_common+0x2c>
 8001556:	f8d8 6000 	ldr.w	r6, [r8]
 800155a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800155e:	2c00      	cmp	r4, #0
 8001560:	d144      	bne.n	80015ec <__gnu_unwind_pr_common+0x1b0>
 8001562:	b122      	cbz	r2, 800156e <__gnu_unwind_pr_common+0x132>
 8001564:	9a01      	ldr	r2, [sp, #4]
 8001566:	2a00      	cmp	r2, #0
 8001568:	d05a      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d058      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156e:	2e00      	cmp	r6, #0
 8001570:	da01      	bge.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001572:	f108 0804 	add.w	r8, r8, #4
 8001576:	3301      	adds	r3, #1
 8001578:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 800157c:	e7c1      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 800157e:	b9ec      	cbnz	r4, 80015bc <__gnu_unwind_pr_common+0x180>
 8001580:	b1ca      	cbz	r2, 80015b6 <__gnu_unwind_pr_common+0x17a>
 8001582:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001586:	f8d8 2000 	ldr.w	r2, [r8]
 800158a:	1c99      	adds	r1, r3, #2
 800158c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001590:	f43f af7d 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 8001594:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001598:	3301      	adds	r3, #1
 800159a:	9104      	str	r1, [sp, #16]
 800159c:	f000 808b 	beq.w	80016b6 <__gnu_unwind_pr_common+0x27a>
 80015a0:	f108 0004 	add.w	r0, r8, #4
 80015a4:	f7ff fdbe 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015a8:	ab04      	add	r3, sp, #16
 80015aa:	4601      	mov	r1, r0
 80015ac:	4628      	mov	r0, r5
 80015ae:	f010 f90f 	bl	80117d0 <__cxa_type_match>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d157      	bne.n	8001666 <__gnu_unwind_pr_common+0x22a>
 80015b6:	f108 0208 	add.w	r2, r8, #8
 80015ba:	e7a2      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80015bc:	210d      	movs	r1, #13
 80015be:	4658      	mov	r0, fp
 80015c0:	f7ff fec8 	bl	8001354 <_Unwind_GetGR>
 80015c4:	6a2b      	ldr	r3, [r5, #32]
 80015c6:	4283      	cmp	r3, r0
 80015c8:	d1f5      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015cc:	4598      	cmp	r8, r3
 80015ce:	d1f2      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7ff fcdf 	bl	8000f94 <selfrel_offset31>
 80015d6:	210f      	movs	r1, #15
 80015d8:	4602      	mov	r2, r0
 80015da:	4658      	mov	r0, fp
 80015dc:	f7ff fee0 	bl	80013a0 <_Unwind_SetGR>
 80015e0:	462a      	mov	r2, r5
 80015e2:	2100      	movs	r1, #0
 80015e4:	4658      	mov	r0, fp
 80015e6:	f7ff fedb 	bl	80013a0 <_Unwind_SetGR>
 80015ea:	e7a6      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80015ec:	210d      	movs	r1, #13
 80015ee:	4658      	mov	r0, fp
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	f7ff feaf 	bl	8001354 <_Unwind_GetGR>
 80015f6:	6a2a      	ldr	r2, [r5, #32]
 80015f8:	9b03      	ldr	r3, [sp, #12]
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d1b7      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 80015fe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001600:	4590      	cmp	r8, r2
 8001602:	d1b4      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 8001604:	2700      	movs	r7, #0
 8001606:	2204      	movs	r2, #4
 8001608:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800160c:	4442      	add	r2, r8
 800160e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001610:	636a      	str	r2, [r5, #52]	@ 0x34
 8001612:	f8d8 2000 	ldr.w	r2, [r8]
 8001616:	42ba      	cmp	r2, r7
 8001618:	db55      	blt.n	80016c6 <__gnu_unwind_pr_common+0x28a>
 800161a:	2201      	movs	r2, #1
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	e7aa      	b.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001620:	9403      	str	r4, [sp, #12]
 8001622:	f108 0a04 	add.w	sl, r8, #4
 8001626:	2600      	movs	r6, #0
 8001628:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800162c:	461c      	mov	r4, r3
 800162e:	e00d      	b.n	800164c <__gnu_unwind_pr_common+0x210>
 8001630:	4650      	mov	r0, sl
 8001632:	9704      	str	r7, [sp, #16]
 8001634:	f7ff fd76 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001638:	2200      	movs	r2, #0
 800163a:	4601      	mov	r1, r0
 800163c:	ab04      	add	r3, sp, #16
 800163e:	4628      	mov	r0, r5
 8001640:	3601      	adds	r6, #1
 8001642:	f10a 0a04 	add.w	sl, sl, #4
 8001646:	f010 f8c3 	bl	80117d0 <__cxa_type_match>
 800164a:	b9e0      	cbnz	r0, 8001686 <__gnu_unwind_pr_common+0x24a>
 800164c:	42a6      	cmp	r6, r4
 800164e:	d1ef      	bne.n	8001630 <__gnu_unwind_pr_common+0x1f4>
 8001650:	210d      	movs	r1, #13
 8001652:	4658      	mov	r0, fp
 8001654:	f7ff fe7e 	bl	8001354 <_Unwind_GetGR>
 8001658:	9b04      	ldr	r3, [sp, #16]
 800165a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800165e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8001662:	2006      	movs	r0, #6
 8001664:	e714      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001666:	4604      	mov	r4, r0
 8001668:	210d      	movs	r1, #13
 800166a:	4658      	mov	r0, fp
 800166c:	f7ff fe72 	bl	8001354 <_Unwind_GetGR>
 8001670:	9e04      	ldr	r6, [sp, #16]
 8001672:	6228      	str	r0, [r5, #32]
 8001674:	2c02      	cmp	r4, #2
 8001676:	bf04      	itt	eq
 8001678:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 800167a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800167e:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001682:	2006      	movs	r0, #6
 8001684:	e704      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001686:	4623      	mov	r3, r4
 8001688:	f8d8 6000 	ldr.w	r6, [r8]
 800168c:	9c03      	ldr	r4, [sp, #12]
 800168e:	e76e      	b.n	800156e <__gnu_unwind_pr_common+0x132>
 8001690:	4640      	mov	r0, r8
 8001692:	f7ff fc7f 	bl	8000f94 <selfrel_offset31>
 8001696:	f108 0204 	add.w	r2, r8, #4
 800169a:	4604      	mov	r4, r0
 800169c:	63aa      	str	r2, [r5, #56]	@ 0x38
 800169e:	4628      	mov	r0, r5
 80016a0:	f010 f8f4 	bl	801188c <__cxa_begin_cleanup>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	f43f aef2 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 80016aa:	4622      	mov	r2, r4
 80016ac:	210f      	movs	r1, #15
 80016ae:	4658      	mov	r0, fp
 80016b0:	f7ff fe76 	bl	80013a0 <_Unwind_SetGR>
 80016b4:	e741      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80016b6:	460c      	mov	r4, r1
 80016b8:	4658      	mov	r0, fp
 80016ba:	210d      	movs	r1, #13
 80016bc:	f7ff fe4a 	bl	8001354 <_Unwind_GetGR>
 80016c0:	4626      	mov	r6, r4
 80016c2:	6228      	str	r0, [r5, #32]
 80016c4:	e7db      	b.n	800167e <__gnu_unwind_pr_common+0x242>
 80016c6:	1c58      	adds	r0, r3, #1
 80016c8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80016cc:	e781      	b.n	80015d2 <__gnu_unwind_pr_common+0x196>
 80016ce:	bf00      	nop
 80016d0:	08011ffb 	.word	0x08011ffb

080016d4 <__aeabi_unwind_cpp_pr0>:
 80016d4:	2300      	movs	r3, #0
 80016d6:	e6b1      	b.n	800143c <__gnu_unwind_pr_common>

080016d8 <__aeabi_unwind_cpp_pr1>:
 80016d8:	2301      	movs	r3, #1
 80016da:	e6af      	b.n	800143c <__gnu_unwind_pr_common>

080016dc <__aeabi_unwind_cpp_pr2>:
 80016dc:	2302      	movs	r3, #2
 80016de:	e6ad      	b.n	800143c <__gnu_unwind_pr_common>

080016e0 <_Unwind_VRS_Pop>:
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	4606      	mov	r6, r0
 80016e6:	b0c3      	sub	sp, #268	@ 0x10c
 80016e8:	4615      	mov	r5, r2
 80016ea:	461c      	mov	r4, r3
 80016ec:	2904      	cmp	r1, #4
 80016ee:	f200 80d1 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 80016f2:	e8df f001 	tbb	[pc, r1]
 80016f6:	51ac      	.short	0x51ac
 80016f8:	2acf      	.short	0x2acf
 80016fa:	03          	.byte	0x03
 80016fb:	00          	.byte	0x00
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	f040 80c9 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001702:	2a10      	cmp	r2, #16
 8001704:	f200 80c6 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001708:	6803      	ldr	r3, [r0, #0]
 800170a:	06dc      	lsls	r4, r3, #27
 800170c:	f100 80e7 	bmi.w	80018de <_Unwind_VRS_Pop+0x1fe>
 8001710:	af20      	add	r7, sp, #128	@ 0x80
 8001712:	4638      	mov	r0, r7
 8001714:	f000 f9aa 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 8001718:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800171a:	4639      	mov	r1, r7
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 0c01 	mov.w	ip, #1
 8001722:	fa0c f203 	lsl.w	r2, ip, r3
 8001726:	422a      	tst	r2, r5
 8001728:	4620      	mov	r0, r4
 800172a:	f103 0301 	add.w	r3, r3, #1
 800172e:	d003      	beq.n	8001738 <_Unwind_VRS_Pop+0x58>
 8001730:	f850 2b04 	ldr.w	r2, [r0], #4
 8001734:	600a      	str	r2, [r1, #0]
 8001736:	4604      	mov	r4, r0
 8001738:	2b04      	cmp	r3, #4
 800173a:	f101 0104 	add.w	r1, r1, #4
 800173e:	d1f0      	bne.n	8001722 <_Unwind_VRS_Pop+0x42>
 8001740:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001742:	4638      	mov	r0, r7
 8001744:	f000 f988 	bl	8001a58 <__gnu_Unwind_Restore_WMMXC>
 8001748:	e099      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800174a:	2c03      	cmp	r4, #3
 800174c:	f040 80a2 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001750:	b294      	uxth	r4, r2
 8001752:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001756:	2b10      	cmp	r3, #16
 8001758:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800175c:	f200 809a 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	071f      	lsls	r7, r3, #28
 8001764:	f100 80c3 	bmi.w	80018ee <_Unwind_VRS_Pop+0x20e>
 8001768:	af20      	add	r7, sp, #128	@ 0x80
 800176a:	4638      	mov	r0, r7
 800176c:	f000 f952 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 8001770:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001772:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001776:	b154      	cbz	r4, 800178e <_Unwind_VRS_Pop+0xae>
 8001778:	460b      	mov	r3, r1
 800177a:	1ad0      	subs	r0, r2, r3
 800177c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001780:	00e4      	lsls	r4, r4, #3
 8001782:	581d      	ldr	r5, [r3, r0]
 8001784:	f843 5b04 	str.w	r5, [r3], #4
 8001788:	428b      	cmp	r3, r1
 800178a:	d1fa      	bne.n	8001782 <_Unwind_VRS_Pop+0xa2>
 800178c:	4422      	add	r2, r4
 800178e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001790:	4638      	mov	r0, r7
 8001792:	f000 f91d 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 8001796:	e072      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001798:	2c01      	cmp	r4, #1
 800179a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800179e:	b295      	uxth	r5, r2
 80017a0:	d071      	beq.n	8001886 <_Unwind_VRS_Pop+0x1a6>
 80017a2:	2c05      	cmp	r4, #5
 80017a4:	d176      	bne.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017a6:	eb08 0905 	add.w	r9, r8, r5
 80017aa:	f1b9 0f20 	cmp.w	r9, #32
 80017ae:	d871      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017b0:	f1b8 0f0f 	cmp.w	r8, #15
 80017b4:	d872      	bhi.n	800189c <_Unwind_VRS_Pop+0x1bc>
 80017b6:	f1b9 0f10 	cmp.w	r9, #16
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	f200 809f 	bhi.w	80018fe <_Unwind_VRS_Pop+0x21e>
 80017c0:	07d9      	lsls	r1, r3, #31
 80017c2:	d508      	bpl.n	80017d6 <_Unwind_VRS_Pop+0xf6>
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	4630      	mov	r0, r6
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f840 3b48 	str.w	r3, [r0], #72
 80017d2:	f000 f8f1 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017d6:	af20      	add	r7, sp, #128	@ 0x80
 80017d8:	4638      	mov	r0, r7
 80017da:	f000 f8ed 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017de:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	f000 80b9 	beq.w	8001958 <_Unwind_VRS_Pop+0x278>
 80017e6:	006d      	lsls	r5, r5, #1
 80017e8:	1e6a      	subs	r2, r5, #1
 80017ea:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 80017ee:	2500      	movs	r5, #0
 80017f0:	3201      	adds	r2, #1
 80017f2:	3904      	subs	r1, #4
 80017f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80017f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80017fc:	f841 0f04 	str.w	r0, [r1, #4]!
 8001800:	4293      	cmp	r3, r2
 8001802:	d1f9      	bne.n	80017f8 <_Unwind_VRS_Pop+0x118>
 8001804:	2d00      	cmp	r5, #0
 8001806:	f000 80a1 	beq.w	800194c <_Unwind_VRS_Pop+0x26c>
 800180a:	4641      	mov	r1, r8
 800180c:	2910      	cmp	r1, #16
 800180e:	bf38      	it	cc
 8001810:	2110      	movcc	r1, #16
 8001812:	006b      	lsls	r3, r5, #1
 8001814:	3910      	subs	r1, #16
 8001816:	466f      	mov	r7, sp
 8001818:	3b01      	subs	r3, #1
 800181a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800181e:	3301      	adds	r3, #1
 8001820:	3904      	subs	r1, #4
 8001822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001826:	f852 0b04 	ldr.w	r0, [r2], #4
 800182a:	f841 0f04 	str.w	r0, [r1, #4]!
 800182e:	429a      	cmp	r2, r3
 8001830:	d1f9      	bne.n	8001826 <_Unwind_VRS_Pop+0x146>
 8001832:	2c01      	cmp	r4, #1
 8001834:	f000 8088 	beq.w	8001948 <_Unwind_VRS_Pop+0x268>
 8001838:	f1b8 0f0f 	cmp.w	r8, #15
 800183c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800183e:	d802      	bhi.n	8001846 <_Unwind_VRS_Pop+0x166>
 8001840:	a820      	add	r0, sp, #128	@ 0x80
 8001842:	f000 f8b5 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 8001846:	4638      	mov	r0, r7
 8001848:	f000 f8ba 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800184c:	e017      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800184e:	bb0c      	cbnz	r4, 8001894 <_Unwind_VRS_Pop+0x1b4>
 8001850:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001852:	4623      	mov	r3, r4
 8001854:	fa1f fc82 	uxth.w	ip, r2
 8001858:	2401      	movs	r4, #1
 800185a:	1d37      	adds	r7, r6, #4
 800185c:	fa04 f103 	lsl.w	r1, r4, r3
 8001860:	ea11 0f0c 	tst.w	r1, ip
 8001864:	4602      	mov	r2, r0
 8001866:	d004      	beq.n	8001872 <_Unwind_VRS_Pop+0x192>
 8001868:	f852 1b04 	ldr.w	r1, [r2], #4
 800186c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8001870:	4610      	mov	r0, r2
 8001872:	3301      	adds	r3, #1
 8001874:	2b10      	cmp	r3, #16
 8001876:	d1f1      	bne.n	800185c <_Unwind_VRS_Pop+0x17c>
 8001878:	04ac      	lsls	r4, r5, #18
 800187a:	d400      	bmi.n	800187e <_Unwind_VRS_Pop+0x19e>
 800187c:	63b0      	str	r0, [r6, #56]	@ 0x38
 800187e:	2000      	movs	r0, #0
 8001880:	b043      	add	sp, #268	@ 0x10c
 8001882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001886:	eb08 0305 	add.w	r3, r8, r5
 800188a:	2b10      	cmp	r3, #16
 800188c:	d802      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 800188e:	f1b8 0f10 	cmp.w	r8, #16
 8001892:	d114      	bne.n	80018be <_Unwind_VRS_Pop+0x1de>
 8001894:	2002      	movs	r0, #2
 8001896:	b043      	add	sp, #268	@ 0x10c
 8001898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800189c:	2d00      	cmp	r5, #0
 800189e:	d0ee      	beq.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	075a      	lsls	r2, r3, #29
 80018a4:	d45c      	bmi.n	8001960 <_Unwind_VRS_Pop+0x280>
 80018a6:	466f      	mov	r7, sp
 80018a8:	4638      	mov	r0, r7
 80018aa:	f000 f88d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ae:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018b0:	006b      	lsls	r3, r5, #1
 80018b2:	f1a8 0110 	sub.w	r1, r8, #16
 80018b6:	3b01      	subs	r3, #1
 80018b8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018bc:	e7af      	b.n	800181e <_Unwind_VRS_Pop+0x13e>
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	07da      	lsls	r2, r3, #31
 80018c2:	d459      	bmi.n	8001978 <_Unwind_VRS_Pop+0x298>
 80018c4:	af20      	add	r7, sp, #128	@ 0x80
 80018c6:	4638      	mov	r0, r7
 80018c8:	f000 f86e 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 80018cc:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	d189      	bne.n	80017e6 <_Unwind_VRS_Pop+0x106>
 80018d2:	3304      	adds	r3, #4
 80018d4:	63b3      	str	r3, [r6, #56]	@ 0x38
 80018d6:	4638      	mov	r0, r7
 80018d8:	f000 f862 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80018dc:	e7cf      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018de:	f023 0310 	bic.w	r3, r3, #16
 80018e2:	6003      	str	r3, [r0, #0]
 80018e4:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80018e8:	f000 f8c0 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 80018ec:	e710      	b.n	8001710 <_Unwind_VRS_Pop+0x30>
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	6003      	str	r3, [r0, #0]
 80018f4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 80018f8:	f000 f88c 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 80018fc:	e734      	b.n	8001768 <_Unwind_VRS_Pop+0x88>
 80018fe:	07d9      	lsls	r1, r3, #31
 8001900:	d508      	bpl.n	8001914 <_Unwind_VRS_Pop+0x234>
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f840 3b48 	str.w	r3, [r0], #72
 800190e:	f000 f853 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	0758      	lsls	r0, r3, #29
 8001916:	d506      	bpl.n	8001926 <_Unwind_VRS_Pop+0x246>
 8001918:	4630      	mov	r0, r6
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	f840 3bd0 	str.w	r3, [r0], #208
 8001922:	f000 f851 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001926:	af20      	add	r7, sp, #128	@ 0x80
 8001928:	4638      	mov	r0, r7
 800192a:	f000 f845 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 800192e:	4668      	mov	r0, sp
 8001930:	f000 f84a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001934:	f1c8 0210 	rsb	r2, r8, #16
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800193c:	f1a9 0510 	sub.w	r5, r9, #16
 8001940:	3a01      	subs	r2, #1
 8001942:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001946:	e753      	b.n	80017f0 <_Unwind_VRS_Pop+0x110>
 8001948:	af20      	add	r7, sp, #128	@ 0x80
 800194a:	e7c2      	b.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 800194c:	2c01      	cmp	r4, #1
 800194e:	d0c0      	beq.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 8001950:	f1b8 0f0f 	cmp.w	r8, #15
 8001954:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001956:	d892      	bhi.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001958:	4638      	mov	r0, r7
 800195a:	f000 f829 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 800195e:	e78e      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f840 3bd0 	str.w	r3, [r0], #208
 8001968:	466f      	mov	r7, sp
 800196a:	f000 f82d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800196e:	4638      	mov	r0, r7
 8001970:	f000 f82a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001976:	e79b      	b.n	80018b0 <_Unwind_VRS_Pop+0x1d0>
 8001978:	4630      	mov	r0, r6
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f840 3b48 	str.w	r3, [r0], #72
 8001982:	f000 f811 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 8001986:	e79d      	b.n	80018c4 <_Unwind_VRS_Pop+0x1e4>

08001988 <__restore_core_regs>:
 8001988:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800198c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001990:	469c      	mov	ip, r3
 8001992:	46a6      	mov	lr, r4
 8001994:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001998:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800199c:	46e5      	mov	sp, ip
 800199e:	bd00      	pop	{pc}

080019a0 <__gnu_Unwind_Restore_VFP>:
 80019a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Save_VFP>:
 80019a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Restore_VFP_D>:
 80019b0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <__gnu_Unwind_Save_VFP_D>:
 80019b8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Restore_WMMXD>:
 80019d0:	ecf0 0102 	ldfe	f0, [r0], #8
 80019d4:	ecf0 1102 	ldfe	f1, [r0], #8
 80019d8:	ecf0 2102 	ldfe	f2, [r0], #8
 80019dc:	ecf0 3102 	ldfe	f3, [r0], #8
 80019e0:	ecf0 4102 	ldfe	f4, [r0], #8
 80019e4:	ecf0 5102 	ldfe	f5, [r0], #8
 80019e8:	ecf0 6102 	ldfe	f6, [r0], #8
 80019ec:	ecf0 7102 	ldfe	f7, [r0], #8
 80019f0:	ecf0 8102 	ldfp	f0, [r0], #8
 80019f4:	ecf0 9102 	ldfp	f1, [r0], #8
 80019f8:	ecf0 a102 	ldfp	f2, [r0], #8
 80019fc:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a00:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a04:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a08:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a0c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <__gnu_Unwind_Save_WMMXD>:
 8001a14:	ece0 0102 	stfe	f0, [r0], #8
 8001a18:	ece0 1102 	stfe	f1, [r0], #8
 8001a1c:	ece0 2102 	stfe	f2, [r0], #8
 8001a20:	ece0 3102 	stfe	f3, [r0], #8
 8001a24:	ece0 4102 	stfe	f4, [r0], #8
 8001a28:	ece0 5102 	stfe	f5, [r0], #8
 8001a2c:	ece0 6102 	stfe	f6, [r0], #8
 8001a30:	ece0 7102 	stfe	f7, [r0], #8
 8001a34:	ece0 8102 	stfp	f0, [r0], #8
 8001a38:	ece0 9102 	stfp	f1, [r0], #8
 8001a3c:	ece0 a102 	stfp	f2, [r0], #8
 8001a40:	ece0 b102 	stfp	f3, [r0], #8
 8001a44:	ece0 c102 	stfp	f4, [r0], #8
 8001a48:	ece0 d102 	stfp	f5, [r0], #8
 8001a4c:	ece0 e102 	stfp	f6, [r0], #8
 8001a50:	ece0 f102 	stfp	f7, [r0], #8
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <__gnu_Unwind_Restore_WMMXC>:
 8001a58:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a5c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a60:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a64:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <__gnu_Unwind_Save_WMMXC>:
 8001a6c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a70:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a74:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a78:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <_Unwind_RaiseException>:
 8001a80:	46ec      	mov	ip, sp
 8001a82:	b500      	push	{lr}
 8001a84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a94:	a901      	add	r1, sp, #4
 8001a96:	f7ff fbd7 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001a9a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a9e:	b012      	add	sp, #72	@ 0x48
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <_Unwind_Resume>:
 8001aa4:	46ec      	mov	ip, sp
 8001aa6:	b500      	push	{lr}
 8001aa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ab8:	a901      	add	r1, sp, #4
 8001aba:	f7ff fc01 	bl	80012c0 <__gnu_Unwind_Resume>
 8001abe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ac2:	b012      	add	sp, #72	@ 0x48
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <_Unwind_Resume_or_Rethrow>:
 8001ac8:	46ec      	mov	ip, sp
 8001aca:	b500      	push	{lr}
 8001acc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001adc:	a901      	add	r1, sp, #4
 8001ade:	f7ff fc11 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001ae2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ae6:	b012      	add	sp, #72	@ 0x48
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <_Unwind_ForcedUnwind>:
 8001aec:	46ec      	mov	ip, sp
 8001aee:	b500      	push	{lr}
 8001af0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001af4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b00:	ab01      	add	r3, sp, #4
 8001b02:	f7ff fbd5 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b06:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b0a:	b012      	add	sp, #72	@ 0x48
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <_Unwind_Backtrace>:
 8001b10:	46ec      	mov	ip, sp
 8001b12:	b500      	push	{lr}
 8001b14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b24:	aa01      	add	r2, sp, #4
 8001b26:	f7ff fc47 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b2a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b2e:	b012      	add	sp, #72	@ 0x48
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <next_unwind_byte>:
 8001b34:	7a02      	ldrb	r2, [r0, #8]
 8001b36:	4603      	mov	r3, r0
 8001b38:	b97a      	cbnz	r2, 8001b5a <next_unwind_byte+0x26>
 8001b3a:	7a42      	ldrb	r2, [r0, #9]
 8001b3c:	b1a2      	cbz	r2, 8001b68 <next_unwind_byte+0x34>
 8001b3e:	6841      	ldr	r1, [r0, #4]
 8001b40:	3a01      	subs	r2, #1
 8001b42:	b410      	push	{r4}
 8001b44:	7242      	strb	r2, [r0, #9]
 8001b46:	6808      	ldr	r0, [r1, #0]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	1d0c      	adds	r4, r1, #4
 8001b4c:	721a      	strb	r2, [r3, #8]
 8001b4e:	0202      	lsls	r2, r0, #8
 8001b50:	605c      	str	r4, [r3, #4]
 8001b52:	0e00      	lsrs	r0, r0, #24
 8001b54:	bc10      	pop	{r4}
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	721a      	strb	r2, [r3, #8]
 8001b60:	0202      	lsls	r2, r0, #8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	0e00      	lsrs	r0, r0, #24
 8001b66:	4770      	bx	lr
 8001b68:	20b0      	movs	r0, #176	@ 0xb0
 8001b6a:	4770      	bx	lr

08001b6c <_Unwind_GetGR.constprop.0>:
 8001b6c:	b500      	push	{lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	2300      	movs	r3, #0
 8001b72:	aa03      	add	r2, sp, #12
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	220c      	movs	r2, #12
 8001b7a:	f7ff fbd3 	bl	8001324 <_Unwind_VRS_Get>
 8001b7e:	9803      	ldr	r0, [sp, #12]
 8001b80:	b005      	add	sp, #20
 8001b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b86:	bf00      	nop

08001b88 <unwind_UCB_from_context>:
 8001b88:	e7f0      	b.n	8001b6c <_Unwind_GetGR.constprop.0>
 8001b8a:	bf00      	nop

08001b8c <__gnu_unwind_execute>:
 8001b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b90:	4606      	mov	r6, r0
 8001b92:	b085      	sub	sp, #20
 8001b94:	460d      	mov	r5, r1
 8001b96:	f04f 0800 	mov.w	r8, #0
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff ffca 	bl	8001b34 <next_unwind_byte>
 8001ba0:	28b0      	cmp	r0, #176	@ 0xb0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	f000 80da 	beq.w	8001d5c <__gnu_unwind_execute+0x1d0>
 8001ba8:	0607      	lsls	r7, r0, #24
 8001baa:	d546      	bpl.n	8001c3a <__gnu_unwind_execute+0xae>
 8001bac:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bb0:	2b80      	cmp	r3, #128	@ 0x80
 8001bb2:	d05e      	beq.n	8001c72 <__gnu_unwind_execute+0xe6>
 8001bb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bb6:	d073      	beq.n	8001ca0 <__gnu_unwind_execute+0x114>
 8001bb8:	d81b      	bhi.n	8001bf2 <__gnu_unwind_execute+0x66>
 8001bba:	2b90      	cmp	r3, #144	@ 0x90
 8001bbc:	f000 809b 	beq.w	8001cf6 <__gnu_unwind_execute+0x16a>
 8001bc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bc2:	d112      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001bc4:	43c3      	mvns	r3, r0
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001bce:	411a      	asrs	r2, r3
 8001bd0:	0701      	lsls	r1, r0, #28
 8001bd2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001bd6:	d501      	bpl.n	8001bdc <__gnu_unwind_execute+0x50>
 8001bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff fd7d 	bl	80016e0 <_Unwind_VRS_Pop>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d0d7      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001bea:	2009      	movs	r0, #9
 8001bec:	b005      	add	sp, #20
 8001bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bf4:	d16d      	bne.n	8001cd2 <__gnu_unwind_execute+0x146>
 8001bf6:	28c6      	cmp	r0, #198	@ 0xc6
 8001bf8:	f000 8093 	beq.w	8001d22 <__gnu_unwind_execute+0x196>
 8001bfc:	28c7      	cmp	r0, #199	@ 0xc7
 8001bfe:	f000 80b2 	beq.w	8001d66 <__gnu_unwind_execute+0x1da>
 8001c02:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c08:	f000 80d2 	beq.w	8001db0 <__gnu_unwind_execute+0x224>
 8001c0c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c0e:	f000 80dd 	beq.w	8001dcc <__gnu_unwind_execute+0x240>
 8001c12:	28c9      	cmp	r0, #201	@ 0xc9
 8001c14:	d1e9      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c16:	4628      	mov	r0, r5
 8001c18:	f7ff ff8c 	bl	8001b34 <next_unwind_byte>
 8001c1c:	0302      	lsls	r2, r0, #12
 8001c1e:	f000 000f 	and.w	r0, r0, #15
 8001c22:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c26:	3001      	adds	r0, #1
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fd56 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d0b0      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c38:	e7d7      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c3a:	0083      	lsls	r3, r0, #2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	1d1f      	adds	r7, r3, #4
 8001c40:	f10d 090c 	add.w	r9, sp, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f8cd 9000 	str.w	r9, [sp]
 8001c4c:	220d      	movs	r2, #13
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fb68 	bl	8001324 <_Unwind_VRS_Get>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	f8cd 9000 	str.w	r9, [sp]
 8001c5a:	0660      	lsls	r0, r4, #25
 8001c5c:	bf4c      	ite	mi
 8001c5e:	1bdf      	submi	r7, r3, r7
 8001c60:	18ff      	addpl	r7, r7, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	220d      	movs	r2, #13
 8001c66:	4619      	mov	r1, r3
 8001c68:	4630      	mov	r0, r6
 8001c6a:	9703      	str	r7, [sp, #12]
 8001c6c:	f7ff fb80 	bl	8001370 <_Unwind_VRS_Set>
 8001c70:	e793      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c72:	4628      	mov	r0, r5
 8001c74:	f7ff ff5e 	bl	8001b34 <next_unwind_byte>
 8001c78:	0224      	lsls	r4, r4, #8
 8001c7a:	4320      	orrs	r0, r4
 8001c7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001c80:	d0b3      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c82:	0104      	lsls	r4, r0, #4
 8001c84:	2300      	movs	r3, #0
 8001c86:	b2a2      	uxth	r2, r4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f7ff fd28 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d1aa      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c94:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001c98:	bf18      	it	ne
 8001c9a:	f04f 0801 	movne.w	r8, #1
 8001c9e:	e77c      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001ca0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ca2:	d051      	beq.n	8001d48 <__gnu_unwind_execute+0x1bc>
 8001ca4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ca6:	f000 80ad 	beq.w	8001e04 <__gnu_unwind_execute+0x278>
 8001caa:	28b3      	cmp	r0, #179	@ 0xb3
 8001cac:	d06d      	beq.n	8001d8a <__gnu_unwind_execute+0x1fe>
 8001cae:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cb2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cb4:	d099      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cb6:	f000 0207 	and.w	r2, r0, #7
 8001cba:	3201      	adds	r2, #1
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff fd0b 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f43f af65 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cd0:	e78b      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cd2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001cd6:	2bd0      	cmp	r3, #208	@ 0xd0
 8001cd8:	d187      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cda:	f000 0207 	and.w	r2, r0, #7
 8001cde:	3201      	adds	r2, #1
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f7ff fcf9 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f43f af53 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cf4:	e779      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 030d 	and.w	r3, r0, #13
 8001cfa:	2b0d      	cmp	r3, #13
 8001cfc:	f43f af75 	beq.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d00:	af03      	add	r7, sp, #12
 8001d02:	2300      	movs	r3, #0
 8001d04:	f000 020f 	and.w	r2, r0, #15
 8001d08:	4619      	mov	r1, r3
 8001d0a:	9700      	str	r7, [sp, #0]
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7ff fb09 	bl	8001324 <_Unwind_VRS_Get>
 8001d12:	2300      	movs	r3, #0
 8001d14:	9700      	str	r7, [sp, #0]
 8001d16:	220d      	movs	r2, #13
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff fb28 	bl	8001370 <_Unwind_VRS_Set>
 8001d20:	e73b      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001d22:	4628      	mov	r0, r5
 8001d24:	f7ff ff06 	bl	8001b34 <next_unwind_byte>
 8001d28:	0302      	lsls	r2, r0, #12
 8001d2a:	f000 000f 	and.w	r0, r0, #15
 8001d2e:	3001      	adds	r0, #1
 8001d30:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d34:	2303      	movs	r3, #3
 8001d36:	4302      	orrs	r2, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff fcd0 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f43f af2a 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d46:	e750      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f7ff fef3 	bl	8001b34 <next_unwind_byte>
 8001d4e:	1e43      	subs	r3, r0, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b0e      	cmp	r3, #14
 8001d54:	4602      	mov	r2, r0
 8001d56:	f67f af41 	bls.w	8001bdc <__gnu_unwind_execute+0x50>
 8001d5a:	e746      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d5c:	f1b8 0f00 	cmp.w	r8, #0
 8001d60:	d040      	beq.n	8001de4 <__gnu_unwind_execute+0x258>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e742      	b.n	8001bec <__gnu_unwind_execute+0x60>
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fee4 	bl	8001b34 <next_unwind_byte>
 8001d6c:	1e43      	subs	r3, r0, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b0e      	cmp	r3, #14
 8001d72:	4602      	mov	r2, r0
 8001d74:	f63f af39 	bhi.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff fcaf 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af09 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d88:	e72f      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7ff fed2 	bl	8001b34 <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	3001      	adds	r0, #1
 8001d98:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4302      	orrs	r2, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff fc9c 	bl	80016e0 <_Unwind_VRS_Pop>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f43f aef6 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dae:	e71c      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001db0:	f000 020f 	and.w	r2, r0, #15
 8001db4:	3201      	adds	r2, #1
 8001db6:	2303      	movs	r3, #3
 8001db8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff fc8e 	bl	80016e0 <_Unwind_VRS_Pop>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f43f aee8 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dca:	e70e      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f7ff feb1 	bl	8001b34 <next_unwind_byte>
 8001dd2:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001dd6:	f000 030f 	and.w	r3, r0, #15
 8001dda:	3210      	adds	r2, #16
 8001ddc:	3301      	adds	r3, #1
 8001dde:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001de2:	e722      	b.n	8001c2a <__gnu_unwind_execute+0x9e>
 8001de4:	ac03      	add	r4, sp, #12
 8001de6:	4643      	mov	r3, r8
 8001de8:	4641      	mov	r1, r8
 8001dea:	220e      	movs	r2, #14
 8001dec:	9400      	str	r4, [sp, #0]
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	9400      	str	r4, [sp, #0]
 8001df6:	4643      	mov	r3, r8
 8001df8:	220f      	movs	r2, #15
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fab7 	bl	8001370 <_Unwind_VRS_Set>
 8001e02:	e7ae      	b.n	8001d62 <__gnu_unwind_execute+0x1d6>
 8001e04:	2300      	movs	r3, #0
 8001e06:	f10d 090c 	add.w	r9, sp, #12
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f8cd 9000 	str.w	r9, [sp]
 8001e12:	4630      	mov	r0, r6
 8001e14:	f7ff fa86 	bl	8001324 <_Unwind_VRS_Get>
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff fe8b 	bl	8001b34 <next_unwind_byte>
 8001e1e:	0602      	lsls	r2, r0, #24
 8001e20:	9c03      	ldr	r4, [sp, #12]
 8001e22:	f04f 0702 	mov.w	r7, #2
 8001e26:	d50b      	bpl.n	8001e40 <__gnu_unwind_execute+0x2b4>
 8001e28:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e2c:	40b8      	lsls	r0, r7
 8001e2e:	4404      	add	r4, r0
 8001e30:	4628      	mov	r0, r5
 8001e32:	9403      	str	r4, [sp, #12]
 8001e34:	f7ff fe7e 	bl	8001b34 <next_unwind_byte>
 8001e38:	0603      	lsls	r3, r0, #24
 8001e3a:	f107 0707 	add.w	r7, r7, #7
 8001e3e:	d4f3      	bmi.n	8001e28 <__gnu_unwind_execute+0x29c>
 8001e40:	fa00 f207 	lsl.w	r2, r0, r7
 8001e44:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e48:	4422      	add	r2, r4
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9203      	str	r2, [sp, #12]
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	220d      	movs	r2, #13
 8001e54:	4619      	mov	r1, r3
 8001e56:	4630      	mov	r0, r6
 8001e58:	f7ff fa8a 	bl	8001370 <_Unwind_VRS_Set>
 8001e5c:	e69d      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001e5e:	bf00      	nop

08001e60 <__gnu_unwind_frame>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	b084      	sub	sp, #16
 8001e68:	f04f 0c03 	mov.w	ip, #3
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	021c      	lsls	r4, r3, #8
 8001e70:	4608      	mov	r0, r1
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	a901      	add	r1, sp, #4
 8001e76:	9401      	str	r4, [sp, #4]
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e7e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e82:	f7ff fe83 	bl	8001b8c <__gnu_unwind_execute>
 8001e86:	b004      	add	sp, #16
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	bf00      	nop

08001e8c <_Unwind_GetRegionStart>:
 8001e8c:	b508      	push	{r3, lr}
 8001e8e:	f7ff fe7b 	bl	8001b88 <unwind_UCB_from_context>
 8001e92:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop

08001e98 <_Unwind_GetLanguageSpecificData>:
 8001e98:	b508      	push	{r3, lr}
 8001e9a:	f7ff fe75 	bl	8001b88 <unwind_UCB_from_context>
 8001e9e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ea0:	79c3      	ldrb	r3, [r0, #7]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	bf00      	nop

08001eac <__aeabi_idiv0>:
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ece:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ed8:	f00b ffb8 	bl	800de4c <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x17c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d126      	bne.n	8001f32 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f00f ffb9 	bl	8011e5c <_Znaj>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e018      	b.n	8001f2a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ef8:	206c      	movs	r0, #108	@ 0x6c
 8001efa:	f00f ff9e 	bl	8011e3a <_Znwj>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461c      	mov	r4, r3
 8001f02:	2501      	movs	r5, #1
 8001f04:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f12:	4620      	mov	r0, r4
 8001f14:	f000 fcaa 	bl	800286c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	dde3      	ble.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f30:	e054      	b.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f32:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x180>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d126      	bne.n	8001f88 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	f00f ff8e 	bl	8011e5c <_Znaj>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e018      	b.n	8001f80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f4e:	206c      	movs	r0, #108	@ 0x6c
 8001f50:	f00f ff73 	bl	8011e3a <_Znwj>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	2501      	movs	r5, #1
 8001f5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 fcf1 	bl	8002950 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	dde3      	ble.n	8001f4e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001f86:	e029      	b.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d125      	bne.n	8001fdc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f90:	2008      	movs	r0, #8
 8001f92:	f00f ff63 	bl	8011e5c <_Znaj>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e018      	b.n	8001fd6 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fa4:	206c      	movs	r0, #108	@ 0x6c
 8001fa6:	f00f ff48 	bl	8011e3a <_Znwj>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461c      	mov	r4, r3
 8001fae:	2501      	movs	r5, #1
 8001fb0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f000 fd38 	bl	8002a34 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	dde3      	ble.n	8001fa4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f825 	bl	8002038 <_ZNK14XNucleoIHM02A14initEv>
	        /*Do nothing*/
	    	//throw std::runtime_error("init failed");
	    }
	}
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	e017      	b.n	8002022 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x172>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ff2:	2d00      	cmp	r5, #0
 8001ff4:	d003      	beq.n	8001ffe <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14e>
 8001ff6:	216c      	movs	r1, #108	@ 0x6c
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f00f fbc3 	bl	8011784 <_ZdlPvj>
 8001ffe:	f00f fbc3 	bl	8011788 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002002:	2d00      	cmp	r5, #0
 8002004:	d003      	beq.n	800200e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x15e>
 8002006:	216c      	movs	r1, #108	@ 0x6c
 8002008:	4620      	mov	r0, r4
 800200a:	f00f fbbb 	bl	8011784 <_ZdlPvj>
 800200e:	f00f fbbb 	bl	8011788 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002012:	2d00      	cmp	r5, #0
 8002014:	d003      	beq.n	800201e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x16e>
 8002016:	216c      	movs	r1, #108	@ 0x6c
 8002018:	4620      	mov	r0, r4
 800201a:	f00f fbb3 	bl	8011784 <_ZdlPvj>
 800201e:	f00f fbb3 	bl	8011788 <__cxa_end_cleanup>
	}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bdb0      	pop	{r4, r5, r7, pc}
 800202a:	bf00      	nop
 800202c:	200002a8 	.word	0x200002a8
 8002030:	200002a9 	.word	0x200002a9
 8002034:	200002aa 	.word	0x200002aa

08002038 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6998      	ldr	r0, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8b9b      	ldrh	r3, [r3, #28]
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	f00b fefe 	bl	800de4c <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 8002050:	2001      	movs	r0, #1
 8002052:	f00b fb9f 	bl	800d794 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6998      	ldr	r0, [r3, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8b9b      	ldrh	r3, [r3, #28]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f00b fef3 	bl	800de4c <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f00b fb94 	bl	800d794 <HAL_Delay>



        return init_all_motor_drivers();
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f892 	bl	8002196 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 8002072:	4603      	mov	r3, r0
    }
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
    }
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e040      	b.n	8002124 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4608      	mov	r0, r1
 80020c4:	4798      	blx	r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d023      	beq.n	800211e <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681d      	ldr	r5, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	33cc      	adds	r3, #204	@ 0xcc
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3314      	adds	r3, #20
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4608      	mov	r0, r1
 8002114:	4798      	blx	r3
 8002116:	4603      	mov	r3, r0
 8002118:	4619      	mov	r1, r3
 800211a:	4628      	mov	r0, r5
 800211c:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b01      	cmp	r3, #1
 8002128:	ddbb      	ble.n	80020a2 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4610      	mov	r0, r2
 8002140:	4798      	blx	r3
 8002142:	4603      	mov	r3, r0
 8002144:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e01b      	b.n	8002184 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	4798      	blx	r3
 8002170:	4603      	mov	r3, r0
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	3204      	adds	r2, #4
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	3301      	adds	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	dde0      	ble.n	800214c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3310      	adds	r3, #16
    }
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bdb0      	pop	{r4, r5, r7, pc}

08002196 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e022      	b.n	80021ea <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3308      	adds	r3, #8
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	3102      	adds	r1, #2
 80021c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4798      	blx	r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e006      	b.n	80021f2 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	ddd9      	ble.n	80021a4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 80021f0:	2301      	movs	r3, #1

    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af04      	add	r7, sp, #16
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a44      	ldr	r2, [pc, #272]	@ (8002320 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 800220e:	3318      	adds	r3, #24
 8002210:	4611      	mov	r1, r2
 8002212:	22b0      	movs	r2, #176	@ 0xb0
 8002214:	4618      	mov	r0, r3
 8002216:	f010 ff5e 	bl	80130d6 <memcpy>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a40      	ldr	r2, [pc, #256]	@ (8002320 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 800221e:	33c8      	adds	r3, #200	@ 0xc8
 8002220:	4611      	mov	r1, r2
 8002222:	22b0      	movs	r2, #176	@ 0xb0
 8002224:	4618      	mov	r0, r3
 8002226:	f010 ff56 	bl	80130d6 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002236:	605a      	str	r2, [r3, #4]

    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002238:	2020      	movs	r0, #32
 800223a:	f00f fdfe 	bl	8011e3a <_Znwj>
 800223e:	4603      	mov	r3, r0
 8002240:	461c      	mov	r4, r3
 8002242:	2501      	movs	r5, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f103 0118 	add.w	r1, r3, #24
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8002250:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002252:	9303      	str	r3, [sp, #12]
 8002254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff fe24 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	609c      	str	r4, [r3, #8]
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 800226c:	2020      	movs	r0, #32
 800226e:	f00f fde4 	bl	8011e3a <_Znwj>
 8002272:	4603      	mov	r3, r0
 8002274:	461c      	mov	r4, r3
 8002276:	2501      	movs	r5, #1
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f103 0118 	add.w	r1, r3, #24
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8002284:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002286:	9303      	str	r3, [sp, #12]
 8002288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800228a:	9302      	str	r3, [sp, #8]
 800228c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4620      	mov	r0, r4
 8002298:	f7ff fe0a 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	60dc      	str	r4, [r3, #12]
    abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fee9 	bl	800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022aa:	6178      	str	r0, [r7, #20]
    abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fee3 	bl	800207c <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022b6:	6138      	str	r0, [r7, #16]
    moteurs = new abstractL6470*[NMOTEURS];
 80022b8:	2010      	movs	r0, #16
 80022ba:	f00f fdcf 	bl	8011e5c <_Znaj>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	611a      	str	r2, [r3, #16]

	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		moteurs[front_left] = moteurs_shield_1[left];
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	601a      	str	r2, [r3, #0]
		moteurs[front_right] = moteurs_shield_1[right];
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	3304      	adds	r3, #4
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	6852      	ldr	r2, [r2, #4]
 80022da:	601a      	str	r2, [r3, #0]
		moteurs[back_left] = moteurs_shield_2[left];
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	3308      	adds	r3, #8
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_2[right];
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	330c      	adds	r3, #12
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	6852      	ldr	r2, [r2, #4]
 80022f2:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_1[right];
	#endif



}
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	e00f      	b.n	8002318 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x11c>
    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 80022f8:	2d00      	cmp	r5, #0
 80022fa:	d003      	beq.n	8002304 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x108>
 80022fc:	2120      	movs	r1, #32
 80022fe:	4620      	mov	r0, r4
 8002300:	f00f fa40 	bl	8011784 <_ZdlPvj>
 8002304:	f00f fa40 	bl	8011788 <__cxa_end_cleanup>
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002308:	2d00      	cmp	r5, #0
 800230a:	d003      	beq.n	8002314 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>
 800230c:	2120      	movs	r1, #32
 800230e:	4620      	mov	r0, r4
 8002310:	f00f fa38 	bl	8011784 <_ZdlPvj>
 8002314:	f00f fa38 	bl	8011788 <__cxa_end_cleanup>
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bdb0      	pop	{r4, r5, r7, pc}
 8002320:	08014c20 	.word	0x08014c20

08002324 <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 8002330:	edd7 7a00 	vldr	s15, [r7]
 8002334:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002350 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 8002338:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800233c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	3d00adfd 	.word	0x3d00adfd

08002354 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b094      	sub	sp, #80	@ 0x50
 8002358:	af00      	add	r7, sp, #0
 800235a:	6178      	str	r0, [r7, #20]
 800235c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002360:	edc7 0a03 	vstr	s1, [r7, #12]
 8002364:	ed87 1a02 	vstr	s2, [r7, #8]
 8002368:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 800236c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	f107 0210 	add.w	r2, r7, #16
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fbcb 	bl	8002b18 <_ZSt3minIfERKT_S2_S2_>
 8002382:	4603      	mov	r3, r0
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 8002388:	4b7f      	ldr	r3, [pc, #508]	@ (8002588 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	f107 0210 	add.w	r2, r7, #16
 8002390:	f107 0320 	add.w	r3, r7, #32
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fbd7 	bl	8002b4a <_ZSt3maxIfERKT_S2_S2_>
 800239c:	4603      	mov	r3, r0
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 80023a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a8:	f107 020c 	add.w	r2, r7, #12
 80023ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fbb0 	bl	8002b18 <_ZSt3minIfERKT_S2_S2_>
 80023b8:	4603      	mov	r3, r0
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 80023be:	4b72      	ldr	r3, [pc, #456]	@ (8002588 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 80023c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023c2:	f107 020c 	add.w	r2, r7, #12
 80023c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fbbc 	bl	8002b4a <_ZSt3maxIfERKT_S2_S2_>
 80023d2:	4603      	mov	r3, r0
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 80023d8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023de:	f107 0208 	add.w	r2, r7, #8
 80023e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fb95 	bl	8002b18 <_ZSt3minIfERKT_S2_S2_>
 80023ee:	4603      	mov	r3, r0
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 80023f4:	4b64      	ldr	r3, [pc, #400]	@ (8002588 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 80023f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80023f8:	f107 0208 	add.w	r2, r7, #8
 80023fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fba1 	bl	8002b4a <_ZSt3maxIfERKT_S2_S2_>
 8002408:	4603      	mov	r3, r0
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 800240e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002412:	637b      	str	r3, [r7, #52]	@ 0x34
 8002414:	1d3a      	adds	r2, r7, #4
 8002416:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fb7b 	bl	8002b18 <_ZSt3minIfERKT_S2_S2_>
 8002422:	4603      	mov	r3, r0
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 8002428:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 800242a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800242c:	1d3a      	adds	r2, r7, #4
 800242e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fb88 	bl	8002b4a <_ZSt3maxIfERKT_S2_S2_>
 800243a:	4603      	mov	r3, r0
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002440:	edd7 7a04 	vldr	s15, [r7, #16]
 8002444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	db01      	blt.n	8002452 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0xfe>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x100>
 8002452:	2300      	movs	r3, #0
 8002454:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 8002458:	edd7 7a03 	vldr	s15, [r7, #12]
 800245c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	bfac      	ite	ge
 8002466:	2301      	movge	r3, #1
 8002468:	2300      	movlt	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002476:	edd7 7a02 	vldr	s15, [r7, #8]
 800247a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002482:	db01      	blt.n	8002488 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x134>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x136>
 8002488:	2300      	movs	r3, #0
 800248a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 800248e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002492:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	bfac      	ite	ge
 800249c:	2301      	movge	r3, #1
 800249e:	2300      	movlt	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c


    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 80024ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80024b0:	eeb0 7ae7 	vabs.f32	s14, s15
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 3a90 	vmov	r3, s15
 80024cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 80024ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d2:	eeb0 7ae7 	vabs.f32	s14, s15
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ea:	ee17 3a90 	vmov	r3, s15
 80024ee:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 80024f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250c:	ee17 3a90 	vmov	r3, s15
 8002510:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 8002512:	edd7 7a01 	vldr	s15, [r7, #4]
 8002516:	eeb0 7ae7 	vabs.f32	s14, s15
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252e:	ee17 3a90 	vmov	r3, s15
 8002532:	63fb      	str	r3, [r7, #60]	@ 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 8002534:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002538:	2300      	movs	r3, #0
 800253a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800253c:	6978      	ldr	r0, [r7, #20]
 800253e:	f000 f825 	bl	800258c <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 8002542:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002546:	2301      	movs	r3, #1
 8002548:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f000 f81e 	bl	800258c <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 8002550:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002554:	2302      	movs	r3, #2
 8002556:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002558:	6978      	ldr	r0, [r7, #20]
 800255a:	f000 f817 	bl	800258c <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 800255e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002562:	2303      	movs	r3, #3
 8002564:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f000 f810 	bl	800258c <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fd8f 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fd8a 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002580:	bf00      	nop
 8002582:	3750      	adds	r7, #80	@ 0x50
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	bf800000 	.word	0xbf800000

0800258c <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	4611      	mov	r1, r2
 8002598:	461a      	mov	r2, r3
 800259a:	460b      	mov	r3, r1
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	4613      	mov	r3, r2
 80025a0:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d012      	beq.n	80025d6 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	79bb      	ldrb	r3, [r7, #6]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	79bb      	ldrb	r3, [r7, #6]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	33fc      	adds	r3, #252	@ 0xfc
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	79f9      	ldrb	r1, [r7, #7]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 80025d4:	e011      	b.n	80025fa <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	79bb      	ldrb	r3, [r7, #6]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4608      	mov	r0, r1
 80025f8:	4798      	blx	r3
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>:
  * @param  vitesse_absolue_FR vitesse du moteur Avant droit
  * @param  vitesse_absolue_BL vitesse du moteur Arriere gauche
  * @param  vitesse_absolue_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_absolues(float vitesse_absolue_FL, float vitesse_absolue_FR, float vitesse_absolue_BL, float vitesse_absolue_BR )
{
 8002602:	b580      	push	{r7, lr}
 8002604:	ed2d 8b04 	vpush	{d8-d9}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	6178      	str	r0, [r7, #20]
 800260e:	ed87 0a04 	vstr	s0, [r7, #16]
 8002612:	edc7 0a03 	vstr	s1, [r7, #12]
 8002616:	ed87 1a02 	vstr	s2, [r7, #8]
 800261a:	edc7 1a01 	vstr	s3, [r7, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800261e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff fe7e 	bl	8002324 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002628:	eeb0 7a40 	vmov.f32	s14, s0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002638:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800263c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002640:	6978      	ldr	r0, [r7, #20]
 8002642:	f7ff fe6f 	bl	8002324 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002646:	eeb0 7a40 	vmov.f32	s14, s0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002656:	eec7 8a27 	vdiv.f32	s17, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 800265a:	ed97 0a02 	vldr	s0, [r7, #8]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff fe60 	bl	8002324 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002664:	eeb0 7a40 	vmov.f32	s14, s0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002674:	ee87 9a27 	vdiv.f32	s18, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 8002678:	ed97 0a01 	vldr	s0, [r7, #4]
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f7ff fe51 	bl	8002324 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002682:	eef0 6a40 	vmov.f32	s13, s0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002696:	eef0 1a47 	vmov.f32	s3, s14
 800269a:	eeb0 1a49 	vmov.f32	s2, s18
 800269e:	eef0 0a68 	vmov.f32	s1, s17
 80026a2:	eeb0 0a48 	vmov.f32	s0, s16
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff fe54 	bl	8002354 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>

}
 80026ac:	bf00      	nop
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	ecbd 8b04 	vpop	{d8-d9}
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    initShield1[1].step_sel = step_mode;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    initShield2[0].step_sel = step_mode;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    initShield2[0].step_sel = step_mode;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    bool return_value = true;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	e01c      	b.n	8002728 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3354      	adds	r3, #84	@ 0x54
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	4611      	mov	r1, r2
 8002710:	4798      	blx	r3
 8002712:	4603      	mov	r3, r0
 8002714:	f083 0301 	eor.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b03      	cmp	r3, #3
 800272c:	dddf      	ble.n	80026ee <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 800272e:	7bfb      	ldrb	r3, [r7, #15]

}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_ZN11BlocMoteurs16motors_stop_hardEv>:
  * Le passage a la vitesse a zero ne respecte pas les parametre de deceleration maximale du robot
  * et se realise au mieux des capacites du driver
  * (contrairement a la methode motors_stop_soft)
  */
void BlocMoteurs::motors_stop_hard()
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	e014      	b.n	800278a <_ZN11BlocMoteurs16motors_stop_hardEv+0x38>
	{
		moteurs[i]->prepare_hard_stop();
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4608      	mov	r0, r1
 8002782:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3301      	adds	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b03      	cmp	r3, #3
 800278e:	dde7      	ble.n	8002760 <_ZN11BlocMoteurs16motors_stop_hardEv+0xe>
	}
    shield_1->perform_prepared_actions();
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fc7d 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fc78 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <_ZN11BlocMoteurs21set_max_speed_moteursEf>:
  * @brief  Set la vitesse maximale des moteurs
  *
  * @param  radian_par_seconde la valeur maximale de vitesse angulaire en rad/s
  */
void BlocMoteurs::set_max_speed_moteurs(float radian_par_seconde)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	ed87 0a00 	vstr	s0, [r7]
	unsigned int pps = rad_to_step(radian_par_seconde);
 80027be:	ed97 0a00 	vldr	s0, [r7]
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fdae 	bl	8002324 <_ZN11BlocMoteurs11rad_to_stepEf>
 80027c8:	eef0 7a40 	vmov.f32	s15, s0
 80027cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d0:	ee17 3a90 	vmov	r3, s15
 80027d4:	60bb      	str	r3, [r7, #8]
	for( int i = 0; i < NMOTEURS; i ++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e013      	b.n	8002804 <_ZN11BlocMoteurs21set_max_speed_moteursEf+0x52>
	{
		moteurs[i]->prepare_set_max_speed(pps);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	33d4      	adds	r3, #212	@ 0xd4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3301      	adds	r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b03      	cmp	r3, #3
 8002808:	dde8      	ble.n	80027dc <_ZN11BlocMoteurs21set_max_speed_moteursEf+0x2a>
	}
    shield_1->perform_prepared_actions();
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fc40 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fc3b 	bl	8002094 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
	initShield1[0].maxspeed = pps;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	initShield1[1].maxspeed = pps;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	initShield2[0].maxspeed = pps;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
	initShield2[1].maxspeed = pps;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
	max_vitesse = pps;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	605a      	str	r2, [r3, #4]
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	80fb      	strh	r3, [r7, #6]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4618      	mov	r0, r3
 8002880:	f009 fc54 	bl	800c12c <_ZN13abstractL6470C1Ev>
 8002884:	4a27      	ldr	r2, [pc, #156]	@ (8002924 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	819a      	strh	r2, [r3, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	611a      	str	r2, [r3, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8b3a      	ldrh	r2, [r7, #24]
 80028a0:	829a      	strh	r2, [r3, #20]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80028b8:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		//throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80028be:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002934 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002938 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 80028e4:	4b15      	ldr	r3, [pc, #84]	@ (800293c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	b2d1      	uxtb	r1, r2
 80028ec:	4a13      	ldr	r2, [pc, #76]	@ (800293c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80028ee:	7011      	strb	r1, [r2, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80028fa:	2220      	movs	r2, #32
 80028fc:	2100      	movs	r1, #0
 80028fe:	4811      	ldr	r0, [pc, #68]	@ (8002944 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002900:	f010 fb15 	bl	8012f2e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002904:	2208      	movs	r2, #8
 8002906:	2100      	movs	r1, #0
 8002908:	480f      	ldr	r0, [pc, #60]	@ (8002948 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 800290a:	f010 fb10 	bl	8012f2e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800290e:	2208      	movs	r2, #8
 8002910:	2100      	movs	r1, #0
 8002912:	480e      	ldr	r0, [pc, #56]	@ (800294c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002914:	f010 fb0b 	bl	8012f2e <memset>
    }
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	080151b0 	.word	0x080151b0
 8002928:	200002a8 	.word	0x200002a8
 800292c:	08015474 	.word	0x08015474
 8002930:	08015668 	.word	0x08015668
 8002934:	08015774 	.word	0x08015774
 8002938:	08015788 	.word	0x08015788
 800293c:	2000020c 	.word	0x2000020c
 8002940:	2000020d 	.word	0x2000020d
 8002944:	20000210 	.word	0x20000210
 8002948:	20000230 	.word	0x20000230
 800294c:	20000238 	.word	0x20000238

08002950 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	80fb      	strh	r3, [r7, #6]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4618      	mov	r0, r3
 8002964:	f009 fbe2 	bl	800c12c <_ZN13abstractL6470C1Ev>
 8002968:	4a27      	ldr	r2, [pc, #156]	@ (8002a08 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	819a      	strh	r2, [r3, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	611a      	str	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8b3a      	ldrh	r2, [r7, #24]
 8002984:	829a      	strh	r2, [r3, #20]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2202      	movs	r2, #2
 8002990:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002992:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a0c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 800299c:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80029a2:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80029a8:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a1c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80029b4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 80029c8:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	b2d1      	uxtb	r1, r2
 80029d0:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029d2:	7011      	strb	r1, [r2, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80029d8:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80029de:	2220      	movs	r2, #32
 80029e0:	2100      	movs	r1, #0
 80029e2:	4811      	ldr	r0, [pc, #68]	@ (8002a28 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 80029e4:	f010 faa3 	bl	8012f2e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80029e8:	2208      	movs	r2, #8
 80029ea:	2100      	movs	r1, #0
 80029ec:	480f      	ldr	r0, [pc, #60]	@ (8002a2c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 80029ee:	f010 fa9e 	bl	8012f2e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80029f2:	2208      	movs	r2, #8
 80029f4:	2100      	movs	r1, #0
 80029f6:	480e      	ldr	r0, [pc, #56]	@ (8002a30 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 80029f8:	f010 fa99 	bl	8012f2e <memset>
    }
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	08014f44 	.word	0x08014f44
 8002a0c:	200002a9 	.word	0x200002a9
 8002a10:	08015794 	.word	0x08015794
 8002a14:	08015988 	.word	0x08015988
 8002a18:	08015a94 	.word	0x08015a94
 8002a1c:	08015aa8 	.word	0x08015aa8
 8002a20:	20000240 	.word	0x20000240
 8002a24:	20000241 	.word	0x20000241
 8002a28:	20000244 	.word	0x20000244
 8002a2c:	20000264 	.word	0x20000264
 8002a30:	2000026c 	.word	0x2000026c

08002a34 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	80fb      	strh	r3, [r7, #6]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f009 fb70 	bl	800c12c <_ZN13abstractL6470C1Ev>
 8002a4c:	4a27      	ldr	r2, [pc, #156]	@ (8002aec <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	819a      	strh	r2, [r3, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	611a      	str	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8b3a      	ldrh	r2, [r7, #24]
 8002a68:	829a      	strh	r2, [r3, #20]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2203      	movs	r2, #3
 8002a74:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002a76:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002a80:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	@ (8002af4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002a86:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002af8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a1a      	ldr	r2, [pc, #104]	@ (8002afc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002a92:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a1a      	ldr	r2, [pc, #104]	@ (8002b00 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002a98:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002aac:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	b2d1      	uxtb	r1, r2
 8002ab4:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002ab6:	7011      	strb	r1, [r2, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002abc:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4811      	ldr	r0, [pc, #68]	@ (8002b0c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002ac8:	f010 fa31 	bl	8012f2e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002acc:	2208      	movs	r2, #8
 8002ace:	2100      	movs	r1, #0
 8002ad0:	480f      	ldr	r0, [pc, #60]	@ (8002b10 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002ad2:	f010 fa2c 	bl	8012f2e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	2100      	movs	r1, #0
 8002ada:	480e      	ldr	r0, [pc, #56]	@ (8002b14 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002adc:	f010 fa27 	bl	8012f2e <memset>
    }
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	08014cd8 	.word	0x08014cd8
 8002af0:	200002aa 	.word	0x200002aa
 8002af4:	08015ab4 	.word	0x08015ab4
 8002af8:	08015ca8 	.word	0x08015ca8
 8002afc:	08015db4 	.word	0x08015db4
 8002b00:	08015dc8 	.word	0x08015dc8
 8002b04:	20000274 	.word	0x20000274
 8002b08:	20000275 	.word	0x20000275
 8002b0c:	20000278 	.word	0x20000278
 8002b10:	20000298 	.word	0x20000298
 8002b14:	200002a0 	.word	0x200002a0

08002b18 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	ed93 7a00 	vldr	s14, [r3]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d501      	bpl.n	8002b3c <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	e000      	b.n	8002b3e <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002b3c:	687b      	ldr	r3, [r7, #4]
    }
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	d501      	bpl.n	8002b6e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	e000      	b.n	8002b70 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002b6e:	687b      	ldr	r3, [r7, #4]
    }
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	4a05      	ldr	r2, [pc, #20]	@ (8002b9c <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f009 fadd 	bl	800c14c <_ZN13abstractL6470D1Ev>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	08014cd8 	.word	0x08014cd8

08002ba0 <_ZN5L6470I8shield_3ED0Ev>:
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ffe7 	bl	8002b7c <_ZN5L6470I8shield_3ED1Ev>
 8002bae:	216c      	movs	r1, #108	@ 0x6c
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f00e fde7 	bl	8011784 <_ZdlPvj>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_ZN5L6470I8shield_2ED1Ev>:
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	4a05      	ldr	r2, [pc, #20]	@ (8002be0 <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f009 fabb 	bl	800c14c <_ZN13abstractL6470D1Ev>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	08014f44 	.word	0x08014f44

08002be4 <_ZN5L6470I8shield_2ED0Ev>:
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ffe7 	bl	8002bc0 <_ZN5L6470I8shield_2ED1Ev>
 8002bf2:	216c      	movs	r1, #108	@ 0x6c
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f00e fdc5 	bl	8011784 <_ZdlPvj>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZN5L6470I8shield_1ED1Ev>:
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4a05      	ldr	r2, [pc, #20]	@ (8002c24 <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f009 fa99 	bl	800c14c <_ZN13abstractL6470D1Ev>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	080151b0 	.word	0x080151b0

08002c28 <_ZN5L6470I8shield_1ED0Ev>:
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ffe7 	bl	8002c04 <_ZN5L6470I8shield_1ED1Ev>
 8002c36:	216c      	movs	r1, #108	@ 0x6c
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f00e fda3 	bl	8011784 <_ZdlPvj>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6839      	ldr	r1, [r7, #0]
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
 8002c62:	4603      	mov	r3, r0
    }
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
 8002c82:	4603      	mov	r3, r0
    }
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
 8002caa:	4603      	mov	r3, r0
    }
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002cc4:	681c      	ldr	r4, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	47a0      	blx	r4
 8002cde:	4603      	mov	r3, r0
    }
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd90      	pop	{r4, r7, pc}

08002ce8 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002cf8:	681c      	ldr	r4, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2102      	movs	r1, #2
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	47a0      	blx	r4
 8002d12:	4603      	mov	r3, r0
    }
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd90      	pop	{r4, r7, pc}

08002d1c <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d2c:	681c      	ldr	r4, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002d36:	681d      	ldr	r5, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2103      	movs	r1, #3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	47a8      	blx	r5
 8002d50:	eef0 7a40 	vmov.f32	s15, s0
 8002d54:	eeb0 0a67 	vmov.f32	s0, s15
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	47a0      	blx	r4
 8002d5c:	4603      	mov	r3, r0
    }
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bdb0      	pop	{r4, r5, r7, pc}

08002d66 <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002d66:	b5b0      	push	{r4, r5, r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d76:	681c      	ldr	r4, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d80:	681d      	ldr	r5, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2106      	movs	r1, #6
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	47a8      	blx	r5
 8002d9c:	eef0 7a40 	vmov.f32	s15, s0
 8002da0:	eeb0 0a67 	vmov.f32	s0, s15
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	47a0      	blx	r4
 8002da8:	4603      	mov	r3, r0
    }
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}

08002db2 <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002db2:	b5b0      	push	{r4, r5, r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dc2:	681c      	ldr	r4, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002dcc:	681d      	ldr	r5, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2107      	movs	r1, #7
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4619      	mov	r1, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	47a8      	blx	r5
 8002de8:	eef0 7a40 	vmov.f32	s15, s0
 8002dec:	eeb0 0a67 	vmov.f32	s0, s15
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	47a0      	blx	r4
 8002df4:	4603      	mov	r3, r0
    }
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}

08002dfe <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002dfe:	b5b0      	push	{r4, r5, r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e0e:	681c      	ldr	r4, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e18:	681d      	ldr	r5, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2104      	movs	r1, #4
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	47a8      	blx	r5
 8002e34:	eef0 7a40 	vmov.f32	s15, s0
 8002e38:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	47a0      	blx	r4
 8002e40:	4603      	mov	r3, r0
    }
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bdb0      	pop	{r4, r5, r7, pc}

08002e4a <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002e4a:	b5b0      	push	{r4, r5, r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e5a:	681c      	ldr	r4, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002e64:	681d      	ldr	r5, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2105      	movs	r1, #5
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	47a8      	blx	r5
 8002e80:	eef0 7a40 	vmov.f32	s15, s0
 8002e84:	eeb0 0a67 	vmov.f32	s0, s15
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	47a0      	blx	r4
 8002e8c:	4603      	mov	r3, r0
    }
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bdb0      	pop	{r4, r5, r7, pc}

08002e96 <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002eb8:	2300      	movs	r3, #0
    }
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	b2d1      	uxtb	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	4798      	blx	r3
    }
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
    }
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002f18:	681c      	ldr	r4, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2100      	movs	r1, #0
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2102      	movs	r1, #2
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	47a0      	blx	r4
    }
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd90      	pop	{r4, r7, pc}

08002f3c <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002f4e:	681c      	ldr	r4, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	2102      	movs	r1, #2
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	47a0      	blx	r4
    }
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}

08002f72 <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 8002f72:	b590      	push	{r4, r7, lr}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002f84:	681c      	ldr	r4, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	ee07 2a90 	vmov	s15, r2
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2106      	movs	r1, #6
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	47a0      	blx	r4
        return true;
 8002fac:	2301      	movs	r3, #1
    }
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}

08002fb6 <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 8002fb6:	b590      	push	{r4, r7, lr}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002fc8:	681c      	ldr	r4, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	ee07 2a90 	vmov	s15, r2
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2107      	movs	r1, #7
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	47a0      	blx	r4
        return true;
 8002ff0:	2301      	movs	r3, #1
    }
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}

08002ffa <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8002ffa:	b590      	push	{r4, r7, lr}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800300c:	681c      	ldr	r4, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	ee07 2a90 	vmov	s15, r2
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	eeb0 0a67 	vmov.f32	s0, s15
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	2104      	movs	r1, #4
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	47a0      	blx	r4
        return true;
 8003034:	2301      	movs	r3, #1
    }
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}

0800303e <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 800303e:	b590      	push	{r4, r7, lr}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003050:	681c      	ldr	r4, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	ee07 2a90 	vmov	s15, r2
 8003062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003066:	eeb0 0a67 	vmov.f32	s0, s15
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	2105      	movs	r1, #5
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	47a0      	blx	r4
        return true;
 8003078:	2301      	movs	r3, #1
    }
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}

08003082 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	2b07      	cmp	r3, #7
 8003092:	d901      	bls.n	8003098 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8003094:	2300      	movs	r3, #0
 8003096:	e00f      	b.n	80030b8 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3380      	adds	r3, #128	@ 0x80
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	2115      	movs	r1, #21
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
        return true;
 80030b6:	2301      	movs	r3, #1
    }
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80030d2:	681c      	ldr	r4, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6839      	ldr	r1, [r7, #0]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	47a0      	blx	r4
    }
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd90      	pop	{r4, r7, pc}

080030f4 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 800310a:	681c      	ldr	r4, [r3, #0]
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 8003112:	2501      	movs	r5, #1
 8003114:	e000      	b.n	8003118 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 8003116:	2500      	movs	r5, #0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	4798      	blx	r3
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	4629      	mov	r1, r5
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	47a0      	blx	r4
    }
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bdb0      	pop	{r4, r5, r7, pc}

0800313a <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
    }
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
    }
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8003176:	b5b0      	push	{r4, r5, r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	72fb      	strb	r3, [r7, #11]
 8003184:	4613      	mov	r3, r2
 8003186:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003190:	681c      	ldr	r4, [r3, #0]
 8003192:	7abb      	ldrb	r3, [r7, #10]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003198:	2501      	movs	r5, #1
 800319a:	e000      	b.n	800319e <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800319c:	2500      	movs	r5, #0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	ee07 2a90 	vmov	s15, r2
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	eeb0 0a67 	vmov.f32	s0, s15
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	4798      	blx	r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	7af9      	ldrb	r1, [r7, #11]
 80031be:	462a      	mov	r2, r5
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	47a0      	blx	r4
    }
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bdb0      	pop	{r4, r5, r7, pc}

080031cc <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 80031cc:	b5b0      	push	{r4, r5, r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80031e0:	681c      	ldr	r4, [r3, #0]
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 80031e8:	2501      	movs	r5, #1
 80031ea:	e000      	b.n	80031ee <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 80031ec:	2500      	movs	r5, #0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2106      	movs	r1, #6
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
 8003202:	4629      	mov	r1, r5
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	47a0      	blx	r4
    }
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bdb0      	pop	{r4, r5, r7, pc}

08003210 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8003210:	b5b0      	push	{r4, r5, r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	460b      	mov	r3, r1
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8003226:	681c      	ldr	r4, [r3, #0]
 8003228:	7afb      	ldrb	r3, [r7, #11]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 800322e:	2501      	movs	r5, #1
 8003230:	e000      	b.n	8003234 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 8003232:	2500      	movs	r5, #0
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	ee07 2a90 	vmov	s15, r2
 8003244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003248:	eeb0 0a67 	vmov.f32	s0, s15
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	4798      	blx	r3
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	4629      	mov	r1, r5
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	47a0      	blx	r4
    }
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bdb0      	pop	{r4, r5, r7, pc}

08003262 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	460b      	mov	r3, r1
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	7afa      	ldrb	r2, [r7, #11]
 800327c:	2a01      	cmp	r2, #1
 800327e:	d101      	bne.n	8003284 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 8003280:	2101      	movs	r1, #1
 8003282:	e000      	b.n	8003286 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 8003284:	2100      	movs	r1, #0
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	4798      	blx	r3
    }
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
    }
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
    }
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4798      	blx	r3
    }
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
    }
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8003314:	bf00      	nop
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2101      	movs	r1, #1
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ef      	bne.n	8003316 <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3380      	adds	r3, #128	@ 0x80
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	2a01      	cmp	r2, #1
 8003366:	d101      	bne.n	800336c <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8003368:	2201      	movs	r2, #1
 800336a:	e000      	b.n	800336e <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800336c:	2200      	movs	r2, #0
 800336e:	4611      	mov	r1, r2
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
    }
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
 8003388:	4613      	mov	r3, r2
 800338a:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	78ba      	ldrb	r2, [r7, #2]
 8003398:	2a01      	cmp	r2, #1
 800339a:	d101      	bne.n	80033a0 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800339c:	2201      	movs	r2, #1
 800339e:	e000      	b.n	80033a2 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80033a0:	2200      	movs	r2, #0
 80033a2:	78f9      	ldrb	r1, [r7, #3]
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
    }
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
    }
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	4611      	mov	r1, r2
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2100      	movs	r1, #0
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2102      	movs	r1, #2
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2103      	movs	r1, #3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2106      	movs	r1, #6
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2204      	movs	r2, #4
 80034b6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2107      	movs	r1, #7
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2205      	movs	r2, #5
 80034de:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2104      	movs	r1, #4
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2206      	movs	r2, #6
 8003506:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2105      	movs	r1, #5
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2207      	movs	r2, #7
 800352e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 800354c:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4906      	ldr	r1, [pc, #24]	@ (8003578 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2208      	movs	r2, #8
 8003566:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000275 	.word	0x20000275
 8003578:	20000278 	.word	0x20000278

0800357c <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	b2d1      	uxtb	r1, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2102      	movs	r1, #2
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2209      	movs	r2, #9
 80035f0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800360e:	681c      	ldr	r4, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
 8003620:	4603      	mov	r3, r0
 8003622:	461a      	mov	r2, r3
 8003624:	2102      	movs	r1, #2
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}

0800363a <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 800363a:	b590      	push	{r4, r7, lr}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800364c:	681c      	ldr	r4, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	ee07 2a90 	vmov	s15, r2
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	eeb0 0a67 	vmov.f32	s0, s15
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	2103      	movs	r1, #3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bd90      	pop	{r4, r7, pc}

08003684 <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003696:	681c      	ldr	r4, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	ee07 2a90 	vmov	s15, r2
 80036a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ac:	eeb0 0a67 	vmov.f32	s0, s15
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	2106      	movs	r1, #6
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}

080036ce <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 80036ce:	b590      	push	{r4, r7, lr}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036e0:	681c      	ldr	r4, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	ee07 2a90 	vmov	s15, r2
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	eeb0 0a67 	vmov.f32	s0, s15
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	4603      	mov	r3, r0
 8003700:	461a      	mov	r2, r3
 8003702:	2107      	movs	r1, #7
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}

08003718 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800372a:	681c      	ldr	r4, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	ee07 2a90 	vmov	s15, r2
 800373c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003740:	eeb0 0a67 	vmov.f32	s0, s15
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	2104      	movs	r1, #4
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bd90      	pop	{r4, r7, pc}

08003762 <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8003762:	b590      	push	{r4, r7, lr}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003774:	681c      	ldr	r4, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	ee07 2a90 	vmov	s15, r2
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	eeb0 0a67 	vmov.f32	s0, s15
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	2105      	movs	r1, #5
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd90      	pop	{r4, r7, pc}

080037ac <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80037be:	681c      	ldr	r4, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6839      	ldr	r1, [r7, #0]
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
 80037d0:	4603      	mov	r3, r0
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}

080037e8 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80037fe:	681c      	ldr	r4, [r3, #0]
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8003806:	2501      	movs	r5, #1
 8003808:	e000      	b.n	800380c <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 800380a:	2500      	movs	r5, #0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	4798      	blx	r3
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	4629      	mov	r1, r5
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bdb0      	pop	{r4, r5, r7, pc}

08003836 <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8003882:	b5b0      	push	{r4, r5, r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	72fb      	strb	r3, [r7, #11]
 8003890:	4613      	mov	r3, r2
 8003892:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800389c:	681c      	ldr	r4, [r3, #0]
 800389e:	7abb      	ldrb	r3, [r7, #10]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80038a4:	2501      	movs	r5, #1
 80038a6:	e000      	b.n	80038aa <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80038a8:	2500      	movs	r5, #0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	ee07 2a90 	vmov	s15, r2
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	4798      	blx	r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	7af9      	ldrb	r1, [r7, #11]
 80038ca:	462a      	mov	r2, r5
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bdb0      	pop	{r4, r5, r7, pc}

080038e0 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80038f4:	681c      	ldr	r4, [r3, #0]
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 80038fc:	2501      	movs	r5, #1
 80038fe:	e000      	b.n	8003902 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8003900:	2500      	movs	r5, #0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2106      	movs	r1, #6
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	4629      	mov	r1, r5
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bdb0      	pop	{r4, r5, r7, pc}

0800392c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 800392c:	b5b0      	push	{r4, r5, r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	460b      	mov	r3, r1
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003942:	681c      	ldr	r4, [r3, #0]
 8003944:	7afb      	ldrb	r3, [r7, #11]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 800394a:	2501      	movs	r5, #1
 800394c:	e000      	b.n	8003950 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 800394e:	2500      	movs	r5, #0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	ee07 2a90 	vmov	s15, r2
 8003960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003964:	eeb0 0a67 	vmov.f32	s0, s15
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	4798      	blx	r3
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	4629      	mov	r1, r5
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bdb0      	pop	{r4, r5, r7, pc}

08003986 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	460b      	mov	r3, r1
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	7afa      	ldrb	r2, [r7, #11]
 80039a0:	2a01      	cmp	r2, #1
 80039a2:	d101      	bne.n	80039a8 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 80039a4:	2101      	movs	r1, #1
 80039a6:	e000      	b.n	80039aa <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 80039a8:	2100      	movs	r1, #0
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	2a01      	cmp	r2, #1
 8003a72:	d101      	bne.n	8003a78 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003a74:	2201      	movs	r2, #1
 8003a76:	e000      	b.n	8003a7a <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	70fb      	strb	r3, [r7, #3]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	78ba      	ldrb	r2, [r7, #2]
 8003aac:	2a01      	cmp	r2, #1
 8003aae:	d101      	bne.n	8003ab4 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	e000      	b.n	8003ab6 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	78f9      	ldrb	r1, [r7, #3]
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
 8003b08:	4603      	mov	r3, r0
    }
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	2b07      	cmp	r3, #7
 8003b40:	f200 80fe 	bhi.w	8003d40 <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003b44:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b6d 	.word	0x08003b6d
 8003b50:	08003b99 	.word	0x08003b99
 8003b54:	08003bc7 	.word	0x08003bc7
 8003b58:	08003c0b 	.word	0x08003c0b
 8003b5c:	08003c51 	.word	0x08003c51
 8003b60:	08003c97 	.word	0x08003c97
 8003b64:	08003cdd 	.word	0x08003cdd
 8003b68:	08003d23 	.word	0x08003d23
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003b74:	681c      	ldr	r4, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6a12      	ldr	r2, [r2, #32]
 8003b84:	7b92      	ldrb	r2, [r2, #14]
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	47a0      	blx	r4
 8003b94:	4603      	mov	r3, r0
 8003b96:	e0d4      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003ba0:	681c      	ldr	r4, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6a12      	ldr	r2, [r2, #32]
 8003bb0:	3228      	adds	r2, #40	@ 0x28
 8003bb2:	7b92      	ldrb	r2, [r2, #14]
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	47a0      	blx	r4
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	e0bd      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bce:	681c      	ldr	r4, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003bd8:	681d      	ldr	r5, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6a12      	ldr	r2, [r2, #32]
 8003be8:	323c      	adds	r2, #60	@ 0x3c
 8003bea:	7b92      	ldrb	r2, [r2, #14]
 8003bec:	6839      	ldr	r1, [r7, #0]
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	47a8      	blx	r5
 8003bfa:	eef0 7a40 	vmov.f32	s15, s0
 8003bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	47a0      	blx	r4
 8003c06:	4603      	mov	r3, r0
 8003c08:	e09b      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c12:	681c      	ldr	r4, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c1c:	681d      	ldr	r5, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6a12      	ldr	r2, [r2, #32]
 8003c2c:	3278      	adds	r2, #120	@ 0x78
 8003c2e:	7b92      	ldrb	r2, [r2, #14]
 8003c30:	6839      	ldr	r1, [r7, #0]
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	47a8      	blx	r5
 8003c40:	eef0 7a40 	vmov.f32	s15, s0
 8003c44:	eeb0 0a67 	vmov.f32	s0, s15
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	47a0      	blx	r4
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	e078      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c58:	681c      	ldr	r4, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003c62:	681d      	ldr	r5, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6a12      	ldr	r2, [r2, #32]
 8003c72:	328c      	adds	r2, #140	@ 0x8c
 8003c74:	7b92      	ldrb	r2, [r2, #14]
 8003c76:	6839      	ldr	r1, [r7, #0]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	47a8      	blx	r5
 8003c86:	eef0 7a40 	vmov.f32	s15, s0
 8003c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	47a0      	blx	r4
 8003c92:	4603      	mov	r3, r0
 8003c94:	e055      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c9e:	681c      	ldr	r4, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003ca8:	681d      	ldr	r5, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6a12      	ldr	r2, [r2, #32]
 8003cb8:	3250      	adds	r2, #80	@ 0x50
 8003cba:	7b92      	ldrb	r2, [r2, #14]
 8003cbc:	6839      	ldr	r1, [r7, #0]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	47a8      	blx	r5
 8003ccc:	eef0 7a40 	vmov.f32	s15, s0
 8003cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	47a0      	blx	r4
 8003cd8:	4603      	mov	r3, r0
 8003cda:	e032      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ce4:	681c      	ldr	r4, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003cee:	681d      	ldr	r5, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6a12      	ldr	r2, [r2, #32]
 8003cfe:	3264      	adds	r2, #100	@ 0x64
 8003d00:	7b92      	ldrb	r2, [r2, #14]
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
 8003d08:	4603      	mov	r3, r0
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	47a8      	blx	r5
 8003d12:	eef0 7a40 	vmov.f32	s15, s0
 8003d16:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	47a0      	blx	r4
 8003d1e:	4603      	mov	r3, r0
 8003d20:	e00f      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2104      	movs	r1, #4
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e002      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003d40:	2300      	movs	r3, #0
        }
    }
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4a:	bf00      	nop

08003d4c <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6898      	ldr	r0, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	899b      	ldrh	r3, [r3, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f00a f874 	bl	800de4c <HAL_GPIO_WritePin>
    }
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d7c:	d303      	bcc.n	8003d86 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8003d84:	e000      	b.n	8003d88 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003d86:	683b      	ldr	r3, [r7, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	db05      	blt.n	8003db0 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003daa:	da01      	bge.n	8003db0 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	e00c      	b.n	8003dca <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8003db6:	db06      	blt.n	8003dc6 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	da03      	bge.n	8003dc6 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8003dc4:	e001      	b.n	8003dca <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003dc6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	ee07 3a90 	vmov	s15, r3
 8003de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dec:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003e04 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003df0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003df4:	eeb0 0a67 	vmov.f32	s0, s15
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	3c74242a 	.word	0x3c74242a

08003e08 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003e14:	edd7 7a00 	vldr	s15, [r7]
 8003e18:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003e4c <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	d80a      	bhi.n	8003e3c <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003e26:	ed97 7a00 	vldr	s14, [r7]
 8003e2a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003e50 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e36:	ee17 3a90 	vmov	r3, s15
 8003e3a:	e000      	b.n	8003e3e <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	4674241b 	.word	0x4674241b
 8003e50:	3c74242a 	.word	0x3c74242a

08003e54 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8003e60:	887b      	ldrh	r3, [r7, #2]
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e66:	d209      	bcs.n	8003e7c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e72:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003e90 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8003e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e7a:	e001      	b.n	8003e80 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003e7c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003e94 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8003e80:	eeb0 0a67 	vmov.f32	s0, s15
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	4168d4fe 	.word	0x4168d4fe
 8003e94:	00000000 	.word	0x00000000

08003e98 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003ea4:	edd7 7a00 	vldr	s15, [r7]
 8003ea8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003edc <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	d80b      	bhi.n	8003ece <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003eb6:	ed97 7a00 	vldr	s14, [r7]
 8003eba:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003ee0 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8003ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec6:	ee17 3a90 	vmov	r3, s15
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	e000      	b.n	8003ed0 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	4768c671 	.word	0x4768c671
 8003ee0:	4168d4fe 	.word	0x4168d4fe

08003ee4 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef6:	d209      	bcs.n	8003f0c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8003ef8:	887b      	ldrh	r3, [r7, #2]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f02:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003f20 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 8003f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f0a:	e001      	b.n	8003f10 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003f0c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003f24 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 8003f10:	eeb0 0a67 	vmov.f32	s0, s15
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	4168d4fe 	.word	0x4168d4fe
 8003f24:	00000000 	.word	0x00000000

08003f28 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8003f34:	edd7 7a00 	vldr	s15, [r7]
 8003f38:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003f6c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8003f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f44:	d80b      	bhi.n	8003f5e <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003f46:	ed97 7a00 	vldr	s14, [r7]
 8003f4a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003f70 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 8003f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f56:	ee17 3a90 	vmov	r3, s15
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	e000      	b.n	8003f60 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	4768c671 	.word	0x4768c671
 8003f70:	4168d4fe 	.word	0x4168d4fe

08003f74 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8003f80:	887b      	ldrh	r3, [r7, #2]
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f86:	d209      	bcs.n	8003f9c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8003f88:	887b      	ldrh	r3, [r7, #2]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f92:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003fb0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8003f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f9a:	e001      	b.n	8003fa0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003f9c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003fb4 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8003fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	4174240b 	.word	0x4174240b
 8003fb4:	00000000 	.word	0x00000000

08003fb8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8003fc4:	edd7 7a00 	vldr	s15, [r7]
 8003fc8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003ffc <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8003fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	d80b      	bhi.n	8003fee <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8003fd6:	ed97 7a00 	vldr	s14, [r7]
 8003fda:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004000 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8003fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe6:	ee17 3a90 	vmov	r3, s15
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	e000      	b.n	8003ff0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	4673e702 	.word	0x4673e702
 8004000:	4174240b 	.word	0x4174240b

08004004 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8004010:	887b      	ldrh	r3, [r7, #2]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004016:	d209      	bcs.n	800402c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004022:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004040 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8004026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800402a:	e001      	b.n	8004030 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 800402c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004044 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8004030:	eeb0 0a67 	vmov.f32	s0, s15
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	3e742401 	.word	0x3e742401
 8004044:	00000000 	.word	0x00000000

08004048 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004054:	edd7 7a00 	vldr	s15, [r7]
 8004058:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800408c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 800405c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004064:	d80b      	bhi.n	800407e <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8004066:	ed97 7a00 	vldr	s14, [r7]
 800406a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004090 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 800406e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004076:	ee17 3a90 	vmov	r3, s15
 800407a:	b29b      	uxth	r3, r3
 800407c:	e000      	b.n	8004080 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	447414bf 	.word	0x447414bf
 8004090:	3e742401 	.word	0x3e742401

08004094 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 80040a0:	887b      	ldrh	r3, [r7, #2]
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a6:	d219      	bcs.n	80040dc <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 80040a8:	887b      	ldrh	r3, [r7, #2]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fa6a 	bl	8000584 <__aeabi_i2d>
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 80040b6:	f7fc f919 	bl	80002ec <__adddf3>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 80040c8:	f7fc fac6 	bl	8000658 <__aeabi_dmul>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	f7fc fd98 	bl	8000c08 <__aeabi_d2f>
 80040d8:	4603      	mov	r3, r0
 80040da:	e001      	b.n	80040e0 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 80040dc:	f04f 0300 	mov.w	r3, #0
}
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eeb0 0a67 	vmov.f32	s0, s15
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	3fe00000 	.word	0x3fe00000
 80040f4:	402e8000 	.word	0x402e8000

080040f8 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8004104:	edd7 7a00 	vldr	s15, [r7]
 8004108:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004144 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 800410c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004114:	d80f      	bhi.n	8004136 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8004116:	ed97 7a00 	vldr	s14, [r7]
 800411a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004148 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 800411e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004122:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800412a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800412e:	ee17 3a90 	vmov	r3, s15
 8004132:	b29b      	uxth	r3, r3
 8004134:	e000      	b.n	8004138 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	4673e180 	.word	0x4673e180
 8004148:	41740000 	.word	0x41740000

0800414c <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800415e:	d209      	bcs.n	8004174 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8004160:	887b      	ldrh	r3, [r7, #2]
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800416a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004188 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800416e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004172:	e001      	b.n	8004178 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004174:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800418c <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8004178:	eeb0 0a67 	vmov.f32	s0, s15
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	3d7423f4 	.word	0x3d7423f4
 800418c:	00000000 	.word	0x00000000

08004190 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800419c:	edd7 7a00 	vldr	s15, [r7]
 80041a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80041d4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 80041a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ac:	d80b      	bhi.n	80041c6 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 80041ae:	ed97 7a00 	vldr	s14, [r7]
 80041b2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80041d8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 80041b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	ee17 3a90 	vmov	r3, s15
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	e000      	b.n	80041c8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	44742023 	.word	0x44742023
 80041d8:	3d7423f4 	.word	0x3d7423f4

080041dc <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004208 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 80041f6:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80041fa:	eeb0 0a67 	vmov.f32	s0, s15
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	3783956e 	.word	0x3783956e

0800420c <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004218:	edd7 7a02 	vldr	s15, [r7, #8]
 800421c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004254 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 8004220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	d80c      	bhi.n	8004244 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800422a:	ed97 7a02 	vldr	s14, [r7, #8]
 800422e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004258 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 8004232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423a:	edc7 7a01 	vstr	s15, [r7, #4]
 800423e:	793b      	ldrb	r3, [r7, #4]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e000      	b.n	8004246 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	3b8311d9 	.word	0x3b8311d9
 8004258:	3783956e 	.word	0x3783956e

0800425c <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004272:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004288 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8004276:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 800427a:	eeb0 0a67 	vmov.f32	s0, s15
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	3783956e 	.word	0x3783956e

0800428c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8004298:	edd7 7a02 	vldr	s15, [r7, #8]
 800429c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80042d4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 80042a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d80c      	bhi.n	80042c4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80042aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80042ae:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80042d8 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 80042b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80042be:	793b      	ldrb	r3, [r7, #4]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e000      	b.n	80042c6 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	3b8311d9 	.word	0x3b8311d9
 80042d8:	3783956e 	.word	0x3783956e

080042dc <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004308 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80042f6:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80042fa:	eeb0 0a67 	vmov.f32	s0, s15
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	3783956e 	.word	0x3783956e

0800430c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004318:	edd7 7a02 	vldr	s15, [r7, #8]
 800431c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004354 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8004320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004328:	d80c      	bhi.n	8004344 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800432a:	ed97 7a02 	vldr	s14, [r7, #8]
 800432e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004358 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8004332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433a:	edc7 7a01 	vstr	s15, [r7, #4]
 800433e:	793b      	ldrb	r3, [r7, #4]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e000      	b.n	8004346 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	3b8311d9 	.word	0x3b8311d9
 8004358:	3783956e 	.word	0x3783956e

0800435c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	2b0f      	cmp	r3, #15
 800436c:	d80a      	bhi.n	8004384 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	3301      	adds	r3, #1
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800437a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004398 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 800437e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004382:	e001      	b.n	8004388 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 8004384:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800439c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 8004388:	eeb0 0a67 	vmov.f32	s0, s15
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	43bb8000 	.word	0x43bb8000
 800439c:	00000000 	.word	0x00000000

080043a0 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80043ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80043b0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800443c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 80043b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043bc:	d836      	bhi.n	800442c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 80043be:	ed97 7a02 	vldr	s14, [r7, #8]
 80043c2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004440 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 80043c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ca:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80043ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80043d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80043da:	793b      	ldrb	r3, [r7, #4]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80043ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ee:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80043f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004402:	d50a      	bpl.n	800441a <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8004404:	edd7 7a05 	vldr	s15, [r7, #20]
 8004408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800440c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004410:	793b      	ldrb	r3, [r7, #4]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e009      	b.n	800442e <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 800441a:	edd7 7a05 	vldr	s15, [r7, #20]
 800441e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004422:	edc7 7a01 	vstr	s15, [r7, #4]
 8004426:	793b      	ldrb	r3, [r7, #4]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e000      	b.n	800442e <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	45bb8000 	.word	0x45bb8000
 8004440:	43bb8000 	.word	0x43bb8000

08004444 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 8004450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004454:	2b00      	cmp	r3, #0
 8004456:	db0a      	blt.n	800446e <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	3301      	adds	r3, #1
 800445c:	ee07 3a90 	vmov	s15, r3
 8004460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004464:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004480 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8004468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446c:	e001      	b.n	8004472 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 800446e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004484 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 8004472:	eeb0 0a67 	vmov.f32	s0, s15
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	41fa0000 	.word	0x41fa0000
 8004484:	00000000 	.word	0x00000000

08004488 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8004494:	edd7 7a02 	vldr	s15, [r7, #8]
 8004498:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004524 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 800449c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a4:	d836      	bhi.n	8004514 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 80044a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80044aa:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004528 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 80044ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044b2:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80044b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044be:	edc7 7a01 	vstr	s15, [r7, #4]
 80044c2:	793b      	ldrb	r3, [r7, #4]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80044d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044d6:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80044da:	edd7 7a04 	vldr	s15, [r7, #16]
 80044de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80044e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ea:	d50a      	bpl.n	8004502 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80044ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80044f8:	793b      	ldrb	r3, [r7, #4]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e009      	b.n	8004516 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 8004502:	edd7 7a05 	vldr	s15, [r7, #20]
 8004506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450a:	edc7 7a01 	vstr	s15, [r7, #4]
 800450e:	793b      	ldrb	r3, [r7, #4]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e000      	b.n	8004516 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	457a0000 	.word	0x457a0000
 8004528:	41fa0000 	.word	0x41fa0000

0800452c <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3394      	adds	r3, #148	@ 0x94
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	edd2 7a05 	vldr	s15, [r2, #20]
 8004562:	eeb0 0a67 	vmov.f32	s0, s15
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	4798      	blx	r3
 800456a:	4603      	mov	r3, r0
 800456c:	461a      	mov	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	edd2 7a06 	vldr	s15, [r2, #24]
 8004584:	eeb0 0a67 	vmov.f32	s0, s15
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	4798      	blx	r3
 800458c:	4603      	mov	r3, r0
 800458e:	461a      	mov	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	edd2 7a07 	vldr	s15, [r2, #28]
 80045a6:	eeb0 0a67 	vmov.f32	s0, s15
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	4798      	blx	r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	edd2 7a08 	vldr	s15, [r2, #32]
 80045c8:	eeb0 0a67 	vmov.f32	s0, s15
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	4798      	blx	r3
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80045ea:	eeb0 0a67 	vmov.f32	s0, s15
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	4798      	blx	r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004602:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80048d4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004606:	ee67 6a87 	vmul.f32	s13, s15, s14
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	ed93 7a00 	vldr	s14, [r3]
 8004610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004618:	edc7 7a01 	vstr	s15, [r7, #4]
 800461c:	793b      	ldrb	r3, [r7, #4]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800462c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80048d4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004630:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	ed93 7a00 	vldr	s14, [r3]
 800463a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004642:	edc7 7a01 	vstr	s15, [r7, #4]
 8004646:	793b      	ldrb	r3, [r7, #4]
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004656:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80048d4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800465a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	ed93 7a00 	vldr	s14, [r3]
 8004664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004670:	793b      	ldrb	r3, [r7, #4]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004680:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80048d4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004684:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	ed93 7a00 	vldr	s14, [r3]
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	edc7 7a01 	vstr	s15, [r7, #4]
 800469a:	793b      	ldrb	r3, [r7, #4]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80046b4:	eeb0 0a67 	vmov.f32	s0, s15
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	4798      	blx	r3
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80046d6:	eeb0 0a67 	vmov.f32	s0, s15
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	4798      	blx	r3
 80046de:	4603      	mov	r3, r0
 80046e0:	461a      	mov	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 80046f8:	eeb0 0a67 	vmov.f32	s0, s15
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	4798      	blx	r3
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800471a:	eeb0 0a67 	vmov.f32	s0, s15
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	4798      	blx	r3
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8004748:	eeb0 0a67 	vmov.f32	s0, s15
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	4798      	blx	r3
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800476a:	eeb0 0a67 	vmov.f32	s0, s15
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	4798      	blx	r3
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80047b0:	2104      	movs	r1, #4
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 80047c6:	2105      	movs	r1, #5
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 80047dc:	2106      	movs	r1, #6
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 80047f2:	2107      	movs	r1, #7
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8004808:	2108      	movs	r1, #8
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800481e:	2109      	movs	r1, #9
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8004834:	210a      	movs	r1, #10
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800484a:	210b      	movs	r1, #11
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004860:	210c      	movs	r1, #12
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8004876:	210d      	movs	r1, #13
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800488c:	210e      	movs	r1, #14
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 80048a2:	210f      	movs	r1, #15
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 80048b8:	2110      	movs	r1, #16
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 80048ce:	2111      	movs	r1, #17
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	e001      	b.n	80048d8 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 80048d4:	43800000 	.word	0x43800000
 80048d8:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 80048ea:	2113      	movs	r1, #19
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8004900:	2114      	movs	r1, #20
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004916:	2116      	movs	r1, #22
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800492c:	2117      	movs	r1, #23
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3354      	adds	r3, #84	@ 0x54
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8004940:	4611      	mov	r1, r2
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	4798      	blx	r3
 8004946:	4603      	mov	r3, r0
 8004948:	f083 0301 	eor.w	r3, r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b087      	sub	sp, #28
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	460b      	mov	r3, r1
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004976:	681c      	ldr	r4, [r3, #0]
 8004978:	7afa      	ldrb	r2, [r7, #11]
 800497a:	2300      	movs	r3, #0
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	2201      	movs	r2, #1
 8004986:	490c      	ldr	r1, [pc, #48]	@ (80049b8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004998:	4907      	ldr	r1, [pc, #28]	@ (80049b8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a05      	ldr	r2, [pc, #20]	@ (80049c0 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 80049aa:	4904      	ldr	r1, [pc, #16]	@ (80049bc <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	4798      	blx	r3
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd90      	pop	{r4, r7, pc}
 80049b8:	20000278 	.word	0x20000278
 80049bc:	20000298 	.word	0x20000298
 80049c0:	200002a0 	.word	0x200002a0

080049c4 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80049d8:	681c      	ldr	r4, [r3, #0]
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	2200      	movs	r2, #0
 80049de:	9201      	str	r2, [sp, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	9200      	str	r2, [sp, #0]
 80049e4:	2202      	movs	r2, #2
 80049e6:	4917      	ldr	r1, [pc, #92]	@ (8004a44 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a14      	ldr	r2, [pc, #80]	@ (8004a48 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 80049f8:	4912      	ldr	r1, [pc, #72]	@ (8004a44 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a10      	ldr	r2, [pc, #64]	@ (8004a4c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004a0a:	490f      	ldr	r1, [pc, #60]	@ (8004a48 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a19      	ldr	r1, [r3, #32]
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	7b9b      	ldrb	r3, [r3, #14]
 8004a22:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	7bfa      	ldrb	r2, [r7, #15]
 8004a30:	4906      	ldr	r1, [pc, #24]	@ (8004a4c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd90      	pop	{r4, r7, pc}
 8004a44:	20000278 	.word	0x20000278
 8004a48:	20000298 	.word	0x20000298
 8004a4c:	200002a0 	.word	0x200002a0

08004a50 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004a66:	681c      	ldr	r4, [r3, #0]
 8004a68:	7afa      	ldrb	r2, [r7, #11]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	2203      	movs	r2, #3
 8004a76:	490c      	ldr	r1, [pc, #48]	@ (8004aa8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a09      	ldr	r2, [pc, #36]	@ (8004aac <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004a88:	4907      	ldr	r1, [pc, #28]	@ (8004aa8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a05      	ldr	r2, [pc, #20]	@ (8004ab0 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004a9a:	4904      	ldr	r1, [pc, #16]	@ (8004aac <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	4798      	blx	r3
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}
 8004aa8:	20000278 	.word	0x20000278
 8004aac:	20000298 	.word	0x20000298
 8004ab0:	200002a0 	.word	0x200002a0

08004ab4 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004ac8:	681c      	ldr	r4, [r3, #0]
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	2200      	movs	r2, #0
 8004ace:	9201      	str	r2, [sp, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	9200      	str	r2, [sp, #0]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	490c      	ldr	r1, [pc, #48]	@ (8004b08 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a09      	ldr	r2, [pc, #36]	@ (8004b0c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004ae8:	4907      	ldr	r1, [pc, #28]	@ (8004b08 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a05      	ldr	r2, [pc, #20]	@ (8004b10 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004afa:	4904      	ldr	r1, [pc, #16]	@ (8004b0c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}
 8004b08:	20000278 	.word	0x20000278
 8004b0c:	20000298 	.word	0x20000298
 8004b10:	200002a0 	.word	0x200002a0

08004b14 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b2a:	681c      	ldr	r4, [r3, #0]
 8004b2c:	7afa      	ldrb	r2, [r7, #11]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	2205      	movs	r2, #5
 8004b3a:	490c      	ldr	r1, [pc, #48]	@ (8004b6c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a09      	ldr	r2, [pc, #36]	@ (8004b70 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004b4c:	4907      	ldr	r1, [pc, #28]	@ (8004b6c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a05      	ldr	r2, [pc, #20]	@ (8004b74 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004b5e:	4904      	ldr	r1, [pc, #16]	@ (8004b70 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	4798      	blx	r3
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd90      	pop	{r4, r7, pc}
 8004b6c:	20000278 	.word	0x20000278
 8004b70:	20000298 	.word	0x20000298
 8004b74:	200002a0 	.word	0x200002a0

08004b78 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b88:	d21f      	bcs.n	8004bca <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b92:	681c      	ldr	r4, [r3, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2206      	movs	r2, #6
 8004ba0:	490c      	ldr	r1, [pc, #48]	@ (8004bd4 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a09      	ldr	r2, [pc, #36]	@ (8004bd8 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004bb2:	4908      	ldr	r1, [pc, #32]	@ (8004bd4 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a06      	ldr	r2, [pc, #24]	@ (8004bdc <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004bc4:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	4798      	blx	r3
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000278 	.word	0x20000278
 8004bd8:	20000298 	.word	0x20000298
 8004bdc:	200002a0 	.word	0x200002a0

08004be0 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	460b      	mov	r3, r1
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bf4:	d220      	bcs.n	8004c38 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004bfe:	681c      	ldr	r4, [r3, #0]
 8004c00:	7afa      	ldrb	r2, [r7, #11]
 8004c02:	2300      	movs	r3, #0
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	490c      	ldr	r1, [pc, #48]	@ (8004c40 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a09      	ldr	r2, [pc, #36]	@ (8004c44 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004c20:	4907      	ldr	r1, [pc, #28]	@ (8004c40 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a05      	ldr	r2, [pc, #20]	@ (8004c48 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004c32:	4904      	ldr	r1, [pc, #16]	@ (8004c44 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	4798      	blx	r3
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd90      	pop	{r4, r7, pc}
 8004c40:	20000278 	.word	0x20000278
 8004c44:	20000298 	.word	0x20000298
 8004c48:	200002a0 	.word	0x200002a0

08004c4c <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	72fb      	strb	r3, [r7, #11]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004c66:	681c      	ldr	r4, [r3, #0]
 8004c68:	7af9      	ldrb	r1, [r7, #11]
 8004c6a:	7abb      	ldrb	r3, [r7, #10]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	9201      	str	r2, [sp, #4]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	460b      	mov	r3, r1
 8004c74:	2208      	movs	r2, #8
 8004c76:	490c      	ldr	r1, [pc, #48]	@ (8004ca8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a09      	ldr	r2, [pc, #36]	@ (8004cac <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004c88:	4907      	ldr	r1, [pc, #28]	@ (8004ca8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a05      	ldr	r2, [pc, #20]	@ (8004cb0 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004c9a:	4904      	ldr	r1, [pc, #16]	@ (8004cac <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	4798      	blx	r3
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	20000278 	.word	0x20000278
 8004cac:	20000298 	.word	0x20000298
 8004cb0:	200002a0 	.word	0x200002a0

08004cb4 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004ccc:	681c      	ldr	r4, [r3, #0]
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	78bb      	ldrb	r3, [r7, #2]
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	9101      	str	r1, [sp, #4]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	2209      	movs	r2, #9
 8004cdc:	490c      	ldr	r1, [pc, #48]	@ (8004d10 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a09      	ldr	r2, [pc, #36]	@ (8004d14 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004cee:	4908      	ldr	r1, [pc, #32]	@ (8004d10 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a06      	ldr	r2, [pc, #24]	@ (8004d18 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004d00:	4904      	ldr	r1, [pc, #16]	@ (8004d14 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd90      	pop	{r4, r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000278 	.word	0x20000278
 8004d14:	20000298 	.word	0x20000298
 8004d18:	200002a0 	.word	0x200002a0

08004d1c <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d2c:	681c      	ldr	r4, [r3, #0]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2300      	movs	r3, #0
 8004d38:	220a      	movs	r2, #10
 8004d3a:	490c      	ldr	r1, [pc, #48]	@ (8004d6c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a09      	ldr	r2, [pc, #36]	@ (8004d70 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004d4c:	4907      	ldr	r1, [pc, #28]	@ (8004d6c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a05      	ldr	r2, [pc, #20]	@ (8004d74 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004d5e:	4904      	ldr	r1, [pc, #16]	@ (8004d70 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4798      	blx	r3
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd90      	pop	{r4, r7, pc}
 8004d6c:	20000278 	.word	0x20000278
 8004d70:	20000298 	.word	0x20000298
 8004d74:	200002a0 	.word	0x200002a0

08004d78 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d88:	681c      	ldr	r4, [r3, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	2300      	movs	r3, #0
 8004d94:	220b      	movs	r2, #11
 8004d96:	490c      	ldr	r1, [pc, #48]	@ (8004dc8 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a09      	ldr	r2, [pc, #36]	@ (8004dcc <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004da8:	4907      	ldr	r1, [pc, #28]	@ (8004dc8 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a05      	ldr	r2, [pc, #20]	@ (8004dd0 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004dba:	4904      	ldr	r1, [pc, #16]	@ (8004dcc <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd90      	pop	{r4, r7, pc}
 8004dc8:	20000278 	.word	0x20000278
 8004dcc:	20000298 	.word	0x20000298
 8004dd0:	200002a0 	.word	0x200002a0

08004dd4 <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004de4:	681c      	ldr	r4, [r3, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2300      	movs	r3, #0
 8004df0:	220c      	movs	r2, #12
 8004df2:	490c      	ldr	r1, [pc, #48]	@ (8004e24 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a09      	ldr	r2, [pc, #36]	@ (8004e28 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004e04:	4907      	ldr	r1, [pc, #28]	@ (8004e24 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004e16:	4904      	ldr	r1, [pc, #16]	@ (8004e28 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}
 8004e24:	20000278 	.word	0x20000278
 8004e28:	20000298 	.word	0x20000298
 8004e2c:	200002a0 	.word	0x200002a0

08004e30 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e40:	681c      	ldr	r4, [r3, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	220d      	movs	r2, #13
 8004e4e:	490c      	ldr	r1, [pc, #48]	@ (8004e80 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a09      	ldr	r2, [pc, #36]	@ (8004e84 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004e60:	4907      	ldr	r1, [pc, #28]	@ (8004e80 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a05      	ldr	r2, [pc, #20]	@ (8004e88 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8004e72:	4904      	ldr	r1, [pc, #16]	@ (8004e84 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	20000278 	.word	0x20000278
 8004e84:	20000298 	.word	0x20000298
 8004e88:	200002a0 	.word	0x200002a0

08004e8c <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e9c:	681c      	ldr	r4, [r3, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	220e      	movs	r2, #14
 8004eaa:	490c      	ldr	r1, [pc, #48]	@ (8004edc <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a09      	ldr	r2, [pc, #36]	@ (8004ee0 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004ebc:	4907      	ldr	r1, [pc, #28]	@ (8004edc <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a05      	ldr	r2, [pc, #20]	@ (8004ee4 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8004ece:	4904      	ldr	r1, [pc, #16]	@ (8004ee0 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd90      	pop	{r4, r7, pc}
 8004edc:	20000278 	.word	0x20000278
 8004ee0:	20000298 	.word	0x20000298
 8004ee4:	200002a0 	.word	0x200002a0

08004ee8 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004ef8:	681c      	ldr	r4, [r3, #0]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	220f      	movs	r2, #15
 8004f06:	490c      	ldr	r1, [pc, #48]	@ (8004f38 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a09      	ldr	r2, [pc, #36]	@ (8004f3c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004f18:	4907      	ldr	r1, [pc, #28]	@ (8004f38 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a05      	ldr	r2, [pc, #20]	@ (8004f40 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8004f2a:	4904      	ldr	r1, [pc, #16]	@ (8004f3c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd90      	pop	{r4, r7, pc}
 8004f38:	20000278 	.word	0x20000278
 8004f3c:	20000298 	.word	0x20000298
 8004f40:	200002a0 	.word	0x200002a0

08004f44 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f54:	681c      	ldr	r4, [r3, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2210      	movs	r2, #16
 8004f62:	490c      	ldr	r1, [pc, #48]	@ (8004f94 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a09      	ldr	r2, [pc, #36]	@ (8004f98 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8004f74:	4907      	ldr	r1, [pc, #28]	@ (8004f94 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a05      	ldr	r2, [pc, #20]	@ (8004f9c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 8004f86:	4904      	ldr	r1, [pc, #16]	@ (8004f98 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd90      	pop	{r4, r7, pc}
 8004f94:	20000278 	.word	0x20000278
 8004f98:	20000298 	.word	0x20000298
 8004f9c:	200002a0 	.word	0x200002a0

08004fa0 <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fb0:	681c      	ldr	r4, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2211      	movs	r2, #17
 8004fbe:	490c      	ldr	r1, [pc, #48]	@ (8004ff0 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a09      	ldr	r2, [pc, #36]	@ (8004ff4 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8004fd0:	4907      	ldr	r1, [pc, #28]	@ (8004ff0 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a05      	ldr	r2, [pc, #20]	@ (8004ff8 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 8004fe2:	4904      	ldr	r1, [pc, #16]	@ (8004ff4 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	4798      	blx	r3
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	20000278 	.word	0x20000278
 8004ff4:	20000298 	.word	0x20000298
 8004ff8:	200002a0 	.word	0x200002a0

08004ffc <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af02      	add	r7, sp, #8
 8005002:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800500c:	681c      	ldr	r4, [r3, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	2300      	movs	r3, #0
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2300      	movs	r3, #0
 8005018:	2212      	movs	r2, #18
 800501a:	4912      	ldr	r1, [pc, #72]	@ (8005064 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a0f      	ldr	r2, [pc, #60]	@ (8005068 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 800502c:	490d      	ldr	r1, [pc, #52]	@ (8005064 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a0b      	ldr	r2, [pc, #44]	@ (800506c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800503e:	490a      	ldr	r1, [pc, #40]	@ (8005068 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	4906      	ldr	r1, [pc, #24]	@ (800506c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	4798      	blx	r3
 8005056:	4603      	mov	r3, r0
 8005058:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800505a:	89fb      	ldrh	r3, [r7, #14]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}
 8005064:	20000278 	.word	0x20000278
 8005068:	20000298 	.word	0x20000298
 800506c:	200002a0 	.word	0x200002a0

08005070 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b087      	sub	sp, #28
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	460b      	mov	r3, r1
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005086:	681c      	ldr	r4, [r3, #0]
 8005088:	7afa      	ldrb	r2, [r7, #11]
 800508a:	2300      	movs	r3, #0
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	2201      	movs	r2, #1
 8005096:	4903      	ldr	r1, [pc, #12]	@ (80050a4 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	47a0      	blx	r4
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd90      	pop	{r4, r7, pc}
 80050a4:	20000278 	.word	0x20000278

080050a8 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050bc:	681c      	ldr	r4, [r3, #0]
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	2200      	movs	r2, #0
 80050c2:	9201      	str	r2, [sp, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	9200      	str	r2, [sp, #0]
 80050c8:	2202      	movs	r2, #2
 80050ca:	4903      	ldr	r1, [pc, #12]	@ (80050d8 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	47a0      	blx	r4
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	20000278 	.word	0x20000278

080050dc <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b087      	sub	sp, #28
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	460b      	mov	r3, r1
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050f2:	681c      	ldr	r4, [r3, #0]
 80050f4:	7afa      	ldrb	r2, [r7, #11]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	4613      	mov	r3, r2
 8005100:	2203      	movs	r2, #3
 8005102:	4903      	ldr	r1, [pc, #12]	@ (8005110 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	47a0      	blx	r4
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}
 8005110:	20000278 	.word	0x20000278

08005114 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b085      	sub	sp, #20
 8005118:	af02      	add	r7, sp, #8
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005128:	681c      	ldr	r4, [r3, #0]
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	2200      	movs	r2, #0
 800512e:	9201      	str	r2, [sp, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	9200      	str	r2, [sp, #0]
 8005134:	2204      	movs	r2, #4
 8005136:	4903      	ldr	r1, [pc, #12]	@ (8005144 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	47a0      	blx	r4
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bd90      	pop	{r4, r7, pc}
 8005144:	20000278 	.word	0x20000278

08005148 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b087      	sub	sp, #28
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	460b      	mov	r3, r1
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800515e:	681c      	ldr	r4, [r3, #0]
 8005160:	7afa      	ldrb	r2, [r7, #11]
 8005162:	2300      	movs	r3, #0
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4613      	mov	r3, r2
 800516c:	2205      	movs	r2, #5
 800516e:	4903      	ldr	r1, [pc, #12]	@ (800517c <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	47a0      	blx	r4
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bd90      	pop	{r4, r7, pc}
 800517c:	20000278 	.word	0x20000278

08005180 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b085      	sub	sp, #20
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005192:	681c      	ldr	r4, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	2300      	movs	r3, #0
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2206      	movs	r2, #6
 80051a0:	4903      	ldr	r1, [pc, #12]	@ (80051b0 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	47a0      	blx	r4
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000278 	.word	0x20000278

080051b4 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80051b4:	b590      	push	{r4, r7, lr}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	460b      	mov	r3, r1
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051ca:	681c      	ldr	r4, [r3, #0]
 80051cc:	7afa      	ldrb	r2, [r7, #11]
 80051ce:	2300      	movs	r3, #0
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	2207      	movs	r2, #7
 80051da:	4903      	ldr	r1, [pc, #12]	@ (80051e8 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	47a0      	blx	r4
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}
 80051e8:	20000278 	.word	0x20000278

080051ec <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	460b      	mov	r3, r1
 80051f8:	72fb      	strb	r3, [r7, #11]
 80051fa:	4613      	mov	r3, r2
 80051fc:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005206:	681c      	ldr	r4, [r3, #0]
 8005208:	7af9      	ldrb	r1, [r7, #11]
 800520a:	7abb      	ldrb	r3, [r7, #10]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	9201      	str	r2, [sp, #4]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	460b      	mov	r3, r1
 8005214:	2208      	movs	r2, #8
 8005216:	4903      	ldr	r1, [pc, #12]	@ (8005224 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	47a0      	blx	r4
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bd90      	pop	{r4, r7, pc}
 8005224:	20000278 	.word	0x20000278

08005228 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b085      	sub	sp, #20
 800522c:	af02      	add	r7, sp, #8
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
 8005234:	4613      	mov	r3, r2
 8005236:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005240:	681c      	ldr	r4, [r3, #0]
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	78bb      	ldrb	r3, [r7, #2]
 8005246:	2100      	movs	r1, #0
 8005248:	9101      	str	r1, [sp, #4]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	2209      	movs	r2, #9
 8005250:	4903      	ldr	r1, [pc, #12]	@ (8005260 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	47a0      	blx	r4
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bd90      	pop	{r4, r7, pc}
 800525e:	bf00      	nop
 8005260:	20000278 	.word	0x20000278

08005264 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b085      	sub	sp, #20
 8005268:	af02      	add	r7, sp, #8
 800526a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005274:	681c      	ldr	r4, [r3, #0]
 8005276:	2300      	movs	r3, #0
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	2300      	movs	r3, #0
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2300      	movs	r3, #0
 8005280:	220a      	movs	r2, #10
 8005282:	4903      	ldr	r1, [pc, #12]	@ (8005290 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	47a0      	blx	r4
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	bd90      	pop	{r4, r7, pc}
 8005290:	20000278 	.word	0x20000278

08005294 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b085      	sub	sp, #20
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052a4:	681c      	ldr	r4, [r3, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	220b      	movs	r2, #11
 80052b2:	4903      	ldr	r1, [pc, #12]	@ (80052c0 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	47a0      	blx	r4
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}
 80052c0:	20000278 	.word	0x20000278

080052c4 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052d4:	681c      	ldr	r4, [r3, #0]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	2300      	movs	r3, #0
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	220c      	movs	r2, #12
 80052e2:	4903      	ldr	r1, [pc, #12]	@ (80052f0 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	47a0      	blx	r4
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd90      	pop	{r4, r7, pc}
 80052f0:	20000278 	.word	0x20000278

080052f4 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005304:	681c      	ldr	r4, [r3, #0]
 8005306:	2300      	movs	r3, #0
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	2300      	movs	r3, #0
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	2300      	movs	r3, #0
 8005310:	220d      	movs	r2, #13
 8005312:	4903      	ldr	r1, [pc, #12]	@ (8005320 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	47a0      	blx	r4
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bd90      	pop	{r4, r7, pc}
 8005320:	20000278 	.word	0x20000278

08005324 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b085      	sub	sp, #20
 8005328:	af02      	add	r7, sp, #8
 800532a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005334:	681c      	ldr	r4, [r3, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	2300      	movs	r3, #0
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	2300      	movs	r3, #0
 8005340:	220e      	movs	r2, #14
 8005342:	4903      	ldr	r1, [pc, #12]	@ (8005350 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	47a0      	blx	r4
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	bd90      	pop	{r4, r7, pc}
 8005350:	20000278 	.word	0x20000278

08005354 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b085      	sub	sp, #20
 8005358:	af02      	add	r7, sp, #8
 800535a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005364:	681c      	ldr	r4, [r3, #0]
 8005366:	2300      	movs	r3, #0
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	2300      	movs	r3, #0
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	220f      	movs	r2, #15
 8005372:	4903      	ldr	r1, [pc, #12]	@ (8005380 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	47a0      	blx	r4
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bd90      	pop	{r4, r7, pc}
 8005380:	20000278 	.word	0x20000278

08005384 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b085      	sub	sp, #20
 8005388:	af02      	add	r7, sp, #8
 800538a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005394:	681c      	ldr	r4, [r3, #0]
 8005396:	2300      	movs	r3, #0
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	2300      	movs	r3, #0
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	2300      	movs	r3, #0
 80053a0:	2210      	movs	r2, #16
 80053a2:	4903      	ldr	r1, [pc, #12]	@ (80053b0 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	47a0      	blx	r4
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd90      	pop	{r4, r7, pc}
 80053b0:	20000278 	.word	0x20000278

080053b4 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053c4:	681c      	ldr	r4, [r3, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	2300      	movs	r3, #0
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	2211      	movs	r2, #17
 80053d2:	4903      	ldr	r1, [pc, #12]	@ (80053e0 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	47a0      	blx	r4
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd90      	pop	{r4, r7, pc}
 80053e0:	20000278 	.word	0x20000278

080053e4 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053f4:	681c      	ldr	r4, [r3, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	2212      	movs	r2, #18
 8005402:	4903      	ldr	r1, [pc, #12]	@ (8005410 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	47a0      	blx	r4
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bd90      	pop	{r4, r7, pc}
 8005410:	20000278 	.word	0x20000278

08005414 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a09      	ldr	r2, [pc, #36]	@ (800544c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005428:	4909      	ldr	r1, [pc, #36]	@ (8005450 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a06      	ldr	r2, [pc, #24]	@ (8005454 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800543a:	4904      	ldr	r1, [pc, #16]	@ (800544c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000298 	.word	0x20000298
 8005450:	20000278 	.word	0x20000278
 8005454:	200002a0 	.word	0x200002a0

08005458 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b089      	sub	sp, #36	@ 0x24
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8005464:	4b17      	ldr	r3, [pc, #92]	@ (80054c4 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
 800546e:	e020      	b.n	80054b2 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005478:	681c      	ldr	r4, [r3, #0]
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	1899      	adds	r1, r3, r2
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	461a      	mov	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	441a      	add	r2, r3
 800548e:	230a      	movs	r3, #10
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2302      	movs	r3, #2
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8005498:	2300      	movs	r3, #0
 800549a:	75bb      	strb	r3, [r7, #22]
 800549c:	e003      	b.n	80054a6 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800549e:	bf00      	nop
 80054a0:	7dbb      	ldrb	r3, [r7, #22]
 80054a2:	3301      	adds	r3, #1
 80054a4:	75bb      	strb	r3, [r7, #22]
 80054a6:	7dbb      	ldrb	r3, [r7, #22]
 80054a8:	2b7c      	cmp	r3, #124	@ 0x7c
 80054aa:	d9f8      	bls.n	800549e <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	3301      	adds	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d9db      	bls.n	8005470 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 80054b8:	bf00      	nop
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd90      	pop	{r4, r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000275 	.word	0x20000275

080054c8 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	4613      	mov	r3, r2
 80054d4:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80054da:	2301      	movs	r3, #1
 80054dc:	74fb      	strb	r3, [r7, #19]
 80054de:	e016      	b.n	800550e <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80054e0:	7cfb      	ldrb	r3, [r7, #19]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	461a      	mov	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	7f1b      	ldrb	r3, [r3, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	4413      	add	r3, r2
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	79fa      	ldrb	r2, [r7, #7]
 80054f6:	7cfb      	ldrb	r3, [r7, #19]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	461a      	mov	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	3301      	adds	r3, #1
 800550c:	74fb      	strb	r3, [r7, #19]
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d9e5      	bls.n	80054e0 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2118      	movs	r1, #24
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
 8005544:	4602      	mov	r2, r0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554a:	b292      	uxth	r2, r2
 800554c:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	2b0e      	cmp	r3, #14
 8005552:	f200 8099 	bhi.w	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 8005556:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005599 	.word	0x08005599
 8005560:	080055a9 	.word	0x080055a9
 8005564:	080055b9 	.word	0x080055b9
 8005568:	080055c9 	.word	0x080055c9
 800556c:	080055d9 	.word	0x080055d9
 8005570:	080055e9 	.word	0x080055e9
 8005574:	080055f9 	.word	0x080055f9
 8005578:	08005609 	.word	0x08005609
 800557c:	08005619 	.word	0x08005619
 8005580:	08005629 	.word	0x08005629
 8005584:	08005639 	.word	0x08005639
 8005588:	08005649 	.word	0x08005649
 800558c:	08005659 	.word	0x08005659
 8005590:	08005669 	.word	0x08005669
 8005594:	08005679 	.word	0x08005679
      state = pL6470_StatusRegister->HiZ;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	73fb      	strb	r3, [r7, #15]
      break;
 80055a6:	e06f      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	73fb      	strb	r3, [r7, #15]
      break;
 80055b6:	e067      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	73fb      	strb	r3, [r7, #15]
      break;
 80055c6:	e05f      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	73fb      	strb	r3, [r7, #15]
      break;
 80055d6:	e057      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	73fb      	strb	r3, [r7, #15]
      break;
 80055e6:	e04f      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	73fb      	strb	r3, [r7, #15]
      break;
 80055f6:	e047      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005602:	b2db      	uxtb	r3, r3
 8005604:	73fb      	strb	r3, [r7, #15]
      break;
 8005606:	e03f      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	73fb      	strb	r3, [r7, #15]
      break;
 8005616:	e037      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	73fb      	strb	r3, [r7, #15]
      break;
 8005626:	e02f      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	73fb      	strb	r3, [r7, #15]
      break;
 8005636:	e027      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	73fb      	strb	r3, [r7, #15]
      break;
 8005646:	e01f      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564c:	785b      	ldrb	r3, [r3, #1]
 800564e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	73fb      	strb	r3, [r7, #15]
      break;
 8005656:	e017      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005662:	b2db      	uxtb	r3, r3
 8005664:	73fb      	strb	r3, [r7, #15]
      break;
 8005666:	e00f      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	73fb      	strb	r3, [r7, #15]
      break;
 8005676:	e007      	b.n	8005688 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	73fb      	strb	r3, [r7, #15]
      break;
 8005686:	bf00      	nop
  return state;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop

08005694 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	2b18      	cmp	r3, #24
 80056a4:	d809      	bhi.n	80056ba <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a19      	ldr	r1, [r3, #32]
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	3301      	adds	r3, #1
 80056b8:	e000      	b.n	80056bc <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
 80056d6:	e01a      	b.n	800570e <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	4413      	add	r3, r2
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	4413      	add	r3, r2
 80056ec:	2200      	movs	r2, #0
 80056ee:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	4413      	add	r3, r2
 80056f8:	2200      	movs	r2, #0
 80056fa:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	4413      	add	r3, r2
 8005704:	2200      	movs	r2, #0
 8005706:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	3301      	adds	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d9e1      	bls.n	80056d8 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	603b      	str	r3, [r7, #0]
 800572e:	4613      	mov	r3, r2
 8005730:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	7f1b      	ldrb	r3, [r3, #28]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	4413      	add	r3, r2
 800573c:	79fa      	ldrb	r2, [r7, #7]
 800573e:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7f1b      	ldrb	r3, [r3, #28]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	4413      	add	r3, r2
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	7f1b      	ldrb	r3, [r3, #28]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	4413      	add	r3, r2
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	7f1b      	ldrb	r3, [r3, #28]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4413      	add	r3, r2
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	60da      	str	r2, [r3, #12]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b087      	sub	sp, #28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8005788:	4b10      	ldr	r3, [pc, #64]	@ (80057cc <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8005790:	4b0e      	ldr	r3, [pc, #56]	@ (80057cc <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80057ae:	681c      	ldr	r4, [r3, #0]
 80057b0:	79fa      	ldrb	r2, [r7, #7]
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	47a0      	blx	r4
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd90      	pop	{r4, r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000275 	.word	0x20000275

080057d0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80057e0:	2300      	movs	r3, #0
 80057e2:	75bb      	strb	r3, [r7, #22]
 80057e4:	e013      	b.n	800580e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	75fb      	strb	r3, [r7, #23]
 80057ea:	e00a      	b.n	8005802 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80057ec:	7d7b      	ldrb	r3, [r7, #21]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	757a      	strb	r2, [r7, #21]
 80057f2:	461a      	mov	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	3301      	adds	r3, #1
 8005800:	75fb      	strb	r3, [r7, #23]
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d9f1      	bls.n	80057ec <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005808:	7dbb      	ldrb	r3, [r7, #22]
 800580a:	3301      	adds	r3, #1
 800580c:	75bb      	strb	r3, [r7, #22]
 800580e:	7dbb      	ldrb	r3, [r7, #22]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d9e8      	bls.n	80057e6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005814:	2300      	movs	r3, #0
 8005816:	75fb      	strb	r3, [r7, #23]
 8005818:	e1f1      	b.n	8005bfe <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	440b      	add	r3, r1
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	4619      	mov	r1, r3
 800582a:	460b      	mov	r3, r1
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	1a5b      	subs	r3, r3, r1
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	441a      	add	r2, r3
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	440b      	add	r3, r1
 800583a:	7b12      	ldrb	r2, [r2, #12]
 800583c:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800583e:	7dfb      	ldrb	r3, [r7, #23]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4413      	add	r3, r2
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b12      	cmp	r3, #18
 800584a:	f200 81d5 	bhi.w	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800584e:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	08005bf9 	.word	0x08005bf9
 8005858:	080058a1 	.word	0x080058a1
 800585c:	08005929 	.word	0x08005929
 8005860:	08005959 	.word	0x08005959
 8005864:	080059c1 	.word	0x080059c1
 8005868:	080059ef 	.word	0x080059ef
 800586c:	08005a57 	.word	0x08005a57
 8005870:	08005a93 	.word	0x08005a93
 8005874:	08005afb 	.word	0x08005afb
 8005878:	08005b97 	.word	0x08005b97
 800587c:	08005bf9 	.word	0x08005bf9
 8005880:	08005bf9 	.word	0x08005bf9
 8005884:	08005bf9 	.word	0x08005bf9
 8005888:	08005bf9 	.word	0x08005bf9
 800588c:	08005bf9 	.word	0x08005bf9
 8005890:	08005bf9 	.word	0x08005bf9
 8005894:	08005bf9 	.word	0x08005bf9
 8005898:	08005bf9 	.word	0x08005bf9
 800589c:	08005bf9 	.word	0x08005bf9
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4413      	add	r3, r2
 80058a6:	7819      	ldrb	r1, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a18      	ldr	r0, [r3, #32]
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	4413      	add	r3, r2
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4403      	add	r3, r0
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4403      	add	r3, r0
 80058c8:	430a      	orrs	r2, r1
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a19      	ldr	r1, [r3, #32]
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	4413      	add	r3, r2
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	7b9b      	ldrb	r3, [r3, #14]
 80058e8:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80058ea:	2301      	movs	r3, #1
 80058ec:	75bb      	strb	r3, [r7, #22]
 80058ee:	e016      	b.n	800591e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	4413      	add	r3, r2
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	7d39      	ldrb	r1, [r7, #20]
 80058fc:	7dbb      	ldrb	r3, [r7, #22]
 80058fe:	1acb      	subs	r3, r1, r3
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	fa22 f103 	lsr.w	r1, r2, r3
 8005906:	7dbb      	ldrb	r3, [r7, #22]
 8005908:	005a      	lsls	r2, r3, #1
 800590a:	7dfb      	ldrb	r3, [r7, #23]
 800590c:	4413      	add	r3, r2
 800590e:	461a      	mov	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	b2ca      	uxtb	r2, r1
 8005916:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005918:	7dbb      	ldrb	r3, [r7, #22]
 800591a:	3301      	adds	r3, #1
 800591c:	75bb      	strb	r3, [r7, #22]
 800591e:	7d3a      	ldrb	r2, [r7, #20]
 8005920:	7dbb      	ldrb	r3, [r7, #22]
 8005922:	429a      	cmp	r2, r3
 8005924:	d2e4      	bcs.n	80058f0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8005926:	e167      	b.n	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	7819      	ldrb	r1, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a18      	ldr	r0, [r3, #32]
 8005934:	7dfb      	ldrb	r3, [r7, #23]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	4413      	add	r3, r2
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4403      	add	r3, r0
 8005948:	781a      	ldrb	r2, [r3, #0]
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4403      	add	r3, r0
 8005950:	430a      	orrs	r2, r1
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
      break;
 8005956:	e14f      	b.n	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	7819      	ldrb	r1, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4413      	add	r3, r2
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4413      	add	r3, r2
 8005974:	4403      	add	r3, r0
 8005976:	7a1a      	ldrb	r2, [r3, #8]
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4403      	add	r3, r0
 800597e:	430a      	orrs	r2, r1
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005984:	2301      	movs	r3, #1
 8005986:	75bb      	strb	r3, [r7, #22]
 8005988:	e016      	b.n	80059b8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4413      	add	r3, r2
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	7dbb      	ldrb	r3, [r7, #22]
 8005996:	f1c3 0303 	rsb	r3, r3, #3
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	fa22 f103 	lsr.w	r1, r2, r3
 80059a0:	7dbb      	ldrb	r3, [r7, #22]
 80059a2:	005a      	lsls	r2, r3, #1
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	4413      	add	r3, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	b2ca      	uxtb	r2, r1
 80059b0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80059b2:	7dbb      	ldrb	r3, [r7, #22]
 80059b4:	3301      	adds	r3, #1
 80059b6:	75bb      	strb	r3, [r7, #22]
 80059b8:	7dbb      	ldrb	r3, [r7, #22]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d9e5      	bls.n	800598a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 80059be:	e11b      	b.n	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	7819      	ldrb	r1, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	4413      	add	r3, r2
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4413      	add	r3, r2
 80059dc:	4403      	add	r3, r0
 80059de:	7a1a      	ldrb	r2, [r3, #8]
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	4403      	add	r3, r0
 80059e6:	430a      	orrs	r2, r1
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
      break;
 80059ec:	e104      	b.n	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	7819      	ldrb	r1, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4413      	add	r3, r2
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	4403      	add	r3, r0
 8005a0c:	7a1a      	ldrb	r2, [r3, #8]
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4403      	add	r3, r0
 8005a14:	430a      	orrs	r2, r1
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	75bb      	strb	r3, [r7, #22]
 8005a1e:	e016      	b.n	8005a4e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	4413      	add	r3, r2
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	7dbb      	ldrb	r3, [r7, #22]
 8005a2c:	f1c3 0303 	rsb	r3, r3, #3
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	fa22 f103 	lsr.w	r1, r2, r3
 8005a36:	7dbb      	ldrb	r3, [r7, #22]
 8005a38:	005a      	lsls	r2, r3, #1
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	461a      	mov	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4413      	add	r3, r2
 8005a44:	b2ca      	uxtb	r2, r1
 8005a46:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a48:	7dbb      	ldrb	r3, [r7, #22]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	75bb      	strb	r3, [r7, #22]
 8005a4e:	7dbb      	ldrb	r3, [r7, #22]
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d9e5      	bls.n	8005a20 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005a54:	e0d0      	b.n	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a56:	2301      	movs	r3, #1
 8005a58:	75bb      	strb	r3, [r7, #22]
 8005a5a:	e016      	b.n	8005a8a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	4413      	add	r3, r2
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	7dbb      	ldrb	r3, [r7, #22]
 8005a68:	f1c3 0303 	rsb	r3, r3, #3
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	fa22 f103 	lsr.w	r1, r2, r3
 8005a72:	7dbb      	ldrb	r3, [r7, #22]
 8005a74:	005a      	lsls	r2, r3, #1
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	4413      	add	r3, r2
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4413      	add	r3, r2
 8005a80:	b2ca      	uxtb	r2, r1
 8005a82:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a84:	7dbb      	ldrb	r3, [r7, #22]
 8005a86:	3301      	adds	r3, #1
 8005a88:	75bb      	strb	r3, [r7, #22]
 8005a8a:	7dbb      	ldrb	r3, [r7, #22]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d9e5      	bls.n	8005a5c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005a90:	e0b2      	b.n	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	4413      	add	r3, r2
 8005a98:	7819      	ldrb	r1, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4413      	add	r3, r2
 8005aae:	4403      	add	r3, r0
 8005ab0:	7a1a      	ldrb	r2, [r3, #8]
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	4403      	add	r3, r0
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005abe:	2301      	movs	r3, #1
 8005ac0:	75bb      	strb	r3, [r7, #22]
 8005ac2:	e016      	b.n	8005af2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4413      	add	r3, r2
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	7dbb      	ldrb	r3, [r7, #22]
 8005ad0:	f1c3 0303 	rsb	r3, r3, #3
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	fa22 f103 	lsr.w	r1, r2, r3
 8005ada:	7dbb      	ldrb	r3, [r7, #22]
 8005adc:	005a      	lsls	r2, r3, #1
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	b2ca      	uxtb	r2, r1
 8005aea:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005aec:	7dbb      	ldrb	r3, [r7, #22]
 8005aee:	3301      	adds	r3, #1
 8005af0:	75bb      	strb	r3, [r7, #22]
 8005af2:	7dbb      	ldrb	r3, [r7, #22]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d9e5      	bls.n	8005ac4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005af8:	e07e      	b.n	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b259      	sxtb	r1, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	4413      	add	r3, r2
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	4403      	add	r3, r0
 8005b1a:	791b      	ldrb	r3, [r3, #4]
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	430b      	orrs	r3, r1
 8005b22:	b259      	sxtb	r1, r3
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	b2ca      	uxtb	r2, r1
 8005b2c:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4413      	add	r3, r2
 8005b34:	7819      	ldrb	r1, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	4413      	add	r3, r2
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4413      	add	r3, r2
 8005b4a:	4403      	add	r3, r0
 8005b4c:	7a1a      	ldrb	r2, [r3, #8]
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4403      	add	r3, r0
 8005b54:	430a      	orrs	r2, r1
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75bb      	strb	r3, [r7, #22]
 8005b5e:	e016      	b.n	8005b8e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	4413      	add	r3, r2
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	7dbb      	ldrb	r3, [r7, #22]
 8005b6c:	f1c3 0303 	rsb	r3, r3, #3
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	fa22 f103 	lsr.w	r1, r2, r3
 8005b76:	7dbb      	ldrb	r3, [r7, #22]
 8005b78:	005a      	lsls	r2, r3, #1
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4413      	add	r3, r2
 8005b84:	b2ca      	uxtb	r2, r1
 8005b86:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b88:	7dbb      	ldrb	r3, [r7, #22]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	75bb      	strb	r3, [r7, #22]
 8005b8e:	7dbb      	ldrb	r3, [r7, #22]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d9e5      	bls.n	8005b60 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005b94:	e030      	b.n	8005bf8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b259      	sxtb	r1, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	4413      	add	r3, r2
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	4403      	add	r3, r0
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	b259      	sxtb	r1, r3
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	b2ca      	uxtb	r2, r1
 8005bc8:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	7819      	ldrb	r1, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	4613      	mov	r3, r2
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4413      	add	r3, r2
 8005be6:	4403      	add	r3, r0
 8005be8:	7a1a      	ldrb	r2, [r3, #8]
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4403      	add	r3, r0
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
      break;
 8005bf6:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	f67f ae0a 	bls.w	800581a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005c20:	edd7 7a00 	vldr	s15, [r7]
 8005c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2c:	db1e      	blt.n	8005c6c <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005c2e:	edd7 7a00 	vldr	s15, [r7]
 8005c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c36:	ee17 2a90 	vmov	r2, s15
 8005c3a:	edd7 7a00 	vldr	s15, [r7]
 8005c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c46:	ed97 7a00 	vldr	s14, [r7]
 8005c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c4e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5a:	bf4c      	ite	mi
 8005c5c:	2301      	movmi	r3, #1
 8005c5e:	2300      	movpl	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f083 0301 	eor.w	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	4413      	add	r3, r2
 8005c6a:	e01a      	b.n	8005ca2 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005c6c:	edd7 7a00 	vldr	s15, [r7]
 8005c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c74:	ee17 2a90 	vmov	r2, s15
 8005c78:	edd7 7a00 	vldr	s15, [r7]
 8005c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c84:	ed97 7a00 	vldr	s14, [r7]
 8005c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c8c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8005c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c98:	d501      	bpl.n	8005c9e <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	1ad3      	subs	r3, r2, r3
        }
    }
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6918      	ldr	r0, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8a9b      	ldrh	r3, [r3, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f008 f8c0 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6998      	ldr	r0, [r3, #24]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	2364      	movs	r3, #100	@ 0x64
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	f009 f8e8 	bl	800eeaa <HAL_SPI_Receive>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6918      	ldr	r0, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8a9b      	ldrh	r3, [r3, #20]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f008 f8af 	bl	800de4c <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005cf8:	2300      	movs	r3, #0
    }
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b086      	sub	sp, #24
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6918      	ldr	r0, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8a9b      	ldrh	r3, [r3, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f008 f896 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6998      	ldr	r0, [r3, #24]
 8005d24:	88fa      	ldrh	r2, [r7, #6]
 8005d26:	2364      	movs	r3, #100	@ 0x64
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	f008 ff82 	bl	800ec32 <HAL_SPI_Transmit>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6918      	ldr	r0, [r3, #16]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8a9b      	ldrh	r3, [r3, #20]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f008 f885 	bl	800de4c <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005d4c:	2300      	movs	r3, #0
    }
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b088      	sub	sp, #32
 8005d5a:	af02      	add	r7, sp, #8
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6918      	ldr	r0, [r3, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8a9b      	ldrh	r3, [r3, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f008 f86c 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6998      	ldr	r0, [r3, #24]
 8005d78:	887b      	ldrh	r3, [r7, #2]
 8005d7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d7e:	9200      	str	r2, [sp, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	f009 f9a2 	bl	800f0cc <HAL_SPI_TransmitReceive>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6918      	ldr	r0, [r3, #16]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8a9b      	ldrh	r3, [r3, #20]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f008 f855 	bl	800de4c <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e008      	b.n	8005db8 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6918      	ldr	r0, [r3, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8a9b      	ldrh	r3, [r3, #20]
 8005dae:	2201      	movs	r2, #1
 8005db0:	4619      	mov	r1, r3
 8005db2:	f008 f84b 	bl	800de4c <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005db6:	2300      	movs	r3, #0
    }
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005dd6:	681c      	ldr	r4, [r3, #0]
 8005dd8:	887b      	ldrh	r3, [r7, #2]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	47a0      	blx	r4
    }
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd90      	pop	{r4, r7, pc}

08005dea <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
 8005e04:	4603      	mov	r3, r0
    }
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
 8005e24:	4603      	mov	r3, r0
    }
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	4611      	mov	r1, r2
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
 8005e4c:	4603      	mov	r3, r0
    }
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005e56:	b590      	push	{r4, r7, lr}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005e66:	681c      	ldr	r4, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2100      	movs	r1, #0
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	47a0      	blx	r4
 8005e80:	4603      	mov	r3, r0
    }
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}

08005e8a <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8005e8a:	b590      	push	{r4, r7, lr}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005e9a:	681c      	ldr	r4, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
 8005eac:	4603      	mov	r3, r0
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	47a0      	blx	r4
 8005eb4:	4603      	mov	r3, r0
    }
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd90      	pop	{r4, r7, pc}

08005ebe <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8005ebe:	b5b0      	push	{r4, r5, r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ece:	681c      	ldr	r4, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8005ed8:	681d      	ldr	r5, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2103      	movs	r1, #3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	47a8      	blx	r5
 8005ef2:	eef0 7a40 	vmov.f32	s15, s0
 8005ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	47a0      	blx	r4
 8005efe:	4603      	mov	r3, r0
    }
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bdb0      	pop	{r4, r5, r7, pc}

08005f08 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8005f08:	b5b0      	push	{r4, r5, r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f18:	681c      	ldr	r4, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f22:	681d      	ldr	r5, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2106      	movs	r1, #6
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
 8005f34:	4603      	mov	r3, r0
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	47a8      	blx	r5
 8005f3e:	eef0 7a40 	vmov.f32	s15, s0
 8005f42:	eeb0 0a67 	vmov.f32	s0, s15
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	47a0      	blx	r4
 8005f4a:	4603      	mov	r3, r0
    }
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bdb0      	pop	{r4, r5, r7, pc}

08005f54 <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8005f54:	b5b0      	push	{r4, r5, r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f64:	681c      	ldr	r4, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005f6e:	681d      	ldr	r5, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2107      	movs	r1, #7
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
 8005f80:	4603      	mov	r3, r0
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	47a8      	blx	r5
 8005f8a:	eef0 7a40 	vmov.f32	s15, s0
 8005f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	47a0      	blx	r4
 8005f96:	4603      	mov	r3, r0
    }
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bdb0      	pop	{r4, r5, r7, pc}

08005fa0 <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8005fa0:	b5b0      	push	{r4, r5, r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fb0:	681c      	ldr	r4, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005fba:	681d      	ldr	r5, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2104      	movs	r1, #4
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	4603      	mov	r3, r0
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	47a8      	blx	r5
 8005fd6:	eef0 7a40 	vmov.f32	s15, s0
 8005fda:	eeb0 0a67 	vmov.f32	s0, s15
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	47a0      	blx	r4
 8005fe2:	4603      	mov	r3, r0
    }
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bdb0      	pop	{r4, r5, r7, pc}

08005fec <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8005fec:	b5b0      	push	{r4, r5, r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ffc:	681c      	ldr	r4, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006006:	681d      	ldr	r5, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2105      	movs	r1, #5
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
 8006018:	4603      	mov	r3, r0
 800601a:	b29b      	uxth	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	47a8      	blx	r5
 8006022:	eef0 7a40 	vmov.f32	s15, s0
 8006026:	eeb0 0a67 	vmov.f32	s0, s15
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	47a0      	blx	r4
 800602e:	4603      	mov	r3, r0
    }
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bdb0      	pop	{r4, r5, r7, pc}

08006038 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2104      	movs	r1, #4
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 800605a:	2300      	movs	r3, #0
    }
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	b2d1      	uxtb	r1, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	4798      	blx	r3
    }
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
    }
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 80060aa:	b590      	push	{r4, r7, lr}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80060ba:	681c      	ldr	r4, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2100      	movs	r1, #0
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
 80060cc:	4603      	mov	r3, r0
 80060ce:	461a      	mov	r2, r3
 80060d0:	2102      	movs	r1, #2
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	47a0      	blx	r4
    }
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd90      	pop	{r4, r7, pc}

080060de <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 80060de:	b590      	push	{r4, r7, lr}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80060f0:	681c      	ldr	r4, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	4603      	mov	r3, r0
 8006104:	461a      	mov	r2, r3
 8006106:	2102      	movs	r1, #2
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	47a0      	blx	r4
    }
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	bd90      	pop	{r4, r7, pc}

08006114 <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006126:	681c      	ldr	r4, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	ee07 2a90 	vmov	s15, r2
 8006138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613c:	eeb0 0a67 	vmov.f32	s0, s15
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	2106      	movs	r1, #6
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	47a0      	blx	r4
        return true;
 800614e:	2301      	movs	r3, #1
    }
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bd90      	pop	{r4, r7, pc}

08006158 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800616a:	681c      	ldr	r4, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	ee07 2a90 	vmov	s15, r2
 800617c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006180:	eeb0 0a67 	vmov.f32	s0, s15
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	2107      	movs	r1, #7
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	47a0      	blx	r4
        return true;
 8006192:	2301      	movs	r3, #1
    }
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	bd90      	pop	{r4, r7, pc}

0800619c <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061ae:	681c      	ldr	r4, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	ee07 2a90 	vmov	s15, r2
 80061c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c4:	eeb0 0a67 	vmov.f32	s0, s15
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
 80061cc:	4603      	mov	r3, r0
 80061ce:	461a      	mov	r2, r3
 80061d0:	2104      	movs	r1, #4
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	47a0      	blx	r4
        return true;
 80061d6:	2301      	movs	r3, #1
    }
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd90      	pop	{r4, r7, pc}

080061e0 <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061f2:	681c      	ldr	r4, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	ee07 2a90 	vmov	s15, r2
 8006204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006208:	eeb0 0a67 	vmov.f32	s0, s15
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	2105      	movs	r1, #5
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	47a0      	blx	r4
        return true;
 800621a:	2301      	movs	r3, #1
    }
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	bd90      	pop	{r4, r7, pc}

08006224 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	2b07      	cmp	r3, #7
 8006234:	d901      	bls.n	800623a <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8006236:	2300      	movs	r3, #0
 8006238:	e00f      	b.n	800625a <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3380      	adds	r3, #128	@ 0x80
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	2115      	movs	r1, #21
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	4798      	blx	r3
        return true;
 8006258:	2301      	movs	r3, #1
    }
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 8006262:	b590      	push	{r4, r7, lr}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8006274:	681c      	ldr	r4, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
 8006286:	4603      	mov	r3, r0
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	47a0      	blx	r4
    }
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bd90      	pop	{r4, r7, pc}

08006296 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8006296:	b5b0      	push	{r4, r5, r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	4613      	mov	r3, r2
 80062a2:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80062ac:	681c      	ldr	r4, [r3, #0]
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 80062b4:	2501      	movs	r5, #1
 80062b6:	e000      	b.n	80062ba <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 80062b8:	2500      	movs	r5, #0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	4798      	blx	r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	4629      	mov	r1, r5
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	47a0      	blx	r4
    }
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bdb0      	pop	{r4, r5, r7, pc}

080062dc <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
    }
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
    }
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8006318:	b5b0      	push	{r4, r5, r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	72fb      	strb	r3, [r7, #11]
 8006326:	4613      	mov	r3, r2
 8006328:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006332:	681c      	ldr	r4, [r3, #0]
 8006334:	7abb      	ldrb	r3, [r7, #10]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800633a:	2501      	movs	r5, #1
 800633c:	e000      	b.n	8006340 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800633e:	2500      	movs	r5, #0
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	ee07 2a90 	vmov	s15, r2
 8006350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006354:	eeb0 0a67 	vmov.f32	s0, s15
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	4798      	blx	r3
 800635c:	4603      	mov	r3, r0
 800635e:	7af9      	ldrb	r1, [r7, #11]
 8006360:	462a      	mov	r2, r5
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	47a0      	blx	r4
    }
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bdb0      	pop	{r4, r5, r7, pc}

0800636e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800636e:	b5b0      	push	{r4, r5, r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006382:	681c      	ldr	r4, [r3, #0]
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 800638a:	2501      	movs	r5, #1
 800638c:	e000      	b.n	8006390 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 800638e:	2500      	movs	r5, #0
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2106      	movs	r1, #6
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	4629      	mov	r1, r5
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	47a0      	blx	r4
    }
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bdb0      	pop	{r4, r5, r7, pc}

080063b2 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80063b2:	b5b0      	push	{r4, r5, r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	460b      	mov	r3, r1
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80063c8:	681c      	ldr	r4, [r3, #0]
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 80063d0:	2501      	movs	r5, #1
 80063d2:	e000      	b.n	80063d6 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 80063d4:	2500      	movs	r5, #0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	ee07 2a90 	vmov	s15, r2
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	eeb0 0a67 	vmov.f32	s0, s15
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	4798      	blx	r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	4629      	mov	r1, r5
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	47a0      	blx	r4
    }
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bdb0      	pop	{r4, r5, r7, pc}

08006404 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	460b      	mov	r3, r1
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	7afa      	ldrb	r2, [r7, #11]
 800641e:	2a01      	cmp	r2, #1
 8006420:	d101      	bne.n	8006426 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 8006422:	2101      	movs	r1, #1
 8006424:	e000      	b.n	8006428 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 8006426:	2100      	movs	r1, #0
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	4798      	blx	r3
    }
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
    }
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	4798      	blx	r3
    }
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
    }
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
    }
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80064b6:	bf00      	nop
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2101      	movs	r1, #1
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bf0c      	ite	eq
 80064ce:	2301      	moveq	r3, #1
 80064d0:	2300      	movne	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1ef      	bne.n	80064b8 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3380      	adds	r3, #128	@ 0x80
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	78fa      	ldrb	r2, [r7, #3]
 8006506:	2a01      	cmp	r2, #1
 8006508:	d101      	bne.n	800650e <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 800650a:	2201      	movs	r2, #1
 800650c:	e000      	b.n	8006510 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800650e:	2200      	movs	r2, #0
 8006510:	4611      	mov	r1, r2
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
    }
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
 800652a:	4613      	mov	r3, r2
 800652c:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	78ba      	ldrb	r2, [r7, #2]
 800653a:	2a01      	cmp	r2, #1
 800653c:	d101      	bne.n	8006542 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800653e:	2201      	movs	r2, #1
 8006540:	e000      	b.n	8006544 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006542:	2200      	movs	r2, #0
 8006544:	78f9      	ldrb	r1, [r7, #3]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
    }
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 8006552:	b580      	push	{r7, lr}
 8006554:	b082      	sub	sp, #8
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	4798      	blx	r3
    }
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	4611      	mov	r1, r2
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2100      	movs	r1, #0
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2102      	movs	r1, #2
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2103      	movs	r1, #3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2203      	movs	r2, #3
 8006630:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2106      	movs	r1, #6
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2204      	movs	r2, #4
 8006658:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2107      	movs	r1, #7
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2205      	movs	r2, #5
 8006680:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2104      	movs	r1, #4
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2206      	movs	r2, #6
 80066a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2105      	movs	r1, #5
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2207      	movs	r2, #7
 80066d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 80066e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80066ec:	4b09      	ldr	r3, [pc, #36]	@ (8006714 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4906      	ldr	r1, [pc, #24]	@ (8006718 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2208      	movs	r2, #8
 8006706:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000241 	.word	0x20000241
 8006718:	20000244 	.word	0x20000244

0800671c <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	b2d1      	uxtb	r1, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2200      	movs	r2, #0
 8006786:	2102      	movs	r1, #2
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2209      	movs	r2, #9
 8006790:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80067ae:	681c      	ldr	r4, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	4798      	blx	r3
 80067c0:	4603      	mov	r3, r0
 80067c2:	461a      	mov	r2, r3
 80067c4:	2102      	movs	r1, #2
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd90      	pop	{r4, r7, pc}

080067da <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 80067da:	b590      	push	{r4, r7, lr}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80067ec:	681c      	ldr	r4, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	ee07 2a90 	vmov	s15, r2
 80067fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006802:	eeb0 0a67 	vmov.f32	s0, s15
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
 800680a:	4603      	mov	r3, r0
 800680c:	461a      	mov	r2, r3
 800680e:	2103      	movs	r1, #3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bd90      	pop	{r4, r7, pc}

08006824 <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8006824:	b590      	push	{r4, r7, lr}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006836:	681c      	ldr	r4, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	ee07 2a90 	vmov	s15, r2
 8006848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684c:	eeb0 0a67 	vmov.f32	s0, s15
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
 8006854:	4603      	mov	r3, r0
 8006856:	461a      	mov	r2, r3
 8006858:	2106      	movs	r1, #6
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bd90      	pop	{r4, r7, pc}

0800686e <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 800686e:	b590      	push	{r4, r7, lr}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006880:	681c      	ldr	r4, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	ee07 2a90 	vmov	s15, r2
 8006892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006896:	eeb0 0a67 	vmov.f32	s0, s15
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	2107      	movs	r1, #7
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd90      	pop	{r4, r7, pc}

080068b8 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068ca:	681c      	ldr	r4, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	ee07 2a90 	vmov	s15, r2
 80068dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e0:	eeb0 0a67 	vmov.f32	s0, s15
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	2104      	movs	r1, #4
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}

08006902 <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8006902:	b590      	push	{r4, r7, lr}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006914:	681c      	ldr	r4, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	ee07 2a90 	vmov	s15, r2
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	eeb0 0a67 	vmov.f32	s0, s15
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	2105      	movs	r1, #5
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	bd90      	pop	{r4, r7, pc}

0800694c <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 800694c:	b590      	push	{r4, r7, lr}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800695e:	681c      	ldr	r4, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
 8006970:	4603      	mov	r3, r0
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bd90      	pop	{r4, r7, pc}

08006988 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006988:	b5b0      	push	{r4, r5, r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800699e:	681c      	ldr	r4, [r3, #0]
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 80069a6:	2501      	movs	r5, #1
 80069a8:	e000      	b.n	80069ac <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 80069aa:	2500      	movs	r5, #0
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	4798      	blx	r3
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	4629      	mov	r1, r5
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bdb0      	pop	{r4, r5, r7, pc}

080069d6 <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006a22:	b5b0      	push	{r4, r5, r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	607b      	str	r3, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	72fb      	strb	r3, [r7, #11]
 8006a30:	4613      	mov	r3, r2
 8006a32:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006a3c:	681c      	ldr	r4, [r3, #0]
 8006a3e:	7abb      	ldrb	r3, [r7, #10]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006a44:	2501      	movs	r5, #1
 8006a46:	e000      	b.n	8006a4a <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006a48:	2500      	movs	r5, #0
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	ee07 2a90 	vmov	s15, r2
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	4798      	blx	r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	7af9      	ldrb	r1, [r7, #11]
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bdb0      	pop	{r4, r5, r7, pc}

08006a80 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006a80:	b5b0      	push	{r4, r5, r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006a94:	681c      	ldr	r4, [r3, #0]
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006a9c:	2501      	movs	r5, #1
 8006a9e:	e000      	b.n	8006aa2 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006aa0:	2500      	movs	r5, #0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2106      	movs	r1, #6
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	4798      	blx	r3
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bdb0      	pop	{r4, r5, r7, pc}

08006acc <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006acc:	b5b0      	push	{r4, r5, r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006ae2:	681c      	ldr	r4, [r3, #0]
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006aea:	2501      	movs	r5, #1
 8006aec:	e000      	b.n	8006af0 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006aee:	2500      	movs	r5, #0
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	ee07 2a90 	vmov	s15, r2
 8006b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b04:	eeb0 0a67 	vmov.f32	s0, s15
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	4798      	blx	r3
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4629      	mov	r1, r5
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b1e:	bf00      	nop
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bdb0      	pop	{r4, r5, r7, pc}

08006b26 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	607a      	str	r2, [r7, #4]
 8006b32:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	7afa      	ldrb	r2, [r7, #11]
 8006b40:	2a01      	cmp	r2, #1
 8006b42:	d101      	bne.n	8006b48 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006b44:	2101      	movs	r1, #1
 8006b46:	e000      	b.n	8006b4a <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006b48:	2100      	movs	r1, #0
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	2a01      	cmp	r2, #1
 8006c12:	d101      	bne.n	8006c18 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006c14:	2201      	movs	r2, #1
 8006c16:	e000      	b.n	8006c1a <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	78ba      	ldrb	r2, [r7, #2]
 8006c4c:	2a01      	cmp	r2, #1
 8006c4e:	d101      	bne.n	8006c54 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006c50:	2201      	movs	r2, #1
 8006c52:	e000      	b.n	8006c56 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006c54:	2200      	movs	r2, #0
 8006c56:	78f9      	ldrb	r1, [r7, #3]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
 8006ca8:	4603      	mov	r3, r0
    }
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006ccc:	b5b0      	push	{r4, r5, r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	f200 80fe 	bhi.w	8006ee0 <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d0d 	.word	0x08006d0d
 8006cf0:	08006d39 	.word	0x08006d39
 8006cf4:	08006d67 	.word	0x08006d67
 8006cf8:	08006dab 	.word	0x08006dab
 8006cfc:	08006df1 	.word	0x08006df1
 8006d00:	08006e37 	.word	0x08006e37
 8006d04:	08006e7d 	.word	0x08006e7d
 8006d08:	08006ec3 	.word	0x08006ec3
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006d14:	681c      	ldr	r4, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6a12      	ldr	r2, [r2, #32]
 8006d24:	7b92      	ldrb	r2, [r2, #14]
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	47a0      	blx	r4
 8006d34:	4603      	mov	r3, r0
 8006d36:	e0d4      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006d40:	681c      	ldr	r4, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6a12      	ldr	r2, [r2, #32]
 8006d50:	3228      	adds	r2, #40	@ 0x28
 8006d52:	7b92      	ldrb	r2, [r2, #14]
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	47a0      	blx	r4
 8006d62:	4603      	mov	r3, r0
 8006d64:	e0bd      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d6e:	681c      	ldr	r4, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006d78:	681d      	ldr	r5, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6a12      	ldr	r2, [r2, #32]
 8006d88:	323c      	adds	r2, #60	@ 0x3c
 8006d8a:	7b92      	ldrb	r2, [r2, #14]
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	47a8      	blx	r5
 8006d9a:	eef0 7a40 	vmov.f32	s15, s0
 8006d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	47a0      	blx	r4
 8006da6:	4603      	mov	r3, r0
 8006da8:	e09b      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006db2:	681c      	ldr	r4, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006dbc:	681d      	ldr	r5, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6a12      	ldr	r2, [r2, #32]
 8006dcc:	3278      	adds	r2, #120	@ 0x78
 8006dce:	7b92      	ldrb	r2, [r2, #14]
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	47a8      	blx	r5
 8006de0:	eef0 7a40 	vmov.f32	s15, s0
 8006de4:	eeb0 0a67 	vmov.f32	s0, s15
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	47a0      	blx	r4
 8006dec:	4603      	mov	r3, r0
 8006dee:	e078      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006df8:	681c      	ldr	r4, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006e02:	681d      	ldr	r5, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6a12      	ldr	r2, [r2, #32]
 8006e12:	328c      	adds	r2, #140	@ 0x8c
 8006e14:	7b92      	ldrb	r2, [r2, #14]
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	47a8      	blx	r5
 8006e26:	eef0 7a40 	vmov.f32	s15, s0
 8006e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	47a0      	blx	r4
 8006e32:	4603      	mov	r3, r0
 8006e34:	e055      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e3e:	681c      	ldr	r4, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006e48:	681d      	ldr	r5, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6a12      	ldr	r2, [r2, #32]
 8006e58:	3250      	adds	r2, #80	@ 0x50
 8006e5a:	7b92      	ldrb	r2, [r2, #14]
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	47a8      	blx	r5
 8006e6c:	eef0 7a40 	vmov.f32	s15, s0
 8006e70:	eeb0 0a67 	vmov.f32	s0, s15
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	47a0      	blx	r4
 8006e78:	4603      	mov	r3, r0
 8006e7a:	e032      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e84:	681c      	ldr	r4, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006e8e:	681d      	ldr	r5, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6a12      	ldr	r2, [r2, #32]
 8006e9e:	3264      	adds	r2, #100	@ 0x64
 8006ea0:	7b92      	ldrb	r2, [r2, #14]
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	47a8      	blx	r5
 8006eb2:	eef0 7a40 	vmov.f32	s15, s0
 8006eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	47a0      	blx	r4
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	e00f      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2104      	movs	r1, #4
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e002      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8006edc:	2300      	movs	r3, #0
 8006ede:	e000      	b.n	8006ee2 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8006ee0:	2300      	movs	r3, #0
    }
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8006eea:	bf00      	nop

08006eec <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6898      	ldr	r0, [r3, #8]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	899b      	ldrh	r3, [r3, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	4619      	mov	r1, r3
 8006f00:	f006 ffa4 	bl	800de4c <HAL_GPIO_WritePin>
    }
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f1c:	d303      	bcc.n	8006f26 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8006f24:	e000      	b.n	8006f28 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8006f26:	683b      	ldr	r3, [r7, #0]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	db05      	blt.n	8006f50 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f4a:	da01      	bge.n	8006f50 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	e00c      	b.n	8006f6a <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8006f56:	db06      	blt.n	8006f66 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	da03      	bge.n	8006f66 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8006f64:	e001      	b.n	8006f6a <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 8006f66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006fa4 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 8006f90:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006f94:	eeb0 0a67 	vmov.f32	s0, s15
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	3c74242a 	.word	0x3c74242a

08006fa8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8006fb4:	edd7 7a00 	vldr	s15, [r7]
 8006fb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006fec <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 8006fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc4:	d80a      	bhi.n	8006fdc <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8006fc6:	ed97 7a00 	vldr	s14, [r7]
 8006fca:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006ff0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 8006fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd6:	ee17 3a90 	vmov	r3, s15
 8006fda:	e000      	b.n	8006fde <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	4674241b 	.word	0x4674241b
 8006ff0:	3c74242a 	.word	0x3c74242a

08006ff4 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 8007000:	887b      	ldrh	r3, [r7, #2]
 8007002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007006:	d209      	bcs.n	800701c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8007008:	887b      	ldrh	r3, [r7, #2]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007012:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007030 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 8007016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800701a:	e001      	b.n	8007020 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800701c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007034 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 8007020:	eeb0 0a67 	vmov.f32	s0, s15
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	4168d4fe 	.word	0x4168d4fe
 8007034:	00000000 	.word	0x00000000

08007038 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8007044:	edd7 7a00 	vldr	s15, [r7]
 8007048:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800707c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 800704c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007054:	d80b      	bhi.n	800706e <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8007056:	ed97 7a00 	vldr	s14, [r7]
 800705a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007080 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 800705e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007066:	ee17 3a90 	vmov	r3, s15
 800706a:	b29b      	uxth	r3, r3
 800706c:	e000      	b.n	8007070 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	4768c671 	.word	0x4768c671
 8007080:	4168d4fe 	.word	0x4168d4fe

08007084 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 8007090:	887b      	ldrh	r3, [r7, #2]
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007096:	d209      	bcs.n	80070ac <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8007098:	887b      	ldrh	r3, [r7, #2]
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070a2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80070c0 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 80070a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070aa:	e001      	b.n	80070b0 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80070ac:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80070c4 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 80070b0:	eeb0 0a67 	vmov.f32	s0, s15
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	4168d4fe 	.word	0x4168d4fe
 80070c4:	00000000 	.word	0x00000000

080070c8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80070d4:	edd7 7a00 	vldr	s15, [r7]
 80070d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800710c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 80070dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e4:	d80b      	bhi.n	80070fe <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80070e6:	ed97 7a00 	vldr	s14, [r7]
 80070ea:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007110 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 80070ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f6:	ee17 3a90 	vmov	r3, s15
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	e000      	b.n	8007100 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	4768c671 	.word	0x4768c671
 8007110:	4168d4fe 	.word	0x4168d4fe

08007114 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8007120:	887b      	ldrh	r3, [r7, #2]
 8007122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007126:	d209      	bcs.n	800713c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8007128:	887b      	ldrh	r3, [r7, #2]
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007132:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007150 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8007136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800713a:	e001      	b.n	8007140 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800713c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007154 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8007140:	eeb0 0a67 	vmov.f32	s0, s15
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	4174240b 	.word	0x4174240b
 8007154:	00000000 	.word	0x00000000

08007158 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8007164:	edd7 7a00 	vldr	s15, [r7]
 8007168:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800719c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800716c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007174:	d80b      	bhi.n	800718e <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8007176:	ed97 7a00 	vldr	s14, [r7]
 800717a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80071a0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800717e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007186:	ee17 3a90 	vmov	r3, s15
 800718a:	b29b      	uxth	r3, r3
 800718c:	e000      	b.n	8007190 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	4673e702 	.word	0x4673e702
 80071a0:	4174240b 	.word	0x4174240b

080071a4 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80071b0:	887b      	ldrh	r3, [r7, #2]
 80071b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b6:	d209      	bcs.n	80071cc <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80071b8:	887b      	ldrh	r3, [r7, #2]
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80071e0 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 80071c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071ca:	e001      	b.n	80071d0 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80071cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80071e4 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 80071d0:	eeb0 0a67 	vmov.f32	s0, s15
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	3e742401 	.word	0x3e742401
 80071e4:	00000000 	.word	0x00000000

080071e8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80071f4:	edd7 7a00 	vldr	s15, [r7]
 80071f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800722c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 80071fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007204:	d80b      	bhi.n	800721e <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8007206:	ed97 7a00 	vldr	s14, [r7]
 800720a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007230 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 800720e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007216:	ee17 3a90 	vmov	r3, s15
 800721a:	b29b      	uxth	r3, r3
 800721c:	e000      	b.n	8007220 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	447414bf 	.word	0x447414bf
 8007230:	3e742401 	.word	0x3e742401

08007234 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8007240:	887b      	ldrh	r3, [r7, #2]
 8007242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007246:	d219      	bcs.n	800727c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007248:	887b      	ldrh	r3, [r7, #2]
 800724a:	4618      	mov	r0, r3
 800724c:	f7f9 f99a 	bl	8000584 <__aeabi_i2d>
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	4b0e      	ldr	r3, [pc, #56]	@ (8007290 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8007256:	f7f9 f849 	bl	80002ec <__adddf3>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4610      	mov	r0, r2
 8007260:	4619      	mov	r1, r3
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	4b0b      	ldr	r3, [pc, #44]	@ (8007294 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8007268:	f7f9 f9f6 	bl	8000658 <__aeabi_dmul>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4610      	mov	r0, r2
 8007272:	4619      	mov	r1, r3
 8007274:	f7f9 fcc8 	bl	8000c08 <__aeabi_d2f>
 8007278:	4603      	mov	r3, r0
 800727a:	e001      	b.n	8007280 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800727c:	f04f 0300 	mov.w	r3, #0
}
 8007280:	ee07 3a90 	vmov	s15, r3
 8007284:	eeb0 0a67 	vmov.f32	s0, s15
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	3fe00000 	.word	0x3fe00000
 8007294:	402e8000 	.word	0x402e8000

08007298 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80072a4:	edd7 7a00 	vldr	s15, [r7]
 80072a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80072e4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 80072ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b4:	d80f      	bhi.n	80072d6 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80072b6:	ed97 7a00 	vldr	s14, [r7]
 80072ba:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80072e8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 80072be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80072c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ce:	ee17 3a90 	vmov	r3, s15
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	e000      	b.n	80072d8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	4673e180 	.word	0x4673e180
 80072e8:	41740000 	.word	0x41740000

080072ec <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 80072f8:	887b      	ldrh	r3, [r7, #2]
 80072fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072fe:	d209      	bcs.n	8007314 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8007300:	887b      	ldrh	r3, [r7, #2]
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800730a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007328 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800730e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007312:	e001      	b.n	8007318 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007314:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800732c <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8007318:	eeb0 0a67 	vmov.f32	s0, s15
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	3d7423f4 	.word	0x3d7423f4
 800732c:	00000000 	.word	0x00000000

08007330 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800733c:	edd7 7a00 	vldr	s15, [r7]
 8007340:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007374 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 8007344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734c:	d80b      	bhi.n	8007366 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800734e:	ed97 7a00 	vldr	s14, [r7]
 8007352:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007378 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 8007356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800735a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735e:	ee17 3a90 	vmov	r3, s15
 8007362:	b29b      	uxth	r3, r3
 8007364:	e000      	b.n	8007368 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	44742023 	.word	0x44742023
 8007378:	3d7423f4 	.word	0x3d7423f4

0800737c <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007392:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80073a8 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 8007396:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800739a:	eeb0 0a67 	vmov.f32	s0, s15
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	3783956e 	.word	0x3783956e

080073ac <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80073b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80073bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80073f4 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 80073c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c8:	d80c      	bhi.n	80073e4 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80073ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80073ce:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80073f8 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 80073d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073da:	edc7 7a01 	vstr	s15, [r7, #4]
 80073de:	793b      	ldrb	r3, [r7, #4]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e000      	b.n	80073e6 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	3b8311d9 	.word	0x3b8311d9
 80073f8:	3783956e 	.word	0x3783956e

080073fc <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007412:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007428 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8007416:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800741a:	eeb0 0a67 	vmov.f32	s0, s15
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	3783956e 	.word	0x3783956e

0800742c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8007438:	edd7 7a02 	vldr	s15, [r7, #8]
 800743c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007474 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8007440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	d80c      	bhi.n	8007464 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800744a:	ed97 7a02 	vldr	s14, [r7, #8]
 800744e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007478 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8007452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800745a:	edc7 7a01 	vstr	s15, [r7, #4]
 800745e:	793b      	ldrb	r3, [r7, #4]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	e000      	b.n	8007466 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	3b8311d9 	.word	0x3b8311d9
 8007478:	3783956e 	.word	0x3783956e

0800747c <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007492:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80074a8 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8007496:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800749a:	eeb0 0a67 	vmov.f32	s0, s15
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	3783956e 	.word	0x3783956e

080074ac <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80074b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80074bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80074f4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80074c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c8:	d80c      	bhi.n	80074e4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80074ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80074ce:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80074f8 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 80074d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074da:	edc7 7a01 	vstr	s15, [r7, #4]
 80074de:	793b      	ldrb	r3, [r7, #4]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	e000      	b.n	80074e6 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	3b8311d9 	.word	0x3b8311d9
 80074f8:	3783956e 	.word	0x3783956e

080074fc <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	2b0f      	cmp	r3, #15
 800750c:	d80a      	bhi.n	8007524 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	3301      	adds	r3, #1
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800751a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007538 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 800751e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007522:	e001      	b.n	8007528 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 8007524:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800753c <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 8007528:	eeb0 0a67 	vmov.f32	s0, s15
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	43bb8000 	.word	0x43bb8000
 800753c:	00000000 	.word	0x00000000

08007540 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800754c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007550:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80075dc <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 8007554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755c:	d836      	bhi.n	80075cc <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800755e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007562:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80075e0 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 8007566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800756a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800756e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007576:	edc7 7a01 	vstr	s15, [r7, #4]
 800757a:	793b      	ldrb	r3, [r7, #4]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007586:	ed97 7a05 	vldr	s14, [r7, #20]
 800758a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800758e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8007592:	edd7 7a04 	vldr	s15, [r7, #16]
 8007596:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800759a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a2:	d50a      	bpl.n	80075ba <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80075a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80075a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80075b0:	793b      	ldrb	r3, [r7, #4]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	e009      	b.n	80075ce <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 80075ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80075be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80075c6:	793b      	ldrb	r3, [r7, #4]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	e000      	b.n	80075ce <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	45bb8000 	.word	0x45bb8000
 80075e0:	43bb8000 	.word	0x43bb8000

080075e4 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 80075f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	db0a      	blt.n	800760e <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	3301      	adds	r3, #1
 80075fc:	ee07 3a90 	vmov	s15, r3
 8007600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007604:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007620 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 8007608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800760c:	e001      	b.n	8007612 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800760e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007624 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 8007612:	eeb0 0a67 	vmov.f32	s0, s15
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	41fa0000 	.word	0x41fa0000
 8007624:	00000000 	.word	0x00000000

08007628 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8007634:	edd7 7a02 	vldr	s15, [r7, #8]
 8007638:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80076c4 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 800763c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007644:	d836      	bhi.n	80076b4 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 8007646:	ed97 7a02 	vldr	s14, [r7, #8]
 800764a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80076c8 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 800764e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007652:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007656:	edd7 7a05 	vldr	s15, [r7, #20]
 800765a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007662:	793b      	ldrb	r3, [r7, #4]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007676:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800767a:	edd7 7a04 	vldr	s15, [r7, #16]
 800767e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768a:	d50a      	bpl.n	80076a2 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800768c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007694:	edc7 7a01 	vstr	s15, [r7, #4]
 8007698:	793b      	ldrb	r3, [r7, #4]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	e009      	b.n	80076b6 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 80076a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80076a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80076ae:	793b      	ldrb	r3, [r7, #4]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	e000      	b.n	80076b6 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	457a0000 	.word	0x457a0000
 80076c8:	41fa0000 	.word	0x41fa0000

080076cc <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
  reset_device();
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3394      	adds	r3, #148	@ 0x94
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	4798      	blx	r3
  get_status();
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	330c      	adds	r3, #12
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	edd2 7a05 	vldr	s15, [r2, #20]
 8007702:	eeb0 0a67 	vmov.f32	s0, s15
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	4798      	blx	r3
 800770a:	4603      	mov	r3, r0
 800770c:	461a      	mov	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	edd2 7a06 	vldr	s15, [r2, #24]
 8007724:	eeb0 0a67 	vmov.f32	s0, s15
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	4798      	blx	r3
 800772c:	4603      	mov	r3, r0
 800772e:	461a      	mov	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	edd2 7a07 	vldr	s15, [r2, #28]
 8007746:	eeb0 0a67 	vmov.f32	s0, s15
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	4798      	blx	r3
 800774e:	4603      	mov	r3, r0
 8007750:	461a      	mov	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	edd2 7a08 	vldr	s15, [r2, #32]
 8007768:	eeb0 0a67 	vmov.f32	s0, s15
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	4798      	blx	r3
 8007770:	4603      	mov	r3, r0
 8007772:	461a      	mov	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800778a:	eeb0 0a67 	vmov.f32	s0, s15
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	461a      	mov	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80077a2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007a74 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80077a6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	ed93 7a00 	vldr	s14, [r3]
 80077b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80077bc:	793b      	ldrb	r3, [r7, #4]
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80077cc:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007a74 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80077d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	ed93 7a00 	vldr	s14, [r3]
 80077da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80077e6:	793b      	ldrb	r3, [r7, #4]
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80077f6:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8007a74 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80077fa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	ed93 7a00 	vldr	s14, [r3]
 8007804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800780c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007810:	793b      	ldrb	r3, [r7, #4]
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8007820:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8007a74 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007824:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	ed93 7a00 	vldr	s14, [r3]
 800782e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007836:	edc7 7a01 	vstr	s15, [r7, #4]
 800783a:	793b      	ldrb	r3, [r7, #4]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8007854:	eeb0 0a67 	vmov.f32	s0, s15
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	4798      	blx	r3
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8007876:	eeb0 0a67 	vmov.f32	s0, s15
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	4798      	blx	r3
 800787e:	4603      	mov	r3, r0
 8007880:	461a      	mov	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8007898:	eeb0 0a67 	vmov.f32	s0, s15
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	4798      	blx	r3
 80078a0:	4603      	mov	r3, r0
 80078a2:	461a      	mov	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 80078ba:	eeb0 0a67 	vmov.f32	s0, s15
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	4798      	blx	r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	461a      	mov	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 80078e8:	eeb0 0a67 	vmov.f32	s0, s15
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	4798      	blx	r3
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800790a:	eeb0 0a67 	vmov.f32	s0, s15
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	4798      	blx	r3
 8007912:	4603      	mov	r3, r0
 8007914:	461a      	mov	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8007950:	2104      	movs	r1, #4
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8007966:	2105      	movs	r1, #5
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800797c:	2106      	movs	r1, #6
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8007992:	2107      	movs	r1, #7
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80079a8:	2108      	movs	r1, #8
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80079be:	2109      	movs	r1, #9
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 80079d4:	210a      	movs	r1, #10
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80079ea:	210b      	movs	r1, #11
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007a00:	210c      	movs	r1, #12
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8007a16:	210d      	movs	r1, #13
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8007a2c:	210e      	movs	r1, #14
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8007a42:	210f      	movs	r1, #15
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8007a58:	2110      	movs	r1, #16
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8007a6e:	2111      	movs	r1, #17
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	e001      	b.n	8007a78 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007a74:	43800000 	.word	0x43800000
 8007a78:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8007a8a:	2113      	movs	r1, #19
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007ab6:	2116      	movs	r1, #22
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8007acc:	2117      	movs	r1, #23
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3354      	adds	r3, #84	@ 0x54
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	4798      	blx	r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	f083 0301 	eor.w	r3, r3, #1
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e000      	b.n	8007af8 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007b16:	681c      	ldr	r4, [r3, #0]
 8007b18:	7afa      	ldrb	r2, [r7, #11]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	4613      	mov	r3, r2
 8007b24:	2201      	movs	r2, #1
 8007b26:	490c      	ldr	r1, [pc, #48]	@ (8007b58 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a09      	ldr	r2, [pc, #36]	@ (8007b5c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007b38:	4907      	ldr	r1, [pc, #28]	@ (8007b58 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a05      	ldr	r2, [pc, #20]	@ (8007b60 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007b4a:	4904      	ldr	r1, [pc, #16]	@ (8007b5c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	4798      	blx	r3
}
 8007b50:	bf00      	nop
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd90      	pop	{r4, r7, pc}
 8007b58:	20000244 	.word	0x20000244
 8007b5c:	20000264 	.word	0x20000264
 8007b60:	2000026c 	.word	0x2000026c

08007b64 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007b64:	b590      	push	{r4, r7, lr}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007b78:	681c      	ldr	r4, [r3, #0]
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	9201      	str	r2, [sp, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	9200      	str	r2, [sp, #0]
 8007b84:	2202      	movs	r2, #2
 8007b86:	4917      	ldr	r1, [pc, #92]	@ (8007be4 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a14      	ldr	r2, [pc, #80]	@ (8007be8 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007b98:	4912      	ldr	r1, [pc, #72]	@ (8007be4 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a10      	ldr	r2, [pc, #64]	@ (8007bec <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007baa:	490f      	ldr	r1, [pc, #60]	@ (8007be8 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a19      	ldr	r1, [r3, #32]
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	7b9b      	ldrb	r3, [r3, #14]
 8007bc2:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	7bfa      	ldrb	r2, [r7, #15]
 8007bd0:	4906      	ldr	r1, [pc, #24]	@ (8007bec <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007bda:	68bb      	ldr	r3, [r7, #8]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd90      	pop	{r4, r7, pc}
 8007be4:	20000244 	.word	0x20000244
 8007be8:	20000264 	.word	0x20000264
 8007bec:	2000026c 	.word	0x2000026c

08007bf0 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007bf0:	b590      	push	{r4, r7, lr}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c06:	681c      	ldr	r4, [r3, #0]
 8007c08:	7afa      	ldrb	r2, [r7, #11]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4613      	mov	r3, r2
 8007c14:	2203      	movs	r2, #3
 8007c16:	490c      	ldr	r1, [pc, #48]	@ (8007c48 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a09      	ldr	r2, [pc, #36]	@ (8007c4c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007c28:	4907      	ldr	r1, [pc, #28]	@ (8007c48 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a05      	ldr	r2, [pc, #20]	@ (8007c50 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007c3a:	4904      	ldr	r1, [pc, #16]	@ (8007c4c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	4798      	blx	r3
}
 8007c40:	bf00      	nop
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd90      	pop	{r4, r7, pc}
 8007c48:	20000244 	.word	0x20000244
 8007c4c:	20000264 	.word	0x20000264
 8007c50:	2000026c 	.word	0x2000026c

08007c54 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007c54:	b590      	push	{r4, r7, lr}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c68:	681c      	ldr	r4, [r3, #0]
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	9201      	str	r2, [sp, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	9200      	str	r2, [sp, #0]
 8007c74:	2204      	movs	r2, #4
 8007c76:	490c      	ldr	r1, [pc, #48]	@ (8007ca8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a09      	ldr	r2, [pc, #36]	@ (8007cac <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007c88:	4907      	ldr	r1, [pc, #28]	@ (8007ca8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a05      	ldr	r2, [pc, #20]	@ (8007cb0 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007c9a:	4904      	ldr	r1, [pc, #16]	@ (8007cac <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd90      	pop	{r4, r7, pc}
 8007ca8:	20000244 	.word	0x20000244
 8007cac:	20000264 	.word	0x20000264
 8007cb0:	2000026c 	.word	0x2000026c

08007cb4 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007cca:	681c      	ldr	r4, [r3, #0]
 8007ccc:	7afa      	ldrb	r2, [r7, #11]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	2205      	movs	r2, #5
 8007cda:	490c      	ldr	r1, [pc, #48]	@ (8007d0c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a09      	ldr	r2, [pc, #36]	@ (8007d10 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007cec:	4907      	ldr	r1, [pc, #28]	@ (8007d0c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a05      	ldr	r2, [pc, #20]	@ (8007d14 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007cfe:	4904      	ldr	r1, [pc, #16]	@ (8007d10 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	4798      	blx	r3
}
 8007d04:	bf00      	nop
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd90      	pop	{r4, r7, pc}
 8007d0c:	20000244 	.word	0x20000244
 8007d10:	20000264 	.word	0x20000264
 8007d14:	2000026c 	.word	0x2000026c

08007d18 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d28:	d21f      	bcs.n	8007d6a <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d32:	681c      	ldr	r4, [r3, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2206      	movs	r2, #6
 8007d40:	490c      	ldr	r1, [pc, #48]	@ (8007d74 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a09      	ldr	r2, [pc, #36]	@ (8007d78 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007d52:	4908      	ldr	r1, [pc, #32]	@ (8007d74 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a06      	ldr	r2, [pc, #24]	@ (8007d7c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007d64:	4904      	ldr	r1, [pc, #16]	@ (8007d78 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd90      	pop	{r4, r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000244 	.word	0x20000244
 8007d78:	20000264 	.word	0x20000264
 8007d7c:	2000026c 	.word	0x2000026c

08007d80 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d94:	d220      	bcs.n	8007dd8 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d9e:	681c      	ldr	r4, [r3, #0]
 8007da0:	7afa      	ldrb	r2, [r7, #11]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	2207      	movs	r2, #7
 8007dae:	490c      	ldr	r1, [pc, #48]	@ (8007de0 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a09      	ldr	r2, [pc, #36]	@ (8007de4 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007dc0:	4907      	ldr	r1, [pc, #28]	@ (8007de0 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a05      	ldr	r2, [pc, #20]	@ (8007de8 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007dd2:	4904      	ldr	r1, [pc, #16]	@ (8007de4 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	4798      	blx	r3
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd90      	pop	{r4, r7, pc}
 8007de0:	20000244 	.word	0x20000244
 8007de4:	20000264 	.word	0x20000264
 8007de8:	2000026c 	.word	0x2000026c

08007dec <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	607b      	str	r3, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	72fb      	strb	r3, [r7, #11]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e06:	681c      	ldr	r4, [r3, #0]
 8007e08:	7af9      	ldrb	r1, [r7, #11]
 8007e0a:	7abb      	ldrb	r3, [r7, #10]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	9201      	str	r2, [sp, #4]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	460b      	mov	r3, r1
 8007e14:	2208      	movs	r2, #8
 8007e16:	490c      	ldr	r1, [pc, #48]	@ (8007e48 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a09      	ldr	r2, [pc, #36]	@ (8007e4c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007e28:	4907      	ldr	r1, [pc, #28]	@ (8007e48 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a05      	ldr	r2, [pc, #20]	@ (8007e50 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007e3a:	4904      	ldr	r1, [pc, #16]	@ (8007e4c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	4798      	blx	r3
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd90      	pop	{r4, r7, pc}
 8007e48:	20000244 	.word	0x20000244
 8007e4c:	20000264 	.word	0x20000264
 8007e50:	2000026c 	.word	0x2000026c

08007e54 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
 8007e60:	4613      	mov	r3, r2
 8007e62:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e6c:	681c      	ldr	r4, [r3, #0]
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	78bb      	ldrb	r3, [r7, #2]
 8007e72:	2100      	movs	r1, #0
 8007e74:	9101      	str	r1, [sp, #4]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	2209      	movs	r2, #9
 8007e7c:	490c      	ldr	r1, [pc, #48]	@ (8007eb0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a09      	ldr	r2, [pc, #36]	@ (8007eb4 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007e8e:	4908      	ldr	r1, [pc, #32]	@ (8007eb0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a06      	ldr	r2, [pc, #24]	@ (8007eb8 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8007ea0:	4904      	ldr	r1, [pc, #16]	@ (8007eb4 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd90      	pop	{r4, r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000244 	.word	0x20000244
 8007eb4:	20000264 	.word	0x20000264
 8007eb8:	2000026c 	.word	0x2000026c

08007ebc <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ecc:	681c      	ldr	r4, [r3, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	220a      	movs	r2, #10
 8007eda:	490c      	ldr	r1, [pc, #48]	@ (8007f0c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a09      	ldr	r2, [pc, #36]	@ (8007f10 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007eec:	4907      	ldr	r1, [pc, #28]	@ (8007f0c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a05      	ldr	r2, [pc, #20]	@ (8007f14 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 8007efe:	4904      	ldr	r1, [pc, #16]	@ (8007f10 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	4798      	blx	r3
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd90      	pop	{r4, r7, pc}
 8007f0c:	20000244 	.word	0x20000244
 8007f10:	20000264 	.word	0x20000264
 8007f14:	2000026c 	.word	0x2000026c

08007f18 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8007f18:	b590      	push	{r4, r7, lr}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f28:	681c      	ldr	r4, [r3, #0]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	220b      	movs	r2, #11
 8007f36:	490c      	ldr	r1, [pc, #48]	@ (8007f68 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a09      	ldr	r2, [pc, #36]	@ (8007f6c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8007f48:	4907      	ldr	r1, [pc, #28]	@ (8007f68 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a05      	ldr	r2, [pc, #20]	@ (8007f70 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 8007f5a:	4904      	ldr	r1, [pc, #16]	@ (8007f6c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd90      	pop	{r4, r7, pc}
 8007f68:	20000244 	.word	0x20000244
 8007f6c:	20000264 	.word	0x20000264
 8007f70:	2000026c 	.word	0x2000026c

08007f74 <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8007f74:	b590      	push	{r4, r7, lr}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f84:	681c      	ldr	r4, [r3, #0]
 8007f86:	2300      	movs	r3, #0
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	220c      	movs	r2, #12
 8007f92:	490c      	ldr	r1, [pc, #48]	@ (8007fc4 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a09      	ldr	r2, [pc, #36]	@ (8007fc8 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8007fa4:	4907      	ldr	r1, [pc, #28]	@ (8007fc4 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a05      	ldr	r2, [pc, #20]	@ (8007fcc <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 8007fb6:	4904      	ldr	r1, [pc, #16]	@ (8007fc8 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd90      	pop	{r4, r7, pc}
 8007fc4:	20000244 	.word	0x20000244
 8007fc8:	20000264 	.word	0x20000264
 8007fcc:	2000026c 	.word	0x2000026c

08007fd0 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8007fd0:	b590      	push	{r4, r7, lr}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007fe0:	681c      	ldr	r4, [r3, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2300      	movs	r3, #0
 8007fec:	220d      	movs	r2, #13
 8007fee:	490c      	ldr	r1, [pc, #48]	@ (8008020 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a09      	ldr	r2, [pc, #36]	@ (8008024 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8008000:	4907      	ldr	r1, [pc, #28]	@ (8008020 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a05      	ldr	r2, [pc, #20]	@ (8008028 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 8008012:	4904      	ldr	r1, [pc, #16]	@ (8008024 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bd90      	pop	{r4, r7, pc}
 8008020:	20000244 	.word	0x20000244
 8008024:	20000264 	.word	0x20000264
 8008028:	2000026c 	.word	0x2000026c

0800802c <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b085      	sub	sp, #20
 8008030:	af02      	add	r7, sp, #8
 8008032:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800803c:	681c      	ldr	r4, [r3, #0]
 800803e:	2300      	movs	r3, #0
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	2300      	movs	r3, #0
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	2300      	movs	r3, #0
 8008048:	220e      	movs	r2, #14
 800804a:	490c      	ldr	r1, [pc, #48]	@ (800807c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a09      	ldr	r2, [pc, #36]	@ (8008080 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 800805c:	4907      	ldr	r1, [pc, #28]	@ (800807c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a05      	ldr	r2, [pc, #20]	@ (8008084 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 800806e:	4904      	ldr	r1, [pc, #16]	@ (8008080 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bd90      	pop	{r4, r7, pc}
 800807c:	20000244 	.word	0x20000244
 8008080:	20000264 	.word	0x20000264
 8008084:	2000026c 	.word	0x2000026c

08008088 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8008088:	b590      	push	{r4, r7, lr}
 800808a:	b085      	sub	sp, #20
 800808c:	af02      	add	r7, sp, #8
 800808e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008098:	681c      	ldr	r4, [r3, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	2300      	movs	r3, #0
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	2300      	movs	r3, #0
 80080a4:	220f      	movs	r2, #15
 80080a6:	490c      	ldr	r1, [pc, #48]	@ (80080d8 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a09      	ldr	r2, [pc, #36]	@ (80080dc <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 80080b8:	4907      	ldr	r1, [pc, #28]	@ (80080d8 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a05      	ldr	r2, [pc, #20]	@ (80080e0 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 80080ca:	4904      	ldr	r1, [pc, #16]	@ (80080dc <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4798      	blx	r3
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd90      	pop	{r4, r7, pc}
 80080d8:	20000244 	.word	0x20000244
 80080dc:	20000264 	.word	0x20000264
 80080e0:	2000026c 	.word	0x2000026c

080080e4 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080f4:	681c      	ldr	r4, [r3, #0]
 80080f6:	2300      	movs	r3, #0
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	2300      	movs	r3, #0
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	2210      	movs	r2, #16
 8008102:	490c      	ldr	r1, [pc, #48]	@ (8008134 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a09      	ldr	r2, [pc, #36]	@ (8008138 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008114:	4907      	ldr	r1, [pc, #28]	@ (8008134 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a05      	ldr	r2, [pc, #20]	@ (800813c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 8008126:	4904      	ldr	r1, [pc, #16]	@ (8008138 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	bd90      	pop	{r4, r7, pc}
 8008134:	20000244 	.word	0x20000244
 8008138:	20000264 	.word	0x20000264
 800813c:	2000026c 	.word	0x2000026c

08008140 <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b085      	sub	sp, #20
 8008144:	af02      	add	r7, sp, #8
 8008146:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008150:	681c      	ldr	r4, [r3, #0]
 8008152:	2300      	movs	r3, #0
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	2300      	movs	r3, #0
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	2300      	movs	r3, #0
 800815c:	2211      	movs	r2, #17
 800815e:	490c      	ldr	r1, [pc, #48]	@ (8008190 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a09      	ldr	r2, [pc, #36]	@ (8008194 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008170:	4907      	ldr	r1, [pc, #28]	@ (8008190 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a05      	ldr	r2, [pc, #20]	@ (8008198 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 8008182:	4904      	ldr	r1, [pc, #16]	@ (8008194 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	4798      	blx	r3
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bd90      	pop	{r4, r7, pc}
 8008190:	20000244 	.word	0x20000244
 8008194:	20000264 	.word	0x20000264
 8008198:	2000026c 	.word	0x2000026c

0800819c <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800819c:	b590      	push	{r4, r7, lr}
 800819e:	b087      	sub	sp, #28
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081ac:	681c      	ldr	r4, [r3, #0]
 80081ae:	2300      	movs	r3, #0
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	2300      	movs	r3, #0
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	2300      	movs	r3, #0
 80081b8:	2212      	movs	r2, #18
 80081ba:	4912      	ldr	r1, [pc, #72]	@ (8008204 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008208 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80081cc:	490d      	ldr	r1, [pc, #52]	@ (8008204 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a0b      	ldr	r2, [pc, #44]	@ (800820c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 80081de:	490a      	ldr	r1, [pc, #40]	@ (8008208 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2202      	movs	r2, #2
 80081f0:	4906      	ldr	r1, [pc, #24]	@ (800820c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
 80081f6:	4603      	mov	r3, r0
 80081f8:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 80081fa:	89fb      	ldrh	r3, [r7, #14]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	bd90      	pop	{r4, r7, pc}
 8008204:	20000244 	.word	0x20000244
 8008208:	20000264 	.word	0x20000264
 800820c:	2000026c 	.word	0x2000026c

08008210 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b087      	sub	sp, #28
 8008214:	af02      	add	r7, sp, #8
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	460b      	mov	r3, r1
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008226:	681c      	ldr	r4, [r3, #0]
 8008228:	7afa      	ldrb	r2, [r7, #11]
 800822a:	2300      	movs	r3, #0
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4613      	mov	r3, r2
 8008234:	2201      	movs	r2, #1
 8008236:	4903      	ldr	r1, [pc, #12]	@ (8008244 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	47a0      	blx	r4
}
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	bd90      	pop	{r4, r7, pc}
 8008244:	20000244 	.word	0x20000244

08008248 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b085      	sub	sp, #20
 800824c:	af02      	add	r7, sp, #8
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800825c:	681c      	ldr	r4, [r3, #0]
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	2200      	movs	r2, #0
 8008262:	9201      	str	r2, [sp, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	9200      	str	r2, [sp, #0]
 8008268:	2202      	movs	r2, #2
 800826a:	4903      	ldr	r1, [pc, #12]	@ (8008278 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	47a0      	blx	r4
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}
 8008278:	20000244 	.word	0x20000244

0800827c <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b087      	sub	sp, #28
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	460b      	mov	r3, r1
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008292:	681c      	ldr	r4, [r3, #0]
 8008294:	7afa      	ldrb	r2, [r7, #11]
 8008296:	2300      	movs	r3, #0
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	4613      	mov	r3, r2
 80082a0:	2203      	movs	r2, #3
 80082a2:	4903      	ldr	r1, [pc, #12]	@ (80082b0 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	47a0      	blx	r4
}
 80082a8:	bf00      	nop
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd90      	pop	{r4, r7, pc}
 80082b0:	20000244 	.word	0x20000244

080082b4 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082c8:	681c      	ldr	r4, [r3, #0]
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	2200      	movs	r2, #0
 80082ce:	9201      	str	r2, [sp, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	9200      	str	r2, [sp, #0]
 80082d4:	2204      	movs	r2, #4
 80082d6:	4903      	ldr	r1, [pc, #12]	@ (80082e4 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	47a0      	blx	r4
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd90      	pop	{r4, r7, pc}
 80082e4:	20000244 	.word	0x20000244

080082e8 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 80082e8:	b590      	push	{r4, r7, lr}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	460b      	mov	r3, r1
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082fe:	681c      	ldr	r4, [r3, #0]
 8008300:	7afa      	ldrb	r2, [r7, #11]
 8008302:	2300      	movs	r3, #0
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4613      	mov	r3, r2
 800830c:	2205      	movs	r2, #5
 800830e:	4903      	ldr	r1, [pc, #12]	@ (800831c <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	47a0      	blx	r4
}
 8008314:	bf00      	nop
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	bd90      	pop	{r4, r7, pc}
 800831c:	20000244 	.word	0x20000244

08008320 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8008320:	b590      	push	{r4, r7, lr}
 8008322:	b085      	sub	sp, #20
 8008324:	af02      	add	r7, sp, #8
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008332:	681c      	ldr	r4, [r3, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	2300      	movs	r3, #0
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2206      	movs	r2, #6
 8008340:	4903      	ldr	r1, [pc, #12]	@ (8008350 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	47a0      	blx	r4
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	bd90      	pop	{r4, r7, pc}
 800834e:	bf00      	nop
 8008350:	20000244 	.word	0x20000244

08008354 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b087      	sub	sp, #28
 8008358:	af02      	add	r7, sp, #8
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	460b      	mov	r3, r1
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800836a:	681c      	ldr	r4, [r3, #0]
 800836c:	7afa      	ldrb	r2, [r7, #11]
 800836e:	2300      	movs	r3, #0
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	4613      	mov	r3, r2
 8008378:	2207      	movs	r2, #7
 800837a:	4903      	ldr	r1, [pc, #12]	@ (8008388 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	47a0      	blx	r4
}
 8008380:	bf00      	nop
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	bd90      	pop	{r4, r7, pc}
 8008388:	20000244 	.word	0x20000244

0800838c <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b087      	sub	sp, #28
 8008390:	af02      	add	r7, sp, #8
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	607b      	str	r3, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	72fb      	strb	r3, [r7, #11]
 800839a:	4613      	mov	r3, r2
 800839c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083a6:	681c      	ldr	r4, [r3, #0]
 80083a8:	7af9      	ldrb	r1, [r7, #11]
 80083aa:	7abb      	ldrb	r3, [r7, #10]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	9201      	str	r2, [sp, #4]
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	460b      	mov	r3, r1
 80083b4:	2208      	movs	r2, #8
 80083b6:	4903      	ldr	r1, [pc, #12]	@ (80083c4 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	47a0      	blx	r4
}
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd90      	pop	{r4, r7, pc}
 80083c4:	20000244 	.word	0x20000244

080083c8 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80083c8:	b590      	push	{r4, r7, lr}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
 80083d4:	4613      	mov	r3, r2
 80083d6:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083e0:	681c      	ldr	r4, [r3, #0]
 80083e2:	78fa      	ldrb	r2, [r7, #3]
 80083e4:	78bb      	ldrb	r3, [r7, #2]
 80083e6:	2100      	movs	r1, #0
 80083e8:	9101      	str	r1, [sp, #4]
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	4613      	mov	r3, r2
 80083ee:	2209      	movs	r2, #9
 80083f0:	4903      	ldr	r1, [pc, #12]	@ (8008400 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	47a0      	blx	r4
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd90      	pop	{r4, r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000244 	.word	0x20000244

08008404 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8008404:	b590      	push	{r4, r7, lr}
 8008406:	b085      	sub	sp, #20
 8008408:	af02      	add	r7, sp, #8
 800840a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008414:	681c      	ldr	r4, [r3, #0]
 8008416:	2300      	movs	r3, #0
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	2300      	movs	r3, #0
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	2300      	movs	r3, #0
 8008420:	220a      	movs	r2, #10
 8008422:	4903      	ldr	r1, [pc, #12]	@ (8008430 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	47a0      	blx	r4
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	bd90      	pop	{r4, r7, pc}
 8008430:	20000244 	.word	0x20000244

08008434 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8008434:	b590      	push	{r4, r7, lr}
 8008436:	b085      	sub	sp, #20
 8008438:	af02      	add	r7, sp, #8
 800843a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008444:	681c      	ldr	r4, [r3, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	2300      	movs	r3, #0
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	2300      	movs	r3, #0
 8008450:	220b      	movs	r2, #11
 8008452:	4903      	ldr	r1, [pc, #12]	@ (8008460 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	47a0      	blx	r4
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}
 8008460:	20000244 	.word	0x20000244

08008464 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b085      	sub	sp, #20
 8008468:	af02      	add	r7, sp, #8
 800846a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008474:	681c      	ldr	r4, [r3, #0]
 8008476:	2300      	movs	r3, #0
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	2300      	movs	r3, #0
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	2300      	movs	r3, #0
 8008480:	220c      	movs	r2, #12
 8008482:	4903      	ldr	r1, [pc, #12]	@ (8008490 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	47a0      	blx	r4
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	bd90      	pop	{r4, r7, pc}
 8008490:	20000244 	.word	0x20000244

08008494 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8008494:	b590      	push	{r4, r7, lr}
 8008496:	b085      	sub	sp, #20
 8008498:	af02      	add	r7, sp, #8
 800849a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084a4:	681c      	ldr	r4, [r3, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	2300      	movs	r3, #0
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	220d      	movs	r2, #13
 80084b2:	4903      	ldr	r1, [pc, #12]	@ (80084c0 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	47a0      	blx	r4
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd90      	pop	{r4, r7, pc}
 80084c0:	20000244 	.word	0x20000244

080084c4 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084d4:	681c      	ldr	r4, [r3, #0]
 80084d6:	2300      	movs	r3, #0
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	2300      	movs	r3, #0
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	2300      	movs	r3, #0
 80084e0:	220e      	movs	r2, #14
 80084e2:	4903      	ldr	r1, [pc, #12]	@ (80084f0 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	47a0      	blx	r4
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd90      	pop	{r4, r7, pc}
 80084f0:	20000244 	.word	0x20000244

080084f4 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 80084f4:	b590      	push	{r4, r7, lr}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008504:	681c      	ldr	r4, [r3, #0]
 8008506:	2300      	movs	r3, #0
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	2300      	movs	r3, #0
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	2300      	movs	r3, #0
 8008510:	220f      	movs	r2, #15
 8008512:	4903      	ldr	r1, [pc, #12]	@ (8008520 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	47a0      	blx	r4
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	bd90      	pop	{r4, r7, pc}
 8008520:	20000244 	.word	0x20000244

08008524 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b085      	sub	sp, #20
 8008528:	af02      	add	r7, sp, #8
 800852a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008534:	681c      	ldr	r4, [r3, #0]
 8008536:	2300      	movs	r3, #0
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	2300      	movs	r3, #0
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	2210      	movs	r2, #16
 8008542:	4903      	ldr	r1, [pc, #12]	@ (8008550 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	47a0      	blx	r4
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	bd90      	pop	{r4, r7, pc}
 8008550:	20000244 	.word	0x20000244

08008554 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8008554:	b590      	push	{r4, r7, lr}
 8008556:	b085      	sub	sp, #20
 8008558:	af02      	add	r7, sp, #8
 800855a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008564:	681c      	ldr	r4, [r3, #0]
 8008566:	2300      	movs	r3, #0
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	2300      	movs	r3, #0
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	2300      	movs	r3, #0
 8008570:	2211      	movs	r2, #17
 8008572:	4903      	ldr	r1, [pc, #12]	@ (8008580 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	47a0      	blx	r4
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	bd90      	pop	{r4, r7, pc}
 8008580:	20000244 	.word	0x20000244

08008584 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8008584:	b590      	push	{r4, r7, lr}
 8008586:	b085      	sub	sp, #20
 8008588:	af02      	add	r7, sp, #8
 800858a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008594:	681c      	ldr	r4, [r3, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	2300      	movs	r3, #0
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	2300      	movs	r3, #0
 80085a0:	2212      	movs	r2, #18
 80085a2:	4903      	ldr	r1, [pc, #12]	@ (80085b0 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	47a0      	blx	r4
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd90      	pop	{r4, r7, pc}
 80085b0:	20000244 	.word	0x20000244

080085b4 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a09      	ldr	r2, [pc, #36]	@ (80085ec <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80085c8:	4909      	ldr	r1, [pc, #36]	@ (80085f0 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a06      	ldr	r2, [pc, #24]	@ (80085f4 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 80085da:	4904      	ldr	r1, [pc, #16]	@ (80085ec <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80085e0:	4b04      	ldr	r3, [pc, #16]	@ (80085f4 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000264 	.word	0x20000264
 80085f0:	20000244 	.word	0x20000244
 80085f4:	2000026c 	.word	0x2000026c

080085f8 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b089      	sub	sp, #36	@ 0x24
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8008604:	4b17      	ldr	r3, [pc, #92]	@ (8008664 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800860a:	2300      	movs	r3, #0
 800860c:	75fb      	strb	r3, [r7, #23]
 800860e:	e020      	b.n	8008652 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008618:	681c      	ldr	r4, [r3, #0]
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	461a      	mov	r2, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	1899      	adds	r1, r3, r2
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	461a      	mov	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	441a      	add	r2, r3
 800862e:	230a      	movs	r3, #10
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	2302      	movs	r3, #2
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8008638:	2300      	movs	r3, #0
 800863a:	75bb      	strb	r3, [r7, #22]
 800863c:	e003      	b.n	8008646 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800863e:	bf00      	nop
 8008640:	7dbb      	ldrb	r3, [r7, #22]
 8008642:	3301      	adds	r3, #1
 8008644:	75bb      	strb	r3, [r7, #22]
 8008646:	7dbb      	ldrb	r3, [r7, #22]
 8008648:	2b7c      	cmp	r3, #124	@ 0x7c
 800864a:	d9f8      	bls.n	800863e <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	3301      	adds	r3, #1
 8008650:	75fb      	strb	r3, [r7, #23]
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2b03      	cmp	r3, #3
 8008656:	d9db      	bls.n	8008610 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8008658:	bf00      	nop
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	bd90      	pop	{r4, r7, pc}
 8008662:	bf00      	nop
 8008664:	20000241 	.word	0x20000241

08008668 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800867a:	2301      	movs	r3, #1
 800867c:	74fb      	strb	r3, [r7, #19]
 800867e:	e016      	b.n	80086ae <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8008680:	7cfb      	ldrb	r3, [r7, #19]
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	461a      	mov	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	7f1b      	ldrb	r3, [r3, #28]
 800868a:	4413      	add	r3, r2
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	4413      	add	r3, r2
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	4619      	mov	r1, r3
 8008694:	79fa      	ldrb	r2, [r7, #7]
 8008696:	7cfb      	ldrb	r3, [r7, #19]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	fa01 f303 	lsl.w	r3, r1, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80086a8:	7cfb      	ldrb	r3, [r7, #19]
 80086aa:	3301      	adds	r3, #1
 80086ac:	74fb      	strb	r3, [r7, #19]
 80086ae:	7cfb      	ldrb	r3, [r7, #19]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d9e5      	bls.n	8008680 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80086b4:	697b      	ldr	r3, [r7, #20]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
	...

080086c4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2118      	movs	r1, #24
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
 80086e4:	4602      	mov	r2, r0
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ea:	b292      	uxth	r2, r2
 80086ec:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	2b0e      	cmp	r3, #14
 80086f2:	f200 8099 	bhi.w	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 80086f6:	a201      	add	r2, pc, #4	@ (adr r2, 80086fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	08008739 	.word	0x08008739
 8008700:	08008749 	.word	0x08008749
 8008704:	08008759 	.word	0x08008759
 8008708:	08008769 	.word	0x08008769
 800870c:	08008779 	.word	0x08008779
 8008710:	08008789 	.word	0x08008789
 8008714:	08008799 	.word	0x08008799
 8008718:	080087a9 	.word	0x080087a9
 800871c:	080087b9 	.word	0x080087b9
 8008720:	080087c9 	.word	0x080087c9
 8008724:	080087d9 	.word	0x080087d9
 8008728:	080087e9 	.word	0x080087e9
 800872c:	080087f9 	.word	0x080087f9
 8008730:	08008809 	.word	0x08008809
 8008734:	08008819 	.word	0x08008819
      state = pL6470_StatusRegister->HiZ;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008742:	b2db      	uxtb	r3, r3
 8008744:	73fb      	strb	r3, [r7, #15]
      break;
 8008746:	e06f      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008752:	b2db      	uxtb	r3, r3
 8008754:	73fb      	strb	r3, [r7, #15]
      break;
 8008756:	e067      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008762:	b2db      	uxtb	r3, r3
 8008764:	73fb      	strb	r3, [r7, #15]
      break;
 8008766:	e05f      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008772:	b2db      	uxtb	r3, r3
 8008774:	73fb      	strb	r3, [r7, #15]
      break;
 8008776:	e057      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008782:	b2db      	uxtb	r3, r3
 8008784:	73fb      	strb	r3, [r7, #15]
      break;
 8008786:	e04f      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008792:	b2db      	uxtb	r3, r3
 8008794:	73fb      	strb	r3, [r7, #15]
      break;
 8008796:	e047      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	73fb      	strb	r3, [r7, #15]
      break;
 80087a6:	e03f      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ac:	785b      	ldrb	r3, [r3, #1]
 80087ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	73fb      	strb	r3, [r7, #15]
      break;
 80087b6:	e037      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	73fb      	strb	r3, [r7, #15]
      break;
 80087c6:	e02f      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087cc:	785b      	ldrb	r3, [r3, #1]
 80087ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	73fb      	strb	r3, [r7, #15]
      break;
 80087d6:	e027      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	73fb      	strb	r3, [r7, #15]
      break;
 80087e6:	e01f      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	73fb      	strb	r3, [r7, #15]
      break;
 80087f6:	e017      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087fc:	785b      	ldrb	r3, [r3, #1]
 80087fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008802:	b2db      	uxtb	r3, r3
 8008804:	73fb      	strb	r3, [r7, #15]
      break;
 8008806:	e00f      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008812:	b2db      	uxtb	r3, r3
 8008814:	73fb      	strb	r3, [r7, #15]
      break;
 8008816:	e007      	b.n	8008828 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008822:	b2db      	uxtb	r3, r3
 8008824:	73fb      	strb	r3, [r7, #15]
      break;
 8008826:	bf00      	nop
  return state;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop

08008834 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	2b18      	cmp	r3, #24
 8008844:	d809      	bhi.n	800885a <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a19      	ldr	r1, [r3, #32]
 800884a:	78fa      	ldrb	r2, [r7, #3]
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	3301      	adds	r3, #1
 8008858:	e000      	b.n	800885c <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
 8008876:	e01a      	b.n	80088ae <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	4413      	add	r3, r2
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	4413      	add	r3, r2
 800888c:	2200      	movs	r2, #0
 800888e:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	4413      	add	r3, r2
 8008898:	2200      	movs	r2, #0
 800889a:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	4413      	add	r3, r2
 80088a4:	2200      	movs	r2, #0
 80088a6:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	3301      	adds	r3, #1
 80088ac:	73fb      	strb	r3, [r7, #15]
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d9e1      	bls.n	8008878 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80088c2:	b480      	push	{r7}
 80088c4:	b085      	sub	sp, #20
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	7f1b      	ldrb	r3, [r3, #28]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	4413      	add	r3, r2
 80088dc:	79fa      	ldrb	r2, [r7, #7]
 80088de:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	7f1b      	ldrb	r3, [r3, #28]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	7f1b      	ldrb	r3, [r3, #28]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	4413      	add	r3, r2
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	7f1b      	ldrb	r3, [r3, #28]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	60da      	str	r2, [r3, #12]
}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008918:	b590      	push	{r4, r7, lr}
 800891a:	b087      	sub	sp, #28
 800891c:	af02      	add	r7, sp, #8
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	4613      	mov	r3, r2
 8008926:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8008928:	4b10      	ldr	r3, [pc, #64]	@ (800896c <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8008930:	4b0e      	ldr	r3, [pc, #56]	@ (800896c <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008932:	2201      	movs	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800894e:	681c      	ldr	r4, [r3, #0]
 8008950:	79fa      	ldrb	r2, [r7, #7]
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	47a0      	blx	r4
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	bd90      	pop	{r4, r7, pc}
 800896a:	bf00      	nop
 800896c:	20000241 	.word	0x20000241

08008970 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008980:	2300      	movs	r3, #0
 8008982:	75bb      	strb	r3, [r7, #22]
 8008984:	e013      	b.n	80089ae <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]
 800898a:	e00a      	b.n	80089a2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800898c:	7d7b      	ldrb	r3, [r7, #21]
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	757a      	strb	r2, [r7, #21]
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4413      	add	r3, r2
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	3301      	adds	r3, #1
 80089a0:	75fb      	strb	r3, [r7, #23]
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d9f1      	bls.n	800898c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80089a8:	7dbb      	ldrb	r3, [r7, #22]
 80089aa:	3301      	adds	r3, #1
 80089ac:	75bb      	strb	r3, [r7, #22]
 80089ae:	7dbb      	ldrb	r3, [r7, #22]
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d9e8      	bls.n	8008986 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80089b4:	2300      	movs	r3, #0
 80089b6:	75fb      	strb	r3, [r7, #23]
 80089b8:	e1f1      	b.n	8008d9e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	440b      	add	r3, r1
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	4619      	mov	r1, r3
 80089ca:	460b      	mov	r3, r1
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	1a5b      	subs	r3, r3, r1
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	441a      	add	r2, r3
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	440b      	add	r3, r1
 80089da:	7b12      	ldrb	r2, [r2, #12]
 80089dc:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b12      	cmp	r3, #18
 80089ea:	f200 81d5 	bhi.w	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 80089ee:	a201      	add	r2, pc, #4	@ (adr r2, 80089f4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008d99 	.word	0x08008d99
 80089f8:	08008a41 	.word	0x08008a41
 80089fc:	08008ac9 	.word	0x08008ac9
 8008a00:	08008af9 	.word	0x08008af9
 8008a04:	08008b61 	.word	0x08008b61
 8008a08:	08008b8f 	.word	0x08008b8f
 8008a0c:	08008bf7 	.word	0x08008bf7
 8008a10:	08008c33 	.word	0x08008c33
 8008a14:	08008c9b 	.word	0x08008c9b
 8008a18:	08008d37 	.word	0x08008d37
 8008a1c:	08008d99 	.word	0x08008d99
 8008a20:	08008d99 	.word	0x08008d99
 8008a24:	08008d99 	.word	0x08008d99
 8008a28:	08008d99 	.word	0x08008d99
 8008a2c:	08008d99 	.word	0x08008d99
 8008a30:	08008d99 	.word	0x08008d99
 8008a34:	08008d99 	.word	0x08008d99
 8008a38:	08008d99 	.word	0x08008d99
 8008a3c:	08008d99 	.word	0x08008d99
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	4413      	add	r3, r2
 8008a46:	7819      	ldrb	r1, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a18      	ldr	r0, [r3, #32]
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4413      	add	r3, r2
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4403      	add	r3, r0
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4403      	add	r3, r0
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a19      	ldr	r1, [r3, #32]
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	4413      	add	r3, r2
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	7b9b      	ldrb	r3, [r3, #14]
 8008a88:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	75bb      	strb	r3, [r7, #22]
 8008a8e:	e016      	b.n	8008abe <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	011b      	lsls	r3, r3, #4
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	4413      	add	r3, r2
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	7d39      	ldrb	r1, [r7, #20]
 8008a9c:	7dbb      	ldrb	r3, [r7, #22]
 8008a9e:	1acb      	subs	r3, r1, r3
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	fa22 f103 	lsr.w	r1, r2, r3
 8008aa6:	7dbb      	ldrb	r3, [r7, #22]
 8008aa8:	005a      	lsls	r2, r3, #1
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	4413      	add	r3, r2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	b2ca      	uxtb	r2, r1
 8008ab6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008ab8:	7dbb      	ldrb	r3, [r7, #22]
 8008aba:	3301      	adds	r3, #1
 8008abc:	75bb      	strb	r3, [r7, #22]
 8008abe:	7d3a      	ldrb	r2, [r7, #20]
 8008ac0:	7dbb      	ldrb	r3, [r7, #22]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d2e4      	bcs.n	8008a90 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008ac6:	e167      	b.n	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6a18      	ldr	r0, [r3, #32]
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	4413      	add	r3, r2
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4403      	add	r3, r0
 8008ae8:	781a      	ldrb	r2, [r3, #0]
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	4403      	add	r3, r0
 8008af0:	430a      	orrs	r2, r1
 8008af2:	b2d2      	uxtb	r2, r2
 8008af4:	701a      	strb	r2, [r3, #0]
      break;
 8008af6:	e14f      	b.n	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	7819      	ldrb	r1, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	4413      	add	r3, r2
 8008b14:	4403      	add	r3, r0
 8008b16:	7a1a      	ldrb	r2, [r3, #8]
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4403      	add	r3, r0
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008b24:	2301      	movs	r3, #1
 8008b26:	75bb      	strb	r3, [r7, #22]
 8008b28:	e016      	b.n	8008b58 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	011b      	lsls	r3, r3, #4
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4413      	add	r3, r2
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	7dbb      	ldrb	r3, [r7, #22]
 8008b36:	f1c3 0303 	rsb	r3, r3, #3
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	fa22 f103 	lsr.w	r1, r2, r3
 8008b40:	7dbb      	ldrb	r3, [r7, #22]
 8008b42:	005a      	lsls	r2, r3, #1
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	4413      	add	r3, r2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	b2ca      	uxtb	r2, r1
 8008b50:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008b52:	7dbb      	ldrb	r3, [r7, #22]
 8008b54:	3301      	adds	r3, #1
 8008b56:	75bb      	strb	r3, [r7, #22]
 8008b58:	7dbb      	ldrb	r3, [r7, #22]
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d9e5      	bls.n	8008b2a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008b5e:	e11b      	b.n	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	7819      	ldrb	r1, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	4413      	add	r3, r2
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	4403      	add	r3, r0
 8008b7e:	7a1a      	ldrb	r2, [r3, #8]
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	4403      	add	r3, r0
 8008b86:	430a      	orrs	r2, r1
 8008b88:	b2d2      	uxtb	r2, r2
 8008b8a:	701a      	strb	r2, [r3, #0]
      break;
 8008b8c:	e104      	b.n	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	4413      	add	r3, r2
 8008b94:	7819      	ldrb	r1, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	4413      	add	r3, r2
 8008baa:	4403      	add	r3, r0
 8008bac:	7a1a      	ldrb	r2, [r3, #8]
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4403      	add	r3, r0
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008bba:	2301      	movs	r3, #1
 8008bbc:	75bb      	strb	r3, [r7, #22]
 8008bbe:	e016      	b.n	8008bee <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	7dbb      	ldrb	r3, [r7, #22]
 8008bcc:	f1c3 0303 	rsb	r3, r3, #3
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	fa22 f103 	lsr.w	r1, r2, r3
 8008bd6:	7dbb      	ldrb	r3, [r7, #22]
 8008bd8:	005a      	lsls	r2, r3, #1
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	4413      	add	r3, r2
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4413      	add	r3, r2
 8008be4:	b2ca      	uxtb	r2, r1
 8008be6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008be8:	7dbb      	ldrb	r3, [r7, #22]
 8008bea:	3301      	adds	r3, #1
 8008bec:	75bb      	strb	r3, [r7, #22]
 8008bee:	7dbb      	ldrb	r3, [r7, #22]
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d9e5      	bls.n	8008bc0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008bf4:	e0d0      	b.n	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	75bb      	strb	r3, [r7, #22]
 8008bfa:	e016      	b.n	8008c2a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	4413      	add	r3, r2
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	7dbb      	ldrb	r3, [r7, #22]
 8008c08:	f1c3 0303 	rsb	r3, r3, #3
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	fa22 f103 	lsr.w	r1, r2, r3
 8008c12:	7dbb      	ldrb	r3, [r7, #22]
 8008c14:	005a      	lsls	r2, r3, #1
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	4413      	add	r3, r2
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4413      	add	r3, r2
 8008c20:	b2ca      	uxtb	r2, r1
 8008c22:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c24:	7dbb      	ldrb	r3, [r7, #22]
 8008c26:	3301      	adds	r3, #1
 8008c28:	75bb      	strb	r3, [r7, #22]
 8008c2a:	7dbb      	ldrb	r3, [r7, #22]
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d9e5      	bls.n	8008bfc <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008c30:	e0b2      	b.n	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4413      	add	r3, r2
 8008c38:	7819      	ldrb	r1, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	011b      	lsls	r3, r3, #4
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	4413      	add	r3, r2
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	4413      	add	r3, r2
 8008c4e:	4403      	add	r3, r0
 8008c50:	7a1a      	ldrb	r2, [r3, #8]
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	4403      	add	r3, r0
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c5e:	2301      	movs	r3, #1
 8008c60:	75bb      	strb	r3, [r7, #22]
 8008c62:	e016      	b.n	8008c92 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	7dbb      	ldrb	r3, [r7, #22]
 8008c70:	f1c3 0303 	rsb	r3, r3, #3
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	fa22 f103 	lsr.w	r1, r2, r3
 8008c7a:	7dbb      	ldrb	r3, [r7, #22]
 8008c7c:	005a      	lsls	r2, r3, #1
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	4413      	add	r3, r2
 8008c82:	461a      	mov	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4413      	add	r3, r2
 8008c88:	b2ca      	uxtb	r2, r1
 8008c8a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c8c:	7dbb      	ldrb	r3, [r7, #22]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	75bb      	strb	r3, [r7, #22]
 8008c92:	7dbb      	ldrb	r3, [r7, #22]
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d9e5      	bls.n	8008c64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008c98:	e07e      	b.n	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b259      	sxtb	r1, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	4413      	add	r3, r2
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	4403      	add	r3, r0
 8008cba:	791b      	ldrb	r3, [r3, #4]
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	b25b      	sxtb	r3, r3
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	b259      	sxtb	r1, r3
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	4413      	add	r3, r2
 8008cca:	b2ca      	uxtb	r2, r1
 8008ccc:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	7819      	ldrb	r1, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	011b      	lsls	r3, r3, #4
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4413      	add	r3, r2
 8008cea:	4403      	add	r3, r0
 8008cec:	7a1a      	ldrb	r2, [r3, #8]
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4403      	add	r3, r0
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	75bb      	strb	r3, [r7, #22]
 8008cfe:	e016      	b.n	8008d2e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	4413      	add	r3, r2
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	7dbb      	ldrb	r3, [r7, #22]
 8008d0c:	f1c3 0303 	rsb	r3, r3, #3
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	fa22 f103 	lsr.w	r1, r2, r3
 8008d16:	7dbb      	ldrb	r3, [r7, #22]
 8008d18:	005a      	lsls	r2, r3, #1
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	461a      	mov	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4413      	add	r3, r2
 8008d24:	b2ca      	uxtb	r2, r1
 8008d26:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d28:	7dbb      	ldrb	r3, [r7, #22]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	75bb      	strb	r3, [r7, #22]
 8008d2e:	7dbb      	ldrb	r3, [r7, #22]
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d9e5      	bls.n	8008d00 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008d34:	e030      	b.n	8008d98 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	b259      	sxtb	r1, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	011b      	lsls	r3, r3, #4
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	4403      	add	r3, r0
 8008d56:	791b      	ldrb	r3, [r3, #4]
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	b25b      	sxtb	r3, r3
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	b259      	sxtb	r1, r3
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	4413      	add	r3, r2
 8008d66:	b2ca      	uxtb	r2, r1
 8008d68:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	4413      	add	r3, r2
 8008d70:	7819      	ldrb	r1, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	4613      	mov	r3, r2
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	4413      	add	r3, r2
 8008d86:	4403      	add	r3, r0
 8008d88:	7a1a      	ldrb	r2, [r3, #8]
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4403      	add	r3, r0
 8008d90:	430a      	orrs	r2, r1
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	701a      	strb	r2, [r3, #0]
      break;
 8008d96:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	f67f ae0a 	bls.w	80089ba <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008da6:	bf00      	nop
 8008da8:	bf00      	nop
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008dc0:	edd7 7a00 	vldr	s15, [r7]
 8008dc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dcc:	db1e      	blt.n	8008e0c <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008dce:	edd7 7a00 	vldr	s15, [r7]
 8008dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dd6:	ee17 2a90 	vmov	r2, s15
 8008dda:	edd7 7a00 	vldr	s15, [r7]
 8008dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008de6:	ed97 7a00 	vldr	s14, [r7]
 8008dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfa:	bf4c      	ite	mi
 8008dfc:	2301      	movmi	r3, #1
 8008dfe:	2300      	movpl	r3, #0
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	f083 0301 	eor.w	r3, r3, #1
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	4413      	add	r3, r2
 8008e0a:	e01a      	b.n	8008e42 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008e0c:	edd7 7a00 	vldr	s15, [r7]
 8008e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e14:	ee17 2a90 	vmov	r2, s15
 8008e18:	edd7 7a00 	vldr	s15, [r7]
 8008e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e24:	ed97 7a00 	vldr	s14, [r7]
 8008e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e2c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8008e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e38:	d501      	bpl.n	8008e3e <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	1ad3      	subs	r3, r2, r3
    }
 8008e42:	4618      	mov	r0, r3
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b086      	sub	sp, #24
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6918      	ldr	r0, [r3, #16]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	8a9b      	ldrh	r3, [r3, #20]
 8008e64:	2200      	movs	r2, #0
 8008e66:	4619      	mov	r1, r3
 8008e68:	f004 fff0 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6998      	ldr	r0, [r3, #24]
 8008e70:	88fa      	ldrh	r2, [r7, #6]
 8008e72:	2364      	movs	r3, #100	@ 0x64
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	f006 f818 	bl	800eeaa <HAL_SPI_Receive>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6918      	ldr	r0, [r3, #16]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8a9b      	ldrh	r3, [r3, #20]
 8008e86:	2201      	movs	r2, #1
 8008e88:	4619      	mov	r1, r3
 8008e8a:	f004 ffdf 	bl	800de4c <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008e98:	2300      	movs	r3, #0
    }
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	4613      	mov	r3, r2
 8008eae:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6918      	ldr	r0, [r3, #16]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8a9b      	ldrh	r3, [r3, #20]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4619      	mov	r1, r3
 8008ebc:	f004 ffc6 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6998      	ldr	r0, [r3, #24]
 8008ec4:	88fa      	ldrh	r2, [r7, #6]
 8008ec6:	2364      	movs	r3, #100	@ 0x64
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	f005 feb2 	bl	800ec32 <HAL_SPI_Transmit>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6918      	ldr	r0, [r3, #16]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8a9b      	ldrh	r3, [r3, #20]
 8008eda:	2201      	movs	r2, #1
 8008edc:	4619      	mov	r1, r3
 8008ede:	f004 ffb5 	bl	800de4c <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8008eec:	2300      	movs	r3, #0
    }
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b088      	sub	sp, #32
 8008efa:	af02      	add	r7, sp, #8
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	607a      	str	r2, [r7, #4]
 8008f02:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6918      	ldr	r0, [r3, #16]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8a9b      	ldrh	r3, [r3, #20]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4619      	mov	r1, r3
 8008f10:	f004 ff9c 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6998      	ldr	r0, [r3, #24]
 8008f18:	887b      	ldrh	r3, [r7, #2]
 8008f1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008f1e:	9200      	str	r2, [sp, #0]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	f006 f8d2 	bl	800f0cc <HAL_SPI_TransmitReceive>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6918      	ldr	r0, [r3, #16]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8a9b      	ldrh	r3, [r3, #20]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f004 ff85 	bl	800de4c <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e008      	b.n	8008f58 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6918      	ldr	r0, [r3, #16]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8a9b      	ldrh	r3, [r3, #20]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	4619      	mov	r1, r3
 8008f52:	f004 ff7b 	bl	800de4c <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8008f56:	2300      	movs	r3, #0
    }
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008f76:	681c      	ldr	r4, [r3, #0]
 8008f78:	887b      	ldrh	r3, [r7, #2]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	47a0      	blx	r4
    }
 8008f82:	bf00      	nop
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd90      	pop	{r4, r7, pc}

08008f8a <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
 8008fa4:	4603      	mov	r3, r0
    }
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	4798      	blx	r3
 8008fc4:	4603      	mov	r3, r0
    }
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
 8008fec:	4603      	mov	r3, r0
    }
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 8008ff6:	b590      	push	{r4, r7, lr}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009006:	681c      	ldr	r4, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2100      	movs	r1, #0
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
 8009018:	4603      	mov	r3, r0
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	47a0      	blx	r4
 8009020:	4603      	mov	r3, r0
    }
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	bd90      	pop	{r4, r7, pc}

0800902a <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 800902a:	b590      	push	{r4, r7, lr}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800903a:	681c      	ldr	r4, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2102      	movs	r1, #2
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	4798      	blx	r3
 800904c:	4603      	mov	r3, r0
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	47a0      	blx	r4
 8009054:	4603      	mov	r3, r0
    }
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	bd90      	pop	{r4, r7, pc}

0800905e <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 800905e:	b5b0      	push	{r4, r5, r7, lr}
 8009060:	b082      	sub	sp, #8
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800906e:	681c      	ldr	r4, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009078:	681d      	ldr	r5, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2103      	movs	r1, #3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	4798      	blx	r3
 800908a:	4603      	mov	r3, r0
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	47a8      	blx	r5
 8009092:	eef0 7a40 	vmov.f32	s15, s0
 8009096:	eeb0 0a67 	vmov.f32	s0, s15
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	47a0      	blx	r4
 800909e:	4603      	mov	r3, r0
    }
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bdb0      	pop	{r4, r5, r7, pc}

080090a8 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 80090a8:	b5b0      	push	{r4, r5, r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80090b8:	681c      	ldr	r4, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090c2:	681d      	ldr	r5, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2106      	movs	r1, #6
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
 80090d4:	4603      	mov	r3, r0
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	47a8      	blx	r5
 80090de:	eef0 7a40 	vmov.f32	s15, s0
 80090e2:	eeb0 0a67 	vmov.f32	s0, s15
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	47a0      	blx	r4
 80090ea:	4603      	mov	r3, r0
    }
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bdb0      	pop	{r4, r5, r7, pc}

080090f4 <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 80090f4:	b5b0      	push	{r4, r5, r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009104:	681c      	ldr	r4, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800910e:	681d      	ldr	r5, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2107      	movs	r1, #7
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3
 8009120:	4603      	mov	r3, r0
 8009122:	b29b      	uxth	r3, r3
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	47a8      	blx	r5
 800912a:	eef0 7a40 	vmov.f32	s15, s0
 800912e:	eeb0 0a67 	vmov.f32	s0, s15
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	47a0      	blx	r4
 8009136:	4603      	mov	r3, r0
    }
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bdb0      	pop	{r4, r5, r7, pc}

08009140 <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8009140:	b5b0      	push	{r4, r5, r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009150:	681c      	ldr	r4, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800915a:	681d      	ldr	r5, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2104      	movs	r1, #4
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	4798      	blx	r3
 800916c:	4603      	mov	r3, r0
 800916e:	b29b      	uxth	r3, r3
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	47a8      	blx	r5
 8009176:	eef0 7a40 	vmov.f32	s15, s0
 800917a:	eeb0 0a67 	vmov.f32	s0, s15
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	47a0      	blx	r4
 8009182:	4603      	mov	r3, r0
    }
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bdb0      	pop	{r4, r5, r7, pc}

0800918c <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 800918c:	b5b0      	push	{r4, r5, r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800919c:	681c      	ldr	r4, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80091a6:	681d      	ldr	r5, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2105      	movs	r1, #5
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	4798      	blx	r3
 80091b8:	4603      	mov	r3, r0
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	47a8      	blx	r5
 80091c2:	eef0 7a40 	vmov.f32	s15, s0
 80091c6:	eeb0 0a67 	vmov.f32	s0, s15
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	47a0      	blx	r4
 80091ce:	4603      	mov	r3, r0
    }
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bdb0      	pop	{r4, r5, r7, pc}

080091d8 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2104      	movs	r1, #4
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 80091fa:	2300      	movs	r3, #0
    }
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	b2d1      	uxtb	r1, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	4798      	blx	r3
    }
 8009224:	bf00      	nop
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	4798      	blx	r3
    }
 8009242:	bf00      	nop
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 800924a:	b590      	push	{r4, r7, lr}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800925a:	681c      	ldr	r4, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2100      	movs	r1, #0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	4798      	blx	r3
 800926c:	4603      	mov	r3, r0
 800926e:	461a      	mov	r2, r3
 8009270:	2102      	movs	r1, #2
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	47a0      	blx	r4
    }
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	bd90      	pop	{r4, r7, pc}

0800927e <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 800927e:	b590      	push	{r4, r7, lr}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009290:	681c      	ldr	r4, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	2102      	movs	r1, #2
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	47a0      	blx	r4
    }
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd90      	pop	{r4, r7, pc}

080092b4 <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80092b4:	b590      	push	{r4, r7, lr}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80092c6:	681c      	ldr	r4, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	ee07 2a90 	vmov	s15, r2
 80092d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092dc:	eeb0 0a67 	vmov.f32	s0, s15
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	4798      	blx	r3
 80092e4:	4603      	mov	r3, r0
 80092e6:	461a      	mov	r2, r3
 80092e8:	2106      	movs	r1, #6
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	47a0      	blx	r4
        return true;
 80092ee:	2301      	movs	r3, #1
    }
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd90      	pop	{r4, r7, pc}

080092f8 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 80092f8:	b590      	push	{r4, r7, lr}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800930a:	681c      	ldr	r4, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	ee07 2a90 	vmov	s15, r2
 800931c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009320:	eeb0 0a67 	vmov.f32	s0, s15
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	4798      	blx	r3
 8009328:	4603      	mov	r3, r0
 800932a:	461a      	mov	r2, r3
 800932c:	2107      	movs	r1, #7
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	47a0      	blx	r4
        return true;
 8009332:	2301      	movs	r3, #1
    }
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bd90      	pop	{r4, r7, pc}

0800933c <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 800933c:	b590      	push	{r4, r7, lr}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800934e:	681c      	ldr	r4, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	ee07 2a90 	vmov	s15, r2
 8009360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009364:	eeb0 0a67 	vmov.f32	s0, s15
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3
 800936c:	4603      	mov	r3, r0
 800936e:	461a      	mov	r2, r3
 8009370:	2104      	movs	r1, #4
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	47a0      	blx	r4
        return true;
 8009376:	2301      	movs	r3, #1
    }
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	bd90      	pop	{r4, r7, pc}

08009380 <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8009380:	b590      	push	{r4, r7, lr}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009392:	681c      	ldr	r4, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	ee07 2a90 	vmov	s15, r2
 80093a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a8:	eeb0 0a67 	vmov.f32	s0, s15
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	4798      	blx	r3
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	2105      	movs	r1, #5
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	47a0      	blx	r4
        return true;
 80093ba:	2301      	movs	r3, #1
    }
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd90      	pop	{r4, r7, pc}

080093c4 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	2b07      	cmp	r3, #7
 80093d4:	d901      	bls.n	80093da <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80093d6:	2300      	movs	r3, #0
 80093d8:	e00f      	b.n	80093fa <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3380      	adds	r3, #128	@ 0x80
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	2115      	movs	r1, #21
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	4798      	blx	r3
        return true;
 80093f8:	2301      	movs	r3, #1
    }
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 8009402:	b590      	push	{r4, r7, lr}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8009414:	681c      	ldr	r4, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4798      	blx	r3
 8009426:	4603      	mov	r3, r0
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	47a0      	blx	r4
    }
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	bd90      	pop	{r4, r7, pc}

08009436 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8009436:	b5b0      	push	{r4, r5, r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	4613      	mov	r3, r2
 8009442:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 800944c:	681c      	ldr	r4, [r3, #0]
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d101      	bne.n	8009458 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 8009454:	2501      	movs	r5, #1
 8009456:	e000      	b.n	800945a <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8009458:	2500      	movs	r5, #0
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	4798      	blx	r3
 800946a:	4603      	mov	r3, r0
 800946c:	461a      	mov	r2, r3
 800946e:	4629      	mov	r1, r5
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	47a0      	blx	r4
    }
 8009474:	bf00      	nop
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bdb0      	pop	{r4, r5, r7, pc}

0800947c <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	4798      	blx	r3
    }
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
    }
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80094b8:	b5b0      	push	{r4, r5, r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	607b      	str	r3, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	72fb      	strb	r3, [r7, #11]
 80094c6:	4613      	mov	r3, r2
 80094c8:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80094d2:	681c      	ldr	r4, [r3, #0]
 80094d4:	7abb      	ldrb	r3, [r7, #10]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80094da:	2501      	movs	r5, #1
 80094dc:	e000      	b.n	80094e0 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80094de:	2500      	movs	r5, #0
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	ee07 2a90 	vmov	s15, r2
 80094f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f4:	eeb0 0a67 	vmov.f32	s0, s15
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	4798      	blx	r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	7af9      	ldrb	r1, [r7, #11]
 8009500:	462a      	mov	r2, r5
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	47a0      	blx	r4
    }
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bdb0      	pop	{r4, r5, r7, pc}

0800950e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800950e:	b5b0      	push	{r4, r5, r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	460b      	mov	r3, r1
 8009518:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009522:	681c      	ldr	r4, [r3, #0]
 8009524:	78fb      	ldrb	r3, [r7, #3]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 800952a:	2501      	movs	r5, #1
 800952c:	e000      	b.n	8009530 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 800952e:	2500      	movs	r5, #0
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2106      	movs	r1, #6
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
 8009540:	4603      	mov	r3, r0
 8009542:	461a      	mov	r2, r3
 8009544:	4629      	mov	r1, r5
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	47a0      	blx	r4
    }
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bdb0      	pop	{r4, r5, r7, pc}

08009552 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8009552:	b5b0      	push	{r4, r5, r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	60f8      	str	r0, [r7, #12]
 800955a:	460b      	mov	r3, r1
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009568:	681c      	ldr	r4, [r3, #0]
 800956a:	7afb      	ldrb	r3, [r7, #11]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 8009570:	2501      	movs	r5, #1
 8009572:	e000      	b.n	8009576 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 8009574:	2500      	movs	r5, #0
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	ee07 2a90 	vmov	s15, r2
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eeb0 0a67 	vmov.f32	s0, s15
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	4798      	blx	r3
 8009592:	4603      	mov	r3, r0
 8009594:	461a      	mov	r2, r3
 8009596:	4629      	mov	r1, r5
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	47a0      	blx	r4
    }
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bdb0      	pop	{r4, r5, r7, pc}

080095a4 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	460b      	mov	r3, r1
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	7afa      	ldrb	r2, [r7, #11]
 80095be:	2a01      	cmp	r2, #1
 80095c0:	d101      	bne.n	80095c6 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 80095c2:	2101      	movs	r1, #1
 80095c4:	e000      	b.n	80095c8 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 80095c6:	2100      	movs	r1, #0
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	4798      	blx	r3
    }
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	4798      	blx	r3
    }
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
    }
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	4798      	blx	r3
    }
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
    }
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8009656:	bf00      	nop
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2101      	movs	r1, #1
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	4798      	blx	r3
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	bf0c      	ite	eq
 800966e:	2301      	moveq	r3, #1
 8009670:	2300      	movne	r3, #0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1ef      	bne.n	8009658 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 8009678:	bf00      	nop
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	460b      	mov	r3, r1
 800968c:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3380      	adds	r3, #128	@ 0x80
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	78fa      	ldrb	r2, [r7, #3]
 80096a6:	2a01      	cmp	r2, #1
 80096a8:	d101      	bne.n	80096ae <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80096aa:	2201      	movs	r2, #1
 80096ac:	e000      	b.n	80096b0 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80096ae:	2200      	movs	r2, #0
 80096b0:	4611      	mov	r1, r2
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
    }
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
 80096ca:	4613      	mov	r3, r2
 80096cc:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	78ba      	ldrb	r2, [r7, #2]
 80096da:	2a01      	cmp	r2, #1
 80096dc:	d101      	bne.n	80096e2 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80096de:	2201      	movs	r2, #1
 80096e0:	e000      	b.n	80096e4 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80096e2:	2200      	movs	r2, #0
 80096e4:	78f9      	ldrb	r1, [r7, #3]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
    }
 80096ea:	bf00      	nop
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
    }
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	b2d2      	uxtb	r2, r2
 800974e:	4611      	mov	r1, r2
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2100      	movs	r1, #0
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2102      	movs	r1, #2
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2103      	movs	r1, #3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2203      	movs	r2, #3
 80097d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80097d4:	bf00      	nop
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2106      	movs	r1, #6
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2204      	movs	r2, #4
 80097f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2107      	movs	r1, #7
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2205      	movs	r2, #5
 8009820:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2104      	movs	r1, #4
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2206      	movs	r2, #6
 8009848:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2105      	movs	r1, #5
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2207      	movs	r2, #7
 8009870:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8009884:	4b0b      	ldr	r3, [pc, #44]	@ (80098b4 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 800988c:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 800988e:	2201      	movs	r2, #1
 8009890:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4906      	ldr	r1, [pc, #24]	@ (80098b8 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2208      	movs	r2, #8
 80098a6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	2000020d 	.word	0x2000020d
 80098b8:	20000210 	.word	0x20000210

080098bc <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	b2d1      	uxtb	r1, r2
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098e4:	bf00      	nop
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2200      	movs	r2, #0
 8009926:	2102      	movs	r1, #2
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2209      	movs	r2, #9
 8009930:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 800993c:	b590      	push	{r4, r7, lr}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800994e:	681c      	ldr	r4, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	4798      	blx	r3
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	2102      	movs	r1, #2
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	bd90      	pop	{r4, r7, pc}

0800997a <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 800997a:	b590      	push	{r4, r7, lr}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800998c:	681c      	ldr	r4, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	ee07 2a90 	vmov	s15, r2
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	eeb0 0a67 	vmov.f32	s0, s15
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	2103      	movs	r1, #3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd90      	pop	{r4, r7, pc}

080099c4 <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80099d6:	681c      	ldr	r4, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	ee07 2a90 	vmov	s15, r2
 80099e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ec:	eeb0 0a67 	vmov.f32	s0, s15
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	4798      	blx	r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	461a      	mov	r2, r3
 80099f8:	2106      	movs	r1, #6
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd90      	pop	{r4, r7, pc}

08009a0e <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8009a0e:	b590      	push	{r4, r7, lr}
 8009a10:	b083      	sub	sp, #12
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a20:	681c      	ldr	r4, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	ee07 2a90 	vmov	s15, r2
 8009a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a36:	eeb0 0a67 	vmov.f32	s0, s15
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
 8009a3e:	4603      	mov	r3, r0
 8009a40:	461a      	mov	r2, r3
 8009a42:	2107      	movs	r1, #7
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd90      	pop	{r4, r7, pc}

08009a58 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009a58:	b590      	push	{r4, r7, lr}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a6a:	681c      	ldr	r4, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	ee07 2a90 	vmov	s15, r2
 8009a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a80:	eeb0 0a67 	vmov.f32	s0, s15
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	4798      	blx	r3
 8009a88:	4603      	mov	r3, r0
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd90      	pop	{r4, r7, pc}

08009aa2 <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8009aa2:	b590      	push	{r4, r7, lr}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009ab4:	681c      	ldr	r4, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	ee07 2a90 	vmov	s15, r2
 8009ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aca:	eeb0 0a67 	vmov.f32	s0, s15
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	2105      	movs	r1, #5
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd90      	pop	{r4, r7, pc}

08009aec <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009aec:	b590      	push	{r4, r7, lr}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8009afe:	681c      	ldr	r4, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	4798      	blx	r3
 8009b10:	4603      	mov	r3, r0
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd90      	pop	{r4, r7, pc}

08009b28 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009b28:	b5b0      	push	{r4, r5, r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	4613      	mov	r3, r2
 8009b34:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009b3e:	681c      	ldr	r4, [r3, #0]
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009b46:	2501      	movs	r5, #1
 8009b48:	e000      	b.n	8009b4c <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009b4a:	2500      	movs	r5, #0
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	4798      	blx	r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	461a      	mov	r2, r3
 8009b60:	4629      	mov	r1, r5
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bdb0      	pop	{r4, r5, r7, pc}

08009b76 <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009bc2:	b5b0      	push	{r4, r5, r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	607b      	str	r3, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	72fb      	strb	r3, [r7, #11]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009bdc:	681c      	ldr	r4, [r3, #0]
 8009bde:	7abb      	ldrb	r3, [r7, #10]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d101      	bne.n	8009be8 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009be4:	2501      	movs	r5, #1
 8009be6:	e000      	b.n	8009bea <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009be8:	2500      	movs	r5, #0
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	ee07 2a90 	vmov	s15, r2
 8009bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	4798      	blx	r3
 8009c06:	4603      	mov	r3, r0
 8009c08:	7af9      	ldrb	r1, [r7, #11]
 8009c0a:	462a      	mov	r2, r5
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c18:	bf00      	nop
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bdb0      	pop	{r4, r5, r7, pc}

08009c20 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009c20:	b5b0      	push	{r4, r5, r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009c34:	681c      	ldr	r4, [r3, #0]
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009c3c:	2501      	movs	r5, #1
 8009c3e:	e000      	b.n	8009c42 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009c40:	2500      	movs	r5, #0
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2106      	movs	r1, #6
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
 8009c52:	4603      	mov	r3, r0
 8009c54:	461a      	mov	r2, r3
 8009c56:	4629      	mov	r1, r5
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bdb0      	pop	{r4, r5, r7, pc}

08009c6c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009c6c:	b5b0      	push	{r4, r5, r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	460b      	mov	r3, r1
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009c82:	681c      	ldr	r4, [r3, #0]
 8009c84:	7afb      	ldrb	r3, [r7, #11]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009c8a:	2501      	movs	r5, #1
 8009c8c:	e000      	b.n	8009c90 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009c8e:	2500      	movs	r5, #0
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	ee07 2a90 	vmov	s15, r2
 8009ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	4798      	blx	r3
 8009cac:	4603      	mov	r3, r0
 8009cae:	461a      	mov	r2, r3
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bdb0      	pop	{r4, r5, r7, pc}

08009cc6 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	607a      	str	r2, [r7, #4]
 8009cd2:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	7afa      	ldrb	r2, [r7, #11]
 8009ce0:	2a01      	cmp	r2, #1
 8009ce2:	d101      	bne.n	8009ce8 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	e000      	b.n	8009cea <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009ce8:	2100      	movs	r1, #0
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009cf8:	bf00      	nop
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d1e:	bf00      	nop
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b082      	sub	sp, #8
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d6a:	bf00      	nop
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	78fa      	ldrb	r2, [r7, #3]
 8009db0:	2a01      	cmp	r2, #1
 8009db2:	d101      	bne.n	8009db8 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009db4:	2201      	movs	r2, #1
 8009db6:	e000      	b.n	8009dba <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009db8:	2200      	movs	r2, #0
 8009dba:	4611      	mov	r1, r2
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	78ba      	ldrb	r2, [r7, #2]
 8009dec:	2a01      	cmp	r2, #1
 8009dee:	d101      	bne.n	8009df4 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009df0:	2201      	movs	r2, #1
 8009df2:	e000      	b.n	8009df6 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009df4:	2200      	movs	r2, #0
 8009df6:	78f9      	ldrb	r1, [r7, #3]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	4798      	blx	r3
 8009e48:	4603      	mov	r3, r0
    }
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8009e6c:	b5b0      	push	{r4, r5, r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	2b07      	cmp	r3, #7
 8009e80:	f200 80fe 	bhi.w	800a080 <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 8009e84:	a201      	add	r2, pc, #4	@ (adr r2, 8009e8c <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 8009e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8a:	bf00      	nop
 8009e8c:	08009ead 	.word	0x08009ead
 8009e90:	08009ed9 	.word	0x08009ed9
 8009e94:	08009f07 	.word	0x08009f07
 8009e98:	08009f4b 	.word	0x08009f4b
 8009e9c:	08009f91 	.word	0x08009f91
 8009ea0:	08009fd7 	.word	0x08009fd7
 8009ea4:	0800a01d 	.word	0x0800a01d
 8009ea8:	0800a063 	.word	0x0800a063
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009eb4:	681c      	ldr	r4, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6a12      	ldr	r2, [r2, #32]
 8009ec4:	7b92      	ldrb	r2, [r2, #14]
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	4798      	blx	r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	47a0      	blx	r4
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	e0d4      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009ee0:	681c      	ldr	r4, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	6a12      	ldr	r2, [r2, #32]
 8009ef0:	3228      	adds	r2, #40	@ 0x28
 8009ef2:	7b92      	ldrb	r2, [r2, #14]
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	4798      	blx	r3
 8009efa:	4603      	mov	r3, r0
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	47a0      	blx	r4
 8009f02:	4603      	mov	r3, r0
 8009f04:	e0bd      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009f0e:	681c      	ldr	r4, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009f18:	681d      	ldr	r5, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6a12      	ldr	r2, [r2, #32]
 8009f28:	323c      	adds	r2, #60	@ 0x3c
 8009f2a:	7b92      	ldrb	r2, [r2, #14]
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	4798      	blx	r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	47a8      	blx	r5
 8009f3a:	eef0 7a40 	vmov.f32	s15, s0
 8009f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	47a0      	blx	r4
 8009f46:	4603      	mov	r3, r0
 8009f48:	e09b      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009f52:	681c      	ldr	r4, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f5c:	681d      	ldr	r5, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6a12      	ldr	r2, [r2, #32]
 8009f6c:	3278      	adds	r2, #120	@ 0x78
 8009f6e:	7b92      	ldrb	r2, [r2, #14]
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	4798      	blx	r3
 8009f76:	4603      	mov	r3, r0
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	47a8      	blx	r5
 8009f80:	eef0 7a40 	vmov.f32	s15, s0
 8009f84:	eeb0 0a67 	vmov.f32	s0, s15
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	47a0      	blx	r4
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	e078      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009f98:	681c      	ldr	r4, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009fa2:	681d      	ldr	r5, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6a12      	ldr	r2, [r2, #32]
 8009fb2:	328c      	adds	r2, #140	@ 0x8c
 8009fb4:	7b92      	ldrb	r2, [r2, #14]
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	4798      	blx	r3
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	47a8      	blx	r5
 8009fc6:	eef0 7a40 	vmov.f32	s15, s0
 8009fca:	eeb0 0a67 	vmov.f32	s0, s15
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	47a0      	blx	r4
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	e055      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009fde:	681c      	ldr	r4, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8009fe8:	681d      	ldr	r5, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6a12      	ldr	r2, [r2, #32]
 8009ff8:	3250      	adds	r2, #80	@ 0x50
 8009ffa:	7b92      	ldrb	r2, [r2, #14]
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	4798      	blx	r3
 800a002:	4603      	mov	r3, r0
 800a004:	b29b      	uxth	r3, r3
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	47a8      	blx	r5
 800a00c:	eef0 7a40 	vmov.f32	s15, s0
 800a010:	eeb0 0a67 	vmov.f32	s0, s15
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	47a0      	blx	r4
 800a018:	4603      	mov	r3, r0
 800a01a:	e032      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a024:	681c      	ldr	r4, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a02e:	681d      	ldr	r5, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6a12      	ldr	r2, [r2, #32]
 800a03e:	3264      	adds	r2, #100	@ 0x64
 800a040:	7b92      	ldrb	r2, [r2, #14]
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	4798      	blx	r3
 800a048:	4603      	mov	r3, r0
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	47a8      	blx	r5
 800a052:	eef0 7a40 	vmov.f32	s15, s0
 800a056:	eeb0 0a67 	vmov.f32	s0, s15
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	47a0      	blx	r4
 800a05e:	4603      	mov	r3, r0
 800a060:	e00f      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2104      	movs	r1, #4
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
 800a072:	4603      	mov	r3, r0
 800a074:	2b01      	cmp	r3, #1
 800a076:	d101      	bne.n	800a07c <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a078:	2301      	movs	r3, #1
 800a07a:	e002      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a07c:	2300      	movs	r3, #0
 800a07e:	e000      	b.n	800a082 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a080:	2300      	movs	r3, #0
    }
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bdb0      	pop	{r4, r5, r7, pc}
 800a08a:	bf00      	nop

0800a08c <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6898      	ldr	r0, [r3, #8]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	899b      	ldrh	r3, [r3, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	4619      	mov	r1, r3
 800a0a0:	f003 fed4 	bl	800de4c <HAL_GPIO_WritePin>
    }
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0bc:	d303      	bcc.n	800a0c6 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800a0c4:	e000      	b.n	800a0c8 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a0c6:	683b      	ldr	r3, [r7, #0]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	db05      	blt.n	800a0f0 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0ea:	da01      	bge.n	800a0f0 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	e00c      	b.n	800a10a <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800a0f6:	db06      	blt.n	800a106 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	da03      	bge.n	800a106 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800a104:	e001      	b.n	800a10a <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a106:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
	...

0800a118 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	ee07 3a90 	vmov	s15, r3
 800a128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a144 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a130:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a134:	eeb0 0a67 	vmov.f32	s0, s15
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	3c74242a 	.word	0x3c74242a

0800a148 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a154:	edd7 7a00 	vldr	s15, [r7]
 800a158:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a18c <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a15c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	d80a      	bhi.n	800a17c <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a166:	ed97 7a00 	vldr	s14, [r7]
 800a16a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a190 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a16e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a176:	ee17 3a90 	vmov	r3, s15
 800a17a:	e000      	b.n	800a17e <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	4674241b 	.word	0x4674241b
 800a190:	3c74242a 	.word	0x3c74242a

0800a194 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a1a0:	887b      	ldrh	r3, [r7, #2]
 800a1a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1a6:	d209      	bcs.n	800a1bc <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a1a8:	887b      	ldrh	r3, [r7, #2]
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1b2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a1d0 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a1b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1ba:	e001      	b.n	800a1c0 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a1bc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a1d4 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a1c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	4168d4fe 	.word	0x4168d4fe
 800a1d4:	00000000 	.word	0x00000000

0800a1d8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a1e4:	edd7 7a00 	vldr	s15, [r7]
 800a1e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a21c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a1ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f4:	d80b      	bhi.n	800a20e <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a1f6:	ed97 7a00 	vldr	s14, [r7]
 800a1fa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a220 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a1fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a206:	ee17 3a90 	vmov	r3, s15
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	e000      	b.n	800a210 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	4768c671 	.word	0x4768c671
 800a220:	4168d4fe 	.word	0x4168d4fe

0800a224 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a230:	887b      	ldrh	r3, [r7, #2]
 800a232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a236:	d209      	bcs.n	800a24c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a238:	887b      	ldrh	r3, [r7, #2]
 800a23a:	ee07 3a90 	vmov	s15, r3
 800a23e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a242:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a260 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a24a:	e001      	b.n	800a250 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a24c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a264 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a250:	eeb0 0a67 	vmov.f32	s0, s15
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	4168d4fe 	.word	0x4168d4fe
 800a264:	00000000 	.word	0x00000000

0800a268 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a274:	edd7 7a00 	vldr	s15, [r7]
 800a278:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a2ac <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a27c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a284:	d80b      	bhi.n	800a29e <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a286:	ed97 7a00 	vldr	s14, [r7]
 800a28a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a2b0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a28e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a296:	ee17 3a90 	vmov	r3, s15
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	e000      	b.n	800a2a0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	4768c671 	.word	0x4768c671
 800a2b0:	4168d4fe 	.word	0x4168d4fe

0800a2b4 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a2c0:	887b      	ldrh	r3, [r7, #2]
 800a2c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2c6:	d209      	bcs.n	800a2dc <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a2c8:	887b      	ldrh	r3, [r7, #2]
 800a2ca:	ee07 3a90 	vmov	s15, r3
 800a2ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2d2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a2f0 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a2d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2da:	e001      	b.n	800a2e0 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a2dc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a2f4 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a2e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	4174240b 	.word	0x4174240b
 800a2f4:	00000000 	.word	0x00000000

0800a2f8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a304:	edd7 7a00 	vldr	s15, [r7]
 800a308:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a33c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a30c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a314:	d80b      	bhi.n	800a32e <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a316:	ed97 7a00 	vldr	s14, [r7]
 800a31a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a340 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a31e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a326:	ee17 3a90 	vmov	r3, s15
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	e000      	b.n	800a330 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	4673e702 	.word	0x4673e702
 800a340:	4174240b 	.word	0x4174240b

0800a344 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a350:	887b      	ldrh	r3, [r7, #2]
 800a352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a356:	d209      	bcs.n	800a36c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a358:	887b      	ldrh	r3, [r7, #2]
 800a35a:	ee07 3a90 	vmov	s15, r3
 800a35e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a362:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a380 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a36a:	e001      	b.n	800a370 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a36c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a384 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a370:	eeb0 0a67 	vmov.f32	s0, s15
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	3e742401 	.word	0x3e742401
 800a384:	00000000 	.word	0x00000000

0800a388 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a394:	edd7 7a00 	vldr	s15, [r7]
 800a398:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a3cc <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a39c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a4:	d80b      	bhi.n	800a3be <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a3a6:	ed97 7a00 	vldr	s14, [r7]
 800a3aa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a3d0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a3ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3b6:	ee17 3a90 	vmov	r3, s15
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	e000      	b.n	800a3c0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	447414bf 	.word	0x447414bf
 800a3d0:	3e742401 	.word	0x3e742401

0800a3d4 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a3e0:	887b      	ldrh	r3, [r7, #2]
 800a3e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3e6:	d219      	bcs.n	800a41c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a3e8:	887b      	ldrh	r3, [r7, #2]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f6 f8ca 	bl	8000584 <__aeabi_i2d>
 800a3f0:	f04f 0200 	mov.w	r2, #0
 800a3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a430 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a3f6:	f7f5 ff79 	bl	80002ec <__adddf3>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4610      	mov	r0, r2
 800a400:	4619      	mov	r1, r3
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	4b0b      	ldr	r3, [pc, #44]	@ (800a434 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a408:	f7f6 f926 	bl	8000658 <__aeabi_dmul>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4610      	mov	r0, r2
 800a412:	4619      	mov	r1, r3
 800a414:	f7f6 fbf8 	bl	8000c08 <__aeabi_d2f>
 800a418:	4603      	mov	r3, r0
 800a41a:	e001      	b.n	800a420 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a41c:	f04f 0300 	mov.w	r3, #0
}
 800a420:	ee07 3a90 	vmov	s15, r3
 800a424:	eeb0 0a67 	vmov.f32	s0, s15
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	3fe00000 	.word	0x3fe00000
 800a434:	402e8000 	.word	0x402e8000

0800a438 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a444:	edd7 7a00 	vldr	s15, [r7]
 800a448:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a484 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a44c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a454:	d80f      	bhi.n	800a476 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a456:	ed97 7a00 	vldr	s14, [r7]
 800a45a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800a488 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a45e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a462:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a46a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a46e:	ee17 3a90 	vmov	r3, s15
 800a472:	b29b      	uxth	r3, r3
 800a474:	e000      	b.n	800a478 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	4673e180 	.word	0x4673e180
 800a488:	41740000 	.word	0x41740000

0800a48c <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a498:	887b      	ldrh	r3, [r7, #2]
 800a49a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a49e:	d209      	bcs.n	800a4b4 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a4a0:	887b      	ldrh	r3, [r7, #2]
 800a4a2:	ee07 3a90 	vmov	s15, r3
 800a4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4aa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a4c8 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a4ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4b2:	e001      	b.n	800a4b8 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a4b4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a4cc <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a4b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	3d7423f4 	.word	0x3d7423f4
 800a4cc:	00000000 	.word	0x00000000

0800a4d0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a4dc:	edd7 7a00 	vldr	s15, [r7]
 800a4e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a514 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a4e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ec:	d80b      	bhi.n	800a506 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a4ee:	ed97 7a00 	vldr	s14, [r7]
 800a4f2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a518 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a4f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4fe:	ee17 3a90 	vmov	r3, s15
 800a502:	b29b      	uxth	r3, r3
 800a504:	e000      	b.n	800a508 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	44742023 	.word	0x44742023
 800a518:	3d7423f4 	.word	0x3d7423f4

0800a51c <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a532:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a548 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a536:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a53a:	eeb0 0a67 	vmov.f32	s0, s15
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	3783956e 	.word	0x3783956e

0800a54c <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a558:	edd7 7a02 	vldr	s15, [r7, #8]
 800a55c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a594 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a560:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a568:	d80c      	bhi.n	800a584 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a56a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a56e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a598 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a57a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a57e:	793b      	ldrb	r3, [r7, #4]
 800a580:	b2db      	uxtb	r3, r3
 800a582:	e000      	b.n	800a586 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	3b8311d9 	.word	0x3b8311d9
 800a598:	3783956e 	.word	0x3783956e

0800a59c <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a5a8:	78fb      	ldrb	r3, [r7, #3]
 800a5aa:	ee07 3a90 	vmov	s15, r3
 800a5ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5b2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a5c8 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a5b6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a5ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	3783956e 	.word	0x3783956e

0800a5cc <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a5d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5dc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a614 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a5e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e8:	d80c      	bhi.n	800a604 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a5ea:	ed97 7a02 	vldr	s14, [r7, #8]
 800a5ee:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a618 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a5f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5fa:	edc7 7a01 	vstr	s15, [r7, #4]
 800a5fe:	793b      	ldrb	r3, [r7, #4]
 800a600:	b2db      	uxtb	r3, r3
 800a602:	e000      	b.n	800a606 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	3b8311d9 	.word	0x3b8311d9
 800a618:	3783956e 	.word	0x3783956e

0800a61c <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a632:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a648 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a636:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a63a:	eeb0 0a67 	vmov.f32	s0, s15
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	3783956e 	.word	0x3783956e

0800a64c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a658:	edd7 7a02 	vldr	s15, [r7, #8]
 800a65c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a694 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a660:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a668:	d80c      	bhi.n	800a684 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a66a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a66e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a698 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a67a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a67e:	793b      	ldrb	r3, [r7, #4]
 800a680:	b2db      	uxtb	r3, r3
 800a682:	e000      	b.n	800a686 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	3b8311d9 	.word	0x3b8311d9
 800a698:	3783956e 	.word	0x3783956e

0800a69c <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	2b0f      	cmp	r3, #15
 800a6ac:	d80a      	bhi.n	800a6c4 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a6d8 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a6be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6c2:	e001      	b.n	800a6c8 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a6c4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a6dc <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a6c8:	eeb0 0a67 	vmov.f32	s0, s15
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	43bb8000 	.word	0x43bb8000
 800a6dc:	00000000 	.word	0x00000000

0800a6e0 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a6ec:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6f0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a77c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a6f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fc:	d836      	bhi.n	800a76c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a6fe:	ed97 7a02 	vldr	s14, [r7, #8]
 800a702:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a780 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a70a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a70e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a716:	edc7 7a01 	vstr	s15, [r7, #4]
 800a71a:	793b      	ldrb	r3, [r7, #4]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a726:	ed97 7a05 	vldr	s14, [r7, #20]
 800a72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a72e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a732:	edd7 7a04 	vldr	s15, [r7, #16]
 800a736:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a73a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a742:	d50a      	bpl.n	800a75a <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a744:	edd7 7a05 	vldr	s15, [r7, #20]
 800a748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a74c:	edc7 7a01 	vstr	s15, [r7, #4]
 800a750:	793b      	ldrb	r3, [r7, #4]
 800a752:	b2db      	uxtb	r3, r3
 800a754:	3b01      	subs	r3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	e009      	b.n	800a76e <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a75a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a75e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a762:	edc7 7a01 	vstr	s15, [r7, #4]
 800a766:	793b      	ldrb	r3, [r7, #4]
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	e000      	b.n	800a76e <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	45bb8000 	.word	0x45bb8000
 800a780:	43bb8000 	.word	0x43bb8000

0800a784 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a794:	2b00      	cmp	r3, #0
 800a796:	db0a      	blt.n	800a7ae <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	3301      	adds	r3, #1
 800a79c:	ee07 3a90 	vmov	s15, r3
 800a7a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7a4:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a7c0 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a7a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7ac:	e001      	b.n	800a7b2 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a7ae:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a7c4 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a7b2:	eeb0 0a67 	vmov.f32	s0, s15
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	41fa0000 	.word	0x41fa0000
 800a7c4:	00000000 	.word	0x00000000

0800a7c8 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a7d4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a7d8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a864 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a7dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e4:	d836      	bhi.n	800a854 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a7e6:	ed97 7a02 	vldr	s14, [r7, #8]
 800a7ea:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a868 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a7ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7f2:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a7f6:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7fe:	edc7 7a01 	vstr	s15, [r7, #4]
 800a802:	793b      	ldrb	r3, [r7, #4]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a80e:	ed97 7a05 	vldr	s14, [r7, #20]
 800a812:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a816:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a81a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a81e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a822:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a82a:	d50a      	bpl.n	800a842 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a82c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a834:	edc7 7a01 	vstr	s15, [r7, #4]
 800a838:	793b      	ldrb	r3, [r7, #4]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	e009      	b.n	800a856 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a842:	edd7 7a05 	vldr	s15, [r7, #20]
 800a846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a84a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a84e:	793b      	ldrb	r3, [r7, #4]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	e000      	b.n	800a856 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	457a0000 	.word	0x457a0000
 800a868:	41fa0000 	.word	0x41fa0000

0800a86c <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3394      	adds	r3, #148	@ 0x94
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	4798      	blx	r3
  get_status();
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	330c      	adds	r3, #12
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	edd2 7a05 	vldr	s15, [r2, #20]
 800a8a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	4798      	blx	r3
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	edd2 7a06 	vldr	s15, [r2, #24]
 800a8c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	4798      	blx	r3
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	edd2 7a07 	vldr	s15, [r2, #28]
 800a8e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	4798      	blx	r3
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	edd2 7a08 	vldr	s15, [r2, #32]
 800a908:	eeb0 0a67 	vmov.f32	s0, s15
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	4798      	blx	r3
 800a910:	4603      	mov	r3, r0
 800a912:	461a      	mov	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800a92a:	eeb0 0a67 	vmov.f32	s0, s15
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	4798      	blx	r3
 800a932:	4603      	mov	r3, r0
 800a934:	461a      	mov	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800a942:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ac14 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a946:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	ed93 7a00 	vldr	s14, [r3]
 800a950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a958:	edc7 7a01 	vstr	s15, [r7, #4]
 800a95c:	793b      	ldrb	r3, [r7, #4]
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800a96c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800ac14 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a970:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	ed93 7a00 	vldr	s14, [r3]
 800a97a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a97e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a982:	edc7 7a01 	vstr	s15, [r7, #4]
 800a986:	793b      	ldrb	r3, [r7, #4]
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800a996:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800ac14 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a99a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	ed93 7a00 	vldr	s14, [r3]
 800a9a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ac:	edc7 7a01 	vstr	s15, [r7, #4]
 800a9b0:	793b      	ldrb	r3, [r7, #4]
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a9c0:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800ac14 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a9c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	ed93 7a00 	vldr	s14, [r3]
 800a9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9d6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a9da:	793b      	ldrb	r3, [r7, #4]
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800a9f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	4798      	blx	r3
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	461a      	mov	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800aa16:	eeb0 0a67 	vmov.f32	s0, s15
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	4798      	blx	r3
 800aa1e:	4603      	mov	r3, r0
 800aa20:	461a      	mov	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800aa38:	eeb0 0a67 	vmov.f32	s0, s15
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	4798      	blx	r3
 800aa40:	4603      	mov	r3, r0
 800aa42:	461a      	mov	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800aa5a:	eeb0 0a67 	vmov.f32	s0, s15
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	4798      	blx	r3
 800aa62:	4603      	mov	r3, r0
 800aa64:	461a      	mov	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800aa88:	eeb0 0a67 	vmov.f32	s0, s15
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	4798      	blx	r3
 800aa90:	4603      	mov	r3, r0
 800aa92:	461a      	mov	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800aaaa:	eeb0 0a67 	vmov.f32	s0, s15
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	4798      	blx	r3
 800aab2:	4603      	mov	r3, r0
 800aab4:	461a      	mov	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800aaf0:	2104      	movs	r1, #4
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800ab06:	2105      	movs	r1, #5
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800ab1c:	2106      	movs	r1, #6
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800ab32:	2107      	movs	r1, #7
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800ab48:	2108      	movs	r1, #8
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800ab5e:	2109      	movs	r1, #9
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800ab74:	210a      	movs	r1, #10
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800ab8a:	210b      	movs	r1, #11
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800aba0:	210c      	movs	r1, #12
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800abb6:	210d      	movs	r1, #13
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800abcc:	210e      	movs	r1, #14
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800abe2:	210f      	movs	r1, #15
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800abf8:	2110      	movs	r1, #16
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800ac0e:	2111      	movs	r1, #17
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	e001      	b.n	800ac18 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800ac14:	43800000 	.word	0x43800000
 800ac18:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800ac2a:	2113      	movs	r1, #19
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800ac40:	2114      	movs	r1, #20
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800ac56:	2116      	movs	r1, #22
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800ac6c:	2117      	movs	r1, #23
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3354      	adds	r3, #84	@ 0x54
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800ac80:	4611      	mov	r1, r2
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	4798      	blx	r3
 800ac86:	4603      	mov	r3, r0
 800ac88:	f083 0301 	eor.w	r3, r3, #1
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e000      	b.n	800ac98 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800aca0:	b590      	push	{r4, r7, lr}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	460b      	mov	r3, r1
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800acb6:	681c      	ldr	r4, [r3, #0]
 800acb8:	7afa      	ldrb	r2, [r7, #11]
 800acba:	2300      	movs	r3, #0
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	4613      	mov	r3, r2
 800acc4:	2201      	movs	r2, #1
 800acc6:	490c      	ldr	r1, [pc, #48]	@ (800acf8 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a09      	ldr	r2, [pc, #36]	@ (800acfc <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800acd8:	4907      	ldr	r1, [pc, #28]	@ (800acf8 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a05      	ldr	r2, [pc, #20]	@ (800ad00 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800acea:	4904      	ldr	r1, [pc, #16]	@ (800acfc <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	4798      	blx	r3
}
 800acf0:	bf00      	nop
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd90      	pop	{r4, r7, pc}
 800acf8:	20000210 	.word	0x20000210
 800acfc:	20000230 	.word	0x20000230
 800ad00:	20000238 	.word	0x20000238

0800ad04 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800ad04:	b590      	push	{r4, r7, lr}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ad18:	681c      	ldr	r4, [r3, #0]
 800ad1a:	78fb      	ldrb	r3, [r7, #3]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	9201      	str	r2, [sp, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	9200      	str	r2, [sp, #0]
 800ad24:	2202      	movs	r2, #2
 800ad26:	4917      	ldr	r1, [pc, #92]	@ (800ad84 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a14      	ldr	r2, [pc, #80]	@ (800ad88 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ad38:	4912      	ldr	r1, [pc, #72]	@ (800ad84 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a10      	ldr	r2, [pc, #64]	@ (800ad8c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ad4a:	490f      	ldr	r1, [pc, #60]	@ (800ad88 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a19      	ldr	r1, [r3, #32]
 800ad54:	78fa      	ldrb	r2, [r7, #3]
 800ad56:	4613      	mov	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	440b      	add	r3, r1
 800ad60:	7b9b      	ldrb	r3, [r3, #14]
 800ad62:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	7bfa      	ldrb	r2, [r7, #15]
 800ad70:	4906      	ldr	r1, [pc, #24]	@ (800ad8c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	4798      	blx	r3
 800ad76:	4603      	mov	r3, r0
 800ad78:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd90      	pop	{r4, r7, pc}
 800ad84:	20000210 	.word	0x20000210
 800ad88:	20000230 	.word	0x20000230
 800ad8c:	20000238 	.word	0x20000238

0800ad90 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800ad90:	b590      	push	{r4, r7, lr}
 800ad92:	b087      	sub	sp, #28
 800ad94:	af02      	add	r7, sp, #8
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ada6:	681c      	ldr	r4, [r3, #0]
 800ada8:	7afa      	ldrb	r2, [r7, #11]
 800adaa:	2300      	movs	r3, #0
 800adac:	9301      	str	r3, [sp, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	4613      	mov	r3, r2
 800adb4:	2203      	movs	r2, #3
 800adb6:	490c      	ldr	r1, [pc, #48]	@ (800ade8 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a09      	ldr	r2, [pc, #36]	@ (800adec <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800adc8:	4907      	ldr	r1, [pc, #28]	@ (800ade8 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a05      	ldr	r2, [pc, #20]	@ (800adf0 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800adda:	4904      	ldr	r1, [pc, #16]	@ (800adec <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	4798      	blx	r3
}
 800ade0:	bf00      	nop
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd90      	pop	{r4, r7, pc}
 800ade8:	20000210 	.word	0x20000210
 800adec:	20000230 	.word	0x20000230
 800adf0:	20000238 	.word	0x20000238

0800adf4 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae08:	681c      	ldr	r4, [r3, #0]
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	9201      	str	r2, [sp, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	9200      	str	r2, [sp, #0]
 800ae14:	2204      	movs	r2, #4
 800ae16:	490c      	ldr	r1, [pc, #48]	@ (800ae48 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a09      	ldr	r2, [pc, #36]	@ (800ae4c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800ae28:	4907      	ldr	r1, [pc, #28]	@ (800ae48 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a05      	ldr	r2, [pc, #20]	@ (800ae50 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800ae3a:	4904      	ldr	r1, [pc, #16]	@ (800ae4c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd90      	pop	{r4, r7, pc}
 800ae48:	20000210 	.word	0x20000210
 800ae4c:	20000230 	.word	0x20000230
 800ae50:	20000238 	.word	0x20000238

0800ae54 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800ae54:	b590      	push	{r4, r7, lr}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af02      	add	r7, sp, #8
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae6a:	681c      	ldr	r4, [r3, #0]
 800ae6c:	7afa      	ldrb	r2, [r7, #11]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	4613      	mov	r3, r2
 800ae78:	2205      	movs	r2, #5
 800ae7a:	490c      	ldr	r1, [pc, #48]	@ (800aeac <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a09      	ldr	r2, [pc, #36]	@ (800aeb0 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800ae8c:	4907      	ldr	r1, [pc, #28]	@ (800aeac <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a05      	ldr	r2, [pc, #20]	@ (800aeb4 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800ae9e:	4904      	ldr	r1, [pc, #16]	@ (800aeb0 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	4798      	blx	r3
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd90      	pop	{r4, r7, pc}
 800aeac:	20000210 	.word	0x20000210
 800aeb0:	20000230 	.word	0x20000230
 800aeb4:	20000238 	.word	0x20000238

0800aeb8 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800aeb8:	b590      	push	{r4, r7, lr}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af02      	add	r7, sp, #8
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aec8:	d21f      	bcs.n	800af0a <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aed2:	681c      	ldr	r4, [r3, #0]
 800aed4:	2300      	movs	r3, #0
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	2300      	movs	r3, #0
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2206      	movs	r2, #6
 800aee0:	490c      	ldr	r1, [pc, #48]	@ (800af14 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a09      	ldr	r2, [pc, #36]	@ (800af18 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800aef2:	4908      	ldr	r1, [pc, #32]	@ (800af14 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a06      	ldr	r2, [pc, #24]	@ (800af1c <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800af04:	4904      	ldr	r1, [pc, #16]	@ (800af18 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	4798      	blx	r3
}
 800af0a:	bf00      	nop
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd90      	pop	{r4, r7, pc}
 800af12:	bf00      	nop
 800af14:	20000210 	.word	0x20000210
 800af18:	20000230 	.word	0x20000230
 800af1c:	20000238 	.word	0x20000238

0800af20 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800af20:	b590      	push	{r4, r7, lr}
 800af22:	b087      	sub	sp, #28
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	460b      	mov	r3, r1
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af34:	d220      	bcs.n	800af78 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af3e:	681c      	ldr	r4, [r3, #0]
 800af40:	7afa      	ldrb	r2, [r7, #11]
 800af42:	2300      	movs	r3, #0
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	4613      	mov	r3, r2
 800af4c:	2207      	movs	r2, #7
 800af4e:	490c      	ldr	r1, [pc, #48]	@ (800af80 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a09      	ldr	r2, [pc, #36]	@ (800af84 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800af60:	4907      	ldr	r1, [pc, #28]	@ (800af80 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a05      	ldr	r2, [pc, #20]	@ (800af88 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800af72:	4904      	ldr	r1, [pc, #16]	@ (800af84 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	4798      	blx	r3
}
 800af78:	bf00      	nop
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd90      	pop	{r4, r7, pc}
 800af80:	20000210 	.word	0x20000210
 800af84:	20000230 	.word	0x20000230
 800af88:	20000238 	.word	0x20000238

0800af8c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800af8c:	b590      	push	{r4, r7, lr}
 800af8e:	b087      	sub	sp, #28
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	607b      	str	r3, [r7, #4]
 800af96:	460b      	mov	r3, r1
 800af98:	72fb      	strb	r3, [r7, #11]
 800af9a:	4613      	mov	r3, r2
 800af9c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800afa6:	681c      	ldr	r4, [r3, #0]
 800afa8:	7af9      	ldrb	r1, [r7, #11]
 800afaa:	7abb      	ldrb	r3, [r7, #10]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	9201      	str	r2, [sp, #4]
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	460b      	mov	r3, r1
 800afb4:	2208      	movs	r2, #8
 800afb6:	490c      	ldr	r1, [pc, #48]	@ (800afe8 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a09      	ldr	r2, [pc, #36]	@ (800afec <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800afc8:	4907      	ldr	r1, [pc, #28]	@ (800afe8 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a05      	ldr	r2, [pc, #20]	@ (800aff0 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800afda:	4904      	ldr	r1, [pc, #16]	@ (800afec <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	4798      	blx	r3
}
 800afe0:	bf00      	nop
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd90      	pop	{r4, r7, pc}
 800afe8:	20000210 	.word	0x20000210
 800afec:	20000230 	.word	0x20000230
 800aff0:	20000238 	.word	0x20000238

0800aff4 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800aff4:	b590      	push	{r4, r7, lr}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af02      	add	r7, sp, #8
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	70fb      	strb	r3, [r7, #3]
 800b000:	4613      	mov	r3, r2
 800b002:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b00c:	681c      	ldr	r4, [r3, #0]
 800b00e:	78fa      	ldrb	r2, [r7, #3]
 800b010:	78bb      	ldrb	r3, [r7, #2]
 800b012:	2100      	movs	r1, #0
 800b014:	9101      	str	r1, [sp, #4]
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	4613      	mov	r3, r2
 800b01a:	2209      	movs	r2, #9
 800b01c:	490c      	ldr	r1, [pc, #48]	@ (800b050 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a09      	ldr	r2, [pc, #36]	@ (800b054 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b02e:	4908      	ldr	r1, [pc, #32]	@ (800b050 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a06      	ldr	r2, [pc, #24]	@ (800b058 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b040:	4904      	ldr	r1, [pc, #16]	@ (800b054 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4798      	blx	r3
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd90      	pop	{r4, r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000210 	.word	0x20000210
 800b054:	20000230 	.word	0x20000230
 800b058:	20000238 	.word	0x20000238

0800b05c <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b05c:	b590      	push	{r4, r7, lr}
 800b05e:	b085      	sub	sp, #20
 800b060:	af02      	add	r7, sp, #8
 800b062:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b06c:	681c      	ldr	r4, [r3, #0]
 800b06e:	2300      	movs	r3, #0
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	2300      	movs	r3, #0
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	2300      	movs	r3, #0
 800b078:	220a      	movs	r2, #10
 800b07a:	490c      	ldr	r1, [pc, #48]	@ (800b0ac <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a09      	ldr	r2, [pc, #36]	@ (800b0b0 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b08c:	4907      	ldr	r1, [pc, #28]	@ (800b0ac <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a05      	ldr	r2, [pc, #20]	@ (800b0b4 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b09e:	4904      	ldr	r1, [pc, #16]	@ (800b0b0 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	4798      	blx	r3
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd90      	pop	{r4, r7, pc}
 800b0ac:	20000210 	.word	0x20000210
 800b0b0:	20000230 	.word	0x20000230
 800b0b4:	20000238 	.word	0x20000238

0800b0b8 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b0b8:	b590      	push	{r4, r7, lr}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af02      	add	r7, sp, #8
 800b0be:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b0c8:	681c      	ldr	r4, [r3, #0]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	220b      	movs	r2, #11
 800b0d6:	490c      	ldr	r1, [pc, #48]	@ (800b108 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a09      	ldr	r2, [pc, #36]	@ (800b10c <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b0e8:	4907      	ldr	r1, [pc, #28]	@ (800b108 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a05      	ldr	r2, [pc, #20]	@ (800b110 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b0fa:	4904      	ldr	r1, [pc, #16]	@ (800b10c <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	4798      	blx	r3
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	bd90      	pop	{r4, r7, pc}
 800b108:	20000210 	.word	0x20000210
 800b10c:	20000230 	.word	0x20000230
 800b110:	20000238 	.word	0x20000238

0800b114 <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b114:	b590      	push	{r4, r7, lr}
 800b116:	b085      	sub	sp, #20
 800b118:	af02      	add	r7, sp, #8
 800b11a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b124:	681c      	ldr	r4, [r3, #0]
 800b126:	2300      	movs	r3, #0
 800b128:	9301      	str	r3, [sp, #4]
 800b12a:	2300      	movs	r3, #0
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	2300      	movs	r3, #0
 800b130:	220c      	movs	r2, #12
 800b132:	490c      	ldr	r1, [pc, #48]	@ (800b164 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a09      	ldr	r2, [pc, #36]	@ (800b168 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b144:	4907      	ldr	r1, [pc, #28]	@ (800b164 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a05      	ldr	r2, [pc, #20]	@ (800b16c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b156:	4904      	ldr	r1, [pc, #16]	@ (800b168 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	4798      	blx	r3
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	bd90      	pop	{r4, r7, pc}
 800b164:	20000210 	.word	0x20000210
 800b168:	20000230 	.word	0x20000230
 800b16c:	20000238 	.word	0x20000238

0800b170 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b085      	sub	sp, #20
 800b174:	af02      	add	r7, sp, #8
 800b176:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b180:	681c      	ldr	r4, [r3, #0]
 800b182:	2300      	movs	r3, #0
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	2300      	movs	r3, #0
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	2300      	movs	r3, #0
 800b18c:	220d      	movs	r2, #13
 800b18e:	490c      	ldr	r1, [pc, #48]	@ (800b1c0 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a09      	ldr	r2, [pc, #36]	@ (800b1c4 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b1a0:	4907      	ldr	r1, [pc, #28]	@ (800b1c0 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a05      	ldr	r2, [pc, #20]	@ (800b1c8 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b1b2:	4904      	ldr	r1, [pc, #16]	@ (800b1c4 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	4798      	blx	r3
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd90      	pop	{r4, r7, pc}
 800b1c0:	20000210 	.word	0x20000210
 800b1c4:	20000230 	.word	0x20000230
 800b1c8:	20000238 	.word	0x20000238

0800b1cc <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af02      	add	r7, sp, #8
 800b1d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1dc:	681c      	ldr	r4, [r3, #0]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9301      	str	r3, [sp, #4]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	220e      	movs	r2, #14
 800b1ea:	490c      	ldr	r1, [pc, #48]	@ (800b21c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a09      	ldr	r2, [pc, #36]	@ (800b220 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b1fc:	4907      	ldr	r1, [pc, #28]	@ (800b21c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a05      	ldr	r2, [pc, #20]	@ (800b224 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b20e:	4904      	ldr	r1, [pc, #16]	@ (800b220 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	4798      	blx	r3
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd90      	pop	{r4, r7, pc}
 800b21c:	20000210 	.word	0x20000210
 800b220:	20000230 	.word	0x20000230
 800b224:	20000238 	.word	0x20000238

0800b228 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b228:	b590      	push	{r4, r7, lr}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af02      	add	r7, sp, #8
 800b22e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b238:	681c      	ldr	r4, [r3, #0]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	2300      	movs	r3, #0
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	2300      	movs	r3, #0
 800b244:	220f      	movs	r2, #15
 800b246:	490c      	ldr	r1, [pc, #48]	@ (800b278 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a09      	ldr	r2, [pc, #36]	@ (800b27c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b258:	4907      	ldr	r1, [pc, #28]	@ (800b278 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a05      	ldr	r2, [pc, #20]	@ (800b280 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b26a:	4904      	ldr	r1, [pc, #16]	@ (800b27c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	4798      	blx	r3
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	bd90      	pop	{r4, r7, pc}
 800b278:	20000210 	.word	0x20000210
 800b27c:	20000230 	.word	0x20000230
 800b280:	20000238 	.word	0x20000238

0800b284 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b284:	b590      	push	{r4, r7, lr}
 800b286:	b085      	sub	sp, #20
 800b288:	af02      	add	r7, sp, #8
 800b28a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b294:	681c      	ldr	r4, [r3, #0]
 800b296:	2300      	movs	r3, #0
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	2300      	movs	r3, #0
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	2210      	movs	r2, #16
 800b2a2:	490c      	ldr	r1, [pc, #48]	@ (800b2d4 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a09      	ldr	r2, [pc, #36]	@ (800b2d8 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b2b4:	4907      	ldr	r1, [pc, #28]	@ (800b2d4 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a05      	ldr	r2, [pc, #20]	@ (800b2dc <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b2c6:	4904      	ldr	r1, [pc, #16]	@ (800b2d8 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	4798      	blx	r3
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd90      	pop	{r4, r7, pc}
 800b2d4:	20000210 	.word	0x20000210
 800b2d8:	20000230 	.word	0x20000230
 800b2dc:	20000238 	.word	0x20000238

0800b2e0 <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af02      	add	r7, sp, #8
 800b2e6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2f0:	681c      	ldr	r4, [r3, #0]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2211      	movs	r2, #17
 800b2fe:	490c      	ldr	r1, [pc, #48]	@ (800b330 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a09      	ldr	r2, [pc, #36]	@ (800b334 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b310:	4907      	ldr	r1, [pc, #28]	@ (800b330 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a05      	ldr	r2, [pc, #20]	@ (800b338 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b322:	4904      	ldr	r1, [pc, #16]	@ (800b334 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	4798      	blx	r3
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd90      	pop	{r4, r7, pc}
 800b330:	20000210 	.word	0x20000210
 800b334:	20000230 	.word	0x20000230
 800b338:	20000238 	.word	0x20000238

0800b33c <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b33c:	b590      	push	{r4, r7, lr}
 800b33e:	b087      	sub	sp, #28
 800b340:	af02      	add	r7, sp, #8
 800b342:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b34c:	681c      	ldr	r4, [r3, #0]
 800b34e:	2300      	movs	r3, #0
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	2300      	movs	r3, #0
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	2300      	movs	r3, #0
 800b358:	2212      	movs	r2, #18
 800b35a:	4912      	ldr	r1, [pc, #72]	@ (800b3a4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a0f      	ldr	r2, [pc, #60]	@ (800b3a8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b36c:	490d      	ldr	r1, [pc, #52]	@ (800b3a4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a0b      	ldr	r2, [pc, #44]	@ (800b3ac <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b37e:	490a      	ldr	r1, [pc, #40]	@ (800b3a8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2202      	movs	r2, #2
 800b390:	4906      	ldr	r1, [pc, #24]	@ (800b3ac <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	4798      	blx	r3
 800b396:	4603      	mov	r3, r0
 800b398:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b39a:	89fb      	ldrh	r3, [r7, #14]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd90      	pop	{r4, r7, pc}
 800b3a4:	20000210 	.word	0x20000210
 800b3a8:	20000230 	.word	0x20000230
 800b3ac:	20000238 	.word	0x20000238

0800b3b0 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b3b0:	b590      	push	{r4, r7, lr}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af02      	add	r7, sp, #8
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	607a      	str	r2, [r7, #4]
 800b3bc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3c6:	681c      	ldr	r4, [r3, #0]
 800b3c8:	7afa      	ldrb	r2, [r7, #11]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	4903      	ldr	r1, [pc, #12]	@ (800b3e4 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	47a0      	blx	r4
}
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd90      	pop	{r4, r7, pc}
 800b3e4:	20000210 	.word	0x20000210

0800b3e8 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b3e8:	b590      	push	{r4, r7, lr}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3fc:	681c      	ldr	r4, [r3, #0]
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	2200      	movs	r2, #0
 800b402:	9201      	str	r2, [sp, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	9200      	str	r2, [sp, #0]
 800b408:	2202      	movs	r2, #2
 800b40a:	4903      	ldr	r1, [pc, #12]	@ (800b418 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	47a0      	blx	r4
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	bd90      	pop	{r4, r7, pc}
 800b418:	20000210 	.word	0x20000210

0800b41c <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b41c:	b590      	push	{r4, r7, lr}
 800b41e:	b087      	sub	sp, #28
 800b420:	af02      	add	r7, sp, #8
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	460b      	mov	r3, r1
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b432:	681c      	ldr	r4, [r3, #0]
 800b434:	7afa      	ldrb	r2, [r7, #11]
 800b436:	2300      	movs	r3, #0
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	4613      	mov	r3, r2
 800b440:	2203      	movs	r2, #3
 800b442:	4903      	ldr	r1, [pc, #12]	@ (800b450 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	47a0      	blx	r4
}
 800b448:	bf00      	nop
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd90      	pop	{r4, r7, pc}
 800b450:	20000210 	.word	0x20000210

0800b454 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b085      	sub	sp, #20
 800b458:	af02      	add	r7, sp, #8
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b468:	681c      	ldr	r4, [r3, #0]
 800b46a:	78fb      	ldrb	r3, [r7, #3]
 800b46c:	2200      	movs	r2, #0
 800b46e:	9201      	str	r2, [sp, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	9200      	str	r2, [sp, #0]
 800b474:	2204      	movs	r2, #4
 800b476:	4903      	ldr	r1, [pc, #12]	@ (800b484 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	47a0      	blx	r4
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	bd90      	pop	{r4, r7, pc}
 800b484:	20000210 	.word	0x20000210

0800b488 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b488:	b590      	push	{r4, r7, lr}
 800b48a:	b087      	sub	sp, #28
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	460b      	mov	r3, r1
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b49e:	681c      	ldr	r4, [r3, #0]
 800b4a0:	7afa      	ldrb	r2, [r7, #11]
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	2205      	movs	r2, #5
 800b4ae:	4903      	ldr	r1, [pc, #12]	@ (800b4bc <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	47a0      	blx	r4
}
 800b4b4:	bf00      	nop
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd90      	pop	{r4, r7, pc}
 800b4bc:	20000210 	.word	0x20000210

0800b4c0 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b4c0:	b590      	push	{r4, r7, lr}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af02      	add	r7, sp, #8
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4d2:	681c      	ldr	r4, [r3, #0]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2206      	movs	r2, #6
 800b4e0:	4903      	ldr	r1, [pc, #12]	@ (800b4f0 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	47a0      	blx	r4
}
 800b4e6:	bf00      	nop
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd90      	pop	{r4, r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20000210 	.word	0x20000210

0800b4f4 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b4f4:	b590      	push	{r4, r7, lr}
 800b4f6:	b087      	sub	sp, #28
 800b4f8:	af02      	add	r7, sp, #8
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b50a:	681c      	ldr	r4, [r3, #0]
 800b50c:	7afa      	ldrb	r2, [r7, #11]
 800b50e:	2300      	movs	r3, #0
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	4613      	mov	r3, r2
 800b518:	2207      	movs	r2, #7
 800b51a:	4903      	ldr	r1, [pc, #12]	@ (800b528 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	47a0      	blx	r4
}
 800b520:	bf00      	nop
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	bd90      	pop	{r4, r7, pc}
 800b528:	20000210 	.word	0x20000210

0800b52c <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b52c:	b590      	push	{r4, r7, lr}
 800b52e:	b087      	sub	sp, #28
 800b530:	af02      	add	r7, sp, #8
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	607b      	str	r3, [r7, #4]
 800b536:	460b      	mov	r3, r1
 800b538:	72fb      	strb	r3, [r7, #11]
 800b53a:	4613      	mov	r3, r2
 800b53c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b546:	681c      	ldr	r4, [r3, #0]
 800b548:	7af9      	ldrb	r1, [r7, #11]
 800b54a:	7abb      	ldrb	r3, [r7, #10]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	9201      	str	r2, [sp, #4]
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	460b      	mov	r3, r1
 800b554:	2208      	movs	r2, #8
 800b556:	4903      	ldr	r1, [pc, #12]	@ (800b564 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	47a0      	blx	r4
}
 800b55c:	bf00      	nop
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	bd90      	pop	{r4, r7, pc}
 800b564:	20000210 	.word	0x20000210

0800b568 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b568:	b590      	push	{r4, r7, lr}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af02      	add	r7, sp, #8
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
 800b574:	4613      	mov	r3, r2
 800b576:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b580:	681c      	ldr	r4, [r3, #0]
 800b582:	78fa      	ldrb	r2, [r7, #3]
 800b584:	78bb      	ldrb	r3, [r7, #2]
 800b586:	2100      	movs	r1, #0
 800b588:	9101      	str	r1, [sp, #4]
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	2209      	movs	r2, #9
 800b590:	4903      	ldr	r1, [pc, #12]	@ (800b5a0 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	47a0      	blx	r4
}
 800b596:	bf00      	nop
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd90      	pop	{r4, r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	20000210 	.word	0x20000210

0800b5a4 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b5a4:	b590      	push	{r4, r7, lr}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5b4:	681c      	ldr	r4, [r3, #0]
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	4903      	ldr	r1, [pc, #12]	@ (800b5d0 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	47a0      	blx	r4
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd90      	pop	{r4, r7, pc}
 800b5d0:	20000210 	.word	0x20000210

0800b5d4 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b5d4:	b590      	push	{r4, r7, lr}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af02      	add	r7, sp, #8
 800b5da:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5e4:	681c      	ldr	r4, [r3, #0]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	220b      	movs	r2, #11
 800b5f2:	4903      	ldr	r1, [pc, #12]	@ (800b600 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	47a0      	blx	r4
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd90      	pop	{r4, r7, pc}
 800b600:	20000210 	.word	0x20000210

0800b604 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b604:	b590      	push	{r4, r7, lr}
 800b606:	b085      	sub	sp, #20
 800b608:	af02      	add	r7, sp, #8
 800b60a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b614:	681c      	ldr	r4, [r3, #0]
 800b616:	2300      	movs	r3, #0
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	2300      	movs	r3, #0
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	2300      	movs	r3, #0
 800b620:	220c      	movs	r2, #12
 800b622:	4903      	ldr	r1, [pc, #12]	@ (800b630 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	47a0      	blx	r4
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd90      	pop	{r4, r7, pc}
 800b630:	20000210 	.word	0x20000210

0800b634 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b634:	b590      	push	{r4, r7, lr}
 800b636:	b085      	sub	sp, #20
 800b638:	af02      	add	r7, sp, #8
 800b63a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b644:	681c      	ldr	r4, [r3, #0]
 800b646:	2300      	movs	r3, #0
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	2300      	movs	r3, #0
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	2300      	movs	r3, #0
 800b650:	220d      	movs	r2, #13
 800b652:	4903      	ldr	r1, [pc, #12]	@ (800b660 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	47a0      	blx	r4
}
 800b658:	bf00      	nop
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd90      	pop	{r4, r7, pc}
 800b660:	20000210 	.word	0x20000210

0800b664 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b664:	b590      	push	{r4, r7, lr}
 800b666:	b085      	sub	sp, #20
 800b668:	af02      	add	r7, sp, #8
 800b66a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b674:	681c      	ldr	r4, [r3, #0]
 800b676:	2300      	movs	r3, #0
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	2300      	movs	r3, #0
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	2300      	movs	r3, #0
 800b680:	220e      	movs	r2, #14
 800b682:	4903      	ldr	r1, [pc, #12]	@ (800b690 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	47a0      	blx	r4
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd90      	pop	{r4, r7, pc}
 800b690:	20000210 	.word	0x20000210

0800b694 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b085      	sub	sp, #20
 800b698:	af02      	add	r7, sp, #8
 800b69a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6a4:	681c      	ldr	r4, [r3, #0]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	220f      	movs	r2, #15
 800b6b2:	4903      	ldr	r1, [pc, #12]	@ (800b6c0 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	47a0      	blx	r4
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd90      	pop	{r4, r7, pc}
 800b6c0:	20000210 	.word	0x20000210

0800b6c4 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b6c4:	b590      	push	{r4, r7, lr}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6d4:	681c      	ldr	r4, [r3, #0]
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	2210      	movs	r2, #16
 800b6e2:	4903      	ldr	r1, [pc, #12]	@ (800b6f0 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	47a0      	blx	r4
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd90      	pop	{r4, r7, pc}
 800b6f0:	20000210 	.word	0x20000210

0800b6f4 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b6f4:	b590      	push	{r4, r7, lr}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b704:	681c      	ldr	r4, [r3, #0]
 800b706:	2300      	movs	r3, #0
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	2300      	movs	r3, #0
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	2300      	movs	r3, #0
 800b710:	2211      	movs	r2, #17
 800b712:	4903      	ldr	r1, [pc, #12]	@ (800b720 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	47a0      	blx	r4
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd90      	pop	{r4, r7, pc}
 800b720:	20000210 	.word	0x20000210

0800b724 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b724:	b590      	push	{r4, r7, lr}
 800b726:	b085      	sub	sp, #20
 800b728:	af02      	add	r7, sp, #8
 800b72a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b734:	681c      	ldr	r4, [r3, #0]
 800b736:	2300      	movs	r3, #0
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	2300      	movs	r3, #0
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	2300      	movs	r3, #0
 800b740:	2212      	movs	r2, #18
 800b742:	4903      	ldr	r1, [pc, #12]	@ (800b750 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	47a0      	blx	r4
}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd90      	pop	{r4, r7, pc}
 800b750:	20000210 	.word	0x20000210

0800b754 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a09      	ldr	r2, [pc, #36]	@ (800b78c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b768:	4909      	ldr	r1, [pc, #36]	@ (800b790 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a06      	ldr	r2, [pc, #24]	@ (800b794 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b77a:	4904      	ldr	r1, [pc, #16]	@ (800b78c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b780:	4b04      	ldr	r3, [pc, #16]	@ (800b794 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b782:	4618      	mov	r0, r3
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20000230 	.word	0x20000230
 800b790:	20000210 	.word	0x20000210
 800b794:	20000238 	.word	0x20000238

0800b798 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b798:	b590      	push	{r4, r7, lr}
 800b79a:	b089      	sub	sp, #36	@ 0x24
 800b79c:	af02      	add	r7, sp, #8
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b7a4:	4b17      	ldr	r3, [pc, #92]	@ (800b804 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	75fb      	strb	r3, [r7, #23]
 800b7ae:	e020      	b.n	800b7f2 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b7b8:	681c      	ldr	r4, [r3, #0]
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	461a      	mov	r2, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	1899      	adds	r1, r3, r2
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
 800b7c6:	005b      	lsls	r3, r3, #1
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	441a      	add	r2, r3
 800b7ce:	230a      	movs	r3, #10
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b7d8:	2300      	movs	r3, #0
 800b7da:	75bb      	strb	r3, [r7, #22]
 800b7dc:	e003      	b.n	800b7e6 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b7de:	bf00      	nop
 800b7e0:	7dbb      	ldrb	r3, [r7, #22]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	75bb      	strb	r3, [r7, #22]
 800b7e6:	7dbb      	ldrb	r3, [r7, #22]
 800b7e8:	2b7c      	cmp	r3, #124	@ 0x7c
 800b7ea:	d9f8      	bls.n	800b7de <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	75fb      	strb	r3, [r7, #23]
 800b7f2:	7dfb      	ldrb	r3, [r7, #23]
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d9db      	bls.n	800b7b0 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b7f8:	bf00      	nop
}
 800b7fa:	bf00      	nop
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd90      	pop	{r4, r7, pc}
 800b802:	bf00      	nop
 800b804:	2000020d 	.word	0x2000020d

0800b808 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b808:	b480      	push	{r7}
 800b80a:	b087      	sub	sp, #28
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	4613      	mov	r3, r2
 800b814:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b81a:	2301      	movs	r3, #1
 800b81c:	74fb      	strb	r3, [r7, #19]
 800b81e:	e016      	b.n	800b84e <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b820:	7cfb      	ldrb	r3, [r7, #19]
 800b822:	005b      	lsls	r3, r3, #1
 800b824:	461a      	mov	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	7f1b      	ldrb	r3, [r3, #28]
 800b82a:	4413      	add	r3, r2
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	4413      	add	r3, r2
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	4619      	mov	r1, r3
 800b834:	79fa      	ldrb	r2, [r7, #7]
 800b836:	7cfb      	ldrb	r3, [r7, #19]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	00db      	lsls	r3, r3, #3
 800b83c:	fa01 f303 	lsl.w	r3, r1, r3
 800b840:	461a      	mov	r2, r3
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	4313      	orrs	r3, r2
 800b846:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b848:	7cfb      	ldrb	r3, [r7, #19]
 800b84a:	3301      	adds	r3, #1
 800b84c:	74fb      	strb	r3, [r7, #19]
 800b84e:	7cfb      	ldrb	r3, [r7, #19]
 800b850:	2b03      	cmp	r3, #3
 800b852:	d9e5      	bls.n	800b820 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b854:	697b      	ldr	r3, [r7, #20]
}
 800b856:	4618      	mov	r0, r3
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	460b      	mov	r3, r1
 800b86e:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2118      	movs	r1, #24
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	4798      	blx	r3
 800b884:	4602      	mov	r2, r0
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b88a:	b292      	uxth	r2, r2
 800b88c:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b88e:	78fb      	ldrb	r3, [r7, #3]
 800b890:	2b0e      	cmp	r3, #14
 800b892:	f200 8099 	bhi.w	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b896:	a201      	add	r2, pc, #4	@ (adr r2, 800b89c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89c:	0800b8d9 	.word	0x0800b8d9
 800b8a0:	0800b8e9 	.word	0x0800b8e9
 800b8a4:	0800b8f9 	.word	0x0800b8f9
 800b8a8:	0800b909 	.word	0x0800b909
 800b8ac:	0800b919 	.word	0x0800b919
 800b8b0:	0800b929 	.word	0x0800b929
 800b8b4:	0800b939 	.word	0x0800b939
 800b8b8:	0800b949 	.word	0x0800b949
 800b8bc:	0800b959 	.word	0x0800b959
 800b8c0:	0800b969 	.word	0x0800b969
 800b8c4:	0800b979 	.word	0x0800b979
 800b8c8:	0800b989 	.word	0x0800b989
 800b8cc:	0800b999 	.word	0x0800b999
 800b8d0:	0800b9a9 	.word	0x0800b9a9
 800b8d4:	0800b9b9 	.word	0x0800b9b9
      state = pL6470_StatusRegister->HiZ;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e6:	e06f      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f6:	e067      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b902:	b2db      	uxtb	r3, r3
 800b904:	73fb      	strb	r3, [r7, #15]
      break;
 800b906:	e05f      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b912:	b2db      	uxtb	r3, r3
 800b914:	73fb      	strb	r3, [r7, #15]
      break;
 800b916:	e057      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b922:	b2db      	uxtb	r3, r3
 800b924:	73fb      	strb	r3, [r7, #15]
      break;
 800b926:	e04f      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800b932:	b2db      	uxtb	r3, r3
 800b934:	73fb      	strb	r3, [r7, #15]
      break;
 800b936:	e047      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b942:	b2db      	uxtb	r3, r3
 800b944:	73fb      	strb	r3, [r7, #15]
      break;
 800b946:	e03f      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b94c:	785b      	ldrb	r3, [r3, #1]
 800b94e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b952:	b2db      	uxtb	r3, r3
 800b954:	73fb      	strb	r3, [r7, #15]
      break;
 800b956:	e037      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b95c:	785b      	ldrb	r3, [r3, #1]
 800b95e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b962:	b2db      	uxtb	r3, r3
 800b964:	73fb      	strb	r3, [r7, #15]
      break;
 800b966:	e02f      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b972:	b2db      	uxtb	r3, r3
 800b974:	73fb      	strb	r3, [r7, #15]
      break;
 800b976:	e027      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b97c:	785b      	ldrb	r3, [r3, #1]
 800b97e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b982:	b2db      	uxtb	r3, r3
 800b984:	73fb      	strb	r3, [r7, #15]
      break;
 800b986:	e01f      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b992:	b2db      	uxtb	r3, r3
 800b994:	73fb      	strb	r3, [r7, #15]
      break;
 800b996:	e017      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b99c:	785b      	ldrb	r3, [r3, #1]
 800b99e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a6:	e00f      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ac:	785b      	ldrb	r3, [r3, #1]
 800b9ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b6:	e007      	b.n	800b9c8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9bc:	785b      	ldrb	r3, [r3, #1]
 800b9be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c6:	bf00      	nop
  return state;
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop

0800b9d4 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	2b18      	cmp	r3, #24
 800b9e4:	d809      	bhi.n	800b9fa <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a19      	ldr	r1, [r3, #32]
 800b9ea:	78fa      	ldrb	r2, [r7, #3]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	440b      	add	r3, r1
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	e000      	b.n	800b9fc <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]
 800ba16:	e01a      	b.n	800ba4e <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	011b      	lsls	r3, r3, #4
 800ba1c:	683a      	ldr	r2, [r7, #0]
 800ba1e:	4413      	add	r3, r2
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	4413      	add	r3, r2
 800ba38:	2200      	movs	r2, #0
 800ba3a:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	011b      	lsls	r3, r3, #4
 800ba40:	683a      	ldr	r2, [r7, #0]
 800ba42:	4413      	add	r3, r2
 800ba44:	2200      	movs	r2, #0
 800ba46:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	73fb      	strb	r3, [r7, #15]
 800ba4e:	7bfb      	ldrb	r3, [r7, #15]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d9e1      	bls.n	800ba18 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800ba62:	b480      	push	{r7}
 800ba64:	b085      	sub	sp, #20
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	60f8      	str	r0, [r7, #12]
 800ba6a:	60b9      	str	r1, [r7, #8]
 800ba6c:	603b      	str	r3, [r7, #0]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	7f1b      	ldrb	r3, [r3, #28]
 800ba76:	011b      	lsls	r3, r3, #4
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	79fa      	ldrb	r2, [r7, #7]
 800ba7e:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	7f1b      	ldrb	r3, [r3, #28]
 800ba84:	011b      	lsls	r3, r3, #4
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	4413      	add	r3, r2
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	7f1b      	ldrb	r3, [r3, #28]
 800ba92:	011b      	lsls	r3, r3, #4
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	4413      	add	r3, r2
 800ba98:	69ba      	ldr	r2, [r7, #24]
 800ba9a:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	7f1b      	ldrb	r3, [r3, #28]
 800baa0:	011b      	lsls	r3, r3, #4
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	4413      	add	r3, r2
 800baa6:	69fa      	ldr	r2, [r7, #28]
 800baa8:	60da      	str	r2, [r3, #12]
}
 800baaa:	bf00      	nop
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
	...

0800bab8 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bab8:	b590      	push	{r4, r7, lr}
 800baba:	b087      	sub	sp, #28
 800babc:	af02      	add	r7, sp, #8
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	603b      	str	r3, [r7, #0]
 800bac4:	4613      	mov	r3, r2
 800bac6:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800bac8:	4b10      	ldr	r3, [pc, #64]	@ (800bb0c <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800bad0:	4b0e      	ldr	r3, [pc, #56]	@ (800bb0c <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bad2:	2201      	movs	r2, #1
 800bad4:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68b9      	ldr	r1, [r7, #8]
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800baee:	681c      	ldr	r4, [r3, #0]
 800baf0:	79fa      	ldrb	r2, [r7, #7]
 800baf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	68b9      	ldr	r1, [r7, #8]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	47a0      	blx	r4
}
 800bb02:	bf00      	nop
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd90      	pop	{r4, r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	2000020d 	.word	0x2000020d

0800bb10 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bb20:	2300      	movs	r3, #0
 800bb22:	75bb      	strb	r3, [r7, #22]
 800bb24:	e013      	b.n	800bb4e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bb26:	2300      	movs	r3, #0
 800bb28:	75fb      	strb	r3, [r7, #23]
 800bb2a:	e00a      	b.n	800bb42 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800bb2c:	7d7b      	ldrb	r3, [r7, #21]
 800bb2e:	1c5a      	adds	r2, r3, #1
 800bb30:	757a      	strb	r2, [r7, #21]
 800bb32:	461a      	mov	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4413      	add	r3, r2
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	75fb      	strb	r3, [r7, #23]
 800bb42:	7dfb      	ldrb	r3, [r7, #23]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d9f1      	bls.n	800bb2c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bb48:	7dbb      	ldrb	r3, [r7, #22]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	75bb      	strb	r3, [r7, #22]
 800bb4e:	7dbb      	ldrb	r3, [r7, #22]
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d9e8      	bls.n	800bb26 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bb54:	2300      	movs	r3, #0
 800bb56:	75fb      	strb	r3, [r7, #23]
 800bb58:	e1f1      	b.n	800bf3e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	011b      	lsls	r3, r3, #4
 800bb62:	68b9      	ldr	r1, [r7, #8]
 800bb64:	440b      	add	r3, r1
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	1a5b      	subs	r3, r3, r1
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	441a      	add	r2, r3
 800bb74:	7dfb      	ldrb	r3, [r7, #23]
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	440b      	add	r3, r1
 800bb7a:	7b12      	ldrb	r2, [r2, #12]
 800bb7c:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
 800bb80:	011b      	lsls	r3, r3, #4
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	4413      	add	r3, r2
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	2b12      	cmp	r3, #18
 800bb8a:	f200 81d5 	bhi.w	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800bb8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb94 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb94:	0800bf39 	.word	0x0800bf39
 800bb98:	0800bbe1 	.word	0x0800bbe1
 800bb9c:	0800bc69 	.word	0x0800bc69
 800bba0:	0800bc99 	.word	0x0800bc99
 800bba4:	0800bd01 	.word	0x0800bd01
 800bba8:	0800bd2f 	.word	0x0800bd2f
 800bbac:	0800bd97 	.word	0x0800bd97
 800bbb0:	0800bdd3 	.word	0x0800bdd3
 800bbb4:	0800be3b 	.word	0x0800be3b
 800bbb8:	0800bed7 	.word	0x0800bed7
 800bbbc:	0800bf39 	.word	0x0800bf39
 800bbc0:	0800bf39 	.word	0x0800bf39
 800bbc4:	0800bf39 	.word	0x0800bf39
 800bbc8:	0800bf39 	.word	0x0800bf39
 800bbcc:	0800bf39 	.word	0x0800bf39
 800bbd0:	0800bf39 	.word	0x0800bf39
 800bbd4:	0800bf39 	.word	0x0800bf39
 800bbd8:	0800bf39 	.word	0x0800bf39
 800bbdc:	0800bf39 	.word	0x0800bf39
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	7819      	ldrb	r1, [r3, #0]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6a18      	ldr	r0, [r3, #32]
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	011b      	lsls	r3, r3, #4
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4403      	add	r3, r0
 800bc00:	781a      	ldrb	r2, [r3, #0]
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	4403      	add	r3, r0
 800bc08:	430a      	orrs	r2, r1
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6a19      	ldr	r1, [r3, #32]
 800bc12:	7dfb      	ldrb	r3, [r7, #23]
 800bc14:	011b      	lsls	r3, r3, #4
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	4413      	add	r3, r2
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	440b      	add	r3, r1
 800bc26:	7b9b      	ldrb	r3, [r3, #14]
 800bc28:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	75bb      	strb	r3, [r7, #22]
 800bc2e:	e016      	b.n	800bc5e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
 800bc32:	011b      	lsls	r3, r3, #4
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	4413      	add	r3, r2
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	7d39      	ldrb	r1, [r7, #20]
 800bc3c:	7dbb      	ldrb	r3, [r7, #22]
 800bc3e:	1acb      	subs	r3, r1, r3
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	fa22 f103 	lsr.w	r1, r2, r3
 800bc46:	7dbb      	ldrb	r3, [r7, #22]
 800bc48:	005a      	lsls	r2, r3, #1
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	461a      	mov	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4413      	add	r3, r2
 800bc54:	b2ca      	uxtb	r2, r1
 800bc56:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bc58:	7dbb      	ldrb	r3, [r7, #22]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	75bb      	strb	r3, [r7, #22]
 800bc5e:	7d3a      	ldrb	r2, [r7, #20]
 800bc60:	7dbb      	ldrb	r3, [r7, #22]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d2e4      	bcs.n	800bc30 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800bc66:	e167      	b.n	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	7819      	ldrb	r1, [r3, #0]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6a18      	ldr	r0, [r3, #32]
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	011b      	lsls	r3, r3, #4
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4403      	add	r3, r0
 800bc88:	781a      	ldrb	r2, [r3, #0]
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	4403      	add	r3, r0
 800bc90:	430a      	orrs	r2, r1
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	701a      	strb	r2, [r3, #0]
      break;
 800bc96:	e14f      	b.n	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bc98:	7dfb      	ldrb	r3, [r7, #23]
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	7819      	ldrb	r1, [r3, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	011b      	lsls	r3, r3, #4
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	4413      	add	r3, r2
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	4413      	add	r3, r2
 800bcb4:	4403      	add	r3, r0
 800bcb6:	7a1a      	ldrb	r2, [r3, #8]
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	4403      	add	r3, r0
 800bcbe:	430a      	orrs	r2, r1
 800bcc0:	b2d2      	uxtb	r2, r2
 800bcc2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	75bb      	strb	r3, [r7, #22]
 800bcc8:	e016      	b.n	800bcf8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	011b      	lsls	r3, r3, #4
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	7dbb      	ldrb	r3, [r7, #22]
 800bcd6:	f1c3 0303 	rsb	r3, r3, #3
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	fa22 f103 	lsr.w	r1, r2, r3
 800bce0:	7dbb      	ldrb	r3, [r7, #22]
 800bce2:	005a      	lsls	r2, r3, #1
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
 800bce6:	4413      	add	r3, r2
 800bce8:	461a      	mov	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4413      	add	r3, r2
 800bcee:	b2ca      	uxtb	r2, r1
 800bcf0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bcf2:	7dbb      	ldrb	r3, [r7, #22]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	75bb      	strb	r3, [r7, #22]
 800bcf8:	7dbb      	ldrb	r3, [r7, #22]
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d9e5      	bls.n	800bcca <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800bcfe:	e11b      	b.n	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	4413      	add	r3, r2
 800bd06:	7819      	ldrb	r1, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	011b      	lsls	r3, r3, #4
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	4413      	add	r3, r2
 800bd14:	685a      	ldr	r2, [r3, #4]
 800bd16:	4613      	mov	r3, r2
 800bd18:	00db      	lsls	r3, r3, #3
 800bd1a:	4413      	add	r3, r2
 800bd1c:	4403      	add	r3, r0
 800bd1e:	7a1a      	ldrb	r2, [r3, #8]
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	4403      	add	r3, r0
 800bd26:	430a      	orrs	r2, r1
 800bd28:	b2d2      	uxtb	r2, r2
 800bd2a:	701a      	strb	r2, [r3, #0]
      break;
 800bd2c:	e104      	b.n	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	4413      	add	r3, r2
 800bd34:	7819      	ldrb	r1, [r3, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
 800bd3c:	011b      	lsls	r3, r3, #4
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	4413      	add	r3, r2
 800bd42:	685a      	ldr	r2, [r3, #4]
 800bd44:	4613      	mov	r3, r2
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	4413      	add	r3, r2
 800bd4a:	4403      	add	r3, r0
 800bd4c:	7a1a      	ldrb	r2, [r3, #8]
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	4403      	add	r3, r0
 800bd54:	430a      	orrs	r2, r1
 800bd56:	b2d2      	uxtb	r2, r2
 800bd58:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	75bb      	strb	r3, [r7, #22]
 800bd5e:	e016      	b.n	800bd8e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bd60:	7dfb      	ldrb	r3, [r7, #23]
 800bd62:	011b      	lsls	r3, r3, #4
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	4413      	add	r3, r2
 800bd68:	689a      	ldr	r2, [r3, #8]
 800bd6a:	7dbb      	ldrb	r3, [r7, #22]
 800bd6c:	f1c3 0303 	rsb	r3, r3, #3
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	fa22 f103 	lsr.w	r1, r2, r3
 800bd76:	7dbb      	ldrb	r3, [r7, #22]
 800bd78:	005a      	lsls	r2, r3, #1
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	461a      	mov	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4413      	add	r3, r2
 800bd84:	b2ca      	uxtb	r2, r1
 800bd86:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bd88:	7dbb      	ldrb	r3, [r7, #22]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	75bb      	strb	r3, [r7, #22]
 800bd8e:	7dbb      	ldrb	r3, [r7, #22]
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d9e5      	bls.n	800bd60 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800bd94:	e0d0      	b.n	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bd96:	2301      	movs	r3, #1
 800bd98:	75bb      	strb	r3, [r7, #22]
 800bd9a:	e016      	b.n	800bdca <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	011b      	lsls	r3, r3, #4
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	4413      	add	r3, r2
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	7dbb      	ldrb	r3, [r7, #22]
 800bda8:	f1c3 0303 	rsb	r3, r3, #3
 800bdac:	00db      	lsls	r3, r3, #3
 800bdae:	fa22 f103 	lsr.w	r1, r2, r3
 800bdb2:	7dbb      	ldrb	r3, [r7, #22]
 800bdb4:	005a      	lsls	r2, r3, #1
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	4413      	add	r3, r2
 800bdba:	461a      	mov	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	b2ca      	uxtb	r2, r1
 800bdc2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bdc4:	7dbb      	ldrb	r3, [r7, #22]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	75bb      	strb	r3, [r7, #22]
 800bdca:	7dbb      	ldrb	r3, [r7, #22]
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d9e5      	bls.n	800bd9c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800bdd0:	e0b2      	b.n	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bdd2:	7dfb      	ldrb	r3, [r7, #23]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	7819      	ldrb	r1, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
 800bde0:	011b      	lsls	r3, r3, #4
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	4413      	add	r3, r2
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	00db      	lsls	r3, r3, #3
 800bdec:	4413      	add	r3, r2
 800bdee:	4403      	add	r3, r0
 800bdf0:	7a1a      	ldrb	r2, [r3, #8]
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4403      	add	r3, r0
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	b2d2      	uxtb	r2, r2
 800bdfc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bdfe:	2301      	movs	r3, #1
 800be00:	75bb      	strb	r3, [r7, #22]
 800be02:	e016      	b.n	800be32 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800be04:	7dfb      	ldrb	r3, [r7, #23]
 800be06:	011b      	lsls	r3, r3, #4
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	4413      	add	r3, r2
 800be0c:	689a      	ldr	r2, [r3, #8]
 800be0e:	7dbb      	ldrb	r3, [r7, #22]
 800be10:	f1c3 0303 	rsb	r3, r3, #3
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	fa22 f103 	lsr.w	r1, r2, r3
 800be1a:	7dbb      	ldrb	r3, [r7, #22]
 800be1c:	005a      	lsls	r2, r3, #1
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
 800be20:	4413      	add	r3, r2
 800be22:	461a      	mov	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4413      	add	r3, r2
 800be28:	b2ca      	uxtb	r2, r1
 800be2a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be2c:	7dbb      	ldrb	r3, [r7, #22]
 800be2e:	3301      	adds	r3, #1
 800be30:	75bb      	strb	r3, [r7, #22]
 800be32:	7dbb      	ldrb	r3, [r7, #22]
 800be34:	2b03      	cmp	r3, #3
 800be36:	d9e5      	bls.n	800be04 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800be38:	e07e      	b.n	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	4413      	add	r3, r2
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	b259      	sxtb	r1, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	011b      	lsls	r3, r3, #4
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	4413      	add	r3, r2
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	4613      	mov	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4413      	add	r3, r2
 800be58:	4403      	add	r3, r0
 800be5a:	791b      	ldrb	r3, [r3, #4]
 800be5c:	00db      	lsls	r3, r3, #3
 800be5e:	b25b      	sxtb	r3, r3
 800be60:	430b      	orrs	r3, r1
 800be62:	b259      	sxtb	r1, r3
 800be64:	7dfb      	ldrb	r3, [r7, #23]
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	4413      	add	r3, r2
 800be6a:	b2ca      	uxtb	r2, r1
 800be6c:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	4413      	add	r3, r2
 800be74:	7819      	ldrb	r1, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	011b      	lsls	r3, r3, #4
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	4413      	add	r3, r2
 800be82:	689a      	ldr	r2, [r3, #8]
 800be84:	4613      	mov	r3, r2
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	4413      	add	r3, r2
 800be8a:	4403      	add	r3, r0
 800be8c:	7a1a      	ldrb	r2, [r3, #8]
 800be8e:	7dfb      	ldrb	r3, [r7, #23]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	4403      	add	r3, r0
 800be94:	430a      	orrs	r2, r1
 800be96:	b2d2      	uxtb	r2, r2
 800be98:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be9a:	2301      	movs	r3, #1
 800be9c:	75bb      	strb	r3, [r7, #22]
 800be9e:	e016      	b.n	800bece <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
 800bea2:	011b      	lsls	r3, r3, #4
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	4413      	add	r3, r2
 800bea8:	68da      	ldr	r2, [r3, #12]
 800beaa:	7dbb      	ldrb	r3, [r7, #22]
 800beac:	f1c3 0303 	rsb	r3, r3, #3
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	fa22 f103 	lsr.w	r1, r2, r3
 800beb6:	7dbb      	ldrb	r3, [r7, #22]
 800beb8:	005a      	lsls	r2, r3, #1
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	4413      	add	r3, r2
 800bebe:	461a      	mov	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4413      	add	r3, r2
 800bec4:	b2ca      	uxtb	r2, r1
 800bec6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bec8:	7dbb      	ldrb	r3, [r7, #22]
 800beca:	3301      	adds	r3, #1
 800becc:	75bb      	strb	r3, [r7, #22]
 800bece:	7dbb      	ldrb	r3, [r7, #22]
 800bed0:	2b03      	cmp	r3, #3
 800bed2:	d9e5      	bls.n	800bea0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800bed4:	e030      	b.n	800bf38 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	4413      	add	r3, r2
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	b259      	sxtb	r1, r3
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	011b      	lsls	r3, r3, #4
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	4413      	add	r3, r2
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	4613      	mov	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4413      	add	r3, r2
 800bef4:	4403      	add	r3, r0
 800bef6:	791b      	ldrb	r3, [r3, #4]
 800bef8:	00db      	lsls	r3, r3, #3
 800befa:	b25b      	sxtb	r3, r3
 800befc:	430b      	orrs	r3, r1
 800befe:	b259      	sxtb	r1, r3
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	4413      	add	r3, r2
 800bf06:	b2ca      	uxtb	r2, r1
 800bf08:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	4413      	add	r3, r2
 800bf10:	7819      	ldrb	r1, [r3, #0]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	011b      	lsls	r3, r3, #4
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	689a      	ldr	r2, [r3, #8]
 800bf20:	4613      	mov	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	4413      	add	r3, r2
 800bf26:	4403      	add	r3, r0
 800bf28:	7a1a      	ldrb	r2, [r3, #8]
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	4403      	add	r3, r0
 800bf30:	430a      	orrs	r2, r1
 800bf32:	b2d2      	uxtb	r2, r2
 800bf34:	701a      	strb	r2, [r3, #0]
      break;
 800bf36:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	75fb      	strb	r3, [r7, #23]
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	f67f ae0a 	bls.w	800bb5a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800bf46:	bf00      	nop
 800bf48:	bf00      	nop
 800bf4a:	371c      	adds	r7, #28
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800bf60:	edd7 7a00 	vldr	s15, [r7]
 800bf64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6c:	db1e      	blt.n	800bfac <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800bf6e:	edd7 7a00 	vldr	s15, [r7]
 800bf72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf76:	ee17 2a90 	vmov	r2, s15
 800bf7a:	edd7 7a00 	vldr	s15, [r7]
 800bf7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf86:	ed97 7a00 	vldr	s14, [r7]
 800bf8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf8e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bf92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9a:	bf4c      	ite	mi
 800bf9c:	2301      	movmi	r3, #1
 800bf9e:	2300      	movpl	r3, #0
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	f083 0301 	eor.w	r3, r3, #1
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	4413      	add	r3, r2
 800bfaa:	e01a      	b.n	800bfe2 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800bfac:	edd7 7a00 	vldr	s15, [r7]
 800bfb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfb4:	ee17 2a90 	vmov	r2, s15
 800bfb8:	edd7 7a00 	vldr	s15, [r7]
 800bfbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfc4:	ed97 7a00 	vldr	s14, [r7]
 800bfc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfcc:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800bfd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd8:	d501      	bpl.n	800bfde <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e000      	b.n	800bfe0 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	1ad3      	subs	r3, r2, r3
    }
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b086      	sub	sp, #24
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	60f8      	str	r0, [r7, #12]
 800bff6:	60b9      	str	r1, [r7, #8]
 800bff8:	4613      	mov	r3, r2
 800bffa:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6918      	ldr	r0, [r3, #16]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	8a9b      	ldrh	r3, [r3, #20]
 800c004:	2200      	movs	r2, #0
 800c006:	4619      	mov	r1, r3
 800c008:	f001 ff20 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6998      	ldr	r0, [r3, #24]
 800c010:	88fa      	ldrh	r2, [r7, #6]
 800c012:	2364      	movs	r3, #100	@ 0x64
 800c014:	68b9      	ldr	r1, [r7, #8]
 800c016:	f002 ff48 	bl	800eeaa <HAL_SPI_Receive>
 800c01a:	4603      	mov	r3, r0
 800c01c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6918      	ldr	r0, [r3, #16]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	8a9b      	ldrh	r3, [r3, #20]
 800c026:	2201      	movs	r2, #1
 800c028:	4619      	mov	r1, r3
 800c02a:	f001 ff0f 	bl	800de4c <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e000      	b.n	800c03a <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c038:	2300      	movs	r3, #0
    }
 800c03a:	4618      	mov	r0, r3
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c042:	b580      	push	{r7, lr}
 800c044:	b086      	sub	sp, #24
 800c046:	af00      	add	r7, sp, #0
 800c048:	60f8      	str	r0, [r7, #12]
 800c04a:	60b9      	str	r1, [r7, #8]
 800c04c:	4613      	mov	r3, r2
 800c04e:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6918      	ldr	r0, [r3, #16]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	8a9b      	ldrh	r3, [r3, #20]
 800c058:	2200      	movs	r2, #0
 800c05a:	4619      	mov	r1, r3
 800c05c:	f001 fef6 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6998      	ldr	r0, [r3, #24]
 800c064:	88fa      	ldrh	r2, [r7, #6]
 800c066:	2364      	movs	r3, #100	@ 0x64
 800c068:	68b9      	ldr	r1, [r7, #8]
 800c06a:	f002 fde2 	bl	800ec32 <HAL_SPI_Transmit>
 800c06e:	4603      	mov	r3, r0
 800c070:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6918      	ldr	r0, [r3, #16]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8a9b      	ldrh	r3, [r3, #20]
 800c07a:	2201      	movs	r2, #1
 800c07c:	4619      	mov	r1, r3
 800c07e:	f001 fee5 	bl	800de4c <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e000      	b.n	800c08e <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c08c:	2300      	movs	r3, #0
    }
 800c08e:	4618      	mov	r0, r3
 800c090:	3718      	adds	r7, #24
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c096:	b580      	push	{r7, lr}
 800c098:	b088      	sub	sp, #32
 800c09a:	af02      	add	r7, sp, #8
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	607a      	str	r2, [r7, #4]
 800c0a2:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6918      	ldr	r0, [r3, #16]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	8a9b      	ldrh	r3, [r3, #20]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	f001 fecc 	bl	800de4c <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6998      	ldr	r0, [r3, #24]
 800c0b8:	887b      	ldrh	r3, [r7, #2]
 800c0ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c0be:	9200      	str	r2, [sp, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	f003 f802 	bl	800f0cc <HAL_SPI_TransmitReceive>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d009      	beq.n	800c0e6 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6918      	ldr	r0, [r3, #16]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	8a9b      	ldrh	r3, [r3, #20]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	4619      	mov	r1, r3
 800c0de:	f001 feb5 	bl	800de4c <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e008      	b.n	800c0f8 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6918      	ldr	r0, [r3, #16]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	8a9b      	ldrh	r3, [r3, #20]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	f001 feab 	bl	800de4c <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c0f6:	2300      	movs	r3, #0
    }
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c100:	b590      	push	{r4, r7, lr}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c116:	681c      	ldr	r4, [r3, #0]
 800c118:	887b      	ldrh	r3, [r7, #2]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	47a0      	blx	r4
    }
 800c122:	bf00      	nop
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	bd90      	pop	{r4, r7, pc}
	...

0800c12c <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	4a04      	ldr	r2, [pc, #16]	@ (800c148 <_ZN13abstractL6470C1Ev+0x1c>)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	601a      	str	r2, [r3, #0]
{

}
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	08015ddc 	.word	0x08015ddc

0800c14c <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	4a04      	ldr	r2, [pc, #16]	@ (800c168 <_ZN13abstractL6470D1Ev+0x1c>)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	601a      	str	r2, [r3, #0]
{

}
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4618      	mov	r0, r3
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	08015ddc 	.word	0x08015ddc

0800c16c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800c16c:	b5b0      	push	{r4, r5, r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800c172:	f001 fa9d 	bl	800d6b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800c176:	f000 f869 	bl	800c24c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800c17a:	f000 fc35 	bl	800c9e8 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800c17e:	f000 fbd7 	bl	800c930 <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 800c182:	f000 fa05 	bl	800c590 <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 800c186:	f000 f8e3 	bl	800c350 <_ZL12MX_SPI1_Initv>
	MX_SPI2_Init();
 800c18a:	f000 f91d 	bl	800c3c8 <_ZL12MX_SPI2_Initv>
	MX_TIM1_Init();
 800c18e:	f000 f957 	bl	800c440 <_ZL12MX_TIM1_Initv>
	MX_TIM4_Init();
 800c192:	f000 fa8d 	bl	800c6b0 <_ZL12MX_TIM4_Initv>
	MX_TIM8_Init();
 800c196:	f000 fb33 	bl	800c800 <_ZL12MX_TIM8_Initv>
	MX_USART3_UART_Init();
 800c19a:	f000 fbf7 	bl	800c98c <_ZL19MX_USART3_UART_Initv>
	MX_TIM6_Init();
 800c19e:	f000 faef 	bl	800c780 <_ZL12MX_TIM6_Initv>
	/* USER CODE BEGIN 2 */

	//Start Timer2 interrupt (every 20 ms here)
	HAL_TIM_Base_Start_IT(&htim2);
 800c1a2:	4821      	ldr	r0, [pc, #132]	@ (800c228 <main+0xbc>)
 800c1a4:	f003 fbc6 	bl	800f934 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	4920      	ldr	r1, [pc, #128]	@ (800c22c <main+0xc0>)
 800c1ac:	4820      	ldr	r0, [pc, #128]	@ (800c230 <main+0xc4>)
 800c1ae:	f004 fb54 	bl	801085a <HAL_UART_Receive_IT>


	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
			reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
			reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port,
			ssel2_Pin);
 800c1b2:	f44f 70bc 	mov.w	r0, #376	@ 0x178
 800c1b6:	f005 fe40 	bl	8011e3a <_Znwj>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	461c      	mov	r4, r3
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c1be:	2501      	movs	r5, #1
			ssel2_Pin);
 800c1c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1c4:	9305      	str	r3, [sp, #20]
 800c1c6:	4b1b      	ldr	r3, [pc, #108]	@ (800c234 <main+0xc8>)
 800c1c8:	9304      	str	r3, [sp, #16]
 800c1ca:	2310      	movs	r3, #16
 800c1cc:	9303      	str	r3, [sp, #12]
 800c1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c238 <main+0xcc>)
 800c1d0:	9302      	str	r3, [sp, #8]
 800c1d2:	2310      	movs	r3, #16
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	4b17      	ldr	r3, [pc, #92]	@ (800c234 <main+0xc8>)
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	2320      	movs	r3, #32
 800c1dc:	4a16      	ldr	r2, [pc, #88]	@ (800c238 <main+0xcc>)
 800c1de:	4917      	ldr	r1, [pc, #92]	@ (800c23c <main+0xd0>)
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f7f6 f80b 	bl	80021fc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c1e6:	4b16      	ldr	r3, [pc, #88]	@ (800c240 <main+0xd4>)
 800c1e8:	601c      	str	r4, [r3, #0]

	moteurs->set_microstepping_mode(step_mode_t::STEP_MODE_HALF);
 800c1ea:	4b15      	ldr	r3, [pc, #84]	@ (800c240 <main+0xd4>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7f6 fa61 	bl	80026b8 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
	moteurs->set_max_speed_moteurs(W_MAX);
 800c1f6:	4b12      	ldr	r3, [pc, #72]	@ (800c240 <main+0xd4>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7f6 fad7 	bl	80027b2 <_ZN11BlocMoteurs21set_max_speed_moteursEf>





	movement_allowed = true;// TODO: false not true !!!
 800c204:	4b0f      	ldr	r3, [pc, #60]	@ (800c244 <main+0xd8>)
 800c206:	2201      	movs	r2, #1
 800c208:	701a      	strb	r2, [r3, #0]
	robot_started = true; // TODO: false not true !!!
 800c20a:	4b0f      	ldr	r3, [pc, #60]	@ (800c248 <main+0xdc>)
 800c20c:	2201      	movs	r2, #1
 800c20e:	701a      	strb	r2, [r3, #0]

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800c210:	bf00      	nop
 800c212:	e7fd      	b.n	800c210 <main+0xa4>
	moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port,
 800c214:	2d00      	cmp	r5, #0
 800c216:	d004      	beq.n	800c222 <main+0xb6>
			ssel2_Pin);
 800c218:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 800c21c:	4620      	mov	r0, r4
 800c21e:	f005 fab1 	bl	8011784 <_ZdlPvj>
 800c222:	f005 fab1 	bl	8011788 <__cxa_end_cleanup>
 800c226:	bf00      	nop
 800c228:	200003a4 	.word	0x200003a4
 800c22c:	20000553 	.word	0x20000553
 800c230:	200004c4 	.word	0x200004c4
 800c234:	40020000 	.word	0x40020000
 800c238:	40020400 	.word	0x40020400
 800c23c:	200002ac 	.word	0x200002ac
 800c240:	2000054c 	.word	0x2000054c
 800c244:	20000551 	.word	0x20000551
 800c248:	20000552 	.word	0x20000552

0800c24c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b094      	sub	sp, #80	@ 0x50
 800c250:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800c252:	f107 031c 	add.w	r3, r7, #28
 800c256:	2234      	movs	r2, #52	@ 0x34
 800c258:	2100      	movs	r1, #0
 800c25a:	4618      	mov	r0, r3
 800c25c:	f006 fe67 	bl	8012f2e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	2200      	movs	r2, #0
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	605a      	str	r2, [r3, #4]
 800c26a:	609a      	str	r2, [r3, #8]
 800c26c:	60da      	str	r2, [r3, #12]
 800c26e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800c270:	2300      	movs	r3, #0
 800c272:	607b      	str	r3, [r7, #4]
 800c274:	4b34      	ldr	r3, [pc, #208]	@ (800c348 <_Z18SystemClock_Configv+0xfc>)
 800c276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c278:	4a33      	ldr	r2, [pc, #204]	@ (800c348 <_Z18SystemClock_Configv+0xfc>)
 800c27a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c27e:	6413      	str	r3, [r2, #64]	@ 0x40
 800c280:	4b31      	ldr	r3, [pc, #196]	@ (800c348 <_Z18SystemClock_Configv+0xfc>)
 800c282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c288:	607b      	str	r3, [r7, #4]
 800c28a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c28c:	2300      	movs	r3, #0
 800c28e:	603b      	str	r3, [r7, #0]
 800c290:	4b2e      	ldr	r3, [pc, #184]	@ (800c34c <_Z18SystemClock_Configv+0x100>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a2d      	ldr	r2, [pc, #180]	@ (800c34c <_Z18SystemClock_Configv+0x100>)
 800c296:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	4b2b      	ldr	r3, [pc, #172]	@ (800c34c <_Z18SystemClock_Configv+0x100>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c2a4:	603b      	str	r3, [r7, #0]
 800c2a6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c2b0:	2310      	movs	r3, #16
 800c2b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800c2bc:	2308      	movs	r3, #8
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800c2c0:	23b4      	movs	r3, #180	@ 0xb4
 800c2c2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c2d0:	f107 031c 	add.w	r3, r7, #28
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f002 f985 	bl	800e5e4 <HAL_RCC_OscConfig>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bf14      	ite	ne
 800c2e0:	2301      	movne	r3, #1
 800c2e2:	2300      	moveq	r3, #0
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 800c2ea:	f000 fdb5 	bl	800ce58 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800c2ee:	f001 fddf 	bl	800deb0 <HAL_PWREx_EnableOverDrive>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bf14      	ite	ne
 800c2f8:	2301      	movne	r3, #1
 800c2fa:	2300      	moveq	r3, #0
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d001      	beq.n	800c306 <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800c302:	f000 fda9 	bl	800ce58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800c306:	230f      	movs	r3, #15
 800c308:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c30a:	2302      	movs	r3, #2
 800c30c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c30e:	2300      	movs	r3, #0
 800c310:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c312:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c316:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800c318:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c31c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800c31e:	f107 0308 	add.w	r3, r7, #8
 800c322:	2105      	movs	r1, #5
 800c324:	4618      	mov	r0, r3
 800c326:	f001 fe13 	bl	800df50 <HAL_RCC_ClockConfig>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bf14      	ite	ne
 800c330:	2301      	movne	r3, #1
 800c332:	2300      	moveq	r3, #0
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800c33a:	f000 fd8d 	bl	800ce58 <Error_Handler>
	}
}
 800c33e:	bf00      	nop
 800c340:	3750      	adds	r7, #80	@ 0x50
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	40023800 	.word	0x40023800
 800c34c:	40007000 	.word	0x40007000

0800c350 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800c350:	b580      	push	{r7, lr}
 800c352:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800c354:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c356:	4a1b      	ldr	r2, [pc, #108]	@ (800c3c4 <_ZL12MX_SPI1_Initv+0x74>)
 800c358:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800c35a:	4b19      	ldr	r3, [pc, #100]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c35c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c360:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c362:	4b17      	ldr	r3, [pc, #92]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c364:	2200      	movs	r2, #0
 800c366:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c368:	4b15      	ldr	r3, [pc, #84]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c36e:	4b14      	ldr	r3, [pc, #80]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c370:	2202      	movs	r2, #2
 800c372:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c374:	4b12      	ldr	r3, [pc, #72]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c376:	2201      	movs	r2, #1
 800c378:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800c37a:	4b11      	ldr	r3, [pc, #68]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c37c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c380:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c382:	4b0f      	ldr	r3, [pc, #60]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c384:	2210      	movs	r2, #16
 800c386:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c388:	4b0d      	ldr	r3, [pc, #52]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c38e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c390:	2200      	movs	r2, #0
 800c392:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c394:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c396:	2200      	movs	r2, #0
 800c398:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800c39a:	4b09      	ldr	r3, [pc, #36]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c39c:	220a      	movs	r2, #10
 800c39e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800c3a0:	4807      	ldr	r0, [pc, #28]	@ (800c3c0 <_ZL12MX_SPI1_Initv+0x70>)
 800c3a2:	f002 fbbd 	bl	800eb20 <HAL_SPI_Init>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	bf14      	ite	ne
 800c3ac:	2301      	movne	r3, #1
 800c3ae:	2300      	moveq	r3, #0
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800c3b6:	f000 fd4f 	bl	800ce58 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800c3ba:	bf00      	nop
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	200002ac 	.word	0x200002ac
 800c3c4:	40013000 	.word	0x40013000

0800c3c8 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800c3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c3ce:	4a1b      	ldr	r2, [pc, #108]	@ (800c43c <_ZL12MX_SPI2_Initv+0x74>)
 800c3d0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800c3d2:	4b19      	ldr	r3, [pc, #100]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c3d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c3d8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c3da:	4b17      	ldr	r3, [pc, #92]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c3e0:	4b15      	ldr	r3, [pc, #84]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c3e6:	4b14      	ldr	r3, [pc, #80]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c3ec:	4b12      	ldr	r3, [pc, #72]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800c3f2:	4b11      	ldr	r3, [pc, #68]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c3f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3f8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c400:	4b0d      	ldr	r3, [pc, #52]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c402:	2200      	movs	r2, #0
 800c404:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c406:	4b0c      	ldr	r3, [pc, #48]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c408:	2200      	movs	r2, #0
 800c40a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c40c:	4b0a      	ldr	r3, [pc, #40]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c40e:	2200      	movs	r2, #0
 800c410:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 800c412:	4b09      	ldr	r3, [pc, #36]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c414:	220a      	movs	r2, #10
 800c416:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800c418:	4807      	ldr	r0, [pc, #28]	@ (800c438 <_ZL12MX_SPI2_Initv+0x70>)
 800c41a:	f002 fb81 	bl	800eb20 <HAL_SPI_Init>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	bf14      	ite	ne
 800c424:	2301      	movne	r3, #1
 800c426:	2300      	moveq	r3, #0
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 800c42e:	f000 fd13 	bl	800ce58 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800c432:	bf00      	nop
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20000304 	.word	0x20000304
 800c43c:	40003800 	.word	0x40003800

0800c440 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800c440:	b580      	push	{r7, lr}
 800c442:	b092      	sub	sp, #72	@ 0x48
 800c444:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c446:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c454:	2200      	movs	r2, #0
 800c456:	601a      	str	r2, [r3, #0]
 800c458:	605a      	str	r2, [r3, #4]
 800c45a:	609a      	str	r2, [r3, #8]
 800c45c:	60da      	str	r2, [r3, #12]
 800c45e:	611a      	str	r2, [r3, #16]
 800c460:	615a      	str	r2, [r3, #20]
 800c462:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800c464:	1d3b      	adds	r3, r7, #4
 800c466:	2220      	movs	r2, #32
 800c468:	2100      	movs	r1, #0
 800c46a:	4618      	mov	r0, r3
 800c46c:	f006 fd5f 	bl	8012f2e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800c470:	4b45      	ldr	r3, [pc, #276]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c472:	4a46      	ldr	r2, [pc, #280]	@ (800c58c <_ZL12MX_TIM1_Initv+0x14c>)
 800c474:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800c476:	4b44      	ldr	r3, [pc, #272]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c478:	2200      	movs	r2, #0
 800c47a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c47c:	4b42      	ldr	r3, [pc, #264]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c47e:	2200      	movs	r2, #0
 800c480:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800c482:	4b41      	ldr	r3, [pc, #260]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c488:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c48a:	4b3f      	ldr	r3, [pc, #252]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800c490:	4b3d      	ldr	r3, [pc, #244]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c492:	2200      	movs	r2, #0
 800c494:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c496:	4b3c      	ldr	r3, [pc, #240]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c498:	2200      	movs	r2, #0
 800c49a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800c49c:	483a      	ldr	r0, [pc, #232]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c49e:	f003 fab9 	bl	800fa14 <HAL_TIM_PWM_Init>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bf14      	ite	ne
 800c4a8:	2301      	movne	r3, #1
 800c4aa:	2300      	moveq	r3, #0
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800c4b2:	f000 fcd1 	bl	800ce58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800c4be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4830      	ldr	r0, [pc, #192]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c4c6:	f004 f899 	bl	80105fc <HAL_TIMEx_MasterConfigSynchronization>
 800c4ca:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	bf14      	ite	ne
 800c4d0:	2301      	movne	r3, #1
 800c4d2:	2300      	moveq	r3, #0
 800c4d4:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 800c4da:	f000 fcbd 	bl	800ce58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c4de:	2360      	movs	r3, #96	@ 0x60
 800c4e0:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800c4fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4fe:	2204      	movs	r2, #4
 800c500:	4619      	mov	r1, r3
 800c502:	4821      	ldr	r0, [pc, #132]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c504:	f003 fbde 	bl	800fcc4 <HAL_TIM_PWM_ConfigChannel>
 800c508:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	bf14      	ite	ne
 800c50e:	2301      	movne	r3, #1
 800c510:	2300      	moveq	r3, #0
 800c512:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 800c518:	f000 fc9e 	bl	800ce58 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800c51c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c520:	2208      	movs	r2, #8
 800c522:	4619      	mov	r1, r3
 800c524:	4818      	ldr	r0, [pc, #96]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c526:	f003 fbcd 	bl	800fcc4 <HAL_TIM_PWM_ConfigChannel>
 800c52a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bf14      	ite	ne
 800c530:	2301      	movne	r3, #1
 800c532:	2300      	moveq	r3, #0
 800c534:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <_ZL12MX_TIM1_Initv+0xfe>
		Error_Handler();
 800c53a:	f000 fc8d 	bl	800ce58 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c53e:	2300      	movs	r3, #0
 800c540:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c542:	2300      	movs	r3, #0
 800c544:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c546:	2300      	movs	r3, #0
 800c548:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c54e:	2300      	movs	r3, #0
 800c550:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c556:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c558:	2300      	movs	r3, #0
 800c55a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800c55c:	1d3b      	adds	r3, r7, #4
 800c55e:	4619      	mov	r1, r3
 800c560:	4809      	ldr	r0, [pc, #36]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c562:	f004 f8c7 	bl	80106f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800c566:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bf14      	ite	ne
 800c56c:	2301      	movne	r3, #1
 800c56e:	2300      	moveq	r3, #0
 800c570:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <_ZL12MX_TIM1_Initv+0x13a>
		Error_Handler();
 800c576:	f000 fc6f 	bl	800ce58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 800c57a:	4803      	ldr	r0, [pc, #12]	@ (800c588 <_ZL12MX_TIM1_Initv+0x148>)
 800c57c:	f000 fdd2 	bl	800d124 <HAL_TIM_MspPostInit>

}
 800c580:	bf00      	nop
 800c582:	3748      	adds	r7, #72	@ 0x48
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	2000035c 	.word	0x2000035c
 800c58c:	40010000 	.word	0x40010000

0800c590 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800c590:	b580      	push	{r7, lr}
 800c592:	b08e      	sub	sp, #56	@ 0x38
 800c594:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800c596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c59a:	2200      	movs	r2, #0
 800c59c:	601a      	str	r2, [r3, #0]
 800c59e:	605a      	str	r2, [r3, #4]
 800c5a0:	609a      	str	r2, [r3, #8]
 800c5a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c5a4:	f107 0320 	add.w	r3, r7, #32
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c5ae:	1d3b      	adds	r3, r7, #4
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	605a      	str	r2, [r3, #4]
 800c5b6:	609a      	str	r2, [r3, #8]
 800c5b8:	60da      	str	r2, [r3, #12]
 800c5ba:	611a      	str	r2, [r3, #16]
 800c5bc:	615a      	str	r2, [r3, #20]
 800c5be:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800c5c0:	4b39      	ldr	r3, [pc, #228]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c5c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c5c6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800c5c8:	4b37      	ldr	r3, [pc, #220]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c5ce:	4b36      	ldr	r3, [pc, #216]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1800000;
 800c5d4:	4b34      	ldr	r3, [pc, #208]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c5d6:	4a35      	ldr	r2, [pc, #212]	@ (800c6ac <_ZL12MX_TIM2_Initv+0x11c>)
 800c5d8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c5da:	4b33      	ldr	r3, [pc, #204]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c5e0:	4b31      	ldr	r3, [pc, #196]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c5e2:	2280      	movs	r2, #128	@ 0x80
 800c5e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800c5e6:	4830      	ldr	r0, [pc, #192]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c5e8:	f003 f954 	bl	800f894 <HAL_TIM_Base_Init>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	bf14      	ite	ne
 800c5f2:	2301      	movne	r3, #1
 800c5f4:	2300      	moveq	r3, #0
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <_ZL12MX_TIM2_Initv+0x70>
		Error_Handler();
 800c5fc:	f000 fc2c 	bl	800ce58 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c604:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800c606:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c60a:	4619      	mov	r1, r3
 800c60c:	4826      	ldr	r0, [pc, #152]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c60e:	f003 fc1b 	bl	800fe48 <HAL_TIM_ConfigClockSource>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	bf14      	ite	ne
 800c618:	2301      	movne	r3, #1
 800c61a:	2300      	moveq	r3, #0
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d001      	beq.n	800c626 <_ZL12MX_TIM2_Initv+0x96>
		Error_Handler();
 800c622:	f000 fc19 	bl	800ce58 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800c626:	4820      	ldr	r0, [pc, #128]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c628:	f003 f9f4 	bl	800fa14 <HAL_TIM_PWM_Init>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bf14      	ite	ne
 800c632:	2301      	movne	r3, #1
 800c634:	2300      	moveq	r3, #0
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 800c63c:	f000 fc0c 	bl	800ce58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c640:	2300      	movs	r3, #0
 800c642:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c644:	2300      	movs	r3, #0
 800c646:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800c648:	f107 0320 	add.w	r3, r7, #32
 800c64c:	4619      	mov	r1, r3
 800c64e:	4816      	ldr	r0, [pc, #88]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c650:	f003 ffd4 	bl	80105fc <HAL_TIMEx_MasterConfigSynchronization>
 800c654:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c656:	2b00      	cmp	r3, #0
 800c658:	bf14      	ite	ne
 800c65a:	2301      	movne	r3, #1
 800c65c:	2300      	moveq	r3, #0
 800c65e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <_ZL12MX_TIM2_Initv+0xd8>
		Error_Handler();
 800c664:	f000 fbf8 	bl	800ce58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c668:	2360      	movs	r3, #96	@ 0x60
 800c66a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c670:	2300      	movs	r3, #0
 800c672:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c674:	2300      	movs	r3, #0
 800c676:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800c678:	1d3b      	adds	r3, r7, #4
 800c67a:	2200      	movs	r2, #0
 800c67c:	4619      	mov	r1, r3
 800c67e:	480a      	ldr	r0, [pc, #40]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c680:	f003 fb20 	bl	800fcc4 <HAL_TIM_PWM_ConfigChannel>
 800c684:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c686:	2b00      	cmp	r3, #0
 800c688:	bf14      	ite	ne
 800c68a:	2301      	movne	r3, #1
 800c68c:	2300      	moveq	r3, #0
 800c68e:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <_ZL12MX_TIM2_Initv+0x108>
		Error_Handler();
 800c694:	f000 fbe0 	bl	800ce58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800c698:	4803      	ldr	r0, [pc, #12]	@ (800c6a8 <_ZL12MX_TIM2_Initv+0x118>)
 800c69a:	f000 fd43 	bl	800d124 <HAL_TIM_MspPostInit>

}
 800c69e:	bf00      	nop
 800c6a0:	3738      	adds	r7, #56	@ 0x38
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	200003a4 	.word	0x200003a4
 800c6ac:	001b7740 	.word	0x001b7740

0800c6b0 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	@ 0x28
 800c6b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c6b6:	f107 0320 	add.w	r3, r7, #32
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c6c0:	1d3b      	adds	r3, r7, #4
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
 800c6c6:	605a      	str	r2, [r3, #4]
 800c6c8:	609a      	str	r2, [r3, #8]
 800c6ca:	60da      	str	r2, [r3, #12]
 800c6cc:	611a      	str	r2, [r3, #16]
 800c6ce:	615a      	str	r2, [r3, #20]
 800c6d0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800c6d2:	4b29      	ldr	r3, [pc, #164]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c6d4:	4a29      	ldr	r2, [pc, #164]	@ (800c77c <_ZL12MX_TIM4_Initv+0xcc>)
 800c6d6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800c6d8:	4b27      	ldr	r3, [pc, #156]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c6de:	4b26      	ldr	r3, [pc, #152]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800c6e4:	4b24      	ldr	r3, [pc, #144]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c6e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6ea:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c6ec:	4b22      	ldr	r3, [pc, #136]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c6f2:	4b21      	ldr	r3, [pc, #132]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800c6f8:	481f      	ldr	r0, [pc, #124]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c6fa:	f003 f98b 	bl	800fa14 <HAL_TIM_PWM_Init>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	bf14      	ite	ne
 800c704:	2301      	movne	r3, #1
 800c706:	2300      	moveq	r3, #0
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 800c70e:	f000 fba3 	bl	800ce58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c712:	2300      	movs	r3, #0
 800c714:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c716:	2300      	movs	r3, #0
 800c718:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800c71a:	f107 0320 	add.w	r3, r7, #32
 800c71e:	4619      	mov	r1, r3
 800c720:	4815      	ldr	r0, [pc, #84]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c722:	f003 ff6b 	bl	80105fc <HAL_TIMEx_MasterConfigSynchronization>
 800c726:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c728:	2b00      	cmp	r3, #0
 800c72a:	bf14      	ite	ne
 800c72c:	2301      	movne	r3, #1
 800c72e:	2300      	moveq	r3, #0
 800c730:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 800c736:	f000 fb8f 	bl	800ce58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c73a:	2360      	movs	r3, #96	@ 0x60
 800c73c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800c73e:	2300      	movs	r3, #0
 800c740:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c742:	2300      	movs	r3, #0
 800c744:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c746:	2300      	movs	r3, #0
 800c748:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800c74a:	1d3b      	adds	r3, r7, #4
 800c74c:	2204      	movs	r2, #4
 800c74e:	4619      	mov	r1, r3
 800c750:	4809      	ldr	r0, [pc, #36]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c752:	f003 fab7 	bl	800fcc4 <HAL_TIM_PWM_ConfigChannel>
 800c756:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bf14      	ite	ne
 800c75c:	2301      	movne	r3, #1
 800c75e:	2300      	moveq	r3, #0
 800c760:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 800c766:	f000 fb77 	bl	800ce58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit (&htim4);
 800c76a:	4803      	ldr	r0, [pc, #12]	@ (800c778 <_ZL12MX_TIM4_Initv+0xc8>)
 800c76c:	f000 fcda 	bl	800d124 <HAL_TIM_MspPostInit>

}
 800c770:	bf00      	nop
 800c772:	3728      	adds	r7, #40	@ 0x28
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	200003ec 	.word	0x200003ec
 800c77c:	40000800 	.word	0x40000800

0800c780 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c786:	463b      	mov	r3, r7
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800c78e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f8 <_ZL12MX_TIM6_Initv+0x78>)
 800c790:	4a1a      	ldr	r2, [pc, #104]	@ (800c7fc <_ZL12MX_TIM6_Initv+0x7c>)
 800c792:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 800c794:	4b18      	ldr	r3, [pc, #96]	@ (800c7f8 <_ZL12MX_TIM6_Initv+0x78>)
 800c796:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800c79a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c79c:	4b16      	ldr	r3, [pc, #88]	@ (800c7f8 <_ZL12MX_TIM6_Initv+0x78>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65520;
 800c7a2:	4b15      	ldr	r3, [pc, #84]	@ (800c7f8 <_ZL12MX_TIM6_Initv+0x78>)
 800c7a4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800c7a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c7aa:	4b13      	ldr	r3, [pc, #76]	@ (800c7f8 <_ZL12MX_TIM6_Initv+0x78>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800c7b0:	4811      	ldr	r0, [pc, #68]	@ (800c7f8 <_ZL12MX_TIM6_Initv+0x78>)
 800c7b2:	f003 f86f 	bl	800f894 <HAL_TIM_Base_Init>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bf14      	ite	ne
 800c7bc:	2301      	movne	r3, #1
 800c7be:	2300      	moveq	r3, #0
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800c7c6:	f000 fb47 	bl	800ce58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800c7d2:	463b      	mov	r3, r7
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4808      	ldr	r0, [pc, #32]	@ (800c7f8 <_ZL12MX_TIM6_Initv+0x78>)
 800c7d8:	f003 ff10 	bl	80105fc <HAL_TIMEx_MasterConfigSynchronization>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	bf14      	ite	ne
 800c7e2:	2301      	movne	r3, #1
 800c7e4:	2300      	moveq	r3, #0
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800c7ec:	f000 fb34 	bl	800ce58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800c7f0:	bf00      	nop
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20000434 	.word	0x20000434
 800c7fc:	40001000 	.word	0x40001000

0800c800 <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800c800:	b580      	push	{r7, lr}
 800c802:	b092      	sub	sp, #72	@ 0x48
 800c804:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c806:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c80a:	2200      	movs	r2, #0
 800c80c:	601a      	str	r2, [r3, #0]
 800c80e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c814:	2200      	movs	r2, #0
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	605a      	str	r2, [r3, #4]
 800c81a:	609a      	str	r2, [r3, #8]
 800c81c:	60da      	str	r2, [r3, #12]
 800c81e:	611a      	str	r2, [r3, #16]
 800c820:	615a      	str	r2, [r3, #20]
 800c822:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800c824:	1d3b      	adds	r3, r7, #4
 800c826:	2220      	movs	r2, #32
 800c828:	2100      	movs	r1, #0
 800c82a:	4618      	mov	r0, r3
 800c82c:	f006 fb7f 	bl	8012f2e <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800c830:	4b3d      	ldr	r3, [pc, #244]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c832:	4a3e      	ldr	r2, [pc, #248]	@ (800c92c <_ZL12MX_TIM8_Initv+0x12c>)
 800c834:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800c836:	4b3c      	ldr	r3, [pc, #240]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c838:	2200      	movs	r2, #0
 800c83a:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c83c:	4b3a      	ldr	r3, [pc, #232]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c83e:	2200      	movs	r2, #0
 800c840:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800c842:	4b39      	ldr	r3, [pc, #228]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c844:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c848:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c84a:	4b37      	ldr	r3, [pc, #220]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800c850:	4b35      	ldr	r3, [pc, #212]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c852:	2200      	movs	r2, #0
 800c854:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c856:	4b34      	ldr	r3, [pc, #208]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c858:	2200      	movs	r2, #0
 800c85a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800c85c:	4832      	ldr	r0, [pc, #200]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c85e:	f003 f8d9 	bl	800fa14 <HAL_TIM_PWM_Init>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	bf14      	ite	ne
 800c868:	2301      	movne	r3, #1
 800c86a:	2300      	moveq	r3, #0
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <_ZL12MX_TIM8_Initv+0x76>
		Error_Handler();
 800c872:	f000 faf1 	bl	800ce58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c876:	2300      	movs	r3, #0
 800c878:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c87a:	2300      	movs	r3, #0
 800c87c:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800c87e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c882:	4619      	mov	r1, r3
 800c884:	4828      	ldr	r0, [pc, #160]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c886:	f003 feb9 	bl	80105fc <HAL_TIMEx_MasterConfigSynchronization>
 800c88a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bf14      	ite	ne
 800c890:	2301      	movne	r3, #1
 800c892:	2300      	moveq	r3, #0
 800c894:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <_ZL12MX_TIM8_Initv+0x9e>
		Error_Handler();
 800c89a:	f000 fadd 	bl	800ce58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c89e:	2360      	movs	r3, #96	@ 0x60
 800c8a0:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800c8ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8be:	2204      	movs	r2, #4
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4819      	ldr	r0, [pc, #100]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c8c4:	f003 f9fe 	bl	800fcc4 <HAL_TIM_PWM_ConfigChannel>
 800c8c8:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	bf14      	ite	ne
 800c8ce:	2301      	movne	r3, #1
 800c8d0:	2300      	moveq	r3, #0
 800c8d2:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d001      	beq.n	800c8dc <_ZL12MX_TIM8_Initv+0xdc>
		Error_Handler();
 800c8d8:	f000 fabe 	bl	800ce58 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c8f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c8f4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800c8fa:	1d3b      	adds	r3, r7, #4
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	480a      	ldr	r0, [pc, #40]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c900:	f003 fef8 	bl	80106f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800c904:	4603      	mov	r3, r0
			!= HAL_OK) {
 800c906:	2b00      	cmp	r3, #0
 800c908:	bf14      	ite	ne
 800c90a:	2301      	movne	r3, #1
 800c90c:	2300      	moveq	r3, #0
 800c90e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800c910:	2b00      	cmp	r3, #0
 800c912:	d001      	beq.n	800c918 <_ZL12MX_TIM8_Initv+0x118>
		Error_Handler();
 800c914:	f000 faa0 	bl	800ce58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit (&htim8);
 800c918:	4803      	ldr	r0, [pc, #12]	@ (800c928 <_ZL12MX_TIM8_Initv+0x128>)
 800c91a:	f000 fc03 	bl	800d124 <HAL_TIM_MspPostInit>

}
 800c91e:	bf00      	nop
 800c920:	3748      	adds	r7, #72	@ 0x48
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	2000047c 	.word	0x2000047c
 800c92c:	40010400 	.word	0x40010400

0800c930 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800c934:	4b13      	ldr	r3, [pc, #76]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c936:	4a14      	ldr	r2, [pc, #80]	@ (800c988 <_ZL19MX_USART2_UART_Initv+0x58>)
 800c938:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800c93a:	4b12      	ldr	r3, [pc, #72]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c93c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c940:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c942:	4b10      	ldr	r3, [pc, #64]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c944:	2200      	movs	r2, #0
 800c946:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800c948:	4b0e      	ldr	r3, [pc, #56]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c94a:	2200      	movs	r2, #0
 800c94c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800c94e:	4b0d      	ldr	r3, [pc, #52]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c950:	2200      	movs	r2, #0
 800c952:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800c954:	4b0b      	ldr	r3, [pc, #44]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c956:	220c      	movs	r2, #12
 800c958:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c95a:	4b0a      	ldr	r3, [pc, #40]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c960:	4b08      	ldr	r3, [pc, #32]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c962:	2200      	movs	r2, #0
 800c964:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800c966:	4807      	ldr	r0, [pc, #28]	@ (800c984 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c968:	f003 ff2a 	bl	80107c0 <HAL_UART_Init>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	bf14      	ite	ne
 800c972:	2301      	movne	r3, #1
 800c974:	2300      	moveq	r3, #0
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800c97c:	f000 fa6c 	bl	800ce58 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800c980:	bf00      	nop
 800c982:	bd80      	pop	{r7, pc}
 800c984:	200004c4 	.word	0x200004c4
 800c988:	40004400 	.word	0x40004400

0800c98c <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800c990:	4b13      	ldr	r3, [pc, #76]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c992:	4a14      	ldr	r2, [pc, #80]	@ (800c9e4 <_ZL19MX_USART3_UART_Initv+0x58>)
 800c994:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800c996:	4b12      	ldr	r3, [pc, #72]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c99c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c99e:	4b10      	ldr	r3, [pc, #64]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800c9a4:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800c9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800c9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c9b2:	220c      	movs	r2, #12
 800c9b4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c9b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c9bc:	4b08      	ldr	r3, [pc, #32]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800c9c2:	4807      	ldr	r0, [pc, #28]	@ (800c9e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800c9c4:	f003 fefc 	bl	80107c0 <HAL_UART_Init>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	bf14      	ite	ne
 800c9ce:	2301      	movne	r3, #1
 800c9d0:	2300      	moveq	r3, #0
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d001      	beq.n	800c9dc <_ZL19MX_USART3_UART_Initv+0x50>
		Error_Handler();
 800c9d8:	f000 fa3e 	bl	800ce58 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800c9dc:	bf00      	nop
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20000508 	.word	0x20000508
 800c9e4:	40004800 	.word	0x40004800

0800c9e8 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08a      	sub	sp, #40	@ 0x28
 800c9ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c9ee:	f107 0314 	add.w	r3, r7, #20
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	605a      	str	r2, [r3, #4]
 800c9f8:	609a      	str	r2, [r3, #8]
 800c9fa:	60da      	str	r2, [r3, #12]
 800c9fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800c9fe:	2300      	movs	r3, #0
 800ca00:	613b      	str	r3, [r7, #16]
 800ca02:	4b43      	ldr	r3, [pc, #268]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca06:	4a42      	ldr	r2, [pc, #264]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca08:	f043 0304 	orr.w	r3, r3, #4
 800ca0c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca0e:	4b40      	ldr	r3, [pc, #256]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca12:	f003 0304 	and.w	r3, r3, #4
 800ca16:	613b      	str	r3, [r7, #16]
 800ca18:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	60fb      	str	r3, [r7, #12]
 800ca1e:	4b3c      	ldr	r3, [pc, #240]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca22:	4a3b      	ldr	r2, [pc, #236]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca28:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca2a:	4b39      	ldr	r3, [pc, #228]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800ca36:	2300      	movs	r3, #0
 800ca38:	60bb      	str	r3, [r7, #8]
 800ca3a:	4b35      	ldr	r3, [pc, #212]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca3e:	4a34      	ldr	r2, [pc, #208]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca40:	f043 0301 	orr.w	r3, r3, #1
 800ca44:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca46:	4b32      	ldr	r3, [pc, #200]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca4a:	f003 0301 	and.w	r3, r3, #1
 800ca4e:	60bb      	str	r3, [r7, #8]
 800ca50:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800ca52:	2300      	movs	r3, #0
 800ca54:	607b      	str	r3, [r7, #4]
 800ca56:	4b2e      	ldr	r3, [pc, #184]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca5a:	4a2d      	ldr	r2, [pc, #180]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca5c:	f043 0302 	orr.w	r3, r3, #2
 800ca60:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca62:	4b2b      	ldr	r3, [pc, #172]	@ (800cb10 <_ZL12MX_GPIO_Initv+0x128>)
 800ca64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca66:	f003 0302 	and.w	r3, r3, #2
 800ca6a:	607b      	str	r3, [r7, #4]
 800ca6c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ssel1_Pin | LD2_Pin | ssel2_Pin, GPIO_PIN_RESET);
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800ca74:	4827      	ldr	r0, [pc, #156]	@ (800cb14 <_ZL12MX_GPIO_Initv+0x12c>)
 800ca76:	f001 f9e9 	bl	800de4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f241 2130 	movw	r1, #4656	@ 0x1230
 800ca80:	4825      	ldr	r0, [pc, #148]	@ (800cb18 <_ZL12MX_GPIO_Initv+0x130>)
 800ca82:	f001 f9e3 	bl	800de4c <HAL_GPIO_WritePin>
			GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800ca86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ca8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ca8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800ca90:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ca96:	f107 0314 	add.w	r3, r7, #20
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	481f      	ldr	r0, [pc, #124]	@ (800cb1c <_ZL12MX_GPIO_Initv+0x134>)
 800ca9e:	f001 f841 	bl	800db24 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800caa2:	2301      	movs	r3, #1
 800caa4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800caa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800caaa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800caac:	2301      	movs	r3, #1
 800caae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cab0:	f107 0314 	add.w	r3, r7, #20
 800cab4:	4619      	mov	r1, r3
 800cab6:	4819      	ldr	r0, [pc, #100]	@ (800cb1c <_ZL12MX_GPIO_Initv+0x134>)
 800cab8:	f001 f834 	bl	800db24 <HAL_GPIO_Init>

	/*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
	GPIO_InitStruct.Pin = ssel1_Pin | LD2_Pin | ssel2_Pin;
 800cabc:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800cac0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cac2:	2301      	movs	r3, #1
 800cac4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800caca:	2300      	movs	r3, #0
 800cacc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cace:	f107 0314 	add.w	r3, r7, #20
 800cad2:	4619      	mov	r1, r3
 800cad4:	480f      	ldr	r0, [pc, #60]	@ (800cb14 <_ZL12MX_GPIO_Initv+0x12c>)
 800cad6:	f001 f825 	bl	800db24 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 reset_shield_2_Pin reset_shield_1_Pin PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin
 800cada:	f241 2330 	movw	r3, #4656	@ 0x1230
 800cade:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cae0:	2301      	movs	r3, #1
 800cae2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cae4:	2300      	movs	r3, #0
 800cae6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cae8:	2300      	movs	r3, #0
 800caea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800caec:	f107 0314 	add.w	r3, r7, #20
 800caf0:	4619      	mov	r1, r3
 800caf2:	4809      	ldr	r0, [pc, #36]	@ (800cb18 <_ZL12MX_GPIO_Initv+0x130>)
 800caf4:	f001 f816 	bl	800db24 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800caf8:	2200      	movs	r2, #0
 800cafa:	2100      	movs	r1, #0
 800cafc:	2006      	movs	r0, #6
 800cafe:	f000 ff48 	bl	800d992 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800cb02:	2006      	movs	r0, #6
 800cb04:	f000 ff61 	bl	800d9ca <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800cb08:	bf00      	nop
 800cb0a:	3728      	adds	r7, #40	@ 0x28
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	40023800 	.word	0x40023800
 800cb14:	40020000 	.word	0x40020000
 800cb18:	40020400 	.word	0x40020400
 800cb1c:	40020800 	.word	0x40020800

0800cb20 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7f3 fd2b 	bl	8000584 <__aeabi_i2d>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	ec43 2b10 	vmov	d0, r2, r3
 800cb36:	f005 fac3 	bl	80120c0 <sqrt>
 800cb3a:	eeb0 7a40 	vmov.f32	s14, s0
 800cb3e:	eef0 7a60 	vmov.f32	s15, s1
 800cb42:	eeb0 0a47 	vmov.f32	s0, s14
 800cb46:	eef0 0a67 	vmov.f32	s1, s15
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <_Z9moveSpeedddd>:

/* USER CODE BEGIN 4 */


void moveSpeed(double vx, double vy, double wz)
{
 800cb50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cb54:	ed2d 8b02 	vpush	{d8}
 800cb58:	b08e      	sub	sp, #56	@ 0x38
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	ed87 0b04 	vstr	d0, [r7, #16]
 800cb60:	ed87 1b02 	vstr	d1, [r7, #8]
 800cb64:	ed87 2b00 	vstr	d2, [r7]
	const double d = 0.13; //m
 800cb68:	a35b      	add	r3, pc, #364	@ (adr r3, 800ccd8 <_Z9moveSpeedddd+0x188>)
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	//calcul des vitesses
	double Vaf = 0.5*vy - sqrt(3)/2*vx - d*wz;
 800cb72:	f04f 0200 	mov.w	r2, #0
 800cb76:	4b5a      	ldr	r3, [pc, #360]	@ (800cce0 <_Z9moveSpeedddd+0x190>)
 800cb78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb7c:	f7f3 fd6c 	bl	8000658 <__aeabi_dmul>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4690      	mov	r8, r2
 800cb86:	4699      	mov	r9, r3
 800cb88:	2003      	movs	r0, #3
 800cb8a:	f7ff ffc9 	bl	800cb20 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800cb8e:	ec51 0b10 	vmov	r0, r1, d0
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb9a:	f7f3 fe87 	bl	80008ac <__aeabi_ddiv>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	4610      	mov	r0, r2
 800cba4:	4619      	mov	r1, r3
 800cba6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cbaa:	f7f3 fd55 	bl	8000658 <__aeabi_dmul>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	f7f3 fb97 	bl	80002e8 <__aeabi_dsub>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4690      	mov	r8, r2
 800cbc0:	4699      	mov	r9, r3
 800cbc2:	a345      	add	r3, pc, #276	@ (adr r3, 800ccd8 <_Z9moveSpeedddd+0x188>)
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbcc:	f7f3 fd44 	bl	8000658 <__aeabi_dmul>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4640      	mov	r0, r8
 800cbd6:	4649      	mov	r1, r9
 800cbd8:	f7f3 fb86 	bl	80002e8 <__aeabi_dsub>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	460b      	mov	r3, r1
 800cbe0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double Vbf = 0.5*vy + sqrt(3)/2*vx - d*wz;
 800cbe4:	f04f 0200 	mov.w	r2, #0
 800cbe8:	4b3d      	ldr	r3, [pc, #244]	@ (800cce0 <_Z9moveSpeedddd+0x190>)
 800cbea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cbee:	f7f3 fd33 	bl	8000658 <__aeabi_dmul>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4690      	mov	r8, r2
 800cbf8:	4699      	mov	r9, r3
 800cbfa:	2003      	movs	r0, #3
 800cbfc:	f7ff ff90 	bl	800cb20 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800cc00:	ec51 0b10 	vmov	r0, r1, d0
 800cc04:	f04f 0200 	mov.w	r2, #0
 800cc08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cc0c:	f7f3 fe4e 	bl	80008ac <__aeabi_ddiv>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	4610      	mov	r0, r2
 800cc16:	4619      	mov	r1, r3
 800cc18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cc1c:	f7f3 fd1c 	bl	8000658 <__aeabi_dmul>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4640      	mov	r0, r8
 800cc26:	4649      	mov	r1, r9
 800cc28:	f7f3 fb60 	bl	80002ec <__adddf3>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	4690      	mov	r8, r2
 800cc32:	4699      	mov	r9, r3
 800cc34:	a328      	add	r3, pc, #160	@ (adr r3, 800ccd8 <_Z9moveSpeedddd+0x188>)
 800cc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc3e:	f7f3 fd0b 	bl	8000658 <__aeabi_dmul>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	4640      	mov	r0, r8
 800cc48:	4649      	mov	r1, r9
 800cc4a:	f7f3 fb4d 	bl	80002e8 <__aeabi_dsub>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	460b      	mov	r3, r1
 800cc52:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Vcf = -vy - d*wz;
 800cc56:	68bc      	ldr	r4, [r7, #8]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800cc5e:	a31e      	add	r3, pc, #120	@ (adr r3, 800ccd8 <_Z9moveSpeedddd+0x188>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc68:	f7f3 fcf6 	bl	8000658 <__aeabi_dmul>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4620      	mov	r0, r4
 800cc72:	4629      	mov	r1, r5
 800cc74:	f7f3 fb38 	bl	80002e8 <__aeabi_dsub>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//pilotage des moteurs
	moteurs->motors_on();
 800cc80:	4b18      	ldr	r3, [pc, #96]	@ (800cce4 <_Z9moveSpeedddd+0x194>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7f5 fd57 	bl	8002738 <_ZN11BlocMoteurs9motors_onEv>
	moteurs->commande_vitesses_absolues(Vaf, -Vcf, Vbf, 0);
 800cc8a:	4b16      	ldr	r3, [pc, #88]	@ (800cce4 <_Z9moveSpeedddd+0x194>)
 800cc8c:	681c      	ldr	r4, [r3, #0]
 800cc8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cc92:	f7f3 ffb9 	bl	8000c08 <__aeabi_d2f>
 800cc96:	4605      	mov	r5, r0
 800cc98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cc9c:	f7f3 ffb4 	bl	8000c08 <__aeabi_d2f>
 800cca0:	4603      	mov	r3, r0
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eeb1 8a67 	vneg.f32	s16, s15
 800ccaa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ccae:	f7f3 ffab 	bl	8000c08 <__aeabi_d2f>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 800cce8 <_Z9moveSpeedddd+0x198>
 800ccb8:	ee01 3a10 	vmov	s2, r3
 800ccbc:	eef0 0a48 	vmov.f32	s1, s16
 800ccc0:	ee00 5a10 	vmov	s0, r5
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7f5 fc9c 	bl	8002602 <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>
}
 800ccca:	bf00      	nop
 800cccc:	3738      	adds	r7, #56	@ 0x38
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	ecbd 8b02 	vpop	{d8}
 800ccd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ccd8:	0a3d70a4 	.word	0x0a3d70a4
 800ccdc:	3fc0a3d7 	.word	0x3fc0a3d7
 800cce0:	3fe00000 	.word	0x3fe00000
 800cce4:	2000054c 	.word	0x2000054c
 800cce8:	00000000 	.word	0x00000000

0800ccec <_Z4stopv>:


void stop()
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
	moteurs->motors_stop_hard();
 800ccf0:	4b03      	ldr	r3, [pc, #12]	@ (800cd00 <_Z4stopv+0x14>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f5 fd2c 	bl	8002752 <_ZN11BlocMoteurs16motors_stop_hardEv>
}
 800ccfa:	bf00      	nop
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	2000054c 	.word	0x2000054c

0800cd04 <HAL_GPIO_EXTI_Callback>:


// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800cd0e:	88fb      	ldrh	r3, [r7, #6]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d102      	bne.n	800cd1a <HAL_GPIO_EXTI_Callback+0x16>
		// Motors are busy when pin low. Rising edge -> no longer busy
		motors_busy = false;
 800cd14:	4b04      	ldr	r3, [pc, #16]	@ (800cd28 <HAL_GPIO_EXTI_Callback+0x24>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	701a      	strb	r2, [r3, #0]
	}
}
 800cd1a:	bf00      	nop
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	20000550 	.word	0x20000550

0800cd2c <HAL_UART_TxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]

}
 800cd34:	bf00      	nop
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a3a      	ldr	r2, [pc, #232]	@ (800ce38 <HAL_UART_RxCpltCallback+0xf8>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d157      	bne.n	800ce02 <HAL_UART_RxCpltCallback+0xc2>
	{
		switch(uart_received_char)
 800cd52:	4b3a      	ldr	r3, [pc, #232]	@ (800ce3c <HAL_UART_RxCpltCallback+0xfc>)
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	3b32      	subs	r3, #50	@ 0x32
 800cd58:	2b07      	cmp	r3, #7
 800cd5a:	d84c      	bhi.n	800cdf6 <HAL_UART_RxCpltCallback+0xb6>
 800cd5c:	a201      	add	r2, pc, #4	@ (adr r2, 800cd64 <HAL_UART_RxCpltCallback+0x24>)
 800cd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd62:	bf00      	nop
 800cd64:	0800cd9d 	.word	0x0800cd9d
 800cd68:	0800cdf7 	.word	0x0800cdf7
 800cd6c:	0800cdaf 	.word	0x0800cdaf
 800cd70:	0800cd85 	.word	0x0800cd85
 800cd74:	0800cdc1 	.word	0x0800cdc1
 800cd78:	0800cdd3 	.word	0x0800cdd3
 800cd7c:	0800cd8b 	.word	0x0800cd8b
 800cd80:	0800cde5 	.word	0x0800cde5
		{
		case '5':
			stop();
 800cd84:	f7ff ffb2 	bl	800ccec <_Z4stopv>
			break;
 800cd88:	e036      	b.n	800cdf8 <HAL_UART_RxCpltCallback+0xb8>

		case '8':
			moveSpeed(5, 0, 0);
 800cd8a:	ed9f 2b21 	vldr	d2, [pc, #132]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cd8e:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cd92:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 800ce18 <HAL_UART_RxCpltCallback+0xd8>
 800cd96:	f7ff fedb 	bl	800cb50 <_Z9moveSpeedddd>
			break;
 800cd9a:	e02d      	b.n	800cdf8 <HAL_UART_RxCpltCallback+0xb8>

		case '2':
			moveSpeed(-5, 0, 0);
 800cd9c:	ed9f 2b1c 	vldr	d2, [pc, #112]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cda0:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cda4:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800ce20 <HAL_UART_RxCpltCallback+0xe0>
 800cda8:	f7ff fed2 	bl	800cb50 <_Z9moveSpeedddd>
			break;
 800cdac:	e024      	b.n	800cdf8 <HAL_UART_RxCpltCallback+0xb8>

		case '4':
			moveSpeed(0, -5, 0);
 800cdae:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cdb2:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 800ce20 <HAL_UART_RxCpltCallback+0xe0>
 800cdb6:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cdba:	f7ff fec9 	bl	800cb50 <_Z9moveSpeedddd>
			break;
 800cdbe:	e01b      	b.n	800cdf8 <HAL_UART_RxCpltCallback+0xb8>

		case '6':
			moveSpeed(0, 5, 0);
 800cdc0:	ed9f 2b13 	vldr	d2, [pc, #76]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cdc4:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 800ce18 <HAL_UART_RxCpltCallback+0xd8>
 800cdc8:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cdcc:	f7ff fec0 	bl	800cb50 <_Z9moveSpeedddd>
			break;
 800cdd0:	e012      	b.n	800cdf8 <HAL_UART_RxCpltCallback+0xb8>

		case '7':
			moveSpeed(0, 0, -20);
 800cdd2:	ed9f 2b15 	vldr	d2, [pc, #84]	@ 800ce28 <HAL_UART_RxCpltCallback+0xe8>
 800cdd6:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cdda:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cdde:	f7ff feb7 	bl	800cb50 <_Z9moveSpeedddd>
			break;
 800cde2:	e009      	b.n	800cdf8 <HAL_UART_RxCpltCallback+0xb8>

		case '9':
			moveSpeed(0, 0, 20);
 800cde4:	ed9f 2b12 	vldr	d2, [pc, #72]	@ 800ce30 <HAL_UART_RxCpltCallback+0xf0>
 800cde8:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cdec:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 800ce10 <HAL_UART_RxCpltCallback+0xd0>
 800cdf0:	f7ff feae 	bl	800cb50 <_Z9moveSpeedddd>
			break;
 800cdf4:	e000      	b.n	800cdf8 <HAL_UART_RxCpltCallback+0xb8>


		default:
			break;
 800cdf6:	bf00      	nop
		}

		// ALWAYS READ UART
		HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	4910      	ldr	r1, [pc, #64]	@ (800ce3c <HAL_UART_RxCpltCallback+0xfc>)
 800cdfc:	4810      	ldr	r0, [pc, #64]	@ (800ce40 <HAL_UART_RxCpltCallback+0x100>)
 800cdfe:	f003 fd2c 	bl	801085a <HAL_UART_Receive_IT>
	}
}
 800ce02:	bf00      	nop
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	f3af 8000 	nop.w
	...
 800ce1c:	40140000 	.word	0x40140000
 800ce20:	00000000 	.word	0x00000000
 800ce24:	c0140000 	.word	0xc0140000
 800ce28:	00000000 	.word	0x00000000
 800ce2c:	c0340000 	.word	0xc0340000
 800ce30:	00000000 	.word	0x00000000
 800ce34:	40340000 	.word	0x40340000
 800ce38:	40004400 	.word	0x40004400
 800ce3c:	20000553 	.word	0x20000553
 800ce40:	200004c4 	.word	0x200004c4

0800ce44 <HAL_TIM_PeriodElapsedCallback>:

//Timer 2 interrupt (every 20ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]

}
 800ce4c:	bf00      	nop
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800ce58:	b480      	push	{r7}
 800ce5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ce5c:	b672      	cpsid	i
}
 800ce5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800ce60:	bf00      	nop
 800ce62:	e7fd      	b.n	800ce60 <Error_Handler+0x8>

0800ce64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	607b      	str	r3, [r7, #4]
 800ce6e:	4b10      	ldr	r3, [pc, #64]	@ (800ceb0 <HAL_MspInit+0x4c>)
 800ce70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce72:	4a0f      	ldr	r2, [pc, #60]	@ (800ceb0 <HAL_MspInit+0x4c>)
 800ce74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ce78:	6453      	str	r3, [r2, #68]	@ 0x44
 800ce7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb0 <HAL_MspInit+0x4c>)
 800ce7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce82:	607b      	str	r3, [r7, #4]
 800ce84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ce86:	2300      	movs	r3, #0
 800ce88:	603b      	str	r3, [r7, #0]
 800ce8a:	4b09      	ldr	r3, [pc, #36]	@ (800ceb0 <HAL_MspInit+0x4c>)
 800ce8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce8e:	4a08      	ldr	r2, [pc, #32]	@ (800ceb0 <HAL_MspInit+0x4c>)
 800ce90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce94:	6413      	str	r3, [r2, #64]	@ 0x40
 800ce96:	4b06      	ldr	r3, [pc, #24]	@ (800ceb0 <HAL_MspInit+0x4c>)
 800ce98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce9e:	603b      	str	r3, [r7, #0]
 800cea0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800cea2:	2007      	movs	r0, #7
 800cea4:	f000 fd6a 	bl	800d97c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cea8:	bf00      	nop
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	40023800 	.word	0x40023800

0800ceb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08c      	sub	sp, #48	@ 0x30
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cebc:	f107 031c 	add.w	r3, r7, #28
 800cec0:	2200      	movs	r2, #0
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	605a      	str	r2, [r3, #4]
 800cec6:	609a      	str	r2, [r3, #8]
 800cec8:	60da      	str	r2, [r3, #12]
 800ceca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a45      	ldr	r2, [pc, #276]	@ (800cfe8 <HAL_SPI_MspInit+0x134>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d14a      	bne.n	800cf6c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ced6:	2300      	movs	r3, #0
 800ced8:	61bb      	str	r3, [r7, #24]
 800ceda:	4b44      	ldr	r3, [pc, #272]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cedc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cede:	4a43      	ldr	r2, [pc, #268]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cee0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cee4:	6453      	str	r3, [r2, #68]	@ 0x44
 800cee6:	4b41      	ldr	r3, [pc, #260]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ceee:	61bb      	str	r3, [r7, #24]
 800cef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cef2:	2300      	movs	r3, #0
 800cef4:	617b      	str	r3, [r7, #20]
 800cef6:	4b3d      	ldr	r3, [pc, #244]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cefa:	4a3c      	ldr	r2, [pc, #240]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cefc:	f043 0301 	orr.w	r3, r3, #1
 800cf00:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf02:	4b3a      	ldr	r3, [pc, #232]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf06:	f003 0301 	and.w	r3, r3, #1
 800cf0a:	617b      	str	r3, [r7, #20]
 800cf0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf0e:	2300      	movs	r3, #0
 800cf10:	613b      	str	r3, [r7, #16]
 800cf12:	4b36      	ldr	r3, [pc, #216]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf16:	4a35      	ldr	r2, [pc, #212]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf18:	f043 0302 	orr.w	r3, r3, #2
 800cf1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf1e:	4b33      	ldr	r3, [pc, #204]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf22:	f003 0302 	and.w	r3, r3, #2
 800cf26:	613b      	str	r3, [r7, #16]
 800cf28:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cf2a:	23c0      	movs	r3, #192	@ 0xc0
 800cf2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf2e:	2302      	movs	r3, #2
 800cf30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf36:	2303      	movs	r3, #3
 800cf38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cf3a:	2305      	movs	r3, #5
 800cf3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf3e:	f107 031c 	add.w	r3, r7, #28
 800cf42:	4619      	mov	r1, r3
 800cf44:	482a      	ldr	r0, [pc, #168]	@ (800cff0 <HAL_SPI_MspInit+0x13c>)
 800cf46:	f000 fded 	bl	800db24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cf4a:	2308      	movs	r3, #8
 800cf4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf4e:	2302      	movs	r3, #2
 800cf50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf56:	2303      	movs	r3, #3
 800cf58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cf5a:	2305      	movs	r3, #5
 800cf5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf5e:	f107 031c 	add.w	r3, r7, #28
 800cf62:	4619      	mov	r1, r3
 800cf64:	4823      	ldr	r0, [pc, #140]	@ (800cff4 <HAL_SPI_MspInit+0x140>)
 800cf66:	f000 fddd 	bl	800db24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800cf6a:	e038      	b.n	800cfde <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a21      	ldr	r2, [pc, #132]	@ (800cff8 <HAL_SPI_MspInit+0x144>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d133      	bne.n	800cfde <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cf76:	2300      	movs	r3, #0
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	4b1c      	ldr	r3, [pc, #112]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf7e:	4a1b      	ldr	r2, [pc, #108]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cf84:	6413      	str	r3, [r2, #64]	@ 0x40
 800cf86:	4b19      	ldr	r3, [pc, #100]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf8e:	60fb      	str	r3, [r7, #12]
 800cf90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf92:	2300      	movs	r3, #0
 800cf94:	60bb      	str	r3, [r7, #8]
 800cf96:	4b15      	ldr	r3, [pc, #84]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf9a:	4a14      	ldr	r2, [pc, #80]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cf9c:	f043 0304 	orr.w	r3, r3, #4
 800cfa0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cfa2:	4b12      	ldr	r3, [pc, #72]	@ (800cfec <HAL_SPI_MspInit+0x138>)
 800cfa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfa6:	f003 0304 	and.w	r3, r3, #4
 800cfaa:	60bb      	str	r3, [r7, #8]
 800cfac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800cfae:	238c      	movs	r3, #140	@ 0x8c
 800cfb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfb2:	2302      	movs	r3, #2
 800cfb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cfbe:	2305      	movs	r3, #5
 800cfc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cfc2:	f107 031c 	add.w	r3, r7, #28
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	480c      	ldr	r0, [pc, #48]	@ (800cffc <HAL_SPI_MspInit+0x148>)
 800cfca:	f000 fdab 	bl	800db24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800cfce:	2200      	movs	r2, #0
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	2024      	movs	r0, #36	@ 0x24
 800cfd4:	f000 fcdd 	bl	800d992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800cfd8:	2024      	movs	r0, #36	@ 0x24
 800cfda:	f000 fcf6 	bl	800d9ca <HAL_NVIC_EnableIRQ>
}
 800cfde:	bf00      	nop
 800cfe0:	3730      	adds	r7, #48	@ 0x30
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	40013000 	.word	0x40013000
 800cfec:	40023800 	.word	0x40023800
 800cff0:	40020000 	.word	0x40020000
 800cff4:	40020400 	.word	0x40020400
 800cff8:	40003800 	.word	0x40003800
 800cffc:	40020800 	.word	0x40020800

0800d000 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800d000:	b480      	push	{r7}
 800d002:	b087      	sub	sp, #28
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a1f      	ldr	r2, [pc, #124]	@ (800d08c <HAL_TIM_PWM_MspInit+0x8c>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d10e      	bne.n	800d030 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d012:	2300      	movs	r3, #0
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	4b1e      	ldr	r3, [pc, #120]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d01a:	4a1d      	ldr	r2, [pc, #116]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d01c:	f043 0301 	orr.w	r3, r3, #1
 800d020:	6453      	str	r3, [r2, #68]	@ 0x44
 800d022:	4b1b      	ldr	r3, [pc, #108]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d026:	f003 0301 	and.w	r3, r3, #1
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d02e:	e026      	b.n	800d07e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a17      	ldr	r2, [pc, #92]	@ (800d094 <HAL_TIM_PWM_MspInit+0x94>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d10e      	bne.n	800d058 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d03a:	2300      	movs	r3, #0
 800d03c:	613b      	str	r3, [r7, #16]
 800d03e:	4b14      	ldr	r3, [pc, #80]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d042:	4a13      	ldr	r2, [pc, #76]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d044:	f043 0304 	orr.w	r3, r3, #4
 800d048:	6413      	str	r3, [r2, #64]	@ 0x40
 800d04a:	4b11      	ldr	r3, [pc, #68]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d04e:	f003 0304 	and.w	r3, r3, #4
 800d052:	613b      	str	r3, [r7, #16]
 800d054:	693b      	ldr	r3, [r7, #16]
}
 800d056:	e012      	b.n	800d07e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a0e      	ldr	r2, [pc, #56]	@ (800d098 <HAL_TIM_PWM_MspInit+0x98>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d10d      	bne.n	800d07e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d062:	2300      	movs	r3, #0
 800d064:	60fb      	str	r3, [r7, #12]
 800d066:	4b0a      	ldr	r3, [pc, #40]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d06a:	4a09      	ldr	r2, [pc, #36]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d06c:	f043 0302 	orr.w	r3, r3, #2
 800d070:	6453      	str	r3, [r2, #68]	@ 0x44
 800d072:	4b07      	ldr	r3, [pc, #28]	@ (800d090 <HAL_TIM_PWM_MspInit+0x90>)
 800d074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d076:	f003 0302 	and.w	r3, r3, #2
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	68fb      	ldr	r3, [r7, #12]
}
 800d07e:	bf00      	nop
 800d080:	371c      	adds	r7, #28
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	40010000 	.word	0x40010000
 800d090:	40023800 	.word	0x40023800
 800d094:	40000800 	.word	0x40000800
 800d098:	40010400 	.word	0x40010400

0800d09c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0ac:	d116      	bne.n	800d0dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	4b1a      	ldr	r3, [pc, #104]	@ (800d11c <HAL_TIM_Base_MspInit+0x80>)
 800d0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0b6:	4a19      	ldr	r2, [pc, #100]	@ (800d11c <HAL_TIM_Base_MspInit+0x80>)
 800d0b8:	f043 0301 	orr.w	r3, r3, #1
 800d0bc:	6413      	str	r3, [r2, #64]	@ 0x40
 800d0be:	4b17      	ldr	r3, [pc, #92]	@ (800d11c <HAL_TIM_Base_MspInit+0x80>)
 800d0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0c2:	f003 0301 	and.w	r3, r3, #1
 800d0c6:	60fb      	str	r3, [r7, #12]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	201c      	movs	r0, #28
 800d0d0:	f000 fc5f 	bl	800d992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d0d4:	201c      	movs	r0, #28
 800d0d6:	f000 fc78 	bl	800d9ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800d0da:	e01a      	b.n	800d112 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a0f      	ldr	r2, [pc, #60]	@ (800d120 <HAL_TIM_Base_MspInit+0x84>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d115      	bne.n	800d112 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60bb      	str	r3, [r7, #8]
 800d0ea:	4b0c      	ldr	r3, [pc, #48]	@ (800d11c <HAL_TIM_Base_MspInit+0x80>)
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ee:	4a0b      	ldr	r2, [pc, #44]	@ (800d11c <HAL_TIM_Base_MspInit+0x80>)
 800d0f0:	f043 0310 	orr.w	r3, r3, #16
 800d0f4:	6413      	str	r3, [r2, #64]	@ 0x40
 800d0f6:	4b09      	ldr	r3, [pc, #36]	@ (800d11c <HAL_TIM_Base_MspInit+0x80>)
 800d0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	60bb      	str	r3, [r7, #8]
 800d100:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800d102:	2200      	movs	r2, #0
 800d104:	2100      	movs	r1, #0
 800d106:	2036      	movs	r0, #54	@ 0x36
 800d108:	f000 fc43 	bl	800d992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d10c:	2036      	movs	r0, #54	@ 0x36
 800d10e:	f000 fc5c 	bl	800d9ca <HAL_NVIC_EnableIRQ>
}
 800d112:	bf00      	nop
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	40023800 	.word	0x40023800
 800d120:	40001000 	.word	0x40001000

0800d124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b08c      	sub	sp, #48	@ 0x30
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d12c:	f107 031c 	add.w	r3, r7, #28
 800d130:	2200      	movs	r2, #0
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	605a      	str	r2, [r3, #4]
 800d136:	609a      	str	r2, [r3, #8]
 800d138:	60da      	str	r2, [r3, #12]
 800d13a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a49      	ldr	r2, [pc, #292]	@ (800d268 <HAL_TIM_MspPostInit+0x144>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d11f      	bne.n	800d186 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d146:	2300      	movs	r3, #0
 800d148:	61bb      	str	r3, [r7, #24]
 800d14a:	4b48      	ldr	r3, [pc, #288]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d14e:	4a47      	ldr	r2, [pc, #284]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d150:	f043 0302 	orr.w	r3, r3, #2
 800d154:	6313      	str	r3, [r2, #48]	@ 0x30
 800d156:	4b45      	ldr	r3, [pc, #276]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d15a:	f003 0302 	and.w	r3, r3, #2
 800d15e:	61bb      	str	r3, [r7, #24]
 800d160:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800d162:	f248 0301 	movw	r3, #32769	@ 0x8001
 800d166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d168:	2302      	movs	r3, #2
 800d16a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d16c:	2300      	movs	r3, #0
 800d16e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d170:	2300      	movs	r3, #0
 800d172:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d174:	2301      	movs	r3, #1
 800d176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d178:	f107 031c 	add.w	r3, r7, #28
 800d17c:	4619      	mov	r1, r3
 800d17e:	483c      	ldr	r0, [pc, #240]	@ (800d270 <HAL_TIM_MspPostInit+0x14c>)
 800d180:	f000 fcd0 	bl	800db24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800d184:	e06c      	b.n	800d260 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d18e:	d11f      	bne.n	800d1d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d190:	2300      	movs	r3, #0
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	4b35      	ldr	r3, [pc, #212]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d198:	4a34      	ldr	r2, [pc, #208]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d19a:	f043 0301 	orr.w	r3, r3, #1
 800d19e:	6313      	str	r3, [r2, #48]	@ 0x30
 800d1a0:	4b32      	ldr	r3, [pc, #200]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d1a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1a4:	f003 0301 	and.w	r3, r3, #1
 800d1a8:	617b      	str	r3, [r7, #20]
 800d1aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d1ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1c2:	f107 031c 	add.w	r3, r7, #28
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	482a      	ldr	r0, [pc, #168]	@ (800d274 <HAL_TIM_MspPostInit+0x150>)
 800d1ca:	f000 fcab 	bl	800db24 <HAL_GPIO_Init>
}
 800d1ce:	e047      	b.n	800d260 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a28      	ldr	r2, [pc, #160]	@ (800d278 <HAL_TIM_MspPostInit+0x154>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d11e      	bne.n	800d218 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1da:	2300      	movs	r3, #0
 800d1dc:	613b      	str	r3, [r7, #16]
 800d1de:	4b23      	ldr	r3, [pc, #140]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e2:	4a22      	ldr	r2, [pc, #136]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d1e4:	f043 0302 	orr.w	r3, r3, #2
 800d1e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d1ea:	4b20      	ldr	r3, [pc, #128]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ee:	f003 0302 	and.w	r3, r3, #2
 800d1f2:	613b      	str	r3, [r7, #16]
 800d1f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d1f6:	2380      	movs	r3, #128	@ 0x80
 800d1f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1fe:	2300      	movs	r3, #0
 800d200:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d202:	2300      	movs	r3, #0
 800d204:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d206:	2302      	movs	r3, #2
 800d208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d20a:	f107 031c 	add.w	r3, r7, #28
 800d20e:	4619      	mov	r1, r3
 800d210:	4817      	ldr	r0, [pc, #92]	@ (800d270 <HAL_TIM_MspPostInit+0x14c>)
 800d212:	f000 fc87 	bl	800db24 <HAL_GPIO_Init>
}
 800d216:	e023      	b.n	800d260 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a17      	ldr	r2, [pc, #92]	@ (800d27c <HAL_TIM_MspPostInit+0x158>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d11e      	bne.n	800d260 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d222:	2300      	movs	r3, #0
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	4b11      	ldr	r3, [pc, #68]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d22a:	4a10      	ldr	r2, [pc, #64]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d22c:	f043 0302 	orr.w	r3, r3, #2
 800d230:	6313      	str	r3, [r2, #48]	@ 0x30
 800d232:	4b0e      	ldr	r3, [pc, #56]	@ (800d26c <HAL_TIM_MspPostInit+0x148>)
 800d234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d236:	f003 0302 	and.w	r3, r3, #2
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800d23e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d244:	2302      	movs	r3, #2
 800d246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d248:	2300      	movs	r3, #0
 800d24a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d24c:	2300      	movs	r3, #0
 800d24e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d250:	2303      	movs	r3, #3
 800d252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d254:	f107 031c 	add.w	r3, r7, #28
 800d258:	4619      	mov	r1, r3
 800d25a:	4805      	ldr	r0, [pc, #20]	@ (800d270 <HAL_TIM_MspPostInit+0x14c>)
 800d25c:	f000 fc62 	bl	800db24 <HAL_GPIO_Init>
}
 800d260:	bf00      	nop
 800d262:	3730      	adds	r7, #48	@ 0x30
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	40010000 	.word	0x40010000
 800d26c:	40023800 	.word	0x40023800
 800d270:	40020400 	.word	0x40020400
 800d274:	40020000 	.word	0x40020000
 800d278:	40000800 	.word	0x40000800
 800d27c:	40010400 	.word	0x40010400

0800d280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08c      	sub	sp, #48	@ 0x30
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d288:	f107 031c 	add.w	r3, r7, #28
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	605a      	str	r2, [r3, #4]
 800d292:	609a      	str	r2, [r3, #8]
 800d294:	60da      	str	r2, [r3, #12]
 800d296:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a49      	ldr	r2, [pc, #292]	@ (800d3c4 <HAL_UART_MspInit+0x144>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d134      	bne.n	800d30c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	61bb      	str	r3, [r7, #24]
 800d2a6:	4b48      	ldr	r3, [pc, #288]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2aa:	4a47      	ldr	r2, [pc, #284]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d2ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2b0:	6413      	str	r3, [r2, #64]	@ 0x40
 800d2b2:	4b45      	ldr	r3, [pc, #276]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2ba:	61bb      	str	r3, [r7, #24]
 800d2bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2be:	2300      	movs	r3, #0
 800d2c0:	617b      	str	r3, [r7, #20]
 800d2c2:	4b41      	ldr	r3, [pc, #260]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2c6:	4a40      	ldr	r2, [pc, #256]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d2c8:	f043 0301 	orr.w	r3, r3, #1
 800d2cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2ce:	4b3e      	ldr	r3, [pc, #248]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	617b      	str	r3, [r7, #20]
 800d2d8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800d2da:	230c      	movs	r3, #12
 800d2dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2de:	2302      	movs	r3, #2
 800d2e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d2ea:	2307      	movs	r3, #7
 800d2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2ee:	f107 031c 	add.w	r3, r7, #28
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	4835      	ldr	r0, [pc, #212]	@ (800d3cc <HAL_UART_MspInit+0x14c>)
 800d2f6:	f000 fc15 	bl	800db24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	2026      	movs	r0, #38	@ 0x26
 800d300:	f000 fb47 	bl	800d992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d304:	2026      	movs	r0, #38	@ 0x26
 800d306:	f000 fb60 	bl	800d9ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d30a:	e057      	b.n	800d3bc <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a2f      	ldr	r2, [pc, #188]	@ (800d3d0 <HAL_UART_MspInit+0x150>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d152      	bne.n	800d3bc <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d316:	2300      	movs	r3, #0
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	4b2b      	ldr	r3, [pc, #172]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d31e:	4a2a      	ldr	r2, [pc, #168]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d324:	6413      	str	r3, [r2, #64]	@ 0x40
 800d326:	4b28      	ldr	r3, [pc, #160]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d32a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d32e:	613b      	str	r3, [r7, #16]
 800d330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d332:	2300      	movs	r3, #0
 800d334:	60fb      	str	r3, [r7, #12]
 800d336:	4b24      	ldr	r3, [pc, #144]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d33a:	4a23      	ldr	r2, [pc, #140]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d33c:	f043 0304 	orr.w	r3, r3, #4
 800d340:	6313      	str	r3, [r2, #48]	@ 0x30
 800d342:	4b21      	ldr	r3, [pc, #132]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d346:	f003 0304 	and.w	r3, r3, #4
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d34e:	2300      	movs	r3, #0
 800d350:	60bb      	str	r3, [r7, #8]
 800d352:	4b1d      	ldr	r3, [pc, #116]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d356:	4a1c      	ldr	r2, [pc, #112]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d358:	f043 0302 	orr.w	r3, r3, #2
 800d35c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d35e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3c8 <HAL_UART_MspInit+0x148>)
 800d360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d362:	f003 0302 	and.w	r3, r3, #2
 800d366:	60bb      	str	r3, [r7, #8]
 800d368:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d36a:	2320      	movs	r3, #32
 800d36c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d36e:	2302      	movs	r3, #2
 800d370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d372:	2300      	movs	r3, #0
 800d374:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d376:	2303      	movs	r3, #3
 800d378:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d37a:	2307      	movs	r3, #7
 800d37c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d37e:	f107 031c 	add.w	r3, r7, #28
 800d382:	4619      	mov	r1, r3
 800d384:	4813      	ldr	r0, [pc, #76]	@ (800d3d4 <HAL_UART_MspInit+0x154>)
 800d386:	f000 fbcd 	bl	800db24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d38a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d38e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d390:	2302      	movs	r3, #2
 800d392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d394:	2300      	movs	r3, #0
 800d396:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d398:	2303      	movs	r3, #3
 800d39a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d39c:	2307      	movs	r3, #7
 800d39e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d3a0:	f107 031c 	add.w	r3, r7, #28
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	480c      	ldr	r0, [pc, #48]	@ (800d3d8 <HAL_UART_MspInit+0x158>)
 800d3a8:	f000 fbbc 	bl	800db24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	2027      	movs	r0, #39	@ 0x27
 800d3b2:	f000 faee 	bl	800d992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d3b6:	2027      	movs	r0, #39	@ 0x27
 800d3b8:	f000 fb07 	bl	800d9ca <HAL_NVIC_EnableIRQ>
}
 800d3bc:	bf00      	nop
 800d3be:	3730      	adds	r7, #48	@ 0x30
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	40004400 	.word	0x40004400
 800d3c8:	40023800 	.word	0x40023800
 800d3cc:	40020000 	.word	0x40020000
 800d3d0:	40004800 	.word	0x40004800
 800d3d4:	40020800 	.word	0x40020800
 800d3d8:	40020400 	.word	0x40020400

0800d3dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d3e0:	bf00      	nop
 800d3e2:	e7fd      	b.n	800d3e0 <NMI_Handler+0x4>

0800d3e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d3e8:	bf00      	nop
 800d3ea:	e7fd      	b.n	800d3e8 <HardFault_Handler+0x4>

0800d3ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d3f0:	bf00      	nop
 800d3f2:	e7fd      	b.n	800d3f0 <MemManage_Handler+0x4>

0800d3f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d3f8:	bf00      	nop
 800d3fa:	e7fd      	b.n	800d3f8 <BusFault_Handler+0x4>

0800d3fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d400:	bf00      	nop
 800d402:	e7fd      	b.n	800d400 <UsageFault_Handler+0x4>

0800d404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d404:	b480      	push	{r7}
 800d406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d408:	bf00      	nop
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d412:	b480      	push	{r7}
 800d414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d416:	bf00      	nop
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d424:	bf00      	nop
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d432:	f000 f98f 	bl	800d754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d436:	bf00      	nop
 800d438:	bd80      	pop	{r7, pc}

0800d43a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800d43e:	2001      	movs	r0, #1
 800d440:	f000 fd1e 	bl	800de80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800d444:	bf00      	nop
 800d446:	bd80      	pop	{r7, pc}

0800d448 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d44c:	4802      	ldr	r0, [pc, #8]	@ (800d458 <TIM2_IRQHandler+0x10>)
 800d44e:	f002 fb30 	bl	800fab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800d452:	bf00      	nop
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	200003a4 	.word	0x200003a4

0800d45c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800d460:	4802      	ldr	r0, [pc, #8]	@ (800d46c <SPI2_IRQHandler+0x10>)
 800d462:	f001 ffd5 	bl	800f410 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800d466:	bf00      	nop
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	20000304 	.word	0x20000304

0800d470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d474:	4802      	ldr	r0, [pc, #8]	@ (800d480 <USART2_IRQHandler+0x10>)
 800d476:	f003 fa21 	bl	80108bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d47a:	bf00      	nop
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	200004c4 	.word	0x200004c4

0800d484 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d488:	4802      	ldr	r0, [pc, #8]	@ (800d494 <USART3_IRQHandler+0x10>)
 800d48a:	f003 fa17 	bl	80108bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d48e:	bf00      	nop
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	20000508 	.word	0x20000508

0800d498 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d49c:	4802      	ldr	r0, [pc, #8]	@ (800d4a8 <TIM6_DAC_IRQHandler+0x10>)
 800d49e:	f002 fb08 	bl	800fab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d4a2:	bf00      	nop
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20000434 	.word	0x20000434

0800d4ac <_getpid>:
 800d4ac:	b480      	push	{r7}
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <_kill>:
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
 800d4c6:	f005 fdd9 	bl	801307c <__errno>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2216      	movs	r2, #22
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <_exit>:
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	f04f 31ff 	mov.w	r1, #4294967295
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f7ff ffe7 	bl	800d4bc <_kill>
 800d4ee:	bf00      	nop
 800d4f0:	e7fd      	b.n	800d4ee <_exit+0x12>

0800d4f2 <_read>:
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b086      	sub	sp, #24
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	60f8      	str	r0, [r7, #12]
 800d4fa:	60b9      	str	r1, [r7, #8]
 800d4fc:	607a      	str	r2, [r7, #4]
 800d4fe:	2300      	movs	r3, #0
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	e00a      	b.n	800d51a <_read+0x28>
 800d504:	f3af 8000 	nop.w
 800d508:	4601      	mov	r1, r0
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	60ba      	str	r2, [r7, #8]
 800d510:	b2ca      	uxtb	r2, r1
 800d512:	701a      	strb	r2, [r3, #0]
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	3301      	adds	r3, #1
 800d518:	617b      	str	r3, [r7, #20]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	429a      	cmp	r2, r3
 800d520:	dbf0      	blt.n	800d504 <_read+0x12>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4618      	mov	r0, r3
 800d526:	3718      	adds	r7, #24
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <_write>:
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	2300      	movs	r3, #0
 800d53a:	617b      	str	r3, [r7, #20]
 800d53c:	e009      	b.n	800d552 <_write+0x26>
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	1c5a      	adds	r2, r3, #1
 800d542:	60ba      	str	r2, [r7, #8]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	4618      	mov	r0, r3
 800d548:	f3af 8000 	nop.w
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	3301      	adds	r3, #1
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	429a      	cmp	r2, r3
 800d558:	dbf1      	blt.n	800d53e <_write+0x12>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <_close>:
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	f04f 33ff 	mov.w	r3, #4294967295
 800d570:	4618      	mov	r0, r3
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <_fstat>:
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d58c:	605a      	str	r2, [r3, #4]
 800d58e:	2300      	movs	r3, #0
 800d590:	4618      	mov	r0, r3
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <_isatty>:
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <_lseek>:
 800d5b2:	b480      	push	{r7}
 800d5b4:	b085      	sub	sp, #20
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	60f8      	str	r0, [r7, #12]
 800d5ba:	60b9      	str	r1, [r7, #8]
 800d5bc:	607a      	str	r2, [r7, #4]
 800d5be:	2300      	movs	r3, #0
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <_sbrk>:
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	4a14      	ldr	r2, [pc, #80]	@ (800d628 <_sbrk+0x5c>)
 800d5d6:	4b15      	ldr	r3, [pc, #84]	@ (800d62c <_sbrk+0x60>)
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	617b      	str	r3, [r7, #20]
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	613b      	str	r3, [r7, #16]
 800d5e0:	4b13      	ldr	r3, [pc, #76]	@ (800d630 <_sbrk+0x64>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d102      	bne.n	800d5ee <_sbrk+0x22>
 800d5e8:	4b11      	ldr	r3, [pc, #68]	@ (800d630 <_sbrk+0x64>)
 800d5ea:	4a12      	ldr	r2, [pc, #72]	@ (800d634 <_sbrk+0x68>)
 800d5ec:	601a      	str	r2, [r3, #0]
 800d5ee:	4b10      	ldr	r3, [pc, #64]	@ (800d630 <_sbrk+0x64>)
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	693a      	ldr	r2, [r7, #16]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d207      	bcs.n	800d60c <_sbrk+0x40>
 800d5fc:	f005 fd3e 	bl	801307c <__errno>
 800d600:	4603      	mov	r3, r0
 800d602:	220c      	movs	r2, #12
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	f04f 33ff 	mov.w	r3, #4294967295
 800d60a:	e009      	b.n	800d620 <_sbrk+0x54>
 800d60c:	4b08      	ldr	r3, [pc, #32]	@ (800d630 <_sbrk+0x64>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	60fb      	str	r3, [r7, #12]
 800d612:	4b07      	ldr	r3, [pc, #28]	@ (800d630 <_sbrk+0x64>)
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4413      	add	r3, r2
 800d61a:	4a05      	ldr	r2, [pc, #20]	@ (800d630 <_sbrk+0x64>)
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	4618      	mov	r0, r3
 800d622:	3718      	adds	r7, #24
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20020000 	.word	0x20020000
 800d62c:	00000400 	.word	0x00000400
 800d630:	20000554 	.word	0x20000554
 800d634:	200006b8 	.word	0x200006b8

0800d638 <SystemInit>:
 800d638:	b480      	push	{r7}
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	4b06      	ldr	r3, [pc, #24]	@ (800d658 <SystemInit+0x20>)
 800d63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d642:	4a05      	ldr	r2, [pc, #20]	@ (800d658 <SystemInit+0x20>)
 800d644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800d64c:	bf00      	nop
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	e000ed00 	.word	0xe000ed00

0800d65c <Reset_Handler>:
 800d65c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d694 <LoopFillZerobss+0x12>
 800d660:	480d      	ldr	r0, [pc, #52]	@ (800d698 <LoopFillZerobss+0x16>)
 800d662:	490e      	ldr	r1, [pc, #56]	@ (800d69c <LoopFillZerobss+0x1a>)
 800d664:	4a0e      	ldr	r2, [pc, #56]	@ (800d6a0 <LoopFillZerobss+0x1e>)
 800d666:	2300      	movs	r3, #0
 800d668:	e002      	b.n	800d670 <LoopCopyDataInit>

0800d66a <CopyDataInit>:
 800d66a:	58d4      	ldr	r4, [r2, r3]
 800d66c:	50c4      	str	r4, [r0, r3]
 800d66e:	3304      	adds	r3, #4

0800d670 <LoopCopyDataInit>:
 800d670:	18c4      	adds	r4, r0, r3
 800d672:	428c      	cmp	r4, r1
 800d674:	d3f9      	bcc.n	800d66a <CopyDataInit>
 800d676:	4a0b      	ldr	r2, [pc, #44]	@ (800d6a4 <LoopFillZerobss+0x22>)
 800d678:	4c0b      	ldr	r4, [pc, #44]	@ (800d6a8 <LoopFillZerobss+0x26>)
 800d67a:	2300      	movs	r3, #0
 800d67c:	e001      	b.n	800d682 <LoopFillZerobss>

0800d67e <FillZerobss>:
 800d67e:	6013      	str	r3, [r2, #0]
 800d680:	3204      	adds	r2, #4

0800d682 <LoopFillZerobss>:
 800d682:	42a2      	cmp	r2, r4
 800d684:	d3fb      	bcc.n	800d67e <FillZerobss>
 800d686:	f7ff ffd7 	bl	800d638 <SystemInit>
 800d68a:	f005 fcfd 	bl	8013088 <__libc_init_array>
 800d68e:	f7fe fd6d 	bl	800c16c <main>
 800d692:	4770      	bx	lr
 800d694:	20020000 	.word	0x20020000
 800d698:	20000000 	.word	0x20000000
 800d69c:	200001f0 	.word	0x200001f0
 800d6a0:	0801849c 	.word	0x0801849c
 800d6a4:	200001f0 	.word	0x200001f0
 800d6a8:	200006b8 	.word	0x200006b8

0800d6ac <ADC_IRQHandler>:
 800d6ac:	e7fe      	b.n	800d6ac <ADC_IRQHandler>
	...

0800d6b0 <HAL_Init>:
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d6f0 <HAL_Init+0x40>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a0d      	ldr	r2, [pc, #52]	@ (800d6f0 <HAL_Init+0x40>)
 800d6ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d6f0 <HAL_Init+0x40>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d6f0 <HAL_Init+0x40>)
 800d6c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d6ca:	6013      	str	r3, [r2, #0]
 800d6cc:	4b08      	ldr	r3, [pc, #32]	@ (800d6f0 <HAL_Init+0x40>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a07      	ldr	r2, [pc, #28]	@ (800d6f0 <HAL_Init+0x40>)
 800d6d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	2003      	movs	r0, #3
 800d6da:	f000 f94f 	bl	800d97c <HAL_NVIC_SetPriorityGrouping>
 800d6de:	2000      	movs	r0, #0
 800d6e0:	f000 f808 	bl	800d6f4 <HAL_InitTick>
 800d6e4:	f7ff fbbe 	bl	800ce64 <HAL_MspInit>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	40023c00 	.word	0x40023c00

0800d6f4 <HAL_InitTick>:
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	4b12      	ldr	r3, [pc, #72]	@ (800d748 <HAL_InitTick+0x54>)
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	4b12      	ldr	r3, [pc, #72]	@ (800d74c <HAL_InitTick+0x58>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	4619      	mov	r1, r3
 800d706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d70a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d70e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d712:	4618      	mov	r0, r3
 800d714:	f000 f967 	bl	800d9e6 <HAL_SYSTICK_Config>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <HAL_InitTick+0x2e>
 800d71e:	2301      	movs	r3, #1
 800d720:	e00e      	b.n	800d740 <HAL_InitTick+0x4c>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b0f      	cmp	r3, #15
 800d726:	d80a      	bhi.n	800d73e <HAL_InitTick+0x4a>
 800d728:	2200      	movs	r2, #0
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	f04f 30ff 	mov.w	r0, #4294967295
 800d730:	f000 f92f 	bl	800d992 <HAL_NVIC_SetPriority>
 800d734:	4a06      	ldr	r2, [pc, #24]	@ (800d750 <HAL_InitTick+0x5c>)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	2300      	movs	r3, #0
 800d73c:	e000      	b.n	800d740 <HAL_InitTick+0x4c>
 800d73e:	2301      	movs	r3, #1
 800d740:	4618      	mov	r0, r3
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	20000004 	.word	0x20000004
 800d74c:	2000000c 	.word	0x2000000c
 800d750:	20000008 	.word	0x20000008

0800d754 <HAL_IncTick>:
 800d754:	b480      	push	{r7}
 800d756:	af00      	add	r7, sp, #0
 800d758:	4b06      	ldr	r3, [pc, #24]	@ (800d774 <HAL_IncTick+0x20>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	461a      	mov	r2, r3
 800d75e:	4b06      	ldr	r3, [pc, #24]	@ (800d778 <HAL_IncTick+0x24>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4413      	add	r3, r2
 800d764:	4a04      	ldr	r2, [pc, #16]	@ (800d778 <HAL_IncTick+0x24>)
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	bf00      	nop
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop
 800d774:	2000000c 	.word	0x2000000c
 800d778:	20000558 	.word	0x20000558

0800d77c <HAL_GetTick>:
 800d77c:	b480      	push	{r7}
 800d77e:	af00      	add	r7, sp, #0
 800d780:	4b03      	ldr	r3, [pc, #12]	@ (800d790 <HAL_GetTick+0x14>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4618      	mov	r0, r3
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	20000558 	.word	0x20000558

0800d794 <HAL_Delay>:
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	f7ff ffee 	bl	800d77c <HAL_GetTick>
 800d7a0:	60b8      	str	r0, [r7, #8]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	60fb      	str	r3, [r7, #12]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ac:	d005      	beq.n	800d7ba <HAL_Delay+0x26>
 800d7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <HAL_Delay+0x44>)
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	60fb      	str	r3, [r7, #12]
 800d7ba:	bf00      	nop
 800d7bc:	f7ff ffde 	bl	800d77c <HAL_GetTick>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d8f7      	bhi.n	800d7bc <HAL_Delay+0x28>
 800d7cc:	bf00      	nop
 800d7ce:	bf00      	nop
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	2000000c 	.word	0x2000000c

0800d7dc <__NVIC_SetPriorityGrouping>:
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	@ (800d820 <__NVIC_SetPriorityGrouping+0x44>)
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	60bb      	str	r3, [r7, #8]
 800d7f2:	68ba      	ldr	r2, [r7, #8]
 800d7f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	60bb      	str	r3, [r7, #8]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	021a      	lsls	r2, r3, #8
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	4313      	orrs	r3, r2
 800d804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d80c:	60bb      	str	r3, [r7, #8]
 800d80e:	4a04      	ldr	r2, [pc, #16]	@ (800d820 <__NVIC_SetPriorityGrouping+0x44>)
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	60d3      	str	r3, [r2, #12]
 800d814:	bf00      	nop
 800d816:	3714      	adds	r7, #20
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr
 800d820:	e000ed00 	.word	0xe000ed00

0800d824 <__NVIC_GetPriorityGrouping>:
 800d824:	b480      	push	{r7}
 800d826:	af00      	add	r7, sp, #0
 800d828:	4b04      	ldr	r3, [pc, #16]	@ (800d83c <__NVIC_GetPriorityGrouping+0x18>)
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	0a1b      	lsrs	r3, r3, #8
 800d82e:	f003 0307 	and.w	r3, r3, #7
 800d832:	4618      	mov	r0, r3
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	e000ed00 	.word	0xe000ed00

0800d840 <__NVIC_EnableIRQ>:
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	71fb      	strb	r3, [r7, #7]
 800d84a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	db0b      	blt.n	800d86a <__NVIC_EnableIRQ+0x2a>
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	f003 021f 	and.w	r2, r3, #31
 800d858:	4907      	ldr	r1, [pc, #28]	@ (800d878 <__NVIC_EnableIRQ+0x38>)
 800d85a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d85e:	095b      	lsrs	r3, r3, #5
 800d860:	2001      	movs	r0, #1
 800d862:	fa00 f202 	lsl.w	r2, r0, r2
 800d866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d86a:	bf00      	nop
 800d86c:	370c      	adds	r7, #12
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	e000e100 	.word	0xe000e100

0800d87c <__NVIC_SetPriority>:
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	6039      	str	r1, [r7, #0]
 800d886:	71fb      	strb	r3, [r7, #7]
 800d888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	db0a      	blt.n	800d8a6 <__NVIC_SetPriority+0x2a>
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	b2da      	uxtb	r2, r3
 800d894:	490c      	ldr	r1, [pc, #48]	@ (800d8c8 <__NVIC_SetPriority+0x4c>)
 800d896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d89a:	0112      	lsls	r2, r2, #4
 800d89c:	b2d2      	uxtb	r2, r2
 800d89e:	440b      	add	r3, r1
 800d8a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800d8a4:	e00a      	b.n	800d8bc <__NVIC_SetPriority+0x40>
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	4908      	ldr	r1, [pc, #32]	@ (800d8cc <__NVIC_SetPriority+0x50>)
 800d8ac:	79fb      	ldrb	r3, [r7, #7]
 800d8ae:	f003 030f 	and.w	r3, r3, #15
 800d8b2:	3b04      	subs	r3, #4
 800d8b4:	0112      	lsls	r2, r2, #4
 800d8b6:	b2d2      	uxtb	r2, r2
 800d8b8:	440b      	add	r3, r1
 800d8ba:	761a      	strb	r2, [r3, #24]
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	e000e100 	.word	0xe000e100
 800d8cc:	e000ed00 	.word	0xe000ed00

0800d8d0 <NVIC_EncodePriority>:
 800d8d0:	b480      	push	{r7}
 800d8d2:	b089      	sub	sp, #36	@ 0x24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f003 0307 	and.w	r3, r3, #7
 800d8e2:	61fb      	str	r3, [r7, #28]
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	f1c3 0307 	rsb	r3, r3, #7
 800d8ea:	2b04      	cmp	r3, #4
 800d8ec:	bf28      	it	cs
 800d8ee:	2304      	movcs	r3, #4
 800d8f0:	61bb      	str	r3, [r7, #24]
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	2b06      	cmp	r3, #6
 800d8f8:	d902      	bls.n	800d900 <NVIC_EncodePriority+0x30>
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	3b03      	subs	r3, #3
 800d8fe:	e000      	b.n	800d902 <NVIC_EncodePriority+0x32>
 800d900:	2300      	movs	r3, #0
 800d902:	617b      	str	r3, [r7, #20]
 800d904:	f04f 32ff 	mov.w	r2, #4294967295
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	fa02 f303 	lsl.w	r3, r2, r3
 800d90e:	43da      	mvns	r2, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	401a      	ands	r2, r3
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	409a      	lsls	r2, r3
 800d918:	f04f 31ff 	mov.w	r1, #4294967295
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	fa01 f303 	lsl.w	r3, r1, r3
 800d922:	43d9      	mvns	r1, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	400b      	ands	r3, r1
 800d928:	4313      	orrs	r3, r2
 800d92a:	4618      	mov	r0, r3
 800d92c:	3724      	adds	r7, #36	@ 0x24
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
	...

0800d938 <SysTick_Config>:
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3b01      	subs	r3, #1
 800d944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d948:	d301      	bcc.n	800d94e <SysTick_Config+0x16>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e00f      	b.n	800d96e <SysTick_Config+0x36>
 800d94e:	4a0a      	ldr	r2, [pc, #40]	@ (800d978 <SysTick_Config+0x40>)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	3b01      	subs	r3, #1
 800d954:	6053      	str	r3, [r2, #4]
 800d956:	210f      	movs	r1, #15
 800d958:	f04f 30ff 	mov.w	r0, #4294967295
 800d95c:	f7ff ff8e 	bl	800d87c <__NVIC_SetPriority>
 800d960:	4b05      	ldr	r3, [pc, #20]	@ (800d978 <SysTick_Config+0x40>)
 800d962:	2200      	movs	r2, #0
 800d964:	609a      	str	r2, [r3, #8]
 800d966:	4b04      	ldr	r3, [pc, #16]	@ (800d978 <SysTick_Config+0x40>)
 800d968:	2207      	movs	r2, #7
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	2300      	movs	r3, #0
 800d96e:	4618      	mov	r0, r3
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	e000e010 	.word	0xe000e010

0800d97c <HAL_NVIC_SetPriorityGrouping>:
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff ff29 	bl	800d7dc <__NVIC_SetPriorityGrouping>
 800d98a:	bf00      	nop
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <HAL_NVIC_SetPriority>:
 800d992:	b580      	push	{r7, lr}
 800d994:	b086      	sub	sp, #24
 800d996:	af00      	add	r7, sp, #0
 800d998:	4603      	mov	r3, r0
 800d99a:	60b9      	str	r1, [r7, #8]
 800d99c:	607a      	str	r2, [r7, #4]
 800d99e:	73fb      	strb	r3, [r7, #15]
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	617b      	str	r3, [r7, #20]
 800d9a4:	f7ff ff3e 	bl	800d824 <__NVIC_GetPriorityGrouping>
 800d9a8:	6178      	str	r0, [r7, #20]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	68b9      	ldr	r1, [r7, #8]
 800d9ae:	6978      	ldr	r0, [r7, #20]
 800d9b0:	f7ff ff8e 	bl	800d8d0 <NVIC_EncodePriority>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff ff5d 	bl	800d87c <__NVIC_SetPriority>
 800d9c2:	bf00      	nop
 800d9c4:	3718      	adds	r7, #24
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <HAL_NVIC_EnableIRQ>:
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	71fb      	strb	r3, [r7, #7]
 800d9d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7ff ff31 	bl	800d840 <__NVIC_EnableIRQ>
 800d9de:	bf00      	nop
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <HAL_SYSTICK_Config>:
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff ffa2 	bl	800d938 <SysTick_Config>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <HAL_DMA_Abort>:
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b084      	sub	sp, #16
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da0a:	60fb      	str	r3, [r7, #12]
 800da0c:	f7ff feb6 	bl	800d77c <HAL_GetTick>
 800da10:	60b8      	str	r0, [r7, #8]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	d008      	beq.n	800da30 <HAL_DMA_Abort+0x32>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2280      	movs	r2, #128	@ 0x80
 800da22:	655a      	str	r2, [r3, #84]	@ 0x54
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800da2c:	2301      	movs	r3, #1
 800da2e:	e052      	b.n	800dad6 <HAL_DMA_Abort+0xd8>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 0216 	bic.w	r2, r2, #22
 800da3e:	601a      	str	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	695a      	ldr	r2, [r3, #20]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800da4e:	615a      	str	r2, [r3, #20]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da54:	2b00      	cmp	r3, #0
 800da56:	d103      	bne.n	800da60 <HAL_DMA_Abort+0x62>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d007      	beq.n	800da70 <HAL_DMA_Abort+0x72>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f022 0208 	bic.w	r2, r2, #8
 800da6e:	601a      	str	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f022 0201 	bic.w	r2, r2, #1
 800da7e:	601a      	str	r2, [r3, #0]
 800da80:	e013      	b.n	800daaa <HAL_DMA_Abort+0xac>
 800da82:	f7ff fe7b 	bl	800d77c <HAL_GetTick>
 800da86:	4602      	mov	r2, r0
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	1ad3      	subs	r3, r2, r3
 800da8c:	2b05      	cmp	r3, #5
 800da8e:	d90c      	bls.n	800daaa <HAL_DMA_Abort+0xac>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2220      	movs	r2, #32
 800da94:	655a      	str	r2, [r3, #84]	@ 0x54
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2203      	movs	r2, #3
 800da9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800daa6:	2303      	movs	r3, #3
 800daa8:	e015      	b.n	800dad6 <HAL_DMA_Abort+0xd8>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f003 0301 	and.w	r3, r3, #1
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1e4      	bne.n	800da82 <HAL_DMA_Abort+0x84>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dabc:	223f      	movs	r2, #63	@ 0x3f
 800dabe:	409a      	lsls	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	609a      	str	r2, [r3, #8]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800dad4:	2300      	movs	r3, #0
 800dad6:	4618      	mov	r0, r3
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <HAL_DMA_Abort_IT>:
 800dade:	b480      	push	{r7}
 800dae0:	b083      	sub	sp, #12
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d004      	beq.n	800dafc <HAL_DMA_Abort_IT+0x1e>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2280      	movs	r2, #128	@ 0x80
 800daf6:	655a      	str	r2, [r3, #84]	@ 0x54
 800daf8:	2301      	movs	r3, #1
 800dafa:	e00c      	b.n	800db16 <HAL_DMA_Abort_IT+0x38>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2205      	movs	r2, #5
 800db00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f022 0201 	bic.w	r2, r2, #1
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	2300      	movs	r3, #0
 800db16:	4618      	mov	r0, r3
 800db18:	370c      	adds	r7, #12
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
	...

0800db24 <HAL_GPIO_Init>:
 800db24:	b480      	push	{r7}
 800db26:	b089      	sub	sp, #36	@ 0x24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
 800db2e:	2300      	movs	r3, #0
 800db30:	617b      	str	r3, [r7, #20]
 800db32:	2300      	movs	r3, #0
 800db34:	613b      	str	r3, [r7, #16]
 800db36:	2300      	movs	r3, #0
 800db38:	61bb      	str	r3, [r7, #24]
 800db3a:	2300      	movs	r3, #0
 800db3c:	61fb      	str	r3, [r7, #28]
 800db3e:	e165      	b.n	800de0c <HAL_GPIO_Init+0x2e8>
 800db40:	2201      	movs	r2, #1
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	fa02 f303 	lsl.w	r3, r2, r3
 800db48:	617b      	str	r3, [r7, #20]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	4013      	ands	r3, r2
 800db52:	613b      	str	r3, [r7, #16]
 800db54:	693a      	ldr	r2, [r7, #16]
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	429a      	cmp	r2, r3
 800db5a:	f040 8154 	bne.w	800de06 <HAL_GPIO_Init+0x2e2>
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	f003 0303 	and.w	r3, r3, #3
 800db66:	2b01      	cmp	r3, #1
 800db68:	d005      	beq.n	800db76 <HAL_GPIO_Init+0x52>
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	f003 0303 	and.w	r3, r3, #3
 800db72:	2b02      	cmp	r3, #2
 800db74:	d130      	bne.n	800dbd8 <HAL_GPIO_Init+0xb4>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	61bb      	str	r3, [r7, #24]
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	2203      	movs	r2, #3
 800db82:	fa02 f303 	lsl.w	r3, r2, r3
 800db86:	43db      	mvns	r3, r3
 800db88:	69ba      	ldr	r2, [r7, #24]
 800db8a:	4013      	ands	r3, r2
 800db8c:	61bb      	str	r3, [r7, #24]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	68da      	ldr	r2, [r3, #12]
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	fa02 f303 	lsl.w	r3, r2, r3
 800db9a:	69ba      	ldr	r2, [r7, #24]
 800db9c:	4313      	orrs	r3, r2
 800db9e:	61bb      	str	r3, [r7, #24]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	69ba      	ldr	r2, [r7, #24]
 800dba4:	609a      	str	r2, [r3, #8]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	61bb      	str	r3, [r7, #24]
 800dbac:	2201      	movs	r2, #1
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbb4:	43db      	mvns	r3, r3
 800dbb6:	69ba      	ldr	r2, [r7, #24]
 800dbb8:	4013      	ands	r3, r2
 800dbba:	61bb      	str	r3, [r7, #24]
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	091b      	lsrs	r3, r3, #4
 800dbc2:	f003 0201 	and.w	r2, r3, #1
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbcc:	69ba      	ldr	r2, [r7, #24]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	61bb      	str	r3, [r7, #24]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	69ba      	ldr	r2, [r7, #24]
 800dbd6:	605a      	str	r2, [r3, #4]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f003 0303 	and.w	r3, r3, #3
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	d017      	beq.n	800dc14 <HAL_GPIO_Init+0xf0>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	61bb      	str	r3, [r7, #24]
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	2203      	movs	r2, #3
 800dbf0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf4:	43db      	mvns	r3, r3
 800dbf6:	69ba      	ldr	r2, [r7, #24]
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	61bb      	str	r3, [r7, #24]
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	689a      	ldr	r2, [r3, #8]
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	fa02 f303 	lsl.w	r3, r2, r3
 800dc08:	69ba      	ldr	r2, [r7, #24]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	61bb      	str	r3, [r7, #24]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	69ba      	ldr	r2, [r7, #24]
 800dc12:	60da      	str	r2, [r3, #12]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	f003 0303 	and.w	r3, r3, #3
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d123      	bne.n	800dc68 <HAL_GPIO_Init+0x144>
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	08da      	lsrs	r2, r3, #3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	3208      	adds	r2, #8
 800dc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc2c:	61bb      	str	r3, [r7, #24]
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	f003 0307 	and.w	r3, r3, #7
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	220f      	movs	r2, #15
 800dc38:	fa02 f303 	lsl.w	r3, r2, r3
 800dc3c:	43db      	mvns	r3, r3
 800dc3e:	69ba      	ldr	r2, [r7, #24]
 800dc40:	4013      	ands	r3, r2
 800dc42:	61bb      	str	r3, [r7, #24]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	691a      	ldr	r2, [r3, #16]
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	f003 0307 	and.w	r3, r3, #7
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	fa02 f303 	lsl.w	r3, r2, r3
 800dc54:	69ba      	ldr	r2, [r7, #24]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	61bb      	str	r3, [r7, #24]
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	08da      	lsrs	r2, r3, #3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	3208      	adds	r2, #8
 800dc62:	69b9      	ldr	r1, [r7, #24]
 800dc64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	61bb      	str	r3, [r7, #24]
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	005b      	lsls	r3, r3, #1
 800dc72:	2203      	movs	r2, #3
 800dc74:	fa02 f303 	lsl.w	r3, r2, r3
 800dc78:	43db      	mvns	r3, r3
 800dc7a:	69ba      	ldr	r2, [r7, #24]
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	61bb      	str	r3, [r7, #24]
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	f003 0203 	and.w	r2, r3, #3
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc90:	69ba      	ldr	r2, [r7, #24]
 800dc92:	4313      	orrs	r3, r2
 800dc94:	61bb      	str	r3, [r7, #24]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	69ba      	ldr	r2, [r7, #24]
 800dc9a:	601a      	str	r2, [r3, #0]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f000 80ae 	beq.w	800de06 <HAL_GPIO_Init+0x2e2>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60fb      	str	r3, [r7, #12]
 800dcae:	4b5d      	ldr	r3, [pc, #372]	@ (800de24 <HAL_GPIO_Init+0x300>)
 800dcb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcb2:	4a5c      	ldr	r2, [pc, #368]	@ (800de24 <HAL_GPIO_Init+0x300>)
 800dcb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dcb8:	6453      	str	r3, [r2, #68]	@ 0x44
 800dcba:	4b5a      	ldr	r3, [pc, #360]	@ (800de24 <HAL_GPIO_Init+0x300>)
 800dcbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcc2:	60fb      	str	r3, [r7, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	4a58      	ldr	r2, [pc, #352]	@ (800de28 <HAL_GPIO_Init+0x304>)
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	089b      	lsrs	r3, r3, #2
 800dccc:	3302      	adds	r3, #2
 800dcce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcd2:	61bb      	str	r3, [r7, #24]
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	f003 0303 	and.w	r3, r3, #3
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	220f      	movs	r2, #15
 800dcde:	fa02 f303 	lsl.w	r3, r2, r3
 800dce2:	43db      	mvns	r3, r3
 800dce4:	69ba      	ldr	r2, [r7, #24]
 800dce6:	4013      	ands	r3, r2
 800dce8:	61bb      	str	r3, [r7, #24]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a4f      	ldr	r2, [pc, #316]	@ (800de2c <HAL_GPIO_Init+0x308>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d025      	beq.n	800dd3e <HAL_GPIO_Init+0x21a>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a4e      	ldr	r2, [pc, #312]	@ (800de30 <HAL_GPIO_Init+0x30c>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d01f      	beq.n	800dd3a <HAL_GPIO_Init+0x216>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a4d      	ldr	r2, [pc, #308]	@ (800de34 <HAL_GPIO_Init+0x310>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d019      	beq.n	800dd36 <HAL_GPIO_Init+0x212>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a4c      	ldr	r2, [pc, #304]	@ (800de38 <HAL_GPIO_Init+0x314>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d013      	beq.n	800dd32 <HAL_GPIO_Init+0x20e>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a4b      	ldr	r2, [pc, #300]	@ (800de3c <HAL_GPIO_Init+0x318>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d00d      	beq.n	800dd2e <HAL_GPIO_Init+0x20a>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a4a      	ldr	r2, [pc, #296]	@ (800de40 <HAL_GPIO_Init+0x31c>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d007      	beq.n	800dd2a <HAL_GPIO_Init+0x206>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a49      	ldr	r2, [pc, #292]	@ (800de44 <HAL_GPIO_Init+0x320>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d101      	bne.n	800dd26 <HAL_GPIO_Init+0x202>
 800dd22:	2306      	movs	r3, #6
 800dd24:	e00c      	b.n	800dd40 <HAL_GPIO_Init+0x21c>
 800dd26:	2307      	movs	r3, #7
 800dd28:	e00a      	b.n	800dd40 <HAL_GPIO_Init+0x21c>
 800dd2a:	2305      	movs	r3, #5
 800dd2c:	e008      	b.n	800dd40 <HAL_GPIO_Init+0x21c>
 800dd2e:	2304      	movs	r3, #4
 800dd30:	e006      	b.n	800dd40 <HAL_GPIO_Init+0x21c>
 800dd32:	2303      	movs	r3, #3
 800dd34:	e004      	b.n	800dd40 <HAL_GPIO_Init+0x21c>
 800dd36:	2302      	movs	r3, #2
 800dd38:	e002      	b.n	800dd40 <HAL_GPIO_Init+0x21c>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e000      	b.n	800dd40 <HAL_GPIO_Init+0x21c>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	69fa      	ldr	r2, [r7, #28]
 800dd42:	f002 0203 	and.w	r2, r2, #3
 800dd46:	0092      	lsls	r2, r2, #2
 800dd48:	4093      	lsls	r3, r2
 800dd4a:	69ba      	ldr	r2, [r7, #24]
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	61bb      	str	r3, [r7, #24]
 800dd50:	4935      	ldr	r1, [pc, #212]	@ (800de28 <HAL_GPIO_Init+0x304>)
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	089b      	lsrs	r3, r3, #2
 800dd56:	3302      	adds	r3, #2
 800dd58:	69ba      	ldr	r2, [r7, #24]
 800dd5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dd5e:	4b3a      	ldr	r3, [pc, #232]	@ (800de48 <HAL_GPIO_Init+0x324>)
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	61bb      	str	r3, [r7, #24]
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	43db      	mvns	r3, r3
 800dd68:	69ba      	ldr	r2, [r7, #24]
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	61bb      	str	r3, [r7, #24]
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d003      	beq.n	800dd82 <HAL_GPIO_Init+0x25e>
 800dd7a:	69ba      	ldr	r2, [r7, #24]
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	61bb      	str	r3, [r7, #24]
 800dd82:	4a31      	ldr	r2, [pc, #196]	@ (800de48 <HAL_GPIO_Init+0x324>)
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	6093      	str	r3, [r2, #8]
 800dd88:	4b2f      	ldr	r3, [pc, #188]	@ (800de48 <HAL_GPIO_Init+0x324>)
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	61bb      	str	r3, [r7, #24]
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	43db      	mvns	r3, r3
 800dd92:	69ba      	ldr	r2, [r7, #24]
 800dd94:	4013      	ands	r3, r2
 800dd96:	61bb      	str	r3, [r7, #24]
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d003      	beq.n	800ddac <HAL_GPIO_Init+0x288>
 800dda4:	69ba      	ldr	r2, [r7, #24]
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	61bb      	str	r3, [r7, #24]
 800ddac:	4a26      	ldr	r2, [pc, #152]	@ (800de48 <HAL_GPIO_Init+0x324>)
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	60d3      	str	r3, [r2, #12]
 800ddb2:	4b25      	ldr	r3, [pc, #148]	@ (800de48 <HAL_GPIO_Init+0x324>)
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	61bb      	str	r3, [r7, #24]
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	43db      	mvns	r3, r3
 800ddbc:	69ba      	ldr	r2, [r7, #24]
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	61bb      	str	r3, [r7, #24]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d003      	beq.n	800ddd6 <HAL_GPIO_Init+0x2b2>
 800ddce:	69ba      	ldr	r2, [r7, #24]
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	61bb      	str	r3, [r7, #24]
 800ddd6:	4a1c      	ldr	r2, [pc, #112]	@ (800de48 <HAL_GPIO_Init+0x324>)
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	6053      	str	r3, [r2, #4]
 800dddc:	4b1a      	ldr	r3, [pc, #104]	@ (800de48 <HAL_GPIO_Init+0x324>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	61bb      	str	r3, [r7, #24]
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	43db      	mvns	r3, r3
 800dde6:	69ba      	ldr	r2, [r7, #24]
 800dde8:	4013      	ands	r3, r2
 800ddea:	61bb      	str	r3, [r7, #24]
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d003      	beq.n	800de00 <HAL_GPIO_Init+0x2dc>
 800ddf8:	69ba      	ldr	r2, [r7, #24]
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	61bb      	str	r3, [r7, #24]
 800de00:	4a11      	ldr	r2, [pc, #68]	@ (800de48 <HAL_GPIO_Init+0x324>)
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	6013      	str	r3, [r2, #0]
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	3301      	adds	r3, #1
 800de0a:	61fb      	str	r3, [r7, #28]
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	2b0f      	cmp	r3, #15
 800de10:	f67f ae96 	bls.w	800db40 <HAL_GPIO_Init+0x1c>
 800de14:	bf00      	nop
 800de16:	bf00      	nop
 800de18:	3724      	adds	r7, #36	@ 0x24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	40023800 	.word	0x40023800
 800de28:	40013800 	.word	0x40013800
 800de2c:	40020000 	.word	0x40020000
 800de30:	40020400 	.word	0x40020400
 800de34:	40020800 	.word	0x40020800
 800de38:	40020c00 	.word	0x40020c00
 800de3c:	40021000 	.word	0x40021000
 800de40:	40021400 	.word	0x40021400
 800de44:	40021800 	.word	0x40021800
 800de48:	40013c00 	.word	0x40013c00

0800de4c <HAL_GPIO_WritePin>:
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	807b      	strh	r3, [r7, #2]
 800de58:	4613      	mov	r3, r2
 800de5a:	707b      	strb	r3, [r7, #1]
 800de5c:	787b      	ldrb	r3, [r7, #1]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d003      	beq.n	800de6a <HAL_GPIO_WritePin+0x1e>
 800de62:	887a      	ldrh	r2, [r7, #2]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	619a      	str	r2, [r3, #24]
 800de68:	e003      	b.n	800de72 <HAL_GPIO_WritePin+0x26>
 800de6a:	887b      	ldrh	r3, [r7, #2]
 800de6c:	041a      	lsls	r2, r3, #16
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	619a      	str	r2, [r3, #24]
 800de72:	bf00      	nop
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
	...

0800de80 <HAL_GPIO_EXTI_IRQHandler>:
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	4603      	mov	r3, r0
 800de88:	80fb      	strh	r3, [r7, #6]
 800de8a:	4b08      	ldr	r3, [pc, #32]	@ (800deac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800de8c:	695a      	ldr	r2, [r3, #20]
 800de8e:	88fb      	ldrh	r3, [r7, #6]
 800de90:	4013      	ands	r3, r2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d006      	beq.n	800dea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800de96:	4a05      	ldr	r2, [pc, #20]	@ (800deac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800de98:	88fb      	ldrh	r3, [r7, #6]
 800de9a:	6153      	str	r3, [r2, #20]
 800de9c:	88fb      	ldrh	r3, [r7, #6]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fe ff30 	bl	800cd04 <HAL_GPIO_EXTI_Callback>
 800dea4:	bf00      	nop
 800dea6:	3708      	adds	r7, #8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	40013c00 	.word	0x40013c00

0800deb0 <HAL_PWREx_EnableOverDrive>:
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	2300      	movs	r3, #0
 800deb8:	607b      	str	r3, [r7, #4]
 800deba:	2300      	movs	r3, #0
 800debc:	603b      	str	r3, [r7, #0]
 800debe:	4b20      	ldr	r3, [pc, #128]	@ (800df40 <HAL_PWREx_EnableOverDrive+0x90>)
 800dec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dec2:	4a1f      	ldr	r2, [pc, #124]	@ (800df40 <HAL_PWREx_EnableOverDrive+0x90>)
 800dec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dec8:	6413      	str	r3, [r2, #64]	@ 0x40
 800deca:	4b1d      	ldr	r3, [pc, #116]	@ (800df40 <HAL_PWREx_EnableOverDrive+0x90>)
 800decc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ded2:	603b      	str	r3, [r7, #0]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	4b1b      	ldr	r3, [pc, #108]	@ (800df44 <HAL_PWREx_EnableOverDrive+0x94>)
 800ded8:	2201      	movs	r2, #1
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	f7ff fc4e 	bl	800d77c <HAL_GetTick>
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	e009      	b.n	800def8 <HAL_PWREx_EnableOverDrive+0x48>
 800dee4:	f7ff fc4a 	bl	800d77c <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800def2:	d901      	bls.n	800def8 <HAL_PWREx_EnableOverDrive+0x48>
 800def4:	2303      	movs	r3, #3
 800def6:	e01f      	b.n	800df38 <HAL_PWREx_EnableOverDrive+0x88>
 800def8:	4b13      	ldr	r3, [pc, #76]	@ (800df48 <HAL_PWREx_EnableOverDrive+0x98>)
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800df00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df04:	d1ee      	bne.n	800dee4 <HAL_PWREx_EnableOverDrive+0x34>
 800df06:	4b11      	ldr	r3, [pc, #68]	@ (800df4c <HAL_PWREx_EnableOverDrive+0x9c>)
 800df08:	2201      	movs	r2, #1
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	f7ff fc36 	bl	800d77c <HAL_GetTick>
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	e009      	b.n	800df28 <HAL_PWREx_EnableOverDrive+0x78>
 800df14:	f7ff fc32 	bl	800d77c <HAL_GetTick>
 800df18:	4602      	mov	r2, r0
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df22:	d901      	bls.n	800df28 <HAL_PWREx_EnableOverDrive+0x78>
 800df24:	2303      	movs	r3, #3
 800df26:	e007      	b.n	800df38 <HAL_PWREx_EnableOverDrive+0x88>
 800df28:	4b07      	ldr	r3, [pc, #28]	@ (800df48 <HAL_PWREx_EnableOverDrive+0x98>)
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df34:	d1ee      	bne.n	800df14 <HAL_PWREx_EnableOverDrive+0x64>
 800df36:	2300      	movs	r3, #0
 800df38:	4618      	mov	r0, r3
 800df3a:	3708      	adds	r7, #8
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	40023800 	.word	0x40023800
 800df44:	420e0040 	.word	0x420e0040
 800df48:	40007000 	.word	0x40007000
 800df4c:	420e0044 	.word	0x420e0044

0800df50 <HAL_RCC_ClockConfig>:
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <HAL_RCC_ClockConfig+0x14>
 800df60:	2301      	movs	r3, #1
 800df62:	e0cc      	b.n	800e0fe <HAL_RCC_ClockConfig+0x1ae>
 800df64:	4b68      	ldr	r3, [pc, #416]	@ (800e108 <HAL_RCC_ClockConfig+0x1b8>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f003 030f 	and.w	r3, r3, #15
 800df6c:	683a      	ldr	r2, [r7, #0]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d90c      	bls.n	800df8c <HAL_RCC_ClockConfig+0x3c>
 800df72:	4b65      	ldr	r3, [pc, #404]	@ (800e108 <HAL_RCC_ClockConfig+0x1b8>)
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	b2d2      	uxtb	r2, r2
 800df78:	701a      	strb	r2, [r3, #0]
 800df7a:	4b63      	ldr	r3, [pc, #396]	@ (800e108 <HAL_RCC_ClockConfig+0x1b8>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f003 030f 	and.w	r3, r3, #15
 800df82:	683a      	ldr	r2, [r7, #0]
 800df84:	429a      	cmp	r2, r3
 800df86:	d001      	beq.n	800df8c <HAL_RCC_ClockConfig+0x3c>
 800df88:	2301      	movs	r3, #1
 800df8a:	e0b8      	b.n	800e0fe <HAL_RCC_ClockConfig+0x1ae>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f003 0302 	and.w	r3, r3, #2
 800df94:	2b00      	cmp	r3, #0
 800df96:	d020      	beq.n	800dfda <HAL_RCC_ClockConfig+0x8a>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f003 0304 	and.w	r3, r3, #4
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d005      	beq.n	800dfb0 <HAL_RCC_ClockConfig+0x60>
 800dfa4:	4b59      	ldr	r3, [pc, #356]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	4a58      	ldr	r2, [pc, #352]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800dfaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800dfae:	6093      	str	r3, [r2, #8]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f003 0308 	and.w	r3, r3, #8
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d005      	beq.n	800dfc8 <HAL_RCC_ClockConfig+0x78>
 800dfbc:	4b53      	ldr	r3, [pc, #332]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	4a52      	ldr	r2, [pc, #328]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800dfc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800dfc6:	6093      	str	r3, [r2, #8]
 800dfc8:	4b50      	ldr	r3, [pc, #320]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	494d      	ldr	r1, [pc, #308]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	608b      	str	r3, [r1, #8]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d044      	beq.n	800e070 <HAL_RCC_ClockConfig+0x120>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d107      	bne.n	800dffe <HAL_RCC_ClockConfig+0xae>
 800dfee:	4b47      	ldr	r3, [pc, #284]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d119      	bne.n	800e02e <HAL_RCC_ClockConfig+0xde>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e07f      	b.n	800e0fe <HAL_RCC_ClockConfig+0x1ae>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	2b02      	cmp	r3, #2
 800e004:	d003      	beq.n	800e00e <HAL_RCC_ClockConfig+0xbe>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	2b03      	cmp	r3, #3
 800e00c:	d107      	bne.n	800e01e <HAL_RCC_ClockConfig+0xce>
 800e00e:	4b3f      	ldr	r3, [pc, #252]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e016:	2b00      	cmp	r3, #0
 800e018:	d109      	bne.n	800e02e <HAL_RCC_ClockConfig+0xde>
 800e01a:	2301      	movs	r3, #1
 800e01c:	e06f      	b.n	800e0fe <HAL_RCC_ClockConfig+0x1ae>
 800e01e:	4b3b      	ldr	r3, [pc, #236]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f003 0302 	and.w	r3, r3, #2
 800e026:	2b00      	cmp	r3, #0
 800e028:	d101      	bne.n	800e02e <HAL_RCC_ClockConfig+0xde>
 800e02a:	2301      	movs	r3, #1
 800e02c:	e067      	b.n	800e0fe <HAL_RCC_ClockConfig+0x1ae>
 800e02e:	4b37      	ldr	r3, [pc, #220]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	f023 0203 	bic.w	r2, r3, #3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	4934      	ldr	r1, [pc, #208]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e03c:	4313      	orrs	r3, r2
 800e03e:	608b      	str	r3, [r1, #8]
 800e040:	f7ff fb9c 	bl	800d77c <HAL_GetTick>
 800e044:	60f8      	str	r0, [r7, #12]
 800e046:	e00a      	b.n	800e05e <HAL_RCC_ClockConfig+0x10e>
 800e048:	f7ff fb98 	bl	800d77c <HAL_GetTick>
 800e04c:	4602      	mov	r2, r0
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	1ad3      	subs	r3, r2, r3
 800e052:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e056:	4293      	cmp	r3, r2
 800e058:	d901      	bls.n	800e05e <HAL_RCC_ClockConfig+0x10e>
 800e05a:	2303      	movs	r3, #3
 800e05c:	e04f      	b.n	800e0fe <HAL_RCC_ClockConfig+0x1ae>
 800e05e:	4b2b      	ldr	r3, [pc, #172]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	f003 020c 	and.w	r2, r3, #12
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d1eb      	bne.n	800e048 <HAL_RCC_ClockConfig+0xf8>
 800e070:	4b25      	ldr	r3, [pc, #148]	@ (800e108 <HAL_RCC_ClockConfig+0x1b8>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f003 030f 	and.w	r3, r3, #15
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d20c      	bcs.n	800e098 <HAL_RCC_ClockConfig+0x148>
 800e07e:	4b22      	ldr	r3, [pc, #136]	@ (800e108 <HAL_RCC_ClockConfig+0x1b8>)
 800e080:	683a      	ldr	r2, [r7, #0]
 800e082:	b2d2      	uxtb	r2, r2
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	4b20      	ldr	r3, [pc, #128]	@ (800e108 <HAL_RCC_ClockConfig+0x1b8>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f003 030f 	and.w	r3, r3, #15
 800e08e:	683a      	ldr	r2, [r7, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	d001      	beq.n	800e098 <HAL_RCC_ClockConfig+0x148>
 800e094:	2301      	movs	r3, #1
 800e096:	e032      	b.n	800e0fe <HAL_RCC_ClockConfig+0x1ae>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d008      	beq.n	800e0b6 <HAL_RCC_ClockConfig+0x166>
 800e0a4:	4b19      	ldr	r3, [pc, #100]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	4916      	ldr	r1, [pc, #88]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	608b      	str	r3, [r1, #8]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f003 0308 	and.w	r3, r3, #8
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d009      	beq.n	800e0d6 <HAL_RCC_ClockConfig+0x186>
 800e0c2:	4b12      	ldr	r3, [pc, #72]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	691b      	ldr	r3, [r3, #16]
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	490e      	ldr	r1, [pc, #56]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	608b      	str	r3, [r1, #8]
 800e0d6:	f000 f855 	bl	800e184 <HAL_RCC_GetSysClockFreq>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800e10c <HAL_RCC_ClockConfig+0x1bc>)
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	091b      	lsrs	r3, r3, #4
 800e0e2:	f003 030f 	and.w	r3, r3, #15
 800e0e6:	490a      	ldr	r1, [pc, #40]	@ (800e110 <HAL_RCC_ClockConfig+0x1c0>)
 800e0e8:	5ccb      	ldrb	r3, [r1, r3]
 800e0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ee:	4a09      	ldr	r2, [pc, #36]	@ (800e114 <HAL_RCC_ClockConfig+0x1c4>)
 800e0f0:	6013      	str	r3, [r2, #0]
 800e0f2:	4b09      	ldr	r3, [pc, #36]	@ (800e118 <HAL_RCC_ClockConfig+0x1c8>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7ff fafc 	bl	800d6f4 <HAL_InitTick>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4618      	mov	r0, r3
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	40023c00 	.word	0x40023c00
 800e10c:	40023800 	.word	0x40023800
 800e110:	08016058 	.word	0x08016058
 800e114:	20000004 	.word	0x20000004
 800e118:	20000008 	.word	0x20000008

0800e11c <HAL_RCC_GetHCLKFreq>:
 800e11c:	b480      	push	{r7}
 800e11e:	af00      	add	r7, sp, #0
 800e120:	4b03      	ldr	r3, [pc, #12]	@ (800e130 <HAL_RCC_GetHCLKFreq+0x14>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4618      	mov	r0, r3
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	20000004 	.word	0x20000004

0800e134 <HAL_RCC_GetPCLK1Freq>:
 800e134:	b580      	push	{r7, lr}
 800e136:	af00      	add	r7, sp, #0
 800e138:	f7ff fff0 	bl	800e11c <HAL_RCC_GetHCLKFreq>
 800e13c:	4602      	mov	r2, r0
 800e13e:	4b05      	ldr	r3, [pc, #20]	@ (800e154 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	0a9b      	lsrs	r3, r3, #10
 800e144:	f003 0307 	and.w	r3, r3, #7
 800e148:	4903      	ldr	r1, [pc, #12]	@ (800e158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e14a:	5ccb      	ldrb	r3, [r1, r3]
 800e14c:	fa22 f303 	lsr.w	r3, r2, r3
 800e150:	4618      	mov	r0, r3
 800e152:	bd80      	pop	{r7, pc}
 800e154:	40023800 	.word	0x40023800
 800e158:	08016068 	.word	0x08016068

0800e15c <HAL_RCC_GetPCLK2Freq>:
 800e15c:	b580      	push	{r7, lr}
 800e15e:	af00      	add	r7, sp, #0
 800e160:	f7ff ffdc 	bl	800e11c <HAL_RCC_GetHCLKFreq>
 800e164:	4602      	mov	r2, r0
 800e166:	4b05      	ldr	r3, [pc, #20]	@ (800e17c <HAL_RCC_GetPCLK2Freq+0x20>)
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	0b5b      	lsrs	r3, r3, #13
 800e16c:	f003 0307 	and.w	r3, r3, #7
 800e170:	4903      	ldr	r1, [pc, #12]	@ (800e180 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e172:	5ccb      	ldrb	r3, [r1, r3]
 800e174:	fa22 f303 	lsr.w	r3, r2, r3
 800e178:	4618      	mov	r0, r3
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	40023800 	.word	0x40023800
 800e180:	08016068 	.word	0x08016068

0800e184 <HAL_RCC_GetSysClockFreq>:
 800e184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e188:	b0ae      	sub	sp, #184	@ 0xb8
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	2300      	movs	r3, #0
 800e18e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e192:	2300      	movs	r3, #0
 800e194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e198:	2300      	movs	r3, #0
 800e19a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e1aa:	4bcb      	ldr	r3, [pc, #812]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	f003 030c 	and.w	r3, r3, #12
 800e1b2:	2b0c      	cmp	r3, #12
 800e1b4:	f200 8206 	bhi.w	800e5c4 <HAL_RCC_GetSysClockFreq+0x440>
 800e1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800e1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1be:	bf00      	nop
 800e1c0:	0800e1f5 	.word	0x0800e1f5
 800e1c4:	0800e5c5 	.word	0x0800e5c5
 800e1c8:	0800e5c5 	.word	0x0800e5c5
 800e1cc:	0800e5c5 	.word	0x0800e5c5
 800e1d0:	0800e1fd 	.word	0x0800e1fd
 800e1d4:	0800e5c5 	.word	0x0800e5c5
 800e1d8:	0800e5c5 	.word	0x0800e5c5
 800e1dc:	0800e5c5 	.word	0x0800e5c5
 800e1e0:	0800e205 	.word	0x0800e205
 800e1e4:	0800e5c5 	.word	0x0800e5c5
 800e1e8:	0800e5c5 	.word	0x0800e5c5
 800e1ec:	0800e5c5 	.word	0x0800e5c5
 800e1f0:	0800e3f5 	.word	0x0800e3f5
 800e1f4:	4bb9      	ldr	r3, [pc, #740]	@ (800e4dc <HAL_RCC_GetSysClockFreq+0x358>)
 800e1f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e1fa:	e1e7      	b.n	800e5cc <HAL_RCC_GetSysClockFreq+0x448>
 800e1fc:	4bb8      	ldr	r3, [pc, #736]	@ (800e4e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800e1fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e202:	e1e3      	b.n	800e5cc <HAL_RCC_GetSysClockFreq+0x448>
 800e204:	4bb4      	ldr	r3, [pc, #720]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e20c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e210:	4bb1      	ldr	r3, [pc, #708]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d071      	beq.n	800e300 <HAL_RCC_GetSysClockFreq+0x17c>
 800e21c:	4bae      	ldr	r3, [pc, #696]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	099b      	lsrs	r3, r3, #6
 800e222:	2200      	movs	r2, #0
 800e224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e228:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800e22c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e234:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e238:	2300      	movs	r3, #0
 800e23a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e23e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e242:	4622      	mov	r2, r4
 800e244:	462b      	mov	r3, r5
 800e246:	f04f 0000 	mov.w	r0, #0
 800e24a:	f04f 0100 	mov.w	r1, #0
 800e24e:	0159      	lsls	r1, r3, #5
 800e250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e254:	0150      	lsls	r0, r2, #5
 800e256:	4602      	mov	r2, r0
 800e258:	460b      	mov	r3, r1
 800e25a:	4621      	mov	r1, r4
 800e25c:	1a51      	subs	r1, r2, r1
 800e25e:	6439      	str	r1, [r7, #64]	@ 0x40
 800e260:	4629      	mov	r1, r5
 800e262:	eb63 0301 	sbc.w	r3, r3, r1
 800e266:	647b      	str	r3, [r7, #68]	@ 0x44
 800e268:	f04f 0200 	mov.w	r2, #0
 800e26c:	f04f 0300 	mov.w	r3, #0
 800e270:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800e274:	4649      	mov	r1, r9
 800e276:	018b      	lsls	r3, r1, #6
 800e278:	4641      	mov	r1, r8
 800e27a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e27e:	4641      	mov	r1, r8
 800e280:	018a      	lsls	r2, r1, #6
 800e282:	4641      	mov	r1, r8
 800e284:	1a51      	subs	r1, r2, r1
 800e286:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e288:	4649      	mov	r1, r9
 800e28a:	eb63 0301 	sbc.w	r3, r3, r1
 800e28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e290:	f04f 0200 	mov.w	r2, #0
 800e294:	f04f 0300 	mov.w	r3, #0
 800e298:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800e29c:	4649      	mov	r1, r9
 800e29e:	00cb      	lsls	r3, r1, #3
 800e2a0:	4641      	mov	r1, r8
 800e2a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e2a6:	4641      	mov	r1, r8
 800e2a8:	00ca      	lsls	r2, r1, #3
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4622      	mov	r2, r4
 800e2b2:	189b      	adds	r3, r3, r2
 800e2b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2b6:	462b      	mov	r3, r5
 800e2b8:	460a      	mov	r2, r1
 800e2ba:	eb42 0303 	adc.w	r3, r2, r3
 800e2be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2c0:	f04f 0200 	mov.w	r2, #0
 800e2c4:	f04f 0300 	mov.w	r3, #0
 800e2c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	024b      	lsls	r3, r1, #9
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	024a      	lsls	r2, r1, #9
 800e2da:	4610      	mov	r0, r2
 800e2dc:	4619      	mov	r1, r3
 800e2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e2e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e2ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e2f0:	f7f2 fcda 	bl	8000ca8 <__aeabi_uldivmod>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e2fe:	e067      	b.n	800e3d0 <HAL_RCC_GetSysClockFreq+0x24c>
 800e300:	4b75      	ldr	r3, [pc, #468]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	099b      	lsrs	r3, r3, #6
 800e306:	2200      	movs	r2, #0
 800e308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e30c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e310:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e31a:	2300      	movs	r3, #0
 800e31c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e31e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e322:	4622      	mov	r2, r4
 800e324:	462b      	mov	r3, r5
 800e326:	f04f 0000 	mov.w	r0, #0
 800e32a:	f04f 0100 	mov.w	r1, #0
 800e32e:	0159      	lsls	r1, r3, #5
 800e330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e334:	0150      	lsls	r0, r2, #5
 800e336:	4602      	mov	r2, r0
 800e338:	460b      	mov	r3, r1
 800e33a:	4621      	mov	r1, r4
 800e33c:	1a51      	subs	r1, r2, r1
 800e33e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e340:	4629      	mov	r1, r5
 800e342:	eb63 0301 	sbc.w	r3, r3, r1
 800e346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e348:	f04f 0200 	mov.w	r2, #0
 800e34c:	f04f 0300 	mov.w	r3, #0
 800e350:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800e354:	4649      	mov	r1, r9
 800e356:	018b      	lsls	r3, r1, #6
 800e358:	4641      	mov	r1, r8
 800e35a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e35e:	4641      	mov	r1, r8
 800e360:	018a      	lsls	r2, r1, #6
 800e362:	4641      	mov	r1, r8
 800e364:	ebb2 0a01 	subs.w	sl, r2, r1
 800e368:	4649      	mov	r1, r9
 800e36a:	eb63 0b01 	sbc.w	fp, r3, r1
 800e36e:	f04f 0200 	mov.w	r2, #0
 800e372:	f04f 0300 	mov.w	r3, #0
 800e376:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e37a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e37e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e382:	4692      	mov	sl, r2
 800e384:	469b      	mov	fp, r3
 800e386:	4623      	mov	r3, r4
 800e388:	eb1a 0303 	adds.w	r3, sl, r3
 800e38c:	623b      	str	r3, [r7, #32]
 800e38e:	462b      	mov	r3, r5
 800e390:	eb4b 0303 	adc.w	r3, fp, r3
 800e394:	627b      	str	r3, [r7, #36]	@ 0x24
 800e396:	f04f 0200 	mov.w	r2, #0
 800e39a:	f04f 0300 	mov.w	r3, #0
 800e39e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	028b      	lsls	r3, r1, #10
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	028a      	lsls	r2, r1, #10
 800e3b0:	4610      	mov	r0, r2
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800e3bc:	677a      	str	r2, [r7, #116]	@ 0x74
 800e3be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e3c2:	f7f2 fc71 	bl	8000ca8 <__aeabi_uldivmod>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e3d0:	4b41      	ldr	r3, [pc, #260]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	0c1b      	lsrs	r3, r3, #16
 800e3d6:	f003 0303 	and.w	r3, r3, #3
 800e3da:	3301      	adds	r3, #1
 800e3dc:	005b      	lsls	r3, r3, #1
 800e3de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e3e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e3e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e3f2:	e0eb      	b.n	800e5cc <HAL_RCC_GetSysClockFreq+0x448>
 800e3f4:	4b38      	ldr	r3, [pc, #224]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e3fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e400:	4b35      	ldr	r3, [pc, #212]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d06b      	beq.n	800e4e4 <HAL_RCC_GetSysClockFreq+0x360>
 800e40c:	4b32      	ldr	r3, [pc, #200]	@ (800e4d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	099b      	lsrs	r3, r3, #6
 800e412:	2200      	movs	r2, #0
 800e414:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e416:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e41e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e420:	2300      	movs	r3, #0
 800e422:	667b      	str	r3, [r7, #100]	@ 0x64
 800e424:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e428:	4622      	mov	r2, r4
 800e42a:	462b      	mov	r3, r5
 800e42c:	f04f 0000 	mov.w	r0, #0
 800e430:	f04f 0100 	mov.w	r1, #0
 800e434:	0159      	lsls	r1, r3, #5
 800e436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e43a:	0150      	lsls	r0, r2, #5
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	4621      	mov	r1, r4
 800e442:	1a51      	subs	r1, r2, r1
 800e444:	61b9      	str	r1, [r7, #24]
 800e446:	4629      	mov	r1, r5
 800e448:	eb63 0301 	sbc.w	r3, r3, r1
 800e44c:	61fb      	str	r3, [r7, #28]
 800e44e:	f04f 0200 	mov.w	r2, #0
 800e452:	f04f 0300 	mov.w	r3, #0
 800e456:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800e45a:	4659      	mov	r1, fp
 800e45c:	018b      	lsls	r3, r1, #6
 800e45e:	4651      	mov	r1, sl
 800e460:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e464:	4651      	mov	r1, sl
 800e466:	018a      	lsls	r2, r1, #6
 800e468:	4651      	mov	r1, sl
 800e46a:	ebb2 0801 	subs.w	r8, r2, r1
 800e46e:	4659      	mov	r1, fp
 800e470:	eb63 0901 	sbc.w	r9, r3, r1
 800e474:	f04f 0200 	mov.w	r2, #0
 800e478:	f04f 0300 	mov.w	r3, #0
 800e47c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e480:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e484:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e488:	4690      	mov	r8, r2
 800e48a:	4699      	mov	r9, r3
 800e48c:	4623      	mov	r3, r4
 800e48e:	eb18 0303 	adds.w	r3, r8, r3
 800e492:	613b      	str	r3, [r7, #16]
 800e494:	462b      	mov	r3, r5
 800e496:	eb49 0303 	adc.w	r3, r9, r3
 800e49a:	617b      	str	r3, [r7, #20]
 800e49c:	f04f 0200 	mov.w	r2, #0
 800e4a0:	f04f 0300 	mov.w	r3, #0
 800e4a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	024b      	lsls	r3, r1, #9
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	024a      	lsls	r2, r1, #9
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4be:	2200      	movs	r2, #0
 800e4c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e4c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e4c8:	f7f2 fbee 	bl	8000ca8 <__aeabi_uldivmod>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e4d6:	e065      	b.n	800e5a4 <HAL_RCC_GetSysClockFreq+0x420>
 800e4d8:	40023800 	.word	0x40023800
 800e4dc:	00f42400 	.word	0x00f42400
 800e4e0:	007a1200 	.word	0x007a1200
 800e4e4:	4b3d      	ldr	r3, [pc, #244]	@ (800e5dc <HAL_RCC_GetSysClockFreq+0x458>)
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	099b      	lsrs	r3, r3, #6
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e4f4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800e4fe:	4642      	mov	r2, r8
 800e500:	464b      	mov	r3, r9
 800e502:	f04f 0000 	mov.w	r0, #0
 800e506:	f04f 0100 	mov.w	r1, #0
 800e50a:	0159      	lsls	r1, r3, #5
 800e50c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e510:	0150      	lsls	r0, r2, #5
 800e512:	4602      	mov	r2, r0
 800e514:	460b      	mov	r3, r1
 800e516:	4641      	mov	r1, r8
 800e518:	1a51      	subs	r1, r2, r1
 800e51a:	60b9      	str	r1, [r7, #8]
 800e51c:	4649      	mov	r1, r9
 800e51e:	eb63 0301 	sbc.w	r3, r3, r1
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	f04f 0200 	mov.w	r2, #0
 800e528:	f04f 0300 	mov.w	r3, #0
 800e52c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e530:	4659      	mov	r1, fp
 800e532:	018b      	lsls	r3, r1, #6
 800e534:	4651      	mov	r1, sl
 800e536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e53a:	4651      	mov	r1, sl
 800e53c:	018a      	lsls	r2, r1, #6
 800e53e:	4651      	mov	r1, sl
 800e540:	1a54      	subs	r4, r2, r1
 800e542:	4659      	mov	r1, fp
 800e544:	eb63 0501 	sbc.w	r5, r3, r1
 800e548:	f04f 0200 	mov.w	r2, #0
 800e54c:	f04f 0300 	mov.w	r3, #0
 800e550:	00eb      	lsls	r3, r5, #3
 800e552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e556:	00e2      	lsls	r2, r4, #3
 800e558:	4614      	mov	r4, r2
 800e55a:	461d      	mov	r5, r3
 800e55c:	4643      	mov	r3, r8
 800e55e:	18e3      	adds	r3, r4, r3
 800e560:	603b      	str	r3, [r7, #0]
 800e562:	464b      	mov	r3, r9
 800e564:	eb45 0303 	adc.w	r3, r5, r3
 800e568:	607b      	str	r3, [r7, #4]
 800e56a:	f04f 0200 	mov.w	r2, #0
 800e56e:	f04f 0300 	mov.w	r3, #0
 800e572:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e576:	4629      	mov	r1, r5
 800e578:	028b      	lsls	r3, r1, #10
 800e57a:	4621      	mov	r1, r4
 800e57c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e580:	4621      	mov	r1, r4
 800e582:	028a      	lsls	r2, r1, #10
 800e584:	4610      	mov	r0, r2
 800e586:	4619      	mov	r1, r3
 800e588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e58c:	2200      	movs	r2, #0
 800e58e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e590:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e592:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e596:	f7f2 fb87 	bl	8000ca8 <__aeabi_uldivmod>
 800e59a:	4602      	mov	r2, r0
 800e59c:	460b      	mov	r3, r1
 800e59e:	4613      	mov	r3, r2
 800e5a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e5a4:	4b0d      	ldr	r3, [pc, #52]	@ (800e5dc <HAL_RCC_GetSysClockFreq+0x458>)
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	0f1b      	lsrs	r3, r3, #28
 800e5aa:	f003 0307 	and.w	r3, r3, #7
 800e5ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e5b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e5b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e5c2:	e003      	b.n	800e5cc <HAL_RCC_GetSysClockFreq+0x448>
 800e5c4:	4b06      	ldr	r3, [pc, #24]	@ (800e5e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 800e5c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e5ca:	bf00      	nop
 800e5cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	37b8      	adds	r7, #184	@ 0xb8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e5da:	bf00      	nop
 800e5dc:	40023800 	.word	0x40023800
 800e5e0:	00f42400 	.word	0x00f42400

0800e5e4 <HAL_RCC_OscConfig>:
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d101      	bne.n	800e5f6 <HAL_RCC_OscConfig+0x12>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e28d      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f000 8083 	beq.w	800e70a <HAL_RCC_OscConfig+0x126>
 800e604:	4b94      	ldr	r3, [pc, #592]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f003 030c 	and.w	r3, r3, #12
 800e60c:	2b04      	cmp	r3, #4
 800e60e:	d019      	beq.n	800e644 <HAL_RCC_OscConfig+0x60>
 800e610:	4b91      	ldr	r3, [pc, #580]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	f003 030c 	and.w	r3, r3, #12
 800e618:	2b08      	cmp	r3, #8
 800e61a:	d106      	bne.n	800e62a <HAL_RCC_OscConfig+0x46>
 800e61c:	4b8e      	ldr	r3, [pc, #568]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e628:	d00c      	beq.n	800e644 <HAL_RCC_OscConfig+0x60>
 800e62a:	4b8b      	ldr	r3, [pc, #556]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	f003 030c 	and.w	r3, r3, #12
 800e632:	2b0c      	cmp	r3, #12
 800e634:	d112      	bne.n	800e65c <HAL_RCC_OscConfig+0x78>
 800e636:	4b88      	ldr	r3, [pc, #544]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e63e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e642:	d10b      	bne.n	800e65c <HAL_RCC_OscConfig+0x78>
 800e644:	4b84      	ldr	r3, [pc, #528]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d05b      	beq.n	800e708 <HAL_RCC_OscConfig+0x124>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d157      	bne.n	800e708 <HAL_RCC_OscConfig+0x124>
 800e658:	2301      	movs	r3, #1
 800e65a:	e25a      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e664:	d106      	bne.n	800e674 <HAL_RCC_OscConfig+0x90>
 800e666:	4b7c      	ldr	r3, [pc, #496]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4a7b      	ldr	r2, [pc, #492]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e66c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e670:	6013      	str	r3, [r2, #0]
 800e672:	e01d      	b.n	800e6b0 <HAL_RCC_OscConfig+0xcc>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e67c:	d10c      	bne.n	800e698 <HAL_RCC_OscConfig+0xb4>
 800e67e:	4b76      	ldr	r3, [pc, #472]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a75      	ldr	r2, [pc, #468]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	4b73      	ldr	r3, [pc, #460]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4a72      	ldr	r2, [pc, #456]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	e00b      	b.n	800e6b0 <HAL_RCC_OscConfig+0xcc>
 800e698:	4b6f      	ldr	r3, [pc, #444]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a6e      	ldr	r2, [pc, #440]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e69e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	4b6c      	ldr	r3, [pc, #432]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a6b      	ldr	r2, [pc, #428]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e6aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e6ae:	6013      	str	r3, [r2, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d013      	beq.n	800e6e0 <HAL_RCC_OscConfig+0xfc>
 800e6b8:	f7ff f860 	bl	800d77c <HAL_GetTick>
 800e6bc:	6138      	str	r0, [r7, #16]
 800e6be:	e008      	b.n	800e6d2 <HAL_RCC_OscConfig+0xee>
 800e6c0:	f7ff f85c 	bl	800d77c <HAL_GetTick>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	2b64      	cmp	r3, #100	@ 0x64
 800e6cc:	d901      	bls.n	800e6d2 <HAL_RCC_OscConfig+0xee>
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	e21f      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e6d2:	4b61      	ldr	r3, [pc, #388]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d0f0      	beq.n	800e6c0 <HAL_RCC_OscConfig+0xdc>
 800e6de:	e014      	b.n	800e70a <HAL_RCC_OscConfig+0x126>
 800e6e0:	f7ff f84c 	bl	800d77c <HAL_GetTick>
 800e6e4:	6138      	str	r0, [r7, #16]
 800e6e6:	e008      	b.n	800e6fa <HAL_RCC_OscConfig+0x116>
 800e6e8:	f7ff f848 	bl	800d77c <HAL_GetTick>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	1ad3      	subs	r3, r2, r3
 800e6f2:	2b64      	cmp	r3, #100	@ 0x64
 800e6f4:	d901      	bls.n	800e6fa <HAL_RCC_OscConfig+0x116>
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	e20b      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e6fa:	4b57      	ldr	r3, [pc, #348]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1f0      	bne.n	800e6e8 <HAL_RCC_OscConfig+0x104>
 800e706:	e000      	b.n	800e70a <HAL_RCC_OscConfig+0x126>
 800e708:	bf00      	nop
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 0302 	and.w	r3, r3, #2
 800e712:	2b00      	cmp	r3, #0
 800e714:	d06f      	beq.n	800e7f6 <HAL_RCC_OscConfig+0x212>
 800e716:	4b50      	ldr	r3, [pc, #320]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	f003 030c 	and.w	r3, r3, #12
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d017      	beq.n	800e752 <HAL_RCC_OscConfig+0x16e>
 800e722:	4b4d      	ldr	r3, [pc, #308]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	f003 030c 	and.w	r3, r3, #12
 800e72a:	2b08      	cmp	r3, #8
 800e72c:	d105      	bne.n	800e73a <HAL_RCC_OscConfig+0x156>
 800e72e:	4b4a      	ldr	r3, [pc, #296]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00b      	beq.n	800e752 <HAL_RCC_OscConfig+0x16e>
 800e73a:	4b47      	ldr	r3, [pc, #284]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	f003 030c 	and.w	r3, r3, #12
 800e742:	2b0c      	cmp	r3, #12
 800e744:	d11c      	bne.n	800e780 <HAL_RCC_OscConfig+0x19c>
 800e746:	4b44      	ldr	r3, [pc, #272]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d116      	bne.n	800e780 <HAL_RCC_OscConfig+0x19c>
 800e752:	4b41      	ldr	r3, [pc, #260]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f003 0302 	and.w	r3, r3, #2
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d005      	beq.n	800e76a <HAL_RCC_OscConfig+0x186>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	68db      	ldr	r3, [r3, #12]
 800e762:	2b01      	cmp	r3, #1
 800e764:	d001      	beq.n	800e76a <HAL_RCC_OscConfig+0x186>
 800e766:	2301      	movs	r3, #1
 800e768:	e1d3      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e76a:	4b3b      	ldr	r3, [pc, #236]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	691b      	ldr	r3, [r3, #16]
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	4937      	ldr	r1, [pc, #220]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e77a:	4313      	orrs	r3, r2
 800e77c:	600b      	str	r3, [r1, #0]
 800e77e:	e03a      	b.n	800e7f6 <HAL_RCC_OscConfig+0x212>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d020      	beq.n	800e7ca <HAL_RCC_OscConfig+0x1e6>
 800e788:	4b34      	ldr	r3, [pc, #208]	@ (800e85c <HAL_RCC_OscConfig+0x278>)
 800e78a:	2201      	movs	r2, #1
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	f7fe fff5 	bl	800d77c <HAL_GetTick>
 800e792:	6138      	str	r0, [r7, #16]
 800e794:	e008      	b.n	800e7a8 <HAL_RCC_OscConfig+0x1c4>
 800e796:	f7fe fff1 	bl	800d77c <HAL_GetTick>
 800e79a:	4602      	mov	r2, r0
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d901      	bls.n	800e7a8 <HAL_RCC_OscConfig+0x1c4>
 800e7a4:	2303      	movs	r3, #3
 800e7a6:	e1b4      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e7a8:	4b2b      	ldr	r3, [pc, #172]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f003 0302 	and.w	r3, r3, #2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d0f0      	beq.n	800e796 <HAL_RCC_OscConfig+0x1b2>
 800e7b4:	4b28      	ldr	r3, [pc, #160]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	691b      	ldr	r3, [r3, #16]
 800e7c0:	00db      	lsls	r3, r3, #3
 800e7c2:	4925      	ldr	r1, [pc, #148]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	600b      	str	r3, [r1, #0]
 800e7c8:	e015      	b.n	800e7f6 <HAL_RCC_OscConfig+0x212>
 800e7ca:	4b24      	ldr	r3, [pc, #144]	@ (800e85c <HAL_RCC_OscConfig+0x278>)
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	f7fe ffd4 	bl	800d77c <HAL_GetTick>
 800e7d4:	6138      	str	r0, [r7, #16]
 800e7d6:	e008      	b.n	800e7ea <HAL_RCC_OscConfig+0x206>
 800e7d8:	f7fe ffd0 	bl	800d77c <HAL_GetTick>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d901      	bls.n	800e7ea <HAL_RCC_OscConfig+0x206>
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e193      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e7ea:	4b1b      	ldr	r3, [pc, #108]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f003 0302 	and.w	r3, r3, #2
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1f0      	bne.n	800e7d8 <HAL_RCC_OscConfig+0x1f4>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f003 0308 	and.w	r3, r3, #8
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d036      	beq.n	800e870 <HAL_RCC_OscConfig+0x28c>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d016      	beq.n	800e838 <HAL_RCC_OscConfig+0x254>
 800e80a:	4b15      	ldr	r3, [pc, #84]	@ (800e860 <HAL_RCC_OscConfig+0x27c>)
 800e80c:	2201      	movs	r2, #1
 800e80e:	601a      	str	r2, [r3, #0]
 800e810:	f7fe ffb4 	bl	800d77c <HAL_GetTick>
 800e814:	6138      	str	r0, [r7, #16]
 800e816:	e008      	b.n	800e82a <HAL_RCC_OscConfig+0x246>
 800e818:	f7fe ffb0 	bl	800d77c <HAL_GetTick>
 800e81c:	4602      	mov	r2, r0
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	1ad3      	subs	r3, r2, r3
 800e822:	2b02      	cmp	r3, #2
 800e824:	d901      	bls.n	800e82a <HAL_RCC_OscConfig+0x246>
 800e826:	2303      	movs	r3, #3
 800e828:	e173      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e82a:	4b0b      	ldr	r3, [pc, #44]	@ (800e858 <HAL_RCC_OscConfig+0x274>)
 800e82c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	d0f0      	beq.n	800e818 <HAL_RCC_OscConfig+0x234>
 800e836:	e01b      	b.n	800e870 <HAL_RCC_OscConfig+0x28c>
 800e838:	4b09      	ldr	r3, [pc, #36]	@ (800e860 <HAL_RCC_OscConfig+0x27c>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	f7fe ff9d 	bl	800d77c <HAL_GetTick>
 800e842:	6138      	str	r0, [r7, #16]
 800e844:	e00e      	b.n	800e864 <HAL_RCC_OscConfig+0x280>
 800e846:	f7fe ff99 	bl	800d77c <HAL_GetTick>
 800e84a:	4602      	mov	r2, r0
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	2b02      	cmp	r3, #2
 800e852:	d907      	bls.n	800e864 <HAL_RCC_OscConfig+0x280>
 800e854:	2303      	movs	r3, #3
 800e856:	e15c      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e858:	40023800 	.word	0x40023800
 800e85c:	42470000 	.word	0x42470000
 800e860:	42470e80 	.word	0x42470e80
 800e864:	4b8a      	ldr	r3, [pc, #552]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e868:	f003 0302 	and.w	r3, r3, #2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1ea      	bne.n	800e846 <HAL_RCC_OscConfig+0x262>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f003 0304 	and.w	r3, r3, #4
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f000 8097 	beq.w	800e9ac <HAL_RCC_OscConfig+0x3c8>
 800e87e:	2300      	movs	r3, #0
 800e880:	75fb      	strb	r3, [r7, #23]
 800e882:	4b83      	ldr	r3, [pc, #524]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d10f      	bne.n	800e8ae <HAL_RCC_OscConfig+0x2ca>
 800e88e:	2300      	movs	r3, #0
 800e890:	60bb      	str	r3, [r7, #8]
 800e892:	4b7f      	ldr	r3, [pc, #508]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e896:	4a7e      	ldr	r2, [pc, #504]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e89c:	6413      	str	r3, [r2, #64]	@ 0x40
 800e89e:	4b7c      	ldr	r3, [pc, #496]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e8a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e8a6:	60bb      	str	r3, [r7, #8]
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	75fb      	strb	r3, [r7, #23]
 800e8ae:	4b79      	ldr	r3, [pc, #484]	@ (800ea94 <HAL_RCC_OscConfig+0x4b0>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d118      	bne.n	800e8ec <HAL_RCC_OscConfig+0x308>
 800e8ba:	4b76      	ldr	r3, [pc, #472]	@ (800ea94 <HAL_RCC_OscConfig+0x4b0>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4a75      	ldr	r2, [pc, #468]	@ (800ea94 <HAL_RCC_OscConfig+0x4b0>)
 800e8c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e8c4:	6013      	str	r3, [r2, #0]
 800e8c6:	f7fe ff59 	bl	800d77c <HAL_GetTick>
 800e8ca:	6138      	str	r0, [r7, #16]
 800e8cc:	e008      	b.n	800e8e0 <HAL_RCC_OscConfig+0x2fc>
 800e8ce:	f7fe ff55 	bl	800d77c <HAL_GetTick>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	2b02      	cmp	r3, #2
 800e8da:	d901      	bls.n	800e8e0 <HAL_RCC_OscConfig+0x2fc>
 800e8dc:	2303      	movs	r3, #3
 800e8de:	e118      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e8e0:	4b6c      	ldr	r3, [pc, #432]	@ (800ea94 <HAL_RCC_OscConfig+0x4b0>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d0f0      	beq.n	800e8ce <HAL_RCC_OscConfig+0x2ea>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d106      	bne.n	800e902 <HAL_RCC_OscConfig+0x31e>
 800e8f4:	4b66      	ldr	r3, [pc, #408]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e8f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8f8:	4a65      	ldr	r2, [pc, #404]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e8fa:	f043 0301 	orr.w	r3, r3, #1
 800e8fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800e900:	e01c      	b.n	800e93c <HAL_RCC_OscConfig+0x358>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	2b05      	cmp	r3, #5
 800e908:	d10c      	bne.n	800e924 <HAL_RCC_OscConfig+0x340>
 800e90a:	4b61      	ldr	r3, [pc, #388]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e90e:	4a60      	ldr	r2, [pc, #384]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e910:	f043 0304 	orr.w	r3, r3, #4
 800e914:	6713      	str	r3, [r2, #112]	@ 0x70
 800e916:	4b5e      	ldr	r3, [pc, #376]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e91a:	4a5d      	ldr	r2, [pc, #372]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e91c:	f043 0301 	orr.w	r3, r3, #1
 800e920:	6713      	str	r3, [r2, #112]	@ 0x70
 800e922:	e00b      	b.n	800e93c <HAL_RCC_OscConfig+0x358>
 800e924:	4b5a      	ldr	r3, [pc, #360]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e928:	4a59      	ldr	r2, [pc, #356]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e92a:	f023 0301 	bic.w	r3, r3, #1
 800e92e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e930:	4b57      	ldr	r3, [pc, #348]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e934:	4a56      	ldr	r2, [pc, #344]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e936:	f023 0304 	bic.w	r3, r3, #4
 800e93a:	6713      	str	r3, [r2, #112]	@ 0x70
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d015      	beq.n	800e970 <HAL_RCC_OscConfig+0x38c>
 800e944:	f7fe ff1a 	bl	800d77c <HAL_GetTick>
 800e948:	6138      	str	r0, [r7, #16]
 800e94a:	e00a      	b.n	800e962 <HAL_RCC_OscConfig+0x37e>
 800e94c:	f7fe ff16 	bl	800d77c <HAL_GetTick>
 800e950:	4602      	mov	r2, r0
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	1ad3      	subs	r3, r2, r3
 800e956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d901      	bls.n	800e962 <HAL_RCC_OscConfig+0x37e>
 800e95e:	2303      	movs	r3, #3
 800e960:	e0d7      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e962:	4b4b      	ldr	r3, [pc, #300]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e966:	f003 0302 	and.w	r3, r3, #2
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d0ee      	beq.n	800e94c <HAL_RCC_OscConfig+0x368>
 800e96e:	e014      	b.n	800e99a <HAL_RCC_OscConfig+0x3b6>
 800e970:	f7fe ff04 	bl	800d77c <HAL_GetTick>
 800e974:	6138      	str	r0, [r7, #16]
 800e976:	e00a      	b.n	800e98e <HAL_RCC_OscConfig+0x3aa>
 800e978:	f7fe ff00 	bl	800d77c <HAL_GetTick>
 800e97c:	4602      	mov	r2, r0
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e986:	4293      	cmp	r3, r2
 800e988:	d901      	bls.n	800e98e <HAL_RCC_OscConfig+0x3aa>
 800e98a:	2303      	movs	r3, #3
 800e98c:	e0c1      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e98e:	4b40      	ldr	r3, [pc, #256]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e992:	f003 0302 	and.w	r3, r3, #2
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1ee      	bne.n	800e978 <HAL_RCC_OscConfig+0x394>
 800e99a:	7dfb      	ldrb	r3, [r7, #23]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d105      	bne.n	800e9ac <HAL_RCC_OscConfig+0x3c8>
 800e9a0:	4b3b      	ldr	r3, [pc, #236]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e9a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9a4:	4a3a      	ldr	r2, [pc, #232]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e9a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e9aa:	6413      	str	r3, [r2, #64]	@ 0x40
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	f000 80ad 	beq.w	800eb10 <HAL_RCC_OscConfig+0x52c>
 800e9b6:	4b36      	ldr	r3, [pc, #216]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	f003 030c 	and.w	r3, r3, #12
 800e9be:	2b08      	cmp	r3, #8
 800e9c0:	d060      	beq.n	800ea84 <HAL_RCC_OscConfig+0x4a0>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	d145      	bne.n	800ea56 <HAL_RCC_OscConfig+0x472>
 800e9ca:	4b33      	ldr	r3, [pc, #204]	@ (800ea98 <HAL_RCC_OscConfig+0x4b4>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]
 800e9d0:	f7fe fed4 	bl	800d77c <HAL_GetTick>
 800e9d4:	6138      	str	r0, [r7, #16]
 800e9d6:	e008      	b.n	800e9ea <HAL_RCC_OscConfig+0x406>
 800e9d8:	f7fe fed0 	bl	800d77c <HAL_GetTick>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d901      	bls.n	800e9ea <HAL_RCC_OscConfig+0x406>
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	e093      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800e9ea:	4b29      	ldr	r3, [pc, #164]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1f0      	bne.n	800e9d8 <HAL_RCC_OscConfig+0x3f4>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	69da      	ldr	r2, [r3, #28]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	431a      	orrs	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea04:	019b      	lsls	r3, r3, #6
 800ea06:	431a      	orrs	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea0c:	085b      	lsrs	r3, r3, #1
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	041b      	lsls	r3, r3, #16
 800ea12:	431a      	orrs	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea18:	061b      	lsls	r3, r3, #24
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea20:	071b      	lsls	r3, r3, #28
 800ea22:	491b      	ldr	r1, [pc, #108]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800ea24:	4313      	orrs	r3, r2
 800ea26:	604b      	str	r3, [r1, #4]
 800ea28:	4b1b      	ldr	r3, [pc, #108]	@ (800ea98 <HAL_RCC_OscConfig+0x4b4>)
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	601a      	str	r2, [r3, #0]
 800ea2e:	f7fe fea5 	bl	800d77c <HAL_GetTick>
 800ea32:	6138      	str	r0, [r7, #16]
 800ea34:	e008      	b.n	800ea48 <HAL_RCC_OscConfig+0x464>
 800ea36:	f7fe fea1 	bl	800d77c <HAL_GetTick>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	d901      	bls.n	800ea48 <HAL_RCC_OscConfig+0x464>
 800ea44:	2303      	movs	r3, #3
 800ea46:	e064      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800ea48:	4b11      	ldr	r3, [pc, #68]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d0f0      	beq.n	800ea36 <HAL_RCC_OscConfig+0x452>
 800ea54:	e05c      	b.n	800eb10 <HAL_RCC_OscConfig+0x52c>
 800ea56:	4b10      	ldr	r3, [pc, #64]	@ (800ea98 <HAL_RCC_OscConfig+0x4b4>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	f7fe fe8e 	bl	800d77c <HAL_GetTick>
 800ea60:	6138      	str	r0, [r7, #16]
 800ea62:	e008      	b.n	800ea76 <HAL_RCC_OscConfig+0x492>
 800ea64:	f7fe fe8a 	bl	800d77c <HAL_GetTick>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d901      	bls.n	800ea76 <HAL_RCC_OscConfig+0x492>
 800ea72:	2303      	movs	r3, #3
 800ea74:	e04d      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800ea76:	4b06      	ldr	r3, [pc, #24]	@ (800ea90 <HAL_RCC_OscConfig+0x4ac>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1f0      	bne.n	800ea64 <HAL_RCC_OscConfig+0x480>
 800ea82:	e045      	b.n	800eb10 <HAL_RCC_OscConfig+0x52c>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d107      	bne.n	800ea9c <HAL_RCC_OscConfig+0x4b8>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	e040      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800ea90:	40023800 	.word	0x40023800
 800ea94:	40007000 	.word	0x40007000
 800ea98:	42470060 	.word	0x42470060
 800ea9c:	4b1f      	ldr	r3, [pc, #124]	@ (800eb1c <HAL_RCC_OscConfig+0x538>)
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	60fb      	str	r3, [r7, #12]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	699b      	ldr	r3, [r3, #24]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d030      	beq.n	800eb0c <HAL_RCC_OscConfig+0x528>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	69db      	ldr	r3, [r3, #28]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d129      	bne.n	800eb0c <HAL_RCC_OscConfig+0x528>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d122      	bne.n	800eb0c <HAL_RCC_OscConfig+0x528>
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800eacc:	4013      	ands	r3, r2
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ead2:	0192      	lsls	r2, r2, #6
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d119      	bne.n	800eb0c <HAL_RCC_OscConfig+0x528>
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eae2:	085b      	lsrs	r3, r3, #1
 800eae4:	3b01      	subs	r3, #1
 800eae6:	041b      	lsls	r3, r3, #16
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d10f      	bne.n	800eb0c <HAL_RCC_OscConfig+0x528>
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf6:	061b      	lsls	r3, r3, #24
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d107      	bne.n	800eb0c <HAL_RCC_OscConfig+0x528>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb06:	071b      	lsls	r3, r3, #28
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d001      	beq.n	800eb10 <HAL_RCC_OscConfig+0x52c>
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	e000      	b.n	800eb12 <HAL_RCC_OscConfig+0x52e>
 800eb10:	2300      	movs	r3, #0
 800eb12:	4618      	mov	r0, r3
 800eb14:	3718      	adds	r7, #24
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	40023800 	.word	0x40023800

0800eb20 <HAL_SPI_Init>:
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <HAL_SPI_Init+0x12>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e07b      	b.n	800ec2a <HAL_SPI_Init+0x10a>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d108      	bne.n	800eb4c <HAL_SPI_Init+0x2c>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eb42:	d009      	beq.n	800eb58 <HAL_SPI_Init+0x38>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	61da      	str	r2, [r3, #28]
 800eb4a:	e005      	b.n	800eb58 <HAL_SPI_Init+0x38>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	611a      	str	r2, [r3, #16]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	615a      	str	r2, [r3, #20]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	629a      	str	r2, [r3, #40]	@ 0x28
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d106      	bne.n	800eb78 <HAL_SPI_Init+0x58>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7fe f99e 	bl	800ceb4 <HAL_SPI_MspInit>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2202      	movs	r2, #2
 800eb7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb8e:	601a      	str	r2, [r3, #0]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800eba0:	431a      	orrs	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ebaa:	431a      	orrs	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	f003 0302 	and.w	r3, r3, #2
 800ebb4:	431a      	orrs	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	431a      	orrs	r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	69db      	ldr	r3, [r3, #28]
 800ebce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ebd2:	431a      	orrs	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a1b      	ldr	r3, [r3, #32]
 800ebd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebdc:	ea42 0103 	orr.w	r1, r2, r3
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebe4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	699b      	ldr	r3, [r3, #24]
 800ebf4:	0c1b      	lsrs	r3, r3, #16
 800ebf6:	f003 0104 	and.w	r1, r3, #4
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebfe:	f003 0210 	and.w	r2, r3, #16
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	430a      	orrs	r2, r1
 800ec08:	605a      	str	r2, [r3, #4]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	69da      	ldr	r2, [r3, #28]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ec18:	61da      	str	r2, [r3, #28]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	655a      	str	r2, [r3, #84]	@ 0x54
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2201      	movs	r2, #1
 800ec24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800ec28:	2300      	movs	r3, #0
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <HAL_SPI_Transmit>:
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b088      	sub	sp, #32
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	60f8      	str	r0, [r7, #12]
 800ec3a:	60b9      	str	r1, [r7, #8]
 800ec3c:	603b      	str	r3, [r7, #0]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	80fb      	strh	r3, [r7, #6]
 800ec42:	2300      	movs	r3, #0
 800ec44:	77fb      	strb	r3, [r7, #31]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d101      	bne.n	800ec54 <HAL_SPI_Transmit+0x22>
 800ec50:	2302      	movs	r3, #2
 800ec52:	e126      	b.n	800eea2 <HAL_SPI_Transmit+0x270>
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800ec5c:	f7fe fd8e 	bl	800d77c <HAL_GetTick>
 800ec60:	61b8      	str	r0, [r7, #24]
 800ec62:	88fb      	ldrh	r3, [r7, #6]
 800ec64:	82fb      	strh	r3, [r7, #22]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d002      	beq.n	800ec78 <HAL_SPI_Transmit+0x46>
 800ec72:	2302      	movs	r3, #2
 800ec74:	77fb      	strb	r3, [r7, #31]
 800ec76:	e10b      	b.n	800ee90 <HAL_SPI_Transmit+0x25e>
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d002      	beq.n	800ec84 <HAL_SPI_Transmit+0x52>
 800ec7e:	88fb      	ldrh	r3, [r7, #6]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d102      	bne.n	800ec8a <HAL_SPI_Transmit+0x58>
 800ec84:	2301      	movs	r3, #1
 800ec86:	77fb      	strb	r3, [r7, #31]
 800ec88:	e102      	b.n	800ee90 <HAL_SPI_Transmit+0x25e>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2203      	movs	r2, #3
 800ec8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2200      	movs	r2, #0
 800ec96:	655a      	str	r2, [r3, #84]	@ 0x54
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	88fa      	ldrh	r2, [r7, #6]
 800eca2:	869a      	strh	r2, [r3, #52]	@ 0x34
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	88fa      	ldrh	r2, [r7, #6]
 800eca8:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	639a      	str	r2, [r3, #56]	@ 0x38
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	645a      	str	r2, [r3, #68]	@ 0x44
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	641a      	str	r2, [r3, #64]	@ 0x40
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ecd0:	d10f      	bne.n	800ecf2 <HAL_SPI_Transmit+0xc0>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ece0:	601a      	str	r2, [r3, #0]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ecf0:	601a      	str	r2, [r3, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecfc:	2b40      	cmp	r3, #64	@ 0x40
 800ecfe:	d007      	beq.n	800ed10 <HAL_SPI_Transmit+0xde>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ed0e:	601a      	str	r2, [r3, #0]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed18:	d14b      	bne.n	800edb2 <HAL_SPI_Transmit+0x180>
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d002      	beq.n	800ed28 <HAL_SPI_Transmit+0xf6>
 800ed22:	8afb      	ldrh	r3, [r7, #22]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d13e      	bne.n	800eda6 <HAL_SPI_Transmit+0x174>
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed2c:	881a      	ldrh	r2, [r3, #0]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	60da      	str	r2, [r3, #12]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed38:	1c9a      	adds	r2, r3, #2
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	3b01      	subs	r3, #1
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ed4c:	e02b      	b.n	800eda6 <HAL_SPI_Transmit+0x174>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	f003 0302 	and.w	r3, r3, #2
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	d112      	bne.n	800ed82 <HAL_SPI_Transmit+0x150>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed60:	881a      	ldrh	r2, [r3, #0]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	60da      	str	r2, [r3, #12]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed6c:	1c9a      	adds	r2, r3, #2
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	631a      	str	r2, [r3, #48]	@ 0x30
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ed80:	e011      	b.n	800eda6 <HAL_SPI_Transmit+0x174>
 800ed82:	f7fe fcfb 	bl	800d77c <HAL_GetTick>
 800ed86:	4602      	mov	r2, r0
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	1ad3      	subs	r3, r2, r3
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d803      	bhi.n	800ed9a <HAL_SPI_Transmit+0x168>
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed98:	d102      	bne.n	800eda0 <HAL_SPI_Transmit+0x16e>
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d102      	bne.n	800eda6 <HAL_SPI_Transmit+0x174>
 800eda0:	2303      	movs	r3, #3
 800eda2:	77fb      	strb	r3, [r7, #31]
 800eda4:	e074      	b.n	800ee90 <HAL_SPI_Transmit+0x25e>
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800edaa:	b29b      	uxth	r3, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1ce      	bne.n	800ed4e <HAL_SPI_Transmit+0x11c>
 800edb0:	e04c      	b.n	800ee4c <HAL_SPI_Transmit+0x21a>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d002      	beq.n	800edc0 <HAL_SPI_Transmit+0x18e>
 800edba:	8afb      	ldrh	r3, [r7, #22]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d140      	bne.n	800ee42 <HAL_SPI_Transmit+0x210>
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	330c      	adds	r3, #12
 800edca:	7812      	ldrb	r2, [r2, #0]
 800edcc:	701a      	strb	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edd2:	1c5a      	adds	r2, r3, #1
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	631a      	str	r2, [r3, #48]	@ 0x30
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eddc:	b29b      	uxth	r3, r3
 800edde:	3b01      	subs	r3, #1
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ede6:	e02c      	b.n	800ee42 <HAL_SPI_Transmit+0x210>
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	f003 0302 	and.w	r3, r3, #2
 800edf2:	2b02      	cmp	r3, #2
 800edf4:	d113      	bne.n	800ee1e <HAL_SPI_Transmit+0x1ec>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	330c      	adds	r3, #12
 800ee00:	7812      	ldrb	r2, [r2, #0]
 800ee02:	701a      	strb	r2, [r3, #0]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	3b01      	subs	r3, #1
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ee1c:	e011      	b.n	800ee42 <HAL_SPI_Transmit+0x210>
 800ee1e:	f7fe fcad 	bl	800d77c <HAL_GetTick>
 800ee22:	4602      	mov	r2, r0
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d803      	bhi.n	800ee36 <HAL_SPI_Transmit+0x204>
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee34:	d102      	bne.n	800ee3c <HAL_SPI_Transmit+0x20a>
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d102      	bne.n	800ee42 <HAL_SPI_Transmit+0x210>
 800ee3c:	2303      	movs	r3, #3
 800ee3e:	77fb      	strb	r3, [r7, #31]
 800ee40:	e026      	b.n	800ee90 <HAL_SPI_Transmit+0x25e>
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1cd      	bne.n	800ede8 <HAL_SPI_Transmit+0x1b6>
 800ee4c:	69ba      	ldr	r2, [r7, #24]
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f000 fcdd 	bl	800f810 <SPI_EndRxTxTransaction>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <HAL_SPI_Transmit+0x230>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2220      	movs	r2, #32
 800ee60:	655a      	str	r2, [r3, #84]	@ 0x54
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10a      	bne.n	800ee80 <HAL_SPI_Transmit+0x24e>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	613b      	str	r3, [r7, #16]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	613b      	str	r3, [r7, #16]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	613b      	str	r3, [r7, #16]
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <HAL_SPI_Transmit+0x25c>
 800ee88:	2301      	movs	r3, #1
 800ee8a:	77fb      	strb	r3, [r7, #31]
 800ee8c:	e000      	b.n	800ee90 <HAL_SPI_Transmit+0x25e>
 800ee8e:	bf00      	nop
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800eea0:	7ffb      	ldrb	r3, [r7, #31]
 800eea2:	4618      	mov	r0, r3
 800eea4:	3720      	adds	r7, #32
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <HAL_SPI_Receive>:
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b088      	sub	sp, #32
 800eeae:	af02      	add	r7, sp, #8
 800eeb0:	60f8      	str	r0, [r7, #12]
 800eeb2:	60b9      	str	r1, [r7, #8]
 800eeb4:	603b      	str	r3, [r7, #0]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	80fb      	strh	r3, [r7, #6]
 800eeba:	2300      	movs	r3, #0
 800eebc:	75fb      	strb	r3, [r7, #23]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eec6:	d112      	bne.n	800eeee <HAL_SPI_Receive+0x44>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10e      	bne.n	800eeee <HAL_SPI_Receive+0x44>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2204      	movs	r2, #4
 800eed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800eed8:	88fa      	ldrh	r2, [r7, #6]
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	4613      	mov	r3, r2
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	68b9      	ldr	r1, [r7, #8]
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f000 f8f1 	bl	800f0cc <HAL_SPI_TransmitReceive>
 800eeea:	4603      	mov	r3, r0
 800eeec:	e0ea      	b.n	800f0c4 <HAL_SPI_Receive+0x21a>
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d101      	bne.n	800eefc <HAL_SPI_Receive+0x52>
 800eef8:	2302      	movs	r3, #2
 800eefa:	e0e3      	b.n	800f0c4 <HAL_SPI_Receive+0x21a>
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800ef04:	f7fe fc3a 	bl	800d77c <HAL_GetTick>
 800ef08:	6138      	str	r0, [r7, #16]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d002      	beq.n	800ef1c <HAL_SPI_Receive+0x72>
 800ef16:	2302      	movs	r3, #2
 800ef18:	75fb      	strb	r3, [r7, #23]
 800ef1a:	e0ca      	b.n	800f0b2 <HAL_SPI_Receive+0x208>
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d002      	beq.n	800ef28 <HAL_SPI_Receive+0x7e>
 800ef22:	88fb      	ldrh	r3, [r7, #6]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d102      	bne.n	800ef2e <HAL_SPI_Receive+0x84>
 800ef28:	2301      	movs	r3, #1
 800ef2a:	75fb      	strb	r3, [r7, #23]
 800ef2c:	e0c1      	b.n	800f0b2 <HAL_SPI_Receive+0x208>
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2204      	movs	r2, #4
 800ef32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	655a      	str	r2, [r3, #84]	@ 0x54
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	68ba      	ldr	r2, [r7, #8]
 800ef40:	639a      	str	r2, [r3, #56]	@ 0x38
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	88fa      	ldrh	r2, [r7, #6]
 800ef46:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	88fa      	ldrh	r2, [r7, #6]
 800ef4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	631a      	str	r2, [r3, #48]	@ 0x30
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2200      	movs	r2, #0
 800ef58:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2200      	movs	r2, #0
 800ef64:	641a      	str	r2, [r3, #64]	@ 0x40
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	645a      	str	r2, [r3, #68]	@ 0x44
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef74:	d10f      	bne.n	800ef96 <HAL_SPI_Receive+0xec>
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ef84:	601a      	str	r2, [r3, #0]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efa0:	2b40      	cmp	r3, #64	@ 0x40
 800efa2:	d007      	beq.n	800efb4 <HAL_SPI_Receive+0x10a>
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d162      	bne.n	800f082 <HAL_SPI_Receive+0x1d8>
 800efbc:	e02e      	b.n	800f01c <HAL_SPI_Receive+0x172>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	f003 0301 	and.w	r3, r3, #1
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d115      	bne.n	800eff8 <HAL_SPI_Receive+0x14e>
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f103 020c 	add.w	r2, r3, #12
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efd8:	7812      	ldrb	r2, [r2, #0]
 800efda:	b2d2      	uxtb	r2, r2
 800efdc:	701a      	strb	r2, [r3, #0]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	639a      	str	r2, [r3, #56]	@ 0x38
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efec:	b29b      	uxth	r3, r3
 800efee:	3b01      	subs	r3, #1
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800eff6:	e011      	b.n	800f01c <HAL_SPI_Receive+0x172>
 800eff8:	f7fe fbc0 	bl	800d77c <HAL_GetTick>
 800effc:	4602      	mov	r2, r0
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	429a      	cmp	r2, r3
 800f006:	d803      	bhi.n	800f010 <HAL_SPI_Receive+0x166>
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00e:	d102      	bne.n	800f016 <HAL_SPI_Receive+0x16c>
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d102      	bne.n	800f01c <HAL_SPI_Receive+0x172>
 800f016:	2303      	movs	r3, #3
 800f018:	75fb      	strb	r3, [r7, #23]
 800f01a:	e04a      	b.n	800f0b2 <HAL_SPI_Receive+0x208>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f020:	b29b      	uxth	r3, r3
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1cb      	bne.n	800efbe <HAL_SPI_Receive+0x114>
 800f026:	e031      	b.n	800f08c <HAL_SPI_Receive+0x1e2>
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	f003 0301 	and.w	r3, r3, #1
 800f032:	2b01      	cmp	r3, #1
 800f034:	d113      	bne.n	800f05e <HAL_SPI_Receive+0x1b4>
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68da      	ldr	r2, [r3, #12]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f040:	b292      	uxth	r2, r2
 800f042:	801a      	strh	r2, [r3, #0]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f048:	1c9a      	adds	r2, r3, #2
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	639a      	str	r2, [r3, #56]	@ 0x38
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f052:	b29b      	uxth	r3, r3
 800f054:	3b01      	subs	r3, #1
 800f056:	b29a      	uxth	r2, r3
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f05c:	e011      	b.n	800f082 <HAL_SPI_Receive+0x1d8>
 800f05e:	f7fe fb8d 	bl	800d77c <HAL_GetTick>
 800f062:	4602      	mov	r2, r0
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	683a      	ldr	r2, [r7, #0]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d803      	bhi.n	800f076 <HAL_SPI_Receive+0x1cc>
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f074:	d102      	bne.n	800f07c <HAL_SPI_Receive+0x1d2>
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d102      	bne.n	800f082 <HAL_SPI_Receive+0x1d8>
 800f07c:	2303      	movs	r3, #3
 800f07e:	75fb      	strb	r3, [r7, #23]
 800f080:	e017      	b.n	800f0b2 <HAL_SPI_Receive+0x208>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f086:	b29b      	uxth	r3, r3
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1cd      	bne.n	800f028 <HAL_SPI_Receive+0x17e>
 800f08c:	693a      	ldr	r2, [r7, #16]
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f000 fb57 	bl	800f744 <SPI_EndRxTransaction>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d002      	beq.n	800f0a2 <HAL_SPI_Receive+0x1f8>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2220      	movs	r2, #32
 800f0a0:	655a      	str	r2, [r3, #84]	@ 0x54
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <HAL_SPI_Receive+0x206>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	75fb      	strb	r3, [r7, #23]
 800f0ae:	e000      	b.n	800f0b2 <HAL_SPI_Receive+0x208>
 800f0b0:	bf00      	nop
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f0c2:	7dfb      	ldrb	r3, [r7, #23]
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3718      	adds	r7, #24
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <HAL_SPI_TransmitReceive>:
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b08c      	sub	sp, #48	@ 0x30
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
 800f0d8:	807b      	strh	r3, [r7, #2]
 800f0da:	2301      	movs	r3, #1
 800f0dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d101      	bne.n	800f0f2 <HAL_SPI_TransmitReceive+0x26>
 800f0ee:	2302      	movs	r3, #2
 800f0f0:	e18a      	b.n	800f408 <HAL_SPI_TransmitReceive+0x33c>
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f0fa:	f7fe fb3f 	bl	800d77c <HAL_GetTick>
 800f0fe:	6278      	str	r0, [r7, #36]	@ 0x24
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	61fb      	str	r3, [r7, #28]
 800f110:	887b      	ldrh	r3, [r7, #2]
 800f112:	837b      	strh	r3, [r7, #26]
 800f114:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d00f      	beq.n	800f13c <HAL_SPI_TransmitReceive+0x70>
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f122:	d107      	bne.n	800f134 <HAL_SPI_TransmitReceive+0x68>
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d103      	bne.n	800f134 <HAL_SPI_TransmitReceive+0x68>
 800f12c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f130:	2b04      	cmp	r3, #4
 800f132:	d003      	beq.n	800f13c <HAL_SPI_TransmitReceive+0x70>
 800f134:	2302      	movs	r3, #2
 800f136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f13a:	e15b      	b.n	800f3f4 <HAL_SPI_TransmitReceive+0x328>
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d005      	beq.n	800f14e <HAL_SPI_TransmitReceive+0x82>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <HAL_SPI_TransmitReceive+0x82>
 800f148:	887b      	ldrh	r3, [r7, #2]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d103      	bne.n	800f156 <HAL_SPI_TransmitReceive+0x8a>
 800f14e:	2301      	movs	r3, #1
 800f150:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f154:	e14e      	b.n	800f3f4 <HAL_SPI_TransmitReceive+0x328>
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	2b04      	cmp	r3, #4
 800f160:	d003      	beq.n	800f16a <HAL_SPI_TransmitReceive+0x9e>
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2205      	movs	r2, #5
 800f166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	655a      	str	r2, [r3, #84]	@ 0x54
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	639a      	str	r2, [r3, #56]	@ 0x38
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	887a      	ldrh	r2, [r7, #2]
 800f17a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	887a      	ldrh	r2, [r7, #2]
 800f180:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	68ba      	ldr	r2, [r7, #8]
 800f186:	631a      	str	r2, [r3, #48]	@ 0x30
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	887a      	ldrh	r2, [r7, #2]
 800f18c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	887a      	ldrh	r2, [r7, #2]
 800f192:	869a      	strh	r2, [r3, #52]	@ 0x34
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2200      	movs	r2, #0
 800f198:	641a      	str	r2, [r3, #64]	@ 0x40
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2200      	movs	r2, #0
 800f19e:	645a      	str	r2, [r3, #68]	@ 0x44
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1aa:	2b40      	cmp	r3, #64	@ 0x40
 800f1ac:	d007      	beq.n	800f1be <HAL_SPI_TransmitReceive+0xf2>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f1c6:	d178      	bne.n	800f2ba <HAL_SPI_TransmitReceive+0x1ee>
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d002      	beq.n	800f1d6 <HAL_SPI_TransmitReceive+0x10a>
 800f1d0:	8b7b      	ldrh	r3, [r7, #26]
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d166      	bne.n	800f2a4 <HAL_SPI_TransmitReceive+0x1d8>
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1da:	881a      	ldrh	r2, [r3, #0]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	60da      	str	r2, [r3, #12]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1e6:	1c9a      	adds	r2, r3, #2
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	631a      	str	r2, [r3, #48]	@ 0x30
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f1fa:	e053      	b.n	800f2a4 <HAL_SPI_TransmitReceive+0x1d8>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	f003 0302 	and.w	r3, r3, #2
 800f206:	2b02      	cmp	r3, #2
 800f208:	d11b      	bne.n	800f242 <HAL_SPI_TransmitReceive+0x176>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f20e:	b29b      	uxth	r3, r3
 800f210:	2b00      	cmp	r3, #0
 800f212:	d016      	beq.n	800f242 <HAL_SPI_TransmitReceive+0x176>
 800f214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f216:	2b01      	cmp	r3, #1
 800f218:	d113      	bne.n	800f242 <HAL_SPI_TransmitReceive+0x176>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f21e:	881a      	ldrh	r2, [r3, #0]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	60da      	str	r2, [r3, #12]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f22a:	1c9a      	adds	r2, r3, #2
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	631a      	str	r2, [r3, #48]	@ 0x30
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f234:	b29b      	uxth	r3, r3
 800f236:	3b01      	subs	r3, #1
 800f238:	b29a      	uxth	r2, r3
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f23e:	2300      	movs	r3, #0
 800f240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	f003 0301 	and.w	r3, r3, #1
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d119      	bne.n	800f284 <HAL_SPI_TransmitReceive+0x1b8>
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f254:	b29b      	uxth	r3, r3
 800f256:	2b00      	cmp	r3, #0
 800f258:	d014      	beq.n	800f284 <HAL_SPI_TransmitReceive+0x1b8>
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	68da      	ldr	r2, [r3, #12]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f264:	b292      	uxth	r2, r2
 800f266:	801a      	strh	r2, [r3, #0]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f26c:	1c9a      	adds	r2, r3, #2
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	639a      	str	r2, [r3, #56]	@ 0x38
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f276:	b29b      	uxth	r3, r3
 800f278:	3b01      	subs	r3, #1
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f280:	2301      	movs	r3, #1
 800f282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f284:	f7fe fa7a 	bl	800d77c <HAL_GetTick>
 800f288:	4602      	mov	r2, r0
 800f28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f290:	429a      	cmp	r2, r3
 800f292:	d807      	bhi.n	800f2a4 <HAL_SPI_TransmitReceive+0x1d8>
 800f294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	d003      	beq.n	800f2a4 <HAL_SPI_TransmitReceive+0x1d8>
 800f29c:	2303      	movs	r3, #3
 800f29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2a2:	e0a7      	b.n	800f3f4 <HAL_SPI_TransmitReceive+0x328>
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d1a6      	bne.n	800f1fc <HAL_SPI_TransmitReceive+0x130>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d1a1      	bne.n	800f1fc <HAL_SPI_TransmitReceive+0x130>
 800f2b8:	e07c      	b.n	800f3b4 <HAL_SPI_TransmitReceive+0x2e8>
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d002      	beq.n	800f2c8 <HAL_SPI_TransmitReceive+0x1fc>
 800f2c2:	8b7b      	ldrh	r3, [r7, #26]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d16b      	bne.n	800f3a0 <HAL_SPI_TransmitReceive+0x2d4>
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	330c      	adds	r3, #12
 800f2d2:	7812      	ldrb	r2, [r2, #0]
 800f2d4:	701a      	strb	r2, [r3, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2da:	1c5a      	adds	r2, r3, #1
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	631a      	str	r2, [r3, #48]	@ 0x30
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f2ee:	e057      	b.n	800f3a0 <HAL_SPI_TransmitReceive+0x2d4>
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	f003 0302 	and.w	r3, r3, #2
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d11c      	bne.n	800f338 <HAL_SPI_TransmitReceive+0x26c>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f302:	b29b      	uxth	r3, r3
 800f304:	2b00      	cmp	r3, #0
 800f306:	d017      	beq.n	800f338 <HAL_SPI_TransmitReceive+0x26c>
 800f308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d114      	bne.n	800f338 <HAL_SPI_TransmitReceive+0x26c>
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	330c      	adds	r3, #12
 800f318:	7812      	ldrb	r2, [r2, #0]
 800f31a:	701a      	strb	r2, [r3, #0]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f320:	1c5a      	adds	r2, r3, #1
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	631a      	str	r2, [r3, #48]	@ 0x30
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	3b01      	subs	r3, #1
 800f32e:	b29a      	uxth	r2, r3
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f334:	2300      	movs	r3, #0
 800f336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	f003 0301 	and.w	r3, r3, #1
 800f342:	2b01      	cmp	r3, #1
 800f344:	d119      	bne.n	800f37a <HAL_SPI_TransmitReceive+0x2ae>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d014      	beq.n	800f37a <HAL_SPI_TransmitReceive+0x2ae>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	68da      	ldr	r2, [r3, #12]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f35a:	b2d2      	uxtb	r2, r2
 800f35c:	701a      	strb	r2, [r3, #0]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f362:	1c5a      	adds	r2, r3, #1
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	639a      	str	r2, [r3, #56]	@ 0x38
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	3b01      	subs	r3, #1
 800f370:	b29a      	uxth	r2, r3
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f376:	2301      	movs	r3, #1
 800f378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f37a:	f7fe f9ff 	bl	800d77c <HAL_GetTick>
 800f37e:	4602      	mov	r2, r0
 800f380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f386:	429a      	cmp	r2, r3
 800f388:	d803      	bhi.n	800f392 <HAL_SPI_TransmitReceive+0x2c6>
 800f38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f390:	d102      	bne.n	800f398 <HAL_SPI_TransmitReceive+0x2cc>
 800f392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f394:	2b00      	cmp	r3, #0
 800f396:	d103      	bne.n	800f3a0 <HAL_SPI_TransmitReceive+0x2d4>
 800f398:	2303      	movs	r3, #3
 800f39a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f39e:	e029      	b.n	800f3f4 <HAL_SPI_TransmitReceive+0x328>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1a2      	bne.n	800f2f0 <HAL_SPI_TransmitReceive+0x224>
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d19d      	bne.n	800f2f0 <HAL_SPI_TransmitReceive+0x224>
 800f3b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f000 fa29 	bl	800f810 <SPI_EndRxTxTransaction>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d006      	beq.n	800f3d2 <HAL_SPI_TransmitReceive+0x306>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2220      	movs	r2, #32
 800f3ce:	655a      	str	r2, [r3, #84]	@ 0x54
 800f3d0:	e010      	b.n	800f3f4 <HAL_SPI_TransmitReceive+0x328>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10b      	bne.n	800f3f2 <HAL_SPI_TransmitReceive+0x326>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	617b      	str	r3, [r7, #20]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	617b      	str	r3, [r7, #20]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	617b      	str	r3, [r7, #20]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	e000      	b.n	800f3f4 <HAL_SPI_TransmitReceive+0x328>
 800f3f2:	bf00      	nop
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f404:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f408:	4618      	mov	r0, r3
 800f40a:	3730      	adds	r7, #48	@ 0x30
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <HAL_SPI_IRQHandler>:
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	61fb      	str	r3, [r7, #28]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	61bb      	str	r3, [r7, #24]
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d10e      	bne.n	800f450 <HAL_SPI_IRQHandler+0x40>
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d009      	beq.n	800f450 <HAL_SPI_IRQHandler+0x40>
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f442:	2b00      	cmp	r3, #0
 800f444:	d004      	beq.n	800f450 <HAL_SPI_IRQHandler+0x40>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	4798      	blx	r3
 800f44e:	e0ce      	b.n	800f5ee <HAL_SPI_IRQHandler+0x1de>
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	f003 0302 	and.w	r3, r3, #2
 800f456:	2b00      	cmp	r3, #0
 800f458:	d009      	beq.n	800f46e <HAL_SPI_IRQHandler+0x5e>
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f460:	2b00      	cmp	r3, #0
 800f462:	d004      	beq.n	800f46e <HAL_SPI_IRQHandler+0x5e>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	4798      	blx	r3
 800f46c:	e0bf      	b.n	800f5ee <HAL_SPI_IRQHandler+0x1de>
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	f003 0320 	and.w	r3, r3, #32
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10a      	bne.n	800f48e <HAL_SPI_IRQHandler+0x7e>
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d105      	bne.n	800f48e <HAL_SPI_IRQHandler+0x7e>
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f000 80b0 	beq.w	800f5ee <HAL_SPI_IRQHandler+0x1de>
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	f003 0320 	and.w	r3, r3, #32
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 80aa 	beq.w	800f5ee <HAL_SPI_IRQHandler+0x1de>
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d023      	beq.n	800f4ec <HAL_SPI_IRQHandler+0xdc>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b03      	cmp	r3, #3
 800f4ae:	d011      	beq.n	800f4d4 <HAL_SPI_IRQHandler+0xc4>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4b4:	f043 0204 	orr.w	r2, r3, #4
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	655a      	str	r2, [r3, #84]	@ 0x54
 800f4bc:	2300      	movs	r3, #0
 800f4be:	617b      	str	r3, [r7, #20]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	617b      	str	r3, [r7, #20]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	617b      	str	r3, [r7, #20]
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	e00b      	b.n	800f4ec <HAL_SPI_IRQHandler+0xdc>
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	613b      	str	r3, [r7, #16]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	613b      	str	r3, [r7, #16]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	613b      	str	r3, [r7, #16]
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	e080      	b.n	800f5ee <HAL_SPI_IRQHandler+0x1de>
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	f003 0320 	and.w	r3, r3, #32
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d014      	beq.n	800f520 <HAL_SPI_IRQHandler+0x110>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4fa:	f043 0201 	orr.w	r2, r3, #1
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	655a      	str	r2, [r3, #84]	@ 0x54
 800f502:	2300      	movs	r3, #0
 800f504:	60fb      	str	r3, [r7, #12]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	60fb      	str	r3, [r7, #12]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f51c:	601a      	str	r2, [r3, #0]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00c      	beq.n	800f544 <HAL_SPI_IRQHandler+0x134>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f52e:	f043 0208 	orr.w	r2, r3, #8
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	655a      	str	r2, [r3, #84]	@ 0x54
 800f536:	2300      	movs	r3, #0
 800f538:	60bb      	str	r3, [r7, #8]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	60bb      	str	r3, [r7, #8]
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d04f      	beq.n	800f5ec <HAL_SPI_IRQHandler+0x1dc>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	685a      	ldr	r2, [r3, #4]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f55a:	605a      	str	r2, [r3, #4]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	f003 0302 	and.w	r3, r3, #2
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d104      	bne.n	800f578 <HAL_SPI_IRQHandler+0x168>
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	f003 0301 	and.w	r3, r3, #1
 800f574:	2b00      	cmp	r3, #0
 800f576:	d034      	beq.n	800f5e2 <HAL_SPI_IRQHandler+0x1d2>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f022 0203 	bic.w	r2, r2, #3
 800f586:	605a      	str	r2, [r3, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d011      	beq.n	800f5b4 <HAL_SPI_IRQHandler+0x1a4>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f594:	4a17      	ldr	r2, [pc, #92]	@ (800f5f4 <HAL_SPI_IRQHandler+0x1e4>)
 800f596:	651a      	str	r2, [r3, #80]	@ 0x50
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fe fa9e 	bl	800dade <HAL_DMA_Abort_IT>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d005      	beq.n	800f5b4 <HAL_SPI_IRQHandler+0x1a4>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d016      	beq.n	800f5ea <HAL_SPI_IRQHandler+0x1da>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f5c0:	4a0c      	ldr	r2, [pc, #48]	@ (800f5f4 <HAL_SPI_IRQHandler+0x1e4>)
 800f5c2:	651a      	str	r2, [r3, #80]	@ 0x50
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7fe fa88 	bl	800dade <HAL_DMA_Abort_IT>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d00a      	beq.n	800f5ea <HAL_SPI_IRQHandler+0x1da>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	655a      	str	r2, [r3, #84]	@ 0x54
 800f5e0:	e003      	b.n	800f5ea <HAL_SPI_IRQHandler+0x1da>
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 f808 	bl	800f5f8 <HAL_SPI_ErrorCallback>
 800f5e8:	e000      	b.n	800f5ec <HAL_SPI_IRQHandler+0x1dc>
 800f5ea:	bf00      	nop
 800f5ec:	bf00      	nop
 800f5ee:	3720      	adds	r7, #32
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	0800f60d 	.word	0x0800f60d

0800f5f8 <HAL_SPI_ErrorCallback>:
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	bf00      	nop
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <SPI_DMAAbortOnError>:
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f618:	60fb      	str	r3, [r7, #12]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2200      	movs	r2, #0
 800f61e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2200      	movs	r2, #0
 800f624:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f7ff ffe6 	bl	800f5f8 <HAL_SPI_ErrorCallback>
 800f62c:	bf00      	nop
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <SPI_WaitFlagStateUntilTimeout>:
 800f634:	b580      	push	{r7, lr}
 800f636:	b088      	sub	sp, #32
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	603b      	str	r3, [r7, #0]
 800f640:	4613      	mov	r3, r2
 800f642:	71fb      	strb	r3, [r7, #7]
 800f644:	f7fe f89a 	bl	800d77c <HAL_GetTick>
 800f648:	4602      	mov	r2, r0
 800f64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64c:	1a9b      	subs	r3, r3, r2
 800f64e:	683a      	ldr	r2, [r7, #0]
 800f650:	4413      	add	r3, r2
 800f652:	61fb      	str	r3, [r7, #28]
 800f654:	f7fe f892 	bl	800d77c <HAL_GetTick>
 800f658:	61b8      	str	r0, [r7, #24]
 800f65a:	4b39      	ldr	r3, [pc, #228]	@ (800f740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	015b      	lsls	r3, r3, #5
 800f660:	0d1b      	lsrs	r3, r3, #20
 800f662:	69fa      	ldr	r2, [r7, #28]
 800f664:	fb02 f303 	mul.w	r3, r2, r3
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	e054      	b.n	800f716 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f672:	d050      	beq.n	800f716 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800f674:	f7fe f882 	bl	800d77c <HAL_GetTick>
 800f678:	4602      	mov	r2, r0
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	1ad3      	subs	r3, r2, r3
 800f67e:	69fa      	ldr	r2, [r7, #28]
 800f680:	429a      	cmp	r2, r3
 800f682:	d902      	bls.n	800f68a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d13d      	bne.n	800f706 <SPI_WaitFlagStateUntilTimeout+0xd2>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	685a      	ldr	r2, [r3, #4]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f698:	605a      	str	r2, [r3, #4]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f6a2:	d111      	bne.n	800f6c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f6ac:	d004      	beq.n	800f6b8 <SPI_WaitFlagStateUntilTimeout+0x84>
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f6b6:	d107      	bne.n	800f6c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f6c6:	601a      	str	r2, [r3, #0]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f6d0:	d10f      	bne.n	800f6f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f702:	2303      	movs	r3, #3
 800f704:	e017      	b.n	800f736 <SPI_WaitFlagStateUntilTimeout+0x102>
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d101      	bne.n	800f710 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800f70c:	2300      	movs	r3, #0
 800f70e:	61fb      	str	r3, [r7, #28]
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	3b01      	subs	r3, #1
 800f714:	617b      	str	r3, [r7, #20]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	689a      	ldr	r2, [r3, #8]
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	4013      	ands	r3, r2
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	429a      	cmp	r2, r3
 800f724:	bf0c      	ite	eq
 800f726:	2301      	moveq	r3, #1
 800f728:	2300      	movne	r3, #0
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	461a      	mov	r2, r3
 800f72e:	79fb      	ldrb	r3, [r7, #7]
 800f730:	429a      	cmp	r2, r3
 800f732:	d19b      	bne.n	800f66c <SPI_WaitFlagStateUntilTimeout+0x38>
 800f734:	2300      	movs	r3, #0
 800f736:	4618      	mov	r0, r3
 800f738:	3720      	adds	r7, #32
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20000004 	.word	0x20000004

0800f744 <SPI_EndRxTransaction>:
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af02      	add	r7, sp, #8
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f758:	d111      	bne.n	800f77e <SPI_EndRxTransaction+0x3a>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	689b      	ldr	r3, [r3, #8]
 800f75e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f762:	d004      	beq.n	800f76e <SPI_EndRxTransaction+0x2a>
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f76c:	d107      	bne.n	800f77e <SPI_EndRxTransaction+0x3a>
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f786:	d12a      	bne.n	800f7de <SPI_EndRxTransaction+0x9a>
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f790:	d012      	beq.n	800f7b8 <SPI_EndRxTransaction+0x74>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	2200      	movs	r2, #0
 800f79a:	2180      	movs	r1, #128	@ 0x80
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f7ff ff49 	bl	800f634 <SPI_WaitFlagStateUntilTimeout>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d02d      	beq.n	800f804 <SPI_EndRxTransaction+0xc0>
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7ac:	f043 0220 	orr.w	r2, r3, #32
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	e026      	b.n	800f806 <SPI_EndRxTransaction+0xc2>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	9300      	str	r3, [sp, #0]
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	68f8      	ldr	r0, [r7, #12]
 800f7c4:	f7ff ff36 	bl	800f634 <SPI_WaitFlagStateUntilTimeout>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d01a      	beq.n	800f804 <SPI_EndRxTransaction+0xc0>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7d2:	f043 0220 	orr.w	r2, r3, #32
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	655a      	str	r2, [r3, #84]	@ 0x54
 800f7da:	2303      	movs	r3, #3
 800f7dc:	e013      	b.n	800f806 <SPI_EndRxTransaction+0xc2>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	9300      	str	r3, [sp, #0]
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	2101      	movs	r1, #1
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f7ff ff23 	bl	800f634 <SPI_WaitFlagStateUntilTimeout>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d007      	beq.n	800f804 <SPI_EndRxTransaction+0xc0>
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7f8:	f043 0220 	orr.w	r2, r3, #32
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	655a      	str	r2, [r3, #84]	@ 0x54
 800f800:	2303      	movs	r3, #3
 800f802:	e000      	b.n	800f806 <SPI_EndRxTransaction+0xc2>
 800f804:	2300      	movs	r3, #0
 800f806:	4618      	mov	r0, r3
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
	...

0800f810 <SPI_EndRxTxTransaction>:
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af02      	add	r7, sp, #8
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
 800f81c:	4b1b      	ldr	r3, [pc, #108]	@ (800f88c <SPI_EndRxTxTransaction+0x7c>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4a1b      	ldr	r2, [pc, #108]	@ (800f890 <SPI_EndRxTxTransaction+0x80>)
 800f822:	fba2 2303 	umull	r2, r3, r2, r3
 800f826:	0d5b      	lsrs	r3, r3, #21
 800f828:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f82c:	fb02 f303 	mul.w	r3, r2, r3
 800f830:	617b      	str	r3, [r7, #20]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f83a:	d112      	bne.n	800f862 <SPI_EndRxTxTransaction+0x52>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	2200      	movs	r2, #0
 800f844:	2180      	movs	r1, #128	@ 0x80
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f7ff fef4 	bl	800f634 <SPI_WaitFlagStateUntilTimeout>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d016      	beq.n	800f880 <SPI_EndRxTxTransaction+0x70>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f856:	f043 0220 	orr.w	r2, r3, #32
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	655a      	str	r2, [r3, #84]	@ 0x54
 800f85e:	2303      	movs	r3, #3
 800f860:	e00f      	b.n	800f882 <SPI_EndRxTxTransaction+0x72>
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00a      	beq.n	800f87e <SPI_EndRxTxTransaction+0x6e>
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	3b01      	subs	r3, #1
 800f86c:	617b      	str	r3, [r7, #20]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f878:	2b80      	cmp	r3, #128	@ 0x80
 800f87a:	d0f2      	beq.n	800f862 <SPI_EndRxTxTransaction+0x52>
 800f87c:	e000      	b.n	800f880 <SPI_EndRxTxTransaction+0x70>
 800f87e:	bf00      	nop
 800f880:	2300      	movs	r3, #0
 800f882:	4618      	mov	r0, r3
 800f884:	3718      	adds	r7, #24
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20000004 	.word	0x20000004
 800f890:	165e9f81 	.word	0x165e9f81

0800f894 <HAL_TIM_Base_Init>:
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d101      	bne.n	800f8a6 <HAL_TIM_Base_Init+0x12>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	e041      	b.n	800f92a <HAL_TIM_Base_Init+0x96>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d106      	bne.n	800f8c0 <HAL_TIM_Base_Init+0x2c>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f7fd fbee 	bl	800d09c <HAL_TIM_Base_MspInit>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2202      	movs	r2, #2
 800f8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3304      	adds	r3, #4
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	4610      	mov	r0, r2
 800f8d4:	f000 fba8 	bl	8010028 <TIM_Base_SetConfig>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2201      	movs	r2, #1
 800f904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2201      	movs	r2, #1
 800f90c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2201      	movs	r2, #1
 800f914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2201      	movs	r2, #1
 800f91c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2201      	movs	r2, #1
 800f924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f928:	2300      	movs	r3, #0
 800f92a:	4618      	mov	r0, r3
 800f92c:	3708      	adds	r7, #8
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
	...

0800f934 <HAL_TIM_Base_Start_IT>:
 800f934:	b480      	push	{r7}
 800f936:	b085      	sub	sp, #20
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f942:	b2db      	uxtb	r3, r3
 800f944:	2b01      	cmp	r3, #1
 800f946:	d001      	beq.n	800f94c <HAL_TIM_Base_Start_IT+0x18>
 800f948:	2301      	movs	r3, #1
 800f94a:	e04e      	b.n	800f9ea <HAL_TIM_Base_Start_IT+0xb6>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2202      	movs	r2, #2
 800f950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	68da      	ldr	r2, [r3, #12]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f042 0201 	orr.w	r2, r2, #1
 800f962:	60da      	str	r2, [r3, #12]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4a23      	ldr	r2, [pc, #140]	@ (800f9f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d022      	beq.n	800f9b4 <HAL_TIM_Base_Start_IT+0x80>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f976:	d01d      	beq.n	800f9b4 <HAL_TIM_Base_Start_IT+0x80>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a1f      	ldr	r2, [pc, #124]	@ (800f9fc <HAL_TIM_Base_Start_IT+0xc8>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d018      	beq.n	800f9b4 <HAL_TIM_Base_Start_IT+0x80>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4a1e      	ldr	r2, [pc, #120]	@ (800fa00 <HAL_TIM_Base_Start_IT+0xcc>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d013      	beq.n	800f9b4 <HAL_TIM_Base_Start_IT+0x80>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a1c      	ldr	r2, [pc, #112]	@ (800fa04 <HAL_TIM_Base_Start_IT+0xd0>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d00e      	beq.n	800f9b4 <HAL_TIM_Base_Start_IT+0x80>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a1b      	ldr	r2, [pc, #108]	@ (800fa08 <HAL_TIM_Base_Start_IT+0xd4>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d009      	beq.n	800f9b4 <HAL_TIM_Base_Start_IT+0x80>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4a19      	ldr	r2, [pc, #100]	@ (800fa0c <HAL_TIM_Base_Start_IT+0xd8>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d004      	beq.n	800f9b4 <HAL_TIM_Base_Start_IT+0x80>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4a18      	ldr	r2, [pc, #96]	@ (800fa10 <HAL_TIM_Base_Start_IT+0xdc>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d111      	bne.n	800f9d8 <HAL_TIM_Base_Start_IT+0xa4>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	f003 0307 	and.w	r3, r3, #7
 800f9be:	60fb      	str	r3, [r7, #12]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b06      	cmp	r3, #6
 800f9c4:	d010      	beq.n	800f9e8 <HAL_TIM_Base_Start_IT+0xb4>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f042 0201 	orr.w	r2, r2, #1
 800f9d4:	601a      	str	r2, [r3, #0]
 800f9d6:	e007      	b.n	800f9e8 <HAL_TIM_Base_Start_IT+0xb4>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f042 0201 	orr.w	r2, r2, #1
 800f9e6:	601a      	str	r2, [r3, #0]
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3714      	adds	r7, #20
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	40010000 	.word	0x40010000
 800f9fc:	40000400 	.word	0x40000400
 800fa00:	40000800 	.word	0x40000800
 800fa04:	40000c00 	.word	0x40000c00
 800fa08:	40010400 	.word	0x40010400
 800fa0c:	40014000 	.word	0x40014000
 800fa10:	40001800 	.word	0x40001800

0800fa14 <HAL_TIM_PWM_Init>:
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d101      	bne.n	800fa26 <HAL_TIM_PWM_Init+0x12>
 800fa22:	2301      	movs	r3, #1
 800fa24:	e041      	b.n	800faaa <HAL_TIM_PWM_Init+0x96>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d106      	bne.n	800fa40 <HAL_TIM_PWM_Init+0x2c>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7fd fae0 	bl	800d000 <HAL_TIM_PWM_MspInit>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2202      	movs	r2, #2
 800fa44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	3304      	adds	r3, #4
 800fa50:	4619      	mov	r1, r3
 800fa52:	4610      	mov	r0, r2
 800fa54:	f000 fae8 	bl	8010028 <TIM_Base_SetConfig>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2201      	movs	r2, #1
 800fa64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2201      	movs	r2, #1
 800fa74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2201      	movs	r2, #1
 800fa84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2201      	movs	r2, #1
 800fa94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2201      	movs	r2, #1
 800faa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800faa8:	2300      	movs	r3, #0
 800faaa:	4618      	mov	r0, r3
 800faac:	3708      	adds	r7, #8
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <HAL_TIM_IRQHandler>:
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b082      	sub	sp, #8
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	691b      	ldr	r3, [r3, #16]
 800fac0:	f003 0302 	and.w	r3, r3, #2
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d122      	bne.n	800fb0e <HAL_TIM_IRQHandler+0x5c>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	f003 0302 	and.w	r3, r3, #2
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	d11b      	bne.n	800fb0e <HAL_TIM_IRQHandler+0x5c>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f06f 0202 	mvn.w	r2, #2
 800fade:	611a      	str	r2, [r3, #16]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2201      	movs	r2, #1
 800fae4:	771a      	strb	r2, [r3, #28]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	699b      	ldr	r3, [r3, #24]
 800faec:	f003 0303 	and.w	r3, r3, #3
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d003      	beq.n	800fafc <HAL_TIM_IRQHandler+0x4a>
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f000 fa78 	bl	800ffea <HAL_TIM_IC_CaptureCallback>
 800fafa:	e005      	b.n	800fb08 <HAL_TIM_IRQHandler+0x56>
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f000 fa6a 	bl	800ffd6 <HAL_TIM_OC_DelayElapsedCallback>
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 fa7b 	bl	800fffe <HAL_TIM_PWM_PulseFinishedCallback>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	771a      	strb	r2, [r3, #28]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	691b      	ldr	r3, [r3, #16]
 800fb14:	f003 0304 	and.w	r3, r3, #4
 800fb18:	2b04      	cmp	r3, #4
 800fb1a:	d122      	bne.n	800fb62 <HAL_TIM_IRQHandler+0xb0>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	f003 0304 	and.w	r3, r3, #4
 800fb26:	2b04      	cmp	r3, #4
 800fb28:	d11b      	bne.n	800fb62 <HAL_TIM_IRQHandler+0xb0>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f06f 0204 	mvn.w	r2, #4
 800fb32:	611a      	str	r2, [r3, #16]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2202      	movs	r2, #2
 800fb38:	771a      	strb	r2, [r3, #28]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	699b      	ldr	r3, [r3, #24]
 800fb40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d003      	beq.n	800fb50 <HAL_TIM_IRQHandler+0x9e>
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 fa4e 	bl	800ffea <HAL_TIM_IC_CaptureCallback>
 800fb4e:	e005      	b.n	800fb5c <HAL_TIM_IRQHandler+0xaa>
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fa40 	bl	800ffd6 <HAL_TIM_OC_DelayElapsedCallback>
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fa51 	bl	800fffe <HAL_TIM_PWM_PulseFinishedCallback>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	771a      	strb	r2, [r3, #28]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	691b      	ldr	r3, [r3, #16]
 800fb68:	f003 0308 	and.w	r3, r3, #8
 800fb6c:	2b08      	cmp	r3, #8
 800fb6e:	d122      	bne.n	800fbb6 <HAL_TIM_IRQHandler+0x104>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	f003 0308 	and.w	r3, r3, #8
 800fb7a:	2b08      	cmp	r3, #8
 800fb7c:	d11b      	bne.n	800fbb6 <HAL_TIM_IRQHandler+0x104>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f06f 0208 	mvn.w	r2, #8
 800fb86:	611a      	str	r2, [r3, #16]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2204      	movs	r2, #4
 800fb8c:	771a      	strb	r2, [r3, #28]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	69db      	ldr	r3, [r3, #28]
 800fb94:	f003 0303 	and.w	r3, r3, #3
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d003      	beq.n	800fba4 <HAL_TIM_IRQHandler+0xf2>
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 fa24 	bl	800ffea <HAL_TIM_IC_CaptureCallback>
 800fba2:	e005      	b.n	800fbb0 <HAL_TIM_IRQHandler+0xfe>
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f000 fa16 	bl	800ffd6 <HAL_TIM_OC_DelayElapsedCallback>
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 fa27 	bl	800fffe <HAL_TIM_PWM_PulseFinishedCallback>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	771a      	strb	r2, [r3, #28]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	691b      	ldr	r3, [r3, #16]
 800fbbc:	f003 0310 	and.w	r3, r3, #16
 800fbc0:	2b10      	cmp	r3, #16
 800fbc2:	d122      	bne.n	800fc0a <HAL_TIM_IRQHandler+0x158>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	f003 0310 	and.w	r3, r3, #16
 800fbce:	2b10      	cmp	r3, #16
 800fbd0:	d11b      	bne.n	800fc0a <HAL_TIM_IRQHandler+0x158>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f06f 0210 	mvn.w	r2, #16
 800fbda:	611a      	str	r2, [r3, #16]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2208      	movs	r2, #8
 800fbe0:	771a      	strb	r2, [r3, #28]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	69db      	ldr	r3, [r3, #28]
 800fbe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d003      	beq.n	800fbf8 <HAL_TIM_IRQHandler+0x146>
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 f9fa 	bl	800ffea <HAL_TIM_IC_CaptureCallback>
 800fbf6:	e005      	b.n	800fc04 <HAL_TIM_IRQHandler+0x152>
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 f9ec 	bl	800ffd6 <HAL_TIM_OC_DelayElapsedCallback>
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f9fd 	bl	800fffe <HAL_TIM_PWM_PulseFinishedCallback>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	771a      	strb	r2, [r3, #28]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	691b      	ldr	r3, [r3, #16]
 800fc10:	f003 0301 	and.w	r3, r3, #1
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d10e      	bne.n	800fc36 <HAL_TIM_IRQHandler+0x184>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	f003 0301 	and.w	r3, r3, #1
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d107      	bne.n	800fc36 <HAL_TIM_IRQHandler+0x184>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f06f 0201 	mvn.w	r2, #1
 800fc2e:	611a      	str	r2, [r3, #16]
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7fd f907 	bl	800ce44 <HAL_TIM_PeriodElapsedCallback>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	691b      	ldr	r3, [r3, #16]
 800fc3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc40:	2b80      	cmp	r3, #128	@ 0x80
 800fc42:	d10e      	bne.n	800fc62 <HAL_TIM_IRQHandler+0x1b0>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc4e:	2b80      	cmp	r3, #128	@ 0x80
 800fc50:	d107      	bne.n	800fc62 <HAL_TIM_IRQHandler+0x1b0>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fc5a:	611a      	str	r2, [r3, #16]
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 fda5 	bl	80107ac <HAL_TIMEx_BreakCallback>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	691b      	ldr	r3, [r3, #16]
 800fc68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc6c:	2b40      	cmp	r3, #64	@ 0x40
 800fc6e:	d10e      	bne.n	800fc8e <HAL_TIM_IRQHandler+0x1dc>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc7a:	2b40      	cmp	r3, #64	@ 0x40
 800fc7c:	d107      	bne.n	800fc8e <HAL_TIM_IRQHandler+0x1dc>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fc86:	611a      	str	r2, [r3, #16]
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f000 f9c2 	bl	8010012 <HAL_TIM_TriggerCallback>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	691b      	ldr	r3, [r3, #16]
 800fc94:	f003 0320 	and.w	r3, r3, #32
 800fc98:	2b20      	cmp	r3, #32
 800fc9a:	d10e      	bne.n	800fcba <HAL_TIM_IRQHandler+0x208>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	f003 0320 	and.w	r3, r3, #32
 800fca6:	2b20      	cmp	r3, #32
 800fca8:	d107      	bne.n	800fcba <HAL_TIM_IRQHandler+0x208>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f06f 0220 	mvn.w	r2, #32
 800fcb2:	611a      	str	r2, [r3, #16]
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 fd6f 	bl	8010798 <HAL_TIMEx_CommutCallback>
 800fcba:	bf00      	nop
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
	...

0800fcc4 <HAL_TIM_PWM_ConfigChannel>:
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	75fb      	strb	r3, [r7, #23]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d101      	bne.n	800fce2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fcde:	2302      	movs	r3, #2
 800fce0:	e0ae      	b.n	800fe40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2201      	movs	r2, #1
 800fce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2b0c      	cmp	r3, #12
 800fcee:	f200 809f 	bhi.w	800fe30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fcf2:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf8:	0800fd2d 	.word	0x0800fd2d
 800fcfc:	0800fe31 	.word	0x0800fe31
 800fd00:	0800fe31 	.word	0x0800fe31
 800fd04:	0800fe31 	.word	0x0800fe31
 800fd08:	0800fd6d 	.word	0x0800fd6d
 800fd0c:	0800fe31 	.word	0x0800fe31
 800fd10:	0800fe31 	.word	0x0800fe31
 800fd14:	0800fe31 	.word	0x0800fe31
 800fd18:	0800fdaf 	.word	0x0800fdaf
 800fd1c:	0800fe31 	.word	0x0800fe31
 800fd20:	0800fe31 	.word	0x0800fe31
 800fd24:	0800fe31 	.word	0x0800fe31
 800fd28:	0800fdef 	.word	0x0800fdef
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68b9      	ldr	r1, [r7, #8]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f000 fa18 	bl	8010168 <TIM_OC1_SetConfig>
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	699a      	ldr	r2, [r3, #24]
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f042 0208 	orr.w	r2, r2, #8
 800fd46:	619a      	str	r2, [r3, #24]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	699a      	ldr	r2, [r3, #24]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f022 0204 	bic.w	r2, r2, #4
 800fd56:	619a      	str	r2, [r3, #24]
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6999      	ldr	r1, [r3, #24]
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	691a      	ldr	r2, [r3, #16]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	430a      	orrs	r2, r1
 800fd68:	619a      	str	r2, [r3, #24]
 800fd6a:	e064      	b.n	800fe36 <HAL_TIM_PWM_ConfigChannel+0x172>
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	68b9      	ldr	r1, [r7, #8]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f000 fa68 	bl	8010248 <TIM_OC2_SetConfig>
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	699a      	ldr	r2, [r3, #24]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fd86:	619a      	str	r2, [r3, #24]
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	699a      	ldr	r2, [r3, #24]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fd96:	619a      	str	r2, [r3, #24]
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	6999      	ldr	r1, [r3, #24]
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	021a      	lsls	r2, r3, #8
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	430a      	orrs	r2, r1
 800fdaa:	619a      	str	r2, [r3, #24]
 800fdac:	e043      	b.n	800fe36 <HAL_TIM_PWM_ConfigChannel+0x172>
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	68b9      	ldr	r1, [r7, #8]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f000 fabd 	bl	8010334 <TIM_OC3_SetConfig>
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	69da      	ldr	r2, [r3, #28]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f042 0208 	orr.w	r2, r2, #8
 800fdc8:	61da      	str	r2, [r3, #28]
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	69da      	ldr	r2, [r3, #28]
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f022 0204 	bic.w	r2, r2, #4
 800fdd8:	61da      	str	r2, [r3, #28]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	69d9      	ldr	r1, [r3, #28]
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	691a      	ldr	r2, [r3, #16]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	430a      	orrs	r2, r1
 800fdea:	61da      	str	r2, [r3, #28]
 800fdec:	e023      	b.n	800fe36 <HAL_TIM_PWM_ConfigChannel+0x172>
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	68b9      	ldr	r1, [r7, #8]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f000 fb11 	bl	801041c <TIM_OC4_SetConfig>
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	69da      	ldr	r2, [r3, #28]
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe08:	61da      	str	r2, [r3, #28]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	69da      	ldr	r2, [r3, #28]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fe18:	61da      	str	r2, [r3, #28]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69d9      	ldr	r1, [r3, #28]
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	021a      	lsls	r2, r3, #8
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	430a      	orrs	r2, r1
 800fe2c:	61da      	str	r2, [r3, #28]
 800fe2e:	e002      	b.n	800fe36 <HAL_TIM_PWM_ConfigChannel+0x172>
 800fe30:	2301      	movs	r3, #1
 800fe32:	75fb      	strb	r3, [r7, #23]
 800fe34:	bf00      	nop
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800fe3e:	7dfb      	ldrb	r3, [r7, #23]
 800fe40:	4618      	mov	r0, r3
 800fe42:	3718      	adds	r7, #24
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <HAL_TIM_ConfigClockSource>:
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
 800fe52:	2300      	movs	r3, #0
 800fe54:	73fb      	strb	r3, [r7, #15]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d101      	bne.n	800fe64 <HAL_TIM_ConfigClockSource+0x1c>
 800fe60:	2302      	movs	r3, #2
 800fe62:	e0b4      	b.n	800ffce <HAL_TIM_ConfigClockSource+0x186>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2201      	movs	r2, #1
 800fe68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2202      	movs	r2, #2
 800fe70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	689b      	ldr	r3, [r3, #8]
 800fe7a:	60bb      	str	r3, [r7, #8]
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fe82:	60bb      	str	r3, [r7, #8]
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fe8a:	60bb      	str	r3, [r7, #8]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	609a      	str	r2, [r3, #8]
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe9c:	d03e      	beq.n	800ff1c <HAL_TIM_ConfigClockSource+0xd4>
 800fe9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fea2:	f200 8087 	bhi.w	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800feaa:	f000 8086 	beq.w	800ffba <HAL_TIM_ConfigClockSource+0x172>
 800feae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800feb2:	d87f      	bhi.n	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800feb4:	2b70      	cmp	r3, #112	@ 0x70
 800feb6:	d01a      	beq.n	800feee <HAL_TIM_ConfigClockSource+0xa6>
 800feb8:	2b70      	cmp	r3, #112	@ 0x70
 800feba:	d87b      	bhi.n	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800febc:	2b60      	cmp	r3, #96	@ 0x60
 800febe:	d050      	beq.n	800ff62 <HAL_TIM_ConfigClockSource+0x11a>
 800fec0:	2b60      	cmp	r3, #96	@ 0x60
 800fec2:	d877      	bhi.n	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fec4:	2b50      	cmp	r3, #80	@ 0x50
 800fec6:	d03c      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0xfa>
 800fec8:	2b50      	cmp	r3, #80	@ 0x50
 800feca:	d873      	bhi.n	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fecc:	2b40      	cmp	r3, #64	@ 0x40
 800fece:	d058      	beq.n	800ff82 <HAL_TIM_ConfigClockSource+0x13a>
 800fed0:	2b40      	cmp	r3, #64	@ 0x40
 800fed2:	d86f      	bhi.n	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fed4:	2b30      	cmp	r3, #48	@ 0x30
 800fed6:	d064      	beq.n	800ffa2 <HAL_TIM_ConfigClockSource+0x15a>
 800fed8:	2b30      	cmp	r3, #48	@ 0x30
 800feda:	d86b      	bhi.n	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fedc:	2b20      	cmp	r3, #32
 800fede:	d060      	beq.n	800ffa2 <HAL_TIM_ConfigClockSource+0x15a>
 800fee0:	2b20      	cmp	r3, #32
 800fee2:	d867      	bhi.n	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d05c      	beq.n	800ffa2 <HAL_TIM_ConfigClockSource+0x15a>
 800fee8:	2b10      	cmp	r3, #16
 800feea:	d05a      	beq.n	800ffa2 <HAL_TIM_ConfigClockSource+0x15a>
 800feec:	e062      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x16c>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6818      	ldr	r0, [r3, #0]
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	6899      	ldr	r1, [r3, #8]
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	685a      	ldr	r2, [r3, #4]
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	f000 fb5d 	bl	80105bc <TIM_ETR_SetConfig>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	60bb      	str	r3, [r7, #8]
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ff10:	60bb      	str	r3, [r7, #8]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	68ba      	ldr	r2, [r7, #8]
 800ff18:	609a      	str	r2, [r3, #8]
 800ff1a:	e04f      	b.n	800ffbc <HAL_TIM_ConfigClockSource+0x174>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6818      	ldr	r0, [r3, #0]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	6899      	ldr	r1, [r3, #8]
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	f000 fb46 	bl	80105bc <TIM_ETR_SetConfig>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	689a      	ldr	r2, [r3, #8]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ff3e:	609a      	str	r2, [r3, #8]
 800ff40:	e03c      	b.n	800ffbc <HAL_TIM_ConfigClockSource+0x174>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6818      	ldr	r0, [r3, #0]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	6859      	ldr	r1, [r3, #4]
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	f000 faba 	bl	80104c8 <TIM_TI1_ConfigInputStage>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	2150      	movs	r1, #80	@ 0x50
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 fb13 	bl	8010586 <TIM_ITRx_SetConfig>
 800ff60:	e02c      	b.n	800ffbc <HAL_TIM_ConfigClockSource+0x174>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6818      	ldr	r0, [r3, #0]
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	6859      	ldr	r1, [r3, #4]
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	f000 fad9 	bl	8010526 <TIM_TI2_ConfigInputStage>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2160      	movs	r1, #96	@ 0x60
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f000 fb03 	bl	8010586 <TIM_ITRx_SetConfig>
 800ff80:	e01c      	b.n	800ffbc <HAL_TIM_ConfigClockSource+0x174>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6818      	ldr	r0, [r3, #0]
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	6859      	ldr	r1, [r3, #4]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	461a      	mov	r2, r3
 800ff90:	f000 fa9a 	bl	80104c8 <TIM_TI1_ConfigInputStage>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2140      	movs	r1, #64	@ 0x40
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f000 faf3 	bl	8010586 <TIM_ITRx_SetConfig>
 800ffa0:	e00c      	b.n	800ffbc <HAL_TIM_ConfigClockSource+0x174>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4619      	mov	r1, r3
 800ffac:	4610      	mov	r0, r2
 800ffae:	f000 faea 	bl	8010586 <TIM_ITRx_SetConfig>
 800ffb2:	e003      	b.n	800ffbc <HAL_TIM_ConfigClockSource+0x174>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	73fb      	strb	r3, [r7, #15]
 800ffb8:	e000      	b.n	800ffbc <HAL_TIM_ConfigClockSource+0x174>
 800ffba:	bf00      	nop
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800ffcc:	7bfb      	ldrb	r3, [r7, #15]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}

0800ffd6 <HAL_TIM_OC_DelayElapsedCallback>:
 800ffd6:	b480      	push	{r7}
 800ffd8:	b083      	sub	sp, #12
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
 800ffde:	bf00      	nop
 800ffe0:	370c      	adds	r7, #12
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe8:	4770      	bx	lr

0800ffea <HAL_TIM_IC_CaptureCallback>:
 800ffea:	b480      	push	{r7}
 800ffec:	b083      	sub	sp, #12
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
 800fff2:	bf00      	nop
 800fff4:	370c      	adds	r7, #12
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr

0800fffe <HAL_TIM_PWM_PulseFinishedCallback>:
 800fffe:	b480      	push	{r7}
 8010000:	b083      	sub	sp, #12
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
 8010006:	bf00      	nop
 8010008:	370c      	adds	r7, #12
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr

08010012 <HAL_TIM_TriggerCallback>:
 8010012:	b480      	push	{r7}
 8010014:	b083      	sub	sp, #12
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
 801001a:	bf00      	nop
 801001c:	370c      	adds	r7, #12
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
	...

08010028 <TIM_Base_SetConfig>:
 8010028:	b480      	push	{r7}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	60fb      	str	r3, [r7, #12]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4a40      	ldr	r2, [pc, #256]	@ (801013c <TIM_Base_SetConfig+0x114>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d013      	beq.n	8010068 <TIM_Base_SetConfig+0x40>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010046:	d00f      	beq.n	8010068 <TIM_Base_SetConfig+0x40>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4a3d      	ldr	r2, [pc, #244]	@ (8010140 <TIM_Base_SetConfig+0x118>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d00b      	beq.n	8010068 <TIM_Base_SetConfig+0x40>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4a3c      	ldr	r2, [pc, #240]	@ (8010144 <TIM_Base_SetConfig+0x11c>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d007      	beq.n	8010068 <TIM_Base_SetConfig+0x40>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4a3b      	ldr	r2, [pc, #236]	@ (8010148 <TIM_Base_SetConfig+0x120>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d003      	beq.n	8010068 <TIM_Base_SetConfig+0x40>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	4a3a      	ldr	r2, [pc, #232]	@ (801014c <TIM_Base_SetConfig+0x124>)
 8010064:	4293      	cmp	r3, r2
 8010066:	d108      	bne.n	801007a <TIM_Base_SetConfig+0x52>
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801006e:	60fb      	str	r3, [r7, #12]
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	4313      	orrs	r3, r2
 8010078:	60fb      	str	r3, [r7, #12]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4a2f      	ldr	r2, [pc, #188]	@ (801013c <TIM_Base_SetConfig+0x114>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d02b      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010088:	d027      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4a2c      	ldr	r2, [pc, #176]	@ (8010140 <TIM_Base_SetConfig+0x118>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d023      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4a2b      	ldr	r2, [pc, #172]	@ (8010144 <TIM_Base_SetConfig+0x11c>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d01f      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a2a      	ldr	r2, [pc, #168]	@ (8010148 <TIM_Base_SetConfig+0x120>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d01b      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a29      	ldr	r2, [pc, #164]	@ (801014c <TIM_Base_SetConfig+0x124>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d017      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4a28      	ldr	r2, [pc, #160]	@ (8010150 <TIM_Base_SetConfig+0x128>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d013      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4a27      	ldr	r2, [pc, #156]	@ (8010154 <TIM_Base_SetConfig+0x12c>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d00f      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4a26      	ldr	r2, [pc, #152]	@ (8010158 <TIM_Base_SetConfig+0x130>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d00b      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4a25      	ldr	r2, [pc, #148]	@ (801015c <TIM_Base_SetConfig+0x134>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d007      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	4a24      	ldr	r2, [pc, #144]	@ (8010160 <TIM_Base_SetConfig+0x138>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d003      	beq.n	80100da <TIM_Base_SetConfig+0xb2>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4a23      	ldr	r2, [pc, #140]	@ (8010164 <TIM_Base_SetConfig+0x13c>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d108      	bne.n	80100ec <TIM_Base_SetConfig+0xc4>
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100e0:	60fb      	str	r3, [r7, #12]
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	4313      	orrs	r3, r2
 80100ea:	60fb      	str	r3, [r7, #12]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	4313      	orrs	r3, r2
 80100f8:	60fb      	str	r3, [r7, #12]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	68fa      	ldr	r2, [r7, #12]
 80100fe:	601a      	str	r2, [r3, #0]
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	689a      	ldr	r2, [r3, #8]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	629a      	str	r2, [r3, #40]	@ 0x28
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a0a      	ldr	r2, [pc, #40]	@ (801013c <TIM_Base_SetConfig+0x114>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d003      	beq.n	8010120 <TIM_Base_SetConfig+0xf8>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a0c      	ldr	r2, [pc, #48]	@ (801014c <TIM_Base_SetConfig+0x124>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d103      	bne.n	8010128 <TIM_Base_SetConfig+0x100>
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	691a      	ldr	r2, [r3, #16]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	631a      	str	r2, [r3, #48]	@ 0x30
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2201      	movs	r2, #1
 801012c:	615a      	str	r2, [r3, #20]
 801012e:	bf00      	nop
 8010130:	3714      	adds	r7, #20
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	40010000 	.word	0x40010000
 8010140:	40000400 	.word	0x40000400
 8010144:	40000800 	.word	0x40000800
 8010148:	40000c00 	.word	0x40000c00
 801014c:	40010400 	.word	0x40010400
 8010150:	40014000 	.word	0x40014000
 8010154:	40014400 	.word	0x40014400
 8010158:	40014800 	.word	0x40014800
 801015c:	40001800 	.word	0x40001800
 8010160:	40001c00 	.word	0x40001c00
 8010164:	40002000 	.word	0x40002000

08010168 <TIM_OC1_SetConfig>:
 8010168:	b480      	push	{r7}
 801016a:	b087      	sub	sp, #28
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6a1b      	ldr	r3, [r3, #32]
 8010176:	f023 0201 	bic.w	r2, r3, #1
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	621a      	str	r2, [r3, #32]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6a1b      	ldr	r3, [r3, #32]
 8010182:	617b      	str	r3, [r7, #20]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	613b      	str	r3, [r7, #16]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	699b      	ldr	r3, [r3, #24]
 801018e:	60fb      	str	r3, [r7, #12]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010196:	60fb      	str	r3, [r7, #12]
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f023 0303 	bic.w	r3, r3, #3
 801019e:	60fb      	str	r3, [r7, #12]
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	4313      	orrs	r3, r2
 80101a8:	60fb      	str	r3, [r7, #12]
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	f023 0302 	bic.w	r3, r3, #2
 80101b0:	617b      	str	r3, [r7, #20]
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	697a      	ldr	r2, [r7, #20]
 80101b8:	4313      	orrs	r3, r2
 80101ba:	617b      	str	r3, [r7, #20]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	4a20      	ldr	r2, [pc, #128]	@ (8010240 <TIM_OC1_SetConfig+0xd8>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d003      	beq.n	80101cc <TIM_OC1_SetConfig+0x64>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	4a1f      	ldr	r2, [pc, #124]	@ (8010244 <TIM_OC1_SetConfig+0xdc>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d10c      	bne.n	80101e6 <TIM_OC1_SetConfig+0x7e>
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	f023 0308 	bic.w	r3, r3, #8
 80101d2:	617b      	str	r3, [r7, #20]
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	697a      	ldr	r2, [r7, #20]
 80101da:	4313      	orrs	r3, r2
 80101dc:	617b      	str	r3, [r7, #20]
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	f023 0304 	bic.w	r3, r3, #4
 80101e4:	617b      	str	r3, [r7, #20]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4a15      	ldr	r2, [pc, #84]	@ (8010240 <TIM_OC1_SetConfig+0xd8>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d003      	beq.n	80101f6 <TIM_OC1_SetConfig+0x8e>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4a14      	ldr	r2, [pc, #80]	@ (8010244 <TIM_OC1_SetConfig+0xdc>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d111      	bne.n	801021a <TIM_OC1_SetConfig+0xb2>
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101fc:	613b      	str	r3, [r7, #16]
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010204:	613b      	str	r3, [r7, #16]
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	695b      	ldr	r3, [r3, #20]
 801020a:	693a      	ldr	r2, [r7, #16]
 801020c:	4313      	orrs	r3, r2
 801020e:	613b      	str	r3, [r7, #16]
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	699b      	ldr	r3, [r3, #24]
 8010214:	693a      	ldr	r2, [r7, #16]
 8010216:	4313      	orrs	r3, r2
 8010218:	613b      	str	r3, [r7, #16]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	605a      	str	r2, [r3, #4]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	68fa      	ldr	r2, [r7, #12]
 8010224:	619a      	str	r2, [r3, #24]
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	685a      	ldr	r2, [r3, #4]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	635a      	str	r2, [r3, #52]	@ 0x34
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	697a      	ldr	r2, [r7, #20]
 8010232:	621a      	str	r2, [r3, #32]
 8010234:	bf00      	nop
 8010236:	371c      	adds	r7, #28
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr
 8010240:	40010000 	.word	0x40010000
 8010244:	40010400 	.word	0x40010400

08010248 <TIM_OC2_SetConfig>:
 8010248:	b480      	push	{r7}
 801024a:	b087      	sub	sp, #28
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	f023 0210 	bic.w	r2, r3, #16
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	621a      	str	r2, [r3, #32]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6a1b      	ldr	r3, [r3, #32]
 8010262:	617b      	str	r3, [r7, #20]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	613b      	str	r3, [r7, #16]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	699b      	ldr	r3, [r3, #24]
 801026e:	60fb      	str	r3, [r7, #12]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010276:	60fb      	str	r3, [r7, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801027e:	60fb      	str	r3, [r7, #12]
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	021b      	lsls	r3, r3, #8
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	4313      	orrs	r3, r2
 801028a:	60fb      	str	r3, [r7, #12]
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	f023 0320 	bic.w	r3, r3, #32
 8010292:	617b      	str	r3, [r7, #20]
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	011b      	lsls	r3, r3, #4
 801029a:	697a      	ldr	r2, [r7, #20]
 801029c:	4313      	orrs	r3, r2
 801029e:	617b      	str	r3, [r7, #20]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4a22      	ldr	r2, [pc, #136]	@ (801032c <TIM_OC2_SetConfig+0xe4>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d003      	beq.n	80102b0 <TIM_OC2_SetConfig+0x68>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4a21      	ldr	r2, [pc, #132]	@ (8010330 <TIM_OC2_SetConfig+0xe8>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d10d      	bne.n	80102cc <TIM_OC2_SetConfig+0x84>
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80102b6:	617b      	str	r3, [r7, #20]
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	011b      	lsls	r3, r3, #4
 80102be:	697a      	ldr	r2, [r7, #20]
 80102c0:	4313      	orrs	r3, r2
 80102c2:	617b      	str	r3, [r7, #20]
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80102ca:	617b      	str	r3, [r7, #20]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4a17      	ldr	r2, [pc, #92]	@ (801032c <TIM_OC2_SetConfig+0xe4>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d003      	beq.n	80102dc <TIM_OC2_SetConfig+0x94>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4a16      	ldr	r2, [pc, #88]	@ (8010330 <TIM_OC2_SetConfig+0xe8>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d113      	bne.n	8010304 <TIM_OC2_SetConfig+0xbc>
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80102e2:	613b      	str	r3, [r7, #16]
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80102ea:	613b      	str	r3, [r7, #16]
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	695b      	ldr	r3, [r3, #20]
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	4313      	orrs	r3, r2
 80102f6:	613b      	str	r3, [r7, #16]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	699b      	ldr	r3, [r3, #24]
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	693a      	ldr	r2, [r7, #16]
 8010300:	4313      	orrs	r3, r2
 8010302:	613b      	str	r3, [r7, #16]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	693a      	ldr	r2, [r7, #16]
 8010308:	605a      	str	r2, [r3, #4]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	68fa      	ldr	r2, [r7, #12]
 801030e:	619a      	str	r2, [r3, #24]
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	685a      	ldr	r2, [r3, #4]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	639a      	str	r2, [r3, #56]	@ 0x38
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	697a      	ldr	r2, [r7, #20]
 801031c:	621a      	str	r2, [r3, #32]
 801031e:	bf00      	nop
 8010320:	371c      	adds	r7, #28
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop
 801032c:	40010000 	.word	0x40010000
 8010330:	40010400 	.word	0x40010400

08010334 <TIM_OC3_SetConfig>:
 8010334:	b480      	push	{r7}
 8010336:	b087      	sub	sp, #28
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6a1b      	ldr	r3, [r3, #32]
 8010342:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	621a      	str	r2, [r3, #32]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	617b      	str	r3, [r7, #20]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	613b      	str	r3, [r7, #16]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	69db      	ldr	r3, [r3, #28]
 801035a:	60fb      	str	r3, [r7, #12]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010362:	60fb      	str	r3, [r7, #12]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f023 0303 	bic.w	r3, r3, #3
 801036a:	60fb      	str	r3, [r7, #12]
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	4313      	orrs	r3, r2
 8010374:	60fb      	str	r3, [r7, #12]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801037c:	617b      	str	r3, [r7, #20]
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	021b      	lsls	r3, r3, #8
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	4313      	orrs	r3, r2
 8010388:	617b      	str	r3, [r7, #20]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4a21      	ldr	r2, [pc, #132]	@ (8010414 <TIM_OC3_SetConfig+0xe0>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d003      	beq.n	801039a <TIM_OC3_SetConfig+0x66>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	4a20      	ldr	r2, [pc, #128]	@ (8010418 <TIM_OC3_SetConfig+0xe4>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d10d      	bne.n	80103b6 <TIM_OC3_SetConfig+0x82>
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80103a0:	617b      	str	r3, [r7, #20]
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	68db      	ldr	r3, [r3, #12]
 80103a6:	021b      	lsls	r3, r3, #8
 80103a8:	697a      	ldr	r2, [r7, #20]
 80103aa:	4313      	orrs	r3, r2
 80103ac:	617b      	str	r3, [r7, #20]
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80103b4:	617b      	str	r3, [r7, #20]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4a16      	ldr	r2, [pc, #88]	@ (8010414 <TIM_OC3_SetConfig+0xe0>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d003      	beq.n	80103c6 <TIM_OC3_SetConfig+0x92>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a15      	ldr	r2, [pc, #84]	@ (8010418 <TIM_OC3_SetConfig+0xe4>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d113      	bne.n	80103ee <TIM_OC3_SetConfig+0xba>
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80103cc:	613b      	str	r3, [r7, #16]
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80103d4:	613b      	str	r3, [r7, #16]
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	011b      	lsls	r3, r3, #4
 80103dc:	693a      	ldr	r2, [r7, #16]
 80103de:	4313      	orrs	r3, r2
 80103e0:	613b      	str	r3, [r7, #16]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	699b      	ldr	r3, [r3, #24]
 80103e6:	011b      	lsls	r3, r3, #4
 80103e8:	693a      	ldr	r2, [r7, #16]
 80103ea:	4313      	orrs	r3, r2
 80103ec:	613b      	str	r3, [r7, #16]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	693a      	ldr	r2, [r7, #16]
 80103f2:	605a      	str	r2, [r3, #4]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	68fa      	ldr	r2, [r7, #12]
 80103f8:	61da      	str	r2, [r3, #28]
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	685a      	ldr	r2, [r3, #4]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	697a      	ldr	r2, [r7, #20]
 8010406:	621a      	str	r2, [r3, #32]
 8010408:	bf00      	nop
 801040a:	371c      	adds	r7, #28
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	40010000 	.word	0x40010000
 8010418:	40010400 	.word	0x40010400

0801041c <TIM_OC4_SetConfig>:
 801041c:	b480      	push	{r7}
 801041e:	b087      	sub	sp, #28
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6a1b      	ldr	r3, [r3, #32]
 801042a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	621a      	str	r2, [r3, #32]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6a1b      	ldr	r3, [r3, #32]
 8010436:	613b      	str	r3, [r7, #16]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	617b      	str	r3, [r7, #20]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	69db      	ldr	r3, [r3, #28]
 8010442:	60fb      	str	r3, [r7, #12]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801044a:	60fb      	str	r3, [r7, #12]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010452:	60fb      	str	r3, [r7, #12]
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	021b      	lsls	r3, r3, #8
 801045a:	68fa      	ldr	r2, [r7, #12]
 801045c:	4313      	orrs	r3, r2
 801045e:	60fb      	str	r3, [r7, #12]
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010466:	613b      	str	r3, [r7, #16]
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	031b      	lsls	r3, r3, #12
 801046e:	693a      	ldr	r2, [r7, #16]
 8010470:	4313      	orrs	r3, r2
 8010472:	613b      	str	r3, [r7, #16]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4a12      	ldr	r2, [pc, #72]	@ (80104c0 <TIM_OC4_SetConfig+0xa4>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d003      	beq.n	8010484 <TIM_OC4_SetConfig+0x68>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4a11      	ldr	r2, [pc, #68]	@ (80104c4 <TIM_OC4_SetConfig+0xa8>)
 8010480:	4293      	cmp	r3, r2
 8010482:	d109      	bne.n	8010498 <TIM_OC4_SetConfig+0x7c>
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801048a:	617b      	str	r3, [r7, #20]
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	695b      	ldr	r3, [r3, #20]
 8010490:	019b      	lsls	r3, r3, #6
 8010492:	697a      	ldr	r2, [r7, #20]
 8010494:	4313      	orrs	r3, r2
 8010496:	617b      	str	r3, [r7, #20]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	697a      	ldr	r2, [r7, #20]
 801049c:	605a      	str	r2, [r3, #4]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	61da      	str	r2, [r3, #28]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	685a      	ldr	r2, [r3, #4]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	693a      	ldr	r2, [r7, #16]
 80104b0:	621a      	str	r2, [r3, #32]
 80104b2:	bf00      	nop
 80104b4:	371c      	adds	r7, #28
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	40010000 	.word	0x40010000
 80104c4:	40010400 	.word	0x40010400

080104c8 <TIM_TI1_ConfigInputStage>:
 80104c8:	b480      	push	{r7}
 80104ca:	b087      	sub	sp, #28
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	607a      	str	r2, [r7, #4]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6a1b      	ldr	r3, [r3, #32]
 80104d8:	617b      	str	r3, [r7, #20]
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6a1b      	ldr	r3, [r3, #32]
 80104de:	f023 0201 	bic.w	r2, r3, #1
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	621a      	str	r2, [r3, #32]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	699b      	ldr	r3, [r3, #24]
 80104ea:	613b      	str	r3, [r7, #16]
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80104f2:	613b      	str	r3, [r7, #16]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	011b      	lsls	r3, r3, #4
 80104f8:	693a      	ldr	r2, [r7, #16]
 80104fa:	4313      	orrs	r3, r2
 80104fc:	613b      	str	r3, [r7, #16]
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	f023 030a 	bic.w	r3, r3, #10
 8010504:	617b      	str	r3, [r7, #20]
 8010506:	697a      	ldr	r2, [r7, #20]
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	4313      	orrs	r3, r2
 801050c:	617b      	str	r3, [r7, #20]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	693a      	ldr	r2, [r7, #16]
 8010512:	619a      	str	r2, [r3, #24]
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	697a      	ldr	r2, [r7, #20]
 8010518:	621a      	str	r2, [r3, #32]
 801051a:	bf00      	nop
 801051c:	371c      	adds	r7, #28
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr

08010526 <TIM_TI2_ConfigInputStage>:
 8010526:	b480      	push	{r7}
 8010528:	b087      	sub	sp, #28
 801052a:	af00      	add	r7, sp, #0
 801052c:	60f8      	str	r0, [r7, #12]
 801052e:	60b9      	str	r1, [r7, #8]
 8010530:	607a      	str	r2, [r7, #4]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	6a1b      	ldr	r3, [r3, #32]
 8010536:	f023 0210 	bic.w	r2, r3, #16
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	621a      	str	r2, [r3, #32]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	699b      	ldr	r3, [r3, #24]
 8010542:	617b      	str	r3, [r7, #20]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6a1b      	ldr	r3, [r3, #32]
 8010548:	613b      	str	r3, [r7, #16]
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010550:	617b      	str	r3, [r7, #20]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	031b      	lsls	r3, r3, #12
 8010556:	697a      	ldr	r2, [r7, #20]
 8010558:	4313      	orrs	r3, r2
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010562:	613b      	str	r3, [r7, #16]
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	011b      	lsls	r3, r3, #4
 8010568:	693a      	ldr	r2, [r7, #16]
 801056a:	4313      	orrs	r3, r2
 801056c:	613b      	str	r3, [r7, #16]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	697a      	ldr	r2, [r7, #20]
 8010572:	619a      	str	r2, [r3, #24]
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	693a      	ldr	r2, [r7, #16]
 8010578:	621a      	str	r2, [r3, #32]
 801057a:	bf00      	nop
 801057c:	371c      	adds	r7, #28
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr

08010586 <TIM_ITRx_SetConfig>:
 8010586:	b480      	push	{r7}
 8010588:	b085      	sub	sp, #20
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
 801058e:	6039      	str	r1, [r7, #0]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	60fb      	str	r3, [r7, #12]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801059c:	60fb      	str	r3, [r7, #12]
 801059e:	683a      	ldr	r2, [r7, #0]
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	4313      	orrs	r3, r2
 80105a4:	f043 0307 	orr.w	r3, r3, #7
 80105a8:	60fb      	str	r3, [r7, #12]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	609a      	str	r2, [r3, #8]
 80105b0:	bf00      	nop
 80105b2:	3714      	adds	r7, #20
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <TIM_ETR_SetConfig>:
 80105bc:	b480      	push	{r7}
 80105be:	b087      	sub	sp, #28
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
 80105c8:	603b      	str	r3, [r7, #0]
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	689b      	ldr	r3, [r3, #8]
 80105ce:	617b      	str	r3, [r7, #20]
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80105d6:	617b      	str	r3, [r7, #20]
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	021a      	lsls	r2, r3, #8
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	431a      	orrs	r2, r3
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	4313      	orrs	r3, r2
 80105e4:	697a      	ldr	r2, [r7, #20]
 80105e6:	4313      	orrs	r3, r2
 80105e8:	617b      	str	r3, [r7, #20]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	697a      	ldr	r2, [r7, #20]
 80105ee:	609a      	str	r2, [r3, #8]
 80105f0:	bf00      	nop
 80105f2:	371c      	adds	r7, #28
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <HAL_TIMEx_MasterConfigSynchronization>:
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801060c:	2b01      	cmp	r3, #1
 801060e:	d101      	bne.n	8010614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010610:	2302      	movs	r3, #2
 8010612:	e05a      	b.n	80106ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2202      	movs	r2, #2
 8010620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	60fb      	str	r3, [r7, #12]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	60bb      	str	r3, [r7, #8]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801063a:	60fb      	str	r3, [r7, #12]
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	4313      	orrs	r3, r2
 8010644:	60fb      	str	r3, [r7, #12]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	605a      	str	r2, [r3, #4]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	4a21      	ldr	r2, [pc, #132]	@ (80106d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d022      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010660:	d01d      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4a1d      	ldr	r2, [pc, #116]	@ (80106dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d018      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a1b      	ldr	r2, [pc, #108]	@ (80106e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d013      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a1a      	ldr	r2, [pc, #104]	@ (80106e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d00e      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a18      	ldr	r2, [pc, #96]	@ (80106e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d009      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a17      	ldr	r2, [pc, #92]	@ (80106ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d004      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a15      	ldr	r2, [pc, #84]	@ (80106f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d10c      	bne.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106a4:	60bb      	str	r3, [r7, #8]
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	4313      	orrs	r3, r2
 80106ae:	60bb      	str	r3, [r7, #8]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	609a      	str	r2, [r3, #8]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2201      	movs	r2, #1
 80106bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2200      	movs	r2, #0
 80106c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80106c8:	2300      	movs	r3, #0
 80106ca:	4618      	mov	r0, r3
 80106cc:	3714      	adds	r7, #20
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop
 80106d8:	40010000 	.word	0x40010000
 80106dc:	40000400 	.word	0x40000400
 80106e0:	40000800 	.word	0x40000800
 80106e4:	40000c00 	.word	0x40000c00
 80106e8:	40010400 	.word	0x40010400
 80106ec:	40014000 	.word	0x40014000
 80106f0:	40001800 	.word	0x40001800

080106f4 <HAL_TIMEx_ConfigBreakDeadTime>:
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
 80106fe:	2300      	movs	r3, #0
 8010700:	60fb      	str	r3, [r7, #12]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010708:	2b01      	cmp	r3, #1
 801070a:	d101      	bne.n	8010710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801070c:	2302      	movs	r3, #2
 801070e:	e03d      	b.n	801078c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2201      	movs	r2, #1
 8010714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	4313      	orrs	r3, r2
 8010724:	60fb      	str	r3, [r7, #12]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	689b      	ldr	r3, [r3, #8]
 8010730:	4313      	orrs	r3, r2
 8010732:	60fb      	str	r3, [r7, #12]
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	4313      	orrs	r3, r2
 8010740:	60fb      	str	r3, [r7, #12]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4313      	orrs	r3, r2
 801074e:	60fb      	str	r3, [r7, #12]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	691b      	ldr	r3, [r3, #16]
 801075a:	4313      	orrs	r3, r2
 801075c:	60fb      	str	r3, [r7, #12]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	695b      	ldr	r3, [r3, #20]
 8010768:	4313      	orrs	r3, r2
 801076a:	60fb      	str	r3, [r7, #12]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	69db      	ldr	r3, [r3, #28]
 8010776:	4313      	orrs	r3, r2
 8010778:	60fb      	str	r3, [r7, #12]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	68fa      	ldr	r2, [r7, #12]
 8010780:	645a      	str	r2, [r3, #68]	@ 0x44
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801078a:	2300      	movs	r3, #0
 801078c:	4618      	mov	r0, r3
 801078e:	3714      	adds	r7, #20
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <HAL_TIMEx_CommutCallback>:
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	bf00      	nop
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <HAL_TIMEx_BreakCallback>:
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	bf00      	nop
 80107b6:	370c      	adds	r7, #12
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr

080107c0 <HAL_UART_Init>:
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d101      	bne.n	80107d2 <HAL_UART_Init+0x12>
 80107ce:	2301      	movs	r3, #1
 80107d0:	e03f      	b.n	8010852 <HAL_UART_Init+0x92>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d106      	bne.n	80107ec <HAL_UART_Init+0x2c>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7fc fd4a 	bl	800d280 <HAL_UART_MspInit>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2224      	movs	r2, #36	@ 0x24
 80107f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	68da      	ldr	r2, [r3, #12]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010802:	60da      	str	r2, [r3, #12]
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 fcd5 	bl	80111b4 <UART_SetConfig>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	691a      	ldr	r2, [r3, #16]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010818:	611a      	str	r2, [r3, #16]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	695a      	ldr	r2, [r3, #20]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010828:	615a      	str	r2, [r3, #20]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	68da      	ldr	r2, [r3, #12]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010838:	60da      	str	r2, [r3, #12]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2200      	movs	r2, #0
 801083e:	641a      	str	r2, [r3, #64]	@ 0x40
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2220      	movs	r2, #32
 8010844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2220      	movs	r2, #32
 801084c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010850:	2300      	movs	r3, #0
 8010852:	4618      	mov	r0, r3
 8010854:	3708      	adds	r7, #8
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <HAL_UART_Receive_IT>:
 801085a:	b580      	push	{r7, lr}
 801085c:	b084      	sub	sp, #16
 801085e:	af00      	add	r7, sp, #0
 8010860:	60f8      	str	r0, [r7, #12]
 8010862:	60b9      	str	r1, [r7, #8]
 8010864:	4613      	mov	r3, r2
 8010866:	80fb      	strh	r3, [r7, #6]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801086e:	b2db      	uxtb	r3, r3
 8010870:	2b20      	cmp	r3, #32
 8010872:	d11d      	bne.n	80108b0 <HAL_UART_Receive_IT+0x56>
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d002      	beq.n	8010880 <HAL_UART_Receive_IT+0x26>
 801087a:	88fb      	ldrh	r3, [r7, #6]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d101      	bne.n	8010884 <HAL_UART_Receive_IT+0x2a>
 8010880:	2301      	movs	r3, #1
 8010882:	e016      	b.n	80108b2 <HAL_UART_Receive_IT+0x58>
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801088a:	2b01      	cmp	r3, #1
 801088c:	d101      	bne.n	8010892 <HAL_UART_Receive_IT+0x38>
 801088e:	2302      	movs	r3, #2
 8010890:	e00f      	b.n	80108b2 <HAL_UART_Receive_IT+0x58>
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2201      	movs	r2, #1
 8010896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2200      	movs	r2, #0
 801089e:	631a      	str	r2, [r3, #48]	@ 0x30
 80108a0:	88fb      	ldrh	r3, [r7, #6]
 80108a2:	461a      	mov	r2, r3
 80108a4:	68b9      	ldr	r1, [r7, #8]
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f000 faac 	bl	8010e04 <UART_Start_Receive_IT>
 80108ac:	4603      	mov	r3, r0
 80108ae:	e000      	b.n	80108b2 <HAL_UART_Receive_IT+0x58>
 80108b0:	2302      	movs	r3, #2
 80108b2:	4618      	mov	r0, r3
 80108b4:	3710      	adds	r7, #16
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
	...

080108bc <HAL_UART_IRQHandler>:
 80108bc:	b580      	push	{r7, lr}
 80108be:	b0ba      	sub	sp, #232	@ 0xe8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	695b      	ldr	r3, [r3, #20]
 80108de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80108e2:	2300      	movs	r3, #0
 80108e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80108e8:	2300      	movs	r3, #0
 80108ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80108ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80108f2:	f003 030f 	and.w	r3, r3, #15
 80108f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80108fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d10f      	bne.n	8010922 <HAL_UART_IRQHandler+0x66>
 8010902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010906:	f003 0320 	and.w	r3, r3, #32
 801090a:	2b00      	cmp	r3, #0
 801090c:	d009      	beq.n	8010922 <HAL_UART_IRQHandler+0x66>
 801090e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010912:	f003 0320 	and.w	r3, r3, #32
 8010916:	2b00      	cmp	r3, #0
 8010918:	d003      	beq.n	8010922 <HAL_UART_IRQHandler+0x66>
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fb8f 	bl	801103e <UART_Receive_IT>
 8010920:	e256      	b.n	8010dd0 <HAL_UART_IRQHandler+0x514>
 8010922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010926:	2b00      	cmp	r3, #0
 8010928:	f000 80de 	beq.w	8010ae8 <HAL_UART_IRQHandler+0x22c>
 801092c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010930:	f003 0301 	and.w	r3, r3, #1
 8010934:	2b00      	cmp	r3, #0
 8010936:	d106      	bne.n	8010946 <HAL_UART_IRQHandler+0x8a>
 8010938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801093c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 80d1 	beq.w	8010ae8 <HAL_UART_IRQHandler+0x22c>
 8010946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801094a:	f003 0301 	and.w	r3, r3, #1
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00b      	beq.n	801096a <HAL_UART_IRQHandler+0xae>
 8010952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801095a:	2b00      	cmp	r3, #0
 801095c:	d005      	beq.n	801096a <HAL_UART_IRQHandler+0xae>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010962:	f043 0201 	orr.w	r2, r3, #1
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	641a      	str	r2, [r3, #64]	@ 0x40
 801096a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801096e:	f003 0304 	and.w	r3, r3, #4
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00b      	beq.n	801098e <HAL_UART_IRQHandler+0xd2>
 8010976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	2b00      	cmp	r3, #0
 8010980:	d005      	beq.n	801098e <HAL_UART_IRQHandler+0xd2>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010986:	f043 0202 	orr.w	r2, r3, #2
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	641a      	str	r2, [r3, #64]	@ 0x40
 801098e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010992:	f003 0302 	and.w	r3, r3, #2
 8010996:	2b00      	cmp	r3, #0
 8010998:	d00b      	beq.n	80109b2 <HAL_UART_IRQHandler+0xf6>
 801099a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801099e:	f003 0301 	and.w	r3, r3, #1
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d005      	beq.n	80109b2 <HAL_UART_IRQHandler+0xf6>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109aa:	f043 0204 	orr.w	r2, r3, #4
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80109b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109b6:	f003 0308 	and.w	r3, r3, #8
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d011      	beq.n	80109e2 <HAL_UART_IRQHandler+0x126>
 80109be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109c2:	f003 0320 	and.w	r3, r3, #32
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d105      	bne.n	80109d6 <HAL_UART_IRQHandler+0x11a>
 80109ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109ce:	f003 0301 	and.w	r3, r3, #1
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d005      	beq.n	80109e2 <HAL_UART_IRQHandler+0x126>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109da:	f043 0208 	orr.w	r2, r3, #8
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	f000 81ed 	beq.w	8010dc6 <HAL_UART_IRQHandler+0x50a>
 80109ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109f0:	f003 0320 	and.w	r3, r3, #32
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d008      	beq.n	8010a0a <HAL_UART_IRQHandler+0x14e>
 80109f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109fc:	f003 0320 	and.w	r3, r3, #32
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d002      	beq.n	8010a0a <HAL_UART_IRQHandler+0x14e>
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 fb1a 	bl	801103e <UART_Receive_IT>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	695b      	ldr	r3, [r3, #20]
 8010a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a14:	2b40      	cmp	r3, #64	@ 0x40
 8010a16:	bf0c      	ite	eq
 8010a18:	2301      	moveq	r3, #1
 8010a1a:	2300      	movne	r3, #0
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a26:	f003 0308 	and.w	r3, r3, #8
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d103      	bne.n	8010a36 <HAL_UART_IRQHandler+0x17a>
 8010a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d04f      	beq.n	8010ad6 <HAL_UART_IRQHandler+0x21a>
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f000 fa22 	bl	8010e80 <UART_EndRxTransfer>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	695b      	ldr	r3, [r3, #20]
 8010a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a46:	2b40      	cmp	r3, #64	@ 0x40
 8010a48:	d141      	bne.n	8010ace <HAL_UART_IRQHandler+0x212>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	3314      	adds	r3, #20
 8010a50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010a58:	e853 3f00 	ldrex	r3, [r3]
 8010a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	3314      	adds	r3, #20
 8010a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010a76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010a86:	e841 2300 	strex	r3, r2, [r1]
 8010a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1d9      	bne.n	8010a4a <HAL_UART_IRQHandler+0x18e>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d013      	beq.n	8010ac6 <HAL_UART_IRQHandler+0x20a>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aa2:	4a7d      	ldr	r2, [pc, #500]	@ (8010c98 <HAL_UART_IRQHandler+0x3dc>)
 8010aa4:	651a      	str	r2, [r3, #80]	@ 0x50
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fd f817 	bl	800dade <HAL_DMA_Abort_IT>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d016      	beq.n	8010ae4 <HAL_UART_IRQHandler+0x228>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010ac0:	4610      	mov	r0, r2
 8010ac2:	4798      	blx	r3
 8010ac4:	e00e      	b.n	8010ae4 <HAL_UART_IRQHandler+0x228>
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 f986 	bl	8010dd8 <HAL_UART_ErrorCallback>
 8010acc:	e00a      	b.n	8010ae4 <HAL_UART_IRQHandler+0x228>
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 f982 	bl	8010dd8 <HAL_UART_ErrorCallback>
 8010ad4:	e006      	b.n	8010ae4 <HAL_UART_IRQHandler+0x228>
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 f97e 	bl	8010dd8 <HAL_UART_ErrorCallback>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	641a      	str	r2, [r3, #64]	@ 0x40
 8010ae2:	e170      	b.n	8010dc6 <HAL_UART_IRQHandler+0x50a>
 8010ae4:	bf00      	nop
 8010ae6:	e16e      	b.n	8010dc6 <HAL_UART_IRQHandler+0x50a>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	f040 814a 	bne.w	8010d86 <HAL_UART_IRQHandler+0x4ca>
 8010af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010af6:	f003 0310 	and.w	r3, r3, #16
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f000 8143 	beq.w	8010d86 <HAL_UART_IRQHandler+0x4ca>
 8010b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b04:	f003 0310 	and.w	r3, r3, #16
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f000 813c 	beq.w	8010d86 <HAL_UART_IRQHandler+0x4ca>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	60bb      	str	r3, [r7, #8]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	60bb      	str	r3, [r7, #8]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	60bb      	str	r3, [r7, #8]
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	695b      	ldr	r3, [r3, #20]
 8010b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b2e:	2b40      	cmp	r3, #64	@ 0x40
 8010b30:	f040 80b4 	bne.w	8010c9c <HAL_UART_IRQHandler+0x3e0>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8010b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	f000 8140 	beq.w	8010dca <HAL_UART_IRQHandler+0x50e>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010b52:	429a      	cmp	r2, r3
 8010b54:	f080 8139 	bcs.w	8010dca <HAL_UART_IRQHandler+0x50e>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010b5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b64:	69db      	ldr	r3, [r3, #28]
 8010b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b6a:	f000 8088 	beq.w	8010c7e <HAL_UART_IRQHandler+0x3c2>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	330c      	adds	r3, #12
 8010b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b7c:	e853 3f00 	ldrex	r3, [r3]
 8010b80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	330c      	adds	r3, #12
 8010b96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010baa:	e841 2300 	strex	r3, r2, [r1]
 8010bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1d9      	bne.n	8010b6e <HAL_UART_IRQHandler+0x2b2>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3314      	adds	r3, #20
 8010bc0:	677b      	str	r3, [r7, #116]	@ 0x74
 8010bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bc4:	e853 3f00 	ldrex	r3, [r3]
 8010bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8010bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010bcc:	f023 0301 	bic.w	r3, r3, #1
 8010bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3314      	adds	r3, #20
 8010bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010bde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010be4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010bea:	e841 2300 	strex	r3, r2, [r1]
 8010bee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d1e1      	bne.n	8010bba <HAL_UART_IRQHandler+0x2fe>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	3314      	adds	r3, #20
 8010bfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8010bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c00:	e853 3f00 	ldrex	r3, [r3]
 8010c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	3314      	adds	r3, #20
 8010c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010c1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010c1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010c20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010c22:	e841 2300 	strex	r3, r2, [r1]
 8010c26:	667b      	str	r3, [r7, #100]	@ 0x64
 8010c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1e3      	bne.n	8010bf6 <HAL_UART_IRQHandler+0x33a>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2220      	movs	r2, #32
 8010c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	330c      	adds	r3, #12
 8010c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c46:	e853 3f00 	ldrex	r3, [r3]
 8010c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c4e:	f023 0310 	bic.w	r3, r3, #16
 8010c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	330c      	adds	r3, #12
 8010c5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010c60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8010c62:	657b      	str	r3, [r7, #84]	@ 0x54
 8010c64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010c68:	e841 2300 	strex	r3, r2, [r1]
 8010c6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8010c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1e3      	bne.n	8010c3c <HAL_UART_IRQHandler+0x380>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7fc fec0 	bl	800d9fe <HAL_DMA_Abort>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f8ac 	bl	8010dec <HAL_UARTEx_RxEventCallback>
 8010c94:	e099      	b.n	8010dca <HAL_UART_IRQHandler+0x50e>
 8010c96:	bf00      	nop
 8010c98:	08010f47 	.word	0x08010f47
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	1ad3      	subs	r3, r2, r3
 8010ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f000 808b 	beq.w	8010dce <HAL_UART_IRQHandler+0x512>
 8010cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	f000 8086 	beq.w	8010dce <HAL_UART_IRQHandler+0x512>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	330c      	adds	r3, #12
 8010cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ccc:	e853 3f00 	ldrex	r3, [r3]
 8010cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	330c      	adds	r3, #12
 8010ce2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010ce6:	647a      	str	r2, [r7, #68]	@ 0x44
 8010ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8010cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cee:	e841 2300 	strex	r3, r2, [r1]
 8010cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d1e3      	bne.n	8010cc2 <HAL_UART_IRQHandler+0x406>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	3314      	adds	r3, #20
 8010d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d04:	e853 3f00 	ldrex	r3, [r3]
 8010d08:	623b      	str	r3, [r7, #32]
 8010d0a:	6a3b      	ldr	r3, [r7, #32]
 8010d0c:	f023 0301 	bic.w	r3, r3, #1
 8010d10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	3314      	adds	r3, #20
 8010d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010d1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8010d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d26:	e841 2300 	strex	r3, r2, [r1]
 8010d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d1e3      	bne.n	8010cfa <HAL_UART_IRQHandler+0x43e>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2220      	movs	r2, #32
 8010d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	330c      	adds	r3, #12
 8010d46:	613b      	str	r3, [r7, #16]
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	e853 3f00 	ldrex	r3, [r3]
 8010d4e:	60fb      	str	r3, [r7, #12]
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f023 0310 	bic.w	r3, r3, #16
 8010d56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	330c      	adds	r3, #12
 8010d60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010d64:	61fa      	str	r2, [r7, #28]
 8010d66:	61bb      	str	r3, [r7, #24]
 8010d68:	69b9      	ldr	r1, [r7, #24]
 8010d6a:	69fa      	ldr	r2, [r7, #28]
 8010d6c:	e841 2300 	strex	r3, r2, [r1]
 8010d70:	617b      	str	r3, [r7, #20]
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1e3      	bne.n	8010d40 <HAL_UART_IRQHandler+0x484>
 8010d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 f834 	bl	8010dec <HAL_UARTEx_RxEventCallback>
 8010d84:	e023      	b.n	8010dce <HAL_UART_IRQHandler+0x512>
 8010d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d009      	beq.n	8010da6 <HAL_UART_IRQHandler+0x4ea>
 8010d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d003      	beq.n	8010da6 <HAL_UART_IRQHandler+0x4ea>
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f000 f8e5 	bl	8010f6e <UART_Transmit_IT>
 8010da4:	e014      	b.n	8010dd0 <HAL_UART_IRQHandler+0x514>
 8010da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00e      	beq.n	8010dd0 <HAL_UART_IRQHandler+0x514>
 8010db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d008      	beq.n	8010dd0 <HAL_UART_IRQHandler+0x514>
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 f925 	bl	801100e <UART_EndTransmit_IT>
 8010dc4:	e004      	b.n	8010dd0 <HAL_UART_IRQHandler+0x514>
 8010dc6:	bf00      	nop
 8010dc8:	e002      	b.n	8010dd0 <HAL_UART_IRQHandler+0x514>
 8010dca:	bf00      	nop
 8010dcc:	e000      	b.n	8010dd0 <HAL_UART_IRQHandler+0x514>
 8010dce:	bf00      	nop
 8010dd0:	37e8      	adds	r7, #232	@ 0xe8
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}
 8010dd6:	bf00      	nop

08010dd8 <HAL_UART_ErrorCallback>:
 8010dd8:	b480      	push	{r7}
 8010dda:	b083      	sub	sp, #12
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	bf00      	nop
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <HAL_UARTEx_RxEventCallback>:
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	460b      	mov	r3, r1
 8010df6:	807b      	strh	r3, [r7, #2]
 8010df8:	bf00      	nop
 8010dfa:	370c      	adds	r7, #12
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr

08010e04 <UART_Start_Receive_IT>:
 8010e04:	b480      	push	{r7}
 8010e06:	b085      	sub	sp, #20
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	60b9      	str	r1, [r7, #8]
 8010e0e:	4613      	mov	r3, r2
 8010e10:	80fb      	strh	r3, [r7, #6]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	68ba      	ldr	r2, [r7, #8]
 8010e16:	629a      	str	r2, [r3, #40]	@ 0x28
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	88fa      	ldrh	r2, [r7, #6]
 8010e1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	88fa      	ldrh	r2, [r7, #6]
 8010e22:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2200      	movs	r2, #0
 8010e28:	641a      	str	r2, [r3, #64]	@ 0x40
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2222      	movs	r2, #34	@ 0x22
 8010e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	691b      	ldr	r3, [r3, #16]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d007      	beq.n	8010e52 <UART_Start_Receive_IT+0x4e>
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	68da      	ldr	r2, [r3, #12]
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010e50:	60da      	str	r2, [r3, #12]
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	695a      	ldr	r2, [r3, #20]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f042 0201 	orr.w	r2, r2, #1
 8010e60:	615a      	str	r2, [r3, #20]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	68da      	ldr	r2, [r3, #12]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f042 0220 	orr.w	r2, r2, #32
 8010e70:	60da      	str	r2, [r3, #12]
 8010e72:	2300      	movs	r3, #0
 8010e74:	4618      	mov	r0, r3
 8010e76:	3714      	adds	r7, #20
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr

08010e80 <UART_EndRxTransfer>:
 8010e80:	b480      	push	{r7}
 8010e82:	b095      	sub	sp, #84	@ 0x54
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	330c      	adds	r3, #12
 8010e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e92:	e853 3f00 	ldrex	r3, [r3]
 8010e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	330c      	adds	r3, #12
 8010ea6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010ea8:	643a      	str	r2, [r7, #64]	@ 0x40
 8010eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010eac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010eae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010eb0:	e841 2300 	strex	r3, r2, [r1]
 8010eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d1e5      	bne.n	8010e88 <UART_EndRxTransfer+0x8>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	3314      	adds	r3, #20
 8010ec2:	623b      	str	r3, [r7, #32]
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	e853 3f00 	ldrex	r3, [r3]
 8010eca:	61fb      	str	r3, [r7, #28]
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	f023 0301 	bic.w	r3, r3, #1
 8010ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	3314      	adds	r3, #20
 8010eda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010edc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ee0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ee4:	e841 2300 	strex	r3, r2, [r1]
 8010ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d1e5      	bne.n	8010ebc <UART_EndRxTransfer+0x3c>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d119      	bne.n	8010f2c <UART_EndRxTransfer+0xac>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	330c      	adds	r3, #12
 8010efe:	60fb      	str	r3, [r7, #12]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	e853 3f00 	ldrex	r3, [r3]
 8010f06:	60bb      	str	r3, [r7, #8]
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	f023 0310 	bic.w	r3, r3, #16
 8010f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	330c      	adds	r3, #12
 8010f16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f18:	61ba      	str	r2, [r7, #24]
 8010f1a:	617b      	str	r3, [r7, #20]
 8010f1c:	6979      	ldr	r1, [r7, #20]
 8010f1e:	69ba      	ldr	r2, [r7, #24]
 8010f20:	e841 2300 	strex	r3, r2, [r1]
 8010f24:	613b      	str	r3, [r7, #16]
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1e5      	bne.n	8010ef8 <UART_EndRxTransfer+0x78>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2220      	movs	r2, #32
 8010f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2200      	movs	r2, #0
 8010f38:	631a      	str	r2, [r3, #48]	@ 0x30
 8010f3a:	bf00      	nop
 8010f3c:	3754      	adds	r7, #84	@ 0x54
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <UART_DMAAbortOnError>:
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b084      	sub	sp, #16
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2200      	movs	r2, #0
 8010f58:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f7ff ff39 	bl	8010dd8 <HAL_UART_ErrorCallback>
 8010f66:	bf00      	nop
 8010f68:	3710      	adds	r7, #16
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <UART_Transmit_IT>:
 8010f6e:	b480      	push	{r7}
 8010f70:	b085      	sub	sp, #20
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	2b21      	cmp	r3, #33	@ 0x21
 8010f80:	d13e      	bne.n	8011000 <UART_Transmit_IT+0x92>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	689b      	ldr	r3, [r3, #8]
 8010f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f8a:	d114      	bne.n	8010fb6 <UART_Transmit_IT+0x48>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	691b      	ldr	r3, [r3, #16]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d110      	bne.n	8010fb6 <UART_Transmit_IT+0x48>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6a1b      	ldr	r3, [r3, #32]
 8010f98:	60fb      	str	r3, [r7, #12]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010fa8:	605a      	str	r2, [r3, #4]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6a1b      	ldr	r3, [r3, #32]
 8010fae:	1c9a      	adds	r2, r3, #2
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	621a      	str	r2, [r3, #32]
 8010fb4:	e008      	b.n	8010fc8 <UART_Transmit_IT+0x5a>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6a1b      	ldr	r3, [r3, #32]
 8010fba:	1c59      	adds	r1, r3, #1
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	6211      	str	r1, [r2, #32]
 8010fc0:	781a      	ldrb	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	605a      	str	r2, [r3, #4]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10f      	bne.n	8010ffc <UART_Transmit_IT+0x8e>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	68da      	ldr	r2, [r3, #12]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010fea:	60da      	str	r2, [r3, #12]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	68da      	ldr	r2, [r3, #12]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010ffa:	60da      	str	r2, [r3, #12]
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	e000      	b.n	8011002 <UART_Transmit_IT+0x94>
 8011000:	2302      	movs	r3, #2
 8011002:	4618      	mov	r0, r3
 8011004:	3714      	adds	r7, #20
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr

0801100e <UART_EndTransmit_IT>:
 801100e:	b580      	push	{r7, lr}
 8011010:	b082      	sub	sp, #8
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	68da      	ldr	r2, [r3, #12]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011024:	60da      	str	r2, [r3, #12]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2220      	movs	r2, #32
 801102a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7fb fe7c 	bl	800cd2c <HAL_UART_TxCpltCallback>
 8011034:	2300      	movs	r3, #0
 8011036:	4618      	mov	r0, r3
 8011038:	3708      	adds	r7, #8
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <UART_Receive_IT>:
 801103e:	b580      	push	{r7, lr}
 8011040:	b08c      	sub	sp, #48	@ 0x30
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801104c:	b2db      	uxtb	r3, r3
 801104e:	2b22      	cmp	r3, #34	@ 0x22
 8011050:	f040 80ab 	bne.w	80111aa <UART_Receive_IT+0x16c>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	689b      	ldr	r3, [r3, #8]
 8011058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801105c:	d117      	bne.n	801108e <UART_Receive_IT+0x50>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	691b      	ldr	r3, [r3, #16]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d113      	bne.n	801108e <UART_Receive_IT+0x50>
 8011066:	2300      	movs	r3, #0
 8011068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801106e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	b29b      	uxth	r3, r3
 8011078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801107c:	b29a      	uxth	r2, r3
 801107e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011080:	801a      	strh	r2, [r3, #0]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011086:	1c9a      	adds	r2, r3, #2
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	629a      	str	r2, [r3, #40]	@ 0x28
 801108c:	e026      	b.n	80110dc <UART_Receive_IT+0x9e>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011094:	2300      	movs	r3, #0
 8011096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80110a0:	d007      	beq.n	80110b2 <UART_Receive_IT+0x74>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d10a      	bne.n	80110c0 <UART_Receive_IT+0x82>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	691b      	ldr	r3, [r3, #16]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d106      	bne.n	80110c0 <UART_Receive_IT+0x82>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110bc:	701a      	strb	r2, [r3, #0]
 80110be:	e008      	b.n	80110d2 <UART_Receive_IT+0x94>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	b2db      	uxtb	r3, r3
 80110c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110cc:	b2da      	uxtb	r2, r3
 80110ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d0:	701a      	strb	r2, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110d6:	1c5a      	adds	r2, r3, #1
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	629a      	str	r2, [r3, #40]	@ 0x28
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	3b01      	subs	r3, #1
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	4619      	mov	r1, r3
 80110ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d15a      	bne.n	80111a6 <UART_Receive_IT+0x168>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	68da      	ldr	r2, [r3, #12]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f022 0220 	bic.w	r2, r2, #32
 80110fe:	60da      	str	r2, [r3, #12]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68da      	ldr	r2, [r3, #12]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801110e:	60da      	str	r2, [r3, #12]
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	695a      	ldr	r2, [r3, #20]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f022 0201 	bic.w	r2, r2, #1
 801111e:	615a      	str	r2, [r3, #20]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2220      	movs	r2, #32
 8011124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801112c:	2b01      	cmp	r3, #1
 801112e:	d135      	bne.n	801119c <UART_Receive_IT+0x15e>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2200      	movs	r2, #0
 8011134:	631a      	str	r2, [r3, #48]	@ 0x30
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	330c      	adds	r3, #12
 801113c:	617b      	str	r3, [r7, #20]
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	e853 3f00 	ldrex	r3, [r3]
 8011144:	613b      	str	r3, [r7, #16]
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	f023 0310 	bic.w	r3, r3, #16
 801114c:	627b      	str	r3, [r7, #36]	@ 0x24
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	330c      	adds	r3, #12
 8011154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011156:	623a      	str	r2, [r7, #32]
 8011158:	61fb      	str	r3, [r7, #28]
 801115a:	69f9      	ldr	r1, [r7, #28]
 801115c:	6a3a      	ldr	r2, [r7, #32]
 801115e:	e841 2300 	strex	r3, r2, [r1]
 8011162:	61bb      	str	r3, [r7, #24]
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d1e5      	bne.n	8011136 <UART_Receive_IT+0xf8>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f003 0310 	and.w	r3, r3, #16
 8011174:	2b10      	cmp	r3, #16
 8011176:	d10a      	bne.n	801118e <UART_Receive_IT+0x150>
 8011178:	2300      	movs	r3, #0
 801117a:	60fb      	str	r3, [r7, #12]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	60fb      	str	r3, [r7, #12]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	60fb      	str	r3, [r7, #12]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011192:	4619      	mov	r1, r3
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f7ff fe29 	bl	8010dec <HAL_UARTEx_RxEventCallback>
 801119a:	e002      	b.n	80111a2 <UART_Receive_IT+0x164>
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7fb fdcf 	bl	800cd40 <HAL_UART_RxCpltCallback>
 80111a2:	2300      	movs	r3, #0
 80111a4:	e002      	b.n	80111ac <UART_Receive_IT+0x16e>
 80111a6:	2300      	movs	r3, #0
 80111a8:	e000      	b.n	80111ac <UART_Receive_IT+0x16e>
 80111aa:	2302      	movs	r3, #2
 80111ac:	4618      	mov	r0, r3
 80111ae:	3730      	adds	r7, #48	@ 0x30
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <UART_SetConfig>:
 80111b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80111b8:	b0c0      	sub	sp, #256	@ 0x100
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80111c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80111cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111d0:	68d9      	ldr	r1, [r3, #12]
 80111d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	ea40 0301 	orr.w	r3, r0, r1
 80111dc:	6113      	str	r3, [r2, #16]
 80111de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111e2:	689a      	ldr	r2, [r3, #8]
 80111e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111e8:	691b      	ldr	r3, [r3, #16]
 80111ea:	431a      	orrs	r2, r3
 80111ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111f0:	695b      	ldr	r3, [r3, #20]
 80111f2:	431a      	orrs	r2, r3
 80111f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111f8:	69db      	ldr	r3, [r3, #28]
 80111fa:	4313      	orrs	r3, r2
 80111fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801120c:	f021 010c 	bic.w	r1, r1, #12
 8011210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801121a:	430b      	orrs	r3, r1
 801121c:	60d3      	str	r3, [r2, #12]
 801121e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	695b      	ldr	r3, [r3, #20]
 8011226:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801122a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801122e:	6999      	ldr	r1, [r3, #24]
 8011230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	ea40 0301 	orr.w	r3, r0, r1
 801123a:	6153      	str	r3, [r2, #20]
 801123c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	4b8f      	ldr	r3, [pc, #572]	@ (8011480 <UART_SetConfig+0x2cc>)
 8011244:	429a      	cmp	r2, r3
 8011246:	d005      	beq.n	8011254 <UART_SetConfig+0xa0>
 8011248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	4b8d      	ldr	r3, [pc, #564]	@ (8011484 <UART_SetConfig+0x2d0>)
 8011250:	429a      	cmp	r2, r3
 8011252:	d104      	bne.n	801125e <UART_SetConfig+0xaa>
 8011254:	f7fc ff82 	bl	800e15c <HAL_RCC_GetPCLK2Freq>
 8011258:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801125c:	e003      	b.n	8011266 <UART_SetConfig+0xb2>
 801125e:	f7fc ff69 	bl	800e134 <HAL_RCC_GetPCLK1Freq>
 8011262:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801126a:	69db      	ldr	r3, [r3, #28]
 801126c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011270:	f040 810c 	bne.w	801148c <UART_SetConfig+0x2d8>
 8011274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011278:	2200      	movs	r2, #0
 801127a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801127e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011282:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011286:	4622      	mov	r2, r4
 8011288:	462b      	mov	r3, r5
 801128a:	1891      	adds	r1, r2, r2
 801128c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801128e:	415b      	adcs	r3, r3
 8011290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011292:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011296:	4621      	mov	r1, r4
 8011298:	eb12 0801 	adds.w	r8, r2, r1
 801129c:	4629      	mov	r1, r5
 801129e:	eb43 0901 	adc.w	r9, r3, r1
 80112a2:	f04f 0200 	mov.w	r2, #0
 80112a6:	f04f 0300 	mov.w	r3, #0
 80112aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80112ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80112b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80112b6:	4690      	mov	r8, r2
 80112b8:	4699      	mov	r9, r3
 80112ba:	4623      	mov	r3, r4
 80112bc:	eb18 0303 	adds.w	r3, r8, r3
 80112c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80112c4:	462b      	mov	r3, r5
 80112c6:	eb49 0303 	adc.w	r3, r9, r3
 80112ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80112ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80112da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80112de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80112e2:	460b      	mov	r3, r1
 80112e4:	18db      	adds	r3, r3, r3
 80112e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80112e8:	4613      	mov	r3, r2
 80112ea:	eb42 0303 	adc.w	r3, r2, r3
 80112ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80112f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80112f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80112f8:	f7ef fcd6 	bl	8000ca8 <__aeabi_uldivmod>
 80112fc:	4602      	mov	r2, r0
 80112fe:	460b      	mov	r3, r1
 8011300:	4b61      	ldr	r3, [pc, #388]	@ (8011488 <UART_SetConfig+0x2d4>)
 8011302:	fba3 2302 	umull	r2, r3, r3, r2
 8011306:	095b      	lsrs	r3, r3, #5
 8011308:	011c      	lsls	r4, r3, #4
 801130a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801130e:	2200      	movs	r2, #0
 8011310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011314:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011318:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801131c:	4642      	mov	r2, r8
 801131e:	464b      	mov	r3, r9
 8011320:	1891      	adds	r1, r2, r2
 8011322:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011324:	415b      	adcs	r3, r3
 8011326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801132c:	4641      	mov	r1, r8
 801132e:	eb12 0a01 	adds.w	sl, r2, r1
 8011332:	4649      	mov	r1, r9
 8011334:	eb43 0b01 	adc.w	fp, r3, r1
 8011338:	f04f 0200 	mov.w	r2, #0
 801133c:	f04f 0300 	mov.w	r3, #0
 8011340:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011344:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801134c:	4692      	mov	sl, r2
 801134e:	469b      	mov	fp, r3
 8011350:	4643      	mov	r3, r8
 8011352:	eb1a 0303 	adds.w	r3, sl, r3
 8011356:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801135a:	464b      	mov	r3, r9
 801135c:	eb4b 0303 	adc.w	r3, fp, r3
 8011360:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	2200      	movs	r2, #0
 801136c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011370:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011374:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011378:	460b      	mov	r3, r1
 801137a:	18db      	adds	r3, r3, r3
 801137c:	643b      	str	r3, [r7, #64]	@ 0x40
 801137e:	4613      	mov	r3, r2
 8011380:	eb42 0303 	adc.w	r3, r2, r3
 8011384:	647b      	str	r3, [r7, #68]	@ 0x44
 8011386:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801138a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801138e:	f7ef fc8b 	bl	8000ca8 <__aeabi_uldivmod>
 8011392:	4602      	mov	r2, r0
 8011394:	460b      	mov	r3, r1
 8011396:	4611      	mov	r1, r2
 8011398:	4b3b      	ldr	r3, [pc, #236]	@ (8011488 <UART_SetConfig+0x2d4>)
 801139a:	fba3 2301 	umull	r2, r3, r3, r1
 801139e:	095b      	lsrs	r3, r3, #5
 80113a0:	2264      	movs	r2, #100	@ 0x64
 80113a2:	fb02 f303 	mul.w	r3, r2, r3
 80113a6:	1acb      	subs	r3, r1, r3
 80113a8:	00db      	lsls	r3, r3, #3
 80113aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80113ae:	4b36      	ldr	r3, [pc, #216]	@ (8011488 <UART_SetConfig+0x2d4>)
 80113b0:	fba3 2302 	umull	r2, r3, r3, r2
 80113b4:	095b      	lsrs	r3, r3, #5
 80113b6:	005b      	lsls	r3, r3, #1
 80113b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80113bc:	441c      	add	r4, r3
 80113be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80113c2:	2200      	movs	r2, #0
 80113c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80113c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80113cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80113d0:	4642      	mov	r2, r8
 80113d2:	464b      	mov	r3, r9
 80113d4:	1891      	adds	r1, r2, r2
 80113d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80113d8:	415b      	adcs	r3, r3
 80113da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80113dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80113e0:	4641      	mov	r1, r8
 80113e2:	1851      	adds	r1, r2, r1
 80113e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80113e6:	4649      	mov	r1, r9
 80113e8:	414b      	adcs	r3, r1
 80113ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80113ec:	f04f 0200 	mov.w	r2, #0
 80113f0:	f04f 0300 	mov.w	r3, #0
 80113f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80113f8:	4659      	mov	r1, fp
 80113fa:	00cb      	lsls	r3, r1, #3
 80113fc:	4651      	mov	r1, sl
 80113fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011402:	4651      	mov	r1, sl
 8011404:	00ca      	lsls	r2, r1, #3
 8011406:	4610      	mov	r0, r2
 8011408:	4619      	mov	r1, r3
 801140a:	4603      	mov	r3, r0
 801140c:	4642      	mov	r2, r8
 801140e:	189b      	adds	r3, r3, r2
 8011410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011414:	464b      	mov	r3, r9
 8011416:	460a      	mov	r2, r1
 8011418:	eb42 0303 	adc.w	r3, r2, r3
 801141c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801142c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011434:	460b      	mov	r3, r1
 8011436:	18db      	adds	r3, r3, r3
 8011438:	62bb      	str	r3, [r7, #40]	@ 0x28
 801143a:	4613      	mov	r3, r2
 801143c:	eb42 0303 	adc.w	r3, r2, r3
 8011440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011446:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801144a:	f7ef fc2d 	bl	8000ca8 <__aeabi_uldivmod>
 801144e:	4602      	mov	r2, r0
 8011450:	460b      	mov	r3, r1
 8011452:	4b0d      	ldr	r3, [pc, #52]	@ (8011488 <UART_SetConfig+0x2d4>)
 8011454:	fba3 1302 	umull	r1, r3, r3, r2
 8011458:	095b      	lsrs	r3, r3, #5
 801145a:	2164      	movs	r1, #100	@ 0x64
 801145c:	fb01 f303 	mul.w	r3, r1, r3
 8011460:	1ad3      	subs	r3, r2, r3
 8011462:	00db      	lsls	r3, r3, #3
 8011464:	3332      	adds	r3, #50	@ 0x32
 8011466:	4a08      	ldr	r2, [pc, #32]	@ (8011488 <UART_SetConfig+0x2d4>)
 8011468:	fba2 2303 	umull	r2, r3, r2, r3
 801146c:	095b      	lsrs	r3, r3, #5
 801146e:	f003 0207 	and.w	r2, r3, #7
 8011472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4422      	add	r2, r4
 801147a:	609a      	str	r2, [r3, #8]
 801147c:	e106      	b.n	801168c <UART_SetConfig+0x4d8>
 801147e:	bf00      	nop
 8011480:	40011000 	.word	0x40011000
 8011484:	40011400 	.word	0x40011400
 8011488:	51eb851f 	.word	0x51eb851f
 801148c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011490:	2200      	movs	r2, #0
 8011492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011496:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801149a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801149e:	4642      	mov	r2, r8
 80114a0:	464b      	mov	r3, r9
 80114a2:	1891      	adds	r1, r2, r2
 80114a4:	6239      	str	r1, [r7, #32]
 80114a6:	415b      	adcs	r3, r3
 80114a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80114aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80114ae:	4641      	mov	r1, r8
 80114b0:	1854      	adds	r4, r2, r1
 80114b2:	4649      	mov	r1, r9
 80114b4:	eb43 0501 	adc.w	r5, r3, r1
 80114b8:	f04f 0200 	mov.w	r2, #0
 80114bc:	f04f 0300 	mov.w	r3, #0
 80114c0:	00eb      	lsls	r3, r5, #3
 80114c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80114c6:	00e2      	lsls	r2, r4, #3
 80114c8:	4614      	mov	r4, r2
 80114ca:	461d      	mov	r5, r3
 80114cc:	4643      	mov	r3, r8
 80114ce:	18e3      	adds	r3, r4, r3
 80114d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80114d4:	464b      	mov	r3, r9
 80114d6:	eb45 0303 	adc.w	r3, r5, r3
 80114da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80114de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80114ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80114ee:	f04f 0200 	mov.w	r2, #0
 80114f2:	f04f 0300 	mov.w	r3, #0
 80114f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80114fa:	4629      	mov	r1, r5
 80114fc:	008b      	lsls	r3, r1, #2
 80114fe:	4621      	mov	r1, r4
 8011500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011504:	4621      	mov	r1, r4
 8011506:	008a      	lsls	r2, r1, #2
 8011508:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801150c:	f7ef fbcc 	bl	8000ca8 <__aeabi_uldivmod>
 8011510:	4602      	mov	r2, r0
 8011512:	460b      	mov	r3, r1
 8011514:	4b60      	ldr	r3, [pc, #384]	@ (8011698 <UART_SetConfig+0x4e4>)
 8011516:	fba3 2302 	umull	r2, r3, r3, r2
 801151a:	095b      	lsrs	r3, r3, #5
 801151c:	011c      	lsls	r4, r3, #4
 801151e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011522:	2200      	movs	r2, #0
 8011524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011528:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801152c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8011530:	4642      	mov	r2, r8
 8011532:	464b      	mov	r3, r9
 8011534:	1891      	adds	r1, r2, r2
 8011536:	61b9      	str	r1, [r7, #24]
 8011538:	415b      	adcs	r3, r3
 801153a:	61fb      	str	r3, [r7, #28]
 801153c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011540:	4641      	mov	r1, r8
 8011542:	1851      	adds	r1, r2, r1
 8011544:	6139      	str	r1, [r7, #16]
 8011546:	4649      	mov	r1, r9
 8011548:	414b      	adcs	r3, r1
 801154a:	617b      	str	r3, [r7, #20]
 801154c:	f04f 0200 	mov.w	r2, #0
 8011550:	f04f 0300 	mov.w	r3, #0
 8011554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011558:	4659      	mov	r1, fp
 801155a:	00cb      	lsls	r3, r1, #3
 801155c:	4651      	mov	r1, sl
 801155e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011562:	4651      	mov	r1, sl
 8011564:	00ca      	lsls	r2, r1, #3
 8011566:	4610      	mov	r0, r2
 8011568:	4619      	mov	r1, r3
 801156a:	4603      	mov	r3, r0
 801156c:	4642      	mov	r2, r8
 801156e:	189b      	adds	r3, r3, r2
 8011570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011574:	464b      	mov	r3, r9
 8011576:	460a      	mov	r2, r1
 8011578:	eb42 0303 	adc.w	r3, r2, r3
 801157c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	67bb      	str	r3, [r7, #120]	@ 0x78
 801158a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801158c:	f04f 0200 	mov.w	r2, #0
 8011590:	f04f 0300 	mov.w	r3, #0
 8011594:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011598:	4649      	mov	r1, r9
 801159a:	008b      	lsls	r3, r1, #2
 801159c:	4641      	mov	r1, r8
 801159e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80115a2:	4641      	mov	r1, r8
 80115a4:	008a      	lsls	r2, r1, #2
 80115a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80115aa:	f7ef fb7d 	bl	8000ca8 <__aeabi_uldivmod>
 80115ae:	4602      	mov	r2, r0
 80115b0:	460b      	mov	r3, r1
 80115b2:	4611      	mov	r1, r2
 80115b4:	4b38      	ldr	r3, [pc, #224]	@ (8011698 <UART_SetConfig+0x4e4>)
 80115b6:	fba3 2301 	umull	r2, r3, r3, r1
 80115ba:	095b      	lsrs	r3, r3, #5
 80115bc:	2264      	movs	r2, #100	@ 0x64
 80115be:	fb02 f303 	mul.w	r3, r2, r3
 80115c2:	1acb      	subs	r3, r1, r3
 80115c4:	011b      	lsls	r3, r3, #4
 80115c6:	3332      	adds	r3, #50	@ 0x32
 80115c8:	4a33      	ldr	r2, [pc, #204]	@ (8011698 <UART_SetConfig+0x4e4>)
 80115ca:	fba2 2303 	umull	r2, r3, r2, r3
 80115ce:	095b      	lsrs	r3, r3, #5
 80115d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80115d4:	441c      	add	r4, r3
 80115d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80115da:	2200      	movs	r2, #0
 80115dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80115de:	677a      	str	r2, [r7, #116]	@ 0x74
 80115e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80115e4:	4642      	mov	r2, r8
 80115e6:	464b      	mov	r3, r9
 80115e8:	1891      	adds	r1, r2, r2
 80115ea:	60b9      	str	r1, [r7, #8]
 80115ec:	415b      	adcs	r3, r3
 80115ee:	60fb      	str	r3, [r7, #12]
 80115f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80115f4:	4641      	mov	r1, r8
 80115f6:	1851      	adds	r1, r2, r1
 80115f8:	6039      	str	r1, [r7, #0]
 80115fa:	4649      	mov	r1, r9
 80115fc:	414b      	adcs	r3, r1
 80115fe:	607b      	str	r3, [r7, #4]
 8011600:	f04f 0200 	mov.w	r2, #0
 8011604:	f04f 0300 	mov.w	r3, #0
 8011608:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801160c:	4659      	mov	r1, fp
 801160e:	00cb      	lsls	r3, r1, #3
 8011610:	4651      	mov	r1, sl
 8011612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011616:	4651      	mov	r1, sl
 8011618:	00ca      	lsls	r2, r1, #3
 801161a:	4610      	mov	r0, r2
 801161c:	4619      	mov	r1, r3
 801161e:	4603      	mov	r3, r0
 8011620:	4642      	mov	r2, r8
 8011622:	189b      	adds	r3, r3, r2
 8011624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011626:	464b      	mov	r3, r9
 8011628:	460a      	mov	r2, r1
 801162a:	eb42 0303 	adc.w	r3, r2, r3
 801162e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	2200      	movs	r2, #0
 8011638:	663b      	str	r3, [r7, #96]	@ 0x60
 801163a:	667a      	str	r2, [r7, #100]	@ 0x64
 801163c:	f04f 0200 	mov.w	r2, #0
 8011640:	f04f 0300 	mov.w	r3, #0
 8011644:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011648:	4649      	mov	r1, r9
 801164a:	008b      	lsls	r3, r1, #2
 801164c:	4641      	mov	r1, r8
 801164e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011652:	4641      	mov	r1, r8
 8011654:	008a      	lsls	r2, r1, #2
 8011656:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801165a:	f7ef fb25 	bl	8000ca8 <__aeabi_uldivmod>
 801165e:	4602      	mov	r2, r0
 8011660:	460b      	mov	r3, r1
 8011662:	4b0d      	ldr	r3, [pc, #52]	@ (8011698 <UART_SetConfig+0x4e4>)
 8011664:	fba3 1302 	umull	r1, r3, r3, r2
 8011668:	095b      	lsrs	r3, r3, #5
 801166a:	2164      	movs	r1, #100	@ 0x64
 801166c:	fb01 f303 	mul.w	r3, r1, r3
 8011670:	1ad3      	subs	r3, r2, r3
 8011672:	011b      	lsls	r3, r3, #4
 8011674:	3332      	adds	r3, #50	@ 0x32
 8011676:	4a08      	ldr	r2, [pc, #32]	@ (8011698 <UART_SetConfig+0x4e4>)
 8011678:	fba2 2303 	umull	r2, r3, r2, r3
 801167c:	095b      	lsrs	r3, r3, #5
 801167e:	f003 020f 	and.w	r2, r3, #15
 8011682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4422      	add	r2, r4
 801168a:	609a      	str	r2, [r3, #8]
 801168c:	bf00      	nop
 801168e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011692:	46bd      	mov	sp, r7
 8011694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011698:	51eb851f 	.word	0x51eb851f

0801169c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801169c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801169e:	2400      	movs	r4, #0
 80116a0:	2310      	movs	r3, #16
 80116a2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80116a6:	6803      	ldr	r3, [r0, #0]
 80116a8:	4615      	mov	r5, r2
 80116aa:	699e      	ldr	r6, [r3, #24]
 80116ac:	6812      	ldr	r2, [r2, #0]
 80116ae:	466b      	mov	r3, sp
 80116b0:	e9cd 4400 	strd	r4, r4, [sp]
 80116b4:	47b0      	blx	r6
 80116b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116ba:	f003 0306 	and.w	r3, r3, #6
 80116be:	2b06      	cmp	r3, #6
 80116c0:	bf03      	ittte	eq
 80116c2:	9b00      	ldreq	r3, [sp, #0]
 80116c4:	602b      	streq	r3, [r5, #0]
 80116c6:	2001      	moveq	r0, #1
 80116c8:	4620      	movne	r0, r4
 80116ca:	b004      	add	sp, #16
 80116cc:	bd70      	pop	{r4, r5, r6, pc}

080116ce <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80116ce:	9800      	ldr	r0, [sp, #0]
 80116d0:	4290      	cmp	r0, r2
 80116d2:	bf0c      	ite	eq
 80116d4:	2006      	moveq	r0, #6
 80116d6:	2001      	movne	r0, #1
 80116d8:	4770      	bx	lr
	...

080116dc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80116dc:	b510      	push	{r4, lr}
 80116de:	4b03      	ldr	r3, [pc, #12]	@ (80116ec <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80116e0:	6003      	str	r3, [r0, #0]
 80116e2:	4604      	mov	r4, r0
 80116e4:	f000 fc3d 	bl	8011f62 <_ZNSt9type_infoD1Ev>
 80116e8:	4620      	mov	r0, r4
 80116ea:	bd10      	pop	{r4, pc}
 80116ec:	080160a8 	.word	0x080160a8

080116f0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	4604      	mov	r4, r0
 80116f4:	f7ff fff2 	bl	80116dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80116f8:	4620      	mov	r0, r4
 80116fa:	2108      	movs	r1, #8
 80116fc:	f000 f842 	bl	8011784 <_ZdlPvj>
 8011700:	4620      	mov	r0, r4
 8011702:	bd10      	pop	{r4, pc}

08011704 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8011704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011708:	461f      	mov	r7, r3
 801170a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801170e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011712:	4598      	cmp	r8, r3
 8011714:	4606      	mov	r6, r0
 8011716:	4615      	mov	r5, r2
 8011718:	d107      	bne.n	801172a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801171a:	9907      	ldr	r1, [sp, #28]
 801171c:	f000 fc24 	bl	8011f68 <_ZNKSt9type_info7__equalERKS_>
 8011720:	b118      	cbz	r0, 801172a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8011722:	7165      	strb	r5, [r4, #5]
 8011724:	2000      	movs	r0, #0
 8011726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172a:	4639      	mov	r1, r7
 801172c:	4630      	mov	r0, r6
 801172e:	f000 fc1b 	bl	8011f68 <_ZNKSt9type_info7__equalERKS_>
 8011732:	2800      	cmp	r0, #0
 8011734:	d0f6      	beq.n	8011724 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8011736:	2301      	movs	r3, #1
 8011738:	f8c4 8000 	str.w	r8, [r4]
 801173c:	7125      	strb	r5, [r4, #4]
 801173e:	71a3      	strb	r3, [r4, #6]
 8011740:	e7f0      	b.n	8011724 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08011742 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8011742:	b538      	push	{r3, r4, r5, lr}
 8011744:	4615      	mov	r5, r2
 8011746:	461c      	mov	r4, r3
 8011748:	f000 fc0e 	bl	8011f68 <_ZNKSt9type_info7__equalERKS_>
 801174c:	b120      	cbz	r0, 8011758 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801174e:	2308      	movs	r3, #8
 8011750:	60e3      	str	r3, [r4, #12]
 8011752:	2306      	movs	r3, #6
 8011754:	6025      	str	r5, [r4, #0]
 8011756:	7123      	strb	r3, [r4, #4]
 8011758:	bd38      	pop	{r3, r4, r5, pc}

0801175a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801175a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175e:	4605      	mov	r5, r0
 8011760:	460c      	mov	r4, r1
 8011762:	4616      	mov	r6, r2
 8011764:	461f      	mov	r7, r3
 8011766:	f000 fbff 	bl	8011f68 <_ZNKSt9type_info7__equalERKS_>
 801176a:	b948      	cbnz	r0, 8011780 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801176c:	2f03      	cmp	r7, #3
 801176e:	d807      	bhi.n	8011780 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	4632      	mov	r2, r6
 8011774:	4629      	mov	r1, r5
 8011776:	4620      	mov	r0, r4
 8011778:	695b      	ldr	r3, [r3, #20]
 801177a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801177e:	4718      	bx	r3
 8011780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011784 <_ZdlPvj>:
 8011784:	f000 bc0b 	b.w	8011f9e <_ZdlPv>

08011788 <__cxa_end_cleanup>:
 8011788:	b41e      	push	{r1, r2, r3, r4}
 801178a:	f000 f89c 	bl	80118c6 <__gnu_end_cleanup>
 801178e:	bc1e      	pop	{r1, r2, r3, r4}
 8011790:	f7f0 f988 	bl	8001aa4 <_Unwind_Resume>

08011794 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8011794:	7803      	ldrb	r3, [r0, #0]
 8011796:	2b47      	cmp	r3, #71	@ 0x47
 8011798:	d117      	bne.n	80117ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801179a:	7843      	ldrb	r3, [r0, #1]
 801179c:	2b4e      	cmp	r3, #78	@ 0x4e
 801179e:	d114      	bne.n	80117ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80117a0:	7883      	ldrb	r3, [r0, #2]
 80117a2:	2b55      	cmp	r3, #85	@ 0x55
 80117a4:	d111      	bne.n	80117ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80117a6:	78c3      	ldrb	r3, [r0, #3]
 80117a8:	2b43      	cmp	r3, #67	@ 0x43
 80117aa:	d10e      	bne.n	80117ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80117ac:	7903      	ldrb	r3, [r0, #4]
 80117ae:	2b43      	cmp	r3, #67	@ 0x43
 80117b0:	d10b      	bne.n	80117ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80117b2:	7943      	ldrb	r3, [r0, #5]
 80117b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80117b6:	d108      	bne.n	80117ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80117b8:	7983      	ldrb	r3, [r0, #6]
 80117ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80117bc:	d105      	bne.n	80117ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80117be:	79c0      	ldrb	r0, [r0, #7]
 80117c0:	2801      	cmp	r0, #1
 80117c2:	bf8c      	ite	hi
 80117c4:	2000      	movhi	r0, #0
 80117c6:	2001      	movls	r0, #1
 80117c8:	4770      	bx	lr
 80117ca:	2000      	movs	r0, #0
 80117cc:	4770      	bx	lr
	...

080117d0 <__cxa_type_match>:
 80117d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80117d4:	461d      	mov	r5, r3
 80117d6:	7803      	ldrb	r3, [r0, #0]
 80117d8:	2b47      	cmp	r3, #71	@ 0x47
 80117da:	460e      	mov	r6, r1
 80117dc:	4602      	mov	r2, r0
 80117de:	79c1      	ldrb	r1, [r0, #7]
 80117e0:	d113      	bne.n	801180a <__cxa_type_match+0x3a>
 80117e2:	7843      	ldrb	r3, [r0, #1]
 80117e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80117e6:	d110      	bne.n	801180a <__cxa_type_match+0x3a>
 80117e8:	7883      	ldrb	r3, [r0, #2]
 80117ea:	2b55      	cmp	r3, #85	@ 0x55
 80117ec:	d10d      	bne.n	801180a <__cxa_type_match+0x3a>
 80117ee:	78c3      	ldrb	r3, [r0, #3]
 80117f0:	2b43      	cmp	r3, #67	@ 0x43
 80117f2:	d10a      	bne.n	801180a <__cxa_type_match+0x3a>
 80117f4:	7903      	ldrb	r3, [r0, #4]
 80117f6:	2b46      	cmp	r3, #70	@ 0x46
 80117f8:	d107      	bne.n	801180a <__cxa_type_match+0x3a>
 80117fa:	7943      	ldrb	r3, [r0, #5]
 80117fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80117fe:	d104      	bne.n	801180a <__cxa_type_match+0x3a>
 8011800:	7983      	ldrb	r3, [r0, #6]
 8011802:	2b52      	cmp	r3, #82	@ 0x52
 8011804:	d101      	bne.n	801180a <__cxa_type_match+0x3a>
 8011806:	2900      	cmp	r1, #0
 8011808:	d031      	beq.n	801186e <__cxa_type_match+0x9e>
 801180a:	4610      	mov	r0, r2
 801180c:	f7ff ffc2 	bl	8011794 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011810:	f080 0401 	eor.w	r4, r0, #1
 8011814:	b2e4      	uxtb	r4, r4
 8011816:	2300      	movs	r3, #0
 8011818:	2000      	movs	r0, #0
 801181a:	9001      	str	r0, [sp, #4]
 801181c:	bb53      	cbnz	r3, 8011874 <__cxa_type_match+0xa4>
 801181e:	bb5c      	cbnz	r4, 8011878 <__cxa_type_match+0xa8>
 8011820:	2901      	cmp	r1, #1
 8011822:	bf0a      	itet	eq
 8011824:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8011828:	f1a2 0320 	subne.w	r3, r2, #32
 801182c:	3b78      	subeq	r3, #120	@ 0x78
 801182e:	2901      	cmp	r1, #1
 8011830:	bf08      	it	eq
 8011832:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8011836:	681c      	ldr	r4, [r3, #0]
 8011838:	bf18      	it	ne
 801183a:	3258      	addne	r2, #88	@ 0x58
 801183c:	9201      	str	r2, [sp, #4]
 801183e:	6823      	ldr	r3, [r4, #0]
 8011840:	4620      	mov	r0, r4
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	4798      	blx	r3
 8011846:	b1c8      	cbz	r0, 801187c <__cxa_type_match+0xac>
 8011848:	9b01      	ldr	r3, [sp, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	9301      	str	r3, [sp, #4]
 801184e:	2702      	movs	r7, #2
 8011850:	6833      	ldr	r3, [r6, #0]
 8011852:	aa01      	add	r2, sp, #4
 8011854:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8011858:	4621      	mov	r1, r4
 801185a:	2301      	movs	r3, #1
 801185c:	4630      	mov	r0, r6
 801185e:	47c0      	blx	r8
 8011860:	b170      	cbz	r0, 8011880 <__cxa_type_match+0xb0>
 8011862:	9b01      	ldr	r3, [sp, #4]
 8011864:	602b      	str	r3, [r5, #0]
 8011866:	4638      	mov	r0, r7
 8011868:	b002      	add	sp, #8
 801186a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186e:	2301      	movs	r3, #1
 8011870:	460c      	mov	r4, r1
 8011872:	e7d1      	b.n	8011818 <__cxa_type_match+0x48>
 8011874:	4c03      	ldr	r4, [pc, #12]	@ (8011884 <__cxa_type_match+0xb4>)
 8011876:	e7e2      	b.n	801183e <__cxa_type_match+0x6e>
 8011878:	4c03      	ldr	r4, [pc, #12]	@ (8011888 <__cxa_type_match+0xb8>)
 801187a:	e7e0      	b.n	801183e <__cxa_type_match+0x6e>
 801187c:	2701      	movs	r7, #1
 801187e:	e7e7      	b.n	8011850 <__cxa_type_match+0x80>
 8011880:	4607      	mov	r7, r0
 8011882:	e7f0      	b.n	8011866 <__cxa_type_match+0x96>
 8011884:	080160ec 	.word	0x080160ec
 8011888:	08016118 	.word	0x08016118

0801188c <__cxa_begin_cleanup>:
 801188c:	b510      	push	{r4, lr}
 801188e:	4604      	mov	r4, r0
 8011890:	f000 f834 	bl	80118fc <__cxa_get_globals>
 8011894:	4602      	mov	r2, r0
 8011896:	4620      	mov	r0, r4
 8011898:	f1a4 0120 	sub.w	r1, r4, #32
 801189c:	f7ff ff7a 	bl	8011794 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80118a0:	b160      	cbz	r0, 80118bc <__cxa_begin_cleanup+0x30>
 80118a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80118a6:	3301      	adds	r3, #1
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80118ae:	d103      	bne.n	80118b8 <__cxa_begin_cleanup+0x2c>
 80118b0:	6893      	ldr	r3, [r2, #8]
 80118b2:	f844 3c08 	str.w	r3, [r4, #-8]
 80118b6:	6091      	str	r1, [r2, #8]
 80118b8:	2001      	movs	r0, #1
 80118ba:	bd10      	pop	{r4, pc}
 80118bc:	6893      	ldr	r3, [r2, #8]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d0f9      	beq.n	80118b6 <__cxa_begin_cleanup+0x2a>
 80118c2:	f000 faa3 	bl	8011e0c <_ZSt9terminatev>

080118c6 <__gnu_end_cleanup>:
 80118c6:	b510      	push	{r4, lr}
 80118c8:	f000 f818 	bl	80118fc <__cxa_get_globals>
 80118cc:	6882      	ldr	r2, [r0, #8]
 80118ce:	4601      	mov	r1, r0
 80118d0:	b90a      	cbnz	r2, 80118d6 <__gnu_end_cleanup+0x10>
 80118d2:	f000 fa9b 	bl	8011e0c <_ZSt9terminatev>
 80118d6:	f102 0420 	add.w	r4, r2, #32
 80118da:	4620      	mov	r0, r4
 80118dc:	f7ff ff5a 	bl	8011794 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80118e0:	b140      	cbz	r0, 80118f4 <__gnu_end_cleanup+0x2e>
 80118e2:	69d3      	ldr	r3, [r2, #28]
 80118e4:	3b01      	subs	r3, #1
 80118e6:	61d3      	str	r3, [r2, #28]
 80118e8:	b913      	cbnz	r3, 80118f0 <__gnu_end_cleanup+0x2a>
 80118ea:	6990      	ldr	r0, [r2, #24]
 80118ec:	6088      	str	r0, [r1, #8]
 80118ee:	6193      	str	r3, [r2, #24]
 80118f0:	4620      	mov	r0, r4
 80118f2:	bd10      	pop	{r4, pc}
 80118f4:	6088      	str	r0, [r1, #8]
 80118f6:	e7fb      	b.n	80118f0 <__gnu_end_cleanup+0x2a>

080118f8 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 80118f8:	4770      	bx	lr
	...

080118fc <__cxa_get_globals>:
 80118fc:	4800      	ldr	r0, [pc, #0]	@ (8011900 <__cxa_get_globals+0x4>)
 80118fe:	4770      	bx	lr
 8011900:	2000055c 	.word	0x2000055c

08011904 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8011904:	4a02      	ldr	r2, [pc, #8]	@ (8011910 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8011906:	4903      	ldr	r1, [pc, #12]	@ (8011914 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8011908:	4803      	ldr	r0, [pc, #12]	@ (8011918 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 801190a:	f000 bb43 	b.w	8011f94 <__aeabi_atexit>
 801190e:	bf00      	nop
 8011910:	20000000 	.word	0x20000000
 8011914:	080118f9 	.word	0x080118f9
 8011918:	2000055c 	.word	0x2000055c

0801191c <_ZL12read_uleb128PKhPm>:
 801191c:	b530      	push	{r4, r5, lr}
 801191e:	2300      	movs	r3, #0
 8011920:	461a      	mov	r2, r3
 8011922:	f810 5b01 	ldrb.w	r5, [r0], #1
 8011926:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 801192a:	4094      	lsls	r4, r2
 801192c:	4323      	orrs	r3, r4
 801192e:	062c      	lsls	r4, r5, #24
 8011930:	f102 0207 	add.w	r2, r2, #7
 8011934:	d4f5      	bmi.n	8011922 <_ZL12read_uleb128PKhPm+0x6>
 8011936:	600b      	str	r3, [r1, #0]
 8011938:	bd30      	pop	{r4, r5, pc}

0801193a <_ZL12read_sleb128PKhPl>:
 801193a:	b530      	push	{r4, r5, lr}
 801193c:	2300      	movs	r3, #0
 801193e:	461a      	mov	r2, r3
 8011940:	f810 4b01 	ldrb.w	r4, [r0], #1
 8011944:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 8011948:	4095      	lsls	r5, r2
 801194a:	432b      	orrs	r3, r5
 801194c:	0625      	lsls	r5, r4, #24
 801194e:	f102 0207 	add.w	r2, r2, #7
 8011952:	d4f5      	bmi.n	8011940 <_ZL12read_sleb128PKhPl+0x6>
 8011954:	2a1f      	cmp	r2, #31
 8011956:	d806      	bhi.n	8011966 <_ZL12read_sleb128PKhPl+0x2c>
 8011958:	0664      	lsls	r4, r4, #25
 801195a:	bf42      	ittt	mi
 801195c:	f04f 34ff 	movmi.w	r4, #4294967295
 8011960:	fa04 f202 	lslmi.w	r2, r4, r2
 8011964:	4313      	orrmi	r3, r2
 8011966:	600b      	str	r3, [r1, #0]
 8011968:	bd30      	pop	{r4, r5, pc}

0801196a <_ZL28read_encoded_value_with_basehjPKhPj>:
 801196a:	2850      	cmp	r0, #80	@ 0x50
 801196c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011970:	4606      	mov	r6, r0
 8011972:	4688      	mov	r8, r1
 8011974:	4615      	mov	r5, r2
 8011976:	461f      	mov	r7, r3
 8011978:	d108      	bne.n	801198c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 801197a:	1cd0      	adds	r0, r2, #3
 801197c:	f020 0003 	bic.w	r0, r0, #3
 8011980:	f850 4b04 	ldr.w	r4, [r0], #4
 8011984:	603c      	str	r4, [r7, #0]
 8011986:	b002      	add	sp, #8
 8011988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801198c:	f000 030f 	and.w	r3, r0, #15
 8011990:	2b0c      	cmp	r3, #12
 8011992:	d82e      	bhi.n	80119f2 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8011994:	e8df f003 	tbb	[pc, r3]
 8011998:	251d0725 	.word	0x251d0725
 801199c:	2d2d2d29 	.word	0x2d2d2d29
 80119a0:	2521182d 	.word	0x2521182d
 80119a4:	29          	.byte	0x29
 80119a5:	00          	.byte	0x00
 80119a6:	a901      	add	r1, sp, #4
 80119a8:	4628      	mov	r0, r5
 80119aa:	f7ff ffb7 	bl	801191c <_ZL12read_uleb128PKhPm>
 80119ae:	9c01      	ldr	r4, [sp, #4]
 80119b0:	2c00      	cmp	r4, #0
 80119b2:	d0e7      	beq.n	8011984 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80119b4:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 80119b8:	2b10      	cmp	r3, #16
 80119ba:	bf08      	it	eq
 80119bc:	46a8      	moveq	r8, r5
 80119be:	4444      	add	r4, r8
 80119c0:	0633      	lsls	r3, r6, #24
 80119c2:	bf48      	it	mi
 80119c4:	6824      	ldrmi	r4, [r4, #0]
 80119c6:	e7dd      	b.n	8011984 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80119c8:	a901      	add	r1, sp, #4
 80119ca:	4628      	mov	r0, r5
 80119cc:	f7ff ffb5 	bl	801193a <_ZL12read_sleb128PKhPl>
 80119d0:	e7ed      	b.n	80119ae <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 80119d2:	4628      	mov	r0, r5
 80119d4:	f830 4b02 	ldrh.w	r4, [r0], #2
 80119d8:	e7ea      	b.n	80119b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80119da:	4628      	mov	r0, r5
 80119dc:	f930 4b02 	ldrsh.w	r4, [r0], #2
 80119e0:	e7e6      	b.n	80119b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80119e2:	4628      	mov	r0, r5
 80119e4:	f850 4b04 	ldr.w	r4, [r0], #4
 80119e8:	e7e2      	b.n	80119b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80119ea:	4628      	mov	r0, r5
 80119ec:	f850 4b08 	ldr.w	r4, [r0], #8
 80119f0:	e7de      	b.n	80119b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80119f2:	f000 fc6b 	bl	80122cc <abort>

080119f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80119f6:	b508      	push	{r3, lr}
 80119f8:	4603      	mov	r3, r0
 80119fa:	2bff      	cmp	r3, #255	@ 0xff
 80119fc:	4608      	mov	r0, r1
 80119fe:	d00d      	beq.n	8011a1c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8011a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a04:	2b30      	cmp	r3, #48	@ 0x30
 8011a06:	d00f      	beq.n	8011a28 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8011a08:	d804      	bhi.n	8011a14 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8011a0a:	2b20      	cmp	r3, #32
 8011a0c:	d008      	beq.n	8011a20 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8011a0e:	d905      	bls.n	8011a1c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8011a10:	f000 fc5c 	bl	80122cc <abort>
 8011a14:	2b40      	cmp	r3, #64	@ 0x40
 8011a16:	d00b      	beq.n	8011a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8011a18:	2b50      	cmp	r3, #80	@ 0x50
 8011a1a:	d1f9      	bne.n	8011a10 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	bd08      	pop	{r3, pc}
 8011a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011a24:	f003 b8ed 	b.w	8014c02 <_Unwind_GetTextRelBase>
 8011a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011a2c:	f003 b8e6 	b.w	8014bfc <_Unwind_GetDataRelBase>
 8011a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011a34:	f7f0 ba2a 	b.w	8001e8c <_Unwind_GetRegionStart>

08011a38 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	460c      	mov	r4, r1
 8011a3c:	4601      	mov	r1, r0
 8011a3e:	4620      	mov	r0, r4
 8011a40:	4615      	mov	r5, r2
 8011a42:	461e      	mov	r6, r3
 8011a44:	f7ff ffd7 	bl	80119f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011a48:	4633      	mov	r3, r6
 8011a4a:	4601      	mov	r1, r0
 8011a4c:	462a      	mov	r2, r5
 8011a4e:	4620      	mov	r0, r4
 8011a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a54:	f7ff bf89 	b.w	801196a <_ZL28read_encoded_value_with_basehjPKhPj>

08011a58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8011a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a5a:	460c      	mov	r4, r1
 8011a5c:	4615      	mov	r5, r2
 8011a5e:	4606      	mov	r6, r0
 8011a60:	b108      	cbz	r0, 8011a66 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8011a62:	f7f0 fa13 	bl	8001e8c <_Unwind_GetRegionStart>
 8011a66:	4622      	mov	r2, r4
 8011a68:	6028      	str	r0, [r5, #0]
 8011a6a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011a6e:	29ff      	cmp	r1, #255	@ 0xff
 8011a70:	d01c      	beq.n	8011aac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8011a72:	1d2b      	adds	r3, r5, #4
 8011a74:	4630      	mov	r0, r6
 8011a76:	f7ff ffdf 	bl	8011a38 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	4610      	mov	r0, r2
 8011a7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a82:	2bff      	cmp	r3, #255	@ 0xff
 8011a84:	d014      	beq.n	8011ab0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8011a86:	2310      	movs	r3, #16
 8011a88:	752b      	strb	r3, [r5, #20]
 8011a8a:	a901      	add	r1, sp, #4
 8011a8c:	f7ff ff46 	bl	801191c <_ZL12read_uleb128PKhPm>
 8011a90:	9b01      	ldr	r3, [sp, #4]
 8011a92:	4403      	add	r3, r0
 8011a94:	60eb      	str	r3, [r5, #12]
 8011a96:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a9a:	756b      	strb	r3, [r5, #21]
 8011a9c:	a901      	add	r1, sp, #4
 8011a9e:	f7ff ff3d 	bl	801191c <_ZL12read_uleb128PKhPm>
 8011aa2:	9b01      	ldr	r3, [sp, #4]
 8011aa4:	4403      	add	r3, r0
 8011aa6:	612b      	str	r3, [r5, #16]
 8011aa8:	b002      	add	sp, #8
 8011aaa:	bd70      	pop	{r4, r5, r6, pc}
 8011aac:	6068      	str	r0, [r5, #4]
 8011aae:	e7e5      	b.n	8011a7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8011ab0:	752b      	strb	r3, [r5, #20]
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	e7ee      	b.n	8011a94 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

08011ab6 <_Unwind_GetGR>:
 8011ab6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ab8:	ab03      	add	r3, sp, #12
 8011aba:	9300      	str	r3, [sp, #0]
 8011abc:	2300      	movs	r3, #0
 8011abe:	460a      	mov	r2, r1
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	f7ef fc2f 	bl	8001324 <_Unwind_VRS_Get>
 8011ac6:	9803      	ldr	r0, [sp, #12]
 8011ac8:	b005      	add	sp, #20
 8011aca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011ad0 <__gxx_personality_v0>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	b093      	sub	sp, #76	@ 0x4c
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	9307      	str	r3, [sp, #28]
 8011ada:	f000 0303 	and.w	r3, r0, #3
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	4605      	mov	r5, r0
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	4616      	mov	r6, r2
 8011ae6:	d010      	beq.n	8011b0a <__gxx_personality_v0+0x3a>
 8011ae8:	2b02      	cmp	r3, #2
 8011aea:	d003      	beq.n	8011af4 <__gxx_personality_v0+0x24>
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d13b      	bne.n	8011b68 <__gxx_personality_v0+0x98>
 8011af0:	0701      	lsls	r1, r0, #28
 8011af2:	d53b      	bpl.n	8011b6c <__gxx_personality_v0+0x9c>
 8011af4:	4631      	mov	r1, r6
 8011af6:	4620      	mov	r0, r4
 8011af8:	f7f0 f9b2 	bl	8001e60 <__gnu_unwind_frame>
 8011afc:	b118      	cbz	r0, 8011b06 <__gxx_personality_v0+0x36>
 8011afe:	2009      	movs	r0, #9
 8011b00:	b013      	add	sp, #76	@ 0x4c
 8011b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b06:	2008      	movs	r0, #8
 8011b08:	e7fa      	b.n	8011b00 <__gxx_personality_v0+0x30>
 8011b0a:	0702      	lsls	r2, r0, #28
 8011b0c:	d523      	bpl.n	8011b56 <__gxx_personality_v0+0x86>
 8011b0e:	2302      	movs	r3, #2
 8011b10:	f005 0508 	and.w	r5, r5, #8
 8011b14:	431d      	orrs	r5, r3
 8011b16:	ab0c      	add	r3, sp, #48	@ 0x30
 8011b18:	9300      	str	r3, [sp, #0]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	220c      	movs	r2, #12
 8011b1e:	4619      	mov	r1, r3
 8011b20:	4630      	mov	r0, r6
 8011b22:	940c      	str	r4, [sp, #48]	@ 0x30
 8011b24:	f7ef fc24 	bl	8001370 <_Unwind_VRS_Set>
 8011b28:	2d06      	cmp	r5, #6
 8011b2a:	d121      	bne.n	8011b70 <__gxx_personality_v0+0xa0>
 8011b2c:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 8011b30:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 8011b34:	f1b8 0f00 	cmp.w	r8, #0
 8011b38:	bf0c      	ite	eq
 8011b3a:	f04f 0a01 	moveq.w	sl, #1
 8011b3e:	f04f 0a03 	movne.w	sl, #3
 8011b42:	f015 0508 	ands.w	r5, r5, #8
 8011b46:	f000 8103 	beq.w	8011d50 <__gxx_personality_v0+0x280>
 8011b4a:	f1ba 0f01 	cmp.w	sl, #1
 8011b4e:	f040 80fb 	bne.w	8011d48 <__gxx_personality_v0+0x278>
 8011b52:	f000 f95b 	bl	8011e0c <_ZSt9terminatev>
 8011b56:	6a0f      	ldr	r7, [r1, #32]
 8011b58:	4630      	mov	r0, r6
 8011b5a:	210d      	movs	r1, #13
 8011b5c:	f7ff ffab 	bl	8011ab6 <_Unwind_GetGR>
 8011b60:	4287      	cmp	r7, r0
 8011b62:	d1d4      	bne.n	8011b0e <__gxx_personality_v0+0x3e>
 8011b64:	2306      	movs	r3, #6
 8011b66:	e7d3      	b.n	8011b10 <__gxx_personality_v0+0x40>
 8011b68:	f000 fbb0 	bl	80122cc <abort>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e7cf      	b.n	8011b10 <__gxx_personality_v0+0x40>
 8011b70:	4630      	mov	r0, r6
 8011b72:	f7f0 f991 	bl	8001e98 <_Unwind_GetLanguageSpecificData>
 8011b76:	4681      	mov	r9, r0
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d0bb      	beq.n	8011af4 <__gxx_personality_v0+0x24>
 8011b7c:	aa0c      	add	r2, sp, #48	@ 0x30
 8011b7e:	4601      	mov	r1, r0
 8011b80:	4630      	mov	r0, r6
 8011b82:	f7ff ff69 	bl	8011a58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8011b86:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 8011b8a:	9003      	str	r0, [sp, #12]
 8011b8c:	4631      	mov	r1, r6
 8011b8e:	4658      	mov	r0, fp
 8011b90:	f7ff ff31 	bl	80119f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011b94:	210f      	movs	r1, #15
 8011b96:	9002      	str	r0, [sp, #8]
 8011b98:	900e      	str	r0, [sp, #56]	@ 0x38
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	f7ff ff8b 	bl	8011ab6 <_Unwind_GetGR>
 8011ba0:	9a03      	ldr	r2, [sp, #12]
 8011ba2:	f020 0801 	bic.w	r8, r0, #1
 8011ba6:	f108 38ff 	add.w	r8, r8, #4294967295
 8011baa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8011bac:	4297      	cmp	r7, r2
 8011bae:	d815      	bhi.n	8011bdc <__gxx_personality_v0+0x10c>
 8011bb0:	2700      	movs	r7, #0
 8011bb2:	46b8      	mov	r8, r7
 8011bb4:	f04f 0a01 	mov.w	sl, #1
 8011bb8:	07eb      	lsls	r3, r5, #31
 8011bba:	d5c2      	bpl.n	8011b42 <__gxx_personality_v0+0x72>
 8011bbc:	f1ba 0f02 	cmp.w	sl, #2
 8011bc0:	d098      	beq.n	8011af4 <__gxx_personality_v0+0x24>
 8011bc2:	210d      	movs	r1, #13
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	9d07      	ldr	r5, [sp, #28]
 8011bc8:	f7ff ff75 	bl	8011ab6 <_Unwind_GetGR>
 8011bcc:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 8011bd0:	e9c4 0508 	strd	r0, r5, [r4, #32]
 8011bd4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8011bd8:	2006      	movs	r0, #6
 8011bda:	e791      	b.n	8011b00 <__gxx_personality_v0+0x30>
 8011bdc:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 8011be0:	ab08      	add	r3, sp, #32
 8011be2:	4651      	mov	r1, sl
 8011be4:	2000      	movs	r0, #0
 8011be6:	f7ff ff27 	bl	8011a38 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011bea:	ab09      	add	r3, sp, #36	@ 0x24
 8011bec:	4602      	mov	r2, r0
 8011bee:	4651      	mov	r1, sl
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	f7ff ff21 	bl	8011a38 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011bf6:	ab0a      	add	r3, sp, #40	@ 0x28
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	4651      	mov	r1, sl
 8011bfc:	2000      	movs	r0, #0
 8011bfe:	f7ff ff1b 	bl	8011a38 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8011c02:	a90b      	add	r1, sp, #44	@ 0x2c
 8011c04:	f7ff fe8a 	bl	801191c <_ZL12read_uleb128PKhPm>
 8011c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c0a:	9908      	ldr	r1, [sp, #32]
 8011c0c:	440b      	add	r3, r1
 8011c0e:	4543      	cmp	r3, r8
 8011c10:	4602      	mov	r2, r0
 8011c12:	d84b      	bhi.n	8011cac <__gxx_personality_v0+0x1dc>
 8011c14:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c16:	440b      	add	r3, r1
 8011c18:	4543      	cmp	r3, r8
 8011c1a:	d9c6      	bls.n	8011baa <__gxx_personality_v0+0xda>
 8011c1c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8011c20:	f1b8 0f00 	cmp.w	r8, #0
 8011c24:	d001      	beq.n	8011c2a <__gxx_personality_v0+0x15a>
 8011c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c28:	4498      	add	r8, r3
 8011c2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011c2c:	b108      	cbz	r0, 8011c32 <__gxx_personality_v0+0x162>
 8011c2e:	3801      	subs	r0, #1
 8011c30:	4438      	add	r0, r7
 8011c32:	f1b8 0f00 	cmp.w	r8, #0
 8011c36:	f43f af5d 	beq.w	8011af4 <__gxx_personality_v0+0x24>
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	f000 80d6 	beq.w	8011dec <__gxx_personality_v0+0x31c>
 8011c40:	f015 0308 	ands.w	r3, r5, #8
 8011c44:	9304      	str	r3, [sp, #16]
 8011c46:	d033      	beq.n	8011cb0 <__gxx_personality_v0+0x1e0>
 8011c48:	2347      	movs	r3, #71	@ 0x47
 8011c4a:	7023      	strb	r3, [r4, #0]
 8011c4c:	234e      	movs	r3, #78	@ 0x4e
 8011c4e:	7063      	strb	r3, [r4, #1]
 8011c50:	2355      	movs	r3, #85	@ 0x55
 8011c52:	70a3      	strb	r3, [r4, #2]
 8011c54:	2343      	movs	r3, #67	@ 0x43
 8011c56:	70e3      	strb	r3, [r4, #3]
 8011c58:	2346      	movs	r3, #70	@ 0x46
 8011c5a:	7123      	strb	r3, [r4, #4]
 8011c5c:	234f      	movs	r3, #79	@ 0x4f
 8011c5e:	7163      	strb	r3, [r4, #5]
 8011c60:	2352      	movs	r3, #82	@ 0x52
 8011c62:	71a3      	strb	r3, [r4, #6]
 8011c64:	2300      	movs	r3, #0
 8011c66:	71e3      	strb	r3, [r4, #7]
 8011c68:	2300      	movs	r3, #0
 8011c6a:	9303      	str	r3, [sp, #12]
 8011c6c:	a909      	add	r1, sp, #36	@ 0x24
 8011c6e:	f7ff fe64 	bl	801193a <_ZL12read_sleb128PKhPl>
 8011c72:	a90a      	add	r1, sp, #40	@ 0x28
 8011c74:	9005      	str	r0, [sp, #20]
 8011c76:	f7ff fe60 	bl	801193a <_ZL12read_sleb128PKhPl>
 8011c7a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8011c7c:	2f00      	cmp	r7, #0
 8011c7e:	d060      	beq.n	8011d42 <__gxx_personality_v0+0x272>
 8011c80:	dd3a      	ble.n	8011cf8 <__gxx_personality_v0+0x228>
 8011c82:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8011c86:	d033      	beq.n	8011cf0 <__gxx_personality_v0+0x220>
 8011c88:	f00b 0307 	and.w	r3, fp, #7
 8011c8c:	2b04      	cmp	r3, #4
 8011c8e:	f63f af6b 	bhi.w	8011b68 <__gxx_personality_v0+0x98>
 8011c92:	a201      	add	r2, pc, #4	@ (adr r2, 8011c98 <__gxx_personality_v0+0x1c8>)
 8011c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c98:	08011cf5 	.word	0x08011cf5
 8011c9c:	08011b69 	.word	0x08011b69
 8011ca0:	08011cc3 	.word	0x08011cc3
 8011ca4:	08011cf5 	.word	0x08011cf5
 8011ca8:	08011ced 	.word	0x08011ced
 8011cac:	463a      	mov	r2, r7
 8011cae:	e77c      	b.n	8011baa <__gxx_personality_v0+0xda>
 8011cb0:	79e3      	ldrb	r3, [r4, #7]
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	bf0c      	ite	eq
 8011cb6:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8011cba:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 8011cbe:	9307      	str	r3, [sp, #28]
 8011cc0:	e7d2      	b.n	8011c68 <__gxx_personality_v0+0x198>
 8011cc2:	2202      	movs	r2, #2
 8011cc4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011cc6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011cc8:	fb07 1212 	mls	r2, r7, r2, r1
 8011ccc:	4658      	mov	r0, fp
 8011cce:	9902      	ldr	r1, [sp, #8]
 8011cd0:	f7ff fe4b 	bl	801196a <_ZL28read_encoded_value_with_basehjPKhPj>
 8011cd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011cd6:	b131      	cbz	r1, 8011ce6 <__gxx_personality_v0+0x216>
 8011cd8:	b33c      	cbz	r4, 8011d2a <__gxx_personality_v0+0x25a>
 8011cda:	ab07      	add	r3, sp, #28
 8011cdc:	2200      	movs	r2, #0
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f7ff fd76 	bl	80117d0 <__cxa_type_match>
 8011ce4:	b308      	cbz	r0, 8011d2a <__gxx_personality_v0+0x25a>
 8011ce6:	f04f 0a03 	mov.w	sl, #3
 8011cea:	e765      	b.n	8011bb8 <__gxx_personality_v0+0xe8>
 8011cec:	2208      	movs	r2, #8
 8011cee:	e7e9      	b.n	8011cc4 <__gxx_personality_v0+0x1f4>
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	e7e7      	b.n	8011cc4 <__gxx_personality_v0+0x1f4>
 8011cf4:	2204      	movs	r2, #4
 8011cf6:	e7e5      	b.n	8011cc4 <__gxx_personality_v0+0x1f4>
 8011cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cfa:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8011cfe:	1bd2      	subs	r2, r2, r7
 8011d00:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8011d04:	b1c4      	cbz	r4, 8011d38 <__gxx_personality_v0+0x268>
 8011d06:	9904      	ldr	r1, [sp, #16]
 8011d08:	b9b1      	cbnz	r1, 8011d38 <__gxx_personality_v0+0x268>
 8011d0a:	9b07      	ldr	r3, [sp, #28]
 8011d0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d0e:	f1aa 0a04 	sub.w	sl, sl, #4
 8011d12:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8011d16:	2900      	cmp	r1, #0
 8011d18:	d0e5      	beq.n	8011ce6 <__gxx_personality_v0+0x216>
 8011d1a:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	4451      	add	r1, sl
 8011d20:	4620      	mov	r0, r4
 8011d22:	f7ff fd55 	bl	80117d0 <__cxa_type_match>
 8011d26:	2800      	cmp	r0, #0
 8011d28:	d0f3      	beq.n	8011d12 <__gxx_personality_v0+0x242>
 8011d2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	d059      	beq.n	8011de4 <__gxx_personality_v0+0x314>
 8011d30:	9b05      	ldr	r3, [sp, #20]
 8011d32:	4403      	add	r3, r0
 8011d34:	4618      	mov	r0, r3
 8011d36:	e799      	b.n	8011c6c <__gxx_personality_v0+0x19c>
 8011d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d1f4      	bne.n	8011d2a <__gxx_personality_v0+0x25a>
 8011d40:	e7d1      	b.n	8011ce6 <__gxx_personality_v0+0x216>
 8011d42:	2301      	movs	r3, #1
 8011d44:	9303      	str	r3, [sp, #12]
 8011d46:	e7f0      	b.n	8011d2a <__gxx_personality_v0+0x25a>
 8011d48:	2f00      	cmp	r7, #0
 8011d4a:	da1f      	bge.n	8011d8c <__gxx_personality_v0+0x2bc>
 8011d4c:	f000 f870 	bl	8011e30 <_ZSt10unexpectedv>
 8011d50:	f1ba 0f01 	cmp.w	sl, #1
 8011d54:	d102      	bne.n	8011d5c <__gxx_personality_v0+0x28c>
 8011d56:	4620      	mov	r0, r4
 8011d58:	f000 f940 	bl	8011fdc <__cxa_call_terminate>
 8011d5c:	2f00      	cmp	r7, #0
 8011d5e:	da15      	bge.n	8011d8c <__gxx_personality_v0+0x2bc>
 8011d60:	aa0c      	add	r2, sp, #48	@ 0x30
 8011d62:	4649      	mov	r1, r9
 8011d64:	4630      	mov	r0, r6
 8011d66:	f7ff fe77 	bl	8011a58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8011d6a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011d6e:	4631      	mov	r1, r6
 8011d70:	f7ff fe41 	bl	80119f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d76:	43fa      	mvns	r2, r7
 8011d78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011d7c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8011d80:	bb52      	cbnz	r2, 8011dd8 <__gxx_personality_v0+0x308>
 8011d82:	2204      	movs	r2, #4
 8011d84:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 8011d88:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8011d90:	461a      	mov	r2, r3
 8011d92:	4619      	mov	r1, r3
 8011d94:	9500      	str	r5, [sp, #0]
 8011d96:	4630      	mov	r0, r6
 8011d98:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011d9a:	f7ef fae9 	bl	8001370 <_Unwind_VRS_Set>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	4619      	mov	r1, r3
 8011da2:	2201      	movs	r2, #1
 8011da4:	9500      	str	r5, [sp, #0]
 8011da6:	4630      	mov	r0, r6
 8011da8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011daa:	f7ef fae1 	bl	8001370 <_Unwind_VRS_Set>
 8011dae:	210f      	movs	r1, #15
 8011db0:	4630      	mov	r0, r6
 8011db2:	f7ff fe80 	bl	8011ab6 <_Unwind_GetGR>
 8011db6:	f000 0001 	and.w	r0, r0, #1
 8011dba:	ea40 0008 	orr.w	r0, r0, r8
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011dc2:	9500      	str	r5, [sp, #0]
 8011dc4:	220f      	movs	r2, #15
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	4630      	mov	r0, r6
 8011dca:	f7ef fad1 	bl	8001370 <_Unwind_VRS_Set>
 8011dce:	f1ba 0f02 	cmp.w	sl, #2
 8011dd2:	d003      	beq.n	8011ddc <__gxx_personality_v0+0x30c>
 8011dd4:	2007      	movs	r0, #7
 8011dd6:	e693      	b.n	8011b00 <__gxx_personality_v0+0x30>
 8011dd8:	3501      	adds	r5, #1
 8011dda:	e7cf      	b.n	8011d7c <__gxx_personality_v0+0x2ac>
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f7ff fd55 	bl	801188c <__cxa_begin_cleanup>
 8011de2:	e7f7      	b.n	8011dd4 <__gxx_personality_v0+0x304>
 8011de4:	9b03      	ldr	r3, [sp, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	f43f ae84 	beq.w	8011af4 <__gxx_personality_v0+0x24>
 8011dec:	2700      	movs	r7, #0
 8011dee:	f04f 0a02 	mov.w	sl, #2
 8011df2:	e6e1      	b.n	8011bb8 <__gxx_personality_v0+0xe8>

08011df4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011df4:	b508      	push	{r3, lr}
 8011df6:	4780      	blx	r0
 8011df8:	f000 fa68 	bl	80122cc <abort>

08011dfc <_ZSt13get_terminatev>:
 8011dfc:	4b02      	ldr	r3, [pc, #8]	@ (8011e08 <_ZSt13get_terminatev+0xc>)
 8011dfe:	6818      	ldr	r0, [r3, #0]
 8011e00:	f3bf 8f5b 	dmb	ish
 8011e04:	4770      	bx	lr
 8011e06:	bf00      	nop
 8011e08:	20000014 	.word	0x20000014

08011e0c <_ZSt9terminatev>:
 8011e0c:	b508      	push	{r3, lr}
 8011e0e:	f7ff fff5 	bl	8011dfc <_ZSt13get_terminatev>
 8011e12:	f7ff ffef 	bl	8011df4 <_ZN10__cxxabiv111__terminateEPFvvE>

08011e16 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8011e16:	b508      	push	{r3, lr}
 8011e18:	4780      	blx	r0
 8011e1a:	f7ff fff7 	bl	8011e0c <_ZSt9terminatev>
	...

08011e20 <_ZSt14get_unexpectedv>:
 8011e20:	4b02      	ldr	r3, [pc, #8]	@ (8011e2c <_ZSt14get_unexpectedv+0xc>)
 8011e22:	6818      	ldr	r0, [r3, #0]
 8011e24:	f3bf 8f5b 	dmb	ish
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	20000010 	.word	0x20000010

08011e30 <_ZSt10unexpectedv>:
 8011e30:	b508      	push	{r3, lr}
 8011e32:	f7ff fff5 	bl	8011e20 <_ZSt14get_unexpectedv>
 8011e36:	f7ff ffee 	bl	8011e16 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08011e3a <_Znwj>:
 8011e3a:	2801      	cmp	r0, #1
 8011e3c:	bf38      	it	cc
 8011e3e:	2001      	movcc	r0, #1
 8011e40:	b510      	push	{r4, lr}
 8011e42:	4604      	mov	r4, r0
 8011e44:	4620      	mov	r0, r4
 8011e46:	f000 fa49 	bl	80122dc <malloc>
 8011e4a:	b100      	cbz	r0, 8011e4e <_Znwj+0x14>
 8011e4c:	bd10      	pop	{r4, pc}
 8011e4e:	f000 f92f 	bl	80120b0 <_ZSt15get_new_handlerv>
 8011e52:	b908      	cbnz	r0, 8011e58 <_Znwj+0x1e>
 8011e54:	f000 fa3a 	bl	80122cc <abort>
 8011e58:	4780      	blx	r0
 8011e5a:	e7f3      	b.n	8011e44 <_Znwj+0xa>

08011e5c <_Znaj>:
 8011e5c:	f7ff bfed 	b.w	8011e3a <_Znwj>

08011e60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8011e60:	b510      	push	{r4, lr}
 8011e62:	4b03      	ldr	r3, [pc, #12]	@ (8011e70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8011e64:	6003      	str	r3, [r0, #0]
 8011e66:	4604      	mov	r4, r0
 8011e68:	f7ff fc38 	bl	80116dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	bd10      	pop	{r4, pc}
 8011e70:	0801615c 	.word	0x0801615c

08011e74 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8011e74:	b510      	push	{r4, lr}
 8011e76:	4604      	mov	r4, r0
 8011e78:	f7ff fff2 	bl	8011e60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	210c      	movs	r1, #12
 8011e80:	f7ff fc80 	bl	8011784 <_ZdlPvj>
 8011e84:	4620      	mov	r0, r4
 8011e86:	bd10      	pop	{r4, pc}

08011e88 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8011e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e8c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011e90:	4590      	cmp	r8, r2
 8011e92:	4606      	mov	r6, r0
 8011e94:	460f      	mov	r7, r1
 8011e96:	4615      	mov	r5, r2
 8011e98:	461c      	mov	r4, r3
 8011e9a:	d00b      	beq.n	8011eb4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8011e9c:	68b0      	ldr	r0, [r6, #8]
 8011e9e:	6803      	ldr	r3, [r0, #0]
 8011ea0:	f8cd 8018 	str.w	r8, [sp, #24]
 8011ea4:	6a1e      	ldr	r6, [r3, #32]
 8011ea6:	462a      	mov	r2, r5
 8011ea8:	4623      	mov	r3, r4
 8011eaa:	4639      	mov	r1, r7
 8011eac:	46b4      	mov	ip, r6
 8011eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb2:	4760      	bx	ip
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	f000 f857 	bl	8011f68 <_ZNKSt9type_info7__equalERKS_>
 8011eba:	2800      	cmp	r0, #0
 8011ebc:	d0ee      	beq.n	8011e9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8011ebe:	2006      	movs	r0, #6
 8011ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ec4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8011ec4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec8:	460d      	mov	r5, r1
 8011eca:	4619      	mov	r1, r3
 8011ecc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8011ed0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8011ed4:	4681      	mov	r9, r0
 8011ed6:	4617      	mov	r7, r2
 8011ed8:	4698      	mov	r8, r3
 8011eda:	f000 f845 	bl	8011f68 <_ZNKSt9type_info7__equalERKS_>
 8011ede:	b190      	cbz	r0, 8011f06 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8011ee0:	2d00      	cmp	r5, #0
 8011ee2:	6034      	str	r4, [r6, #0]
 8011ee4:	7137      	strb	r7, [r6, #4]
 8011ee6:	db09      	blt.n	8011efc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8011ee8:	442c      	add	r4, r5
 8011eea:	45a2      	cmp	sl, r4
 8011eec:	bf14      	ite	ne
 8011eee:	2401      	movne	r4, #1
 8011ef0:	2406      	moveq	r4, #6
 8011ef2:	71b4      	strb	r4, [r6, #6]
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	b001      	add	sp, #4
 8011ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011efc:	3502      	adds	r5, #2
 8011efe:	d1f9      	bne.n	8011ef4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8011f00:	2301      	movs	r3, #1
 8011f02:	71b3      	strb	r3, [r6, #6]
 8011f04:	e7f6      	b.n	8011ef4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8011f06:	4554      	cmp	r4, sl
 8011f08:	d106      	bne.n	8011f18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8011f0a:	4659      	mov	r1, fp
 8011f0c:	4648      	mov	r0, r9
 8011f0e:	f000 f82b 	bl	8011f68 <_ZNKSt9type_info7__equalERKS_>
 8011f12:	b108      	cbz	r0, 8011f18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8011f14:	7177      	strb	r7, [r6, #5]
 8011f16:	e7ed      	b.n	8011ef4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8011f18:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8011f1c:	6803      	ldr	r3, [r0, #0]
 8011f1e:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8011f22:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8011f26:	69dc      	ldr	r4, [r3, #28]
 8011f28:	463a      	mov	r2, r7
 8011f2a:	4643      	mov	r3, r8
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	46a4      	mov	ip, r4
 8011f30:	b001      	add	sp, #4
 8011f32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f36:	4760      	bx	ip

08011f38 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8011f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f3c:	4607      	mov	r7, r0
 8011f3e:	460c      	mov	r4, r1
 8011f40:	4615      	mov	r5, r2
 8011f42:	461e      	mov	r6, r3
 8011f44:	f7ff fbfd 	bl	8011742 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8011f48:	b948      	cbnz	r0, 8011f5e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8011f4a:	68b8      	ldr	r0, [r7, #8]
 8011f4c:	6803      	ldr	r3, [r0, #0]
 8011f4e:	699f      	ldr	r7, [r3, #24]
 8011f50:	462a      	mov	r2, r5
 8011f52:	4633      	mov	r3, r6
 8011f54:	4621      	mov	r1, r4
 8011f56:	46bc      	mov	ip, r7
 8011f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f5c:	4760      	bx	ip
 8011f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f62 <_ZNSt9type_infoD1Ev>:
 8011f62:	4770      	bx	lr

08011f64 <_ZNKSt9type_info14__is_pointer_pEv>:
 8011f64:	2000      	movs	r0, #0
 8011f66:	4770      	bx	lr

08011f68 <_ZNKSt9type_info7__equalERKS_>:
 8011f68:	4281      	cmp	r1, r0
 8011f6a:	b508      	push	{r3, lr}
 8011f6c:	d00e      	beq.n	8011f8c <_ZNKSt9type_info7__equalERKS_+0x24>
 8011f6e:	6840      	ldr	r0, [r0, #4]
 8011f70:	7803      	ldrb	r3, [r0, #0]
 8011f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f74:	d00c      	beq.n	8011f90 <_ZNKSt9type_info7__equalERKS_+0x28>
 8011f76:	6849      	ldr	r1, [r1, #4]
 8011f78:	780b      	ldrb	r3, [r1, #0]
 8011f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f7c:	bf08      	it	eq
 8011f7e:	3101      	addeq	r1, #1
 8011f80:	f7ee f946 	bl	8000210 <strcmp>
 8011f84:	fab0 f080 	clz	r0, r0
 8011f88:	0940      	lsrs	r0, r0, #5
 8011f8a:	bd08      	pop	{r3, pc}
 8011f8c:	2001      	movs	r0, #1
 8011f8e:	e7fc      	b.n	8011f8a <_ZNKSt9type_info7__equalERKS_+0x22>
 8011f90:	2000      	movs	r0, #0
 8011f92:	e7fa      	b.n	8011f8a <_ZNKSt9type_info7__equalERKS_+0x22>

08011f94 <__aeabi_atexit>:
 8011f94:	460b      	mov	r3, r1
 8011f96:	4601      	mov	r1, r0
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f000 ba5d 	b.w	8012458 <__cxa_atexit>

08011f9e <_ZdlPv>:
 8011f9e:	f000 b9a5 	b.w	80122ec <free>

08011fa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8011fa2:	7803      	ldrb	r3, [r0, #0]
 8011fa4:	2b47      	cmp	r3, #71	@ 0x47
 8011fa6:	d117      	bne.n	8011fd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011fa8:	7843      	ldrb	r3, [r0, #1]
 8011faa:	2b4e      	cmp	r3, #78	@ 0x4e
 8011fac:	d114      	bne.n	8011fd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011fae:	7883      	ldrb	r3, [r0, #2]
 8011fb0:	2b55      	cmp	r3, #85	@ 0x55
 8011fb2:	d111      	bne.n	8011fd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011fb4:	78c3      	ldrb	r3, [r0, #3]
 8011fb6:	2b43      	cmp	r3, #67	@ 0x43
 8011fb8:	d10e      	bne.n	8011fd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011fba:	7903      	ldrb	r3, [r0, #4]
 8011fbc:	2b43      	cmp	r3, #67	@ 0x43
 8011fbe:	d10b      	bne.n	8011fd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011fc0:	7943      	ldrb	r3, [r0, #5]
 8011fc2:	2b2b      	cmp	r3, #43	@ 0x2b
 8011fc4:	d108      	bne.n	8011fd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011fc6:	7983      	ldrb	r3, [r0, #6]
 8011fc8:	2b2b      	cmp	r3, #43	@ 0x2b
 8011fca:	d105      	bne.n	8011fd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011fcc:	79c0      	ldrb	r0, [r0, #7]
 8011fce:	2801      	cmp	r0, #1
 8011fd0:	bf8c      	ite	hi
 8011fd2:	2000      	movhi	r0, #0
 8011fd4:	2001      	movls	r0, #1
 8011fd6:	4770      	bx	lr
 8011fd8:	2000      	movs	r0, #0
 8011fda:	4770      	bx	lr

08011fdc <__cxa_call_terminate>:
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	4604      	mov	r4, r0
 8011fe0:	b148      	cbz	r0, 8011ff6 <__cxa_call_terminate+0x1a>
 8011fe2:	f000 f83b 	bl	801205c <__cxa_begin_catch>
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f7ff ffdb 	bl	8011fa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011fec:	b118      	cbz	r0, 8011ff6 <__cxa_call_terminate+0x1a>
 8011fee:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8011ff2:	f7ff feff 	bl	8011df4 <_ZN10__cxxabiv111__terminateEPFvvE>
 8011ff6:	f7ff ff09 	bl	8011e0c <_ZSt9terminatev>

08011ffa <__cxa_call_unexpected>:
 8011ffa:	b538      	push	{r3, r4, r5, lr}
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	f7ff ffd0 	bl	8011fa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012002:	4604      	mov	r4, r0
 8012004:	b140      	cbz	r0, 8012018 <__cxa_call_unexpected+0x1e>
 8012006:	f852 4c18 	ldr.w	r4, [r2, #-24]
 801200a:	2500      	movs	r5, #0
 801200c:	4610      	mov	r0, r2
 801200e:	f000 f825 	bl	801205c <__cxa_begin_catch>
 8012012:	b11d      	cbz	r5, 801201c <__cxa_call_unexpected+0x22>
 8012014:	f7ff ff0c 	bl	8011e30 <_ZSt10unexpectedv>
 8012018:	2501      	movs	r5, #1
 801201a:	e7f7      	b.n	801200c <__cxa_call_unexpected+0x12>
 801201c:	4620      	mov	r0, r4
 801201e:	f7ff fefa 	bl	8011e16 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08012022 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012022:	7803      	ldrb	r3, [r0, #0]
 8012024:	2b47      	cmp	r3, #71	@ 0x47
 8012026:	d117      	bne.n	8012058 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012028:	7843      	ldrb	r3, [r0, #1]
 801202a:	2b4e      	cmp	r3, #78	@ 0x4e
 801202c:	d114      	bne.n	8012058 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801202e:	7883      	ldrb	r3, [r0, #2]
 8012030:	2b55      	cmp	r3, #85	@ 0x55
 8012032:	d111      	bne.n	8012058 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012034:	78c3      	ldrb	r3, [r0, #3]
 8012036:	2b43      	cmp	r3, #67	@ 0x43
 8012038:	d10e      	bne.n	8012058 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801203a:	7903      	ldrb	r3, [r0, #4]
 801203c:	2b43      	cmp	r3, #67	@ 0x43
 801203e:	d10b      	bne.n	8012058 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012040:	7943      	ldrb	r3, [r0, #5]
 8012042:	2b2b      	cmp	r3, #43	@ 0x2b
 8012044:	d108      	bne.n	8012058 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012046:	7983      	ldrb	r3, [r0, #6]
 8012048:	2b2b      	cmp	r3, #43	@ 0x2b
 801204a:	d105      	bne.n	8012058 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801204c:	79c0      	ldrb	r0, [r0, #7]
 801204e:	2801      	cmp	r0, #1
 8012050:	bf8c      	ite	hi
 8012052:	2000      	movhi	r0, #0
 8012054:	2001      	movls	r0, #1
 8012056:	4770      	bx	lr
 8012058:	2000      	movs	r0, #0
 801205a:	4770      	bx	lr

0801205c <__cxa_begin_catch>:
 801205c:	b538      	push	{r3, r4, r5, lr}
 801205e:	4604      	mov	r4, r0
 8012060:	f7ff fc4c 	bl	80118fc <__cxa_get_globals>
 8012064:	6805      	ldr	r5, [r0, #0]
 8012066:	4602      	mov	r2, r0
 8012068:	4620      	mov	r0, r4
 801206a:	f1a4 0120 	sub.w	r1, r4, #32
 801206e:	f7ff ffd8 	bl	8012022 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012072:	b928      	cbnz	r0, 8012080 <__cxa_begin_catch+0x24>
 8012074:	b10d      	cbz	r5, 801207a <__cxa_begin_catch+0x1e>
 8012076:	f7ff fec9 	bl	8011e0c <_ZSt9terminatev>
 801207a:	6011      	str	r1, [r2, #0]
 801207c:	4628      	mov	r0, r5
 801207e:	bd38      	pop	{r3, r4, r5, pc}
 8012080:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8012084:	2b00      	cmp	r3, #0
 8012086:	bfb4      	ite	lt
 8012088:	f1c3 0301 	rsblt	r3, r3, #1
 801208c:	3301      	addge	r3, #1
 801208e:	f844 3c0c 	str.w	r3, [r4, #-12]
 8012092:	6853      	ldr	r3, [r2, #4]
 8012094:	428d      	cmp	r5, r1
 8012096:	f103 33ff 	add.w	r3, r3, #4294967295
 801209a:	6053      	str	r3, [r2, #4]
 801209c:	4620      	mov	r0, r4
 801209e:	bf1c      	itt	ne
 80120a0:	f844 5c10 	strne.w	r5, [r4, #-16]
 80120a4:	6011      	strne	r1, [r2, #0]
 80120a6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80120a8:	f7ef f934 	bl	8001314 <_Unwind_Complete>
 80120ac:	e7e6      	b.n	801207c <__cxa_begin_catch+0x20>
	...

080120b0 <_ZSt15get_new_handlerv>:
 80120b0:	4b02      	ldr	r3, [pc, #8]	@ (80120bc <_ZSt15get_new_handlerv+0xc>)
 80120b2:	6818      	ldr	r0, [r3, #0]
 80120b4:	f3bf 8f5b 	dmb	ish
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop
 80120bc:	20000568 	.word	0x20000568

080120c0 <sqrt>:
 80120c0:	b538      	push	{r3, r4, r5, lr}
 80120c2:	ed2d 8b02 	vpush	{d8}
 80120c6:	ec55 4b10 	vmov	r4, r5, d0
 80120ca:	f000 f825 	bl	8012118 <__ieee754_sqrt>
 80120ce:	4622      	mov	r2, r4
 80120d0:	462b      	mov	r3, r5
 80120d2:	4620      	mov	r0, r4
 80120d4:	4629      	mov	r1, r5
 80120d6:	eeb0 8a40 	vmov.f32	s16, s0
 80120da:	eef0 8a60 	vmov.f32	s17, s1
 80120de:	f7ee fd55 	bl	8000b8c <__aeabi_dcmpun>
 80120e2:	b990      	cbnz	r0, 801210a <sqrt+0x4a>
 80120e4:	2200      	movs	r2, #0
 80120e6:	2300      	movs	r3, #0
 80120e8:	4620      	mov	r0, r4
 80120ea:	4629      	mov	r1, r5
 80120ec:	f7ee fd26 	bl	8000b3c <__aeabi_dcmplt>
 80120f0:	b158      	cbz	r0, 801210a <sqrt+0x4a>
 80120f2:	f000 ffc3 	bl	801307c <__errno>
 80120f6:	2321      	movs	r3, #33	@ 0x21
 80120f8:	6003      	str	r3, [r0, #0]
 80120fa:	2200      	movs	r2, #0
 80120fc:	2300      	movs	r3, #0
 80120fe:	4610      	mov	r0, r2
 8012100:	4619      	mov	r1, r3
 8012102:	f7ee fbd3 	bl	80008ac <__aeabi_ddiv>
 8012106:	ec41 0b18 	vmov	d8, r0, r1
 801210a:	eeb0 0a48 	vmov.f32	s0, s16
 801210e:	eef0 0a68 	vmov.f32	s1, s17
 8012112:	ecbd 8b02 	vpop	{d8}
 8012116:	bd38      	pop	{r3, r4, r5, pc}

08012118 <__ieee754_sqrt>:
 8012118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801211c:	4a68      	ldr	r2, [pc, #416]	@ (80122c0 <__ieee754_sqrt+0x1a8>)
 801211e:	ec55 4b10 	vmov	r4, r5, d0
 8012122:	43aa      	bics	r2, r5
 8012124:	462b      	mov	r3, r5
 8012126:	4621      	mov	r1, r4
 8012128:	d110      	bne.n	801214c <__ieee754_sqrt+0x34>
 801212a:	4622      	mov	r2, r4
 801212c:	4620      	mov	r0, r4
 801212e:	4629      	mov	r1, r5
 8012130:	f7ee fa92 	bl	8000658 <__aeabi_dmul>
 8012134:	4602      	mov	r2, r0
 8012136:	460b      	mov	r3, r1
 8012138:	4620      	mov	r0, r4
 801213a:	4629      	mov	r1, r5
 801213c:	f7ee f8d6 	bl	80002ec <__adddf3>
 8012140:	4604      	mov	r4, r0
 8012142:	460d      	mov	r5, r1
 8012144:	ec45 4b10 	vmov	d0, r4, r5
 8012148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214c:	2d00      	cmp	r5, #0
 801214e:	dc0e      	bgt.n	801216e <__ieee754_sqrt+0x56>
 8012150:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012154:	4322      	orrs	r2, r4
 8012156:	d0f5      	beq.n	8012144 <__ieee754_sqrt+0x2c>
 8012158:	b19d      	cbz	r5, 8012182 <__ieee754_sqrt+0x6a>
 801215a:	4622      	mov	r2, r4
 801215c:	4620      	mov	r0, r4
 801215e:	4629      	mov	r1, r5
 8012160:	f7ee f8c2 	bl	80002e8 <__aeabi_dsub>
 8012164:	4602      	mov	r2, r0
 8012166:	460b      	mov	r3, r1
 8012168:	f7ee fba0 	bl	80008ac <__aeabi_ddiv>
 801216c:	e7e8      	b.n	8012140 <__ieee754_sqrt+0x28>
 801216e:	152a      	asrs	r2, r5, #20
 8012170:	d115      	bne.n	801219e <__ieee754_sqrt+0x86>
 8012172:	2000      	movs	r0, #0
 8012174:	e009      	b.n	801218a <__ieee754_sqrt+0x72>
 8012176:	0acb      	lsrs	r3, r1, #11
 8012178:	3a15      	subs	r2, #21
 801217a:	0549      	lsls	r1, r1, #21
 801217c:	2b00      	cmp	r3, #0
 801217e:	d0fa      	beq.n	8012176 <__ieee754_sqrt+0x5e>
 8012180:	e7f7      	b.n	8012172 <__ieee754_sqrt+0x5a>
 8012182:	462a      	mov	r2, r5
 8012184:	e7fa      	b.n	801217c <__ieee754_sqrt+0x64>
 8012186:	005b      	lsls	r3, r3, #1
 8012188:	3001      	adds	r0, #1
 801218a:	02dc      	lsls	r4, r3, #11
 801218c:	d5fb      	bpl.n	8012186 <__ieee754_sqrt+0x6e>
 801218e:	1e44      	subs	r4, r0, #1
 8012190:	1b12      	subs	r2, r2, r4
 8012192:	f1c0 0420 	rsb	r4, r0, #32
 8012196:	fa21 f404 	lsr.w	r4, r1, r4
 801219a:	4323      	orrs	r3, r4
 801219c:	4081      	lsls	r1, r0
 801219e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121a2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80121a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80121aa:	07d2      	lsls	r2, r2, #31
 80121ac:	bf5c      	itt	pl
 80121ae:	005b      	lslpl	r3, r3, #1
 80121b0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80121b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80121b8:	bf58      	it	pl
 80121ba:	0049      	lslpl	r1, r1, #1
 80121bc:	2600      	movs	r6, #0
 80121be:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80121c2:	106d      	asrs	r5, r5, #1
 80121c4:	0049      	lsls	r1, r1, #1
 80121c6:	2016      	movs	r0, #22
 80121c8:	4632      	mov	r2, r6
 80121ca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80121ce:	1917      	adds	r7, r2, r4
 80121d0:	429f      	cmp	r7, r3
 80121d2:	bfde      	ittt	le
 80121d4:	193a      	addle	r2, r7, r4
 80121d6:	1bdb      	suble	r3, r3, r7
 80121d8:	1936      	addle	r6, r6, r4
 80121da:	0fcf      	lsrs	r7, r1, #31
 80121dc:	3801      	subs	r0, #1
 80121de:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80121e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80121e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80121ea:	d1f0      	bne.n	80121ce <__ieee754_sqrt+0xb6>
 80121ec:	4604      	mov	r4, r0
 80121ee:	2720      	movs	r7, #32
 80121f0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80121f4:	429a      	cmp	r2, r3
 80121f6:	eb00 0e0c 	add.w	lr, r0, ip
 80121fa:	db02      	blt.n	8012202 <__ieee754_sqrt+0xea>
 80121fc:	d113      	bne.n	8012226 <__ieee754_sqrt+0x10e>
 80121fe:	458e      	cmp	lr, r1
 8012200:	d811      	bhi.n	8012226 <__ieee754_sqrt+0x10e>
 8012202:	f1be 0f00 	cmp.w	lr, #0
 8012206:	eb0e 000c 	add.w	r0, lr, ip
 801220a:	da42      	bge.n	8012292 <__ieee754_sqrt+0x17a>
 801220c:	2800      	cmp	r0, #0
 801220e:	db40      	blt.n	8012292 <__ieee754_sqrt+0x17a>
 8012210:	f102 0801 	add.w	r8, r2, #1
 8012214:	1a9b      	subs	r3, r3, r2
 8012216:	458e      	cmp	lr, r1
 8012218:	bf88      	it	hi
 801221a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801221e:	eba1 010e 	sub.w	r1, r1, lr
 8012222:	4464      	add	r4, ip
 8012224:	4642      	mov	r2, r8
 8012226:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801222a:	3f01      	subs	r7, #1
 801222c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012230:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012234:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012238:	d1dc      	bne.n	80121f4 <__ieee754_sqrt+0xdc>
 801223a:	4319      	orrs	r1, r3
 801223c:	d01b      	beq.n	8012276 <__ieee754_sqrt+0x15e>
 801223e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80122c4 <__ieee754_sqrt+0x1ac>
 8012242:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80122c8 <__ieee754_sqrt+0x1b0>
 8012246:	e9da 0100 	ldrd	r0, r1, [sl]
 801224a:	e9db 2300 	ldrd	r2, r3, [fp]
 801224e:	f7ee f84b 	bl	80002e8 <__aeabi_dsub>
 8012252:	e9da 8900 	ldrd	r8, r9, [sl]
 8012256:	4602      	mov	r2, r0
 8012258:	460b      	mov	r3, r1
 801225a:	4640      	mov	r0, r8
 801225c:	4649      	mov	r1, r9
 801225e:	f7ee fc77 	bl	8000b50 <__aeabi_dcmple>
 8012262:	b140      	cbz	r0, 8012276 <__ieee754_sqrt+0x15e>
 8012264:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012268:	e9da 0100 	ldrd	r0, r1, [sl]
 801226c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012270:	d111      	bne.n	8012296 <__ieee754_sqrt+0x17e>
 8012272:	3601      	adds	r6, #1
 8012274:	463c      	mov	r4, r7
 8012276:	1072      	asrs	r2, r6, #1
 8012278:	0863      	lsrs	r3, r4, #1
 801227a:	07f1      	lsls	r1, r6, #31
 801227c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012280:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012284:	bf48      	it	mi
 8012286:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801228a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801228e:	4618      	mov	r0, r3
 8012290:	e756      	b.n	8012140 <__ieee754_sqrt+0x28>
 8012292:	4690      	mov	r8, r2
 8012294:	e7be      	b.n	8012214 <__ieee754_sqrt+0xfc>
 8012296:	f7ee f829 	bl	80002ec <__adddf3>
 801229a:	e9da 8900 	ldrd	r8, r9, [sl]
 801229e:	4602      	mov	r2, r0
 80122a0:	460b      	mov	r3, r1
 80122a2:	4640      	mov	r0, r8
 80122a4:	4649      	mov	r1, r9
 80122a6:	f7ee fc49 	bl	8000b3c <__aeabi_dcmplt>
 80122aa:	b120      	cbz	r0, 80122b6 <__ieee754_sqrt+0x19e>
 80122ac:	1ca0      	adds	r0, r4, #2
 80122ae:	bf08      	it	eq
 80122b0:	3601      	addeq	r6, #1
 80122b2:	3402      	adds	r4, #2
 80122b4:	e7df      	b.n	8012276 <__ieee754_sqrt+0x15e>
 80122b6:	1c63      	adds	r3, r4, #1
 80122b8:	f023 0401 	bic.w	r4, r3, #1
 80122bc:	e7db      	b.n	8012276 <__ieee754_sqrt+0x15e>
 80122be:	bf00      	nop
 80122c0:	7ff00000 	.word	0x7ff00000
 80122c4:	20000020 	.word	0x20000020
 80122c8:	20000018 	.word	0x20000018

080122cc <abort>:
 80122cc:	b508      	push	{r3, lr}
 80122ce:	2006      	movs	r0, #6
 80122d0:	f000 fe5e 	bl	8012f90 <raise>
 80122d4:	2001      	movs	r0, #1
 80122d6:	f7fb f901 	bl	800d4dc <_exit>
	...

080122dc <malloc>:
 80122dc:	4b02      	ldr	r3, [pc, #8]	@ (80122e8 <malloc+0xc>)
 80122de:	4601      	mov	r1, r0
 80122e0:	6818      	ldr	r0, [r3, #0]
 80122e2:	f000 b82d 	b.w	8012340 <_malloc_r>
 80122e6:	bf00      	nop
 80122e8:	20000034 	.word	0x20000034

080122ec <free>:
 80122ec:	4b02      	ldr	r3, [pc, #8]	@ (80122f8 <free+0xc>)
 80122ee:	4601      	mov	r1, r0
 80122f0:	6818      	ldr	r0, [r3, #0]
 80122f2:	f001 bd4d 	b.w	8013d90 <_free_r>
 80122f6:	bf00      	nop
 80122f8:	20000034 	.word	0x20000034

080122fc <sbrk_aligned>:
 80122fc:	b570      	push	{r4, r5, r6, lr}
 80122fe:	4e0f      	ldr	r6, [pc, #60]	@ (801233c <sbrk_aligned+0x40>)
 8012300:	460c      	mov	r4, r1
 8012302:	6831      	ldr	r1, [r6, #0]
 8012304:	4605      	mov	r5, r0
 8012306:	b911      	cbnz	r1, 801230e <sbrk_aligned+0x12>
 8012308:	f000 fe96 	bl	8013038 <_sbrk_r>
 801230c:	6030      	str	r0, [r6, #0]
 801230e:	4621      	mov	r1, r4
 8012310:	4628      	mov	r0, r5
 8012312:	f000 fe91 	bl	8013038 <_sbrk_r>
 8012316:	1c43      	adds	r3, r0, #1
 8012318:	d103      	bne.n	8012322 <sbrk_aligned+0x26>
 801231a:	f04f 34ff 	mov.w	r4, #4294967295
 801231e:	4620      	mov	r0, r4
 8012320:	bd70      	pop	{r4, r5, r6, pc}
 8012322:	1cc4      	adds	r4, r0, #3
 8012324:	f024 0403 	bic.w	r4, r4, #3
 8012328:	42a0      	cmp	r0, r4
 801232a:	d0f8      	beq.n	801231e <sbrk_aligned+0x22>
 801232c:	1a21      	subs	r1, r4, r0
 801232e:	4628      	mov	r0, r5
 8012330:	f000 fe82 	bl	8013038 <_sbrk_r>
 8012334:	3001      	adds	r0, #1
 8012336:	d1f2      	bne.n	801231e <sbrk_aligned+0x22>
 8012338:	e7ef      	b.n	801231a <sbrk_aligned+0x1e>
 801233a:	bf00      	nop
 801233c:	2000056c 	.word	0x2000056c

08012340 <_malloc_r>:
 8012340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012344:	1ccd      	adds	r5, r1, #3
 8012346:	f025 0503 	bic.w	r5, r5, #3
 801234a:	3508      	adds	r5, #8
 801234c:	2d0c      	cmp	r5, #12
 801234e:	bf38      	it	cc
 8012350:	250c      	movcc	r5, #12
 8012352:	2d00      	cmp	r5, #0
 8012354:	4606      	mov	r6, r0
 8012356:	db01      	blt.n	801235c <_malloc_r+0x1c>
 8012358:	42a9      	cmp	r1, r5
 801235a:	d904      	bls.n	8012366 <_malloc_r+0x26>
 801235c:	230c      	movs	r3, #12
 801235e:	6033      	str	r3, [r6, #0]
 8012360:	2000      	movs	r0, #0
 8012362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801243c <_malloc_r+0xfc>
 801236a:	f000 f869 	bl	8012440 <__malloc_lock>
 801236e:	f8d8 3000 	ldr.w	r3, [r8]
 8012372:	461c      	mov	r4, r3
 8012374:	bb44      	cbnz	r4, 80123c8 <_malloc_r+0x88>
 8012376:	4629      	mov	r1, r5
 8012378:	4630      	mov	r0, r6
 801237a:	f7ff ffbf 	bl	80122fc <sbrk_aligned>
 801237e:	1c43      	adds	r3, r0, #1
 8012380:	4604      	mov	r4, r0
 8012382:	d158      	bne.n	8012436 <_malloc_r+0xf6>
 8012384:	f8d8 4000 	ldr.w	r4, [r8]
 8012388:	4627      	mov	r7, r4
 801238a:	2f00      	cmp	r7, #0
 801238c:	d143      	bne.n	8012416 <_malloc_r+0xd6>
 801238e:	2c00      	cmp	r4, #0
 8012390:	d04b      	beq.n	801242a <_malloc_r+0xea>
 8012392:	6823      	ldr	r3, [r4, #0]
 8012394:	4639      	mov	r1, r7
 8012396:	4630      	mov	r0, r6
 8012398:	eb04 0903 	add.w	r9, r4, r3
 801239c:	f000 fe4c 	bl	8013038 <_sbrk_r>
 80123a0:	4581      	cmp	r9, r0
 80123a2:	d142      	bne.n	801242a <_malloc_r+0xea>
 80123a4:	6821      	ldr	r1, [r4, #0]
 80123a6:	1a6d      	subs	r5, r5, r1
 80123a8:	4629      	mov	r1, r5
 80123aa:	4630      	mov	r0, r6
 80123ac:	f7ff ffa6 	bl	80122fc <sbrk_aligned>
 80123b0:	3001      	adds	r0, #1
 80123b2:	d03a      	beq.n	801242a <_malloc_r+0xea>
 80123b4:	6823      	ldr	r3, [r4, #0]
 80123b6:	442b      	add	r3, r5
 80123b8:	6023      	str	r3, [r4, #0]
 80123ba:	f8d8 3000 	ldr.w	r3, [r8]
 80123be:	685a      	ldr	r2, [r3, #4]
 80123c0:	bb62      	cbnz	r2, 801241c <_malloc_r+0xdc>
 80123c2:	f8c8 7000 	str.w	r7, [r8]
 80123c6:	e00f      	b.n	80123e8 <_malloc_r+0xa8>
 80123c8:	6822      	ldr	r2, [r4, #0]
 80123ca:	1b52      	subs	r2, r2, r5
 80123cc:	d420      	bmi.n	8012410 <_malloc_r+0xd0>
 80123ce:	2a0b      	cmp	r2, #11
 80123d0:	d917      	bls.n	8012402 <_malloc_r+0xc2>
 80123d2:	1961      	adds	r1, r4, r5
 80123d4:	42a3      	cmp	r3, r4
 80123d6:	6025      	str	r5, [r4, #0]
 80123d8:	bf18      	it	ne
 80123da:	6059      	strne	r1, [r3, #4]
 80123dc:	6863      	ldr	r3, [r4, #4]
 80123de:	bf08      	it	eq
 80123e0:	f8c8 1000 	streq.w	r1, [r8]
 80123e4:	5162      	str	r2, [r4, r5]
 80123e6:	604b      	str	r3, [r1, #4]
 80123e8:	4630      	mov	r0, r6
 80123ea:	f000 f82f 	bl	801244c <__malloc_unlock>
 80123ee:	f104 000b 	add.w	r0, r4, #11
 80123f2:	1d23      	adds	r3, r4, #4
 80123f4:	f020 0007 	bic.w	r0, r0, #7
 80123f8:	1ac2      	subs	r2, r0, r3
 80123fa:	bf1c      	itt	ne
 80123fc:	1a1b      	subne	r3, r3, r0
 80123fe:	50a3      	strne	r3, [r4, r2]
 8012400:	e7af      	b.n	8012362 <_malloc_r+0x22>
 8012402:	6862      	ldr	r2, [r4, #4]
 8012404:	42a3      	cmp	r3, r4
 8012406:	bf0c      	ite	eq
 8012408:	f8c8 2000 	streq.w	r2, [r8]
 801240c:	605a      	strne	r2, [r3, #4]
 801240e:	e7eb      	b.n	80123e8 <_malloc_r+0xa8>
 8012410:	4623      	mov	r3, r4
 8012412:	6864      	ldr	r4, [r4, #4]
 8012414:	e7ae      	b.n	8012374 <_malloc_r+0x34>
 8012416:	463c      	mov	r4, r7
 8012418:	687f      	ldr	r7, [r7, #4]
 801241a:	e7b6      	b.n	801238a <_malloc_r+0x4a>
 801241c:	461a      	mov	r2, r3
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	42a3      	cmp	r3, r4
 8012422:	d1fb      	bne.n	801241c <_malloc_r+0xdc>
 8012424:	2300      	movs	r3, #0
 8012426:	6053      	str	r3, [r2, #4]
 8012428:	e7de      	b.n	80123e8 <_malloc_r+0xa8>
 801242a:	230c      	movs	r3, #12
 801242c:	6033      	str	r3, [r6, #0]
 801242e:	4630      	mov	r0, r6
 8012430:	f000 f80c 	bl	801244c <__malloc_unlock>
 8012434:	e794      	b.n	8012360 <_malloc_r+0x20>
 8012436:	6005      	str	r5, [r0, #0]
 8012438:	e7d6      	b.n	80123e8 <_malloc_r+0xa8>
 801243a:	bf00      	nop
 801243c:	20000570 	.word	0x20000570

08012440 <__malloc_lock>:
 8012440:	4801      	ldr	r0, [pc, #4]	@ (8012448 <__malloc_lock+0x8>)
 8012442:	f000 be46 	b.w	80130d2 <__retarget_lock_acquire_recursive>
 8012446:	bf00      	nop
 8012448:	200006b4 	.word	0x200006b4

0801244c <__malloc_unlock>:
 801244c:	4801      	ldr	r0, [pc, #4]	@ (8012454 <__malloc_unlock+0x8>)
 801244e:	f000 be41 	b.w	80130d4 <__retarget_lock_release_recursive>
 8012452:	bf00      	nop
 8012454:	200006b4 	.word	0x200006b4

08012458 <__cxa_atexit>:
 8012458:	b510      	push	{r4, lr}
 801245a:	4604      	mov	r4, r0
 801245c:	4804      	ldr	r0, [pc, #16]	@ (8012470 <__cxa_atexit+0x18>)
 801245e:	4613      	mov	r3, r2
 8012460:	b120      	cbz	r0, 801246c <__cxa_atexit+0x14>
 8012462:	460a      	mov	r2, r1
 8012464:	2002      	movs	r0, #2
 8012466:	4621      	mov	r1, r4
 8012468:	f3af 8000 	nop.w
 801246c:	bd10      	pop	{r4, pc}
 801246e:	bf00      	nop
 8012470:	00000000 	.word	0x00000000

08012474 <__cvt>:
 8012474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012478:	ec57 6b10 	vmov	r6, r7, d0
 801247c:	2f00      	cmp	r7, #0
 801247e:	460c      	mov	r4, r1
 8012480:	4619      	mov	r1, r3
 8012482:	463b      	mov	r3, r7
 8012484:	bfbb      	ittet	lt
 8012486:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801248a:	461f      	movlt	r7, r3
 801248c:	2300      	movge	r3, #0
 801248e:	232d      	movlt	r3, #45	@ 0x2d
 8012490:	700b      	strb	r3, [r1, #0]
 8012492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012494:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012498:	4691      	mov	r9, r2
 801249a:	f023 0820 	bic.w	r8, r3, #32
 801249e:	bfbc      	itt	lt
 80124a0:	4632      	movlt	r2, r6
 80124a2:	4616      	movlt	r6, r2
 80124a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80124a8:	d005      	beq.n	80124b6 <__cvt+0x42>
 80124aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80124ae:	d100      	bne.n	80124b2 <__cvt+0x3e>
 80124b0:	3401      	adds	r4, #1
 80124b2:	2102      	movs	r1, #2
 80124b4:	e000      	b.n	80124b8 <__cvt+0x44>
 80124b6:	2103      	movs	r1, #3
 80124b8:	ab03      	add	r3, sp, #12
 80124ba:	9301      	str	r3, [sp, #4]
 80124bc:	ab02      	add	r3, sp, #8
 80124be:	9300      	str	r3, [sp, #0]
 80124c0:	ec47 6b10 	vmov	d0, r6, r7
 80124c4:	4653      	mov	r3, sl
 80124c6:	4622      	mov	r2, r4
 80124c8:	f000 fe9e 	bl	8013208 <_dtoa_r>
 80124cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80124d0:	4605      	mov	r5, r0
 80124d2:	d119      	bne.n	8012508 <__cvt+0x94>
 80124d4:	f019 0f01 	tst.w	r9, #1
 80124d8:	d00e      	beq.n	80124f8 <__cvt+0x84>
 80124da:	eb00 0904 	add.w	r9, r0, r4
 80124de:	2200      	movs	r2, #0
 80124e0:	2300      	movs	r3, #0
 80124e2:	4630      	mov	r0, r6
 80124e4:	4639      	mov	r1, r7
 80124e6:	f7ee fb1f 	bl	8000b28 <__aeabi_dcmpeq>
 80124ea:	b108      	cbz	r0, 80124f0 <__cvt+0x7c>
 80124ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80124f0:	2230      	movs	r2, #48	@ 0x30
 80124f2:	9b03      	ldr	r3, [sp, #12]
 80124f4:	454b      	cmp	r3, r9
 80124f6:	d31e      	bcc.n	8012536 <__cvt+0xc2>
 80124f8:	9b03      	ldr	r3, [sp, #12]
 80124fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80124fc:	1b5b      	subs	r3, r3, r5
 80124fe:	4628      	mov	r0, r5
 8012500:	6013      	str	r3, [r2, #0]
 8012502:	b004      	add	sp, #16
 8012504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801250c:	eb00 0904 	add.w	r9, r0, r4
 8012510:	d1e5      	bne.n	80124de <__cvt+0x6a>
 8012512:	7803      	ldrb	r3, [r0, #0]
 8012514:	2b30      	cmp	r3, #48	@ 0x30
 8012516:	d10a      	bne.n	801252e <__cvt+0xba>
 8012518:	2200      	movs	r2, #0
 801251a:	2300      	movs	r3, #0
 801251c:	4630      	mov	r0, r6
 801251e:	4639      	mov	r1, r7
 8012520:	f7ee fb02 	bl	8000b28 <__aeabi_dcmpeq>
 8012524:	b918      	cbnz	r0, 801252e <__cvt+0xba>
 8012526:	f1c4 0401 	rsb	r4, r4, #1
 801252a:	f8ca 4000 	str.w	r4, [sl]
 801252e:	f8da 3000 	ldr.w	r3, [sl]
 8012532:	4499      	add	r9, r3
 8012534:	e7d3      	b.n	80124de <__cvt+0x6a>
 8012536:	1c59      	adds	r1, r3, #1
 8012538:	9103      	str	r1, [sp, #12]
 801253a:	701a      	strb	r2, [r3, #0]
 801253c:	e7d9      	b.n	80124f2 <__cvt+0x7e>

0801253e <__exponent>:
 801253e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012540:	2900      	cmp	r1, #0
 8012542:	bfba      	itte	lt
 8012544:	4249      	neglt	r1, r1
 8012546:	232d      	movlt	r3, #45	@ 0x2d
 8012548:	232b      	movge	r3, #43	@ 0x2b
 801254a:	2909      	cmp	r1, #9
 801254c:	7002      	strb	r2, [r0, #0]
 801254e:	7043      	strb	r3, [r0, #1]
 8012550:	dd29      	ble.n	80125a6 <__exponent+0x68>
 8012552:	f10d 0307 	add.w	r3, sp, #7
 8012556:	461d      	mov	r5, r3
 8012558:	270a      	movs	r7, #10
 801255a:	461a      	mov	r2, r3
 801255c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012560:	fb07 1416 	mls	r4, r7, r6, r1
 8012564:	3430      	adds	r4, #48	@ 0x30
 8012566:	f802 4c01 	strb.w	r4, [r2, #-1]
 801256a:	460c      	mov	r4, r1
 801256c:	2c63      	cmp	r4, #99	@ 0x63
 801256e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012572:	4631      	mov	r1, r6
 8012574:	dcf1      	bgt.n	801255a <__exponent+0x1c>
 8012576:	3130      	adds	r1, #48	@ 0x30
 8012578:	1e94      	subs	r4, r2, #2
 801257a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801257e:	1c41      	adds	r1, r0, #1
 8012580:	4623      	mov	r3, r4
 8012582:	42ab      	cmp	r3, r5
 8012584:	d30a      	bcc.n	801259c <__exponent+0x5e>
 8012586:	f10d 0309 	add.w	r3, sp, #9
 801258a:	1a9b      	subs	r3, r3, r2
 801258c:	42ac      	cmp	r4, r5
 801258e:	bf88      	it	hi
 8012590:	2300      	movhi	r3, #0
 8012592:	3302      	adds	r3, #2
 8012594:	4403      	add	r3, r0
 8012596:	1a18      	subs	r0, r3, r0
 8012598:	b003      	add	sp, #12
 801259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801259c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80125a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80125a4:	e7ed      	b.n	8012582 <__exponent+0x44>
 80125a6:	2330      	movs	r3, #48	@ 0x30
 80125a8:	3130      	adds	r1, #48	@ 0x30
 80125aa:	7083      	strb	r3, [r0, #2]
 80125ac:	70c1      	strb	r1, [r0, #3]
 80125ae:	1d03      	adds	r3, r0, #4
 80125b0:	e7f1      	b.n	8012596 <__exponent+0x58>
	...

080125b4 <_printf_float>:
 80125b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b8:	b08d      	sub	sp, #52	@ 0x34
 80125ba:	460c      	mov	r4, r1
 80125bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80125c0:	4616      	mov	r6, r2
 80125c2:	461f      	mov	r7, r3
 80125c4:	4605      	mov	r5, r0
 80125c6:	f000 fceb 	bl	8012fa0 <_localeconv_r>
 80125ca:	6803      	ldr	r3, [r0, #0]
 80125cc:	9304      	str	r3, [sp, #16]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7ed fe7e 	bl	80002d0 <strlen>
 80125d4:	2300      	movs	r3, #0
 80125d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80125d8:	f8d8 3000 	ldr.w	r3, [r8]
 80125dc:	9005      	str	r0, [sp, #20]
 80125de:	3307      	adds	r3, #7
 80125e0:	f023 0307 	bic.w	r3, r3, #7
 80125e4:	f103 0208 	add.w	r2, r3, #8
 80125e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80125ec:	f8d4 b000 	ldr.w	fp, [r4]
 80125f0:	f8c8 2000 	str.w	r2, [r8]
 80125f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80125f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80125fc:	9307      	str	r3, [sp, #28]
 80125fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8012602:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801260a:	4b9c      	ldr	r3, [pc, #624]	@ (801287c <_printf_float+0x2c8>)
 801260c:	f04f 32ff 	mov.w	r2, #4294967295
 8012610:	f7ee fabc 	bl	8000b8c <__aeabi_dcmpun>
 8012614:	bb70      	cbnz	r0, 8012674 <_printf_float+0xc0>
 8012616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801261a:	4b98      	ldr	r3, [pc, #608]	@ (801287c <_printf_float+0x2c8>)
 801261c:	f04f 32ff 	mov.w	r2, #4294967295
 8012620:	f7ee fa96 	bl	8000b50 <__aeabi_dcmple>
 8012624:	bb30      	cbnz	r0, 8012674 <_printf_float+0xc0>
 8012626:	2200      	movs	r2, #0
 8012628:	2300      	movs	r3, #0
 801262a:	4640      	mov	r0, r8
 801262c:	4649      	mov	r1, r9
 801262e:	f7ee fa85 	bl	8000b3c <__aeabi_dcmplt>
 8012632:	b110      	cbz	r0, 801263a <_printf_float+0x86>
 8012634:	232d      	movs	r3, #45	@ 0x2d
 8012636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801263a:	4a91      	ldr	r2, [pc, #580]	@ (8012880 <_printf_float+0x2cc>)
 801263c:	4b91      	ldr	r3, [pc, #580]	@ (8012884 <_printf_float+0x2d0>)
 801263e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012642:	bf94      	ite	ls
 8012644:	4690      	movls	r8, r2
 8012646:	4698      	movhi	r8, r3
 8012648:	2303      	movs	r3, #3
 801264a:	6123      	str	r3, [r4, #16]
 801264c:	f02b 0304 	bic.w	r3, fp, #4
 8012650:	6023      	str	r3, [r4, #0]
 8012652:	f04f 0900 	mov.w	r9, #0
 8012656:	9700      	str	r7, [sp, #0]
 8012658:	4633      	mov	r3, r6
 801265a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801265c:	4621      	mov	r1, r4
 801265e:	4628      	mov	r0, r5
 8012660:	f000 f9d2 	bl	8012a08 <_printf_common>
 8012664:	3001      	adds	r0, #1
 8012666:	f040 808d 	bne.w	8012784 <_printf_float+0x1d0>
 801266a:	f04f 30ff 	mov.w	r0, #4294967295
 801266e:	b00d      	add	sp, #52	@ 0x34
 8012670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012674:	4642      	mov	r2, r8
 8012676:	464b      	mov	r3, r9
 8012678:	4640      	mov	r0, r8
 801267a:	4649      	mov	r1, r9
 801267c:	f7ee fa86 	bl	8000b8c <__aeabi_dcmpun>
 8012680:	b140      	cbz	r0, 8012694 <_printf_float+0xe0>
 8012682:	464b      	mov	r3, r9
 8012684:	2b00      	cmp	r3, #0
 8012686:	bfbc      	itt	lt
 8012688:	232d      	movlt	r3, #45	@ 0x2d
 801268a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801268e:	4a7e      	ldr	r2, [pc, #504]	@ (8012888 <_printf_float+0x2d4>)
 8012690:	4b7e      	ldr	r3, [pc, #504]	@ (801288c <_printf_float+0x2d8>)
 8012692:	e7d4      	b.n	801263e <_printf_float+0x8a>
 8012694:	6863      	ldr	r3, [r4, #4]
 8012696:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801269a:	9206      	str	r2, [sp, #24]
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	d13b      	bne.n	8012718 <_printf_float+0x164>
 80126a0:	2306      	movs	r3, #6
 80126a2:	6063      	str	r3, [r4, #4]
 80126a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80126a8:	2300      	movs	r3, #0
 80126aa:	6022      	str	r2, [r4, #0]
 80126ac:	9303      	str	r3, [sp, #12]
 80126ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80126b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80126b4:	ab09      	add	r3, sp, #36	@ 0x24
 80126b6:	9300      	str	r3, [sp, #0]
 80126b8:	6861      	ldr	r1, [r4, #4]
 80126ba:	ec49 8b10 	vmov	d0, r8, r9
 80126be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80126c2:	4628      	mov	r0, r5
 80126c4:	f7ff fed6 	bl	8012474 <__cvt>
 80126c8:	9b06      	ldr	r3, [sp, #24]
 80126ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80126cc:	2b47      	cmp	r3, #71	@ 0x47
 80126ce:	4680      	mov	r8, r0
 80126d0:	d129      	bne.n	8012726 <_printf_float+0x172>
 80126d2:	1cc8      	adds	r0, r1, #3
 80126d4:	db02      	blt.n	80126dc <_printf_float+0x128>
 80126d6:	6863      	ldr	r3, [r4, #4]
 80126d8:	4299      	cmp	r1, r3
 80126da:	dd41      	ble.n	8012760 <_printf_float+0x1ac>
 80126dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80126e0:	fa5f fa8a 	uxtb.w	sl, sl
 80126e4:	3901      	subs	r1, #1
 80126e6:	4652      	mov	r2, sl
 80126e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80126ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80126ee:	f7ff ff26 	bl	801253e <__exponent>
 80126f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126f4:	1813      	adds	r3, r2, r0
 80126f6:	2a01      	cmp	r2, #1
 80126f8:	4681      	mov	r9, r0
 80126fa:	6123      	str	r3, [r4, #16]
 80126fc:	dc02      	bgt.n	8012704 <_printf_float+0x150>
 80126fe:	6822      	ldr	r2, [r4, #0]
 8012700:	07d2      	lsls	r2, r2, #31
 8012702:	d501      	bpl.n	8012708 <_printf_float+0x154>
 8012704:	3301      	adds	r3, #1
 8012706:	6123      	str	r3, [r4, #16]
 8012708:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801270c:	2b00      	cmp	r3, #0
 801270e:	d0a2      	beq.n	8012656 <_printf_float+0xa2>
 8012710:	232d      	movs	r3, #45	@ 0x2d
 8012712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012716:	e79e      	b.n	8012656 <_printf_float+0xa2>
 8012718:	9a06      	ldr	r2, [sp, #24]
 801271a:	2a47      	cmp	r2, #71	@ 0x47
 801271c:	d1c2      	bne.n	80126a4 <_printf_float+0xf0>
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1c0      	bne.n	80126a4 <_printf_float+0xf0>
 8012722:	2301      	movs	r3, #1
 8012724:	e7bd      	b.n	80126a2 <_printf_float+0xee>
 8012726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801272a:	d9db      	bls.n	80126e4 <_printf_float+0x130>
 801272c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012730:	d118      	bne.n	8012764 <_printf_float+0x1b0>
 8012732:	2900      	cmp	r1, #0
 8012734:	6863      	ldr	r3, [r4, #4]
 8012736:	dd0b      	ble.n	8012750 <_printf_float+0x19c>
 8012738:	6121      	str	r1, [r4, #16]
 801273a:	b913      	cbnz	r3, 8012742 <_printf_float+0x18e>
 801273c:	6822      	ldr	r2, [r4, #0]
 801273e:	07d0      	lsls	r0, r2, #31
 8012740:	d502      	bpl.n	8012748 <_printf_float+0x194>
 8012742:	3301      	adds	r3, #1
 8012744:	440b      	add	r3, r1
 8012746:	6123      	str	r3, [r4, #16]
 8012748:	65a1      	str	r1, [r4, #88]	@ 0x58
 801274a:	f04f 0900 	mov.w	r9, #0
 801274e:	e7db      	b.n	8012708 <_printf_float+0x154>
 8012750:	b913      	cbnz	r3, 8012758 <_printf_float+0x1a4>
 8012752:	6822      	ldr	r2, [r4, #0]
 8012754:	07d2      	lsls	r2, r2, #31
 8012756:	d501      	bpl.n	801275c <_printf_float+0x1a8>
 8012758:	3302      	adds	r3, #2
 801275a:	e7f4      	b.n	8012746 <_printf_float+0x192>
 801275c:	2301      	movs	r3, #1
 801275e:	e7f2      	b.n	8012746 <_printf_float+0x192>
 8012760:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012766:	4299      	cmp	r1, r3
 8012768:	db05      	blt.n	8012776 <_printf_float+0x1c2>
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	6121      	str	r1, [r4, #16]
 801276e:	07d8      	lsls	r0, r3, #31
 8012770:	d5ea      	bpl.n	8012748 <_printf_float+0x194>
 8012772:	1c4b      	adds	r3, r1, #1
 8012774:	e7e7      	b.n	8012746 <_printf_float+0x192>
 8012776:	2900      	cmp	r1, #0
 8012778:	bfd4      	ite	le
 801277a:	f1c1 0202 	rsble	r2, r1, #2
 801277e:	2201      	movgt	r2, #1
 8012780:	4413      	add	r3, r2
 8012782:	e7e0      	b.n	8012746 <_printf_float+0x192>
 8012784:	6823      	ldr	r3, [r4, #0]
 8012786:	055a      	lsls	r2, r3, #21
 8012788:	d407      	bmi.n	801279a <_printf_float+0x1e6>
 801278a:	6923      	ldr	r3, [r4, #16]
 801278c:	4642      	mov	r2, r8
 801278e:	4631      	mov	r1, r6
 8012790:	4628      	mov	r0, r5
 8012792:	47b8      	blx	r7
 8012794:	3001      	adds	r0, #1
 8012796:	d12b      	bne.n	80127f0 <_printf_float+0x23c>
 8012798:	e767      	b.n	801266a <_printf_float+0xb6>
 801279a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801279e:	f240 80dd 	bls.w	801295c <_printf_float+0x3a8>
 80127a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80127a6:	2200      	movs	r2, #0
 80127a8:	2300      	movs	r3, #0
 80127aa:	f7ee f9bd 	bl	8000b28 <__aeabi_dcmpeq>
 80127ae:	2800      	cmp	r0, #0
 80127b0:	d033      	beq.n	801281a <_printf_float+0x266>
 80127b2:	4a37      	ldr	r2, [pc, #220]	@ (8012890 <_printf_float+0x2dc>)
 80127b4:	2301      	movs	r3, #1
 80127b6:	4631      	mov	r1, r6
 80127b8:	4628      	mov	r0, r5
 80127ba:	47b8      	blx	r7
 80127bc:	3001      	adds	r0, #1
 80127be:	f43f af54 	beq.w	801266a <_printf_float+0xb6>
 80127c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80127c6:	4543      	cmp	r3, r8
 80127c8:	db02      	blt.n	80127d0 <_printf_float+0x21c>
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	07d8      	lsls	r0, r3, #31
 80127ce:	d50f      	bpl.n	80127f0 <_printf_float+0x23c>
 80127d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127d4:	4631      	mov	r1, r6
 80127d6:	4628      	mov	r0, r5
 80127d8:	47b8      	blx	r7
 80127da:	3001      	adds	r0, #1
 80127dc:	f43f af45 	beq.w	801266a <_printf_float+0xb6>
 80127e0:	f04f 0900 	mov.w	r9, #0
 80127e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80127e8:	f104 0a1a 	add.w	sl, r4, #26
 80127ec:	45c8      	cmp	r8, r9
 80127ee:	dc09      	bgt.n	8012804 <_printf_float+0x250>
 80127f0:	6823      	ldr	r3, [r4, #0]
 80127f2:	079b      	lsls	r3, r3, #30
 80127f4:	f100 8103 	bmi.w	80129fe <_printf_float+0x44a>
 80127f8:	68e0      	ldr	r0, [r4, #12]
 80127fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127fc:	4298      	cmp	r0, r3
 80127fe:	bfb8      	it	lt
 8012800:	4618      	movlt	r0, r3
 8012802:	e734      	b.n	801266e <_printf_float+0xba>
 8012804:	2301      	movs	r3, #1
 8012806:	4652      	mov	r2, sl
 8012808:	4631      	mov	r1, r6
 801280a:	4628      	mov	r0, r5
 801280c:	47b8      	blx	r7
 801280e:	3001      	adds	r0, #1
 8012810:	f43f af2b 	beq.w	801266a <_printf_float+0xb6>
 8012814:	f109 0901 	add.w	r9, r9, #1
 8012818:	e7e8      	b.n	80127ec <_printf_float+0x238>
 801281a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801281c:	2b00      	cmp	r3, #0
 801281e:	dc39      	bgt.n	8012894 <_printf_float+0x2e0>
 8012820:	4a1b      	ldr	r2, [pc, #108]	@ (8012890 <_printf_float+0x2dc>)
 8012822:	2301      	movs	r3, #1
 8012824:	4631      	mov	r1, r6
 8012826:	4628      	mov	r0, r5
 8012828:	47b8      	blx	r7
 801282a:	3001      	adds	r0, #1
 801282c:	f43f af1d 	beq.w	801266a <_printf_float+0xb6>
 8012830:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012834:	ea59 0303 	orrs.w	r3, r9, r3
 8012838:	d102      	bne.n	8012840 <_printf_float+0x28c>
 801283a:	6823      	ldr	r3, [r4, #0]
 801283c:	07d9      	lsls	r1, r3, #31
 801283e:	d5d7      	bpl.n	80127f0 <_printf_float+0x23c>
 8012840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012844:	4631      	mov	r1, r6
 8012846:	4628      	mov	r0, r5
 8012848:	47b8      	blx	r7
 801284a:	3001      	adds	r0, #1
 801284c:	f43f af0d 	beq.w	801266a <_printf_float+0xb6>
 8012850:	f04f 0a00 	mov.w	sl, #0
 8012854:	f104 0b1a 	add.w	fp, r4, #26
 8012858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801285a:	425b      	negs	r3, r3
 801285c:	4553      	cmp	r3, sl
 801285e:	dc01      	bgt.n	8012864 <_printf_float+0x2b0>
 8012860:	464b      	mov	r3, r9
 8012862:	e793      	b.n	801278c <_printf_float+0x1d8>
 8012864:	2301      	movs	r3, #1
 8012866:	465a      	mov	r2, fp
 8012868:	4631      	mov	r1, r6
 801286a:	4628      	mov	r0, r5
 801286c:	47b8      	blx	r7
 801286e:	3001      	adds	r0, #1
 8012870:	f43f aefb 	beq.w	801266a <_printf_float+0xb6>
 8012874:	f10a 0a01 	add.w	sl, sl, #1
 8012878:	e7ee      	b.n	8012858 <_printf_float+0x2a4>
 801287a:	bf00      	nop
 801287c:	7fefffff 	.word	0x7fefffff
 8012880:	08016198 	.word	0x08016198
 8012884:	0801619c 	.word	0x0801619c
 8012888:	080161a0 	.word	0x080161a0
 801288c:	080161a4 	.word	0x080161a4
 8012890:	080161a8 	.word	0x080161a8
 8012894:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012896:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801289a:	4553      	cmp	r3, sl
 801289c:	bfa8      	it	ge
 801289e:	4653      	movge	r3, sl
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	4699      	mov	r9, r3
 80128a4:	dc36      	bgt.n	8012914 <_printf_float+0x360>
 80128a6:	f04f 0b00 	mov.w	fp, #0
 80128aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128ae:	f104 021a 	add.w	r2, r4, #26
 80128b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80128b4:	9306      	str	r3, [sp, #24]
 80128b6:	eba3 0309 	sub.w	r3, r3, r9
 80128ba:	455b      	cmp	r3, fp
 80128bc:	dc31      	bgt.n	8012922 <_printf_float+0x36e>
 80128be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c0:	459a      	cmp	sl, r3
 80128c2:	dc3a      	bgt.n	801293a <_printf_float+0x386>
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	07da      	lsls	r2, r3, #31
 80128c8:	d437      	bmi.n	801293a <_printf_float+0x386>
 80128ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128cc:	ebaa 0903 	sub.w	r9, sl, r3
 80128d0:	9b06      	ldr	r3, [sp, #24]
 80128d2:	ebaa 0303 	sub.w	r3, sl, r3
 80128d6:	4599      	cmp	r9, r3
 80128d8:	bfa8      	it	ge
 80128da:	4699      	movge	r9, r3
 80128dc:	f1b9 0f00 	cmp.w	r9, #0
 80128e0:	dc33      	bgt.n	801294a <_printf_float+0x396>
 80128e2:	f04f 0800 	mov.w	r8, #0
 80128e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128ea:	f104 0b1a 	add.w	fp, r4, #26
 80128ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128f0:	ebaa 0303 	sub.w	r3, sl, r3
 80128f4:	eba3 0309 	sub.w	r3, r3, r9
 80128f8:	4543      	cmp	r3, r8
 80128fa:	f77f af79 	ble.w	80127f0 <_printf_float+0x23c>
 80128fe:	2301      	movs	r3, #1
 8012900:	465a      	mov	r2, fp
 8012902:	4631      	mov	r1, r6
 8012904:	4628      	mov	r0, r5
 8012906:	47b8      	blx	r7
 8012908:	3001      	adds	r0, #1
 801290a:	f43f aeae 	beq.w	801266a <_printf_float+0xb6>
 801290e:	f108 0801 	add.w	r8, r8, #1
 8012912:	e7ec      	b.n	80128ee <_printf_float+0x33a>
 8012914:	4642      	mov	r2, r8
 8012916:	4631      	mov	r1, r6
 8012918:	4628      	mov	r0, r5
 801291a:	47b8      	blx	r7
 801291c:	3001      	adds	r0, #1
 801291e:	d1c2      	bne.n	80128a6 <_printf_float+0x2f2>
 8012920:	e6a3      	b.n	801266a <_printf_float+0xb6>
 8012922:	2301      	movs	r3, #1
 8012924:	4631      	mov	r1, r6
 8012926:	4628      	mov	r0, r5
 8012928:	9206      	str	r2, [sp, #24]
 801292a:	47b8      	blx	r7
 801292c:	3001      	adds	r0, #1
 801292e:	f43f ae9c 	beq.w	801266a <_printf_float+0xb6>
 8012932:	9a06      	ldr	r2, [sp, #24]
 8012934:	f10b 0b01 	add.w	fp, fp, #1
 8012938:	e7bb      	b.n	80128b2 <_printf_float+0x2fe>
 801293a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801293e:	4631      	mov	r1, r6
 8012940:	4628      	mov	r0, r5
 8012942:	47b8      	blx	r7
 8012944:	3001      	adds	r0, #1
 8012946:	d1c0      	bne.n	80128ca <_printf_float+0x316>
 8012948:	e68f      	b.n	801266a <_printf_float+0xb6>
 801294a:	9a06      	ldr	r2, [sp, #24]
 801294c:	464b      	mov	r3, r9
 801294e:	4442      	add	r2, r8
 8012950:	4631      	mov	r1, r6
 8012952:	4628      	mov	r0, r5
 8012954:	47b8      	blx	r7
 8012956:	3001      	adds	r0, #1
 8012958:	d1c3      	bne.n	80128e2 <_printf_float+0x32e>
 801295a:	e686      	b.n	801266a <_printf_float+0xb6>
 801295c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012960:	f1ba 0f01 	cmp.w	sl, #1
 8012964:	dc01      	bgt.n	801296a <_printf_float+0x3b6>
 8012966:	07db      	lsls	r3, r3, #31
 8012968:	d536      	bpl.n	80129d8 <_printf_float+0x424>
 801296a:	2301      	movs	r3, #1
 801296c:	4642      	mov	r2, r8
 801296e:	4631      	mov	r1, r6
 8012970:	4628      	mov	r0, r5
 8012972:	47b8      	blx	r7
 8012974:	3001      	adds	r0, #1
 8012976:	f43f ae78 	beq.w	801266a <_printf_float+0xb6>
 801297a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801297e:	4631      	mov	r1, r6
 8012980:	4628      	mov	r0, r5
 8012982:	47b8      	blx	r7
 8012984:	3001      	adds	r0, #1
 8012986:	f43f ae70 	beq.w	801266a <_printf_float+0xb6>
 801298a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801298e:	2200      	movs	r2, #0
 8012990:	2300      	movs	r3, #0
 8012992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012996:	f7ee f8c7 	bl	8000b28 <__aeabi_dcmpeq>
 801299a:	b9c0      	cbnz	r0, 80129ce <_printf_float+0x41a>
 801299c:	4653      	mov	r3, sl
 801299e:	f108 0201 	add.w	r2, r8, #1
 80129a2:	4631      	mov	r1, r6
 80129a4:	4628      	mov	r0, r5
 80129a6:	47b8      	blx	r7
 80129a8:	3001      	adds	r0, #1
 80129aa:	d10c      	bne.n	80129c6 <_printf_float+0x412>
 80129ac:	e65d      	b.n	801266a <_printf_float+0xb6>
 80129ae:	2301      	movs	r3, #1
 80129b0:	465a      	mov	r2, fp
 80129b2:	4631      	mov	r1, r6
 80129b4:	4628      	mov	r0, r5
 80129b6:	47b8      	blx	r7
 80129b8:	3001      	adds	r0, #1
 80129ba:	f43f ae56 	beq.w	801266a <_printf_float+0xb6>
 80129be:	f108 0801 	add.w	r8, r8, #1
 80129c2:	45d0      	cmp	r8, sl
 80129c4:	dbf3      	blt.n	80129ae <_printf_float+0x3fa>
 80129c6:	464b      	mov	r3, r9
 80129c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80129cc:	e6df      	b.n	801278e <_printf_float+0x1da>
 80129ce:	f04f 0800 	mov.w	r8, #0
 80129d2:	f104 0b1a 	add.w	fp, r4, #26
 80129d6:	e7f4      	b.n	80129c2 <_printf_float+0x40e>
 80129d8:	2301      	movs	r3, #1
 80129da:	4642      	mov	r2, r8
 80129dc:	e7e1      	b.n	80129a2 <_printf_float+0x3ee>
 80129de:	2301      	movs	r3, #1
 80129e0:	464a      	mov	r2, r9
 80129e2:	4631      	mov	r1, r6
 80129e4:	4628      	mov	r0, r5
 80129e6:	47b8      	blx	r7
 80129e8:	3001      	adds	r0, #1
 80129ea:	f43f ae3e 	beq.w	801266a <_printf_float+0xb6>
 80129ee:	f108 0801 	add.w	r8, r8, #1
 80129f2:	68e3      	ldr	r3, [r4, #12]
 80129f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80129f6:	1a5b      	subs	r3, r3, r1
 80129f8:	4543      	cmp	r3, r8
 80129fa:	dcf0      	bgt.n	80129de <_printf_float+0x42a>
 80129fc:	e6fc      	b.n	80127f8 <_printf_float+0x244>
 80129fe:	f04f 0800 	mov.w	r8, #0
 8012a02:	f104 0919 	add.w	r9, r4, #25
 8012a06:	e7f4      	b.n	80129f2 <_printf_float+0x43e>

08012a08 <_printf_common>:
 8012a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a0c:	4616      	mov	r6, r2
 8012a0e:	4698      	mov	r8, r3
 8012a10:	688a      	ldr	r2, [r1, #8]
 8012a12:	690b      	ldr	r3, [r1, #16]
 8012a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	bfb8      	it	lt
 8012a1c:	4613      	movlt	r3, r2
 8012a1e:	6033      	str	r3, [r6, #0]
 8012a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012a24:	4607      	mov	r7, r0
 8012a26:	460c      	mov	r4, r1
 8012a28:	b10a      	cbz	r2, 8012a2e <_printf_common+0x26>
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	6033      	str	r3, [r6, #0]
 8012a2e:	6823      	ldr	r3, [r4, #0]
 8012a30:	0699      	lsls	r1, r3, #26
 8012a32:	bf42      	ittt	mi
 8012a34:	6833      	ldrmi	r3, [r6, #0]
 8012a36:	3302      	addmi	r3, #2
 8012a38:	6033      	strmi	r3, [r6, #0]
 8012a3a:	6825      	ldr	r5, [r4, #0]
 8012a3c:	f015 0506 	ands.w	r5, r5, #6
 8012a40:	d106      	bne.n	8012a50 <_printf_common+0x48>
 8012a42:	f104 0a19 	add.w	sl, r4, #25
 8012a46:	68e3      	ldr	r3, [r4, #12]
 8012a48:	6832      	ldr	r2, [r6, #0]
 8012a4a:	1a9b      	subs	r3, r3, r2
 8012a4c:	42ab      	cmp	r3, r5
 8012a4e:	dc26      	bgt.n	8012a9e <_printf_common+0x96>
 8012a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012a54:	6822      	ldr	r2, [r4, #0]
 8012a56:	3b00      	subs	r3, #0
 8012a58:	bf18      	it	ne
 8012a5a:	2301      	movne	r3, #1
 8012a5c:	0692      	lsls	r2, r2, #26
 8012a5e:	d42b      	bmi.n	8012ab8 <_printf_common+0xb0>
 8012a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012a64:	4641      	mov	r1, r8
 8012a66:	4638      	mov	r0, r7
 8012a68:	47c8      	blx	r9
 8012a6a:	3001      	adds	r0, #1
 8012a6c:	d01e      	beq.n	8012aac <_printf_common+0xa4>
 8012a6e:	6823      	ldr	r3, [r4, #0]
 8012a70:	6922      	ldr	r2, [r4, #16]
 8012a72:	f003 0306 	and.w	r3, r3, #6
 8012a76:	2b04      	cmp	r3, #4
 8012a78:	bf02      	ittt	eq
 8012a7a:	68e5      	ldreq	r5, [r4, #12]
 8012a7c:	6833      	ldreq	r3, [r6, #0]
 8012a7e:	1aed      	subeq	r5, r5, r3
 8012a80:	68a3      	ldr	r3, [r4, #8]
 8012a82:	bf0c      	ite	eq
 8012a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a88:	2500      	movne	r5, #0
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	bfc4      	itt	gt
 8012a8e:	1a9b      	subgt	r3, r3, r2
 8012a90:	18ed      	addgt	r5, r5, r3
 8012a92:	2600      	movs	r6, #0
 8012a94:	341a      	adds	r4, #26
 8012a96:	42b5      	cmp	r5, r6
 8012a98:	d11a      	bne.n	8012ad0 <_printf_common+0xc8>
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	e008      	b.n	8012ab0 <_printf_common+0xa8>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	4652      	mov	r2, sl
 8012aa2:	4641      	mov	r1, r8
 8012aa4:	4638      	mov	r0, r7
 8012aa6:	47c8      	blx	r9
 8012aa8:	3001      	adds	r0, #1
 8012aaa:	d103      	bne.n	8012ab4 <_printf_common+0xac>
 8012aac:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab4:	3501      	adds	r5, #1
 8012ab6:	e7c6      	b.n	8012a46 <_printf_common+0x3e>
 8012ab8:	18e1      	adds	r1, r4, r3
 8012aba:	1c5a      	adds	r2, r3, #1
 8012abc:	2030      	movs	r0, #48	@ 0x30
 8012abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012ac2:	4422      	add	r2, r4
 8012ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012acc:	3302      	adds	r3, #2
 8012ace:	e7c7      	b.n	8012a60 <_printf_common+0x58>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	4622      	mov	r2, r4
 8012ad4:	4641      	mov	r1, r8
 8012ad6:	4638      	mov	r0, r7
 8012ad8:	47c8      	blx	r9
 8012ada:	3001      	adds	r0, #1
 8012adc:	d0e6      	beq.n	8012aac <_printf_common+0xa4>
 8012ade:	3601      	adds	r6, #1
 8012ae0:	e7d9      	b.n	8012a96 <_printf_common+0x8e>
	...

08012ae4 <_printf_i>:
 8012ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ae8:	7e0f      	ldrb	r7, [r1, #24]
 8012aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012aec:	2f78      	cmp	r7, #120	@ 0x78
 8012aee:	4691      	mov	r9, r2
 8012af0:	4680      	mov	r8, r0
 8012af2:	460c      	mov	r4, r1
 8012af4:	469a      	mov	sl, r3
 8012af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012afa:	d807      	bhi.n	8012b0c <_printf_i+0x28>
 8012afc:	2f62      	cmp	r7, #98	@ 0x62
 8012afe:	d80a      	bhi.n	8012b16 <_printf_i+0x32>
 8012b00:	2f00      	cmp	r7, #0
 8012b02:	f000 80d2 	beq.w	8012caa <_printf_i+0x1c6>
 8012b06:	2f58      	cmp	r7, #88	@ 0x58
 8012b08:	f000 80b9 	beq.w	8012c7e <_printf_i+0x19a>
 8012b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012b14:	e03a      	b.n	8012b8c <_printf_i+0xa8>
 8012b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012b1a:	2b15      	cmp	r3, #21
 8012b1c:	d8f6      	bhi.n	8012b0c <_printf_i+0x28>
 8012b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8012b24 <_printf_i+0x40>)
 8012b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b24:	08012b7d 	.word	0x08012b7d
 8012b28:	08012b91 	.word	0x08012b91
 8012b2c:	08012b0d 	.word	0x08012b0d
 8012b30:	08012b0d 	.word	0x08012b0d
 8012b34:	08012b0d 	.word	0x08012b0d
 8012b38:	08012b0d 	.word	0x08012b0d
 8012b3c:	08012b91 	.word	0x08012b91
 8012b40:	08012b0d 	.word	0x08012b0d
 8012b44:	08012b0d 	.word	0x08012b0d
 8012b48:	08012b0d 	.word	0x08012b0d
 8012b4c:	08012b0d 	.word	0x08012b0d
 8012b50:	08012c91 	.word	0x08012c91
 8012b54:	08012bbb 	.word	0x08012bbb
 8012b58:	08012c4b 	.word	0x08012c4b
 8012b5c:	08012b0d 	.word	0x08012b0d
 8012b60:	08012b0d 	.word	0x08012b0d
 8012b64:	08012cb3 	.word	0x08012cb3
 8012b68:	08012b0d 	.word	0x08012b0d
 8012b6c:	08012bbb 	.word	0x08012bbb
 8012b70:	08012b0d 	.word	0x08012b0d
 8012b74:	08012b0d 	.word	0x08012b0d
 8012b78:	08012c53 	.word	0x08012c53
 8012b7c:	6833      	ldr	r3, [r6, #0]
 8012b7e:	1d1a      	adds	r2, r3, #4
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	6032      	str	r2, [r6, #0]
 8012b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	e09d      	b.n	8012ccc <_printf_i+0x1e8>
 8012b90:	6833      	ldr	r3, [r6, #0]
 8012b92:	6820      	ldr	r0, [r4, #0]
 8012b94:	1d19      	adds	r1, r3, #4
 8012b96:	6031      	str	r1, [r6, #0]
 8012b98:	0606      	lsls	r6, r0, #24
 8012b9a:	d501      	bpl.n	8012ba0 <_printf_i+0xbc>
 8012b9c:	681d      	ldr	r5, [r3, #0]
 8012b9e:	e003      	b.n	8012ba8 <_printf_i+0xc4>
 8012ba0:	0645      	lsls	r5, r0, #25
 8012ba2:	d5fb      	bpl.n	8012b9c <_printf_i+0xb8>
 8012ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ba8:	2d00      	cmp	r5, #0
 8012baa:	da03      	bge.n	8012bb4 <_printf_i+0xd0>
 8012bac:	232d      	movs	r3, #45	@ 0x2d
 8012bae:	426d      	negs	r5, r5
 8012bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012bb4:	4859      	ldr	r0, [pc, #356]	@ (8012d1c <_printf_i+0x238>)
 8012bb6:	230a      	movs	r3, #10
 8012bb8:	e011      	b.n	8012bde <_printf_i+0xfa>
 8012bba:	6821      	ldr	r1, [r4, #0]
 8012bbc:	6833      	ldr	r3, [r6, #0]
 8012bbe:	0608      	lsls	r0, r1, #24
 8012bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012bc4:	d402      	bmi.n	8012bcc <_printf_i+0xe8>
 8012bc6:	0649      	lsls	r1, r1, #25
 8012bc8:	bf48      	it	mi
 8012bca:	b2ad      	uxthmi	r5, r5
 8012bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8012bce:	4853      	ldr	r0, [pc, #332]	@ (8012d1c <_printf_i+0x238>)
 8012bd0:	6033      	str	r3, [r6, #0]
 8012bd2:	bf14      	ite	ne
 8012bd4:	230a      	movne	r3, #10
 8012bd6:	2308      	moveq	r3, #8
 8012bd8:	2100      	movs	r1, #0
 8012bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012bde:	6866      	ldr	r6, [r4, #4]
 8012be0:	60a6      	str	r6, [r4, #8]
 8012be2:	2e00      	cmp	r6, #0
 8012be4:	bfa2      	ittt	ge
 8012be6:	6821      	ldrge	r1, [r4, #0]
 8012be8:	f021 0104 	bicge.w	r1, r1, #4
 8012bec:	6021      	strge	r1, [r4, #0]
 8012bee:	b90d      	cbnz	r5, 8012bf4 <_printf_i+0x110>
 8012bf0:	2e00      	cmp	r6, #0
 8012bf2:	d04b      	beq.n	8012c8c <_printf_i+0x1a8>
 8012bf4:	4616      	mov	r6, r2
 8012bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8012bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8012bfe:	5dc7      	ldrb	r7, [r0, r7]
 8012c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012c04:	462f      	mov	r7, r5
 8012c06:	42bb      	cmp	r3, r7
 8012c08:	460d      	mov	r5, r1
 8012c0a:	d9f4      	bls.n	8012bf6 <_printf_i+0x112>
 8012c0c:	2b08      	cmp	r3, #8
 8012c0e:	d10b      	bne.n	8012c28 <_printf_i+0x144>
 8012c10:	6823      	ldr	r3, [r4, #0]
 8012c12:	07df      	lsls	r7, r3, #31
 8012c14:	d508      	bpl.n	8012c28 <_printf_i+0x144>
 8012c16:	6923      	ldr	r3, [r4, #16]
 8012c18:	6861      	ldr	r1, [r4, #4]
 8012c1a:	4299      	cmp	r1, r3
 8012c1c:	bfde      	ittt	le
 8012c1e:	2330      	movle	r3, #48	@ 0x30
 8012c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012c28:	1b92      	subs	r2, r2, r6
 8012c2a:	6122      	str	r2, [r4, #16]
 8012c2c:	f8cd a000 	str.w	sl, [sp]
 8012c30:	464b      	mov	r3, r9
 8012c32:	aa03      	add	r2, sp, #12
 8012c34:	4621      	mov	r1, r4
 8012c36:	4640      	mov	r0, r8
 8012c38:	f7ff fee6 	bl	8012a08 <_printf_common>
 8012c3c:	3001      	adds	r0, #1
 8012c3e:	d14a      	bne.n	8012cd6 <_printf_i+0x1f2>
 8012c40:	f04f 30ff 	mov.w	r0, #4294967295
 8012c44:	b004      	add	sp, #16
 8012c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c4a:	6823      	ldr	r3, [r4, #0]
 8012c4c:	f043 0320 	orr.w	r3, r3, #32
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	4833      	ldr	r0, [pc, #204]	@ (8012d20 <_printf_i+0x23c>)
 8012c54:	2778      	movs	r7, #120	@ 0x78
 8012c56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012c5a:	6823      	ldr	r3, [r4, #0]
 8012c5c:	6831      	ldr	r1, [r6, #0]
 8012c5e:	061f      	lsls	r7, r3, #24
 8012c60:	f851 5b04 	ldr.w	r5, [r1], #4
 8012c64:	d402      	bmi.n	8012c6c <_printf_i+0x188>
 8012c66:	065f      	lsls	r7, r3, #25
 8012c68:	bf48      	it	mi
 8012c6a:	b2ad      	uxthmi	r5, r5
 8012c6c:	6031      	str	r1, [r6, #0]
 8012c6e:	07d9      	lsls	r1, r3, #31
 8012c70:	bf44      	itt	mi
 8012c72:	f043 0320 	orrmi.w	r3, r3, #32
 8012c76:	6023      	strmi	r3, [r4, #0]
 8012c78:	b11d      	cbz	r5, 8012c82 <_printf_i+0x19e>
 8012c7a:	2310      	movs	r3, #16
 8012c7c:	e7ac      	b.n	8012bd8 <_printf_i+0xf4>
 8012c7e:	4827      	ldr	r0, [pc, #156]	@ (8012d1c <_printf_i+0x238>)
 8012c80:	e7e9      	b.n	8012c56 <_printf_i+0x172>
 8012c82:	6823      	ldr	r3, [r4, #0]
 8012c84:	f023 0320 	bic.w	r3, r3, #32
 8012c88:	6023      	str	r3, [r4, #0]
 8012c8a:	e7f6      	b.n	8012c7a <_printf_i+0x196>
 8012c8c:	4616      	mov	r6, r2
 8012c8e:	e7bd      	b.n	8012c0c <_printf_i+0x128>
 8012c90:	6833      	ldr	r3, [r6, #0]
 8012c92:	6825      	ldr	r5, [r4, #0]
 8012c94:	6961      	ldr	r1, [r4, #20]
 8012c96:	1d18      	adds	r0, r3, #4
 8012c98:	6030      	str	r0, [r6, #0]
 8012c9a:	062e      	lsls	r6, r5, #24
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	d501      	bpl.n	8012ca4 <_printf_i+0x1c0>
 8012ca0:	6019      	str	r1, [r3, #0]
 8012ca2:	e002      	b.n	8012caa <_printf_i+0x1c6>
 8012ca4:	0668      	lsls	r0, r5, #25
 8012ca6:	d5fb      	bpl.n	8012ca0 <_printf_i+0x1bc>
 8012ca8:	8019      	strh	r1, [r3, #0]
 8012caa:	2300      	movs	r3, #0
 8012cac:	6123      	str	r3, [r4, #16]
 8012cae:	4616      	mov	r6, r2
 8012cb0:	e7bc      	b.n	8012c2c <_printf_i+0x148>
 8012cb2:	6833      	ldr	r3, [r6, #0]
 8012cb4:	1d1a      	adds	r2, r3, #4
 8012cb6:	6032      	str	r2, [r6, #0]
 8012cb8:	681e      	ldr	r6, [r3, #0]
 8012cba:	6862      	ldr	r2, [r4, #4]
 8012cbc:	2100      	movs	r1, #0
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7ed fab6 	bl	8000230 <memchr>
 8012cc4:	b108      	cbz	r0, 8012cca <_printf_i+0x1e6>
 8012cc6:	1b80      	subs	r0, r0, r6
 8012cc8:	6060      	str	r0, [r4, #4]
 8012cca:	6863      	ldr	r3, [r4, #4]
 8012ccc:	6123      	str	r3, [r4, #16]
 8012cce:	2300      	movs	r3, #0
 8012cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cd4:	e7aa      	b.n	8012c2c <_printf_i+0x148>
 8012cd6:	6923      	ldr	r3, [r4, #16]
 8012cd8:	4632      	mov	r2, r6
 8012cda:	4649      	mov	r1, r9
 8012cdc:	4640      	mov	r0, r8
 8012cde:	47d0      	blx	sl
 8012ce0:	3001      	adds	r0, #1
 8012ce2:	d0ad      	beq.n	8012c40 <_printf_i+0x15c>
 8012ce4:	6823      	ldr	r3, [r4, #0]
 8012ce6:	079b      	lsls	r3, r3, #30
 8012ce8:	d413      	bmi.n	8012d12 <_printf_i+0x22e>
 8012cea:	68e0      	ldr	r0, [r4, #12]
 8012cec:	9b03      	ldr	r3, [sp, #12]
 8012cee:	4298      	cmp	r0, r3
 8012cf0:	bfb8      	it	lt
 8012cf2:	4618      	movlt	r0, r3
 8012cf4:	e7a6      	b.n	8012c44 <_printf_i+0x160>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	4632      	mov	r2, r6
 8012cfa:	4649      	mov	r1, r9
 8012cfc:	4640      	mov	r0, r8
 8012cfe:	47d0      	blx	sl
 8012d00:	3001      	adds	r0, #1
 8012d02:	d09d      	beq.n	8012c40 <_printf_i+0x15c>
 8012d04:	3501      	adds	r5, #1
 8012d06:	68e3      	ldr	r3, [r4, #12]
 8012d08:	9903      	ldr	r1, [sp, #12]
 8012d0a:	1a5b      	subs	r3, r3, r1
 8012d0c:	42ab      	cmp	r3, r5
 8012d0e:	dcf2      	bgt.n	8012cf6 <_printf_i+0x212>
 8012d10:	e7eb      	b.n	8012cea <_printf_i+0x206>
 8012d12:	2500      	movs	r5, #0
 8012d14:	f104 0619 	add.w	r6, r4, #25
 8012d18:	e7f5      	b.n	8012d06 <_printf_i+0x222>
 8012d1a:	bf00      	nop
 8012d1c:	080161aa 	.word	0x080161aa
 8012d20:	080161bb 	.word	0x080161bb

08012d24 <std>:
 8012d24:	2300      	movs	r3, #0
 8012d26:	b510      	push	{r4, lr}
 8012d28:	4604      	mov	r4, r0
 8012d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8012d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d32:	6083      	str	r3, [r0, #8]
 8012d34:	8181      	strh	r1, [r0, #12]
 8012d36:	6643      	str	r3, [r0, #100]	@ 0x64
 8012d38:	81c2      	strh	r2, [r0, #14]
 8012d3a:	6183      	str	r3, [r0, #24]
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	2208      	movs	r2, #8
 8012d40:	305c      	adds	r0, #92	@ 0x5c
 8012d42:	f000 f8f4 	bl	8012f2e <memset>
 8012d46:	4b0d      	ldr	r3, [pc, #52]	@ (8012d7c <std+0x58>)
 8012d48:	6263      	str	r3, [r4, #36]	@ 0x24
 8012d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012d80 <std+0x5c>)
 8012d4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8012d84 <std+0x60>)
 8012d50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012d52:	4b0d      	ldr	r3, [pc, #52]	@ (8012d88 <std+0x64>)
 8012d54:	6323      	str	r3, [r4, #48]	@ 0x30
 8012d56:	4b0d      	ldr	r3, [pc, #52]	@ (8012d8c <std+0x68>)
 8012d58:	6224      	str	r4, [r4, #32]
 8012d5a:	429c      	cmp	r4, r3
 8012d5c:	d006      	beq.n	8012d6c <std+0x48>
 8012d5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012d62:	4294      	cmp	r4, r2
 8012d64:	d002      	beq.n	8012d6c <std+0x48>
 8012d66:	33d0      	adds	r3, #208	@ 0xd0
 8012d68:	429c      	cmp	r4, r3
 8012d6a:	d105      	bne.n	8012d78 <std+0x54>
 8012d6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d74:	f000 b9ac 	b.w	80130d0 <__retarget_lock_init_recursive>
 8012d78:	bd10      	pop	{r4, pc}
 8012d7a:	bf00      	nop
 8012d7c:	08012ea9 	.word	0x08012ea9
 8012d80:	08012ecb 	.word	0x08012ecb
 8012d84:	08012f03 	.word	0x08012f03
 8012d88:	08012f27 	.word	0x08012f27
 8012d8c:	20000574 	.word	0x20000574

08012d90 <stdio_exit_handler>:
 8012d90:	4a02      	ldr	r2, [pc, #8]	@ (8012d9c <stdio_exit_handler+0xc>)
 8012d92:	4903      	ldr	r1, [pc, #12]	@ (8012da0 <stdio_exit_handler+0x10>)
 8012d94:	4803      	ldr	r0, [pc, #12]	@ (8012da4 <stdio_exit_handler+0x14>)
 8012d96:	f000 b869 	b.w	8012e6c <_fwalk_sglue>
 8012d9a:	bf00      	nop
 8012d9c:	20000028 	.word	0x20000028
 8012da0:	08014631 	.word	0x08014631
 8012da4:	20000038 	.word	0x20000038

08012da8 <cleanup_stdio>:
 8012da8:	6841      	ldr	r1, [r0, #4]
 8012daa:	4b0c      	ldr	r3, [pc, #48]	@ (8012ddc <cleanup_stdio+0x34>)
 8012dac:	4299      	cmp	r1, r3
 8012dae:	b510      	push	{r4, lr}
 8012db0:	4604      	mov	r4, r0
 8012db2:	d001      	beq.n	8012db8 <cleanup_stdio+0x10>
 8012db4:	f001 fc3c 	bl	8014630 <_fflush_r>
 8012db8:	68a1      	ldr	r1, [r4, #8]
 8012dba:	4b09      	ldr	r3, [pc, #36]	@ (8012de0 <cleanup_stdio+0x38>)
 8012dbc:	4299      	cmp	r1, r3
 8012dbe:	d002      	beq.n	8012dc6 <cleanup_stdio+0x1e>
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f001 fc35 	bl	8014630 <_fflush_r>
 8012dc6:	68e1      	ldr	r1, [r4, #12]
 8012dc8:	4b06      	ldr	r3, [pc, #24]	@ (8012de4 <cleanup_stdio+0x3c>)
 8012dca:	4299      	cmp	r1, r3
 8012dcc:	d004      	beq.n	8012dd8 <cleanup_stdio+0x30>
 8012dce:	4620      	mov	r0, r4
 8012dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dd4:	f001 bc2c 	b.w	8014630 <_fflush_r>
 8012dd8:	bd10      	pop	{r4, pc}
 8012dda:	bf00      	nop
 8012ddc:	20000574 	.word	0x20000574
 8012de0:	200005dc 	.word	0x200005dc
 8012de4:	20000644 	.word	0x20000644

08012de8 <global_stdio_init.part.0>:
 8012de8:	b510      	push	{r4, lr}
 8012dea:	4b0b      	ldr	r3, [pc, #44]	@ (8012e18 <global_stdio_init.part.0+0x30>)
 8012dec:	4c0b      	ldr	r4, [pc, #44]	@ (8012e1c <global_stdio_init.part.0+0x34>)
 8012dee:	4a0c      	ldr	r2, [pc, #48]	@ (8012e20 <global_stdio_init.part.0+0x38>)
 8012df0:	601a      	str	r2, [r3, #0]
 8012df2:	4620      	mov	r0, r4
 8012df4:	2200      	movs	r2, #0
 8012df6:	2104      	movs	r1, #4
 8012df8:	f7ff ff94 	bl	8012d24 <std>
 8012dfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012e00:	2201      	movs	r2, #1
 8012e02:	2109      	movs	r1, #9
 8012e04:	f7ff ff8e 	bl	8012d24 <std>
 8012e08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012e0c:	2202      	movs	r2, #2
 8012e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e12:	2112      	movs	r1, #18
 8012e14:	f7ff bf86 	b.w	8012d24 <std>
 8012e18:	200006ac 	.word	0x200006ac
 8012e1c:	20000574 	.word	0x20000574
 8012e20:	08012d91 	.word	0x08012d91

08012e24 <__sfp_lock_acquire>:
 8012e24:	4801      	ldr	r0, [pc, #4]	@ (8012e2c <__sfp_lock_acquire+0x8>)
 8012e26:	f000 b954 	b.w	80130d2 <__retarget_lock_acquire_recursive>
 8012e2a:	bf00      	nop
 8012e2c:	200006b5 	.word	0x200006b5

08012e30 <__sfp_lock_release>:
 8012e30:	4801      	ldr	r0, [pc, #4]	@ (8012e38 <__sfp_lock_release+0x8>)
 8012e32:	f000 b94f 	b.w	80130d4 <__retarget_lock_release_recursive>
 8012e36:	bf00      	nop
 8012e38:	200006b5 	.word	0x200006b5

08012e3c <__sinit>:
 8012e3c:	b510      	push	{r4, lr}
 8012e3e:	4604      	mov	r4, r0
 8012e40:	f7ff fff0 	bl	8012e24 <__sfp_lock_acquire>
 8012e44:	6a23      	ldr	r3, [r4, #32]
 8012e46:	b11b      	cbz	r3, 8012e50 <__sinit+0x14>
 8012e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e4c:	f7ff bff0 	b.w	8012e30 <__sfp_lock_release>
 8012e50:	4b04      	ldr	r3, [pc, #16]	@ (8012e64 <__sinit+0x28>)
 8012e52:	6223      	str	r3, [r4, #32]
 8012e54:	4b04      	ldr	r3, [pc, #16]	@ (8012e68 <__sinit+0x2c>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d1f5      	bne.n	8012e48 <__sinit+0xc>
 8012e5c:	f7ff ffc4 	bl	8012de8 <global_stdio_init.part.0>
 8012e60:	e7f2      	b.n	8012e48 <__sinit+0xc>
 8012e62:	bf00      	nop
 8012e64:	08012da9 	.word	0x08012da9
 8012e68:	200006ac 	.word	0x200006ac

08012e6c <_fwalk_sglue>:
 8012e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e70:	4607      	mov	r7, r0
 8012e72:	4688      	mov	r8, r1
 8012e74:	4614      	mov	r4, r2
 8012e76:	2600      	movs	r6, #0
 8012e78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012e7c:	f1b9 0901 	subs.w	r9, r9, #1
 8012e80:	d505      	bpl.n	8012e8e <_fwalk_sglue+0x22>
 8012e82:	6824      	ldr	r4, [r4, #0]
 8012e84:	2c00      	cmp	r4, #0
 8012e86:	d1f7      	bne.n	8012e78 <_fwalk_sglue+0xc>
 8012e88:	4630      	mov	r0, r6
 8012e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e8e:	89ab      	ldrh	r3, [r5, #12]
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d907      	bls.n	8012ea4 <_fwalk_sglue+0x38>
 8012e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e98:	3301      	adds	r3, #1
 8012e9a:	d003      	beq.n	8012ea4 <_fwalk_sglue+0x38>
 8012e9c:	4629      	mov	r1, r5
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	47c0      	blx	r8
 8012ea2:	4306      	orrs	r6, r0
 8012ea4:	3568      	adds	r5, #104	@ 0x68
 8012ea6:	e7e9      	b.n	8012e7c <_fwalk_sglue+0x10>

08012ea8 <__sread>:
 8012ea8:	b510      	push	{r4, lr}
 8012eaa:	460c      	mov	r4, r1
 8012eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb0:	f000 f89c 	bl	8012fec <_read_r>
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	bfab      	itete	ge
 8012eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012eba:	89a3      	ldrhlt	r3, [r4, #12]
 8012ebc:	181b      	addge	r3, r3, r0
 8012ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012ec2:	bfac      	ite	ge
 8012ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012ec6:	81a3      	strhlt	r3, [r4, #12]
 8012ec8:	bd10      	pop	{r4, pc}

08012eca <__swrite>:
 8012eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ece:	461f      	mov	r7, r3
 8012ed0:	898b      	ldrh	r3, [r1, #12]
 8012ed2:	05db      	lsls	r3, r3, #23
 8012ed4:	4605      	mov	r5, r0
 8012ed6:	460c      	mov	r4, r1
 8012ed8:	4616      	mov	r6, r2
 8012eda:	d505      	bpl.n	8012ee8 <__swrite+0x1e>
 8012edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ee0:	2302      	movs	r3, #2
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f000 f870 	bl	8012fc8 <_lseek_r>
 8012ee8:	89a3      	ldrh	r3, [r4, #12]
 8012eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012ef2:	81a3      	strh	r3, [r4, #12]
 8012ef4:	4632      	mov	r2, r6
 8012ef6:	463b      	mov	r3, r7
 8012ef8:	4628      	mov	r0, r5
 8012efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012efe:	f000 b8ab 	b.w	8013058 <_write_r>

08012f02 <__sseek>:
 8012f02:	b510      	push	{r4, lr}
 8012f04:	460c      	mov	r4, r1
 8012f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f0a:	f000 f85d 	bl	8012fc8 <_lseek_r>
 8012f0e:	1c43      	adds	r3, r0, #1
 8012f10:	89a3      	ldrh	r3, [r4, #12]
 8012f12:	bf15      	itete	ne
 8012f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012f1e:	81a3      	strheq	r3, [r4, #12]
 8012f20:	bf18      	it	ne
 8012f22:	81a3      	strhne	r3, [r4, #12]
 8012f24:	bd10      	pop	{r4, pc}

08012f26 <__sclose>:
 8012f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f2a:	f000 b83d 	b.w	8012fa8 <_close_r>

08012f2e <memset>:
 8012f2e:	4402      	add	r2, r0
 8012f30:	4603      	mov	r3, r0
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d100      	bne.n	8012f38 <memset+0xa>
 8012f36:	4770      	bx	lr
 8012f38:	f803 1b01 	strb.w	r1, [r3], #1
 8012f3c:	e7f9      	b.n	8012f32 <memset+0x4>

08012f3e <_raise_r>:
 8012f3e:	291f      	cmp	r1, #31
 8012f40:	b538      	push	{r3, r4, r5, lr}
 8012f42:	4605      	mov	r5, r0
 8012f44:	460c      	mov	r4, r1
 8012f46:	d904      	bls.n	8012f52 <_raise_r+0x14>
 8012f48:	2316      	movs	r3, #22
 8012f4a:	6003      	str	r3, [r0, #0]
 8012f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f50:	bd38      	pop	{r3, r4, r5, pc}
 8012f52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f54:	b112      	cbz	r2, 8012f5c <_raise_r+0x1e>
 8012f56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f5a:	b94b      	cbnz	r3, 8012f70 <_raise_r+0x32>
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f000 f869 	bl	8013034 <_getpid_r>
 8012f62:	4622      	mov	r2, r4
 8012f64:	4601      	mov	r1, r0
 8012f66:	4628      	mov	r0, r5
 8012f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f6c:	f000 b850 	b.w	8013010 <_kill_r>
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d00a      	beq.n	8012f8a <_raise_r+0x4c>
 8012f74:	1c59      	adds	r1, r3, #1
 8012f76:	d103      	bne.n	8012f80 <_raise_r+0x42>
 8012f78:	2316      	movs	r3, #22
 8012f7a:	6003      	str	r3, [r0, #0]
 8012f7c:	2001      	movs	r0, #1
 8012f7e:	e7e7      	b.n	8012f50 <_raise_r+0x12>
 8012f80:	2100      	movs	r1, #0
 8012f82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012f86:	4620      	mov	r0, r4
 8012f88:	4798      	blx	r3
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	e7e0      	b.n	8012f50 <_raise_r+0x12>
	...

08012f90 <raise>:
 8012f90:	4b02      	ldr	r3, [pc, #8]	@ (8012f9c <raise+0xc>)
 8012f92:	4601      	mov	r1, r0
 8012f94:	6818      	ldr	r0, [r3, #0]
 8012f96:	f7ff bfd2 	b.w	8012f3e <_raise_r>
 8012f9a:	bf00      	nop
 8012f9c:	20000034 	.word	0x20000034

08012fa0 <_localeconv_r>:
 8012fa0:	4800      	ldr	r0, [pc, #0]	@ (8012fa4 <_localeconv_r+0x4>)
 8012fa2:	4770      	bx	lr
 8012fa4:	20000174 	.word	0x20000174

08012fa8 <_close_r>:
 8012fa8:	b538      	push	{r3, r4, r5, lr}
 8012faa:	4d06      	ldr	r5, [pc, #24]	@ (8012fc4 <_close_r+0x1c>)
 8012fac:	2300      	movs	r3, #0
 8012fae:	4604      	mov	r4, r0
 8012fb0:	4608      	mov	r0, r1
 8012fb2:	602b      	str	r3, [r5, #0]
 8012fb4:	f7fa fad6 	bl	800d564 <_close>
 8012fb8:	1c43      	adds	r3, r0, #1
 8012fba:	d102      	bne.n	8012fc2 <_close_r+0x1a>
 8012fbc:	682b      	ldr	r3, [r5, #0]
 8012fbe:	b103      	cbz	r3, 8012fc2 <_close_r+0x1a>
 8012fc0:	6023      	str	r3, [r4, #0]
 8012fc2:	bd38      	pop	{r3, r4, r5, pc}
 8012fc4:	200006b0 	.word	0x200006b0

08012fc8 <_lseek_r>:
 8012fc8:	b538      	push	{r3, r4, r5, lr}
 8012fca:	4d07      	ldr	r5, [pc, #28]	@ (8012fe8 <_lseek_r+0x20>)
 8012fcc:	4604      	mov	r4, r0
 8012fce:	4608      	mov	r0, r1
 8012fd0:	4611      	mov	r1, r2
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	602a      	str	r2, [r5, #0]
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	f7fa faeb 	bl	800d5b2 <_lseek>
 8012fdc:	1c43      	adds	r3, r0, #1
 8012fde:	d102      	bne.n	8012fe6 <_lseek_r+0x1e>
 8012fe0:	682b      	ldr	r3, [r5, #0]
 8012fe2:	b103      	cbz	r3, 8012fe6 <_lseek_r+0x1e>
 8012fe4:	6023      	str	r3, [r4, #0]
 8012fe6:	bd38      	pop	{r3, r4, r5, pc}
 8012fe8:	200006b0 	.word	0x200006b0

08012fec <_read_r>:
 8012fec:	b538      	push	{r3, r4, r5, lr}
 8012fee:	4d07      	ldr	r5, [pc, #28]	@ (801300c <_read_r+0x20>)
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	4608      	mov	r0, r1
 8012ff4:	4611      	mov	r1, r2
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	602a      	str	r2, [r5, #0]
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	f7fa fa79 	bl	800d4f2 <_read>
 8013000:	1c43      	adds	r3, r0, #1
 8013002:	d102      	bne.n	801300a <_read_r+0x1e>
 8013004:	682b      	ldr	r3, [r5, #0]
 8013006:	b103      	cbz	r3, 801300a <_read_r+0x1e>
 8013008:	6023      	str	r3, [r4, #0]
 801300a:	bd38      	pop	{r3, r4, r5, pc}
 801300c:	200006b0 	.word	0x200006b0

08013010 <_kill_r>:
 8013010:	b538      	push	{r3, r4, r5, lr}
 8013012:	4d07      	ldr	r5, [pc, #28]	@ (8013030 <_kill_r+0x20>)
 8013014:	2300      	movs	r3, #0
 8013016:	4604      	mov	r4, r0
 8013018:	4608      	mov	r0, r1
 801301a:	4611      	mov	r1, r2
 801301c:	602b      	str	r3, [r5, #0]
 801301e:	f7fa fa4d 	bl	800d4bc <_kill>
 8013022:	1c43      	adds	r3, r0, #1
 8013024:	d102      	bne.n	801302c <_kill_r+0x1c>
 8013026:	682b      	ldr	r3, [r5, #0]
 8013028:	b103      	cbz	r3, 801302c <_kill_r+0x1c>
 801302a:	6023      	str	r3, [r4, #0]
 801302c:	bd38      	pop	{r3, r4, r5, pc}
 801302e:	bf00      	nop
 8013030:	200006b0 	.word	0x200006b0

08013034 <_getpid_r>:
 8013034:	f7fa ba3a 	b.w	800d4ac <_getpid>

08013038 <_sbrk_r>:
 8013038:	b538      	push	{r3, r4, r5, lr}
 801303a:	4d06      	ldr	r5, [pc, #24]	@ (8013054 <_sbrk_r+0x1c>)
 801303c:	2300      	movs	r3, #0
 801303e:	4604      	mov	r4, r0
 8013040:	4608      	mov	r0, r1
 8013042:	602b      	str	r3, [r5, #0]
 8013044:	f7fa fac2 	bl	800d5cc <_sbrk>
 8013048:	1c43      	adds	r3, r0, #1
 801304a:	d102      	bne.n	8013052 <_sbrk_r+0x1a>
 801304c:	682b      	ldr	r3, [r5, #0]
 801304e:	b103      	cbz	r3, 8013052 <_sbrk_r+0x1a>
 8013050:	6023      	str	r3, [r4, #0]
 8013052:	bd38      	pop	{r3, r4, r5, pc}
 8013054:	200006b0 	.word	0x200006b0

08013058 <_write_r>:
 8013058:	b538      	push	{r3, r4, r5, lr}
 801305a:	4d07      	ldr	r5, [pc, #28]	@ (8013078 <_write_r+0x20>)
 801305c:	4604      	mov	r4, r0
 801305e:	4608      	mov	r0, r1
 8013060:	4611      	mov	r1, r2
 8013062:	2200      	movs	r2, #0
 8013064:	602a      	str	r2, [r5, #0]
 8013066:	461a      	mov	r2, r3
 8013068:	f7fa fa60 	bl	800d52c <_write>
 801306c:	1c43      	adds	r3, r0, #1
 801306e:	d102      	bne.n	8013076 <_write_r+0x1e>
 8013070:	682b      	ldr	r3, [r5, #0]
 8013072:	b103      	cbz	r3, 8013076 <_write_r+0x1e>
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	bd38      	pop	{r3, r4, r5, pc}
 8013078:	200006b0 	.word	0x200006b0

0801307c <__errno>:
 801307c:	4b01      	ldr	r3, [pc, #4]	@ (8013084 <__errno+0x8>)
 801307e:	6818      	ldr	r0, [r3, #0]
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	20000034 	.word	0x20000034

08013088 <__libc_init_array>:
 8013088:	b570      	push	{r4, r5, r6, lr}
 801308a:	4d0d      	ldr	r5, [pc, #52]	@ (80130c0 <__libc_init_array+0x38>)
 801308c:	4c0d      	ldr	r4, [pc, #52]	@ (80130c4 <__libc_init_array+0x3c>)
 801308e:	1b64      	subs	r4, r4, r5
 8013090:	10a4      	asrs	r4, r4, #2
 8013092:	2600      	movs	r6, #0
 8013094:	42a6      	cmp	r6, r4
 8013096:	d109      	bne.n	80130ac <__libc_init_array+0x24>
 8013098:	4d0b      	ldr	r5, [pc, #44]	@ (80130c8 <__libc_init_array+0x40>)
 801309a:	4c0c      	ldr	r4, [pc, #48]	@ (80130cc <__libc_init_array+0x44>)
 801309c:	f001 fdb4 	bl	8014c08 <_init>
 80130a0:	1b64      	subs	r4, r4, r5
 80130a2:	10a4      	asrs	r4, r4, #2
 80130a4:	2600      	movs	r6, #0
 80130a6:	42a6      	cmp	r6, r4
 80130a8:	d105      	bne.n	80130b6 <__libc_init_array+0x2e>
 80130aa:	bd70      	pop	{r4, r5, r6, pc}
 80130ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80130b0:	4798      	blx	r3
 80130b2:	3601      	adds	r6, #1
 80130b4:	e7ee      	b.n	8013094 <__libc_init_array+0xc>
 80130b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ba:	4798      	blx	r3
 80130bc:	3601      	adds	r6, #1
 80130be:	e7f2      	b.n	80130a6 <__libc_init_array+0x1e>
 80130c0:	08018490 	.word	0x08018490
 80130c4:	08018490 	.word	0x08018490
 80130c8:	08018490 	.word	0x08018490
 80130cc:	08018498 	.word	0x08018498

080130d0 <__retarget_lock_init_recursive>:
 80130d0:	4770      	bx	lr

080130d2 <__retarget_lock_acquire_recursive>:
 80130d2:	4770      	bx	lr

080130d4 <__retarget_lock_release_recursive>:
 80130d4:	4770      	bx	lr

080130d6 <memcpy>:
 80130d6:	440a      	add	r2, r1
 80130d8:	4291      	cmp	r1, r2
 80130da:	f100 33ff 	add.w	r3, r0, #4294967295
 80130de:	d100      	bne.n	80130e2 <memcpy+0xc>
 80130e0:	4770      	bx	lr
 80130e2:	b510      	push	{r4, lr}
 80130e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130ec:	4291      	cmp	r1, r2
 80130ee:	d1f9      	bne.n	80130e4 <memcpy+0xe>
 80130f0:	bd10      	pop	{r4, pc}

080130f2 <quorem>:
 80130f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f6:	6903      	ldr	r3, [r0, #16]
 80130f8:	690c      	ldr	r4, [r1, #16]
 80130fa:	42a3      	cmp	r3, r4
 80130fc:	4607      	mov	r7, r0
 80130fe:	db7e      	blt.n	80131fe <quorem+0x10c>
 8013100:	3c01      	subs	r4, #1
 8013102:	f101 0814 	add.w	r8, r1, #20
 8013106:	00a3      	lsls	r3, r4, #2
 8013108:	f100 0514 	add.w	r5, r0, #20
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013112:	9301      	str	r3, [sp, #4]
 8013114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801311c:	3301      	adds	r3, #1
 801311e:	429a      	cmp	r2, r3
 8013120:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013124:	fbb2 f6f3 	udiv	r6, r2, r3
 8013128:	d32e      	bcc.n	8013188 <quorem+0x96>
 801312a:	f04f 0a00 	mov.w	sl, #0
 801312e:	46c4      	mov	ip, r8
 8013130:	46ae      	mov	lr, r5
 8013132:	46d3      	mov	fp, sl
 8013134:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013138:	b298      	uxth	r0, r3
 801313a:	fb06 a000 	mla	r0, r6, r0, sl
 801313e:	0c02      	lsrs	r2, r0, #16
 8013140:	0c1b      	lsrs	r3, r3, #16
 8013142:	fb06 2303 	mla	r3, r6, r3, r2
 8013146:	f8de 2000 	ldr.w	r2, [lr]
 801314a:	b280      	uxth	r0, r0
 801314c:	b292      	uxth	r2, r2
 801314e:	1a12      	subs	r2, r2, r0
 8013150:	445a      	add	r2, fp
 8013152:	f8de 0000 	ldr.w	r0, [lr]
 8013156:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801315a:	b29b      	uxth	r3, r3
 801315c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013160:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013164:	b292      	uxth	r2, r2
 8013166:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801316a:	45e1      	cmp	r9, ip
 801316c:	f84e 2b04 	str.w	r2, [lr], #4
 8013170:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013174:	d2de      	bcs.n	8013134 <quorem+0x42>
 8013176:	9b00      	ldr	r3, [sp, #0]
 8013178:	58eb      	ldr	r3, [r5, r3]
 801317a:	b92b      	cbnz	r3, 8013188 <quorem+0x96>
 801317c:	9b01      	ldr	r3, [sp, #4]
 801317e:	3b04      	subs	r3, #4
 8013180:	429d      	cmp	r5, r3
 8013182:	461a      	mov	r2, r3
 8013184:	d32f      	bcc.n	80131e6 <quorem+0xf4>
 8013186:	613c      	str	r4, [r7, #16]
 8013188:	4638      	mov	r0, r7
 801318a:	f001 f8c5 	bl	8014318 <__mcmp>
 801318e:	2800      	cmp	r0, #0
 8013190:	db25      	blt.n	80131de <quorem+0xec>
 8013192:	4629      	mov	r1, r5
 8013194:	2000      	movs	r0, #0
 8013196:	f858 2b04 	ldr.w	r2, [r8], #4
 801319a:	f8d1 c000 	ldr.w	ip, [r1]
 801319e:	fa1f fe82 	uxth.w	lr, r2
 80131a2:	fa1f f38c 	uxth.w	r3, ip
 80131a6:	eba3 030e 	sub.w	r3, r3, lr
 80131aa:	4403      	add	r3, r0
 80131ac:	0c12      	lsrs	r2, r2, #16
 80131ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80131b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131bc:	45c1      	cmp	r9, r8
 80131be:	f841 3b04 	str.w	r3, [r1], #4
 80131c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80131c6:	d2e6      	bcs.n	8013196 <quorem+0xa4>
 80131c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131d0:	b922      	cbnz	r2, 80131dc <quorem+0xea>
 80131d2:	3b04      	subs	r3, #4
 80131d4:	429d      	cmp	r5, r3
 80131d6:	461a      	mov	r2, r3
 80131d8:	d30b      	bcc.n	80131f2 <quorem+0x100>
 80131da:	613c      	str	r4, [r7, #16]
 80131dc:	3601      	adds	r6, #1
 80131de:	4630      	mov	r0, r6
 80131e0:	b003      	add	sp, #12
 80131e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e6:	6812      	ldr	r2, [r2, #0]
 80131e8:	3b04      	subs	r3, #4
 80131ea:	2a00      	cmp	r2, #0
 80131ec:	d1cb      	bne.n	8013186 <quorem+0x94>
 80131ee:	3c01      	subs	r4, #1
 80131f0:	e7c6      	b.n	8013180 <quorem+0x8e>
 80131f2:	6812      	ldr	r2, [r2, #0]
 80131f4:	3b04      	subs	r3, #4
 80131f6:	2a00      	cmp	r2, #0
 80131f8:	d1ef      	bne.n	80131da <quorem+0xe8>
 80131fa:	3c01      	subs	r4, #1
 80131fc:	e7ea      	b.n	80131d4 <quorem+0xe2>
 80131fe:	2000      	movs	r0, #0
 8013200:	e7ee      	b.n	80131e0 <quorem+0xee>
 8013202:	0000      	movs	r0, r0
 8013204:	0000      	movs	r0, r0
	...

08013208 <_dtoa_r>:
 8013208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320c:	69c7      	ldr	r7, [r0, #28]
 801320e:	b099      	sub	sp, #100	@ 0x64
 8013210:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013214:	ec55 4b10 	vmov	r4, r5, d0
 8013218:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801321a:	9109      	str	r1, [sp, #36]	@ 0x24
 801321c:	4683      	mov	fp, r0
 801321e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013220:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013222:	b97f      	cbnz	r7, 8013244 <_dtoa_r+0x3c>
 8013224:	2010      	movs	r0, #16
 8013226:	f7ff f859 	bl	80122dc <malloc>
 801322a:	4602      	mov	r2, r0
 801322c:	f8cb 001c 	str.w	r0, [fp, #28]
 8013230:	b920      	cbnz	r0, 801323c <_dtoa_r+0x34>
 8013232:	4ba7      	ldr	r3, [pc, #668]	@ (80134d0 <_dtoa_r+0x2c8>)
 8013234:	21ef      	movs	r1, #239	@ 0xef
 8013236:	48a7      	ldr	r0, [pc, #668]	@ (80134d4 <_dtoa_r+0x2cc>)
 8013238:	f001 fa22 	bl	8014680 <__assert_func>
 801323c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013240:	6007      	str	r7, [r0, #0]
 8013242:	60c7      	str	r7, [r0, #12]
 8013244:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013248:	6819      	ldr	r1, [r3, #0]
 801324a:	b159      	cbz	r1, 8013264 <_dtoa_r+0x5c>
 801324c:	685a      	ldr	r2, [r3, #4]
 801324e:	604a      	str	r2, [r1, #4]
 8013250:	2301      	movs	r3, #1
 8013252:	4093      	lsls	r3, r2
 8013254:	608b      	str	r3, [r1, #8]
 8013256:	4658      	mov	r0, fp
 8013258:	f000 fe24 	bl	8013ea4 <_Bfree>
 801325c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013260:	2200      	movs	r2, #0
 8013262:	601a      	str	r2, [r3, #0]
 8013264:	1e2b      	subs	r3, r5, #0
 8013266:	bfb9      	ittee	lt
 8013268:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801326c:	9303      	strlt	r3, [sp, #12]
 801326e:	2300      	movge	r3, #0
 8013270:	6033      	strge	r3, [r6, #0]
 8013272:	9f03      	ldr	r7, [sp, #12]
 8013274:	4b98      	ldr	r3, [pc, #608]	@ (80134d8 <_dtoa_r+0x2d0>)
 8013276:	bfbc      	itt	lt
 8013278:	2201      	movlt	r2, #1
 801327a:	6032      	strlt	r2, [r6, #0]
 801327c:	43bb      	bics	r3, r7
 801327e:	d112      	bne.n	80132a6 <_dtoa_r+0x9e>
 8013280:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013282:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013286:	6013      	str	r3, [r2, #0]
 8013288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801328c:	4323      	orrs	r3, r4
 801328e:	f000 854d 	beq.w	8013d2c <_dtoa_r+0xb24>
 8013292:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013294:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80134ec <_dtoa_r+0x2e4>
 8013298:	2b00      	cmp	r3, #0
 801329a:	f000 854f 	beq.w	8013d3c <_dtoa_r+0xb34>
 801329e:	f10a 0303 	add.w	r3, sl, #3
 80132a2:	f000 bd49 	b.w	8013d38 <_dtoa_r+0xb30>
 80132a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132aa:	2200      	movs	r2, #0
 80132ac:	ec51 0b17 	vmov	r0, r1, d7
 80132b0:	2300      	movs	r3, #0
 80132b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80132b6:	f7ed fc37 	bl	8000b28 <__aeabi_dcmpeq>
 80132ba:	4680      	mov	r8, r0
 80132bc:	b158      	cbz	r0, 80132d6 <_dtoa_r+0xce>
 80132be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80132c0:	2301      	movs	r3, #1
 80132c2:	6013      	str	r3, [r2, #0]
 80132c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80132c6:	b113      	cbz	r3, 80132ce <_dtoa_r+0xc6>
 80132c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80132ca:	4b84      	ldr	r3, [pc, #528]	@ (80134dc <_dtoa_r+0x2d4>)
 80132cc:	6013      	str	r3, [r2, #0]
 80132ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80134f0 <_dtoa_r+0x2e8>
 80132d2:	f000 bd33 	b.w	8013d3c <_dtoa_r+0xb34>
 80132d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80132da:	aa16      	add	r2, sp, #88	@ 0x58
 80132dc:	a917      	add	r1, sp, #92	@ 0x5c
 80132de:	4658      	mov	r0, fp
 80132e0:	f001 f8ca 	bl	8014478 <__d2b>
 80132e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80132e8:	4681      	mov	r9, r0
 80132ea:	2e00      	cmp	r6, #0
 80132ec:	d077      	beq.n	80133de <_dtoa_r+0x1d6>
 80132ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80132f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80132f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80132f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80132fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013300:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013304:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013308:	4619      	mov	r1, r3
 801330a:	2200      	movs	r2, #0
 801330c:	4b74      	ldr	r3, [pc, #464]	@ (80134e0 <_dtoa_r+0x2d8>)
 801330e:	f7ec ffeb 	bl	80002e8 <__aeabi_dsub>
 8013312:	a369      	add	r3, pc, #420	@ (adr r3, 80134b8 <_dtoa_r+0x2b0>)
 8013314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013318:	f7ed f99e 	bl	8000658 <__aeabi_dmul>
 801331c:	a368      	add	r3, pc, #416	@ (adr r3, 80134c0 <_dtoa_r+0x2b8>)
 801331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013322:	f7ec ffe3 	bl	80002ec <__adddf3>
 8013326:	4604      	mov	r4, r0
 8013328:	4630      	mov	r0, r6
 801332a:	460d      	mov	r5, r1
 801332c:	f7ed f92a 	bl	8000584 <__aeabi_i2d>
 8013330:	a365      	add	r3, pc, #404	@ (adr r3, 80134c8 <_dtoa_r+0x2c0>)
 8013332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013336:	f7ed f98f 	bl	8000658 <__aeabi_dmul>
 801333a:	4602      	mov	r2, r0
 801333c:	460b      	mov	r3, r1
 801333e:	4620      	mov	r0, r4
 8013340:	4629      	mov	r1, r5
 8013342:	f7ec ffd3 	bl	80002ec <__adddf3>
 8013346:	4604      	mov	r4, r0
 8013348:	460d      	mov	r5, r1
 801334a:	f7ed fc35 	bl	8000bb8 <__aeabi_d2iz>
 801334e:	2200      	movs	r2, #0
 8013350:	4607      	mov	r7, r0
 8013352:	2300      	movs	r3, #0
 8013354:	4620      	mov	r0, r4
 8013356:	4629      	mov	r1, r5
 8013358:	f7ed fbf0 	bl	8000b3c <__aeabi_dcmplt>
 801335c:	b140      	cbz	r0, 8013370 <_dtoa_r+0x168>
 801335e:	4638      	mov	r0, r7
 8013360:	f7ed f910 	bl	8000584 <__aeabi_i2d>
 8013364:	4622      	mov	r2, r4
 8013366:	462b      	mov	r3, r5
 8013368:	f7ed fbde 	bl	8000b28 <__aeabi_dcmpeq>
 801336c:	b900      	cbnz	r0, 8013370 <_dtoa_r+0x168>
 801336e:	3f01      	subs	r7, #1
 8013370:	2f16      	cmp	r7, #22
 8013372:	d851      	bhi.n	8013418 <_dtoa_r+0x210>
 8013374:	4b5b      	ldr	r3, [pc, #364]	@ (80134e4 <_dtoa_r+0x2dc>)
 8013376:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013382:	f7ed fbdb 	bl	8000b3c <__aeabi_dcmplt>
 8013386:	2800      	cmp	r0, #0
 8013388:	d048      	beq.n	801341c <_dtoa_r+0x214>
 801338a:	3f01      	subs	r7, #1
 801338c:	2300      	movs	r3, #0
 801338e:	9312      	str	r3, [sp, #72]	@ 0x48
 8013390:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013392:	1b9b      	subs	r3, r3, r6
 8013394:	1e5a      	subs	r2, r3, #1
 8013396:	bf44      	itt	mi
 8013398:	f1c3 0801 	rsbmi	r8, r3, #1
 801339c:	2300      	movmi	r3, #0
 801339e:	9208      	str	r2, [sp, #32]
 80133a0:	bf54      	ite	pl
 80133a2:	f04f 0800 	movpl.w	r8, #0
 80133a6:	9308      	strmi	r3, [sp, #32]
 80133a8:	2f00      	cmp	r7, #0
 80133aa:	db39      	blt.n	8013420 <_dtoa_r+0x218>
 80133ac:	9b08      	ldr	r3, [sp, #32]
 80133ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80133b0:	443b      	add	r3, r7
 80133b2:	9308      	str	r3, [sp, #32]
 80133b4:	2300      	movs	r3, #0
 80133b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80133b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133ba:	2b09      	cmp	r3, #9
 80133bc:	d864      	bhi.n	8013488 <_dtoa_r+0x280>
 80133be:	2b05      	cmp	r3, #5
 80133c0:	bfc4      	itt	gt
 80133c2:	3b04      	subgt	r3, #4
 80133c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80133c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133c8:	f1a3 0302 	sub.w	r3, r3, #2
 80133cc:	bfcc      	ite	gt
 80133ce:	2400      	movgt	r4, #0
 80133d0:	2401      	movle	r4, #1
 80133d2:	2b03      	cmp	r3, #3
 80133d4:	d863      	bhi.n	801349e <_dtoa_r+0x296>
 80133d6:	e8df f003 	tbb	[pc, r3]
 80133da:	372a      	.short	0x372a
 80133dc:	5535      	.short	0x5535
 80133de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80133e2:	441e      	add	r6, r3
 80133e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80133e8:	2b20      	cmp	r3, #32
 80133ea:	bfc1      	itttt	gt
 80133ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80133f0:	409f      	lslgt	r7, r3
 80133f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80133f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80133fa:	bfd6      	itet	le
 80133fc:	f1c3 0320 	rsble	r3, r3, #32
 8013400:	ea47 0003 	orrgt.w	r0, r7, r3
 8013404:	fa04 f003 	lslle.w	r0, r4, r3
 8013408:	f7ed f8ac 	bl	8000564 <__aeabi_ui2d>
 801340c:	2201      	movs	r2, #1
 801340e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013412:	3e01      	subs	r6, #1
 8013414:	9214      	str	r2, [sp, #80]	@ 0x50
 8013416:	e777      	b.n	8013308 <_dtoa_r+0x100>
 8013418:	2301      	movs	r3, #1
 801341a:	e7b8      	b.n	801338e <_dtoa_r+0x186>
 801341c:	9012      	str	r0, [sp, #72]	@ 0x48
 801341e:	e7b7      	b.n	8013390 <_dtoa_r+0x188>
 8013420:	427b      	negs	r3, r7
 8013422:	930a      	str	r3, [sp, #40]	@ 0x28
 8013424:	2300      	movs	r3, #0
 8013426:	eba8 0807 	sub.w	r8, r8, r7
 801342a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801342c:	e7c4      	b.n	80133b8 <_dtoa_r+0x1b0>
 801342e:	2300      	movs	r3, #0
 8013430:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013434:	2b00      	cmp	r3, #0
 8013436:	dc35      	bgt.n	80134a4 <_dtoa_r+0x29c>
 8013438:	2301      	movs	r3, #1
 801343a:	9300      	str	r3, [sp, #0]
 801343c:	9307      	str	r3, [sp, #28]
 801343e:	461a      	mov	r2, r3
 8013440:	920e      	str	r2, [sp, #56]	@ 0x38
 8013442:	e00b      	b.n	801345c <_dtoa_r+0x254>
 8013444:	2301      	movs	r3, #1
 8013446:	e7f3      	b.n	8013430 <_dtoa_r+0x228>
 8013448:	2300      	movs	r3, #0
 801344a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801344c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801344e:	18fb      	adds	r3, r7, r3
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	3301      	adds	r3, #1
 8013454:	2b01      	cmp	r3, #1
 8013456:	9307      	str	r3, [sp, #28]
 8013458:	bfb8      	it	lt
 801345a:	2301      	movlt	r3, #1
 801345c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013460:	2100      	movs	r1, #0
 8013462:	2204      	movs	r2, #4
 8013464:	f102 0514 	add.w	r5, r2, #20
 8013468:	429d      	cmp	r5, r3
 801346a:	d91f      	bls.n	80134ac <_dtoa_r+0x2a4>
 801346c:	6041      	str	r1, [r0, #4]
 801346e:	4658      	mov	r0, fp
 8013470:	f000 fcd8 	bl	8013e24 <_Balloc>
 8013474:	4682      	mov	sl, r0
 8013476:	2800      	cmp	r0, #0
 8013478:	d13c      	bne.n	80134f4 <_dtoa_r+0x2ec>
 801347a:	4b1b      	ldr	r3, [pc, #108]	@ (80134e8 <_dtoa_r+0x2e0>)
 801347c:	4602      	mov	r2, r0
 801347e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013482:	e6d8      	b.n	8013236 <_dtoa_r+0x2e>
 8013484:	2301      	movs	r3, #1
 8013486:	e7e0      	b.n	801344a <_dtoa_r+0x242>
 8013488:	2401      	movs	r4, #1
 801348a:	2300      	movs	r3, #0
 801348c:	9309      	str	r3, [sp, #36]	@ 0x24
 801348e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013490:	f04f 33ff 	mov.w	r3, #4294967295
 8013494:	9300      	str	r3, [sp, #0]
 8013496:	9307      	str	r3, [sp, #28]
 8013498:	2200      	movs	r2, #0
 801349a:	2312      	movs	r3, #18
 801349c:	e7d0      	b.n	8013440 <_dtoa_r+0x238>
 801349e:	2301      	movs	r3, #1
 80134a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80134a2:	e7f5      	b.n	8013490 <_dtoa_r+0x288>
 80134a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	9307      	str	r3, [sp, #28]
 80134aa:	e7d7      	b.n	801345c <_dtoa_r+0x254>
 80134ac:	3101      	adds	r1, #1
 80134ae:	0052      	lsls	r2, r2, #1
 80134b0:	e7d8      	b.n	8013464 <_dtoa_r+0x25c>
 80134b2:	bf00      	nop
 80134b4:	f3af 8000 	nop.w
 80134b8:	636f4361 	.word	0x636f4361
 80134bc:	3fd287a7 	.word	0x3fd287a7
 80134c0:	8b60c8b3 	.word	0x8b60c8b3
 80134c4:	3fc68a28 	.word	0x3fc68a28
 80134c8:	509f79fb 	.word	0x509f79fb
 80134cc:	3fd34413 	.word	0x3fd34413
 80134d0:	080161d9 	.word	0x080161d9
 80134d4:	080161f0 	.word	0x080161f0
 80134d8:	7ff00000 	.word	0x7ff00000
 80134dc:	080161a9 	.word	0x080161a9
 80134e0:	3ff80000 	.word	0x3ff80000
 80134e4:	080162e8 	.word	0x080162e8
 80134e8:	08016248 	.word	0x08016248
 80134ec:	080161d5 	.word	0x080161d5
 80134f0:	080161a8 	.word	0x080161a8
 80134f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80134f8:	6018      	str	r0, [r3, #0]
 80134fa:	9b07      	ldr	r3, [sp, #28]
 80134fc:	2b0e      	cmp	r3, #14
 80134fe:	f200 80a4 	bhi.w	801364a <_dtoa_r+0x442>
 8013502:	2c00      	cmp	r4, #0
 8013504:	f000 80a1 	beq.w	801364a <_dtoa_r+0x442>
 8013508:	2f00      	cmp	r7, #0
 801350a:	dd33      	ble.n	8013574 <_dtoa_r+0x36c>
 801350c:	4bad      	ldr	r3, [pc, #692]	@ (80137c4 <_dtoa_r+0x5bc>)
 801350e:	f007 020f 	and.w	r2, r7, #15
 8013512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013516:	ed93 7b00 	vldr	d7, [r3]
 801351a:	05f8      	lsls	r0, r7, #23
 801351c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013520:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013524:	d516      	bpl.n	8013554 <_dtoa_r+0x34c>
 8013526:	4ba8      	ldr	r3, [pc, #672]	@ (80137c8 <_dtoa_r+0x5c0>)
 8013528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801352c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013530:	f7ed f9bc 	bl	80008ac <__aeabi_ddiv>
 8013534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013538:	f004 040f 	and.w	r4, r4, #15
 801353c:	2603      	movs	r6, #3
 801353e:	4da2      	ldr	r5, [pc, #648]	@ (80137c8 <_dtoa_r+0x5c0>)
 8013540:	b954      	cbnz	r4, 8013558 <_dtoa_r+0x350>
 8013542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801354a:	f7ed f9af 	bl	80008ac <__aeabi_ddiv>
 801354e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013552:	e028      	b.n	80135a6 <_dtoa_r+0x39e>
 8013554:	2602      	movs	r6, #2
 8013556:	e7f2      	b.n	801353e <_dtoa_r+0x336>
 8013558:	07e1      	lsls	r1, r4, #31
 801355a:	d508      	bpl.n	801356e <_dtoa_r+0x366>
 801355c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013560:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013564:	f7ed f878 	bl	8000658 <__aeabi_dmul>
 8013568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801356c:	3601      	adds	r6, #1
 801356e:	1064      	asrs	r4, r4, #1
 8013570:	3508      	adds	r5, #8
 8013572:	e7e5      	b.n	8013540 <_dtoa_r+0x338>
 8013574:	f000 80d2 	beq.w	801371c <_dtoa_r+0x514>
 8013578:	427c      	negs	r4, r7
 801357a:	4b92      	ldr	r3, [pc, #584]	@ (80137c4 <_dtoa_r+0x5bc>)
 801357c:	4d92      	ldr	r5, [pc, #584]	@ (80137c8 <_dtoa_r+0x5c0>)
 801357e:	f004 020f 	and.w	r2, r4, #15
 8013582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801358e:	f7ed f863 	bl	8000658 <__aeabi_dmul>
 8013592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013596:	1124      	asrs	r4, r4, #4
 8013598:	2300      	movs	r3, #0
 801359a:	2602      	movs	r6, #2
 801359c:	2c00      	cmp	r4, #0
 801359e:	f040 80b2 	bne.w	8013706 <_dtoa_r+0x4fe>
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d1d3      	bne.n	801354e <_dtoa_r+0x346>
 80135a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80135a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	f000 80b7 	beq.w	8013720 <_dtoa_r+0x518>
 80135b2:	4b86      	ldr	r3, [pc, #536]	@ (80137cc <_dtoa_r+0x5c4>)
 80135b4:	2200      	movs	r2, #0
 80135b6:	4620      	mov	r0, r4
 80135b8:	4629      	mov	r1, r5
 80135ba:	f7ed fabf 	bl	8000b3c <__aeabi_dcmplt>
 80135be:	2800      	cmp	r0, #0
 80135c0:	f000 80ae 	beq.w	8013720 <_dtoa_r+0x518>
 80135c4:	9b07      	ldr	r3, [sp, #28]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f000 80aa 	beq.w	8013720 <_dtoa_r+0x518>
 80135cc:	9b00      	ldr	r3, [sp, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	dd37      	ble.n	8013642 <_dtoa_r+0x43a>
 80135d2:	1e7b      	subs	r3, r7, #1
 80135d4:	9304      	str	r3, [sp, #16]
 80135d6:	4620      	mov	r0, r4
 80135d8:	4b7d      	ldr	r3, [pc, #500]	@ (80137d0 <_dtoa_r+0x5c8>)
 80135da:	2200      	movs	r2, #0
 80135dc:	4629      	mov	r1, r5
 80135de:	f7ed f83b 	bl	8000658 <__aeabi_dmul>
 80135e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135e6:	9c00      	ldr	r4, [sp, #0]
 80135e8:	3601      	adds	r6, #1
 80135ea:	4630      	mov	r0, r6
 80135ec:	f7ec ffca 	bl	8000584 <__aeabi_i2d>
 80135f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80135f4:	f7ed f830 	bl	8000658 <__aeabi_dmul>
 80135f8:	4b76      	ldr	r3, [pc, #472]	@ (80137d4 <_dtoa_r+0x5cc>)
 80135fa:	2200      	movs	r2, #0
 80135fc:	f7ec fe76 	bl	80002ec <__adddf3>
 8013600:	4605      	mov	r5, r0
 8013602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013606:	2c00      	cmp	r4, #0
 8013608:	f040 808d 	bne.w	8013726 <_dtoa_r+0x51e>
 801360c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013610:	4b71      	ldr	r3, [pc, #452]	@ (80137d8 <_dtoa_r+0x5d0>)
 8013612:	2200      	movs	r2, #0
 8013614:	f7ec fe68 	bl	80002e8 <__aeabi_dsub>
 8013618:	4602      	mov	r2, r0
 801361a:	460b      	mov	r3, r1
 801361c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013620:	462a      	mov	r2, r5
 8013622:	4633      	mov	r3, r6
 8013624:	f7ed faa8 	bl	8000b78 <__aeabi_dcmpgt>
 8013628:	2800      	cmp	r0, #0
 801362a:	f040 828b 	bne.w	8013b44 <_dtoa_r+0x93c>
 801362e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013632:	462a      	mov	r2, r5
 8013634:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013638:	f7ed fa80 	bl	8000b3c <__aeabi_dcmplt>
 801363c:	2800      	cmp	r0, #0
 801363e:	f040 8128 	bne.w	8013892 <_dtoa_r+0x68a>
 8013642:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013646:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801364a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801364c:	2b00      	cmp	r3, #0
 801364e:	f2c0 815a 	blt.w	8013906 <_dtoa_r+0x6fe>
 8013652:	2f0e      	cmp	r7, #14
 8013654:	f300 8157 	bgt.w	8013906 <_dtoa_r+0x6fe>
 8013658:	4b5a      	ldr	r3, [pc, #360]	@ (80137c4 <_dtoa_r+0x5bc>)
 801365a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801365e:	ed93 7b00 	vldr	d7, [r3]
 8013662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013664:	2b00      	cmp	r3, #0
 8013666:	ed8d 7b00 	vstr	d7, [sp]
 801366a:	da03      	bge.n	8013674 <_dtoa_r+0x46c>
 801366c:	9b07      	ldr	r3, [sp, #28]
 801366e:	2b00      	cmp	r3, #0
 8013670:	f340 8101 	ble.w	8013876 <_dtoa_r+0x66e>
 8013674:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013678:	4656      	mov	r6, sl
 801367a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801367e:	4620      	mov	r0, r4
 8013680:	4629      	mov	r1, r5
 8013682:	f7ed f913 	bl	80008ac <__aeabi_ddiv>
 8013686:	f7ed fa97 	bl	8000bb8 <__aeabi_d2iz>
 801368a:	4680      	mov	r8, r0
 801368c:	f7ec ff7a 	bl	8000584 <__aeabi_i2d>
 8013690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013694:	f7ec ffe0 	bl	8000658 <__aeabi_dmul>
 8013698:	4602      	mov	r2, r0
 801369a:	460b      	mov	r3, r1
 801369c:	4620      	mov	r0, r4
 801369e:	4629      	mov	r1, r5
 80136a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80136a4:	f7ec fe20 	bl	80002e8 <__aeabi_dsub>
 80136a8:	f806 4b01 	strb.w	r4, [r6], #1
 80136ac:	9d07      	ldr	r5, [sp, #28]
 80136ae:	eba6 040a 	sub.w	r4, r6, sl
 80136b2:	42a5      	cmp	r5, r4
 80136b4:	4602      	mov	r2, r0
 80136b6:	460b      	mov	r3, r1
 80136b8:	f040 8117 	bne.w	80138ea <_dtoa_r+0x6e2>
 80136bc:	f7ec fe16 	bl	80002ec <__adddf3>
 80136c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136c4:	4604      	mov	r4, r0
 80136c6:	460d      	mov	r5, r1
 80136c8:	f7ed fa56 	bl	8000b78 <__aeabi_dcmpgt>
 80136cc:	2800      	cmp	r0, #0
 80136ce:	f040 80f9 	bne.w	80138c4 <_dtoa_r+0x6bc>
 80136d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136d6:	4620      	mov	r0, r4
 80136d8:	4629      	mov	r1, r5
 80136da:	f7ed fa25 	bl	8000b28 <__aeabi_dcmpeq>
 80136de:	b118      	cbz	r0, 80136e8 <_dtoa_r+0x4e0>
 80136e0:	f018 0f01 	tst.w	r8, #1
 80136e4:	f040 80ee 	bne.w	80138c4 <_dtoa_r+0x6bc>
 80136e8:	4649      	mov	r1, r9
 80136ea:	4658      	mov	r0, fp
 80136ec:	f000 fbda 	bl	8013ea4 <_Bfree>
 80136f0:	2300      	movs	r3, #0
 80136f2:	7033      	strb	r3, [r6, #0]
 80136f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80136f6:	3701      	adds	r7, #1
 80136f8:	601f      	str	r7, [r3, #0]
 80136fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f000 831d 	beq.w	8013d3c <_dtoa_r+0xb34>
 8013702:	601e      	str	r6, [r3, #0]
 8013704:	e31a      	b.n	8013d3c <_dtoa_r+0xb34>
 8013706:	07e2      	lsls	r2, r4, #31
 8013708:	d505      	bpl.n	8013716 <_dtoa_r+0x50e>
 801370a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801370e:	f7ec ffa3 	bl	8000658 <__aeabi_dmul>
 8013712:	3601      	adds	r6, #1
 8013714:	2301      	movs	r3, #1
 8013716:	1064      	asrs	r4, r4, #1
 8013718:	3508      	adds	r5, #8
 801371a:	e73f      	b.n	801359c <_dtoa_r+0x394>
 801371c:	2602      	movs	r6, #2
 801371e:	e742      	b.n	80135a6 <_dtoa_r+0x39e>
 8013720:	9c07      	ldr	r4, [sp, #28]
 8013722:	9704      	str	r7, [sp, #16]
 8013724:	e761      	b.n	80135ea <_dtoa_r+0x3e2>
 8013726:	4b27      	ldr	r3, [pc, #156]	@ (80137c4 <_dtoa_r+0x5bc>)
 8013728:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801372a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801372e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013732:	4454      	add	r4, sl
 8013734:	2900      	cmp	r1, #0
 8013736:	d053      	beq.n	80137e0 <_dtoa_r+0x5d8>
 8013738:	4928      	ldr	r1, [pc, #160]	@ (80137dc <_dtoa_r+0x5d4>)
 801373a:	2000      	movs	r0, #0
 801373c:	f7ed f8b6 	bl	80008ac <__aeabi_ddiv>
 8013740:	4633      	mov	r3, r6
 8013742:	462a      	mov	r2, r5
 8013744:	f7ec fdd0 	bl	80002e8 <__aeabi_dsub>
 8013748:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801374c:	4656      	mov	r6, sl
 801374e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013752:	f7ed fa31 	bl	8000bb8 <__aeabi_d2iz>
 8013756:	4605      	mov	r5, r0
 8013758:	f7ec ff14 	bl	8000584 <__aeabi_i2d>
 801375c:	4602      	mov	r2, r0
 801375e:	460b      	mov	r3, r1
 8013760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013764:	f7ec fdc0 	bl	80002e8 <__aeabi_dsub>
 8013768:	3530      	adds	r5, #48	@ 0x30
 801376a:	4602      	mov	r2, r0
 801376c:	460b      	mov	r3, r1
 801376e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013772:	f806 5b01 	strb.w	r5, [r6], #1
 8013776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801377a:	f7ed f9df 	bl	8000b3c <__aeabi_dcmplt>
 801377e:	2800      	cmp	r0, #0
 8013780:	d171      	bne.n	8013866 <_dtoa_r+0x65e>
 8013782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013786:	4911      	ldr	r1, [pc, #68]	@ (80137cc <_dtoa_r+0x5c4>)
 8013788:	2000      	movs	r0, #0
 801378a:	f7ec fdad 	bl	80002e8 <__aeabi_dsub>
 801378e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013792:	f7ed f9d3 	bl	8000b3c <__aeabi_dcmplt>
 8013796:	2800      	cmp	r0, #0
 8013798:	f040 8095 	bne.w	80138c6 <_dtoa_r+0x6be>
 801379c:	42a6      	cmp	r6, r4
 801379e:	f43f af50 	beq.w	8013642 <_dtoa_r+0x43a>
 80137a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80137a6:	4b0a      	ldr	r3, [pc, #40]	@ (80137d0 <_dtoa_r+0x5c8>)
 80137a8:	2200      	movs	r2, #0
 80137aa:	f7ec ff55 	bl	8000658 <__aeabi_dmul>
 80137ae:	4b08      	ldr	r3, [pc, #32]	@ (80137d0 <_dtoa_r+0x5c8>)
 80137b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80137b4:	2200      	movs	r2, #0
 80137b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137ba:	f7ec ff4d 	bl	8000658 <__aeabi_dmul>
 80137be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137c2:	e7c4      	b.n	801374e <_dtoa_r+0x546>
 80137c4:	080162e8 	.word	0x080162e8
 80137c8:	080162c0 	.word	0x080162c0
 80137cc:	3ff00000 	.word	0x3ff00000
 80137d0:	40240000 	.word	0x40240000
 80137d4:	401c0000 	.word	0x401c0000
 80137d8:	40140000 	.word	0x40140000
 80137dc:	3fe00000 	.word	0x3fe00000
 80137e0:	4631      	mov	r1, r6
 80137e2:	4628      	mov	r0, r5
 80137e4:	f7ec ff38 	bl	8000658 <__aeabi_dmul>
 80137e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80137ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80137ee:	4656      	mov	r6, sl
 80137f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137f4:	f7ed f9e0 	bl	8000bb8 <__aeabi_d2iz>
 80137f8:	4605      	mov	r5, r0
 80137fa:	f7ec fec3 	bl	8000584 <__aeabi_i2d>
 80137fe:	4602      	mov	r2, r0
 8013800:	460b      	mov	r3, r1
 8013802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013806:	f7ec fd6f 	bl	80002e8 <__aeabi_dsub>
 801380a:	3530      	adds	r5, #48	@ 0x30
 801380c:	f806 5b01 	strb.w	r5, [r6], #1
 8013810:	4602      	mov	r2, r0
 8013812:	460b      	mov	r3, r1
 8013814:	42a6      	cmp	r6, r4
 8013816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801381a:	f04f 0200 	mov.w	r2, #0
 801381e:	d124      	bne.n	801386a <_dtoa_r+0x662>
 8013820:	4bac      	ldr	r3, [pc, #688]	@ (8013ad4 <_dtoa_r+0x8cc>)
 8013822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013826:	f7ec fd61 	bl	80002ec <__adddf3>
 801382a:	4602      	mov	r2, r0
 801382c:	460b      	mov	r3, r1
 801382e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013832:	f7ed f9a1 	bl	8000b78 <__aeabi_dcmpgt>
 8013836:	2800      	cmp	r0, #0
 8013838:	d145      	bne.n	80138c6 <_dtoa_r+0x6be>
 801383a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801383e:	49a5      	ldr	r1, [pc, #660]	@ (8013ad4 <_dtoa_r+0x8cc>)
 8013840:	2000      	movs	r0, #0
 8013842:	f7ec fd51 	bl	80002e8 <__aeabi_dsub>
 8013846:	4602      	mov	r2, r0
 8013848:	460b      	mov	r3, r1
 801384a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801384e:	f7ed f975 	bl	8000b3c <__aeabi_dcmplt>
 8013852:	2800      	cmp	r0, #0
 8013854:	f43f aef5 	beq.w	8013642 <_dtoa_r+0x43a>
 8013858:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801385a:	1e73      	subs	r3, r6, #1
 801385c:	9315      	str	r3, [sp, #84]	@ 0x54
 801385e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013862:	2b30      	cmp	r3, #48	@ 0x30
 8013864:	d0f8      	beq.n	8013858 <_dtoa_r+0x650>
 8013866:	9f04      	ldr	r7, [sp, #16]
 8013868:	e73e      	b.n	80136e8 <_dtoa_r+0x4e0>
 801386a:	4b9b      	ldr	r3, [pc, #620]	@ (8013ad8 <_dtoa_r+0x8d0>)
 801386c:	f7ec fef4 	bl	8000658 <__aeabi_dmul>
 8013870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013874:	e7bc      	b.n	80137f0 <_dtoa_r+0x5e8>
 8013876:	d10c      	bne.n	8013892 <_dtoa_r+0x68a>
 8013878:	4b98      	ldr	r3, [pc, #608]	@ (8013adc <_dtoa_r+0x8d4>)
 801387a:	2200      	movs	r2, #0
 801387c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013880:	f7ec feea 	bl	8000658 <__aeabi_dmul>
 8013884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013888:	f7ed f96c 	bl	8000b64 <__aeabi_dcmpge>
 801388c:	2800      	cmp	r0, #0
 801388e:	f000 8157 	beq.w	8013b40 <_dtoa_r+0x938>
 8013892:	2400      	movs	r4, #0
 8013894:	4625      	mov	r5, r4
 8013896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013898:	43db      	mvns	r3, r3
 801389a:	9304      	str	r3, [sp, #16]
 801389c:	4656      	mov	r6, sl
 801389e:	2700      	movs	r7, #0
 80138a0:	4621      	mov	r1, r4
 80138a2:	4658      	mov	r0, fp
 80138a4:	f000 fafe 	bl	8013ea4 <_Bfree>
 80138a8:	2d00      	cmp	r5, #0
 80138aa:	d0dc      	beq.n	8013866 <_dtoa_r+0x65e>
 80138ac:	b12f      	cbz	r7, 80138ba <_dtoa_r+0x6b2>
 80138ae:	42af      	cmp	r7, r5
 80138b0:	d003      	beq.n	80138ba <_dtoa_r+0x6b2>
 80138b2:	4639      	mov	r1, r7
 80138b4:	4658      	mov	r0, fp
 80138b6:	f000 faf5 	bl	8013ea4 <_Bfree>
 80138ba:	4629      	mov	r1, r5
 80138bc:	4658      	mov	r0, fp
 80138be:	f000 faf1 	bl	8013ea4 <_Bfree>
 80138c2:	e7d0      	b.n	8013866 <_dtoa_r+0x65e>
 80138c4:	9704      	str	r7, [sp, #16]
 80138c6:	4633      	mov	r3, r6
 80138c8:	461e      	mov	r6, r3
 80138ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138ce:	2a39      	cmp	r2, #57	@ 0x39
 80138d0:	d107      	bne.n	80138e2 <_dtoa_r+0x6da>
 80138d2:	459a      	cmp	sl, r3
 80138d4:	d1f8      	bne.n	80138c8 <_dtoa_r+0x6c0>
 80138d6:	9a04      	ldr	r2, [sp, #16]
 80138d8:	3201      	adds	r2, #1
 80138da:	9204      	str	r2, [sp, #16]
 80138dc:	2230      	movs	r2, #48	@ 0x30
 80138de:	f88a 2000 	strb.w	r2, [sl]
 80138e2:	781a      	ldrb	r2, [r3, #0]
 80138e4:	3201      	adds	r2, #1
 80138e6:	701a      	strb	r2, [r3, #0]
 80138e8:	e7bd      	b.n	8013866 <_dtoa_r+0x65e>
 80138ea:	4b7b      	ldr	r3, [pc, #492]	@ (8013ad8 <_dtoa_r+0x8d0>)
 80138ec:	2200      	movs	r2, #0
 80138ee:	f7ec feb3 	bl	8000658 <__aeabi_dmul>
 80138f2:	2200      	movs	r2, #0
 80138f4:	2300      	movs	r3, #0
 80138f6:	4604      	mov	r4, r0
 80138f8:	460d      	mov	r5, r1
 80138fa:	f7ed f915 	bl	8000b28 <__aeabi_dcmpeq>
 80138fe:	2800      	cmp	r0, #0
 8013900:	f43f aebb 	beq.w	801367a <_dtoa_r+0x472>
 8013904:	e6f0      	b.n	80136e8 <_dtoa_r+0x4e0>
 8013906:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013908:	2a00      	cmp	r2, #0
 801390a:	f000 80db 	beq.w	8013ac4 <_dtoa_r+0x8bc>
 801390e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013910:	2a01      	cmp	r2, #1
 8013912:	f300 80bf 	bgt.w	8013a94 <_dtoa_r+0x88c>
 8013916:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013918:	2a00      	cmp	r2, #0
 801391a:	f000 80b7 	beq.w	8013a8c <_dtoa_r+0x884>
 801391e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013922:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013924:	4646      	mov	r6, r8
 8013926:	9a08      	ldr	r2, [sp, #32]
 8013928:	2101      	movs	r1, #1
 801392a:	441a      	add	r2, r3
 801392c:	4658      	mov	r0, fp
 801392e:	4498      	add	r8, r3
 8013930:	9208      	str	r2, [sp, #32]
 8013932:	f000 fb6b 	bl	801400c <__i2b>
 8013936:	4605      	mov	r5, r0
 8013938:	b15e      	cbz	r6, 8013952 <_dtoa_r+0x74a>
 801393a:	9b08      	ldr	r3, [sp, #32]
 801393c:	2b00      	cmp	r3, #0
 801393e:	dd08      	ble.n	8013952 <_dtoa_r+0x74a>
 8013940:	42b3      	cmp	r3, r6
 8013942:	9a08      	ldr	r2, [sp, #32]
 8013944:	bfa8      	it	ge
 8013946:	4633      	movge	r3, r6
 8013948:	eba8 0803 	sub.w	r8, r8, r3
 801394c:	1af6      	subs	r6, r6, r3
 801394e:	1ad3      	subs	r3, r2, r3
 8013950:	9308      	str	r3, [sp, #32]
 8013952:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013954:	b1f3      	cbz	r3, 8013994 <_dtoa_r+0x78c>
 8013956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 80b7 	beq.w	8013acc <_dtoa_r+0x8c4>
 801395e:	b18c      	cbz	r4, 8013984 <_dtoa_r+0x77c>
 8013960:	4629      	mov	r1, r5
 8013962:	4622      	mov	r2, r4
 8013964:	4658      	mov	r0, fp
 8013966:	f000 fc11 	bl	801418c <__pow5mult>
 801396a:	464a      	mov	r2, r9
 801396c:	4601      	mov	r1, r0
 801396e:	4605      	mov	r5, r0
 8013970:	4658      	mov	r0, fp
 8013972:	f000 fb61 	bl	8014038 <__multiply>
 8013976:	4649      	mov	r1, r9
 8013978:	9004      	str	r0, [sp, #16]
 801397a:	4658      	mov	r0, fp
 801397c:	f000 fa92 	bl	8013ea4 <_Bfree>
 8013980:	9b04      	ldr	r3, [sp, #16]
 8013982:	4699      	mov	r9, r3
 8013984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013986:	1b1a      	subs	r2, r3, r4
 8013988:	d004      	beq.n	8013994 <_dtoa_r+0x78c>
 801398a:	4649      	mov	r1, r9
 801398c:	4658      	mov	r0, fp
 801398e:	f000 fbfd 	bl	801418c <__pow5mult>
 8013992:	4681      	mov	r9, r0
 8013994:	2101      	movs	r1, #1
 8013996:	4658      	mov	r0, fp
 8013998:	f000 fb38 	bl	801400c <__i2b>
 801399c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801399e:	4604      	mov	r4, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	f000 81cf 	beq.w	8013d44 <_dtoa_r+0xb3c>
 80139a6:	461a      	mov	r2, r3
 80139a8:	4601      	mov	r1, r0
 80139aa:	4658      	mov	r0, fp
 80139ac:	f000 fbee 	bl	801418c <__pow5mult>
 80139b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	4604      	mov	r4, r0
 80139b6:	f300 8095 	bgt.w	8013ae4 <_dtoa_r+0x8dc>
 80139ba:	9b02      	ldr	r3, [sp, #8]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f040 8087 	bne.w	8013ad0 <_dtoa_r+0x8c8>
 80139c2:	9b03      	ldr	r3, [sp, #12]
 80139c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	f040 8089 	bne.w	8013ae0 <_dtoa_r+0x8d8>
 80139ce:	9b03      	ldr	r3, [sp, #12]
 80139d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80139d4:	0d1b      	lsrs	r3, r3, #20
 80139d6:	051b      	lsls	r3, r3, #20
 80139d8:	b12b      	cbz	r3, 80139e6 <_dtoa_r+0x7de>
 80139da:	9b08      	ldr	r3, [sp, #32]
 80139dc:	3301      	adds	r3, #1
 80139de:	9308      	str	r3, [sp, #32]
 80139e0:	f108 0801 	add.w	r8, r8, #1
 80139e4:	2301      	movs	r3, #1
 80139e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80139e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	f000 81b0 	beq.w	8013d50 <_dtoa_r+0xb48>
 80139f0:	6923      	ldr	r3, [r4, #16]
 80139f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80139f6:	6918      	ldr	r0, [r3, #16]
 80139f8:	f000 fabc 	bl	8013f74 <__hi0bits>
 80139fc:	f1c0 0020 	rsb	r0, r0, #32
 8013a00:	9b08      	ldr	r3, [sp, #32]
 8013a02:	4418      	add	r0, r3
 8013a04:	f010 001f 	ands.w	r0, r0, #31
 8013a08:	d077      	beq.n	8013afa <_dtoa_r+0x8f2>
 8013a0a:	f1c0 0320 	rsb	r3, r0, #32
 8013a0e:	2b04      	cmp	r3, #4
 8013a10:	dd6b      	ble.n	8013aea <_dtoa_r+0x8e2>
 8013a12:	9b08      	ldr	r3, [sp, #32]
 8013a14:	f1c0 001c 	rsb	r0, r0, #28
 8013a18:	4403      	add	r3, r0
 8013a1a:	4480      	add	r8, r0
 8013a1c:	4406      	add	r6, r0
 8013a1e:	9308      	str	r3, [sp, #32]
 8013a20:	f1b8 0f00 	cmp.w	r8, #0
 8013a24:	dd05      	ble.n	8013a32 <_dtoa_r+0x82a>
 8013a26:	4649      	mov	r1, r9
 8013a28:	4642      	mov	r2, r8
 8013a2a:	4658      	mov	r0, fp
 8013a2c:	f000 fc08 	bl	8014240 <__lshift>
 8013a30:	4681      	mov	r9, r0
 8013a32:	9b08      	ldr	r3, [sp, #32]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	dd05      	ble.n	8013a44 <_dtoa_r+0x83c>
 8013a38:	4621      	mov	r1, r4
 8013a3a:	461a      	mov	r2, r3
 8013a3c:	4658      	mov	r0, fp
 8013a3e:	f000 fbff 	bl	8014240 <__lshift>
 8013a42:	4604      	mov	r4, r0
 8013a44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d059      	beq.n	8013afe <_dtoa_r+0x8f6>
 8013a4a:	4621      	mov	r1, r4
 8013a4c:	4648      	mov	r0, r9
 8013a4e:	f000 fc63 	bl	8014318 <__mcmp>
 8013a52:	2800      	cmp	r0, #0
 8013a54:	da53      	bge.n	8013afe <_dtoa_r+0x8f6>
 8013a56:	1e7b      	subs	r3, r7, #1
 8013a58:	9304      	str	r3, [sp, #16]
 8013a5a:	4649      	mov	r1, r9
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	220a      	movs	r2, #10
 8013a60:	4658      	mov	r0, fp
 8013a62:	f000 fa41 	bl	8013ee8 <__multadd>
 8013a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a68:	4681      	mov	r9, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	f000 8172 	beq.w	8013d54 <_dtoa_r+0xb4c>
 8013a70:	2300      	movs	r3, #0
 8013a72:	4629      	mov	r1, r5
 8013a74:	220a      	movs	r2, #10
 8013a76:	4658      	mov	r0, fp
 8013a78:	f000 fa36 	bl	8013ee8 <__multadd>
 8013a7c:	9b00      	ldr	r3, [sp, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	4605      	mov	r5, r0
 8013a82:	dc67      	bgt.n	8013b54 <_dtoa_r+0x94c>
 8013a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	dc41      	bgt.n	8013b0e <_dtoa_r+0x906>
 8013a8a:	e063      	b.n	8013b54 <_dtoa_r+0x94c>
 8013a8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013a8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013a92:	e746      	b.n	8013922 <_dtoa_r+0x71a>
 8013a94:	9b07      	ldr	r3, [sp, #28]
 8013a96:	1e5c      	subs	r4, r3, #1
 8013a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a9a:	42a3      	cmp	r3, r4
 8013a9c:	bfbf      	itttt	lt
 8013a9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013aa0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013aa2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013aa4:	1ae3      	sublt	r3, r4, r3
 8013aa6:	bfb4      	ite	lt
 8013aa8:	18d2      	addlt	r2, r2, r3
 8013aaa:	1b1c      	subge	r4, r3, r4
 8013aac:	9b07      	ldr	r3, [sp, #28]
 8013aae:	bfbc      	itt	lt
 8013ab0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013ab2:	2400      	movlt	r4, #0
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	bfb5      	itete	lt
 8013ab8:	eba8 0603 	sublt.w	r6, r8, r3
 8013abc:	9b07      	ldrge	r3, [sp, #28]
 8013abe:	2300      	movlt	r3, #0
 8013ac0:	4646      	movge	r6, r8
 8013ac2:	e730      	b.n	8013926 <_dtoa_r+0x71e>
 8013ac4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013ac6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013ac8:	4646      	mov	r6, r8
 8013aca:	e735      	b.n	8013938 <_dtoa_r+0x730>
 8013acc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ace:	e75c      	b.n	801398a <_dtoa_r+0x782>
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	e788      	b.n	80139e6 <_dtoa_r+0x7de>
 8013ad4:	3fe00000 	.word	0x3fe00000
 8013ad8:	40240000 	.word	0x40240000
 8013adc:	40140000 	.word	0x40140000
 8013ae0:	9b02      	ldr	r3, [sp, #8]
 8013ae2:	e780      	b.n	80139e6 <_dtoa_r+0x7de>
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ae8:	e782      	b.n	80139f0 <_dtoa_r+0x7e8>
 8013aea:	d099      	beq.n	8013a20 <_dtoa_r+0x818>
 8013aec:	9a08      	ldr	r2, [sp, #32]
 8013aee:	331c      	adds	r3, #28
 8013af0:	441a      	add	r2, r3
 8013af2:	4498      	add	r8, r3
 8013af4:	441e      	add	r6, r3
 8013af6:	9208      	str	r2, [sp, #32]
 8013af8:	e792      	b.n	8013a20 <_dtoa_r+0x818>
 8013afa:	4603      	mov	r3, r0
 8013afc:	e7f6      	b.n	8013aec <_dtoa_r+0x8e4>
 8013afe:	9b07      	ldr	r3, [sp, #28]
 8013b00:	9704      	str	r7, [sp, #16]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	dc20      	bgt.n	8013b48 <_dtoa_r+0x940>
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b0a:	2b02      	cmp	r3, #2
 8013b0c:	dd1e      	ble.n	8013b4c <_dtoa_r+0x944>
 8013b0e:	9b00      	ldr	r3, [sp, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	f47f aec0 	bne.w	8013896 <_dtoa_r+0x68e>
 8013b16:	4621      	mov	r1, r4
 8013b18:	2205      	movs	r2, #5
 8013b1a:	4658      	mov	r0, fp
 8013b1c:	f000 f9e4 	bl	8013ee8 <__multadd>
 8013b20:	4601      	mov	r1, r0
 8013b22:	4604      	mov	r4, r0
 8013b24:	4648      	mov	r0, r9
 8013b26:	f000 fbf7 	bl	8014318 <__mcmp>
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	f77f aeb3 	ble.w	8013896 <_dtoa_r+0x68e>
 8013b30:	4656      	mov	r6, sl
 8013b32:	2331      	movs	r3, #49	@ 0x31
 8013b34:	f806 3b01 	strb.w	r3, [r6], #1
 8013b38:	9b04      	ldr	r3, [sp, #16]
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	9304      	str	r3, [sp, #16]
 8013b3e:	e6ae      	b.n	801389e <_dtoa_r+0x696>
 8013b40:	9c07      	ldr	r4, [sp, #28]
 8013b42:	9704      	str	r7, [sp, #16]
 8013b44:	4625      	mov	r5, r4
 8013b46:	e7f3      	b.n	8013b30 <_dtoa_r+0x928>
 8013b48:	9b07      	ldr	r3, [sp, #28]
 8013b4a:	9300      	str	r3, [sp, #0]
 8013b4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	f000 8104 	beq.w	8013d5c <_dtoa_r+0xb54>
 8013b54:	2e00      	cmp	r6, #0
 8013b56:	dd05      	ble.n	8013b64 <_dtoa_r+0x95c>
 8013b58:	4629      	mov	r1, r5
 8013b5a:	4632      	mov	r2, r6
 8013b5c:	4658      	mov	r0, fp
 8013b5e:	f000 fb6f 	bl	8014240 <__lshift>
 8013b62:	4605      	mov	r5, r0
 8013b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d05a      	beq.n	8013c20 <_dtoa_r+0xa18>
 8013b6a:	6869      	ldr	r1, [r5, #4]
 8013b6c:	4658      	mov	r0, fp
 8013b6e:	f000 f959 	bl	8013e24 <_Balloc>
 8013b72:	4606      	mov	r6, r0
 8013b74:	b928      	cbnz	r0, 8013b82 <_dtoa_r+0x97a>
 8013b76:	4b84      	ldr	r3, [pc, #528]	@ (8013d88 <_dtoa_r+0xb80>)
 8013b78:	4602      	mov	r2, r0
 8013b7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013b7e:	f7ff bb5a 	b.w	8013236 <_dtoa_r+0x2e>
 8013b82:	692a      	ldr	r2, [r5, #16]
 8013b84:	3202      	adds	r2, #2
 8013b86:	0092      	lsls	r2, r2, #2
 8013b88:	f105 010c 	add.w	r1, r5, #12
 8013b8c:	300c      	adds	r0, #12
 8013b8e:	f7ff faa2 	bl	80130d6 <memcpy>
 8013b92:	2201      	movs	r2, #1
 8013b94:	4631      	mov	r1, r6
 8013b96:	4658      	mov	r0, fp
 8013b98:	f000 fb52 	bl	8014240 <__lshift>
 8013b9c:	f10a 0301 	add.w	r3, sl, #1
 8013ba0:	9307      	str	r3, [sp, #28]
 8013ba2:	9b00      	ldr	r3, [sp, #0]
 8013ba4:	4453      	add	r3, sl
 8013ba6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ba8:	9b02      	ldr	r3, [sp, #8]
 8013baa:	f003 0301 	and.w	r3, r3, #1
 8013bae:	462f      	mov	r7, r5
 8013bb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bb2:	4605      	mov	r5, r0
 8013bb4:	9b07      	ldr	r3, [sp, #28]
 8013bb6:	4621      	mov	r1, r4
 8013bb8:	3b01      	subs	r3, #1
 8013bba:	4648      	mov	r0, r9
 8013bbc:	9300      	str	r3, [sp, #0]
 8013bbe:	f7ff fa98 	bl	80130f2 <quorem>
 8013bc2:	4639      	mov	r1, r7
 8013bc4:	9002      	str	r0, [sp, #8]
 8013bc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013bca:	4648      	mov	r0, r9
 8013bcc:	f000 fba4 	bl	8014318 <__mcmp>
 8013bd0:	462a      	mov	r2, r5
 8013bd2:	9008      	str	r0, [sp, #32]
 8013bd4:	4621      	mov	r1, r4
 8013bd6:	4658      	mov	r0, fp
 8013bd8:	f000 fbba 	bl	8014350 <__mdiff>
 8013bdc:	68c2      	ldr	r2, [r0, #12]
 8013bde:	4606      	mov	r6, r0
 8013be0:	bb02      	cbnz	r2, 8013c24 <_dtoa_r+0xa1c>
 8013be2:	4601      	mov	r1, r0
 8013be4:	4648      	mov	r0, r9
 8013be6:	f000 fb97 	bl	8014318 <__mcmp>
 8013bea:	4602      	mov	r2, r0
 8013bec:	4631      	mov	r1, r6
 8013bee:	4658      	mov	r0, fp
 8013bf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8013bf2:	f000 f957 	bl	8013ea4 <_Bfree>
 8013bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013bfa:	9e07      	ldr	r6, [sp, #28]
 8013bfc:	ea43 0102 	orr.w	r1, r3, r2
 8013c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c02:	4319      	orrs	r1, r3
 8013c04:	d110      	bne.n	8013c28 <_dtoa_r+0xa20>
 8013c06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013c0a:	d029      	beq.n	8013c60 <_dtoa_r+0xa58>
 8013c0c:	9b08      	ldr	r3, [sp, #32]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	dd02      	ble.n	8013c18 <_dtoa_r+0xa10>
 8013c12:	9b02      	ldr	r3, [sp, #8]
 8013c14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013c18:	9b00      	ldr	r3, [sp, #0]
 8013c1a:	f883 8000 	strb.w	r8, [r3]
 8013c1e:	e63f      	b.n	80138a0 <_dtoa_r+0x698>
 8013c20:	4628      	mov	r0, r5
 8013c22:	e7bb      	b.n	8013b9c <_dtoa_r+0x994>
 8013c24:	2201      	movs	r2, #1
 8013c26:	e7e1      	b.n	8013bec <_dtoa_r+0x9e4>
 8013c28:	9b08      	ldr	r3, [sp, #32]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	db04      	blt.n	8013c38 <_dtoa_r+0xa30>
 8013c2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013c30:	430b      	orrs	r3, r1
 8013c32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013c34:	430b      	orrs	r3, r1
 8013c36:	d120      	bne.n	8013c7a <_dtoa_r+0xa72>
 8013c38:	2a00      	cmp	r2, #0
 8013c3a:	dded      	ble.n	8013c18 <_dtoa_r+0xa10>
 8013c3c:	4649      	mov	r1, r9
 8013c3e:	2201      	movs	r2, #1
 8013c40:	4658      	mov	r0, fp
 8013c42:	f000 fafd 	bl	8014240 <__lshift>
 8013c46:	4621      	mov	r1, r4
 8013c48:	4681      	mov	r9, r0
 8013c4a:	f000 fb65 	bl	8014318 <__mcmp>
 8013c4e:	2800      	cmp	r0, #0
 8013c50:	dc03      	bgt.n	8013c5a <_dtoa_r+0xa52>
 8013c52:	d1e1      	bne.n	8013c18 <_dtoa_r+0xa10>
 8013c54:	f018 0f01 	tst.w	r8, #1
 8013c58:	d0de      	beq.n	8013c18 <_dtoa_r+0xa10>
 8013c5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013c5e:	d1d8      	bne.n	8013c12 <_dtoa_r+0xa0a>
 8013c60:	9a00      	ldr	r2, [sp, #0]
 8013c62:	2339      	movs	r3, #57	@ 0x39
 8013c64:	7013      	strb	r3, [r2, #0]
 8013c66:	4633      	mov	r3, r6
 8013c68:	461e      	mov	r6, r3
 8013c6a:	3b01      	subs	r3, #1
 8013c6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013c70:	2a39      	cmp	r2, #57	@ 0x39
 8013c72:	d052      	beq.n	8013d1a <_dtoa_r+0xb12>
 8013c74:	3201      	adds	r2, #1
 8013c76:	701a      	strb	r2, [r3, #0]
 8013c78:	e612      	b.n	80138a0 <_dtoa_r+0x698>
 8013c7a:	2a00      	cmp	r2, #0
 8013c7c:	dd07      	ble.n	8013c8e <_dtoa_r+0xa86>
 8013c7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013c82:	d0ed      	beq.n	8013c60 <_dtoa_r+0xa58>
 8013c84:	9a00      	ldr	r2, [sp, #0]
 8013c86:	f108 0301 	add.w	r3, r8, #1
 8013c8a:	7013      	strb	r3, [r2, #0]
 8013c8c:	e608      	b.n	80138a0 <_dtoa_r+0x698>
 8013c8e:	9b07      	ldr	r3, [sp, #28]
 8013c90:	9a07      	ldr	r2, [sp, #28]
 8013c92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d028      	beq.n	8013cee <_dtoa_r+0xae6>
 8013c9c:	4649      	mov	r1, r9
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	220a      	movs	r2, #10
 8013ca2:	4658      	mov	r0, fp
 8013ca4:	f000 f920 	bl	8013ee8 <__multadd>
 8013ca8:	42af      	cmp	r7, r5
 8013caa:	4681      	mov	r9, r0
 8013cac:	f04f 0300 	mov.w	r3, #0
 8013cb0:	f04f 020a 	mov.w	r2, #10
 8013cb4:	4639      	mov	r1, r7
 8013cb6:	4658      	mov	r0, fp
 8013cb8:	d107      	bne.n	8013cca <_dtoa_r+0xac2>
 8013cba:	f000 f915 	bl	8013ee8 <__multadd>
 8013cbe:	4607      	mov	r7, r0
 8013cc0:	4605      	mov	r5, r0
 8013cc2:	9b07      	ldr	r3, [sp, #28]
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	9307      	str	r3, [sp, #28]
 8013cc8:	e774      	b.n	8013bb4 <_dtoa_r+0x9ac>
 8013cca:	f000 f90d 	bl	8013ee8 <__multadd>
 8013cce:	4629      	mov	r1, r5
 8013cd0:	4607      	mov	r7, r0
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	220a      	movs	r2, #10
 8013cd6:	4658      	mov	r0, fp
 8013cd8:	f000 f906 	bl	8013ee8 <__multadd>
 8013cdc:	4605      	mov	r5, r0
 8013cde:	e7f0      	b.n	8013cc2 <_dtoa_r+0xaba>
 8013ce0:	9b00      	ldr	r3, [sp, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	bfcc      	ite	gt
 8013ce6:	461e      	movgt	r6, r3
 8013ce8:	2601      	movle	r6, #1
 8013cea:	4456      	add	r6, sl
 8013cec:	2700      	movs	r7, #0
 8013cee:	4649      	mov	r1, r9
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	4658      	mov	r0, fp
 8013cf4:	f000 faa4 	bl	8014240 <__lshift>
 8013cf8:	4621      	mov	r1, r4
 8013cfa:	4681      	mov	r9, r0
 8013cfc:	f000 fb0c 	bl	8014318 <__mcmp>
 8013d00:	2800      	cmp	r0, #0
 8013d02:	dcb0      	bgt.n	8013c66 <_dtoa_r+0xa5e>
 8013d04:	d102      	bne.n	8013d0c <_dtoa_r+0xb04>
 8013d06:	f018 0f01 	tst.w	r8, #1
 8013d0a:	d1ac      	bne.n	8013c66 <_dtoa_r+0xa5e>
 8013d0c:	4633      	mov	r3, r6
 8013d0e:	461e      	mov	r6, r3
 8013d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d14:	2a30      	cmp	r2, #48	@ 0x30
 8013d16:	d0fa      	beq.n	8013d0e <_dtoa_r+0xb06>
 8013d18:	e5c2      	b.n	80138a0 <_dtoa_r+0x698>
 8013d1a:	459a      	cmp	sl, r3
 8013d1c:	d1a4      	bne.n	8013c68 <_dtoa_r+0xa60>
 8013d1e:	9b04      	ldr	r3, [sp, #16]
 8013d20:	3301      	adds	r3, #1
 8013d22:	9304      	str	r3, [sp, #16]
 8013d24:	2331      	movs	r3, #49	@ 0x31
 8013d26:	f88a 3000 	strb.w	r3, [sl]
 8013d2a:	e5b9      	b.n	80138a0 <_dtoa_r+0x698>
 8013d2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013d2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8013d8c <_dtoa_r+0xb84>
 8013d32:	b11b      	cbz	r3, 8013d3c <_dtoa_r+0xb34>
 8013d34:	f10a 0308 	add.w	r3, sl, #8
 8013d38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013d3a:	6013      	str	r3, [r2, #0]
 8013d3c:	4650      	mov	r0, sl
 8013d3e:	b019      	add	sp, #100	@ 0x64
 8013d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d46:	2b01      	cmp	r3, #1
 8013d48:	f77f ae37 	ble.w	80139ba <_dtoa_r+0x7b2>
 8013d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d50:	2001      	movs	r0, #1
 8013d52:	e655      	b.n	8013a00 <_dtoa_r+0x7f8>
 8013d54:	9b00      	ldr	r3, [sp, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	f77f aed6 	ble.w	8013b08 <_dtoa_r+0x900>
 8013d5c:	4656      	mov	r6, sl
 8013d5e:	4621      	mov	r1, r4
 8013d60:	4648      	mov	r0, r9
 8013d62:	f7ff f9c6 	bl	80130f2 <quorem>
 8013d66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013d6a:	f806 8b01 	strb.w	r8, [r6], #1
 8013d6e:	9b00      	ldr	r3, [sp, #0]
 8013d70:	eba6 020a 	sub.w	r2, r6, sl
 8013d74:	4293      	cmp	r3, r2
 8013d76:	ddb3      	ble.n	8013ce0 <_dtoa_r+0xad8>
 8013d78:	4649      	mov	r1, r9
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	220a      	movs	r2, #10
 8013d7e:	4658      	mov	r0, fp
 8013d80:	f000 f8b2 	bl	8013ee8 <__multadd>
 8013d84:	4681      	mov	r9, r0
 8013d86:	e7ea      	b.n	8013d5e <_dtoa_r+0xb56>
 8013d88:	08016248 	.word	0x08016248
 8013d8c:	080161cc 	.word	0x080161cc

08013d90 <_free_r>:
 8013d90:	b538      	push	{r3, r4, r5, lr}
 8013d92:	4605      	mov	r5, r0
 8013d94:	2900      	cmp	r1, #0
 8013d96:	d041      	beq.n	8013e1c <_free_r+0x8c>
 8013d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d9c:	1f0c      	subs	r4, r1, #4
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	bfb8      	it	lt
 8013da2:	18e4      	addlt	r4, r4, r3
 8013da4:	f7fe fb4c 	bl	8012440 <__malloc_lock>
 8013da8:	4a1d      	ldr	r2, [pc, #116]	@ (8013e20 <_free_r+0x90>)
 8013daa:	6813      	ldr	r3, [r2, #0]
 8013dac:	b933      	cbnz	r3, 8013dbc <_free_r+0x2c>
 8013dae:	6063      	str	r3, [r4, #4]
 8013db0:	6014      	str	r4, [r2, #0]
 8013db2:	4628      	mov	r0, r5
 8013db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013db8:	f7fe bb48 	b.w	801244c <__malloc_unlock>
 8013dbc:	42a3      	cmp	r3, r4
 8013dbe:	d908      	bls.n	8013dd2 <_free_r+0x42>
 8013dc0:	6820      	ldr	r0, [r4, #0]
 8013dc2:	1821      	adds	r1, r4, r0
 8013dc4:	428b      	cmp	r3, r1
 8013dc6:	bf01      	itttt	eq
 8013dc8:	6819      	ldreq	r1, [r3, #0]
 8013dca:	685b      	ldreq	r3, [r3, #4]
 8013dcc:	1809      	addeq	r1, r1, r0
 8013dce:	6021      	streq	r1, [r4, #0]
 8013dd0:	e7ed      	b.n	8013dae <_free_r+0x1e>
 8013dd2:	461a      	mov	r2, r3
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	b10b      	cbz	r3, 8013ddc <_free_r+0x4c>
 8013dd8:	42a3      	cmp	r3, r4
 8013dda:	d9fa      	bls.n	8013dd2 <_free_r+0x42>
 8013ddc:	6811      	ldr	r1, [r2, #0]
 8013dde:	1850      	adds	r0, r2, r1
 8013de0:	42a0      	cmp	r0, r4
 8013de2:	d10b      	bne.n	8013dfc <_free_r+0x6c>
 8013de4:	6820      	ldr	r0, [r4, #0]
 8013de6:	4401      	add	r1, r0
 8013de8:	1850      	adds	r0, r2, r1
 8013dea:	4283      	cmp	r3, r0
 8013dec:	6011      	str	r1, [r2, #0]
 8013dee:	d1e0      	bne.n	8013db2 <_free_r+0x22>
 8013df0:	6818      	ldr	r0, [r3, #0]
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	6053      	str	r3, [r2, #4]
 8013df6:	4408      	add	r0, r1
 8013df8:	6010      	str	r0, [r2, #0]
 8013dfa:	e7da      	b.n	8013db2 <_free_r+0x22>
 8013dfc:	d902      	bls.n	8013e04 <_free_r+0x74>
 8013dfe:	230c      	movs	r3, #12
 8013e00:	602b      	str	r3, [r5, #0]
 8013e02:	e7d6      	b.n	8013db2 <_free_r+0x22>
 8013e04:	6820      	ldr	r0, [r4, #0]
 8013e06:	1821      	adds	r1, r4, r0
 8013e08:	428b      	cmp	r3, r1
 8013e0a:	bf04      	itt	eq
 8013e0c:	6819      	ldreq	r1, [r3, #0]
 8013e0e:	685b      	ldreq	r3, [r3, #4]
 8013e10:	6063      	str	r3, [r4, #4]
 8013e12:	bf04      	itt	eq
 8013e14:	1809      	addeq	r1, r1, r0
 8013e16:	6021      	streq	r1, [r4, #0]
 8013e18:	6054      	str	r4, [r2, #4]
 8013e1a:	e7ca      	b.n	8013db2 <_free_r+0x22>
 8013e1c:	bd38      	pop	{r3, r4, r5, pc}
 8013e1e:	bf00      	nop
 8013e20:	20000570 	.word	0x20000570

08013e24 <_Balloc>:
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	69c6      	ldr	r6, [r0, #28]
 8013e28:	4604      	mov	r4, r0
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	b976      	cbnz	r6, 8013e4c <_Balloc+0x28>
 8013e2e:	2010      	movs	r0, #16
 8013e30:	f7fe fa54 	bl	80122dc <malloc>
 8013e34:	4602      	mov	r2, r0
 8013e36:	61e0      	str	r0, [r4, #28]
 8013e38:	b920      	cbnz	r0, 8013e44 <_Balloc+0x20>
 8013e3a:	4b18      	ldr	r3, [pc, #96]	@ (8013e9c <_Balloc+0x78>)
 8013e3c:	4818      	ldr	r0, [pc, #96]	@ (8013ea0 <_Balloc+0x7c>)
 8013e3e:	216b      	movs	r1, #107	@ 0x6b
 8013e40:	f000 fc1e 	bl	8014680 <__assert_func>
 8013e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e48:	6006      	str	r6, [r0, #0]
 8013e4a:	60c6      	str	r6, [r0, #12]
 8013e4c:	69e6      	ldr	r6, [r4, #28]
 8013e4e:	68f3      	ldr	r3, [r6, #12]
 8013e50:	b183      	cbz	r3, 8013e74 <_Balloc+0x50>
 8013e52:	69e3      	ldr	r3, [r4, #28]
 8013e54:	68db      	ldr	r3, [r3, #12]
 8013e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013e5a:	b9b8      	cbnz	r0, 8013e8c <_Balloc+0x68>
 8013e5c:	2101      	movs	r1, #1
 8013e5e:	fa01 f605 	lsl.w	r6, r1, r5
 8013e62:	1d72      	adds	r2, r6, #5
 8013e64:	0092      	lsls	r2, r2, #2
 8013e66:	4620      	mov	r0, r4
 8013e68:	f000 fc28 	bl	80146bc <_calloc_r>
 8013e6c:	b160      	cbz	r0, 8013e88 <_Balloc+0x64>
 8013e6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013e72:	e00e      	b.n	8013e92 <_Balloc+0x6e>
 8013e74:	2221      	movs	r2, #33	@ 0x21
 8013e76:	2104      	movs	r1, #4
 8013e78:	4620      	mov	r0, r4
 8013e7a:	f000 fc1f 	bl	80146bc <_calloc_r>
 8013e7e:	69e3      	ldr	r3, [r4, #28]
 8013e80:	60f0      	str	r0, [r6, #12]
 8013e82:	68db      	ldr	r3, [r3, #12]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d1e4      	bne.n	8013e52 <_Balloc+0x2e>
 8013e88:	2000      	movs	r0, #0
 8013e8a:	bd70      	pop	{r4, r5, r6, pc}
 8013e8c:	6802      	ldr	r2, [r0, #0]
 8013e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e92:	2300      	movs	r3, #0
 8013e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e98:	e7f7      	b.n	8013e8a <_Balloc+0x66>
 8013e9a:	bf00      	nop
 8013e9c:	080161d9 	.word	0x080161d9
 8013ea0:	08016259 	.word	0x08016259

08013ea4 <_Bfree>:
 8013ea4:	b570      	push	{r4, r5, r6, lr}
 8013ea6:	69c6      	ldr	r6, [r0, #28]
 8013ea8:	4605      	mov	r5, r0
 8013eaa:	460c      	mov	r4, r1
 8013eac:	b976      	cbnz	r6, 8013ecc <_Bfree+0x28>
 8013eae:	2010      	movs	r0, #16
 8013eb0:	f7fe fa14 	bl	80122dc <malloc>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	61e8      	str	r0, [r5, #28]
 8013eb8:	b920      	cbnz	r0, 8013ec4 <_Bfree+0x20>
 8013eba:	4b09      	ldr	r3, [pc, #36]	@ (8013ee0 <_Bfree+0x3c>)
 8013ebc:	4809      	ldr	r0, [pc, #36]	@ (8013ee4 <_Bfree+0x40>)
 8013ebe:	218f      	movs	r1, #143	@ 0x8f
 8013ec0:	f000 fbde 	bl	8014680 <__assert_func>
 8013ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ec8:	6006      	str	r6, [r0, #0]
 8013eca:	60c6      	str	r6, [r0, #12]
 8013ecc:	b13c      	cbz	r4, 8013ede <_Bfree+0x3a>
 8013ece:	69eb      	ldr	r3, [r5, #28]
 8013ed0:	6862      	ldr	r2, [r4, #4]
 8013ed2:	68db      	ldr	r3, [r3, #12]
 8013ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ed8:	6021      	str	r1, [r4, #0]
 8013eda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013ede:	bd70      	pop	{r4, r5, r6, pc}
 8013ee0:	080161d9 	.word	0x080161d9
 8013ee4:	08016259 	.word	0x08016259

08013ee8 <__multadd>:
 8013ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eec:	690d      	ldr	r5, [r1, #16]
 8013eee:	4607      	mov	r7, r0
 8013ef0:	460c      	mov	r4, r1
 8013ef2:	461e      	mov	r6, r3
 8013ef4:	f101 0c14 	add.w	ip, r1, #20
 8013ef8:	2000      	movs	r0, #0
 8013efa:	f8dc 3000 	ldr.w	r3, [ip]
 8013efe:	b299      	uxth	r1, r3
 8013f00:	fb02 6101 	mla	r1, r2, r1, r6
 8013f04:	0c1e      	lsrs	r6, r3, #16
 8013f06:	0c0b      	lsrs	r3, r1, #16
 8013f08:	fb02 3306 	mla	r3, r2, r6, r3
 8013f0c:	b289      	uxth	r1, r1
 8013f0e:	3001      	adds	r0, #1
 8013f10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013f14:	4285      	cmp	r5, r0
 8013f16:	f84c 1b04 	str.w	r1, [ip], #4
 8013f1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013f1e:	dcec      	bgt.n	8013efa <__multadd+0x12>
 8013f20:	b30e      	cbz	r6, 8013f66 <__multadd+0x7e>
 8013f22:	68a3      	ldr	r3, [r4, #8]
 8013f24:	42ab      	cmp	r3, r5
 8013f26:	dc19      	bgt.n	8013f5c <__multadd+0x74>
 8013f28:	6861      	ldr	r1, [r4, #4]
 8013f2a:	4638      	mov	r0, r7
 8013f2c:	3101      	adds	r1, #1
 8013f2e:	f7ff ff79 	bl	8013e24 <_Balloc>
 8013f32:	4680      	mov	r8, r0
 8013f34:	b928      	cbnz	r0, 8013f42 <__multadd+0x5a>
 8013f36:	4602      	mov	r2, r0
 8013f38:	4b0c      	ldr	r3, [pc, #48]	@ (8013f6c <__multadd+0x84>)
 8013f3a:	480d      	ldr	r0, [pc, #52]	@ (8013f70 <__multadd+0x88>)
 8013f3c:	21ba      	movs	r1, #186	@ 0xba
 8013f3e:	f000 fb9f 	bl	8014680 <__assert_func>
 8013f42:	6922      	ldr	r2, [r4, #16]
 8013f44:	3202      	adds	r2, #2
 8013f46:	f104 010c 	add.w	r1, r4, #12
 8013f4a:	0092      	lsls	r2, r2, #2
 8013f4c:	300c      	adds	r0, #12
 8013f4e:	f7ff f8c2 	bl	80130d6 <memcpy>
 8013f52:	4621      	mov	r1, r4
 8013f54:	4638      	mov	r0, r7
 8013f56:	f7ff ffa5 	bl	8013ea4 <_Bfree>
 8013f5a:	4644      	mov	r4, r8
 8013f5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013f60:	3501      	adds	r5, #1
 8013f62:	615e      	str	r6, [r3, #20]
 8013f64:	6125      	str	r5, [r4, #16]
 8013f66:	4620      	mov	r0, r4
 8013f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f6c:	08016248 	.word	0x08016248
 8013f70:	08016259 	.word	0x08016259

08013f74 <__hi0bits>:
 8013f74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013f78:	4603      	mov	r3, r0
 8013f7a:	bf36      	itet	cc
 8013f7c:	0403      	lslcc	r3, r0, #16
 8013f7e:	2000      	movcs	r0, #0
 8013f80:	2010      	movcc	r0, #16
 8013f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013f86:	bf3c      	itt	cc
 8013f88:	021b      	lslcc	r3, r3, #8
 8013f8a:	3008      	addcc	r0, #8
 8013f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013f90:	bf3c      	itt	cc
 8013f92:	011b      	lslcc	r3, r3, #4
 8013f94:	3004      	addcc	r0, #4
 8013f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013f9a:	bf3c      	itt	cc
 8013f9c:	009b      	lslcc	r3, r3, #2
 8013f9e:	3002      	addcc	r0, #2
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	db05      	blt.n	8013fb0 <__hi0bits+0x3c>
 8013fa4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013fa8:	f100 0001 	add.w	r0, r0, #1
 8013fac:	bf08      	it	eq
 8013fae:	2020      	moveq	r0, #32
 8013fb0:	4770      	bx	lr

08013fb2 <__lo0bits>:
 8013fb2:	6803      	ldr	r3, [r0, #0]
 8013fb4:	4602      	mov	r2, r0
 8013fb6:	f013 0007 	ands.w	r0, r3, #7
 8013fba:	d00b      	beq.n	8013fd4 <__lo0bits+0x22>
 8013fbc:	07d9      	lsls	r1, r3, #31
 8013fbe:	d421      	bmi.n	8014004 <__lo0bits+0x52>
 8013fc0:	0798      	lsls	r0, r3, #30
 8013fc2:	bf49      	itett	mi
 8013fc4:	085b      	lsrmi	r3, r3, #1
 8013fc6:	089b      	lsrpl	r3, r3, #2
 8013fc8:	2001      	movmi	r0, #1
 8013fca:	6013      	strmi	r3, [r2, #0]
 8013fcc:	bf5c      	itt	pl
 8013fce:	6013      	strpl	r3, [r2, #0]
 8013fd0:	2002      	movpl	r0, #2
 8013fd2:	4770      	bx	lr
 8013fd4:	b299      	uxth	r1, r3
 8013fd6:	b909      	cbnz	r1, 8013fdc <__lo0bits+0x2a>
 8013fd8:	0c1b      	lsrs	r3, r3, #16
 8013fda:	2010      	movs	r0, #16
 8013fdc:	b2d9      	uxtb	r1, r3
 8013fde:	b909      	cbnz	r1, 8013fe4 <__lo0bits+0x32>
 8013fe0:	3008      	adds	r0, #8
 8013fe2:	0a1b      	lsrs	r3, r3, #8
 8013fe4:	0719      	lsls	r1, r3, #28
 8013fe6:	bf04      	itt	eq
 8013fe8:	091b      	lsreq	r3, r3, #4
 8013fea:	3004      	addeq	r0, #4
 8013fec:	0799      	lsls	r1, r3, #30
 8013fee:	bf04      	itt	eq
 8013ff0:	089b      	lsreq	r3, r3, #2
 8013ff2:	3002      	addeq	r0, #2
 8013ff4:	07d9      	lsls	r1, r3, #31
 8013ff6:	d403      	bmi.n	8014000 <__lo0bits+0x4e>
 8013ff8:	085b      	lsrs	r3, r3, #1
 8013ffa:	f100 0001 	add.w	r0, r0, #1
 8013ffe:	d003      	beq.n	8014008 <__lo0bits+0x56>
 8014000:	6013      	str	r3, [r2, #0]
 8014002:	4770      	bx	lr
 8014004:	2000      	movs	r0, #0
 8014006:	4770      	bx	lr
 8014008:	2020      	movs	r0, #32
 801400a:	4770      	bx	lr

0801400c <__i2b>:
 801400c:	b510      	push	{r4, lr}
 801400e:	460c      	mov	r4, r1
 8014010:	2101      	movs	r1, #1
 8014012:	f7ff ff07 	bl	8013e24 <_Balloc>
 8014016:	4602      	mov	r2, r0
 8014018:	b928      	cbnz	r0, 8014026 <__i2b+0x1a>
 801401a:	4b05      	ldr	r3, [pc, #20]	@ (8014030 <__i2b+0x24>)
 801401c:	4805      	ldr	r0, [pc, #20]	@ (8014034 <__i2b+0x28>)
 801401e:	f240 1145 	movw	r1, #325	@ 0x145
 8014022:	f000 fb2d 	bl	8014680 <__assert_func>
 8014026:	2301      	movs	r3, #1
 8014028:	6144      	str	r4, [r0, #20]
 801402a:	6103      	str	r3, [r0, #16]
 801402c:	bd10      	pop	{r4, pc}
 801402e:	bf00      	nop
 8014030:	08016248 	.word	0x08016248
 8014034:	08016259 	.word	0x08016259

08014038 <__multiply>:
 8014038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801403c:	4614      	mov	r4, r2
 801403e:	690a      	ldr	r2, [r1, #16]
 8014040:	6923      	ldr	r3, [r4, #16]
 8014042:	429a      	cmp	r2, r3
 8014044:	bfa8      	it	ge
 8014046:	4623      	movge	r3, r4
 8014048:	460f      	mov	r7, r1
 801404a:	bfa4      	itt	ge
 801404c:	460c      	movge	r4, r1
 801404e:	461f      	movge	r7, r3
 8014050:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014054:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014058:	68a3      	ldr	r3, [r4, #8]
 801405a:	6861      	ldr	r1, [r4, #4]
 801405c:	eb0a 0609 	add.w	r6, sl, r9
 8014060:	42b3      	cmp	r3, r6
 8014062:	b085      	sub	sp, #20
 8014064:	bfb8      	it	lt
 8014066:	3101      	addlt	r1, #1
 8014068:	f7ff fedc 	bl	8013e24 <_Balloc>
 801406c:	b930      	cbnz	r0, 801407c <__multiply+0x44>
 801406e:	4602      	mov	r2, r0
 8014070:	4b44      	ldr	r3, [pc, #272]	@ (8014184 <__multiply+0x14c>)
 8014072:	4845      	ldr	r0, [pc, #276]	@ (8014188 <__multiply+0x150>)
 8014074:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014078:	f000 fb02 	bl	8014680 <__assert_func>
 801407c:	f100 0514 	add.w	r5, r0, #20
 8014080:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014084:	462b      	mov	r3, r5
 8014086:	2200      	movs	r2, #0
 8014088:	4543      	cmp	r3, r8
 801408a:	d321      	bcc.n	80140d0 <__multiply+0x98>
 801408c:	f107 0114 	add.w	r1, r7, #20
 8014090:	f104 0214 	add.w	r2, r4, #20
 8014094:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014098:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801409c:	9302      	str	r3, [sp, #8]
 801409e:	1b13      	subs	r3, r2, r4
 80140a0:	3b15      	subs	r3, #21
 80140a2:	f023 0303 	bic.w	r3, r3, #3
 80140a6:	3304      	adds	r3, #4
 80140a8:	f104 0715 	add.w	r7, r4, #21
 80140ac:	42ba      	cmp	r2, r7
 80140ae:	bf38      	it	cc
 80140b0:	2304      	movcc	r3, #4
 80140b2:	9301      	str	r3, [sp, #4]
 80140b4:	9b02      	ldr	r3, [sp, #8]
 80140b6:	9103      	str	r1, [sp, #12]
 80140b8:	428b      	cmp	r3, r1
 80140ba:	d80c      	bhi.n	80140d6 <__multiply+0x9e>
 80140bc:	2e00      	cmp	r6, #0
 80140be:	dd03      	ble.n	80140c8 <__multiply+0x90>
 80140c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d05b      	beq.n	8014180 <__multiply+0x148>
 80140c8:	6106      	str	r6, [r0, #16]
 80140ca:	b005      	add	sp, #20
 80140cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d0:	f843 2b04 	str.w	r2, [r3], #4
 80140d4:	e7d8      	b.n	8014088 <__multiply+0x50>
 80140d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80140da:	f1ba 0f00 	cmp.w	sl, #0
 80140de:	d024      	beq.n	801412a <__multiply+0xf2>
 80140e0:	f104 0e14 	add.w	lr, r4, #20
 80140e4:	46a9      	mov	r9, r5
 80140e6:	f04f 0c00 	mov.w	ip, #0
 80140ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80140ee:	f8d9 3000 	ldr.w	r3, [r9]
 80140f2:	fa1f fb87 	uxth.w	fp, r7
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80140fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014100:	f8d9 7000 	ldr.w	r7, [r9]
 8014104:	4463      	add	r3, ip
 8014106:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801410a:	fb0a c70b 	mla	r7, sl, fp, ip
 801410e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014112:	b29b      	uxth	r3, r3
 8014114:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014118:	4572      	cmp	r2, lr
 801411a:	f849 3b04 	str.w	r3, [r9], #4
 801411e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014122:	d8e2      	bhi.n	80140ea <__multiply+0xb2>
 8014124:	9b01      	ldr	r3, [sp, #4]
 8014126:	f845 c003 	str.w	ip, [r5, r3]
 801412a:	9b03      	ldr	r3, [sp, #12]
 801412c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014130:	3104      	adds	r1, #4
 8014132:	f1b9 0f00 	cmp.w	r9, #0
 8014136:	d021      	beq.n	801417c <__multiply+0x144>
 8014138:	682b      	ldr	r3, [r5, #0]
 801413a:	f104 0c14 	add.w	ip, r4, #20
 801413e:	46ae      	mov	lr, r5
 8014140:	f04f 0a00 	mov.w	sl, #0
 8014144:	f8bc b000 	ldrh.w	fp, [ip]
 8014148:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801414c:	fb09 770b 	mla	r7, r9, fp, r7
 8014150:	4457      	add	r7, sl
 8014152:	b29b      	uxth	r3, r3
 8014154:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014158:	f84e 3b04 	str.w	r3, [lr], #4
 801415c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014160:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014164:	f8be 3000 	ldrh.w	r3, [lr]
 8014168:	fb09 330a 	mla	r3, r9, sl, r3
 801416c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014170:	4562      	cmp	r2, ip
 8014172:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014176:	d8e5      	bhi.n	8014144 <__multiply+0x10c>
 8014178:	9f01      	ldr	r7, [sp, #4]
 801417a:	51eb      	str	r3, [r5, r7]
 801417c:	3504      	adds	r5, #4
 801417e:	e799      	b.n	80140b4 <__multiply+0x7c>
 8014180:	3e01      	subs	r6, #1
 8014182:	e79b      	b.n	80140bc <__multiply+0x84>
 8014184:	08016248 	.word	0x08016248
 8014188:	08016259 	.word	0x08016259

0801418c <__pow5mult>:
 801418c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014190:	4615      	mov	r5, r2
 8014192:	f012 0203 	ands.w	r2, r2, #3
 8014196:	4607      	mov	r7, r0
 8014198:	460e      	mov	r6, r1
 801419a:	d007      	beq.n	80141ac <__pow5mult+0x20>
 801419c:	4c25      	ldr	r4, [pc, #148]	@ (8014234 <__pow5mult+0xa8>)
 801419e:	3a01      	subs	r2, #1
 80141a0:	2300      	movs	r3, #0
 80141a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80141a6:	f7ff fe9f 	bl	8013ee8 <__multadd>
 80141aa:	4606      	mov	r6, r0
 80141ac:	10ad      	asrs	r5, r5, #2
 80141ae:	d03d      	beq.n	801422c <__pow5mult+0xa0>
 80141b0:	69fc      	ldr	r4, [r7, #28]
 80141b2:	b97c      	cbnz	r4, 80141d4 <__pow5mult+0x48>
 80141b4:	2010      	movs	r0, #16
 80141b6:	f7fe f891 	bl	80122dc <malloc>
 80141ba:	4602      	mov	r2, r0
 80141bc:	61f8      	str	r0, [r7, #28]
 80141be:	b928      	cbnz	r0, 80141cc <__pow5mult+0x40>
 80141c0:	4b1d      	ldr	r3, [pc, #116]	@ (8014238 <__pow5mult+0xac>)
 80141c2:	481e      	ldr	r0, [pc, #120]	@ (801423c <__pow5mult+0xb0>)
 80141c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80141c8:	f000 fa5a 	bl	8014680 <__assert_func>
 80141cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80141d0:	6004      	str	r4, [r0, #0]
 80141d2:	60c4      	str	r4, [r0, #12]
 80141d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80141d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80141dc:	b94c      	cbnz	r4, 80141f2 <__pow5mult+0x66>
 80141de:	f240 2171 	movw	r1, #625	@ 0x271
 80141e2:	4638      	mov	r0, r7
 80141e4:	f7ff ff12 	bl	801400c <__i2b>
 80141e8:	2300      	movs	r3, #0
 80141ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80141ee:	4604      	mov	r4, r0
 80141f0:	6003      	str	r3, [r0, #0]
 80141f2:	f04f 0900 	mov.w	r9, #0
 80141f6:	07eb      	lsls	r3, r5, #31
 80141f8:	d50a      	bpl.n	8014210 <__pow5mult+0x84>
 80141fa:	4631      	mov	r1, r6
 80141fc:	4622      	mov	r2, r4
 80141fe:	4638      	mov	r0, r7
 8014200:	f7ff ff1a 	bl	8014038 <__multiply>
 8014204:	4631      	mov	r1, r6
 8014206:	4680      	mov	r8, r0
 8014208:	4638      	mov	r0, r7
 801420a:	f7ff fe4b 	bl	8013ea4 <_Bfree>
 801420e:	4646      	mov	r6, r8
 8014210:	106d      	asrs	r5, r5, #1
 8014212:	d00b      	beq.n	801422c <__pow5mult+0xa0>
 8014214:	6820      	ldr	r0, [r4, #0]
 8014216:	b938      	cbnz	r0, 8014228 <__pow5mult+0x9c>
 8014218:	4622      	mov	r2, r4
 801421a:	4621      	mov	r1, r4
 801421c:	4638      	mov	r0, r7
 801421e:	f7ff ff0b 	bl	8014038 <__multiply>
 8014222:	6020      	str	r0, [r4, #0]
 8014224:	f8c0 9000 	str.w	r9, [r0]
 8014228:	4604      	mov	r4, r0
 801422a:	e7e4      	b.n	80141f6 <__pow5mult+0x6a>
 801422c:	4630      	mov	r0, r6
 801422e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014232:	bf00      	nop
 8014234:	080162b4 	.word	0x080162b4
 8014238:	080161d9 	.word	0x080161d9
 801423c:	08016259 	.word	0x08016259

08014240 <__lshift>:
 8014240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014244:	460c      	mov	r4, r1
 8014246:	6849      	ldr	r1, [r1, #4]
 8014248:	6923      	ldr	r3, [r4, #16]
 801424a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801424e:	68a3      	ldr	r3, [r4, #8]
 8014250:	4607      	mov	r7, r0
 8014252:	4691      	mov	r9, r2
 8014254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014258:	f108 0601 	add.w	r6, r8, #1
 801425c:	42b3      	cmp	r3, r6
 801425e:	db0b      	blt.n	8014278 <__lshift+0x38>
 8014260:	4638      	mov	r0, r7
 8014262:	f7ff fddf 	bl	8013e24 <_Balloc>
 8014266:	4605      	mov	r5, r0
 8014268:	b948      	cbnz	r0, 801427e <__lshift+0x3e>
 801426a:	4602      	mov	r2, r0
 801426c:	4b28      	ldr	r3, [pc, #160]	@ (8014310 <__lshift+0xd0>)
 801426e:	4829      	ldr	r0, [pc, #164]	@ (8014314 <__lshift+0xd4>)
 8014270:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014274:	f000 fa04 	bl	8014680 <__assert_func>
 8014278:	3101      	adds	r1, #1
 801427a:	005b      	lsls	r3, r3, #1
 801427c:	e7ee      	b.n	801425c <__lshift+0x1c>
 801427e:	2300      	movs	r3, #0
 8014280:	f100 0114 	add.w	r1, r0, #20
 8014284:	f100 0210 	add.w	r2, r0, #16
 8014288:	4618      	mov	r0, r3
 801428a:	4553      	cmp	r3, sl
 801428c:	db33      	blt.n	80142f6 <__lshift+0xb6>
 801428e:	6920      	ldr	r0, [r4, #16]
 8014290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014294:	f104 0314 	add.w	r3, r4, #20
 8014298:	f019 091f 	ands.w	r9, r9, #31
 801429c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80142a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80142a4:	d02b      	beq.n	80142fe <__lshift+0xbe>
 80142a6:	f1c9 0e20 	rsb	lr, r9, #32
 80142aa:	468a      	mov	sl, r1
 80142ac:	2200      	movs	r2, #0
 80142ae:	6818      	ldr	r0, [r3, #0]
 80142b0:	fa00 f009 	lsl.w	r0, r0, r9
 80142b4:	4310      	orrs	r0, r2
 80142b6:	f84a 0b04 	str.w	r0, [sl], #4
 80142ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80142be:	459c      	cmp	ip, r3
 80142c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80142c4:	d8f3      	bhi.n	80142ae <__lshift+0x6e>
 80142c6:	ebac 0304 	sub.w	r3, ip, r4
 80142ca:	3b15      	subs	r3, #21
 80142cc:	f023 0303 	bic.w	r3, r3, #3
 80142d0:	3304      	adds	r3, #4
 80142d2:	f104 0015 	add.w	r0, r4, #21
 80142d6:	4584      	cmp	ip, r0
 80142d8:	bf38      	it	cc
 80142da:	2304      	movcc	r3, #4
 80142dc:	50ca      	str	r2, [r1, r3]
 80142de:	b10a      	cbz	r2, 80142e4 <__lshift+0xa4>
 80142e0:	f108 0602 	add.w	r6, r8, #2
 80142e4:	3e01      	subs	r6, #1
 80142e6:	4638      	mov	r0, r7
 80142e8:	612e      	str	r6, [r5, #16]
 80142ea:	4621      	mov	r1, r4
 80142ec:	f7ff fdda 	bl	8013ea4 <_Bfree>
 80142f0:	4628      	mov	r0, r5
 80142f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80142fa:	3301      	adds	r3, #1
 80142fc:	e7c5      	b.n	801428a <__lshift+0x4a>
 80142fe:	3904      	subs	r1, #4
 8014300:	f853 2b04 	ldr.w	r2, [r3], #4
 8014304:	f841 2f04 	str.w	r2, [r1, #4]!
 8014308:	459c      	cmp	ip, r3
 801430a:	d8f9      	bhi.n	8014300 <__lshift+0xc0>
 801430c:	e7ea      	b.n	80142e4 <__lshift+0xa4>
 801430e:	bf00      	nop
 8014310:	08016248 	.word	0x08016248
 8014314:	08016259 	.word	0x08016259

08014318 <__mcmp>:
 8014318:	690a      	ldr	r2, [r1, #16]
 801431a:	4603      	mov	r3, r0
 801431c:	6900      	ldr	r0, [r0, #16]
 801431e:	1a80      	subs	r0, r0, r2
 8014320:	b530      	push	{r4, r5, lr}
 8014322:	d10e      	bne.n	8014342 <__mcmp+0x2a>
 8014324:	3314      	adds	r3, #20
 8014326:	3114      	adds	r1, #20
 8014328:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801432c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014330:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014334:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014338:	4295      	cmp	r5, r2
 801433a:	d003      	beq.n	8014344 <__mcmp+0x2c>
 801433c:	d205      	bcs.n	801434a <__mcmp+0x32>
 801433e:	f04f 30ff 	mov.w	r0, #4294967295
 8014342:	bd30      	pop	{r4, r5, pc}
 8014344:	42a3      	cmp	r3, r4
 8014346:	d3f3      	bcc.n	8014330 <__mcmp+0x18>
 8014348:	e7fb      	b.n	8014342 <__mcmp+0x2a>
 801434a:	2001      	movs	r0, #1
 801434c:	e7f9      	b.n	8014342 <__mcmp+0x2a>
	...

08014350 <__mdiff>:
 8014350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014354:	4689      	mov	r9, r1
 8014356:	4606      	mov	r6, r0
 8014358:	4611      	mov	r1, r2
 801435a:	4648      	mov	r0, r9
 801435c:	4614      	mov	r4, r2
 801435e:	f7ff ffdb 	bl	8014318 <__mcmp>
 8014362:	1e05      	subs	r5, r0, #0
 8014364:	d112      	bne.n	801438c <__mdiff+0x3c>
 8014366:	4629      	mov	r1, r5
 8014368:	4630      	mov	r0, r6
 801436a:	f7ff fd5b 	bl	8013e24 <_Balloc>
 801436e:	4602      	mov	r2, r0
 8014370:	b928      	cbnz	r0, 801437e <__mdiff+0x2e>
 8014372:	4b3f      	ldr	r3, [pc, #252]	@ (8014470 <__mdiff+0x120>)
 8014374:	f240 2137 	movw	r1, #567	@ 0x237
 8014378:	483e      	ldr	r0, [pc, #248]	@ (8014474 <__mdiff+0x124>)
 801437a:	f000 f981 	bl	8014680 <__assert_func>
 801437e:	2301      	movs	r3, #1
 8014380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014384:	4610      	mov	r0, r2
 8014386:	b003      	add	sp, #12
 8014388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801438c:	bfbc      	itt	lt
 801438e:	464b      	movlt	r3, r9
 8014390:	46a1      	movlt	r9, r4
 8014392:	4630      	mov	r0, r6
 8014394:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014398:	bfba      	itte	lt
 801439a:	461c      	movlt	r4, r3
 801439c:	2501      	movlt	r5, #1
 801439e:	2500      	movge	r5, #0
 80143a0:	f7ff fd40 	bl	8013e24 <_Balloc>
 80143a4:	4602      	mov	r2, r0
 80143a6:	b918      	cbnz	r0, 80143b0 <__mdiff+0x60>
 80143a8:	4b31      	ldr	r3, [pc, #196]	@ (8014470 <__mdiff+0x120>)
 80143aa:	f240 2145 	movw	r1, #581	@ 0x245
 80143ae:	e7e3      	b.n	8014378 <__mdiff+0x28>
 80143b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80143b4:	6926      	ldr	r6, [r4, #16]
 80143b6:	60c5      	str	r5, [r0, #12]
 80143b8:	f109 0310 	add.w	r3, r9, #16
 80143bc:	f109 0514 	add.w	r5, r9, #20
 80143c0:	f104 0e14 	add.w	lr, r4, #20
 80143c4:	f100 0b14 	add.w	fp, r0, #20
 80143c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80143cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80143d0:	9301      	str	r3, [sp, #4]
 80143d2:	46d9      	mov	r9, fp
 80143d4:	f04f 0c00 	mov.w	ip, #0
 80143d8:	9b01      	ldr	r3, [sp, #4]
 80143da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80143de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80143e2:	9301      	str	r3, [sp, #4]
 80143e4:	fa1f f38a 	uxth.w	r3, sl
 80143e8:	4619      	mov	r1, r3
 80143ea:	b283      	uxth	r3, r0
 80143ec:	1acb      	subs	r3, r1, r3
 80143ee:	0c00      	lsrs	r0, r0, #16
 80143f0:	4463      	add	r3, ip
 80143f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80143f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80143fa:	b29b      	uxth	r3, r3
 80143fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014400:	4576      	cmp	r6, lr
 8014402:	f849 3b04 	str.w	r3, [r9], #4
 8014406:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801440a:	d8e5      	bhi.n	80143d8 <__mdiff+0x88>
 801440c:	1b33      	subs	r3, r6, r4
 801440e:	3b15      	subs	r3, #21
 8014410:	f023 0303 	bic.w	r3, r3, #3
 8014414:	3415      	adds	r4, #21
 8014416:	3304      	adds	r3, #4
 8014418:	42a6      	cmp	r6, r4
 801441a:	bf38      	it	cc
 801441c:	2304      	movcc	r3, #4
 801441e:	441d      	add	r5, r3
 8014420:	445b      	add	r3, fp
 8014422:	461e      	mov	r6, r3
 8014424:	462c      	mov	r4, r5
 8014426:	4544      	cmp	r4, r8
 8014428:	d30e      	bcc.n	8014448 <__mdiff+0xf8>
 801442a:	f108 0103 	add.w	r1, r8, #3
 801442e:	1b49      	subs	r1, r1, r5
 8014430:	f021 0103 	bic.w	r1, r1, #3
 8014434:	3d03      	subs	r5, #3
 8014436:	45a8      	cmp	r8, r5
 8014438:	bf38      	it	cc
 801443a:	2100      	movcc	r1, #0
 801443c:	440b      	add	r3, r1
 801443e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014442:	b191      	cbz	r1, 801446a <__mdiff+0x11a>
 8014444:	6117      	str	r7, [r2, #16]
 8014446:	e79d      	b.n	8014384 <__mdiff+0x34>
 8014448:	f854 1b04 	ldr.w	r1, [r4], #4
 801444c:	46e6      	mov	lr, ip
 801444e:	0c08      	lsrs	r0, r1, #16
 8014450:	fa1c fc81 	uxtah	ip, ip, r1
 8014454:	4471      	add	r1, lr
 8014456:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801445a:	b289      	uxth	r1, r1
 801445c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014460:	f846 1b04 	str.w	r1, [r6], #4
 8014464:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014468:	e7dd      	b.n	8014426 <__mdiff+0xd6>
 801446a:	3f01      	subs	r7, #1
 801446c:	e7e7      	b.n	801443e <__mdiff+0xee>
 801446e:	bf00      	nop
 8014470:	08016248 	.word	0x08016248
 8014474:	08016259 	.word	0x08016259

08014478 <__d2b>:
 8014478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801447c:	460f      	mov	r7, r1
 801447e:	2101      	movs	r1, #1
 8014480:	ec59 8b10 	vmov	r8, r9, d0
 8014484:	4616      	mov	r6, r2
 8014486:	f7ff fccd 	bl	8013e24 <_Balloc>
 801448a:	4604      	mov	r4, r0
 801448c:	b930      	cbnz	r0, 801449c <__d2b+0x24>
 801448e:	4602      	mov	r2, r0
 8014490:	4b23      	ldr	r3, [pc, #140]	@ (8014520 <__d2b+0xa8>)
 8014492:	4824      	ldr	r0, [pc, #144]	@ (8014524 <__d2b+0xac>)
 8014494:	f240 310f 	movw	r1, #783	@ 0x30f
 8014498:	f000 f8f2 	bl	8014680 <__assert_func>
 801449c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80144a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80144a4:	b10d      	cbz	r5, 80144aa <__d2b+0x32>
 80144a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80144aa:	9301      	str	r3, [sp, #4]
 80144ac:	f1b8 0300 	subs.w	r3, r8, #0
 80144b0:	d023      	beq.n	80144fa <__d2b+0x82>
 80144b2:	4668      	mov	r0, sp
 80144b4:	9300      	str	r3, [sp, #0]
 80144b6:	f7ff fd7c 	bl	8013fb2 <__lo0bits>
 80144ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80144be:	b1d0      	cbz	r0, 80144f6 <__d2b+0x7e>
 80144c0:	f1c0 0320 	rsb	r3, r0, #32
 80144c4:	fa02 f303 	lsl.w	r3, r2, r3
 80144c8:	430b      	orrs	r3, r1
 80144ca:	40c2      	lsrs	r2, r0
 80144cc:	6163      	str	r3, [r4, #20]
 80144ce:	9201      	str	r2, [sp, #4]
 80144d0:	9b01      	ldr	r3, [sp, #4]
 80144d2:	61a3      	str	r3, [r4, #24]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	bf0c      	ite	eq
 80144d8:	2201      	moveq	r2, #1
 80144da:	2202      	movne	r2, #2
 80144dc:	6122      	str	r2, [r4, #16]
 80144de:	b1a5      	cbz	r5, 801450a <__d2b+0x92>
 80144e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80144e4:	4405      	add	r5, r0
 80144e6:	603d      	str	r5, [r7, #0]
 80144e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80144ec:	6030      	str	r0, [r6, #0]
 80144ee:	4620      	mov	r0, r4
 80144f0:	b003      	add	sp, #12
 80144f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144f6:	6161      	str	r1, [r4, #20]
 80144f8:	e7ea      	b.n	80144d0 <__d2b+0x58>
 80144fa:	a801      	add	r0, sp, #4
 80144fc:	f7ff fd59 	bl	8013fb2 <__lo0bits>
 8014500:	9b01      	ldr	r3, [sp, #4]
 8014502:	6163      	str	r3, [r4, #20]
 8014504:	3020      	adds	r0, #32
 8014506:	2201      	movs	r2, #1
 8014508:	e7e8      	b.n	80144dc <__d2b+0x64>
 801450a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801450e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014512:	6038      	str	r0, [r7, #0]
 8014514:	6918      	ldr	r0, [r3, #16]
 8014516:	f7ff fd2d 	bl	8013f74 <__hi0bits>
 801451a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801451e:	e7e5      	b.n	80144ec <__d2b+0x74>
 8014520:	08016248 	.word	0x08016248
 8014524:	08016259 	.word	0x08016259

08014528 <__sflush_r>:
 8014528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014530:	0716      	lsls	r6, r2, #28
 8014532:	4605      	mov	r5, r0
 8014534:	460c      	mov	r4, r1
 8014536:	d454      	bmi.n	80145e2 <__sflush_r+0xba>
 8014538:	684b      	ldr	r3, [r1, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	dc02      	bgt.n	8014544 <__sflush_r+0x1c>
 801453e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014540:	2b00      	cmp	r3, #0
 8014542:	dd48      	ble.n	80145d6 <__sflush_r+0xae>
 8014544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014546:	2e00      	cmp	r6, #0
 8014548:	d045      	beq.n	80145d6 <__sflush_r+0xae>
 801454a:	2300      	movs	r3, #0
 801454c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014550:	682f      	ldr	r7, [r5, #0]
 8014552:	6a21      	ldr	r1, [r4, #32]
 8014554:	602b      	str	r3, [r5, #0]
 8014556:	d030      	beq.n	80145ba <__sflush_r+0x92>
 8014558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801455a:	89a3      	ldrh	r3, [r4, #12]
 801455c:	0759      	lsls	r1, r3, #29
 801455e:	d505      	bpl.n	801456c <__sflush_r+0x44>
 8014560:	6863      	ldr	r3, [r4, #4]
 8014562:	1ad2      	subs	r2, r2, r3
 8014564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014566:	b10b      	cbz	r3, 801456c <__sflush_r+0x44>
 8014568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801456a:	1ad2      	subs	r2, r2, r3
 801456c:	2300      	movs	r3, #0
 801456e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014570:	6a21      	ldr	r1, [r4, #32]
 8014572:	4628      	mov	r0, r5
 8014574:	47b0      	blx	r6
 8014576:	1c43      	adds	r3, r0, #1
 8014578:	89a3      	ldrh	r3, [r4, #12]
 801457a:	d106      	bne.n	801458a <__sflush_r+0x62>
 801457c:	6829      	ldr	r1, [r5, #0]
 801457e:	291d      	cmp	r1, #29
 8014580:	d82b      	bhi.n	80145da <__sflush_r+0xb2>
 8014582:	4a2a      	ldr	r2, [pc, #168]	@ (801462c <__sflush_r+0x104>)
 8014584:	410a      	asrs	r2, r1
 8014586:	07d6      	lsls	r6, r2, #31
 8014588:	d427      	bmi.n	80145da <__sflush_r+0xb2>
 801458a:	2200      	movs	r2, #0
 801458c:	6062      	str	r2, [r4, #4]
 801458e:	04d9      	lsls	r1, r3, #19
 8014590:	6922      	ldr	r2, [r4, #16]
 8014592:	6022      	str	r2, [r4, #0]
 8014594:	d504      	bpl.n	80145a0 <__sflush_r+0x78>
 8014596:	1c42      	adds	r2, r0, #1
 8014598:	d101      	bne.n	801459e <__sflush_r+0x76>
 801459a:	682b      	ldr	r3, [r5, #0]
 801459c:	b903      	cbnz	r3, 80145a0 <__sflush_r+0x78>
 801459e:	6560      	str	r0, [r4, #84]	@ 0x54
 80145a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145a2:	602f      	str	r7, [r5, #0]
 80145a4:	b1b9      	cbz	r1, 80145d6 <__sflush_r+0xae>
 80145a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145aa:	4299      	cmp	r1, r3
 80145ac:	d002      	beq.n	80145b4 <__sflush_r+0x8c>
 80145ae:	4628      	mov	r0, r5
 80145b0:	f7ff fbee 	bl	8013d90 <_free_r>
 80145b4:	2300      	movs	r3, #0
 80145b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80145b8:	e00d      	b.n	80145d6 <__sflush_r+0xae>
 80145ba:	2301      	movs	r3, #1
 80145bc:	4628      	mov	r0, r5
 80145be:	47b0      	blx	r6
 80145c0:	4602      	mov	r2, r0
 80145c2:	1c50      	adds	r0, r2, #1
 80145c4:	d1c9      	bne.n	801455a <__sflush_r+0x32>
 80145c6:	682b      	ldr	r3, [r5, #0]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d0c6      	beq.n	801455a <__sflush_r+0x32>
 80145cc:	2b1d      	cmp	r3, #29
 80145ce:	d001      	beq.n	80145d4 <__sflush_r+0xac>
 80145d0:	2b16      	cmp	r3, #22
 80145d2:	d11e      	bne.n	8014612 <__sflush_r+0xea>
 80145d4:	602f      	str	r7, [r5, #0]
 80145d6:	2000      	movs	r0, #0
 80145d8:	e022      	b.n	8014620 <__sflush_r+0xf8>
 80145da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145de:	b21b      	sxth	r3, r3
 80145e0:	e01b      	b.n	801461a <__sflush_r+0xf2>
 80145e2:	690f      	ldr	r7, [r1, #16]
 80145e4:	2f00      	cmp	r7, #0
 80145e6:	d0f6      	beq.n	80145d6 <__sflush_r+0xae>
 80145e8:	0793      	lsls	r3, r2, #30
 80145ea:	680e      	ldr	r6, [r1, #0]
 80145ec:	bf08      	it	eq
 80145ee:	694b      	ldreq	r3, [r1, #20]
 80145f0:	600f      	str	r7, [r1, #0]
 80145f2:	bf18      	it	ne
 80145f4:	2300      	movne	r3, #0
 80145f6:	eba6 0807 	sub.w	r8, r6, r7
 80145fa:	608b      	str	r3, [r1, #8]
 80145fc:	f1b8 0f00 	cmp.w	r8, #0
 8014600:	dde9      	ble.n	80145d6 <__sflush_r+0xae>
 8014602:	6a21      	ldr	r1, [r4, #32]
 8014604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014606:	4643      	mov	r3, r8
 8014608:	463a      	mov	r2, r7
 801460a:	4628      	mov	r0, r5
 801460c:	47b0      	blx	r6
 801460e:	2800      	cmp	r0, #0
 8014610:	dc08      	bgt.n	8014624 <__sflush_r+0xfc>
 8014612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801461a:	81a3      	strh	r3, [r4, #12]
 801461c:	f04f 30ff 	mov.w	r0, #4294967295
 8014620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014624:	4407      	add	r7, r0
 8014626:	eba8 0800 	sub.w	r8, r8, r0
 801462a:	e7e7      	b.n	80145fc <__sflush_r+0xd4>
 801462c:	dfbffffe 	.word	0xdfbffffe

08014630 <_fflush_r>:
 8014630:	b538      	push	{r3, r4, r5, lr}
 8014632:	690b      	ldr	r3, [r1, #16]
 8014634:	4605      	mov	r5, r0
 8014636:	460c      	mov	r4, r1
 8014638:	b913      	cbnz	r3, 8014640 <_fflush_r+0x10>
 801463a:	2500      	movs	r5, #0
 801463c:	4628      	mov	r0, r5
 801463e:	bd38      	pop	{r3, r4, r5, pc}
 8014640:	b118      	cbz	r0, 801464a <_fflush_r+0x1a>
 8014642:	6a03      	ldr	r3, [r0, #32]
 8014644:	b90b      	cbnz	r3, 801464a <_fflush_r+0x1a>
 8014646:	f7fe fbf9 	bl	8012e3c <__sinit>
 801464a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d0f3      	beq.n	801463a <_fflush_r+0xa>
 8014652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014654:	07d0      	lsls	r0, r2, #31
 8014656:	d404      	bmi.n	8014662 <_fflush_r+0x32>
 8014658:	0599      	lsls	r1, r3, #22
 801465a:	d402      	bmi.n	8014662 <_fflush_r+0x32>
 801465c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801465e:	f7fe fd38 	bl	80130d2 <__retarget_lock_acquire_recursive>
 8014662:	4628      	mov	r0, r5
 8014664:	4621      	mov	r1, r4
 8014666:	f7ff ff5f 	bl	8014528 <__sflush_r>
 801466a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801466c:	07da      	lsls	r2, r3, #31
 801466e:	4605      	mov	r5, r0
 8014670:	d4e4      	bmi.n	801463c <_fflush_r+0xc>
 8014672:	89a3      	ldrh	r3, [r4, #12]
 8014674:	059b      	lsls	r3, r3, #22
 8014676:	d4e1      	bmi.n	801463c <_fflush_r+0xc>
 8014678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801467a:	f7fe fd2b 	bl	80130d4 <__retarget_lock_release_recursive>
 801467e:	e7dd      	b.n	801463c <_fflush_r+0xc>

08014680 <__assert_func>:
 8014680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014682:	4614      	mov	r4, r2
 8014684:	461a      	mov	r2, r3
 8014686:	4b09      	ldr	r3, [pc, #36]	@ (80146ac <__assert_func+0x2c>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	4605      	mov	r5, r0
 801468c:	68d8      	ldr	r0, [r3, #12]
 801468e:	b954      	cbnz	r4, 80146a6 <__assert_func+0x26>
 8014690:	4b07      	ldr	r3, [pc, #28]	@ (80146b0 <__assert_func+0x30>)
 8014692:	461c      	mov	r4, r3
 8014694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014698:	9100      	str	r1, [sp, #0]
 801469a:	462b      	mov	r3, r5
 801469c:	4905      	ldr	r1, [pc, #20]	@ (80146b4 <__assert_func+0x34>)
 801469e:	f000 f841 	bl	8014724 <fiprintf>
 80146a2:	f7fd fe13 	bl	80122cc <abort>
 80146a6:	4b04      	ldr	r3, [pc, #16]	@ (80146b8 <__assert_func+0x38>)
 80146a8:	e7f4      	b.n	8014694 <__assert_func+0x14>
 80146aa:	bf00      	nop
 80146ac:	20000034 	.word	0x20000034
 80146b0:	080163f5 	.word	0x080163f5
 80146b4:	080163c7 	.word	0x080163c7
 80146b8:	080163ba 	.word	0x080163ba

080146bc <_calloc_r>:
 80146bc:	b570      	push	{r4, r5, r6, lr}
 80146be:	fba1 5402 	umull	r5, r4, r1, r2
 80146c2:	b93c      	cbnz	r4, 80146d4 <_calloc_r+0x18>
 80146c4:	4629      	mov	r1, r5
 80146c6:	f7fd fe3b 	bl	8012340 <_malloc_r>
 80146ca:	4606      	mov	r6, r0
 80146cc:	b928      	cbnz	r0, 80146da <_calloc_r+0x1e>
 80146ce:	2600      	movs	r6, #0
 80146d0:	4630      	mov	r0, r6
 80146d2:	bd70      	pop	{r4, r5, r6, pc}
 80146d4:	220c      	movs	r2, #12
 80146d6:	6002      	str	r2, [r0, #0]
 80146d8:	e7f9      	b.n	80146ce <_calloc_r+0x12>
 80146da:	462a      	mov	r2, r5
 80146dc:	4621      	mov	r1, r4
 80146de:	f7fe fc26 	bl	8012f2e <memset>
 80146e2:	e7f5      	b.n	80146d0 <_calloc_r+0x14>

080146e4 <__ascii_mbtowc>:
 80146e4:	b082      	sub	sp, #8
 80146e6:	b901      	cbnz	r1, 80146ea <__ascii_mbtowc+0x6>
 80146e8:	a901      	add	r1, sp, #4
 80146ea:	b142      	cbz	r2, 80146fe <__ascii_mbtowc+0x1a>
 80146ec:	b14b      	cbz	r3, 8014702 <__ascii_mbtowc+0x1e>
 80146ee:	7813      	ldrb	r3, [r2, #0]
 80146f0:	600b      	str	r3, [r1, #0]
 80146f2:	7812      	ldrb	r2, [r2, #0]
 80146f4:	1e10      	subs	r0, r2, #0
 80146f6:	bf18      	it	ne
 80146f8:	2001      	movne	r0, #1
 80146fa:	b002      	add	sp, #8
 80146fc:	4770      	bx	lr
 80146fe:	4610      	mov	r0, r2
 8014700:	e7fb      	b.n	80146fa <__ascii_mbtowc+0x16>
 8014702:	f06f 0001 	mvn.w	r0, #1
 8014706:	e7f8      	b.n	80146fa <__ascii_mbtowc+0x16>

08014708 <__ascii_wctomb>:
 8014708:	4603      	mov	r3, r0
 801470a:	4608      	mov	r0, r1
 801470c:	b141      	cbz	r1, 8014720 <__ascii_wctomb+0x18>
 801470e:	2aff      	cmp	r2, #255	@ 0xff
 8014710:	d904      	bls.n	801471c <__ascii_wctomb+0x14>
 8014712:	228a      	movs	r2, #138	@ 0x8a
 8014714:	601a      	str	r2, [r3, #0]
 8014716:	f04f 30ff 	mov.w	r0, #4294967295
 801471a:	4770      	bx	lr
 801471c:	700a      	strb	r2, [r1, #0]
 801471e:	2001      	movs	r0, #1
 8014720:	4770      	bx	lr
	...

08014724 <fiprintf>:
 8014724:	b40e      	push	{r1, r2, r3}
 8014726:	b503      	push	{r0, r1, lr}
 8014728:	4601      	mov	r1, r0
 801472a:	ab03      	add	r3, sp, #12
 801472c:	4805      	ldr	r0, [pc, #20]	@ (8014744 <fiprintf+0x20>)
 801472e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014732:	6800      	ldr	r0, [r0, #0]
 8014734:	9301      	str	r3, [sp, #4]
 8014736:	f000 f831 	bl	801479c <_vfiprintf_r>
 801473a:	b002      	add	sp, #8
 801473c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014740:	b003      	add	sp, #12
 8014742:	4770      	bx	lr
 8014744:	20000034 	.word	0x20000034

08014748 <__sfputc_r>:
 8014748:	6893      	ldr	r3, [r2, #8]
 801474a:	3b01      	subs	r3, #1
 801474c:	2b00      	cmp	r3, #0
 801474e:	b410      	push	{r4}
 8014750:	6093      	str	r3, [r2, #8]
 8014752:	da08      	bge.n	8014766 <__sfputc_r+0x1e>
 8014754:	6994      	ldr	r4, [r2, #24]
 8014756:	42a3      	cmp	r3, r4
 8014758:	db01      	blt.n	801475e <__sfputc_r+0x16>
 801475a:	290a      	cmp	r1, #10
 801475c:	d103      	bne.n	8014766 <__sfputc_r+0x1e>
 801475e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014762:	f000 b933 	b.w	80149cc <__swbuf_r>
 8014766:	6813      	ldr	r3, [r2, #0]
 8014768:	1c58      	adds	r0, r3, #1
 801476a:	6010      	str	r0, [r2, #0]
 801476c:	7019      	strb	r1, [r3, #0]
 801476e:	4608      	mov	r0, r1
 8014770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014774:	4770      	bx	lr

08014776 <__sfputs_r>:
 8014776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014778:	4606      	mov	r6, r0
 801477a:	460f      	mov	r7, r1
 801477c:	4614      	mov	r4, r2
 801477e:	18d5      	adds	r5, r2, r3
 8014780:	42ac      	cmp	r4, r5
 8014782:	d101      	bne.n	8014788 <__sfputs_r+0x12>
 8014784:	2000      	movs	r0, #0
 8014786:	e007      	b.n	8014798 <__sfputs_r+0x22>
 8014788:	f814 1b01 	ldrb.w	r1, [r4], #1
 801478c:	463a      	mov	r2, r7
 801478e:	4630      	mov	r0, r6
 8014790:	f7ff ffda 	bl	8014748 <__sfputc_r>
 8014794:	1c43      	adds	r3, r0, #1
 8014796:	d1f3      	bne.n	8014780 <__sfputs_r+0xa>
 8014798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801479c <_vfiprintf_r>:
 801479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a0:	460d      	mov	r5, r1
 80147a2:	b09d      	sub	sp, #116	@ 0x74
 80147a4:	4614      	mov	r4, r2
 80147a6:	4698      	mov	r8, r3
 80147a8:	4606      	mov	r6, r0
 80147aa:	b118      	cbz	r0, 80147b4 <_vfiprintf_r+0x18>
 80147ac:	6a03      	ldr	r3, [r0, #32]
 80147ae:	b90b      	cbnz	r3, 80147b4 <_vfiprintf_r+0x18>
 80147b0:	f7fe fb44 	bl	8012e3c <__sinit>
 80147b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80147b6:	07d9      	lsls	r1, r3, #31
 80147b8:	d405      	bmi.n	80147c6 <_vfiprintf_r+0x2a>
 80147ba:	89ab      	ldrh	r3, [r5, #12]
 80147bc:	059a      	lsls	r2, r3, #22
 80147be:	d402      	bmi.n	80147c6 <_vfiprintf_r+0x2a>
 80147c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80147c2:	f7fe fc86 	bl	80130d2 <__retarget_lock_acquire_recursive>
 80147c6:	89ab      	ldrh	r3, [r5, #12]
 80147c8:	071b      	lsls	r3, r3, #28
 80147ca:	d501      	bpl.n	80147d0 <_vfiprintf_r+0x34>
 80147cc:	692b      	ldr	r3, [r5, #16]
 80147ce:	b99b      	cbnz	r3, 80147f8 <_vfiprintf_r+0x5c>
 80147d0:	4629      	mov	r1, r5
 80147d2:	4630      	mov	r0, r6
 80147d4:	f000 f938 	bl	8014a48 <__swsetup_r>
 80147d8:	b170      	cbz	r0, 80147f8 <_vfiprintf_r+0x5c>
 80147da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80147dc:	07dc      	lsls	r4, r3, #31
 80147de:	d504      	bpl.n	80147ea <_vfiprintf_r+0x4e>
 80147e0:	f04f 30ff 	mov.w	r0, #4294967295
 80147e4:	b01d      	add	sp, #116	@ 0x74
 80147e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ea:	89ab      	ldrh	r3, [r5, #12]
 80147ec:	0598      	lsls	r0, r3, #22
 80147ee:	d4f7      	bmi.n	80147e0 <_vfiprintf_r+0x44>
 80147f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80147f2:	f7fe fc6f 	bl	80130d4 <__retarget_lock_release_recursive>
 80147f6:	e7f3      	b.n	80147e0 <_vfiprintf_r+0x44>
 80147f8:	2300      	movs	r3, #0
 80147fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80147fc:	2320      	movs	r3, #32
 80147fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014802:	f8cd 800c 	str.w	r8, [sp, #12]
 8014806:	2330      	movs	r3, #48	@ 0x30
 8014808:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80149b8 <_vfiprintf_r+0x21c>
 801480c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014810:	f04f 0901 	mov.w	r9, #1
 8014814:	4623      	mov	r3, r4
 8014816:	469a      	mov	sl, r3
 8014818:	f813 2b01 	ldrb.w	r2, [r3], #1
 801481c:	b10a      	cbz	r2, 8014822 <_vfiprintf_r+0x86>
 801481e:	2a25      	cmp	r2, #37	@ 0x25
 8014820:	d1f9      	bne.n	8014816 <_vfiprintf_r+0x7a>
 8014822:	ebba 0b04 	subs.w	fp, sl, r4
 8014826:	d00b      	beq.n	8014840 <_vfiprintf_r+0xa4>
 8014828:	465b      	mov	r3, fp
 801482a:	4622      	mov	r2, r4
 801482c:	4629      	mov	r1, r5
 801482e:	4630      	mov	r0, r6
 8014830:	f7ff ffa1 	bl	8014776 <__sfputs_r>
 8014834:	3001      	adds	r0, #1
 8014836:	f000 80a7 	beq.w	8014988 <_vfiprintf_r+0x1ec>
 801483a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801483c:	445a      	add	r2, fp
 801483e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014840:	f89a 3000 	ldrb.w	r3, [sl]
 8014844:	2b00      	cmp	r3, #0
 8014846:	f000 809f 	beq.w	8014988 <_vfiprintf_r+0x1ec>
 801484a:	2300      	movs	r3, #0
 801484c:	f04f 32ff 	mov.w	r2, #4294967295
 8014850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014854:	f10a 0a01 	add.w	sl, sl, #1
 8014858:	9304      	str	r3, [sp, #16]
 801485a:	9307      	str	r3, [sp, #28]
 801485c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014860:	931a      	str	r3, [sp, #104]	@ 0x68
 8014862:	4654      	mov	r4, sl
 8014864:	2205      	movs	r2, #5
 8014866:	f814 1b01 	ldrb.w	r1, [r4], #1
 801486a:	4853      	ldr	r0, [pc, #332]	@ (80149b8 <_vfiprintf_r+0x21c>)
 801486c:	f7eb fce0 	bl	8000230 <memchr>
 8014870:	9a04      	ldr	r2, [sp, #16]
 8014872:	b9d8      	cbnz	r0, 80148ac <_vfiprintf_r+0x110>
 8014874:	06d1      	lsls	r1, r2, #27
 8014876:	bf44      	itt	mi
 8014878:	2320      	movmi	r3, #32
 801487a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801487e:	0713      	lsls	r3, r2, #28
 8014880:	bf44      	itt	mi
 8014882:	232b      	movmi	r3, #43	@ 0x2b
 8014884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014888:	f89a 3000 	ldrb.w	r3, [sl]
 801488c:	2b2a      	cmp	r3, #42	@ 0x2a
 801488e:	d015      	beq.n	80148bc <_vfiprintf_r+0x120>
 8014890:	9a07      	ldr	r2, [sp, #28]
 8014892:	4654      	mov	r4, sl
 8014894:	2000      	movs	r0, #0
 8014896:	f04f 0c0a 	mov.w	ip, #10
 801489a:	4621      	mov	r1, r4
 801489c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148a0:	3b30      	subs	r3, #48	@ 0x30
 80148a2:	2b09      	cmp	r3, #9
 80148a4:	d94b      	bls.n	801493e <_vfiprintf_r+0x1a2>
 80148a6:	b1b0      	cbz	r0, 80148d6 <_vfiprintf_r+0x13a>
 80148a8:	9207      	str	r2, [sp, #28]
 80148aa:	e014      	b.n	80148d6 <_vfiprintf_r+0x13a>
 80148ac:	eba0 0308 	sub.w	r3, r0, r8
 80148b0:	fa09 f303 	lsl.w	r3, r9, r3
 80148b4:	4313      	orrs	r3, r2
 80148b6:	9304      	str	r3, [sp, #16]
 80148b8:	46a2      	mov	sl, r4
 80148ba:	e7d2      	b.n	8014862 <_vfiprintf_r+0xc6>
 80148bc:	9b03      	ldr	r3, [sp, #12]
 80148be:	1d19      	adds	r1, r3, #4
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	9103      	str	r1, [sp, #12]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	bfbb      	ittet	lt
 80148c8:	425b      	neglt	r3, r3
 80148ca:	f042 0202 	orrlt.w	r2, r2, #2
 80148ce:	9307      	strge	r3, [sp, #28]
 80148d0:	9307      	strlt	r3, [sp, #28]
 80148d2:	bfb8      	it	lt
 80148d4:	9204      	strlt	r2, [sp, #16]
 80148d6:	7823      	ldrb	r3, [r4, #0]
 80148d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80148da:	d10a      	bne.n	80148f2 <_vfiprintf_r+0x156>
 80148dc:	7863      	ldrb	r3, [r4, #1]
 80148de:	2b2a      	cmp	r3, #42	@ 0x2a
 80148e0:	d132      	bne.n	8014948 <_vfiprintf_r+0x1ac>
 80148e2:	9b03      	ldr	r3, [sp, #12]
 80148e4:	1d1a      	adds	r2, r3, #4
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	9203      	str	r2, [sp, #12]
 80148ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80148ee:	3402      	adds	r4, #2
 80148f0:	9305      	str	r3, [sp, #20]
 80148f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80149c8 <_vfiprintf_r+0x22c>
 80148f6:	7821      	ldrb	r1, [r4, #0]
 80148f8:	2203      	movs	r2, #3
 80148fa:	4650      	mov	r0, sl
 80148fc:	f7eb fc98 	bl	8000230 <memchr>
 8014900:	b138      	cbz	r0, 8014912 <_vfiprintf_r+0x176>
 8014902:	9b04      	ldr	r3, [sp, #16]
 8014904:	eba0 000a 	sub.w	r0, r0, sl
 8014908:	2240      	movs	r2, #64	@ 0x40
 801490a:	4082      	lsls	r2, r0
 801490c:	4313      	orrs	r3, r2
 801490e:	3401      	adds	r4, #1
 8014910:	9304      	str	r3, [sp, #16]
 8014912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014916:	4829      	ldr	r0, [pc, #164]	@ (80149bc <_vfiprintf_r+0x220>)
 8014918:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801491c:	2206      	movs	r2, #6
 801491e:	f7eb fc87 	bl	8000230 <memchr>
 8014922:	2800      	cmp	r0, #0
 8014924:	d03f      	beq.n	80149a6 <_vfiprintf_r+0x20a>
 8014926:	4b26      	ldr	r3, [pc, #152]	@ (80149c0 <_vfiprintf_r+0x224>)
 8014928:	bb1b      	cbnz	r3, 8014972 <_vfiprintf_r+0x1d6>
 801492a:	9b03      	ldr	r3, [sp, #12]
 801492c:	3307      	adds	r3, #7
 801492e:	f023 0307 	bic.w	r3, r3, #7
 8014932:	3308      	adds	r3, #8
 8014934:	9303      	str	r3, [sp, #12]
 8014936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014938:	443b      	add	r3, r7
 801493a:	9309      	str	r3, [sp, #36]	@ 0x24
 801493c:	e76a      	b.n	8014814 <_vfiprintf_r+0x78>
 801493e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014942:	460c      	mov	r4, r1
 8014944:	2001      	movs	r0, #1
 8014946:	e7a8      	b.n	801489a <_vfiprintf_r+0xfe>
 8014948:	2300      	movs	r3, #0
 801494a:	3401      	adds	r4, #1
 801494c:	9305      	str	r3, [sp, #20]
 801494e:	4619      	mov	r1, r3
 8014950:	f04f 0c0a 	mov.w	ip, #10
 8014954:	4620      	mov	r0, r4
 8014956:	f810 2b01 	ldrb.w	r2, [r0], #1
 801495a:	3a30      	subs	r2, #48	@ 0x30
 801495c:	2a09      	cmp	r2, #9
 801495e:	d903      	bls.n	8014968 <_vfiprintf_r+0x1cc>
 8014960:	2b00      	cmp	r3, #0
 8014962:	d0c6      	beq.n	80148f2 <_vfiprintf_r+0x156>
 8014964:	9105      	str	r1, [sp, #20]
 8014966:	e7c4      	b.n	80148f2 <_vfiprintf_r+0x156>
 8014968:	fb0c 2101 	mla	r1, ip, r1, r2
 801496c:	4604      	mov	r4, r0
 801496e:	2301      	movs	r3, #1
 8014970:	e7f0      	b.n	8014954 <_vfiprintf_r+0x1b8>
 8014972:	ab03      	add	r3, sp, #12
 8014974:	9300      	str	r3, [sp, #0]
 8014976:	462a      	mov	r2, r5
 8014978:	4b12      	ldr	r3, [pc, #72]	@ (80149c4 <_vfiprintf_r+0x228>)
 801497a:	a904      	add	r1, sp, #16
 801497c:	4630      	mov	r0, r6
 801497e:	f7fd fe19 	bl	80125b4 <_printf_float>
 8014982:	4607      	mov	r7, r0
 8014984:	1c78      	adds	r0, r7, #1
 8014986:	d1d6      	bne.n	8014936 <_vfiprintf_r+0x19a>
 8014988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801498a:	07d9      	lsls	r1, r3, #31
 801498c:	d405      	bmi.n	801499a <_vfiprintf_r+0x1fe>
 801498e:	89ab      	ldrh	r3, [r5, #12]
 8014990:	059a      	lsls	r2, r3, #22
 8014992:	d402      	bmi.n	801499a <_vfiprintf_r+0x1fe>
 8014994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014996:	f7fe fb9d 	bl	80130d4 <__retarget_lock_release_recursive>
 801499a:	89ab      	ldrh	r3, [r5, #12]
 801499c:	065b      	lsls	r3, r3, #25
 801499e:	f53f af1f 	bmi.w	80147e0 <_vfiprintf_r+0x44>
 80149a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80149a4:	e71e      	b.n	80147e4 <_vfiprintf_r+0x48>
 80149a6:	ab03      	add	r3, sp, #12
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	462a      	mov	r2, r5
 80149ac:	4b05      	ldr	r3, [pc, #20]	@ (80149c4 <_vfiprintf_r+0x228>)
 80149ae:	a904      	add	r1, sp, #16
 80149b0:	4630      	mov	r0, r6
 80149b2:	f7fe f897 	bl	8012ae4 <_printf_i>
 80149b6:	e7e4      	b.n	8014982 <_vfiprintf_r+0x1e6>
 80149b8:	080164f7 	.word	0x080164f7
 80149bc:	08016501 	.word	0x08016501
 80149c0:	080125b5 	.word	0x080125b5
 80149c4:	08014777 	.word	0x08014777
 80149c8:	080164fd 	.word	0x080164fd

080149cc <__swbuf_r>:
 80149cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ce:	460e      	mov	r6, r1
 80149d0:	4614      	mov	r4, r2
 80149d2:	4605      	mov	r5, r0
 80149d4:	b118      	cbz	r0, 80149de <__swbuf_r+0x12>
 80149d6:	6a03      	ldr	r3, [r0, #32]
 80149d8:	b90b      	cbnz	r3, 80149de <__swbuf_r+0x12>
 80149da:	f7fe fa2f 	bl	8012e3c <__sinit>
 80149de:	69a3      	ldr	r3, [r4, #24]
 80149e0:	60a3      	str	r3, [r4, #8]
 80149e2:	89a3      	ldrh	r3, [r4, #12]
 80149e4:	071a      	lsls	r2, r3, #28
 80149e6:	d501      	bpl.n	80149ec <__swbuf_r+0x20>
 80149e8:	6923      	ldr	r3, [r4, #16]
 80149ea:	b943      	cbnz	r3, 80149fe <__swbuf_r+0x32>
 80149ec:	4621      	mov	r1, r4
 80149ee:	4628      	mov	r0, r5
 80149f0:	f000 f82a 	bl	8014a48 <__swsetup_r>
 80149f4:	b118      	cbz	r0, 80149fe <__swbuf_r+0x32>
 80149f6:	f04f 37ff 	mov.w	r7, #4294967295
 80149fa:	4638      	mov	r0, r7
 80149fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149fe:	6823      	ldr	r3, [r4, #0]
 8014a00:	6922      	ldr	r2, [r4, #16]
 8014a02:	1a98      	subs	r0, r3, r2
 8014a04:	6963      	ldr	r3, [r4, #20]
 8014a06:	b2f6      	uxtb	r6, r6
 8014a08:	4283      	cmp	r3, r0
 8014a0a:	4637      	mov	r7, r6
 8014a0c:	dc05      	bgt.n	8014a1a <__swbuf_r+0x4e>
 8014a0e:	4621      	mov	r1, r4
 8014a10:	4628      	mov	r0, r5
 8014a12:	f7ff fe0d 	bl	8014630 <_fflush_r>
 8014a16:	2800      	cmp	r0, #0
 8014a18:	d1ed      	bne.n	80149f6 <__swbuf_r+0x2a>
 8014a1a:	68a3      	ldr	r3, [r4, #8]
 8014a1c:	3b01      	subs	r3, #1
 8014a1e:	60a3      	str	r3, [r4, #8]
 8014a20:	6823      	ldr	r3, [r4, #0]
 8014a22:	1c5a      	adds	r2, r3, #1
 8014a24:	6022      	str	r2, [r4, #0]
 8014a26:	701e      	strb	r6, [r3, #0]
 8014a28:	6962      	ldr	r2, [r4, #20]
 8014a2a:	1c43      	adds	r3, r0, #1
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d004      	beq.n	8014a3a <__swbuf_r+0x6e>
 8014a30:	89a3      	ldrh	r3, [r4, #12]
 8014a32:	07db      	lsls	r3, r3, #31
 8014a34:	d5e1      	bpl.n	80149fa <__swbuf_r+0x2e>
 8014a36:	2e0a      	cmp	r6, #10
 8014a38:	d1df      	bne.n	80149fa <__swbuf_r+0x2e>
 8014a3a:	4621      	mov	r1, r4
 8014a3c:	4628      	mov	r0, r5
 8014a3e:	f7ff fdf7 	bl	8014630 <_fflush_r>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	d0d9      	beq.n	80149fa <__swbuf_r+0x2e>
 8014a46:	e7d6      	b.n	80149f6 <__swbuf_r+0x2a>

08014a48 <__swsetup_r>:
 8014a48:	b538      	push	{r3, r4, r5, lr}
 8014a4a:	4b29      	ldr	r3, [pc, #164]	@ (8014af0 <__swsetup_r+0xa8>)
 8014a4c:	4605      	mov	r5, r0
 8014a4e:	6818      	ldr	r0, [r3, #0]
 8014a50:	460c      	mov	r4, r1
 8014a52:	b118      	cbz	r0, 8014a5c <__swsetup_r+0x14>
 8014a54:	6a03      	ldr	r3, [r0, #32]
 8014a56:	b90b      	cbnz	r3, 8014a5c <__swsetup_r+0x14>
 8014a58:	f7fe f9f0 	bl	8012e3c <__sinit>
 8014a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a60:	0719      	lsls	r1, r3, #28
 8014a62:	d422      	bmi.n	8014aaa <__swsetup_r+0x62>
 8014a64:	06da      	lsls	r2, r3, #27
 8014a66:	d407      	bmi.n	8014a78 <__swsetup_r+0x30>
 8014a68:	2209      	movs	r2, #9
 8014a6a:	602a      	str	r2, [r5, #0]
 8014a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a70:	81a3      	strh	r3, [r4, #12]
 8014a72:	f04f 30ff 	mov.w	r0, #4294967295
 8014a76:	e033      	b.n	8014ae0 <__swsetup_r+0x98>
 8014a78:	0758      	lsls	r0, r3, #29
 8014a7a:	d512      	bpl.n	8014aa2 <__swsetup_r+0x5a>
 8014a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a7e:	b141      	cbz	r1, 8014a92 <__swsetup_r+0x4a>
 8014a80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a84:	4299      	cmp	r1, r3
 8014a86:	d002      	beq.n	8014a8e <__swsetup_r+0x46>
 8014a88:	4628      	mov	r0, r5
 8014a8a:	f7ff f981 	bl	8013d90 <_free_r>
 8014a8e:	2300      	movs	r3, #0
 8014a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a92:	89a3      	ldrh	r3, [r4, #12]
 8014a94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014a98:	81a3      	strh	r3, [r4, #12]
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	6063      	str	r3, [r4, #4]
 8014a9e:	6923      	ldr	r3, [r4, #16]
 8014aa0:	6023      	str	r3, [r4, #0]
 8014aa2:	89a3      	ldrh	r3, [r4, #12]
 8014aa4:	f043 0308 	orr.w	r3, r3, #8
 8014aa8:	81a3      	strh	r3, [r4, #12]
 8014aaa:	6923      	ldr	r3, [r4, #16]
 8014aac:	b94b      	cbnz	r3, 8014ac2 <__swsetup_r+0x7a>
 8014aae:	89a3      	ldrh	r3, [r4, #12]
 8014ab0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ab8:	d003      	beq.n	8014ac2 <__swsetup_r+0x7a>
 8014aba:	4621      	mov	r1, r4
 8014abc:	4628      	mov	r0, r5
 8014abe:	f000 f83f 	bl	8014b40 <__smakebuf_r>
 8014ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ac6:	f013 0201 	ands.w	r2, r3, #1
 8014aca:	d00a      	beq.n	8014ae2 <__swsetup_r+0x9a>
 8014acc:	2200      	movs	r2, #0
 8014ace:	60a2      	str	r2, [r4, #8]
 8014ad0:	6962      	ldr	r2, [r4, #20]
 8014ad2:	4252      	negs	r2, r2
 8014ad4:	61a2      	str	r2, [r4, #24]
 8014ad6:	6922      	ldr	r2, [r4, #16]
 8014ad8:	b942      	cbnz	r2, 8014aec <__swsetup_r+0xa4>
 8014ada:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014ade:	d1c5      	bne.n	8014a6c <__swsetup_r+0x24>
 8014ae0:	bd38      	pop	{r3, r4, r5, pc}
 8014ae2:	0799      	lsls	r1, r3, #30
 8014ae4:	bf58      	it	pl
 8014ae6:	6962      	ldrpl	r2, [r4, #20]
 8014ae8:	60a2      	str	r2, [r4, #8]
 8014aea:	e7f4      	b.n	8014ad6 <__swsetup_r+0x8e>
 8014aec:	2000      	movs	r0, #0
 8014aee:	e7f7      	b.n	8014ae0 <__swsetup_r+0x98>
 8014af0:	20000034 	.word	0x20000034

08014af4 <__swhatbuf_r>:
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	460c      	mov	r4, r1
 8014af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014afc:	2900      	cmp	r1, #0
 8014afe:	b096      	sub	sp, #88	@ 0x58
 8014b00:	4615      	mov	r5, r2
 8014b02:	461e      	mov	r6, r3
 8014b04:	da0d      	bge.n	8014b22 <__swhatbuf_r+0x2e>
 8014b06:	89a3      	ldrh	r3, [r4, #12]
 8014b08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014b0c:	f04f 0100 	mov.w	r1, #0
 8014b10:	bf14      	ite	ne
 8014b12:	2340      	movne	r3, #64	@ 0x40
 8014b14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014b18:	2000      	movs	r0, #0
 8014b1a:	6031      	str	r1, [r6, #0]
 8014b1c:	602b      	str	r3, [r5, #0]
 8014b1e:	b016      	add	sp, #88	@ 0x58
 8014b20:	bd70      	pop	{r4, r5, r6, pc}
 8014b22:	466a      	mov	r2, sp
 8014b24:	f000 f848 	bl	8014bb8 <_fstat_r>
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	dbec      	blt.n	8014b06 <__swhatbuf_r+0x12>
 8014b2c:	9901      	ldr	r1, [sp, #4]
 8014b2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014b32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014b36:	4259      	negs	r1, r3
 8014b38:	4159      	adcs	r1, r3
 8014b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014b3e:	e7eb      	b.n	8014b18 <__swhatbuf_r+0x24>

08014b40 <__smakebuf_r>:
 8014b40:	898b      	ldrh	r3, [r1, #12]
 8014b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014b44:	079d      	lsls	r5, r3, #30
 8014b46:	4606      	mov	r6, r0
 8014b48:	460c      	mov	r4, r1
 8014b4a:	d507      	bpl.n	8014b5c <__smakebuf_r+0x1c>
 8014b4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014b50:	6023      	str	r3, [r4, #0]
 8014b52:	6123      	str	r3, [r4, #16]
 8014b54:	2301      	movs	r3, #1
 8014b56:	6163      	str	r3, [r4, #20]
 8014b58:	b003      	add	sp, #12
 8014b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b5c:	ab01      	add	r3, sp, #4
 8014b5e:	466a      	mov	r2, sp
 8014b60:	f7ff ffc8 	bl	8014af4 <__swhatbuf_r>
 8014b64:	9f00      	ldr	r7, [sp, #0]
 8014b66:	4605      	mov	r5, r0
 8014b68:	4639      	mov	r1, r7
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	f7fd fbe8 	bl	8012340 <_malloc_r>
 8014b70:	b948      	cbnz	r0, 8014b86 <__smakebuf_r+0x46>
 8014b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b76:	059a      	lsls	r2, r3, #22
 8014b78:	d4ee      	bmi.n	8014b58 <__smakebuf_r+0x18>
 8014b7a:	f023 0303 	bic.w	r3, r3, #3
 8014b7e:	f043 0302 	orr.w	r3, r3, #2
 8014b82:	81a3      	strh	r3, [r4, #12]
 8014b84:	e7e2      	b.n	8014b4c <__smakebuf_r+0xc>
 8014b86:	89a3      	ldrh	r3, [r4, #12]
 8014b88:	6020      	str	r0, [r4, #0]
 8014b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b8e:	81a3      	strh	r3, [r4, #12]
 8014b90:	9b01      	ldr	r3, [sp, #4]
 8014b92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014b96:	b15b      	cbz	r3, 8014bb0 <__smakebuf_r+0x70>
 8014b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	f000 f81d 	bl	8014bdc <_isatty_r>
 8014ba2:	b128      	cbz	r0, 8014bb0 <__smakebuf_r+0x70>
 8014ba4:	89a3      	ldrh	r3, [r4, #12]
 8014ba6:	f023 0303 	bic.w	r3, r3, #3
 8014baa:	f043 0301 	orr.w	r3, r3, #1
 8014bae:	81a3      	strh	r3, [r4, #12]
 8014bb0:	89a3      	ldrh	r3, [r4, #12]
 8014bb2:	431d      	orrs	r5, r3
 8014bb4:	81a5      	strh	r5, [r4, #12]
 8014bb6:	e7cf      	b.n	8014b58 <__smakebuf_r+0x18>

08014bb8 <_fstat_r>:
 8014bb8:	b538      	push	{r3, r4, r5, lr}
 8014bba:	4d07      	ldr	r5, [pc, #28]	@ (8014bd8 <_fstat_r+0x20>)
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	4608      	mov	r0, r1
 8014bc2:	4611      	mov	r1, r2
 8014bc4:	602b      	str	r3, [r5, #0]
 8014bc6:	f7f8 fcd9 	bl	800d57c <_fstat>
 8014bca:	1c43      	adds	r3, r0, #1
 8014bcc:	d102      	bne.n	8014bd4 <_fstat_r+0x1c>
 8014bce:	682b      	ldr	r3, [r5, #0]
 8014bd0:	b103      	cbz	r3, 8014bd4 <_fstat_r+0x1c>
 8014bd2:	6023      	str	r3, [r4, #0]
 8014bd4:	bd38      	pop	{r3, r4, r5, pc}
 8014bd6:	bf00      	nop
 8014bd8:	200006b0 	.word	0x200006b0

08014bdc <_isatty_r>:
 8014bdc:	b538      	push	{r3, r4, r5, lr}
 8014bde:	4d06      	ldr	r5, [pc, #24]	@ (8014bf8 <_isatty_r+0x1c>)
 8014be0:	2300      	movs	r3, #0
 8014be2:	4604      	mov	r4, r0
 8014be4:	4608      	mov	r0, r1
 8014be6:	602b      	str	r3, [r5, #0]
 8014be8:	f7f8 fcd8 	bl	800d59c <_isatty>
 8014bec:	1c43      	adds	r3, r0, #1
 8014bee:	d102      	bne.n	8014bf6 <_isatty_r+0x1a>
 8014bf0:	682b      	ldr	r3, [r5, #0]
 8014bf2:	b103      	cbz	r3, 8014bf6 <_isatty_r+0x1a>
 8014bf4:	6023      	str	r3, [r4, #0]
 8014bf6:	bd38      	pop	{r3, r4, r5, pc}
 8014bf8:	200006b0 	.word	0x200006b0

08014bfc <_Unwind_GetDataRelBase>:
 8014bfc:	b508      	push	{r3, lr}
 8014bfe:	f7fd fb65 	bl	80122cc <abort>

08014c02 <_Unwind_GetTextRelBase>:
 8014c02:	b508      	push	{r3, lr}
 8014c04:	f7ff fffa 	bl	8014bfc <_Unwind_GetDataRelBase>

08014c08 <_init>:
 8014c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c0a:	bf00      	nop
 8014c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c0e:	bc08      	pop	{r3}
 8014c10:	469e      	mov	lr, r3
 8014c12:	4770      	bx	lr

08014c14 <_fini>:
 8014c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c16:	bf00      	nop
 8014c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c1a:	bc08      	pop	{r3}
 8014c1c:	469e      	mov	lr, r3
 8014c1e:	4770      	bx	lr
