
stm32_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001988  08016c58  08016c58  00017c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001290  080185e0  080185e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000da8  08019870  08019870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a618  0801a618  0001c1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a618  0801a618  0001b618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a620  0801a620  0001b620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801a624  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200001f8  0801a81c  0001c1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0801a81c  0001c6c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d35b  00000000  00000000  0001c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e05  00000000  00000000  00049583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  0004d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000198f  00000000  00000000  0004f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e82  00000000  00000000  00050dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f92d  00000000  00000000  00079c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e50ec  00000000  00000000  000995ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e69a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b3cc  00000000  00000000  0017e6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00189aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016c40 	.word	0x08016c40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08016c40 	.word	0x08016c40

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f001 b8f6 	b.w	8001eec <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <selfrel_offset31>:
 8000fd4:	6803      	ldr	r3, [r0, #0]
 8000fd6:	005a      	lsls	r2, r3, #1
 8000fd8:	bf4c      	ite	mi
 8000fda:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000fde:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fe2:	4418      	add	r0, r3
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <search_EIT_table>:
 8000fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fec:	b349      	cbz	r1, 8001042 <search_EIT_table+0x5a>
 8000fee:	1e4f      	subs	r7, r1, #1
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	4615      	mov	r5, r2
 8000ff4:	463e      	mov	r6, r7
 8000ff6:	f04f 0900 	mov.w	r9, #0
 8000ffa:	eb09 0106 	add.w	r1, r9, r6
 8000ffe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8001002:	1049      	asrs	r1, r1, #1
 8001004:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8001008:	4640      	mov	r0, r8
 800100a:	f7ff ffe3 	bl	8000fd4 <selfrel_offset31>
 800100e:	428f      	cmp	r7, r1
 8001010:	4603      	mov	r3, r0
 8001012:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8001016:	d00f      	beq.n	8001038 <search_EIT_table+0x50>
 8001018:	3008      	adds	r0, #8
 800101a:	42ab      	cmp	r3, r5
 800101c:	4420      	add	r0, r4
 800101e:	d807      	bhi.n	8001030 <search_EIT_table+0x48>
 8001020:	f7ff ffd8 	bl	8000fd4 <selfrel_offset31>
 8001024:	3801      	subs	r0, #1
 8001026:	42a8      	cmp	r0, r5
 8001028:	d208      	bcs.n	800103c <search_EIT_table+0x54>
 800102a:	f101 0901 	add.w	r9, r1, #1
 800102e:	e7e4      	b.n	8000ffa <search_EIT_table+0x12>
 8001030:	4589      	cmp	r9, r1
 8001032:	d006      	beq.n	8001042 <search_EIT_table+0x5a>
 8001034:	1e4e      	subs	r6, r1, #1
 8001036:	e7e0      	b.n	8000ffa <search_EIT_table+0x12>
 8001038:	42ab      	cmp	r3, r5
 800103a:	d8f9      	bhi.n	8001030 <search_EIT_table+0x48>
 800103c:	4640      	mov	r0, r8
 800103e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001042:	f04f 0800 	mov.w	r8, #0
 8001046:	4640      	mov	r0, r8
 8001048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800104c <__gnu_unwind_get_pr_addr>:
 800104c:	2801      	cmp	r0, #1
 800104e:	d007      	beq.n	8001060 <__gnu_unwind_get_pr_addr+0x14>
 8001050:	2802      	cmp	r0, #2
 8001052:	d007      	beq.n	8001064 <__gnu_unwind_get_pr_addr+0x18>
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <__gnu_unwind_get_pr_addr+0x1c>)
 8001056:	2800      	cmp	r0, #0
 8001058:	bf0c      	ite	eq
 800105a:	4618      	moveq	r0, r3
 800105c:	2000      	movne	r0, #0
 800105e:	4770      	bx	lr
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <__gnu_unwind_get_pr_addr+0x20>)
 8001062:	4770      	bx	lr
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <__gnu_unwind_get_pr_addr+0x24>)
 8001066:	4770      	bx	lr
 8001068:	08001715 	.word	0x08001715
 800106c:	08001719 	.word	0x08001719
 8001070:	0800171d 	.word	0x0800171d

08001074 <get_eit_entry>:
 8001074:	b530      	push	{r4, r5, lr}
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <get_eit_entry+0x88>)
 8001078:	b083      	sub	sp, #12
 800107a:	4604      	mov	r4, r0
 800107c:	1e8d      	subs	r5, r1, #2
 800107e:	b31b      	cbz	r3, 80010c8 <get_eit_entry+0x54>
 8001080:	a901      	add	r1, sp, #4
 8001082:	4628      	mov	r0, r5
 8001084:	f3af 8000 	nop.w
 8001088:	b388      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 800108a:	9901      	ldr	r1, [sp, #4]
 800108c:	462a      	mov	r2, r5
 800108e:	f7ff ffab 	bl	8000fe8 <search_EIT_table>
 8001092:	4601      	mov	r1, r0
 8001094:	b358      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 8001096:	f7ff ff9d 	bl	8000fd4 <selfrel_offset31>
 800109a:	684b      	ldr	r3, [r1, #4]
 800109c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d028      	beq.n	80010f4 <get_eit_entry+0x80>
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f101 0004 	add.w	r0, r1, #4
 80010a8:	db1f      	blt.n	80010ea <get_eit_entry+0x76>
 80010aa:	f7ff ff93 	bl	8000fd4 <selfrel_offset31>
 80010ae:	2300      	movs	r3, #0
 80010b0:	6523      	str	r3, [r4, #80]	@ 0x50
 80010b2:	6803      	ldr	r3, [r0, #0]
 80010b4:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0d      	blt.n	80010d6 <get_eit_entry+0x62>
 80010ba:	f7ff ff8b 	bl	8000fd4 <selfrel_offset31>
 80010be:	4603      	mov	r3, r0
 80010c0:	2000      	movs	r0, #0
 80010c2:	6123      	str	r3, [r4, #16]
 80010c4:	b003      	add	sp, #12
 80010c6:	bd30      	pop	{r4, r5, pc}
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <get_eit_entry+0x8c>)
 80010ca:	490e      	ldr	r1, [pc, #56]	@ (8001104 <get_eit_entry+0x90>)
 80010cc:	1ac9      	subs	r1, r1, r3
 80010ce:	10c9      	asrs	r1, r1, #3
 80010d0:	4618      	mov	r0, r3
 80010d2:	9101      	str	r1, [sp, #4]
 80010d4:	e7da      	b.n	800108c <get_eit_entry+0x18>
 80010d6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80010da:	f7ff ffb7 	bl	800104c <__gnu_unwind_get_pr_addr>
 80010de:	4603      	mov	r3, r0
 80010e0:	b128      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 80010e2:	2000      	movs	r0, #0
 80010e4:	6123      	str	r3, [r4, #16]
 80010e6:	b003      	add	sp, #12
 80010e8:	bd30      	pop	{r4, r5, pc}
 80010ea:	2301      	movs	r3, #1
 80010ec:	e7e0      	b.n	80010b0 <get_eit_entry+0x3c>
 80010ee:	2300      	movs	r3, #0
 80010f0:	2009      	movs	r0, #9
 80010f2:	e7e6      	b.n	80010c2 <get_eit_entry+0x4e>
 80010f4:	2300      	movs	r3, #0
 80010f6:	2005      	movs	r0, #5
 80010f8:	e7e3      	b.n	80010c2 <get_eit_entry+0x4e>
 80010fa:	bf00      	nop
 80010fc:	00000000 	.word	0x00000000
 8001100:	08019870 	.word	0x08019870
 8001104:	0801a618 	.word	0x0801a618

08001108 <restore_non_core_regs>:
 8001108:	6803      	ldr	r3, [r0, #0]
 800110a:	07da      	lsls	r2, r3, #31
 800110c:	b510      	push	{r4, lr}
 800110e:	4604      	mov	r4, r0
 8001110:	d406      	bmi.n	8001120 <restore_non_core_regs+0x18>
 8001112:	079b      	lsls	r3, r3, #30
 8001114:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8001118:	d509      	bpl.n	800112e <restore_non_core_regs+0x26>
 800111a:	f000 fc69 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	0759      	lsls	r1, r3, #29
 8001122:	d509      	bpl.n	8001138 <restore_non_core_regs+0x30>
 8001124:	071a      	lsls	r2, r3, #28
 8001126:	d50e      	bpl.n	8001146 <restore_non_core_regs+0x3e>
 8001128:	06db      	lsls	r3, r3, #27
 800112a:	d513      	bpl.n	8001154 <restore_non_core_regs+0x4c>
 800112c:	bd10      	pop	{r4, pc}
 800112e:	f000 fc57 	bl	80019e0 <__gnu_Unwind_Restore_VFP>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	0759      	lsls	r1, r3, #29
 8001136:	d4f5      	bmi.n	8001124 <restore_non_core_regs+0x1c>
 8001138:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800113c:	f000 fc60 	bl	8001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	071a      	lsls	r2, r3, #28
 8001144:	d4f0      	bmi.n	8001128 <restore_non_core_regs+0x20>
 8001146:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800114a:	f000 fc61 	bl	8001a10 <__gnu_Unwind_Restore_WMMXD>
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	06db      	lsls	r3, r3, #27
 8001152:	d4eb      	bmi.n	800112c <restore_non_core_regs+0x24>
 8001154:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800115c:	f000 bc9c 	b.w	8001a98 <__gnu_Unwind_Restore_WMMXC>

08001160 <__gnu_unwind_24bit.constprop.0>:
 8001160:	2009      	movs	r0, #9
 8001162:	4770      	bx	lr

08001164 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001164:	4603      	mov	r3, r0
 8001166:	6800      	ldr	r0, [r0, #0]
 8001168:	b100      	cbz	r0, 800116c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800116a:	4418      	add	r0, r3
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <_Unwind_DebugHook>:
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <unwind_phase2>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	4604      	mov	r4, r0
 8001178:	460e      	mov	r6, r1
 800117a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff ff79 	bl	8001074 <get_eit_entry>
 8001182:	4605      	mov	r5, r0
 8001184:	b988      	cbnz	r0, 80011aa <unwind_phase2+0x36>
 8001186:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001188:	6162      	str	r2, [r4, #20]
 800118a:	6923      	ldr	r3, [r4, #16]
 800118c:	4632      	mov	r2, r6
 800118e:	4621      	mov	r1, r4
 8001190:	2001      	movs	r0, #1
 8001192:	4798      	blx	r3
 8001194:	2808      	cmp	r0, #8
 8001196:	d0f0      	beq.n	800117a <unwind_phase2+0x6>
 8001198:	2807      	cmp	r0, #7
 800119a:	d106      	bne.n	80011aa <unwind_phase2+0x36>
 800119c:	4628      	mov	r0, r5
 800119e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011a0:	f7ff ffe6 	bl	8001170 <_Unwind_DebugHook>
 80011a4:	1d30      	adds	r0, r6, #4
 80011a6:	f000 fc0f 	bl	80019c8 <__restore_core_regs>
 80011aa:	f013 f8ad 	bl	8014308 <abort>
 80011ae:	bf00      	nop

080011b0 <unwind_phase2_forced>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	1d0d      	adds	r5, r1, #4
 80011b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80011ba:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80011be:	4607      	mov	r7, r0
 80011c0:	4614      	mov	r4, r2
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80011c8:	f10d 0c0c 	add.w	ip, sp, #12
 80011cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011e0:	ae02      	add	r6, sp, #8
 80011e2:	f04f 0e00 	mov.w	lr, #0
 80011e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011ea:	f8c6 e000 	str.w	lr, [r6]
 80011ee:	e020      	b.n	8001232 <unwind_phase2_forced+0x82>
 80011f0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011f8:	4631      	mov	r1, r6
 80011fa:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011fc:	f013 ff89 	bl	8015112 <memcpy>
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	aa7a      	add	r2, sp, #488	@ 0x1e8
 8001204:	4639      	mov	r1, r7
 8001206:	4650      	mov	r0, sl
 8001208:	4798      	blx	r3
 800120a:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 800120c:	6473      	str	r3, [r6, #68]	@ 0x44
 800120e:	4621      	mov	r1, r4
 8001210:	e9cd 6900 	strd	r6, r9, [sp]
 8001214:	4605      	mov	r5, r0
 8001216:	463b      	mov	r3, r7
 8001218:	463a      	mov	r2, r7
 800121a:	2001      	movs	r0, #1
 800121c:	47c0      	blx	r8
 800121e:	4604      	mov	r4, r0
 8001220:	bb18      	cbnz	r0, 800126a <unwind_phase2_forced+0xba>
 8001222:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001226:	a97a      	add	r1, sp, #488	@ 0x1e8
 8001228:	4630      	mov	r0, r6
 800122a:	f013 ff72 	bl	8015112 <memcpy>
 800122e:	2d08      	cmp	r5, #8
 8001230:	d119      	bne.n	8001266 <unwind_phase2_forced+0xb6>
 8001232:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001234:	4638      	mov	r0, r7
 8001236:	f7ff ff1d 	bl	8001074 <get_eit_entry>
 800123a:	3409      	adds	r4, #9
 800123c:	fa5f fa84 	uxtb.w	sl, r4
 8001240:	4605      	mov	r5, r0
 8001242:	2800      	cmp	r0, #0
 8001244:	d0d4      	beq.n	80011f0 <unwind_phase2_forced+0x40>
 8001246:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001248:	6473      	str	r3, [r6, #68]	@ 0x44
 800124a:	463a      	mov	r2, r7
 800124c:	e9cd 6900 	strd	r6, r9, [sp]
 8001250:	463b      	mov	r3, r7
 8001252:	f04a 0110 	orr.w	r1, sl, #16
 8001256:	2001      	movs	r0, #1
 8001258:	47c0      	blx	r8
 800125a:	b930      	cbnz	r0, 800126a <unwind_phase2_forced+0xba>
 800125c:	4628      	mov	r0, r5
 800125e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001266:	2d07      	cmp	r5, #7
 8001268:	d005      	beq.n	8001276 <unwind_phase2_forced+0xc6>
 800126a:	2509      	movs	r5, #9
 800126c:	4628      	mov	r0, r5
 800126e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	4620      	mov	r0, r4
 8001278:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800127a:	f7ff ff79 	bl	8001170 <_Unwind_DebugHook>
 800127e:	a803      	add	r0, sp, #12
 8001280:	f000 fba2 	bl	80019c8 <__restore_core_regs>

08001284 <_Unwind_GetCFA>:
 8001284:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001286:	4770      	bx	lr

08001288 <__gnu_Unwind_RaiseException>:
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800128c:	640b      	str	r3, [r1, #64]	@ 0x40
 800128e:	f101 0c04 	add.w	ip, r1, #4
 8001292:	460e      	mov	r6, r1
 8001294:	4605      	mov	r5, r0
 8001296:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800129a:	b0f9      	sub	sp, #484	@ 0x1e4
 800129c:	ac01      	add	r4, sp, #4
 800129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80012b0:	f04f 37ff 	mov.w	r7, #4294967295
 80012b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012b8:	9700      	str	r7, [sp, #0]
 80012ba:	e006      	b.n	80012ca <__gnu_Unwind_RaiseException+0x42>
 80012bc:	692b      	ldr	r3, [r5, #16]
 80012be:	466a      	mov	r2, sp
 80012c0:	4629      	mov	r1, r5
 80012c2:	4798      	blx	r3
 80012c4:	2808      	cmp	r0, #8
 80012c6:	4604      	mov	r4, r0
 80012c8:	d108      	bne.n	80012dc <__gnu_Unwind_RaiseException+0x54>
 80012ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80012cc:	4628      	mov	r0, r5
 80012ce:	f7ff fed1 	bl	8001074 <get_eit_entry>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d0f2      	beq.n	80012bc <__gnu_Unwind_RaiseException+0x34>
 80012d6:	2009      	movs	r0, #9
 80012d8:	b079      	add	sp, #484	@ 0x1e4
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012dc:	4668      	mov	r0, sp
 80012de:	f7ff ff13 	bl	8001108 <restore_non_core_regs>
 80012e2:	2c06      	cmp	r4, #6
 80012e4:	d1f7      	bne.n	80012d6 <__gnu_Unwind_RaiseException+0x4e>
 80012e6:	4631      	mov	r1, r6
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7ff ff43 	bl	8001174 <unwind_phase2>
 80012ee:	bf00      	nop

080012f0 <__gnu_Unwind_ForcedUnwind>:
 80012f0:	60c1      	str	r1, [r0, #12]
 80012f2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012f4:	6182      	str	r2, [r0, #24]
 80012f6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	e758      	b.n	80011b0 <unwind_phase2_forced>
 80012fe:	bf00      	nop

08001300 <__gnu_Unwind_Resume>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	68c6      	ldr	r6, [r0, #12]
 8001304:	6943      	ldr	r3, [r0, #20]
 8001306:	640b      	str	r3, [r1, #64]	@ 0x40
 8001308:	b9ae      	cbnz	r6, 8001336 <__gnu_Unwind_Resume+0x36>
 800130a:	6903      	ldr	r3, [r0, #16]
 800130c:	460a      	mov	r2, r1
 800130e:	4604      	mov	r4, r0
 8001310:	460d      	mov	r5, r1
 8001312:	4601      	mov	r1, r0
 8001314:	2002      	movs	r0, #2
 8001316:	4798      	blx	r3
 8001318:	2807      	cmp	r0, #7
 800131a:	d005      	beq.n	8001328 <__gnu_Unwind_Resume+0x28>
 800131c:	2808      	cmp	r0, #8
 800131e:	d10f      	bne.n	8001340 <__gnu_Unwind_Resume+0x40>
 8001320:	4629      	mov	r1, r5
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff ff26 	bl	8001174 <unwind_phase2>
 8001328:	4630      	mov	r0, r6
 800132a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800132c:	f7ff ff20 	bl	8001170 <_Unwind_DebugHook>
 8001330:	1d28      	adds	r0, r5, #4
 8001332:	f000 fb49 	bl	80019c8 <__restore_core_regs>
 8001336:	2201      	movs	r2, #1
 8001338:	f7ff ff3a 	bl	80011b0 <unwind_phase2_forced>
 800133c:	f012 ffe4 	bl	8014308 <abort>
 8001340:	f012 ffe2 	bl	8014308 <abort>

08001344 <__gnu_Unwind_Resume_or_Rethrow>:
 8001344:	68c2      	ldr	r2, [r0, #12]
 8001346:	b11a      	cbz	r2, 8001350 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001348:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800134a:	640a      	str	r2, [r1, #64]	@ 0x40
 800134c:	2200      	movs	r2, #0
 800134e:	e72f      	b.n	80011b0 <unwind_phase2_forced>
 8001350:	e79a      	b.n	8001288 <__gnu_Unwind_RaiseException>
 8001352:	bf00      	nop

08001354 <_Unwind_Complete>:
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <_Unwind_DeleteException>:
 8001358:	6883      	ldr	r3, [r0, #8]
 800135a:	4601      	mov	r1, r0
 800135c:	b10b      	cbz	r3, 8001362 <_Unwind_DeleteException+0xa>
 800135e:	2001      	movs	r0, #1
 8001360:	4718      	bx	r3
 8001362:	4770      	bx	lr

08001364 <_Unwind_VRS_Get>:
 8001364:	2901      	cmp	r1, #1
 8001366:	d010      	beq.n	800138a <_Unwind_VRS_Get+0x26>
 8001368:	d809      	bhi.n	800137e <_Unwind_VRS_Get+0x1a>
 800136a:	b983      	cbnz	r3, 800138e <_Unwind_VRS_Get+0x2a>
 800136c:	2a0f      	cmp	r2, #15
 800136e:	d80e      	bhi.n	800138e <_Unwind_VRS_Get+0x2a>
 8001370:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001374:	4618      	mov	r0, r3
 8001376:	6853      	ldr	r3, [r2, #4]
 8001378:	9a00      	ldr	r2, [sp, #0]
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4770      	bx	lr
 800137e:	3903      	subs	r1, #3
 8001380:	2901      	cmp	r1, #1
 8001382:	bf8c      	ite	hi
 8001384:	2002      	movhi	r0, #2
 8001386:	2001      	movls	r0, #1
 8001388:	4770      	bx	lr
 800138a:	4608      	mov	r0, r1
 800138c:	4770      	bx	lr
 800138e:	2002      	movs	r0, #2
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <_Unwind_GetGR>:
 8001394:	b500      	push	{lr}
 8001396:	b085      	sub	sp, #20
 8001398:	460a      	mov	r2, r1
 800139a:	2300      	movs	r3, #0
 800139c:	a903      	add	r1, sp, #12
 800139e:	9100      	str	r1, [sp, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff ffdf 	bl	8001364 <_Unwind_VRS_Get>
 80013a6:	9803      	ldr	r0, [sp, #12]
 80013a8:	b005      	add	sp, #20
 80013aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ae:	bf00      	nop

080013b0 <_Unwind_VRS_Set>:
 80013b0:	2901      	cmp	r1, #1
 80013b2:	d010      	beq.n	80013d6 <_Unwind_VRS_Set+0x26>
 80013b4:	d809      	bhi.n	80013ca <_Unwind_VRS_Set+0x1a>
 80013b6:	b983      	cbnz	r3, 80013da <_Unwind_VRS_Set+0x2a>
 80013b8:	2a0f      	cmp	r2, #15
 80013ba:	d80e      	bhi.n	80013da <_Unwind_VRS_Set+0x2a>
 80013bc:	9900      	ldr	r1, [sp, #0]
 80013be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80013c2:	6809      	ldr	r1, [r1, #0]
 80013c4:	6051      	str	r1, [r2, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	4770      	bx	lr
 80013ca:	3903      	subs	r1, #3
 80013cc:	2901      	cmp	r1, #1
 80013ce:	bf8c      	ite	hi
 80013d0:	2002      	movhi	r0, #2
 80013d2:	2001      	movls	r0, #1
 80013d4:	4770      	bx	lr
 80013d6:	4608      	mov	r0, r1
 80013d8:	4770      	bx	lr
 80013da:	2002      	movs	r0, #2
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <_Unwind_SetGR>:
 80013e0:	b510      	push	{r4, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	2300      	movs	r3, #0
 80013e6:	ac03      	add	r4, sp, #12
 80013e8:	9203      	str	r2, [sp, #12]
 80013ea:	9400      	str	r4, [sp, #0]
 80013ec:	460a      	mov	r2, r1
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff ffde 	bl	80013b0 <_Unwind_VRS_Set>
 80013f4:	b004      	add	sp, #16
 80013f6:	bd10      	pop	{r4, pc}

080013f8 <__gnu_Unwind_Backtrace>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	f102 0c04 	add.w	ip, r2, #4
 8001402:	4605      	mov	r5, r0
 8001404:	460c      	mov	r4, r1
 8001406:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800140a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800140e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8001412:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001416:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800141a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800141e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001422:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001426:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800142a:	f04f 36ff 	mov.w	r6, #4294967295
 800142e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001432:	9616      	str	r6, [sp, #88]	@ 0x58
 8001434:	e010      	b.n	8001458 <__gnu_Unwind_Backtrace+0x60>
 8001436:	f7ff ffd3 	bl	80013e0 <_Unwind_SetGR>
 800143a:	4621      	mov	r1, r4
 800143c:	a816      	add	r0, sp, #88	@ 0x58
 800143e:	47a8      	blx	r5
 8001440:	4603      	mov	r3, r0
 8001442:	aa16      	add	r2, sp, #88	@ 0x58
 8001444:	4669      	mov	r1, sp
 8001446:	2008      	movs	r0, #8
 8001448:	b983      	cbnz	r3, 800146c <__gnu_Unwind_Backtrace+0x74>
 800144a:	9b04      	ldr	r3, [sp, #16]
 800144c:	4798      	blx	r3
 800144e:	2805      	cmp	r0, #5
 8001450:	4606      	mov	r6, r0
 8001452:	d00c      	beq.n	800146e <__gnu_Unwind_Backtrace+0x76>
 8001454:	2809      	cmp	r0, #9
 8001456:	d009      	beq.n	800146c <__gnu_Unwind_Backtrace+0x74>
 8001458:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800145a:	4668      	mov	r0, sp
 800145c:	f7ff fe0a 	bl	8001074 <get_eit_entry>
 8001460:	4603      	mov	r3, r0
 8001462:	466a      	mov	r2, sp
 8001464:	210c      	movs	r1, #12
 8001466:	a816      	add	r0, sp, #88	@ 0x58
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0e4      	beq.n	8001436 <__gnu_Unwind_Backtrace+0x3e>
 800146c:	2609      	movs	r6, #9
 800146e:	a816      	add	r0, sp, #88	@ 0x58
 8001470:	f7ff fe4a 	bl	8001108 <restore_non_core_regs>
 8001474:	4630      	mov	r0, r6
 8001476:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800147a:	bd70      	pop	{r4, r5, r6, pc}

0800147c <__gnu_unwind_pr_common>:
 800147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001480:	4693      	mov	fp, r2
 8001482:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001484:	b089      	sub	sp, #36	@ 0x24
 8001486:	460d      	mov	r5, r1
 8001488:	f852 1b04 	ldr.w	r1, [r2], #4
 800148c:	9206      	str	r2, [sp, #24]
 800148e:	f000 0c03 	and.w	ip, r0, #3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d079      	beq.n	800158a <__gnu_unwind_pr_common+0x10e>
 8001496:	0c0c      	lsrs	r4, r1, #16
 8001498:	f88d 401d 	strb.w	r4, [sp, #29]
 800149c:	0409      	lsls	r1, r1, #16
 800149e:	b2e4      	uxtb	r4, r4
 80014a0:	9105      	str	r1, [sp, #20]
 80014a2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80014a6:	2102      	movs	r1, #2
 80014a8:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 80014aa:	f88d 101c 	strb.w	r1, [sp, #28]
 80014ae:	f1bc 0f02 	cmp.w	ip, #2
 80014b2:	bf08      	it	eq
 80014b4:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 80014b6:	f017 0701 	ands.w	r7, r7, #1
 80014ba:	d00c      	beq.n	80014d6 <__gnu_unwind_pr_common+0x5a>
 80014bc:	a905      	add	r1, sp, #20
 80014be:	4658      	mov	r0, fp
 80014c0:	f000 fb84 	bl	8001bcc <__gnu_unwind_execute>
 80014c4:	b918      	cbnz	r0, 80014ce <__gnu_unwind_pr_common+0x52>
 80014c6:	2008      	movs	r0, #8
 80014c8:	b009      	add	sp, #36	@ 0x24
 80014ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ce:	2009      	movs	r0, #9
 80014d0:	b009      	add	sp, #36	@ 0x24
 80014d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014d6:	6816      	ldr	r6, [r2, #0]
 80014d8:	2e00      	cmp	r6, #0
 80014da:	d0ef      	beq.n	80014bc <__gnu_unwind_pr_common+0x40>
 80014dc:	f000 0108 	and.w	r1, r0, #8
 80014e0:	9101      	str	r1, [sp, #4]
 80014e2:	46b2      	mov	sl, r6
 80014e4:	9702      	str	r7, [sp, #8]
 80014e6:	4664      	mov	r4, ip
 80014e8:	4699      	mov	r9, r3
 80014ea:	f1b9 0f02 	cmp.w	r9, #2
 80014ee:	d048      	beq.n	8001582 <__gnu_unwind_pr_common+0x106>
 80014f0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014f4:	8856      	ldrh	r6, [r2, #2]
 80014f6:	f102 0804 	add.w	r8, r2, #4
 80014fa:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014fc:	f026 0301 	bic.w	r3, r6, #1
 8001500:	210f      	movs	r1, #15
 8001502:	4658      	mov	r0, fp
 8001504:	189f      	adds	r7, r3, r2
 8001506:	f7ff ff45 	bl	8001394 <_Unwind_GetGR>
 800150a:	4287      	cmp	r7, r0
 800150c:	d837      	bhi.n	800157e <__gnu_unwind_pr_common+0x102>
 800150e:	f02a 0201 	bic.w	r2, sl, #1
 8001512:	443a      	add	r2, r7
 8001514:	4282      	cmp	r2, r0
 8001516:	bf94      	ite	ls
 8001518:	2200      	movls	r2, #0
 800151a:	2201      	movhi	r2, #1
 800151c:	0073      	lsls	r3, r6, #1
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	f00a 0a01 	and.w	sl, sl, #1
 8001526:	ea43 030a 	orr.w	r3, r3, sl
 800152a:	2b01      	cmp	r3, #1
 800152c:	d047      	beq.n	80015be <__gnu_unwind_pr_common+0x142>
 800152e:	2b02      	cmp	r3, #2
 8001530:	d031      	beq.n	8001596 <__gnu_unwind_pr_common+0x11a>
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1cb      	bne.n	80014ce <__gnu_unwind_pr_common+0x52>
 8001536:	b114      	cbz	r4, 800153e <__gnu_unwind_pr_common+0xc2>
 8001538:	2a00      	cmp	r2, #0
 800153a:	f040 80c9 	bne.w	80016d0 <__gnu_unwind_pr_common+0x254>
 800153e:	f108 0204 	add.w	r2, r8, #4
 8001542:	f8d2 a000 	ldr.w	sl, [r2]
 8001546:	f1ba 0f00 	cmp.w	sl, #0
 800154a:	d1ce      	bne.n	80014ea <__gnu_unwind_pr_common+0x6e>
 800154c:	a905      	add	r1, sp, #20
 800154e:	4658      	mov	r0, fp
 8001550:	9f02      	ldr	r7, [sp, #8]
 8001552:	f000 fb3b 	bl	8001bcc <__gnu_unwind_execute>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1b9      	bne.n	80014ce <__gnu_unwind_pr_common+0x52>
 800155a:	2f00      	cmp	r7, #0
 800155c:	d0b3      	beq.n	80014c6 <__gnu_unwind_pr_common+0x4a>
 800155e:	210f      	movs	r1, #15
 8001560:	4658      	mov	r0, fp
 8001562:	f7ff ff17 	bl	8001394 <_Unwind_GetGR>
 8001566:	210e      	movs	r1, #14
 8001568:	4602      	mov	r2, r0
 800156a:	4658      	mov	r0, fp
 800156c:	f7ff ff38 	bl	80013e0 <_Unwind_SetGR>
 8001570:	4a67      	ldr	r2, [pc, #412]	@ (8001710 <__gnu_unwind_pr_common+0x294>)
 8001572:	210f      	movs	r1, #15
 8001574:	4658      	mov	r0, fp
 8001576:	f7ff ff33 	bl	80013e0 <_Unwind_SetGR>
 800157a:	2007      	movs	r0, #7
 800157c:	e7a8      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 800157e:	2200      	movs	r2, #0
 8001580:	e7cc      	b.n	800151c <__gnu_unwind_pr_common+0xa0>
 8001582:	6856      	ldr	r6, [r2, #4]
 8001584:	f102 0808 	add.w	r8, r2, #8
 8001588:	e7b7      	b.n	80014fa <__gnu_unwind_pr_common+0x7e>
 800158a:	0209      	lsls	r1, r1, #8
 800158c:	9105      	str	r1, [sp, #20]
 800158e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001592:	2103      	movs	r1, #3
 8001594:	e788      	b.n	80014a8 <__gnu_unwind_pr_common+0x2c>
 8001596:	f8d8 6000 	ldr.w	r6, [r8]
 800159a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800159e:	2c00      	cmp	r4, #0
 80015a0:	d144      	bne.n	800162c <__gnu_unwind_pr_common+0x1b0>
 80015a2:	b122      	cbz	r2, 80015ae <__gnu_unwind_pr_common+0x132>
 80015a4:	9a01      	ldr	r2, [sp, #4]
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	d05a      	beq.n	8001660 <__gnu_unwind_pr_common+0x1e4>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d058      	beq.n	8001660 <__gnu_unwind_pr_common+0x1e4>
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	da01      	bge.n	80015b6 <__gnu_unwind_pr_common+0x13a>
 80015b2:	f108 0804 	add.w	r8, r8, #4
 80015b6:	3301      	adds	r3, #1
 80015b8:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 80015bc:	e7c1      	b.n	8001542 <__gnu_unwind_pr_common+0xc6>
 80015be:	b9ec      	cbnz	r4, 80015fc <__gnu_unwind_pr_common+0x180>
 80015c0:	b1ca      	cbz	r2, 80015f6 <__gnu_unwind_pr_common+0x17a>
 80015c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80015c6:	f8d8 2000 	ldr.w	r2, [r8]
 80015ca:	1c99      	adds	r1, r3, #2
 80015cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80015d0:	f43f af7d 	beq.w	80014ce <__gnu_unwind_pr_common+0x52>
 80015d4:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 80015d8:	3301      	adds	r3, #1
 80015da:	9104      	str	r1, [sp, #16]
 80015dc:	f000 808b 	beq.w	80016f6 <__gnu_unwind_pr_common+0x27a>
 80015e0:	f108 0004 	add.w	r0, r8, #4
 80015e4:	f7ff fdbe 	bl	8001164 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015e8:	ab04      	add	r3, sp, #16
 80015ea:	4601      	mov	r1, r0
 80015ec:	4628      	mov	r0, r5
 80015ee:	f011 f827 	bl	8012640 <__cxa_type_match>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d157      	bne.n	80016a6 <__gnu_unwind_pr_common+0x22a>
 80015f6:	f108 0208 	add.w	r2, r8, #8
 80015fa:	e7a2      	b.n	8001542 <__gnu_unwind_pr_common+0xc6>
 80015fc:	210d      	movs	r1, #13
 80015fe:	4658      	mov	r0, fp
 8001600:	f7ff fec8 	bl	8001394 <_Unwind_GetGR>
 8001604:	6a2b      	ldr	r3, [r5, #32]
 8001606:	4283      	cmp	r3, r0
 8001608:	d1f5      	bne.n	80015f6 <__gnu_unwind_pr_common+0x17a>
 800160a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800160c:	4598      	cmp	r8, r3
 800160e:	d1f2      	bne.n	80015f6 <__gnu_unwind_pr_common+0x17a>
 8001610:	4640      	mov	r0, r8
 8001612:	f7ff fcdf 	bl	8000fd4 <selfrel_offset31>
 8001616:	210f      	movs	r1, #15
 8001618:	4602      	mov	r2, r0
 800161a:	4658      	mov	r0, fp
 800161c:	f7ff fee0 	bl	80013e0 <_Unwind_SetGR>
 8001620:	462a      	mov	r2, r5
 8001622:	2100      	movs	r1, #0
 8001624:	4658      	mov	r0, fp
 8001626:	f7ff fedb 	bl	80013e0 <_Unwind_SetGR>
 800162a:	e7a6      	b.n	800157a <__gnu_unwind_pr_common+0xfe>
 800162c:	210d      	movs	r1, #13
 800162e:	4658      	mov	r0, fp
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	f7ff feaf 	bl	8001394 <_Unwind_GetGR>
 8001636:	6a2a      	ldr	r2, [r5, #32]
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	4282      	cmp	r2, r0
 800163c:	d1b7      	bne.n	80015ae <__gnu_unwind_pr_common+0x132>
 800163e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001640:	4590      	cmp	r8, r2
 8001642:	d1b4      	bne.n	80015ae <__gnu_unwind_pr_common+0x132>
 8001644:	2700      	movs	r7, #0
 8001646:	2204      	movs	r2, #4
 8001648:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800164c:	4442      	add	r2, r8
 800164e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001650:	636a      	str	r2, [r5, #52]	@ 0x34
 8001652:	f8d8 2000 	ldr.w	r2, [r8]
 8001656:	42ba      	cmp	r2, r7
 8001658:	db55      	blt.n	8001706 <__gnu_unwind_pr_common+0x28a>
 800165a:	2201      	movs	r2, #1
 800165c:	9202      	str	r2, [sp, #8]
 800165e:	e7aa      	b.n	80015b6 <__gnu_unwind_pr_common+0x13a>
 8001660:	9403      	str	r4, [sp, #12]
 8001662:	f108 0a04 	add.w	sl, r8, #4
 8001666:	2600      	movs	r6, #0
 8001668:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800166c:	461c      	mov	r4, r3
 800166e:	e00d      	b.n	800168c <__gnu_unwind_pr_common+0x210>
 8001670:	4650      	mov	r0, sl
 8001672:	9704      	str	r7, [sp, #16]
 8001674:	f7ff fd76 	bl	8001164 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001678:	2200      	movs	r2, #0
 800167a:	4601      	mov	r1, r0
 800167c:	ab04      	add	r3, sp, #16
 800167e:	4628      	mov	r0, r5
 8001680:	3601      	adds	r6, #1
 8001682:	f10a 0a04 	add.w	sl, sl, #4
 8001686:	f010 ffdb 	bl	8012640 <__cxa_type_match>
 800168a:	b9e0      	cbnz	r0, 80016c6 <__gnu_unwind_pr_common+0x24a>
 800168c:	42a6      	cmp	r6, r4
 800168e:	d1ef      	bne.n	8001670 <__gnu_unwind_pr_common+0x1f4>
 8001690:	210d      	movs	r1, #13
 8001692:	4658      	mov	r0, fp
 8001694:	f7ff fe7e 	bl	8001394 <_Unwind_GetGR>
 8001698:	9b04      	ldr	r3, [sp, #16]
 800169a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800169e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 80016a2:	2006      	movs	r0, #6
 80016a4:	e714      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 80016a6:	4604      	mov	r4, r0
 80016a8:	210d      	movs	r1, #13
 80016aa:	4658      	mov	r0, fp
 80016ac:	f7ff fe72 	bl	8001394 <_Unwind_GetGR>
 80016b0:	9e04      	ldr	r6, [sp, #16]
 80016b2:	6228      	str	r0, [r5, #32]
 80016b4:	2c02      	cmp	r4, #2
 80016b6:	bf04      	itt	eq
 80016b8:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 80016ba:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 80016be:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 80016c2:	2006      	movs	r0, #6
 80016c4:	e704      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 80016c6:	4623      	mov	r3, r4
 80016c8:	f8d8 6000 	ldr.w	r6, [r8]
 80016cc:	9c03      	ldr	r4, [sp, #12]
 80016ce:	e76e      	b.n	80015ae <__gnu_unwind_pr_common+0x132>
 80016d0:	4640      	mov	r0, r8
 80016d2:	f7ff fc7f 	bl	8000fd4 <selfrel_offset31>
 80016d6:	f108 0204 	add.w	r2, r8, #4
 80016da:	4604      	mov	r4, r0
 80016dc:	63aa      	str	r2, [r5, #56]	@ 0x38
 80016de:	4628      	mov	r0, r5
 80016e0:	f011 f80c 	bl	80126fc <__cxa_begin_cleanup>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	f43f aef2 	beq.w	80014ce <__gnu_unwind_pr_common+0x52>
 80016ea:	4622      	mov	r2, r4
 80016ec:	210f      	movs	r1, #15
 80016ee:	4658      	mov	r0, fp
 80016f0:	f7ff fe76 	bl	80013e0 <_Unwind_SetGR>
 80016f4:	e741      	b.n	800157a <__gnu_unwind_pr_common+0xfe>
 80016f6:	460c      	mov	r4, r1
 80016f8:	4658      	mov	r0, fp
 80016fa:	210d      	movs	r1, #13
 80016fc:	f7ff fe4a 	bl	8001394 <_Unwind_GetGR>
 8001700:	4626      	mov	r6, r4
 8001702:	6228      	str	r0, [r5, #32]
 8001704:	e7db      	b.n	80016be <__gnu_unwind_pr_common+0x242>
 8001706:	1c58      	adds	r0, r3, #1
 8001708:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800170c:	e781      	b.n	8001612 <__gnu_unwind_pr_common+0x196>
 800170e:	bf00      	nop
 8001710:	08012e6b 	.word	0x08012e6b

08001714 <__aeabi_unwind_cpp_pr0>:
 8001714:	2300      	movs	r3, #0
 8001716:	e6b1      	b.n	800147c <__gnu_unwind_pr_common>

08001718 <__aeabi_unwind_cpp_pr1>:
 8001718:	2301      	movs	r3, #1
 800171a:	e6af      	b.n	800147c <__gnu_unwind_pr_common>

0800171c <__aeabi_unwind_cpp_pr2>:
 800171c:	2302      	movs	r3, #2
 800171e:	e6ad      	b.n	800147c <__gnu_unwind_pr_common>

08001720 <_Unwind_VRS_Pop>:
 8001720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001724:	4606      	mov	r6, r0
 8001726:	b0c3      	sub	sp, #268	@ 0x10c
 8001728:	4615      	mov	r5, r2
 800172a:	461c      	mov	r4, r3
 800172c:	2904      	cmp	r1, #4
 800172e:	f200 80d1 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001732:	e8df f001 	tbb	[pc, r1]
 8001736:	51ac      	.short	0x51ac
 8001738:	2acf      	.short	0x2acf
 800173a:	03          	.byte	0x03
 800173b:	00          	.byte	0x00
 800173c:	2c00      	cmp	r4, #0
 800173e:	f040 80c9 	bne.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001742:	2a10      	cmp	r2, #16
 8001744:	f200 80c6 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001748:	6803      	ldr	r3, [r0, #0]
 800174a:	06dc      	lsls	r4, r3, #27
 800174c:	f100 80e7 	bmi.w	800191e <_Unwind_VRS_Pop+0x1fe>
 8001750:	af20      	add	r7, sp, #128	@ 0x80
 8001752:	4638      	mov	r0, r7
 8001754:	f000 f9aa 	bl	8001aac <__gnu_Unwind_Save_WMMXC>
 8001758:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800175a:	4639      	mov	r1, r7
 800175c:	2300      	movs	r3, #0
 800175e:	f04f 0c01 	mov.w	ip, #1
 8001762:	fa0c f203 	lsl.w	r2, ip, r3
 8001766:	422a      	tst	r2, r5
 8001768:	4620      	mov	r0, r4
 800176a:	f103 0301 	add.w	r3, r3, #1
 800176e:	d003      	beq.n	8001778 <_Unwind_VRS_Pop+0x58>
 8001770:	f850 2b04 	ldr.w	r2, [r0], #4
 8001774:	600a      	str	r2, [r1, #0]
 8001776:	4604      	mov	r4, r0
 8001778:	2b04      	cmp	r3, #4
 800177a:	f101 0104 	add.w	r1, r1, #4
 800177e:	d1f0      	bne.n	8001762 <_Unwind_VRS_Pop+0x42>
 8001780:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001782:	4638      	mov	r0, r7
 8001784:	f000 f988 	bl	8001a98 <__gnu_Unwind_Restore_WMMXC>
 8001788:	e099      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800178a:	2c03      	cmp	r4, #3
 800178c:	f040 80a2 	bne.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001790:	b294      	uxth	r4, r2
 8001792:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001796:	2b10      	cmp	r3, #16
 8001798:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800179c:	f200 809a 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017a0:	6803      	ldr	r3, [r0, #0]
 80017a2:	071f      	lsls	r7, r3, #28
 80017a4:	f100 80c3 	bmi.w	800192e <_Unwind_VRS_Pop+0x20e>
 80017a8:	af20      	add	r7, sp, #128	@ 0x80
 80017aa:	4638      	mov	r0, r7
 80017ac:	f000 f952 	bl	8001a54 <__gnu_Unwind_Save_WMMXD>
 80017b0:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80017b2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80017b6:	b154      	cbz	r4, 80017ce <_Unwind_VRS_Pop+0xae>
 80017b8:	460b      	mov	r3, r1
 80017ba:	1ad0      	subs	r0, r2, r3
 80017bc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80017c0:	00e4      	lsls	r4, r4, #3
 80017c2:	581d      	ldr	r5, [r3, r0]
 80017c4:	f843 5b04 	str.w	r5, [r3], #4
 80017c8:	428b      	cmp	r3, r1
 80017ca:	d1fa      	bne.n	80017c2 <_Unwind_VRS_Pop+0xa2>
 80017cc:	4422      	add	r2, r4
 80017ce:	63b2      	str	r2, [r6, #56]	@ 0x38
 80017d0:	4638      	mov	r0, r7
 80017d2:	f000 f91d 	bl	8001a10 <__gnu_Unwind_Restore_WMMXD>
 80017d6:	e072      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 80017d8:	2c01      	cmp	r4, #1
 80017da:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80017de:	b295      	uxth	r5, r2
 80017e0:	d071      	beq.n	80018c6 <_Unwind_VRS_Pop+0x1a6>
 80017e2:	2c05      	cmp	r4, #5
 80017e4:	d176      	bne.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017e6:	eb08 0905 	add.w	r9, r8, r5
 80017ea:	f1b9 0f20 	cmp.w	r9, #32
 80017ee:	d871      	bhi.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017f0:	f1b8 0f0f 	cmp.w	r8, #15
 80017f4:	d872      	bhi.n	80018dc <_Unwind_VRS_Pop+0x1bc>
 80017f6:	f1b9 0f10 	cmp.w	r9, #16
 80017fa:	6803      	ldr	r3, [r0, #0]
 80017fc:	f200 809f 	bhi.w	800193e <_Unwind_VRS_Pop+0x21e>
 8001800:	07d9      	lsls	r1, r3, #31
 8001802:	d508      	bpl.n	8001816 <_Unwind_VRS_Pop+0xf6>
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	4630      	mov	r0, r6
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	f840 3b48 	str.w	r3, [r0], #72
 8001812:	f000 f8f1 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 8001816:	af20      	add	r7, sp, #128	@ 0x80
 8001818:	4638      	mov	r0, r7
 800181a:	f000 f8ed 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 800181e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001820:	2d00      	cmp	r5, #0
 8001822:	f000 80b9 	beq.w	8001998 <_Unwind_VRS_Pop+0x278>
 8001826:	006d      	lsls	r5, r5, #1
 8001828:	1e6a      	subs	r2, r5, #1
 800182a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 800182e:	2500      	movs	r5, #0
 8001830:	3201      	adds	r2, #1
 8001832:	3904      	subs	r1, #4
 8001834:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001838:	f853 0b04 	ldr.w	r0, [r3], #4
 800183c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001840:	4293      	cmp	r3, r2
 8001842:	d1f9      	bne.n	8001838 <_Unwind_VRS_Pop+0x118>
 8001844:	2d00      	cmp	r5, #0
 8001846:	f000 80a1 	beq.w	800198c <_Unwind_VRS_Pop+0x26c>
 800184a:	4641      	mov	r1, r8
 800184c:	2910      	cmp	r1, #16
 800184e:	bf38      	it	cc
 8001850:	2110      	movcc	r1, #16
 8001852:	006b      	lsls	r3, r5, #1
 8001854:	3910      	subs	r1, #16
 8001856:	466f      	mov	r7, sp
 8001858:	3b01      	subs	r3, #1
 800185a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800185e:	3301      	adds	r3, #1
 8001860:	3904      	subs	r1, #4
 8001862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001866:	f852 0b04 	ldr.w	r0, [r2], #4
 800186a:	f841 0f04 	str.w	r0, [r1, #4]!
 800186e:	429a      	cmp	r2, r3
 8001870:	d1f9      	bne.n	8001866 <_Unwind_VRS_Pop+0x146>
 8001872:	2c01      	cmp	r4, #1
 8001874:	f000 8088 	beq.w	8001988 <_Unwind_VRS_Pop+0x268>
 8001878:	f1b8 0f0f 	cmp.w	r8, #15
 800187c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800187e:	d802      	bhi.n	8001886 <_Unwind_VRS_Pop+0x166>
 8001880:	a820      	add	r0, sp, #128	@ 0x80
 8001882:	f000 f8b5 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 8001886:	4638      	mov	r0, r7
 8001888:	f000 f8ba 	bl	8001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800188c:	e017      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800188e:	bb0c      	cbnz	r4, 80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001890:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001892:	4623      	mov	r3, r4
 8001894:	fa1f fc82 	uxth.w	ip, r2
 8001898:	2401      	movs	r4, #1
 800189a:	1d37      	adds	r7, r6, #4
 800189c:	fa04 f103 	lsl.w	r1, r4, r3
 80018a0:	ea11 0f0c 	tst.w	r1, ip
 80018a4:	4602      	mov	r2, r0
 80018a6:	d004      	beq.n	80018b2 <_Unwind_VRS_Pop+0x192>
 80018a8:	f852 1b04 	ldr.w	r1, [r2], #4
 80018ac:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 80018b0:	4610      	mov	r0, r2
 80018b2:	3301      	adds	r3, #1
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d1f1      	bne.n	800189c <_Unwind_VRS_Pop+0x17c>
 80018b8:	04ac      	lsls	r4, r5, #18
 80018ba:	d400      	bmi.n	80018be <_Unwind_VRS_Pop+0x19e>
 80018bc:	63b0      	str	r0, [r6, #56]	@ 0x38
 80018be:	2000      	movs	r0, #0
 80018c0:	b043      	add	sp, #268	@ 0x10c
 80018c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018c6:	eb08 0305 	add.w	r3, r8, r5
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d802      	bhi.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80018ce:	f1b8 0f10 	cmp.w	r8, #16
 80018d2:	d114      	bne.n	80018fe <_Unwind_VRS_Pop+0x1de>
 80018d4:	2002      	movs	r0, #2
 80018d6:	b043      	add	sp, #268	@ 0x10c
 80018d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d0ee      	beq.n	80018be <_Unwind_VRS_Pop+0x19e>
 80018e0:	6803      	ldr	r3, [r0, #0]
 80018e2:	075a      	lsls	r2, r3, #29
 80018e4:	d45c      	bmi.n	80019a0 <_Unwind_VRS_Pop+0x280>
 80018e6:	466f      	mov	r7, sp
 80018e8:	4638      	mov	r0, r7
 80018ea:	f000 f88d 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ee:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018f0:	006b      	lsls	r3, r5, #1
 80018f2:	f1a8 0110 	sub.w	r1, r8, #16
 80018f6:	3b01      	subs	r3, #1
 80018f8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018fc:	e7af      	b.n	800185e <_Unwind_VRS_Pop+0x13e>
 80018fe:	6803      	ldr	r3, [r0, #0]
 8001900:	07da      	lsls	r2, r3, #31
 8001902:	d459      	bmi.n	80019b8 <_Unwind_VRS_Pop+0x298>
 8001904:	af20      	add	r7, sp, #128	@ 0x80
 8001906:	4638      	mov	r0, r7
 8001908:	f000 f86e 	bl	80019e8 <__gnu_Unwind_Save_VFP>
 800190c:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800190e:	2d00      	cmp	r5, #0
 8001910:	d189      	bne.n	8001826 <_Unwind_VRS_Pop+0x106>
 8001912:	3304      	adds	r3, #4
 8001914:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001916:	4638      	mov	r0, r7
 8001918:	f000 f862 	bl	80019e0 <__gnu_Unwind_Restore_VFP>
 800191c:	e7cf      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800191e:	f023 0310 	bic.w	r3, r3, #16
 8001922:	6003      	str	r3, [r0, #0]
 8001924:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8001928:	f000 f8c0 	bl	8001aac <__gnu_Unwind_Save_WMMXC>
 800192c:	e710      	b.n	8001750 <_Unwind_VRS_Pop+0x30>
 800192e:	f023 0308 	bic.w	r3, r3, #8
 8001932:	6003      	str	r3, [r0, #0]
 8001934:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8001938:	f000 f88c 	bl	8001a54 <__gnu_Unwind_Save_WMMXD>
 800193c:	e734      	b.n	80017a8 <_Unwind_VRS_Pop+0x88>
 800193e:	07d9      	lsls	r1, r3, #31
 8001940:	d508      	bpl.n	8001954 <_Unwind_VRS_Pop+0x234>
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	f840 3b48 	str.w	r3, [r0], #72
 800194e:	f000 f853 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 8001952:	6833      	ldr	r3, [r6, #0]
 8001954:	0758      	lsls	r0, r3, #29
 8001956:	d506      	bpl.n	8001966 <_Unwind_VRS_Pop+0x246>
 8001958:	4630      	mov	r0, r6
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	f840 3bd0 	str.w	r3, [r0], #208
 8001962:	f000 f851 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001966:	af20      	add	r7, sp, #128	@ 0x80
 8001968:	4638      	mov	r0, r7
 800196a:	f000 f845 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 800196e:	4668      	mov	r0, sp
 8001970:	f000 f84a 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	f1c8 0210 	rsb	r2, r8, #16
 8001978:	0052      	lsls	r2, r2, #1
 800197a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800197c:	f1a9 0510 	sub.w	r5, r9, #16
 8001980:	3a01      	subs	r2, #1
 8001982:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001986:	e753      	b.n	8001830 <_Unwind_VRS_Pop+0x110>
 8001988:	af20      	add	r7, sp, #128	@ 0x80
 800198a:	e7c2      	b.n	8001912 <_Unwind_VRS_Pop+0x1f2>
 800198c:	2c01      	cmp	r4, #1
 800198e:	d0c0      	beq.n	8001912 <_Unwind_VRS_Pop+0x1f2>
 8001990:	f1b8 0f0f 	cmp.w	r8, #15
 8001994:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001996:	d892      	bhi.n	80018be <_Unwind_VRS_Pop+0x19e>
 8001998:	4638      	mov	r0, r7
 800199a:	f000 f829 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 800199e:	e78e      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	f840 3bd0 	str.w	r3, [r0], #208
 80019a8:	466f      	mov	r7, sp
 80019aa:	f000 f82d 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80019ae:	4638      	mov	r0, r7
 80019b0:	f000 f82a 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80019b4:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80019b6:	e79b      	b.n	80018f0 <_Unwind_VRS_Pop+0x1d0>
 80019b8:	4630      	mov	r0, r6
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	f840 3b48 	str.w	r3, [r0], #72
 80019c2:	f000 f811 	bl	80019e8 <__gnu_Unwind_Save_VFP>
 80019c6:	e79d      	b.n	8001904 <_Unwind_VRS_Pop+0x1e4>

080019c8 <__restore_core_regs>:
 80019c8:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 80019cc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80019d0:	469c      	mov	ip, r3
 80019d2:	46a6      	mov	lr, r4
 80019d4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80019d8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80019dc:	46e5      	mov	sp, ip
 80019de:	bd00      	pop	{pc}

080019e0 <__gnu_Unwind_Restore_VFP>:
 80019e0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <__gnu_Unwind_Save_VFP>:
 80019e8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop

080019f0 <__gnu_Unwind_Restore_VFP_D>:
 80019f0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <__gnu_Unwind_Save_VFP_D>:
 80019f8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001a00:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001a08:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <__gnu_Unwind_Restore_WMMXD>:
 8001a10:	ecf0 0102 	ldfe	f0, [r0], #8
 8001a14:	ecf0 1102 	ldfe	f1, [r0], #8
 8001a18:	ecf0 2102 	ldfe	f2, [r0], #8
 8001a1c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001a20:	ecf0 4102 	ldfe	f4, [r0], #8
 8001a24:	ecf0 5102 	ldfe	f5, [r0], #8
 8001a28:	ecf0 6102 	ldfe	f6, [r0], #8
 8001a2c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001a30:	ecf0 8102 	ldfp	f0, [r0], #8
 8001a34:	ecf0 9102 	ldfp	f1, [r0], #8
 8001a38:	ecf0 a102 	ldfp	f2, [r0], #8
 8001a3c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a40:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a44:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a48:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a4c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <__gnu_Unwind_Save_WMMXD>:
 8001a54:	ece0 0102 	stfe	f0, [r0], #8
 8001a58:	ece0 1102 	stfe	f1, [r0], #8
 8001a5c:	ece0 2102 	stfe	f2, [r0], #8
 8001a60:	ece0 3102 	stfe	f3, [r0], #8
 8001a64:	ece0 4102 	stfe	f4, [r0], #8
 8001a68:	ece0 5102 	stfe	f5, [r0], #8
 8001a6c:	ece0 6102 	stfe	f6, [r0], #8
 8001a70:	ece0 7102 	stfe	f7, [r0], #8
 8001a74:	ece0 8102 	stfp	f0, [r0], #8
 8001a78:	ece0 9102 	stfp	f1, [r0], #8
 8001a7c:	ece0 a102 	stfp	f2, [r0], #8
 8001a80:	ece0 b102 	stfp	f3, [r0], #8
 8001a84:	ece0 c102 	stfp	f4, [r0], #8
 8001a88:	ece0 d102 	stfp	f5, [r0], #8
 8001a8c:	ece0 e102 	stfp	f6, [r0], #8
 8001a90:	ece0 f102 	stfp	f7, [r0], #8
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <__gnu_Unwind_Restore_WMMXC>:
 8001a98:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a9c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001aa0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001aa4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <__gnu_Unwind_Save_WMMXC>:
 8001aac:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001ab0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001ab4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001ab8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <_Unwind_RaiseException>:
 8001ac0:	46ec      	mov	ip, sp
 8001ac2:	b500      	push	{lr}
 8001ac4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ac8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ad4:	a901      	add	r1, sp, #4
 8001ad6:	f7ff fbd7 	bl	8001288 <__gnu_Unwind_RaiseException>
 8001ada:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ade:	b012      	add	sp, #72	@ 0x48
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop

08001ae4 <_Unwind_Resume>:
 8001ae4:	46ec      	mov	ip, sp
 8001ae6:	b500      	push	{lr}
 8001ae8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001af8:	a901      	add	r1, sp, #4
 8001afa:	f7ff fc01 	bl	8001300 <__gnu_Unwind_Resume>
 8001afe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b02:	b012      	add	sp, #72	@ 0x48
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <_Unwind_Resume_or_Rethrow>:
 8001b08:	46ec      	mov	ip, sp
 8001b0a:	b500      	push	{lr}
 8001b0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b1c:	a901      	add	r1, sp, #4
 8001b1e:	f7ff fc11 	bl	8001344 <__gnu_Unwind_Resume_or_Rethrow>
 8001b22:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b26:	b012      	add	sp, #72	@ 0x48
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <_Unwind_ForcedUnwind>:
 8001b2c:	46ec      	mov	ip, sp
 8001b2e:	b500      	push	{lr}
 8001b30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b40:	ab01      	add	r3, sp, #4
 8001b42:	f7ff fbd5 	bl	80012f0 <__gnu_Unwind_ForcedUnwind>
 8001b46:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b4a:	b012      	add	sp, #72	@ 0x48
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <_Unwind_Backtrace>:
 8001b50:	46ec      	mov	ip, sp
 8001b52:	b500      	push	{lr}
 8001b54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b64:	aa01      	add	r2, sp, #4
 8001b66:	f7ff fc47 	bl	80013f8 <__gnu_Unwind_Backtrace>
 8001b6a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b6e:	b012      	add	sp, #72	@ 0x48
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <next_unwind_byte>:
 8001b74:	7a02      	ldrb	r2, [r0, #8]
 8001b76:	4603      	mov	r3, r0
 8001b78:	b97a      	cbnz	r2, 8001b9a <next_unwind_byte+0x26>
 8001b7a:	7a42      	ldrb	r2, [r0, #9]
 8001b7c:	b1a2      	cbz	r2, 8001ba8 <next_unwind_byte+0x34>
 8001b7e:	6841      	ldr	r1, [r0, #4]
 8001b80:	3a01      	subs	r2, #1
 8001b82:	b410      	push	{r4}
 8001b84:	7242      	strb	r2, [r0, #9]
 8001b86:	6808      	ldr	r0, [r1, #0]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	1d0c      	adds	r4, r1, #4
 8001b8c:	721a      	strb	r2, [r3, #8]
 8001b8e:	0202      	lsls	r2, r0, #8
 8001b90:	605c      	str	r4, [r3, #4]
 8001b92:	0e00      	lsrs	r0, r0, #24
 8001b94:	bc10      	pop	{r4}
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	4770      	bx	lr
 8001b9a:	6800      	ldr	r0, [r0, #0]
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	721a      	strb	r2, [r3, #8]
 8001ba0:	0202      	lsls	r2, r0, #8
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	0e00      	lsrs	r0, r0, #24
 8001ba6:	4770      	bx	lr
 8001ba8:	20b0      	movs	r0, #176	@ 0xb0
 8001baa:	4770      	bx	lr

08001bac <_Unwind_GetGR.constprop.0>:
 8001bac:	b500      	push	{lr}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	aa03      	add	r2, sp, #12
 8001bb4:	9200      	str	r2, [sp, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	220c      	movs	r2, #12
 8001bba:	f7ff fbd3 	bl	8001364 <_Unwind_VRS_Get>
 8001bbe:	9803      	ldr	r0, [sp, #12]
 8001bc0:	b005      	add	sp, #20
 8001bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc6:	bf00      	nop

08001bc8 <unwind_UCB_from_context>:
 8001bc8:	e7f0      	b.n	8001bac <_Unwind_GetGR.constprop.0>
 8001bca:	bf00      	nop

08001bcc <__gnu_unwind_execute>:
 8001bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bd0:	4606      	mov	r6, r0
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	460d      	mov	r5, r1
 8001bd6:	f04f 0800 	mov.w	r8, #0
 8001bda:	4628      	mov	r0, r5
 8001bdc:	f7ff ffca 	bl	8001b74 <next_unwind_byte>
 8001be0:	28b0      	cmp	r0, #176	@ 0xb0
 8001be2:	4604      	mov	r4, r0
 8001be4:	f000 80da 	beq.w	8001d9c <__gnu_unwind_execute+0x1d0>
 8001be8:	0607      	lsls	r7, r0, #24
 8001bea:	d546      	bpl.n	8001c7a <__gnu_unwind_execute+0xae>
 8001bec:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bf0:	2b80      	cmp	r3, #128	@ 0x80
 8001bf2:	d05e      	beq.n	8001cb2 <__gnu_unwind_execute+0xe6>
 8001bf4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bf6:	d073      	beq.n	8001ce0 <__gnu_unwind_execute+0x114>
 8001bf8:	d81b      	bhi.n	8001c32 <__gnu_unwind_execute+0x66>
 8001bfa:	2b90      	cmp	r3, #144	@ 0x90
 8001bfc:	f000 809b 	beq.w	8001d36 <__gnu_unwind_execute+0x16a>
 8001c00:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c02:	d112      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c04:	43c3      	mvns	r3, r0
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001c0e:	411a      	asrs	r2, r3
 8001c10:	0701      	lsls	r1, r0, #28
 8001c12:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001c16:	d501      	bpl.n	8001c1c <__gnu_unwind_execute+0x50>
 8001c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4630      	mov	r0, r6
 8001c22:	f7ff fd7d 	bl	8001720 <_Unwind_VRS_Pop>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d0d7      	beq.n	8001bda <__gnu_unwind_execute+0xe>
 8001c2a:	2009      	movs	r0, #9
 8001c2c:	b005      	add	sp, #20
 8001c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c34:	d16d      	bne.n	8001d12 <__gnu_unwind_execute+0x146>
 8001c36:	28c6      	cmp	r0, #198	@ 0xc6
 8001c38:	f000 8093 	beq.w	8001d62 <__gnu_unwind_execute+0x196>
 8001c3c:	28c7      	cmp	r0, #199	@ 0xc7
 8001c3e:	f000 80b2 	beq.w	8001da6 <__gnu_unwind_execute+0x1da>
 8001c42:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c48:	f000 80d2 	beq.w	8001df0 <__gnu_unwind_execute+0x224>
 8001c4c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c4e:	f000 80dd 	beq.w	8001e0c <__gnu_unwind_execute+0x240>
 8001c52:	28c9      	cmp	r0, #201	@ 0xc9
 8001c54:	d1e9      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c56:	4628      	mov	r0, r5
 8001c58:	f7ff ff8c 	bl	8001b74 <next_unwind_byte>
 8001c5c:	0302      	lsls	r2, r0, #12
 8001c5e:	f000 000f 	and.w	r0, r0, #15
 8001c62:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c66:	3001      	adds	r0, #1
 8001c68:	4302      	orrs	r2, r0
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff fd56 	bl	8001720 <_Unwind_VRS_Pop>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	d0b0      	beq.n	8001bda <__gnu_unwind_execute+0xe>
 8001c78:	e7d7      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c7a:	0083      	lsls	r3, r0, #2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	1d1f      	adds	r7, r3, #4
 8001c80:	f10d 090c 	add.w	r9, sp, #12
 8001c84:	2300      	movs	r3, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	f8cd 9000 	str.w	r9, [sp]
 8001c8c:	220d      	movs	r2, #13
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f7ff fb68 	bl	8001364 <_Unwind_VRS_Get>
 8001c94:	9b03      	ldr	r3, [sp, #12]
 8001c96:	f8cd 9000 	str.w	r9, [sp]
 8001c9a:	0660      	lsls	r0, r4, #25
 8001c9c:	bf4c      	ite	mi
 8001c9e:	1bdf      	submi	r7, r3, r7
 8001ca0:	18ff      	addpl	r7, r7, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	220d      	movs	r2, #13
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4630      	mov	r0, r6
 8001caa:	9703      	str	r7, [sp, #12]
 8001cac:	f7ff fb80 	bl	80013b0 <_Unwind_VRS_Set>
 8001cb0:	e793      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f7ff ff5e 	bl	8001b74 <next_unwind_byte>
 8001cb8:	0224      	lsls	r4, r4, #8
 8001cba:	4320      	orrs	r0, r4
 8001cbc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001cc0:	d0b3      	beq.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cc2:	0104      	lsls	r4, r0, #4
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	b2a2      	uxth	r2, r4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff fd28 	bl	8001720 <_Unwind_VRS_Pop>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d1aa      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cd4:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001cd8:	bf18      	it	ne
 8001cda:	f04f 0801 	movne.w	r8, #1
 8001cde:	e77c      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001ce0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ce2:	d051      	beq.n	8001d88 <__gnu_unwind_execute+0x1bc>
 8001ce4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ce6:	f000 80ad 	beq.w	8001e44 <__gnu_unwind_execute+0x278>
 8001cea:	28b3      	cmp	r0, #179	@ 0xb3
 8001cec:	d06d      	beq.n	8001dca <__gnu_unwind_execute+0x1fe>
 8001cee:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cf2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cf4:	d099      	beq.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 0207 	and.w	r2, r0, #7
 8001cfa:	3201      	adds	r2, #1
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001d02:	4619      	mov	r1, r3
 8001d04:	4630      	mov	r0, r6
 8001d06:	f7ff fd0b 	bl	8001720 <_Unwind_VRS_Pop>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	f43f af65 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d10:	e78b      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d12:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001d16:	2bd0      	cmp	r3, #208	@ 0xd0
 8001d18:	d187      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d1a:	f000 0207 	and.w	r2, r0, #7
 8001d1e:	3201      	adds	r2, #1
 8001d20:	2305      	movs	r3, #5
 8001d22:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001d26:	2101      	movs	r1, #1
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f7ff fcf9 	bl	8001720 <_Unwind_VRS_Pop>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	f43f af53 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d34:	e779      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d36:	f000 030d 	and.w	r3, r0, #13
 8001d3a:	2b0d      	cmp	r3, #13
 8001d3c:	f43f af75 	beq.w	8001c2a <__gnu_unwind_execute+0x5e>
 8001d40:	af03      	add	r7, sp, #12
 8001d42:	2300      	movs	r3, #0
 8001d44:	f000 020f 	and.w	r2, r0, #15
 8001d48:	4619      	mov	r1, r3
 8001d4a:	9700      	str	r7, [sp, #0]
 8001d4c:	4630      	mov	r0, r6
 8001d4e:	f7ff fb09 	bl	8001364 <_Unwind_VRS_Get>
 8001d52:	2300      	movs	r3, #0
 8001d54:	9700      	str	r7, [sp, #0]
 8001d56:	220d      	movs	r2, #13
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f7ff fb28 	bl	80013b0 <_Unwind_VRS_Set>
 8001d60:	e73b      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff ff06 	bl	8001b74 <next_unwind_byte>
 8001d68:	0302      	lsls	r2, r0, #12
 8001d6a:	f000 000f 	and.w	r0, r0, #15
 8001d6e:	3001      	adds	r0, #1
 8001d70:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d74:	2303      	movs	r3, #3
 8001d76:	4302      	orrs	r2, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f7ff fcd0 	bl	8001720 <_Unwind_VRS_Pop>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	f43f af2a 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d86:	e750      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f7ff fef3 	bl	8001b74 <next_unwind_byte>
 8001d8e:	1e43      	subs	r3, r0, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b0e      	cmp	r3, #14
 8001d94:	4602      	mov	r2, r0
 8001d96:	f67f af41 	bls.w	8001c1c <__gnu_unwind_execute+0x50>
 8001d9a:	e746      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d9c:	f1b8 0f00 	cmp.w	r8, #0
 8001da0:	d040      	beq.n	8001e24 <__gnu_unwind_execute+0x258>
 8001da2:	2000      	movs	r0, #0
 8001da4:	e742      	b.n	8001c2c <__gnu_unwind_execute+0x60>
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7ff fee4 	bl	8001b74 <next_unwind_byte>
 8001dac:	1e43      	subs	r3, r0, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b0e      	cmp	r3, #14
 8001db2:	4602      	mov	r2, r0
 8001db4:	f63f af39 	bhi.w	8001c2a <__gnu_unwind_execute+0x5e>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2104      	movs	r1, #4
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	f7ff fcaf 	bl	8001720 <_Unwind_VRS_Pop>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	f43f af09 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001dc8:	e72f      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7ff fed2 	bl	8001b74 <next_unwind_byte>
 8001dd0:	0302      	lsls	r2, r0, #12
 8001dd2:	f000 000f 	and.w	r0, r0, #15
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001ddc:	2301      	movs	r3, #1
 8001dde:	4302      	orrs	r2, r0
 8001de0:	4619      	mov	r1, r3
 8001de2:	4630      	mov	r0, r6
 8001de4:	f7ff fc9c 	bl	8001720 <_Unwind_VRS_Pop>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	f43f aef6 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001dee:	e71c      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001df0:	f000 020f 	and.w	r2, r0, #15
 8001df4:	3201      	adds	r2, #1
 8001df6:	2303      	movs	r3, #3
 8001df8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f7ff fc8e 	bl	8001720 <_Unwind_VRS_Pop>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	f43f aee8 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001e0a:	e70e      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7ff feb1 	bl	8001b74 <next_unwind_byte>
 8001e12:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001e16:	f000 030f 	and.w	r3, r0, #15
 8001e1a:	3210      	adds	r2, #16
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001e22:	e722      	b.n	8001c6a <__gnu_unwind_execute+0x9e>
 8001e24:	ac03      	add	r4, sp, #12
 8001e26:	4643      	mov	r3, r8
 8001e28:	4641      	mov	r1, r8
 8001e2a:	220e      	movs	r2, #14
 8001e2c:	9400      	str	r4, [sp, #0]
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff fa98 	bl	8001364 <_Unwind_VRS_Get>
 8001e34:	9400      	str	r4, [sp, #0]
 8001e36:	4643      	mov	r3, r8
 8001e38:	220f      	movs	r2, #15
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	f7ff fab7 	bl	80013b0 <_Unwind_VRS_Set>
 8001e42:	e7ae      	b.n	8001da2 <__gnu_unwind_execute+0x1d6>
 8001e44:	2300      	movs	r3, #0
 8001e46:	f10d 090c 	add.w	r9, sp, #12
 8001e4a:	220d      	movs	r2, #13
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	4630      	mov	r0, r6
 8001e54:	f7ff fa86 	bl	8001364 <_Unwind_VRS_Get>
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f7ff fe8b 	bl	8001b74 <next_unwind_byte>
 8001e5e:	0602      	lsls	r2, r0, #24
 8001e60:	9c03      	ldr	r4, [sp, #12]
 8001e62:	f04f 0702 	mov.w	r7, #2
 8001e66:	d50b      	bpl.n	8001e80 <__gnu_unwind_execute+0x2b4>
 8001e68:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e6c:	40b8      	lsls	r0, r7
 8001e6e:	4404      	add	r4, r0
 8001e70:	4628      	mov	r0, r5
 8001e72:	9403      	str	r4, [sp, #12]
 8001e74:	f7ff fe7e 	bl	8001b74 <next_unwind_byte>
 8001e78:	0603      	lsls	r3, r0, #24
 8001e7a:	f107 0707 	add.w	r7, r7, #7
 8001e7e:	d4f3      	bmi.n	8001e68 <__gnu_unwind_execute+0x29c>
 8001e80:	fa00 f207 	lsl.w	r2, r0, r7
 8001e84:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e88:	4422      	add	r2, r4
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9203      	str	r2, [sp, #12]
 8001e8e:	f8cd 9000 	str.w	r9, [sp]
 8001e92:	220d      	movs	r2, #13
 8001e94:	4619      	mov	r1, r3
 8001e96:	4630      	mov	r0, r6
 8001e98:	f7ff fa8a 	bl	80013b0 <_Unwind_VRS_Set>
 8001e9c:	e69d      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001e9e:	bf00      	nop

08001ea0 <__gnu_unwind_frame>:
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001ea4:	6853      	ldr	r3, [r2, #4]
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	f04f 0c03 	mov.w	ip, #3
 8001eac:	3208      	adds	r2, #8
 8001eae:	021c      	lsls	r4, r3, #8
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	0e1b      	lsrs	r3, r3, #24
 8001eb4:	a901      	add	r1, sp, #4
 8001eb6:	9401      	str	r4, [sp, #4]
 8001eb8:	9202      	str	r2, [sp, #8]
 8001eba:	f88d c00c 	strb.w	ip, [sp, #12]
 8001ebe:	f88d 300d 	strb.w	r3, [sp, #13]
 8001ec2:	f7ff fe83 	bl	8001bcc <__gnu_unwind_execute>
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop

08001ecc <_Unwind_GetRegionStart>:
 8001ecc:	b508      	push	{r3, lr}
 8001ece:	f7ff fe7b 	bl	8001bc8 <unwind_UCB_from_context>
 8001ed2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001ed4:	bd08      	pop	{r3, pc}
 8001ed6:	bf00      	nop

08001ed8 <_Unwind_GetLanguageSpecificData>:
 8001ed8:	b508      	push	{r3, lr}
 8001eda:	f7ff fe75 	bl	8001bc8 <unwind_UCB_from_context>
 8001ede:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ee0:	79c3      	ldrb	r3, [r0, #7]
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ee8:	bd08      	pop	{r3, pc}
 8001eea:	bf00      	nop

08001eec <__aeabi_idiv0>:
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f0e:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001f10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f12:	2201      	movs	r2, #1
 8001f14:	4619      	mov	r1, r3
 8001f16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f18:	f00c fdd0 	bl	800eabc <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001f1c:	4b53      	ldr	r3, [pc, #332]	@ (800206c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x17c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d126      	bne.n	8001f72 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f24:	2008      	movs	r0, #8
 8001f26:	f010 fed1 	bl	8012ccc <_Znaj>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e018      	b.n	8001f6a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f38:	206c      	movs	r0, #108	@ 0x6c
 8001f3a:	f010 feb6 	bl	8012caa <_Znwj>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461c      	mov	r4, r3
 8001f42:	2501      	movs	r5, #1
 8001f44:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 fd16 	bl	8002984 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	dde3      	ble.n	8001f38 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f70:	e054      	b.n	800201c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f72:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x180>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d126      	bne.n	8001fc8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f7a:	2008      	movs	r0, #8
 8001f7c:	f010 fea6 	bl	8012ccc <_Znaj>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	e018      	b.n	8001fc0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f8e:	206c      	movs	r0, #108	@ 0x6c
 8001f90:	f010 fe8b 	bl	8012caa <_Znwj>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461c      	mov	r4, r3
 8001f98:	2501      	movs	r5, #1
 8001f9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f000 fd5d 	bl	8002a68 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	dde3      	ble.n	8001f8e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001fc6:	e029      	b.n	800201c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d125      	bne.n	800201c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12c>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001fd0:	2008      	movs	r0, #8
 8001fd2:	f010 fe7b 	bl	8012ccc <_Znaj>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e018      	b.n	8002016 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fe4:	206c      	movs	r0, #108	@ 0x6c
 8001fe6:	f010 fe60 	bl	8012caa <_Znwj>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461c      	mov	r4, r3
 8001fee:	2501      	movs	r5, #1
 8001ff0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ffe:	4620      	mov	r0, r4
 8002000:	f000 fda4 	bl	8002b4c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b01      	cmp	r3, #1
 800201a:	dde3      	ble.n	8001fe4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f825 	bl	8002078 <_ZNK14XNucleoIHM02A14initEv>
	        /*Do nothing*/
	    	//throw std::runtime_error("init failed");
	    }
	}
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	e017      	b.n	8002062 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x172>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002032:	2d00      	cmp	r5, #0
 8002034:	d003      	beq.n	800203e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14e>
 8002036:	216c      	movs	r1, #108	@ 0x6c
 8002038:	4620      	mov	r0, r4
 800203a:	f010 fadb 	bl	80125f4 <_ZdlPvj>
 800203e:	f010 fadb 	bl	80125f8 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002042:	2d00      	cmp	r5, #0
 8002044:	d003      	beq.n	800204e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x15e>
 8002046:	216c      	movs	r1, #108	@ 0x6c
 8002048:	4620      	mov	r0, r4
 800204a:	f010 fad3 	bl	80125f4 <_ZdlPvj>
 800204e:	f010 fad3 	bl	80125f8 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002052:	2d00      	cmp	r5, #0
 8002054:	d003      	beq.n	800205e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x16e>
 8002056:	216c      	movs	r1, #108	@ 0x6c
 8002058:	4620      	mov	r0, r4
 800205a:	f010 facb 	bl	80125f4 <_ZdlPvj>
 800205e:	f010 facb 	bl	80125f8 <__cxa_end_cleanup>
	}
 8002062:	4618      	mov	r0, r3
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bdb0      	pop	{r4, r5, r7, pc}
 800206a:	bf00      	nop
 800206c:	200002b0 	.word	0x200002b0
 8002070:	200002b1 	.word	0x200002b1
 8002074:	200002b2 	.word	0x200002b2

08002078 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6998      	ldr	r0, [r3, #24]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8b9b      	ldrh	r3, [r3, #28]
 8002088:	2200      	movs	r2, #0
 800208a:	4619      	mov	r1, r3
 800208c:	f00c fd16 	bl	800eabc <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 8002090:	2001      	movs	r0, #1
 8002092:	f00c f9b7 	bl	800e404 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6998      	ldr	r0, [r3, #24]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8b9b      	ldrh	r3, [r3, #28]
 800209e:	2201      	movs	r2, #1
 80020a0:	4619      	mov	r1, r3
 80020a2:	f00c fd0b 	bl	800eabc <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f00c f9ac 	bl	800e404 <HAL_Delay>



        return init_all_motor_drivers();
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f892 	bl	80021d6 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 80020b2:	4603      	mov	r3, r0
    }
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
    }
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 80020d4:	b5b0      	push	{r4, r5, r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e040      	b.n	8002164 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4608      	mov	r0, r1
 8002104:	4798      	blx	r3
 8002106:	4603      	mov	r3, r0
 8002108:	2b09      	cmp	r3, #9
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d023      	beq.n	800215e <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	681d      	ldr	r5, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	33cc      	adds	r3, #204	@ 0xcc
 8002132:	681c      	ldr	r4, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3314      	adds	r3, #20
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4608      	mov	r0, r1
 8002154:	4798      	blx	r3
 8002156:	4603      	mov	r3, r0
 8002158:	4619      	mov	r1, r3
 800215a:	4628      	mov	r0, r5
 800215c:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b01      	cmp	r3, #1
 8002168:	ddbb      	ble.n	80020e2 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4610      	mov	r0, r2
 8002180:	4798      	blx	r3
 8002182:	4603      	mov	r3, r0
 8002184:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e01b      	b.n	80021c4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68f9      	ldr	r1, [r7, #12]
 80021ae:	4798      	blx	r3
 80021b0:	4603      	mov	r3, r0
 80021b2:	4619      	mov	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	3204      	adds	r2, #4
 80021ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	3301      	adds	r3, #1
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	dde0      	ble.n	800218c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3310      	adds	r3, #16
    }
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdb0      	pop	{r4, r5, r7, pc}

080021d6 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e022      	b.n	800222a <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3308      	adds	r3, #8
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	3102      	adds	r1, #2
 8002208:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800220c:	4611      	mov	r1, r2
 800220e:	4798      	blx	r3
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 8002220:	2300      	movs	r3, #0
 8002222:	e006      	b.n	8002232 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3301      	adds	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	ddd9      	ble.n	80021e4 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 8002230:	2301      	movs	r3, #1

    }
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af04      	add	r7, sp, #16
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a44      	ldr	r2, [pc, #272]	@ (8002360 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 800224e:	3318      	adds	r3, #24
 8002250:	4611      	mov	r1, r2
 8002252:	22b0      	movs	r2, #176	@ 0xb0
 8002254:	4618      	mov	r0, r3
 8002256:	f012 ff5c 	bl	8015112 <memcpy>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4a40      	ldr	r2, [pc, #256]	@ (8002360 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 800225e:	33c8      	adds	r3, #200	@ 0xc8
 8002260:	4611      	mov	r1, r2
 8002262:	22b0      	movs	r2, #176	@ 0xb0
 8002264:	4618      	mov	r0, r3
 8002266:	f012 ff54 	bl	8015112 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002276:	605a      	str	r2, [r3, #4]

    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002278:	2020      	movs	r0, #32
 800227a:	f010 fd16 	bl	8012caa <_Znwj>
 800227e:	4603      	mov	r3, r0
 8002280:	461c      	mov	r4, r3
 8002282:	2501      	movs	r5, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f103 0118 	add.w	r1, r3, #24
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8002290:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002292:	9303      	str	r3, [sp, #12]
 8002294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002296:	9302      	str	r3, [sp, #8]
 8002298:	887b      	ldrh	r3, [r7, #2]
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fe24 	bl	8001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	609c      	str	r4, [r3, #8]
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 80022ac:	2020      	movs	r0, #32
 80022ae:	f010 fcfc 	bl	8012caa <_Znwj>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461c      	mov	r4, r3
 80022b6:	2501      	movs	r5, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f103 0118 	add.w	r1, r3, #24
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80022c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80022c6:	9303      	str	r3, [sp, #12]
 80022c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4620      	mov	r0, r4
 80022d8:	f7ff fe0a 	bl	8001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	60dc      	str	r4, [r3, #12]
    abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fee9 	bl	80020bc <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022ea:	6178      	str	r0, [r7, #20]
    abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fee3 	bl	80020bc <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022f6:	6138      	str	r0, [r7, #16]
    moteurs = new abstractL6470*[NMOTEURS];
 80022f8:	2010      	movs	r0, #16
 80022fa:	f010 fce7 	bl	8012ccc <_Znaj>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	611a      	str	r2, [r3, #16]

	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		moteurs[front_left] = moteurs_shield_1[left];
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	601a      	str	r2, [r3, #0]
		moteurs[front_right] = moteurs_shield_1[right];
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	3304      	adds	r3, #4
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	6852      	ldr	r2, [r2, #4]
 800231a:	601a      	str	r2, [r3, #0]
		moteurs[back_left] = moteurs_shield_2[left];
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	3308      	adds	r3, #8
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_2[right];
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	330c      	adds	r3, #12
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	6852      	ldr	r2, [r2, #4]
 8002332:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_1[right];
	#endif



}
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	e00f      	b.n	8002358 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x11c>
    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002338:	2d00      	cmp	r5, #0
 800233a:	d003      	beq.n	8002344 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x108>
 800233c:	2120      	movs	r1, #32
 800233e:	4620      	mov	r0, r4
 8002340:	f010 f958 	bl	80125f4 <_ZdlPvj>
 8002344:	f010 f958 	bl	80125f8 <__cxa_end_cleanup>
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002348:	2d00      	cmp	r5, #0
 800234a:	d003      	beq.n	8002354 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>
 800234c:	2120      	movs	r1, #32
 800234e:	4620      	mov	r0, r4
 8002350:	f010 f950 	bl	80125f4 <_ZdlPvj>
 8002354:	f010 f950 	bl	80125f8 <__cxa_end_cleanup>
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bdb0      	pop	{r4, r5, r7, pc}
 8002360:	08016c58 	.word	0x08016c58

08002364 <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 8002370:	edd7 7a00 	vldr	s15, [r7]
 8002374:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002390 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 8002378:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800237c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002380:	eeb0 0a67 	vmov.f32	s0, s15
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	3d00adfd 	.word	0x3d00adfd

08002394 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b094      	sub	sp, #80	@ 0x50
 8002398:	af00      	add	r7, sp, #0
 800239a:	6178      	str	r0, [r7, #20]
 800239c:	ed87 0a04 	vstr	s0, [r7, #16]
 80023a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80023a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80023a8:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 80023ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	f107 0210 	add.w	r2, r7, #16
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fc37 	bl	8002c30 <_ZSt3minIfERKT_S2_S2_>
 80023c2:	4603      	mov	r3, r0
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 80023c8:	4b7f      	ldr	r3, [pc, #508]	@ (80025c8 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	f107 0210 	add.w	r2, r7, #16
 80023d0:	f107 0320 	add.w	r3, r7, #32
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fc43 	bl	8002c62 <_ZSt3maxIfERKT_S2_S2_>
 80023dc:	4603      	mov	r3, r0
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 80023e2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e8:	f107 020c 	add.w	r2, r7, #12
 80023ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fc1c 	bl	8002c30 <_ZSt3minIfERKT_S2_S2_>
 80023f8:	4603      	mov	r3, r0
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 80023fe:	4b72      	ldr	r3, [pc, #456]	@ (80025c8 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002402:	f107 020c 	add.w	r2, r7, #12
 8002406:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fc28 	bl	8002c62 <_ZSt3maxIfERKT_S2_S2_>
 8002412:	4603      	mov	r3, r0
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 8002418:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800241e:	f107 0208 	add.w	r2, r7, #8
 8002422:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fc01 	bl	8002c30 <_ZSt3minIfERKT_S2_S2_>
 800242e:	4603      	mov	r3, r0
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 8002434:	4b64      	ldr	r3, [pc, #400]	@ (80025c8 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002436:	633b      	str	r3, [r7, #48]	@ 0x30
 8002438:	f107 0208 	add.w	r2, r7, #8
 800243c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fc0d 	bl	8002c62 <_ZSt3maxIfERKT_S2_S2_>
 8002448:	4603      	mov	r3, r0
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 800244e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002452:	637b      	str	r3, [r7, #52]	@ 0x34
 8002454:	1d3a      	adds	r2, r7, #4
 8002456:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fbe7 	bl	8002c30 <_ZSt3minIfERKT_S2_S2_>
 8002462:	4603      	mov	r3, r0
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 8002468:	4b57      	ldr	r3, [pc, #348]	@ (80025c8 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 800246a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800246c:	1d3a      	adds	r2, r7, #4
 800246e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fbf4 	bl	8002c62 <_ZSt3maxIfERKT_S2_S2_>
 800247a:	4603      	mov	r3, r0
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002480:	edd7 7a04 	vldr	s15, [r7, #16]
 8002484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	db01      	blt.n	8002492 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0xfe>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x100>
 8002492:	2300      	movs	r3, #0
 8002494:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 8002498:	edd7 7a03 	vldr	s15, [r7, #12]
 800249c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	bfac      	ite	ge
 80024a6:	2301      	movge	r3, #1
 80024a8:	2300      	movlt	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	db01      	blt.n	80024c8 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x134>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x136>
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 80024ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024da:	bfac      	ite	ge
 80024dc:	2301      	movge	r3, #1
 80024de:	2300      	movlt	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c


    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 80024ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80024f0:	eeb0 7ae7 	vabs.f32	s14, s15
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002508:	ee17 3a90 	vmov	r3, s15
 800250c:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 800250e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002512:	eeb0 7ae7 	vabs.f32	s14, s15
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252a:	ee17 3a90 	vmov	r3, s15
 800252e:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 8002530:	edd7 7a02 	vldr	s15, [r7, #8]
 8002534:	eeb0 7ae7 	vabs.f32	s14, s15
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	ee07 3a90 	vmov	s15, r3
 8002540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254c:	ee17 3a90 	vmov	r3, s15
 8002550:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 8002552:	edd7 7a01 	vldr	s15, [r7, #4]
 8002556:	eeb0 7ae7 	vabs.f32	s14, s15
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256e:	ee17 3a90 	vmov	r3, s15
 8002572:	63fb      	str	r3, [r7, #60]	@ 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 8002574:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002578:	2300      	movs	r3, #0
 800257a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800257c:	6978      	ldr	r0, [r7, #20]
 800257e:	f000 f825 	bl	80025cc <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 8002582:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002586:	2301      	movs	r3, #1
 8002588:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f000 f81e 	bl	80025cc <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 8002590:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002594:	2302      	movs	r3, #2
 8002596:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002598:	6978      	ldr	r0, [r7, #20]
 800259a:	f000 f817 	bl	80025cc <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 800259e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80025a2:	2303      	movs	r3, #3
 80025a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f000 f810 	bl	80025cc <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd8f 	bl	80020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fd8a 	bl	80020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 80025c0:	bf00      	nop
 80025c2:	3750      	adds	r7, #80	@ 0x50
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	bf800000 	.word	0xbf800000

080025cc <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	460b      	mov	r3, r1
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	4613      	mov	r3, r2
 80025e0:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	f083 0301 	eor.w	r3, r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	79bb      	ldrb	r3, [r7, #6]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	33fc      	adds	r3, #252	@ 0xfc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	79f9      	ldrb	r1, [r7, #7]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 8002614:	e011      	b.n	800263a <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	79bb      	ldrb	r3, [r7, #6]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4608      	mov	r0, r1
 8002638:	4798      	blx	r3
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>:
  * @param  vitesse_absolue_FR vitesse du moteur Avant droit
  * @param  vitesse_absolue_BL vitesse du moteur Arriere gauche
  * @param  vitesse_absolue_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_absolues(float vitesse_absolue_FL, float vitesse_absolue_FR, float vitesse_absolue_BL, float vitesse_absolue_BR )
{
 8002642:	b580      	push	{r7, lr}
 8002644:	ed2d 8b04 	vpush	{d8-d9}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	6178      	str	r0, [r7, #20]
 800264e:	ed87 0a04 	vstr	s0, [r7, #16]
 8002652:	edc7 0a03 	vstr	s1, [r7, #12]
 8002656:	ed87 1a02 	vstr	s2, [r7, #8]
 800265a:	edc7 1a01 	vstr	s3, [r7, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800265e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff fe7e 	bl	8002364 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002668:	eeb0 7a40 	vmov.f32	s14, s0
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002678:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800267c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002680:	6978      	ldr	r0, [r7, #20]
 8002682:	f7ff fe6f 	bl	8002364 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002686:	eeb0 7a40 	vmov.f32	s14, s0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002696:	eec7 8a27 	vdiv.f32	s17, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 800269a:	ed97 0a02 	vldr	s0, [r7, #8]
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff fe60 	bl	8002364 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026a4:	eeb0 7a40 	vmov.f32	s14, s0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b4:	ee87 9a27 	vdiv.f32	s18, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 80026b8:	ed97 0a01 	vldr	s0, [r7, #4]
 80026bc:	6978      	ldr	r0, [r7, #20]
 80026be:	f7ff fe51 	bl	8002364 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026c2:	eef0 6a40 	vmov.f32	s13, s0
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d6:	eef0 1a47 	vmov.f32	s3, s14
 80026da:	eeb0 1a49 	vmov.f32	s2, s18
 80026de:	eef0 0a68 	vmov.f32	s1, s17
 80026e2:	eeb0 0a48 	vmov.f32	s0, s16
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff fe54 	bl	8002394 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>

}
 80026ec:	bf00      	nop
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	ecbd 8b04 	vpop	{d8-d9}
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_ZN11BlocMoteurs19commande_step_indivEjN12StepperMotor11direction_tEjS1_jS1_jS1_>:
  * @param  dir_FR direction du moteur avant droite, FWD:sens trigo BWD: sens horaire
  * @param  dir_BL direction du moteur arriere gauche, FWD:sens trigo BWD: sens horaire
  * @param  dir_BR direction du moteur arriere droite, FWD:sens trigo BWD: sens horaire
  */
void BlocMoteurs::commande_step_indiv(unsigned int number_of_step_FL, direction_t dir_FL ,unsigned int number_of_step_FR, direction_t dir_FR,unsigned int number_of_step_BL,  direction_t dir_BL,unsigned int number_of_step_BR, direction_t dir_BR)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	71fb      	strb	r3, [r7, #7]
	set_step_moteur(number_of_step_FL, dir_FL, id_moteurs::front_left);
 8002708:	79fa      	ldrb	r2, [r7, #7]
 800270a:	2300      	movs	r3, #0
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f822 	bl	8002758 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_FR, dir_FR, id_moteurs::front_right);
 8002714:	7e3a      	ldrb	r2, [r7, #24]
 8002716:	2301      	movs	r3, #1
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f81c 	bl	8002758 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_BL, dir_BL, id_moteurs::back_left);
 8002720:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002724:	2302      	movs	r3, #2
 8002726:	69f9      	ldr	r1, [r7, #28]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f815 	bl	8002758 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_BR, dir_BR, id_moteurs::back_right);
 800272e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002732:	2303      	movs	r3, #3
 8002734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f80e 	bl	8002758 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fcc7 	bl	80020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fcc2 	bl	80020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param step , nombre de step
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_step_moteur(unsigned int steps, StepperMotor::direction_t dir, id_moteurs id)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	460b      	mov	r3, r1
 8002768:	71fb      	strb	r3, [r7, #7]
 800276a:	4613      	mov	r3, r2
 800276c:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f083 0301 	eor.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4c>
    {
        moteurs[id]->prepare_move(dir, steps);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	79bb      	ldrb	r3, [r7, #6]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	79f9      	ldrb	r1, [r7, #7]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 80027a2:	e011      	b.n	80027c8 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x70>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4608      	mov	r0, r1
 80027c6:	4798      	blx	r3
}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    initShield1[1].step_sel = step_mode;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    initShield2[0].step_sel = step_mode;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    initShield2[0].step_sel = step_mode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    bool return_value = true;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	e01c      	b.n	8002840 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3354      	adds	r3, #84	@ 0x54
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	4611      	mov	r1, r2
 8002828:	4798      	blx	r3
 800282a:	4603      	mov	r3, r0
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3301      	adds	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b03      	cmp	r3, #3
 8002844:	dddf      	ble.n	8002806 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 8002846:	7bfb      	ldrb	r3, [r7, #15]

}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <_ZN11BlocMoteurs16motors_stop_hardEv>:
  * Le passage a la vitesse a zero ne respecte pas les parametre de deceleration maximale du robot
  * et se realise au mieux des capacites du driver
  * (contrairement a la methode motors_stop_soft)
  */
void BlocMoteurs::motors_stop_hard()
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e014      	b.n	80028a2 <_ZN11BlocMoteurs16motors_stop_hardEv+0x38>
	{
		moteurs[i]->prepare_hard_stop();
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4608      	mov	r0, r1
 800289a:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	dde7      	ble.n	8002878 <_ZN11BlocMoteurs16motors_stop_hardEv+0xe>
	}
    shield_1->perform_prepared_actions();
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fc11 	bl	80020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fc0c 	bl	80020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_ZN11BlocMoteurs21set_max_speed_moteursEf>:
  * @brief  Set la vitesse maximale des moteurs
  *
  * @param  radian_par_seconde la valeur maximale de vitesse angulaire en rad/s
  */
void BlocMoteurs::set_max_speed_moteurs(float radian_par_seconde)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	ed87 0a00 	vstr	s0, [r7]
	unsigned int pps = rad_to_step(radian_par_seconde);
 80028d6:	ed97 0a00 	vldr	s0, [r7]
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fd42 	bl	8002364 <_ZN11BlocMoteurs11rad_to_stepEf>
 80028e0:	eef0 7a40 	vmov.f32	s15, s0
 80028e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e8:	ee17 3a90 	vmov	r3, s15
 80028ec:	60bb      	str	r3, [r7, #8]
	for( int i = 0; i < NMOTEURS; i ++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e013      	b.n	800291c <_ZN11BlocMoteurs21set_max_speed_moteursEf+0x52>
	{
		moteurs[i]->prepare_set_max_speed(pps);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	33d4      	adds	r3, #212	@ 0xd4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3301      	adds	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b03      	cmp	r3, #3
 8002920:	dde8      	ble.n	80028f4 <_ZN11BlocMoteurs21set_max_speed_moteursEf+0x2a>
	}
    shield_1->perform_prepared_actions();
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fbd4 	bl	80020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fbcf 	bl	80020d4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
	initShield1[0].maxspeed = pps;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	initShield1[1].maxspeed = pps;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	initShield2[0].maxspeed = pps;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
	initShield2[1].maxspeed = pps;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
	max_vitesse = pps;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	605a      	str	r2, [r3, #4]
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	80fb      	strh	r3, [r7, #6]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4618      	mov	r0, r3
 8002998:	f00a fa74 	bl	800ce84 <_ZN13abstractL6470C1Ev>
 800299c:	4a27      	ldr	r2, [pc, #156]	@ (8002a3c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	819a      	strh	r2, [r3, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	611a      	str	r2, [r3, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8b3a      	ldrh	r2, [r7, #24]
 80029b8:	829a      	strh	r2, [r3, #20]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80029d0:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		//throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a44 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80029d6:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a1b      	ldr	r2, [pc, #108]	@ (8002a48 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a4c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80029e2:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a50 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80029e8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 80029fc:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	b2d1      	uxtb	r1, r2
 8002a04:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a06:	7011      	strb	r1, [r2, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002a12:	2220      	movs	r2, #32
 8002a14:	2100      	movs	r1, #0
 8002a16:	4811      	ldr	r0, [pc, #68]	@ (8002a5c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002a18:	f012 faa7 	bl	8014f6a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	2100      	movs	r1, #0
 8002a20:	480f      	ldr	r0, [pc, #60]	@ (8002a60 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002a22:	f012 faa2 	bl	8014f6a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002a26:	2208      	movs	r2, #8
 8002a28:	2100      	movs	r1, #0
 8002a2a:	480e      	ldr	r0, [pc, #56]	@ (8002a64 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002a2c:	f012 fa9d 	bl	8014f6a <memset>
    }
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	080171e8 	.word	0x080171e8
 8002a40:	200002b0 	.word	0x200002b0
 8002a44:	080174ac 	.word	0x080174ac
 8002a48:	080176a0 	.word	0x080176a0
 8002a4c:	080177ac 	.word	0x080177ac
 8002a50:	080177c0 	.word	0x080177c0
 8002a54:	20000214 	.word	0x20000214
 8002a58:	20000215 	.word	0x20000215
 8002a5c:	20000218 	.word	0x20000218
 8002a60:	20000238 	.word	0x20000238
 8002a64:	20000240 	.word	0x20000240

08002a68 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	80fb      	strh	r3, [r7, #6]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00a fa02 	bl	800ce84 <_ZN13abstractL6470C1Ev>
 8002a80:	4a27      	ldr	r2, [pc, #156]	@ (8002b20 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	819a      	strh	r2, [r3, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	611a      	str	r2, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8b3a      	ldrh	r2, [r7, #24]
 8002a9c:	829a      	strh	r2, [r3, #20]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002ab4:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002aba:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002ac0:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002ac6:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002acc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002ae0:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	b2d1      	uxtb	r1, r2
 8002ae8:	4a13      	ldr	r2, [pc, #76]	@ (8002b38 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002aea:	7011      	strb	r1, [r2, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002af0:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002af6:	2220      	movs	r2, #32
 8002af8:	2100      	movs	r1, #0
 8002afa:	4811      	ldr	r0, [pc, #68]	@ (8002b40 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002afc:	f012 fa35 	bl	8014f6a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b00:	2208      	movs	r2, #8
 8002b02:	2100      	movs	r1, #0
 8002b04:	480f      	ldr	r0, [pc, #60]	@ (8002b44 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002b06:	f012 fa30 	bl	8014f6a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	480e      	ldr	r0, [pc, #56]	@ (8002b48 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002b10:	f012 fa2b 	bl	8014f6a <memset>
    }
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	08016f7c 	.word	0x08016f7c
 8002b24:	200002b1 	.word	0x200002b1
 8002b28:	080177cc 	.word	0x080177cc
 8002b2c:	080179c0 	.word	0x080179c0
 8002b30:	08017acc 	.word	0x08017acc
 8002b34:	08017ae0 	.word	0x08017ae0
 8002b38:	20000248 	.word	0x20000248
 8002b3c:	20000249 	.word	0x20000249
 8002b40:	2000024c 	.word	0x2000024c
 8002b44:	2000026c 	.word	0x2000026c
 8002b48:	20000274 	.word	0x20000274

08002b4c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80fb      	strh	r3, [r7, #6]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00a f990 	bl	800ce84 <_ZN13abstractL6470C1Ev>
 8002b64:	4a27      	ldr	r2, [pc, #156]	@ (8002c04 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	819a      	strh	r2, [r3, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	611a      	str	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8b3a      	ldrh	r2, [r7, #24]
 8002b80:	829a      	strh	r2, [r3, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b1c      	ldr	r3, [pc, #112]	@ (8002c08 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002b98:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c0c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002b9e:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8002c14 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a1a      	ldr	r2, [pc, #104]	@ (8002c18 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002bc4:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	b2d1      	uxtb	r1, r2
 8002bcc:	4a13      	ldr	r2, [pc, #76]	@ (8002c1c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002bce:	7011      	strb	r1, [r2, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002bda:	2220      	movs	r2, #32
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4811      	ldr	r0, [pc, #68]	@ (8002c24 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002be0:	f012 f9c3 	bl	8014f6a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002be4:	2208      	movs	r2, #8
 8002be6:	2100      	movs	r1, #0
 8002be8:	480f      	ldr	r0, [pc, #60]	@ (8002c28 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002bea:	f012 f9be 	bl	8014f6a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002bee:	2208      	movs	r2, #8
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	480e      	ldr	r0, [pc, #56]	@ (8002c2c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002bf4:	f012 f9b9 	bl	8014f6a <memset>
    }
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	08016d10 	.word	0x08016d10
 8002c08:	200002b2 	.word	0x200002b2
 8002c0c:	08017aec 	.word	0x08017aec
 8002c10:	08017ce0 	.word	0x08017ce0
 8002c14:	08017dec 	.word	0x08017dec
 8002c18:	08017e00 	.word	0x08017e00
 8002c1c:	2000027c 	.word	0x2000027c
 8002c20:	2000027d 	.word	0x2000027d
 8002c24:	20000280 	.word	0x20000280
 8002c28:	200002a0 	.word	0x200002a0
 8002c2c:	200002a8 	.word	0x200002a8

08002c30 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	d501      	bpl.n	8002c54 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	e000      	b.n	8002c56 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002c54:	687b      	ldr	r3, [r7, #4]
    }
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	ed93 7a00 	vldr	s14, [r3]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d501      	bpl.n	8002c86 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	e000      	b.n	8002c88 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002c86:	687b      	ldr	r3, [r7, #4]
    }
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f00a f8fd 	bl	800cea4 <_ZN13abstractL6470D1Ev>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	08016d10 	.word	0x08016d10

08002cb8 <_ZN5L6470I8shield_3ED0Ev>:
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ffe7 	bl	8002c94 <_ZN5L6470I8shield_3ED1Ev>
 8002cc6:	216c      	movs	r1, #108	@ 0x6c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f00f fc93 	bl	80125f4 <_ZdlPvj>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_ZN5L6470I8shield_2ED1Ev>:
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f00a f8db 	bl	800cea4 <_ZN13abstractL6470D1Ev>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	08016f7c 	.word	0x08016f7c

08002cfc <_ZN5L6470I8shield_2ED0Ev>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ffe7 	bl	8002cd8 <_ZN5L6470I8shield_2ED1Ev>
 8002d0a:	216c      	movs	r1, #108	@ 0x6c
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f00f fc71 	bl	80125f4 <_ZdlPvj>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_ZN5L6470I8shield_1ED1Ev>:
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f00a f8b9 	bl	800cea4 <_ZN13abstractL6470D1Ev>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	080171e8 	.word	0x080171e8

08002d40 <_ZN5L6470I8shield_1ED0Ev>:
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ffe7 	bl	8002d1c <_ZN5L6470I8shield_1ED1Ev>
 8002d4e:	216c      	movs	r1, #108	@ 0x6c
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f00f fc4f 	bl	80125f4 <_ZdlPvj>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
 8002d7a:	4603      	mov	r3, r0
    }
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
 8002d9a:	4603      	mov	r3, r0
    }
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
 8002dc2:	4603      	mov	r3, r0
    }
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002ddc:	681c      	ldr	r4, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	4798      	blx	r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	47a0      	blx	r4
 8002df6:	4603      	mov	r3, r0
    }
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}

08002e00 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002e10:	681c      	ldr	r4, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	47a0      	blx	r4
 8002e2a:	4603      	mov	r3, r0
    }
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd90      	pop	{r4, r7, pc}

08002e34 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002e34:	b5b0      	push	{r4, r5, r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e44:	681c      	ldr	r4, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002e4e:	681d      	ldr	r5, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
 8002e60:	4603      	mov	r3, r0
 8002e62:	4619      	mov	r1, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	47a8      	blx	r5
 8002e68:	eef0 7a40 	vmov.f32	s15, s0
 8002e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	47a0      	blx	r4
 8002e74:	4603      	mov	r3, r0
    }
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bdb0      	pop	{r4, r5, r7, pc}

08002e7e <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002e7e:	b5b0      	push	{r4, r5, r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e8e:	681c      	ldr	r4, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e98:	681d      	ldr	r5, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2106      	movs	r1, #6
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	47a8      	blx	r5
 8002eb4:	eef0 7a40 	vmov.f32	s15, s0
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	47a0      	blx	r4
 8002ec0:	4603      	mov	r3, r0
    }
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bdb0      	pop	{r4, r5, r7, pc}

08002eca <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002eca:	b5b0      	push	{r4, r5, r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eda:	681c      	ldr	r4, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002ee4:	681d      	ldr	r5, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2107      	movs	r1, #7
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	47a8      	blx	r5
 8002f00:	eef0 7a40 	vmov.f32	s15, s0
 8002f04:	eeb0 0a67 	vmov.f32	s0, s15
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	47a0      	blx	r4
 8002f0c:	4603      	mov	r3, r0
    }
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}

08002f16 <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002f16:	b5b0      	push	{r4, r5, r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f30:	681d      	ldr	r5, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	47a8      	blx	r5
 8002f4c:	eef0 7a40 	vmov.f32	s15, s0
 8002f50:	eeb0 0a67 	vmov.f32	s0, s15
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	47a0      	blx	r4
 8002f58:	4603      	mov	r3, r0
    }
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}

08002f62 <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002f62:	b5b0      	push	{r4, r5, r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f72:	681c      	ldr	r4, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002f7c:	681d      	ldr	r5, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2105      	movs	r1, #5
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	47a8      	blx	r5
 8002f98:	eef0 7a40 	vmov.f32	s15, s0
 8002f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	47a0      	blx	r4
 8002fa4:	4603      	mov	r3, r0
    }
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bdb0      	pop	{r4, r5, r7, pc}

08002fae <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2104      	movs	r1, #4
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002fd0:	2300      	movs	r3, #0
    }
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	b2d1      	uxtb	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	4798      	blx	r3
    }
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
    }
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003030:	681c      	ldr	r4, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2100      	movs	r1, #0
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	2102      	movs	r1, #2
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	47a0      	blx	r4
    }
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bd90      	pop	{r4, r7, pc}

08003054 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003066:	681c      	ldr	r4, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	2102      	movs	r1, #2
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	47a0      	blx	r4
    }
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}

0800308a <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800309c:	681c      	ldr	r4, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	ee07 2a90 	vmov	s15, r2
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	eeb0 0a67 	vmov.f32	s0, s15
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	2106      	movs	r1, #6
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	47a0      	blx	r4
        return true;
 80030c4:	2301      	movs	r3, #1
    }
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}

080030ce <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 80030ce:	b590      	push	{r4, r7, lr}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80030e0:	681c      	ldr	r4, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	ee07 2a90 	vmov	s15, r2
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eeb0 0a67 	vmov.f32	s0, s15
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	2107      	movs	r1, #7
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	47a0      	blx	r4
        return true;
 8003108:	2301      	movs	r3, #1
    }
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}

08003112 <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003124:	681c      	ldr	r4, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	ee07 2a90 	vmov	s15, r2
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eeb0 0a67 	vmov.f32	s0, s15
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	2104      	movs	r1, #4
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	47a0      	blx	r4
        return true;
 800314c:	2301      	movs	r3, #1
    }
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 8003156:	b590      	push	{r4, r7, lr}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003168:	681c      	ldr	r4, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	ee07 2a90 	vmov	s15, r2
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	2105      	movs	r1, #5
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	47a0      	blx	r4
        return true;
 8003190:	2301      	movs	r3, #1
    }
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bd90      	pop	{r4, r7, pc}

0800319a <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	2b07      	cmp	r3, #7
 80031aa:	d901      	bls.n	80031b0 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e00f      	b.n	80031d0 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3380      	adds	r3, #128	@ 0x80
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	2115      	movs	r1, #21
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
        return true;
 80031ce:	2301      	movs	r3, #1
    }
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80031ea:	681c      	ldr	r4, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
 80031fc:	4603      	mov	r3, r0
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	47a0      	blx	r4
    }
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}

0800320c <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 800320c:	b5b0      	push	{r4, r5, r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8003222:	681c      	ldr	r4, [r3, #0]
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 800322a:	2501      	movs	r5, #1
 800322c:	e000      	b.n	8003230 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 800322e:	2500      	movs	r5, #0
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	4798      	blx	r3
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	4629      	mov	r1, r5
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	47a0      	blx	r4
    }
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bdb0      	pop	{r4, r5, r7, pc}

08003252 <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
    }
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
    }
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 800328e:	b5b0      	push	{r4, r5, r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	72fb      	strb	r3, [r7, #11]
 800329c:	4613      	mov	r3, r2
 800329e:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80032a8:	681c      	ldr	r4, [r3, #0]
 80032aa:	7abb      	ldrb	r3, [r7, #10]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80032b0:	2501      	movs	r5, #1
 80032b2:	e000      	b.n	80032b6 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80032b4:	2500      	movs	r5, #0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	ee07 2a90 	vmov	s15, r2
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	eeb0 0a67 	vmov.f32	s0, s15
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	4798      	blx	r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	7af9      	ldrb	r1, [r7, #11]
 80032d6:	462a      	mov	r2, r5
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	47a0      	blx	r4
    }
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bdb0      	pop	{r4, r5, r7, pc}

080032e4 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80032f8:	681c      	ldr	r4, [r3, #0]
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8003300:	2501      	movs	r5, #1
 8003302:	e000      	b.n	8003306 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 8003304:	2500      	movs	r5, #0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2106      	movs	r1, #6
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	4629      	mov	r1, r5
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	47a0      	blx	r4
    }
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bdb0      	pop	{r4, r5, r7, pc}

08003328 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	460b      	mov	r3, r1
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800333e:	681c      	ldr	r4, [r3, #0]
 8003340:	7afb      	ldrb	r3, [r7, #11]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 8003346:	2501      	movs	r5, #1
 8003348:	e000      	b.n	800334c <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 800334a:	2500      	movs	r5, #0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	ee07 2a90 	vmov	s15, r2
 800335c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	4798      	blx	r3
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	4629      	mov	r1, r5
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	47a0      	blx	r4
    }
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bdb0      	pop	{r4, r5, r7, pc}

0800337a <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	460b      	mov	r3, r1
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	7afa      	ldrb	r2, [r7, #11]
 8003394:	2a01      	cmp	r2, #1
 8003396:	d101      	bne.n	800339c <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 8003398:	2101      	movs	r1, #1
 800339a:	e000      	b.n	800339e <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 800339c:	2100      	movs	r1, #0
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	4798      	blx	r3
    }
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
    }
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
    }
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
    }
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
    }
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 800342c:	bf00      	nop
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2101      	movs	r1, #1
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ef      	bne.n	800342e <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3380      	adds	r3, #128	@ 0x80
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	2a01      	cmp	r2, #1
 800347e:	d101      	bne.n	8003484 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8003480:	2201      	movs	r2, #1
 8003482:	e000      	b.n	8003486 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8003484:	2200      	movs	r2, #0
 8003486:	4611      	mov	r1, r2
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
    }
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
 80034a0:	4613      	mov	r3, r2
 80034a2:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	78ba      	ldrb	r2, [r7, #2]
 80034b0:	2a01      	cmp	r2, #1
 80034b2:	d101      	bne.n	80034b8 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80034b4:	2201      	movs	r2, #1
 80034b6:	e000      	b.n	80034ba <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80034b8:	2200      	movs	r2, #0
 80034ba:	78f9      	ldrb	r1, [r7, #3]
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
    }
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
    }
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	4611      	mov	r1, r2
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2100      	movs	r1, #0
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2102      	movs	r1, #2
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2103      	movs	r1, #3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2203      	movs	r2, #3
 80035a6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2106      	movs	r1, #6
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2107      	movs	r1, #7
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2205      	movs	r2, #5
 80035f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2104      	movs	r1, #4
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2206      	movs	r2, #6
 800361e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2105      	movs	r1, #5
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2207      	movs	r2, #7
 8003646:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003664:	4b09      	ldr	r3, [pc, #36]	@ (800368c <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4906      	ldr	r1, [pc, #24]	@ (8003690 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2208      	movs	r2, #8
 800367e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000027d 	.word	0x2000027d
 8003690:	20000280 	.word	0x20000280

08003694 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	b2d1      	uxtb	r1, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2200      	movs	r2, #0
 80036fe:	2102      	movs	r1, #2
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2209      	movs	r2, #9
 8003708:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003726:	681c      	ldr	r4, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6839      	ldr	r1, [r7, #0]
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	2102      	movs	r1, #2
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}

08003752 <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 8003752:	b590      	push	{r4, r7, lr}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003764:	681c      	ldr	r4, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	ee07 2a90 	vmov	s15, r2
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	eeb0 0a67 	vmov.f32	s0, s15
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	2103      	movs	r1, #3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}

0800379c <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037ae:	681c      	ldr	r4, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	ee07 2a90 	vmov	s15, r2
 80037c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c4:	eeb0 0a67 	vmov.f32	s0, s15
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	461a      	mov	r2, r3
 80037d0:	2106      	movs	r1, #6
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}

080037e6 <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 80037e6:	b590      	push	{r4, r7, lr}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037f8:	681c      	ldr	r4, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	ee07 2a90 	vmov	s15, r2
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eeb0 0a67 	vmov.f32	s0, s15
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	2107      	movs	r1, #7
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bd90      	pop	{r4, r7, pc}

08003830 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003842:	681c      	ldr	r4, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	ee07 2a90 	vmov	s15, r2
 8003854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003858:	eeb0 0a67 	vmov.f32	s0, s15
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	2104      	movs	r1, #4
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bd90      	pop	{r4, r7, pc}

0800387a <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800387a:	b590      	push	{r4, r7, lr}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800388c:	681c      	ldr	r4, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	ee07 2a90 	vmov	s15, r2
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	eeb0 0a67 	vmov.f32	s0, s15
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	2105      	movs	r1, #5
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}

080038c4 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80038d6:	681c      	ldr	r4, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6839      	ldr	r1, [r7, #0]
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd90      	pop	{r4, r7, pc}

08003900 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8003900:	b5b0      	push	{r4, r5, r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 800391e:	2501      	movs	r5, #1
 8003920:	e000      	b.n	8003924 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8003922:	2500      	movs	r5, #0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	4798      	blx	r3
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	4629      	mov	r1, r5
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bdb0      	pop	{r4, r5, r7, pc}

0800394e <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 800399a:	b5b0      	push	{r4, r5, r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	72fb      	strb	r3, [r7, #11]
 80039a8:	4613      	mov	r3, r2
 80039aa:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80039b4:	681c      	ldr	r4, [r3, #0]
 80039b6:	7abb      	ldrb	r3, [r7, #10]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80039bc:	2501      	movs	r5, #1
 80039be:	e000      	b.n	80039c2 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80039c0:	2500      	movs	r5, #0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	ee07 2a90 	vmov	s15, r2
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	eeb0 0a67 	vmov.f32	s0, s15
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	4798      	blx	r3
 80039de:	4603      	mov	r3, r0
 80039e0:	7af9      	ldrb	r1, [r7, #11]
 80039e2:	462a      	mov	r2, r5
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}

080039f8 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003a0c:	681c      	ldr	r4, [r3, #0]
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8003a14:	2501      	movs	r5, #1
 8003a16:	e000      	b.n	8003a1a <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8003a18:	2500      	movs	r5, #0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2106      	movs	r1, #6
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4629      	mov	r1, r5
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bdb0      	pop	{r4, r5, r7, pc}

08003a44 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8003a44:	b5b0      	push	{r4, r5, r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003a5a:	681c      	ldr	r4, [r3, #0]
 8003a5c:	7afb      	ldrb	r3, [r7, #11]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8003a62:	2501      	movs	r5, #1
 8003a64:	e000      	b.n	8003a68 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8003a66:	2500      	movs	r5, #0
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	ee07 2a90 	vmov	s15, r2
 8003a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	4798      	blx	r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	4629      	mov	r1, r5
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bdb0      	pop	{r4, r5, r7, pc}

08003a9e <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	7afa      	ldrb	r2, [r7, #11]
 8003ab8:	2a01      	cmp	r2, #1
 8003aba:	d101      	bne.n	8003ac0 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8003abc:	2101      	movs	r1, #1
 8003abe:	e000      	b.n	8003ac2 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	2a01      	cmp	r2, #1
 8003b8a:	d101      	bne.n	8003b90 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	e000      	b.n	8003b92 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003b90:	2200      	movs	r2, #0
 8003b92:	4611      	mov	r1, r2
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	78ba      	ldrb	r2, [r7, #2]
 8003bc4:	2a01      	cmp	r2, #1
 8003bc6:	d101      	bne.n	8003bcc <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003bc8:	2201      	movs	r2, #1
 8003bca:	e000      	b.n	8003bce <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	78f9      	ldrb	r1, [r7, #3]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
 8003c20:	4603      	mov	r3, r0
    }
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003c44:	b5b0      	push	{r4, r5, r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003c54:	3b01      	subs	r3, #1
 8003c56:	2b07      	cmp	r3, #7
 8003c58:	f200 80fe 	bhi.w	8003e58 <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c64 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c85 	.word	0x08003c85
 8003c68:	08003cb1 	.word	0x08003cb1
 8003c6c:	08003cdf 	.word	0x08003cdf
 8003c70:	08003d23 	.word	0x08003d23
 8003c74:	08003d69 	.word	0x08003d69
 8003c78:	08003daf 	.word	0x08003daf
 8003c7c:	08003df5 	.word	0x08003df5
 8003c80:	08003e3b 	.word	0x08003e3b
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003c8c:	681c      	ldr	r4, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6a12      	ldr	r2, [r2, #32]
 8003c9c:	7b92      	ldrb	r2, [r2, #14]
 8003c9e:	6839      	ldr	r1, [r7, #0]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	47a0      	blx	r4
 8003cac:	4603      	mov	r3, r0
 8003cae:	e0d4      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003cb8:	681c      	ldr	r4, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6a12      	ldr	r2, [r2, #32]
 8003cc8:	3228      	adds	r2, #40	@ 0x28
 8003cca:	7b92      	ldrb	r2, [r2, #14]
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	47a0      	blx	r4
 8003cda:	4603      	mov	r3, r0
 8003cdc:	e0bd      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ce6:	681c      	ldr	r4, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003cf0:	681d      	ldr	r5, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6a12      	ldr	r2, [r2, #32]
 8003d00:	323c      	adds	r2, #60	@ 0x3c
 8003d02:	7b92      	ldrb	r2, [r2, #14]
 8003d04:	6839      	ldr	r1, [r7, #0]
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	47a8      	blx	r5
 8003d12:	eef0 7a40 	vmov.f32	s15, s0
 8003d16:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	47a0      	blx	r4
 8003d1e:	4603      	mov	r3, r0
 8003d20:	e09b      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d2a:	681c      	ldr	r4, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d34:	681d      	ldr	r5, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6a12      	ldr	r2, [r2, #32]
 8003d44:	3278      	adds	r2, #120	@ 0x78
 8003d46:	7b92      	ldrb	r2, [r2, #14]
 8003d48:	6839      	ldr	r1, [r7, #0]
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	47a8      	blx	r5
 8003d58:	eef0 7a40 	vmov.f32	s15, s0
 8003d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	47a0      	blx	r4
 8003d64:	4603      	mov	r3, r0
 8003d66:	e078      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d70:	681c      	ldr	r4, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003d7a:	681d      	ldr	r5, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6a12      	ldr	r2, [r2, #32]
 8003d8a:	328c      	adds	r2, #140	@ 0x8c
 8003d8c:	7b92      	ldrb	r2, [r2, #14]
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
 8003d94:	4603      	mov	r3, r0
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	47a8      	blx	r5
 8003d9e:	eef0 7a40 	vmov.f32	s15, s0
 8003da2:	eeb0 0a67 	vmov.f32	s0, s15
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	47a0      	blx	r4
 8003daa:	4603      	mov	r3, r0
 8003dac:	e055      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003db6:	681c      	ldr	r4, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003dc0:	681d      	ldr	r5, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6a12      	ldr	r2, [r2, #32]
 8003dd0:	3250      	adds	r2, #80	@ 0x50
 8003dd2:	7b92      	ldrb	r2, [r2, #14]
 8003dd4:	6839      	ldr	r1, [r7, #0]
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	47a8      	blx	r5
 8003de4:	eef0 7a40 	vmov.f32	s15, s0
 8003de8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	47a0      	blx	r4
 8003df0:	4603      	mov	r3, r0
 8003df2:	e032      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dfc:	681c      	ldr	r4, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003e06:	681d      	ldr	r5, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a12      	ldr	r2, [r2, #32]
 8003e16:	3264      	adds	r2, #100	@ 0x64
 8003e18:	7b92      	ldrb	r2, [r2, #14]
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
 8003e20:	4603      	mov	r3, r0
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	47a8      	blx	r5
 8003e2a:	eef0 7a40 	vmov.f32	s15, s0
 8003e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	47a0      	blx	r4
 8003e36:	4603      	mov	r3, r0
 8003e38:	e00f      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2104      	movs	r1, #4
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e002      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003e58:	2300      	movs	r3, #0
        }
    }
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bdb0      	pop	{r4, r5, r7, pc}
 8003e62:	bf00      	nop

08003e64 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6898      	ldr	r0, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	899b      	ldrh	r3, [r3, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	4619      	mov	r1, r3
 8003e78:	f00a fe20 	bl	800eabc <HAL_GPIO_WritePin>
    }
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e94:	d303      	bcc.n	8003e9e <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8003e9c:	e000      	b.n	8003ea0 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003e9e:	683b      	ldr	r3, [r7, #0]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	db05      	blt.n	8003ec8 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ec2:	da01      	bge.n	8003ec8 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	e00c      	b.n	8003ee2 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8003ece:	db06      	blt.n	8003ede <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	da03      	bge.n	8003ede <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8003edc:	e001      	b.n	8003ee2 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003ede:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f04:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003f1c <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003f08:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	3c74242a 	.word	0x3c74242a

08003f20 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003f2c:	edd7 7a00 	vldr	s15, [r7]
 8003f30:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003f64 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	d80a      	bhi.n	8003f54 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003f3e:	ed97 7a00 	vldr	s14, [r7]
 8003f42:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003f68 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f4e:	ee17 3a90 	vmov	r3, s15
 8003f52:	e000      	b.n	8003f56 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	4674241b 	.word	0x4674241b
 8003f68:	3c74242a 	.word	0x3c74242a

08003f6c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7e:	d209      	bcs.n	8003f94 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8003f80:	887b      	ldrh	r3, [r7, #2]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f8a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003fa8 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8003f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f92:	e001      	b.n	8003f98 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003f94:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003fac <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8003f98:	eeb0 0a67 	vmov.f32	s0, s15
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	4168d4fe 	.word	0x4168d4fe
 8003fac:	00000000 	.word	0x00000000

08003fb0 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003fbc:	edd7 7a00 	vldr	s15, [r7]
 8003fc0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003ff4 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fcc:	d80b      	bhi.n	8003fe6 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003fce:	ed97 7a00 	vldr	s14, [r7]
 8003fd2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003ff8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8003fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fde:	ee17 3a90 	vmov	r3, s15
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	e000      	b.n	8003fe8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	4768c671 	.word	0x4768c671
 8003ff8:	4168d4fe 	.word	0x4168d4fe

08003ffc <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400e:	d209      	bcs.n	8004024 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8004010:	887b      	ldrh	r3, [r7, #2]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004038 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 800401e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004022:	e001      	b.n	8004028 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8004024:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800403c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 8004028:	eeb0 0a67 	vmov.f32	s0, s15
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	4168d4fe 	.word	0x4168d4fe
 800403c:	00000000 	.word	0x00000000

08004040 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800404c:	edd7 7a00 	vldr	s15, [r7]
 8004050:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004084 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8004054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405c:	d80b      	bhi.n	8004076 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800405e:	ed97 7a00 	vldr	s14, [r7]
 8004062:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004088 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 8004066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800406a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800406e:	ee17 3a90 	vmov	r3, s15
 8004072:	b29b      	uxth	r3, r3
 8004074:	e000      	b.n	8004078 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	4768c671 	.word	0x4768c671
 8004088:	4168d4fe 	.word	0x4168d4fe

0800408c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409e:	d209      	bcs.n	80040b4 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80040a0:	887b      	ldrh	r3, [r7, #2]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80040c8 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 80040ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b2:	e001      	b.n	80040b8 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80040b4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80040cc <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 80040b8:	eeb0 0a67 	vmov.f32	s0, s15
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	4174240b 	.word	0x4174240b
 80040cc:	00000000 	.word	0x00000000

080040d0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 80040dc:	edd7 7a00 	vldr	s15, [r7]
 80040e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004114 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 80040e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ec:	d80b      	bhi.n	8004106 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80040ee:	ed97 7a00 	vldr	s14, [r7]
 80040f2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004118 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 80040f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040fe:	ee17 3a90 	vmov	r3, s15
 8004102:	b29b      	uxth	r3, r3
 8004104:	e000      	b.n	8004108 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	4673e702 	.word	0x4673e702
 8004118:	4174240b 	.word	0x4174240b

0800411c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800412e:	d209      	bcs.n	8004144 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800413a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004158 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800413e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004142:	e001      	b.n	8004148 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004144:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800415c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8004148:	eeb0 0a67 	vmov.f32	s0, s15
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	3e742401 	.word	0x3e742401
 800415c:	00000000 	.word	0x00000000

08004160 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800416c:	edd7 7a00 	vldr	s15, [r7]
 8004170:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80041a4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 8004174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417c:	d80b      	bhi.n	8004196 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800417e:	ed97 7a00 	vldr	s14, [r7]
 8004182:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80041a8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 8004186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800418a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418e:	ee17 3a90 	vmov	r3, s15
 8004192:	b29b      	uxth	r3, r3
 8004194:	e000      	b.n	8004198 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	447414bf 	.word	0x447414bf
 80041a8:	3e742401 	.word	0x3e742401

080041ac <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041be:	d219      	bcs.n	80041f4 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f9de 	bl	8000584 <__aeabi_i2d>
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004208 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 80041ce:	f7fc f88d 	bl	80002ec <__adddf3>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 80041e0:	f7fc fa3a 	bl	8000658 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7fc fd2c 	bl	8000c48 <__aeabi_d2f>
 80041f0:	4603      	mov	r3, r0
 80041f2:	e001      	b.n	80041f8 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 80041f4:	f04f 0300 	mov.w	r3, #0
}
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	3fe00000 	.word	0x3fe00000
 800420c:	402e8000 	.word	0x402e8000

08004210 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800421c:	edd7 7a00 	vldr	s15, [r7]
 8004220:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800425c <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 8004224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422c:	d80f      	bhi.n	800424e <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800422e:	ed97 7a00 	vldr	s14, [r7]
 8004232:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004260 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 8004236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800423a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800423e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004246:	ee17 3a90 	vmov	r3, s15
 800424a:	b29b      	uxth	r3, r3
 800424c:	e000      	b.n	8004250 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	4673e180 	.word	0x4673e180
 8004260:	41740000 	.word	0x41740000

08004264 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8004270:	887b      	ldrh	r3, [r7, #2]
 8004272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004276:	d209      	bcs.n	800428c <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004282:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80042a0 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8004286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800428a:	e001      	b.n	8004290 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 800428c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80042a4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8004290:	eeb0 0a67 	vmov.f32	s0, s15
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	3d7423f4 	.word	0x3d7423f4
 80042a4:	00000000 	.word	0x00000000

080042a8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 80042b4:	edd7 7a00 	vldr	s15, [r7]
 80042b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80042ec <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 80042bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c4:	d80b      	bhi.n	80042de <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 80042c6:	ed97 7a00 	vldr	s14, [r7]
 80042ca:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80042f0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 80042ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d6:	ee17 3a90 	vmov	r3, s15
 80042da:	b29b      	uxth	r3, r3
 80042dc:	e000      	b.n	80042e0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	44742023 	.word	0x44742023
 80042f0:	3d7423f4 	.word	0x3d7423f4

080042f4 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800430a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004320 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 800430e:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004312:	eeb0 0a67 	vmov.f32	s0, s15
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	3783956e 	.word	0x3783956e

08004324 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004330:	edd7 7a02 	vldr	s15, [r7, #8]
 8004334:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800436c <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 8004338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	d80c      	bhi.n	800435c <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004342:	ed97 7a02 	vldr	s14, [r7, #8]
 8004346:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004370 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 800434a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800434e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004352:	edc7 7a01 	vstr	s15, [r7, #4]
 8004356:	793b      	ldrb	r3, [r7, #4]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e000      	b.n	800435e <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	3b8311d9 	.word	0x3b8311d9
 8004370:	3783956e 	.word	0x3783956e

08004374 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800438a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80043a0 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800438e:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004392:	eeb0 0a67 	vmov.f32	s0, s15
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	3783956e 	.word	0x3783956e

080043a4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80043b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80043b4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80043ec <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 80043b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d80c      	bhi.n	80043dc <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80043c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80043c6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80043f0 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 80043ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80043d6:	793b      	ldrb	r3, [r7, #4]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	e000      	b.n	80043de <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	3b8311d9 	.word	0x3b8311d9
 80043f0:	3783956e 	.word	0x3783956e

080043f4 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800440a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004420 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800440e:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	3783956e 	.word	0x3783956e

08004424 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004430:	edd7 7a02 	vldr	s15, [r7, #8]
 8004434:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800446c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8004438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	d80c      	bhi.n	800445c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004442:	ed97 7a02 	vldr	s14, [r7, #8]
 8004446:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004470 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800444a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004452:	edc7 7a01 	vstr	s15, [r7, #4]
 8004456:	793b      	ldrb	r3, [r7, #4]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e000      	b.n	800445e <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	3b8311d9 	.word	0x3b8311d9
 8004470:	3783956e 	.word	0x3783956e

08004474 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	2b0f      	cmp	r3, #15
 8004484:	d80a      	bhi.n	800449c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	3301      	adds	r3, #1
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004492:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80044b0 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 8004496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800449a:	e001      	b.n	80044a0 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 800449c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80044b4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 80044a0:	eeb0 0a67 	vmov.f32	s0, s15
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	43bb8000 	.word	0x43bb8000
 80044b4:	00000000 	.word	0x00000000

080044b8 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80044c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80044c8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004554 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 80044cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d4:	d836      	bhi.n	8004544 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 80044d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80044da:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004558 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 80044de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044e2:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80044e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80044f2:	793b      	ldrb	r3, [r7, #4]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8004502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004506:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 800450a:	edd7 7a04 	vldr	s15, [r7, #16]
 800450e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	d50a      	bpl.n	8004532 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800451c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004524:	edc7 7a01 	vstr	s15, [r7, #4]
 8004528:	793b      	ldrb	r3, [r7, #4]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	e009      	b.n	8004546 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 8004532:	edd7 7a05 	vldr	s15, [r7, #20]
 8004536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453a:	edc7 7a01 	vstr	s15, [r7, #4]
 800453e:	793b      	ldrb	r3, [r7, #4]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e000      	b.n	8004546 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	45bb8000 	.word	0x45bb8000
 8004558:	43bb8000 	.word	0x43bb8000

0800455c <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 8004568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800456c:	2b00      	cmp	r3, #0
 800456e:	db0a      	blt.n	8004586 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	3301      	adds	r3, #1
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004598 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8004580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004584:	e001      	b.n	800458a <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 8004586:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800459c <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 800458a:	eeb0 0a67 	vmov.f32	s0, s15
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	41fa0000 	.word	0x41fa0000
 800459c:	00000000 	.word	0x00000000

080045a0 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 80045ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80045b0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800463c <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 80045b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	d836      	bhi.n	800462c <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 80045be:	ed97 7a02 	vldr	s14, [r7, #8]
 80045c2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004640 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 80045c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045ca:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80045ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80045d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80045da:	793b      	ldrb	r3, [r7, #4]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80045ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ee:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80045f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004602:	d50a      	bpl.n	800461a <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8004604:	edd7 7a05 	vldr	s15, [r7, #20]
 8004608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800460c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004610:	793b      	ldrb	r3, [r7, #4]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e009      	b.n	800462e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 800461a:	edd7 7a05 	vldr	s15, [r7, #20]
 800461e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004622:	edc7 7a01 	vstr	s15, [r7, #4]
 8004626:	793b      	ldrb	r3, [r7, #4]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e000      	b.n	800462e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	457a0000 	.word	0x457a0000
 8004640:	41fa0000 	.word	0x41fa0000

08004644 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3394      	adds	r3, #148	@ 0x94
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	edd2 7a05 	vldr	s15, [r2, #20]
 800467a:	eeb0 0a67 	vmov.f32	s0, s15
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	4798      	blx	r3
 8004682:	4603      	mov	r3, r0
 8004684:	461a      	mov	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	edd2 7a06 	vldr	s15, [r2, #24]
 800469c:	eeb0 0a67 	vmov.f32	s0, s15
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	4798      	blx	r3
 80046a4:	4603      	mov	r3, r0
 80046a6:	461a      	mov	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	edd2 7a07 	vldr	s15, [r2, #28]
 80046be:	eeb0 0a67 	vmov.f32	s0, s15
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	4798      	blx	r3
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	edd2 7a08 	vldr	s15, [r2, #32]
 80046e0:	eeb0 0a67 	vmov.f32	s0, s15
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	4798      	blx	r3
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8004702:	eeb0 0a67 	vmov.f32	s0, s15
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	4798      	blx	r3
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800471a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80049ec <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800471e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	ed93 7a00 	vldr	s14, [r3]
 8004728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004730:	edc7 7a01 	vstr	s15, [r7, #4]
 8004734:	793b      	ldrb	r3, [r7, #4]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004744:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80049ec <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004748:	ee67 6a87 	vmul.f32	s13, s15, s14
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ed93 7a00 	vldr	s14, [r3]
 8004752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475a:	edc7 7a01 	vstr	s15, [r7, #4]
 800475e:	793b      	ldrb	r3, [r7, #4]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800476e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80049ec <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004772:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	ed93 7a00 	vldr	s14, [r3]
 800477c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004784:	edc7 7a01 	vstr	s15, [r7, #4]
 8004788:	793b      	ldrb	r3, [r7, #4]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004798:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80049ec <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800479c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	ed93 7a00 	vldr	s14, [r3]
 80047a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80047b2:	793b      	ldrb	r3, [r7, #4]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80047cc:	eeb0 0a67 	vmov.f32	s0, s15
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	4798      	blx	r3
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80047ee:	eeb0 0a67 	vmov.f32	s0, s15
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	4798      	blx	r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	461a      	mov	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8004810:	eeb0 0a67 	vmov.f32	s0, s15
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	4798      	blx	r3
 8004818:	4603      	mov	r3, r0
 800481a:	461a      	mov	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8004832:	eeb0 0a67 	vmov.f32	s0, s15
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	4798      	blx	r3
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8004860:	eeb0 0a67 	vmov.f32	s0, s15
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	4798      	blx	r3
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8004882:	eeb0 0a67 	vmov.f32	s0, s15
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	4798      	blx	r3
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80048c8:	2104      	movs	r1, #4
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 80048de:	2105      	movs	r1, #5
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 80048f4:	2106      	movs	r1, #6
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800490a:	2107      	movs	r1, #7
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8004920:	2108      	movs	r1, #8
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8004936:	2109      	movs	r1, #9
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800494c:	210a      	movs	r1, #10
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004962:	210b      	movs	r1, #11
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004978:	210c      	movs	r1, #12
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800498e:	210d      	movs	r1, #13
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 80049a4:	210e      	movs	r1, #14
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 80049ba:	210f      	movs	r1, #15
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 80049d0:	2110      	movs	r1, #16
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 80049e6:	2111      	movs	r1, #17
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	e001      	b.n	80049f0 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 80049ec:	43800000 	.word	0x43800000
 80049f0:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8004a02:	2113      	movs	r1, #19
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8004a18:	2114      	movs	r1, #20
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004a2e:	2116      	movs	r1, #22
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8004a44:	2117      	movs	r1, #23
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3354      	adds	r3, #84	@ 0x54
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8004a58:	4611      	mov	r1, r2
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	4798      	blx	r3
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f083 0301 	eor.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004a78:	b590      	push	{r4, r7, lr}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	460b      	mov	r3, r1
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004a8e:	681c      	ldr	r4, [r3, #0]
 8004a90:	7afa      	ldrb	r2, [r7, #11]
 8004a92:	2300      	movs	r3, #0
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	490c      	ldr	r1, [pc, #48]	@ (8004ad0 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004ab0:	4907      	ldr	r1, [pc, #28]	@ (8004ad0 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a05      	ldr	r2, [pc, #20]	@ (8004ad8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004ac2:	4904      	ldr	r1, [pc, #16]	@ (8004ad4 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	4798      	blx	r3
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd90      	pop	{r4, r7, pc}
 8004ad0:	20000280 	.word	0x20000280
 8004ad4:	200002a0 	.word	0x200002a0
 8004ad8:	200002a8 	.word	0x200002a8

08004adc <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004af0:	681c      	ldr	r4, [r3, #0]
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	2200      	movs	r2, #0
 8004af6:	9201      	str	r2, [sp, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	9200      	str	r2, [sp, #0]
 8004afc:	2202      	movs	r2, #2
 8004afe:	4917      	ldr	r1, [pc, #92]	@ (8004b5c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a14      	ldr	r2, [pc, #80]	@ (8004b60 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004b10:	4912      	ldr	r1, [pc, #72]	@ (8004b5c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a10      	ldr	r2, [pc, #64]	@ (8004b64 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004b22:	490f      	ldr	r1, [pc, #60]	@ (8004b60 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a19      	ldr	r1, [r3, #32]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	7b9b      	ldrb	r3, [r3, #14]
 8004b3a:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	7bfa      	ldrb	r2, [r7, #15]
 8004b48:	4906      	ldr	r1, [pc, #24]	@ (8004b64 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8004b52:	68bb      	ldr	r3, [r7, #8]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}
 8004b5c:	20000280 	.word	0x20000280
 8004b60:	200002a0 	.word	0x200002a0
 8004b64:	200002a8 	.word	0x200002a8

08004b68 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	460b      	mov	r3, r1
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	7afa      	ldrb	r2, [r7, #11]
 8004b82:	2300      	movs	r3, #0
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	490c      	ldr	r1, [pc, #48]	@ (8004bc0 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a09      	ldr	r2, [pc, #36]	@ (8004bc4 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004ba0:	4907      	ldr	r1, [pc, #28]	@ (8004bc0 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a05      	ldr	r2, [pc, #20]	@ (8004bc8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004bb2:	4904      	ldr	r1, [pc, #16]	@ (8004bc4 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	4798      	blx	r3
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd90      	pop	{r4, r7, pc}
 8004bc0:	20000280 	.word	0x20000280
 8004bc4:	200002a0 	.word	0x200002a0
 8004bc8:	200002a8 	.word	0x200002a8

08004bcc <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	2200      	movs	r2, #0
 8004be6:	9201      	str	r2, [sp, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	9200      	str	r2, [sp, #0]
 8004bec:	2204      	movs	r2, #4
 8004bee:	490c      	ldr	r1, [pc, #48]	@ (8004c20 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a09      	ldr	r2, [pc, #36]	@ (8004c24 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004c00:	4907      	ldr	r1, [pc, #28]	@ (8004c20 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a05      	ldr	r2, [pc, #20]	@ (8004c28 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004c12:	4904      	ldr	r1, [pc, #16]	@ (8004c24 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4798      	blx	r3
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd90      	pop	{r4, r7, pc}
 8004c20:	20000280 	.word	0x20000280
 8004c24:	200002a0 	.word	0x200002a0
 8004c28:	200002a8 	.word	0x200002a8

08004c2c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	460b      	mov	r3, r1
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004c42:	681c      	ldr	r4, [r3, #0]
 8004c44:	7afa      	ldrb	r2, [r7, #11]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	2205      	movs	r2, #5
 8004c52:	490c      	ldr	r1, [pc, #48]	@ (8004c84 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c64:	4907      	ldr	r1, [pc, #28]	@ (8004c84 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a05      	ldr	r2, [pc, #20]	@ (8004c8c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004c76:	4904      	ldr	r1, [pc, #16]	@ (8004c88 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	4798      	blx	r3
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd90      	pop	{r4, r7, pc}
 8004c84:	20000280 	.word	0x20000280
 8004c88:	200002a0 	.word	0x200002a0
 8004c8c:	200002a8 	.word	0x200002a8

08004c90 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca0:	d21f      	bcs.n	8004ce2 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004caa:	681c      	ldr	r4, [r3, #0]
 8004cac:	2300      	movs	r3, #0
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2206      	movs	r2, #6
 8004cb8:	490c      	ldr	r1, [pc, #48]	@ (8004cec <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a09      	ldr	r2, [pc, #36]	@ (8004cf0 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004cca:	4908      	ldr	r1, [pc, #32]	@ (8004cec <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a06      	ldr	r2, [pc, #24]	@ (8004cf4 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004cdc:	4904      	ldr	r1, [pc, #16]	@ (8004cf0 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd90      	pop	{r4, r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000280 	.word	0x20000280
 8004cf0:	200002a0 	.word	0x200002a0
 8004cf4:	200002a8 	.word	0x200002a8

08004cf8 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	460b      	mov	r3, r1
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d0c:	d220      	bcs.n	8004d50 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d16:	681c      	ldr	r4, [r3, #0]
 8004d18:	7afa      	ldrb	r2, [r7, #11]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	2207      	movs	r2, #7
 8004d26:	490c      	ldr	r1, [pc, #48]	@ (8004d58 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a09      	ldr	r2, [pc, #36]	@ (8004d5c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004d38:	4907      	ldr	r1, [pc, #28]	@ (8004d58 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a05      	ldr	r2, [pc, #20]	@ (8004d60 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004d4a:	4904      	ldr	r1, [pc, #16]	@ (8004d5c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	4798      	blx	r3
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd90      	pop	{r4, r7, pc}
 8004d58:	20000280 	.word	0x20000280
 8004d5c:	200002a0 	.word	0x200002a0
 8004d60:	200002a8 	.word	0x200002a8

08004d64 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	72fb      	strb	r3, [r7, #11]
 8004d72:	4613      	mov	r3, r2
 8004d74:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d7e:	681c      	ldr	r4, [r3, #0]
 8004d80:	7af9      	ldrb	r1, [r7, #11]
 8004d82:	7abb      	ldrb	r3, [r7, #10]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	9201      	str	r2, [sp, #4]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	490c      	ldr	r1, [pc, #48]	@ (8004dc0 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004da0:	4907      	ldr	r1, [pc, #28]	@ (8004dc0 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a05      	ldr	r2, [pc, #20]	@ (8004dc8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004db2:	4904      	ldr	r1, [pc, #16]	@ (8004dc4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	4798      	blx	r3
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd90      	pop	{r4, r7, pc}
 8004dc0:	20000280 	.word	0x20000280
 8004dc4:	200002a0 	.word	0x200002a0
 8004dc8:	200002a8 	.word	0x200002a8

08004dcc <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	70fb      	strb	r3, [r7, #3]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004de4:	681c      	ldr	r4, [r3, #0]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	78bb      	ldrb	r3, [r7, #2]
 8004dea:	2100      	movs	r1, #0
 8004dec:	9101      	str	r1, [sp, #4]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	2209      	movs	r2, #9
 8004df4:	490c      	ldr	r1, [pc, #48]	@ (8004e28 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a09      	ldr	r2, [pc, #36]	@ (8004e2c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004e06:	4908      	ldr	r1, [pc, #32]	@ (8004e28 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a06      	ldr	r2, [pc, #24]	@ (8004e30 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004e18:	4904      	ldr	r1, [pc, #16]	@ (8004e2c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000280 	.word	0x20000280
 8004e2c:	200002a0 	.word	0x200002a0
 8004e30:	200002a8 	.word	0x200002a8

08004e34 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e44:	681c      	ldr	r4, [r3, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	220a      	movs	r2, #10
 8004e52:	490c      	ldr	r1, [pc, #48]	@ (8004e84 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e64:	4907      	ldr	r1, [pc, #28]	@ (8004e84 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a05      	ldr	r2, [pc, #20]	@ (8004e8c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004e76:	4904      	ldr	r1, [pc, #16]	@ (8004e88 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd90      	pop	{r4, r7, pc}
 8004e84:	20000280 	.word	0x20000280
 8004e88:	200002a0 	.word	0x200002a0
 8004e8c:	200002a8 	.word	0x200002a8

08004e90 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004ea0:	681c      	ldr	r4, [r3, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	220b      	movs	r2, #11
 8004eae:	490c      	ldr	r1, [pc, #48]	@ (8004ee0 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004ec0:	4907      	ldr	r1, [pc, #28]	@ (8004ee0 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a05      	ldr	r2, [pc, #20]	@ (8004ee8 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004ed2:	4904      	ldr	r1, [pc, #16]	@ (8004ee4 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd90      	pop	{r4, r7, pc}
 8004ee0:	20000280 	.word	0x20000280
 8004ee4:	200002a0 	.word	0x200002a0
 8004ee8:	200002a8 	.word	0x200002a8

08004eec <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004efc:	681c      	ldr	r4, [r3, #0]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	220c      	movs	r2, #12
 8004f0a:	490c      	ldr	r1, [pc, #48]	@ (8004f3c <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004f1c:	4907      	ldr	r1, [pc, #28]	@ (8004f3c <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a05      	ldr	r2, [pc, #20]	@ (8004f44 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004f2e:	4904      	ldr	r1, [pc, #16]	@ (8004f40 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}
 8004f3c:	20000280 	.word	0x20000280
 8004f40:	200002a0 	.word	0x200002a0
 8004f44:	200002a8 	.word	0x200002a8

08004f48 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f58:	681c      	ldr	r4, [r3, #0]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2300      	movs	r3, #0
 8004f64:	220d      	movs	r2, #13
 8004f66:	490c      	ldr	r1, [pc, #48]	@ (8004f98 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a09      	ldr	r2, [pc, #36]	@ (8004f9c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004f78:	4907      	ldr	r1, [pc, #28]	@ (8004f98 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a05      	ldr	r2, [pc, #20]	@ (8004fa0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8004f8a:	4904      	ldr	r1, [pc, #16]	@ (8004f9c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd90      	pop	{r4, r7, pc}
 8004f98:	20000280 	.word	0x20000280
 8004f9c:	200002a0 	.word	0x200002a0
 8004fa0:	200002a8 	.word	0x200002a8

08004fa4 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fb4:	681c      	ldr	r4, [r3, #0]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	220e      	movs	r2, #14
 8004fc2:	490c      	ldr	r1, [pc, #48]	@ (8004ff4 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a09      	ldr	r2, [pc, #36]	@ (8004ff8 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004fd4:	4907      	ldr	r1, [pc, #28]	@ (8004ff4 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a05      	ldr	r2, [pc, #20]	@ (8004ffc <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8004fe6:	4904      	ldr	r1, [pc, #16]	@ (8004ff8 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd90      	pop	{r4, r7, pc}
 8004ff4:	20000280 	.word	0x20000280
 8004ff8:	200002a0 	.word	0x200002a0
 8004ffc:	200002a8 	.word	0x200002a8

08005000 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b085      	sub	sp, #20
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005010:	681c      	ldr	r4, [r3, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	2300      	movs	r3, #0
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	220f      	movs	r2, #15
 800501e:	490c      	ldr	r1, [pc, #48]	@ (8005050 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a09      	ldr	r2, [pc, #36]	@ (8005054 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005030:	4907      	ldr	r1, [pc, #28]	@ (8005050 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a05      	ldr	r2, [pc, #20]	@ (8005058 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8005042:	4904      	ldr	r1, [pc, #16]	@ (8005054 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bd90      	pop	{r4, r7, pc}
 8005050:	20000280 	.word	0x20000280
 8005054:	200002a0 	.word	0x200002a0
 8005058:	200002a8 	.word	0x200002a8

0800505c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b085      	sub	sp, #20
 8005060:	af02      	add	r7, sp, #8
 8005062:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800506c:	681c      	ldr	r4, [r3, #0]
 800506e:	2300      	movs	r3, #0
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	2300      	movs	r3, #0
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	2210      	movs	r2, #16
 800507a:	490c      	ldr	r1, [pc, #48]	@ (80050ac <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a09      	ldr	r2, [pc, #36]	@ (80050b0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 800508c:	4907      	ldr	r1, [pc, #28]	@ (80050ac <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a05      	ldr	r2, [pc, #20]	@ (80050b4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 800509e:	4904      	ldr	r1, [pc, #16]	@ (80050b0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd90      	pop	{r4, r7, pc}
 80050ac:	20000280 	.word	0x20000280
 80050b0:	200002a0 	.word	0x200002a0
 80050b4:	200002a8 	.word	0x200002a8

080050b8 <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af02      	add	r7, sp, #8
 80050be:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050c8:	681c      	ldr	r4, [r3, #0]
 80050ca:	2300      	movs	r3, #0
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	2300      	movs	r3, #0
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	2300      	movs	r3, #0
 80050d4:	2211      	movs	r2, #17
 80050d6:	490c      	ldr	r1, [pc, #48]	@ (8005108 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a09      	ldr	r2, [pc, #36]	@ (800510c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 80050e8:	4907      	ldr	r1, [pc, #28]	@ (8005108 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a05      	ldr	r2, [pc, #20]	@ (8005110 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 80050fa:	4904      	ldr	r1, [pc, #16]	@ (800510c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	20000280 	.word	0x20000280
 800510c:	200002a0 	.word	0x200002a0
 8005110:	200002a8 	.word	0x200002a8

08005114 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b087      	sub	sp, #28
 8005118:	af02      	add	r7, sp, #8
 800511a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005124:	681c      	ldr	r4, [r3, #0]
 8005126:	2300      	movs	r3, #0
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	2300      	movs	r3, #0
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	2212      	movs	r2, #18
 8005132:	4912      	ldr	r1, [pc, #72]	@ (800517c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a0f      	ldr	r2, [pc, #60]	@ (8005180 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005144:	490d      	ldr	r1, [pc, #52]	@ (800517c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a0b      	ldr	r2, [pc, #44]	@ (8005184 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8005156:	490a      	ldr	r1, [pc, #40]	@ (8005180 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2202      	movs	r2, #2
 8005168:	4906      	ldr	r1, [pc, #24]	@ (8005184 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	4603      	mov	r3, r0
 8005170:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8005172:	89fb      	ldrh	r3, [r7, #14]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bd90      	pop	{r4, r7, pc}
 800517c:	20000280 	.word	0x20000280
 8005180:	200002a0 	.word	0x200002a0
 8005184:	200002a8 	.word	0x200002a8

08005188 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8005188:	b590      	push	{r4, r7, lr}
 800518a:	b087      	sub	sp, #28
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	460b      	mov	r3, r1
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800519e:	681c      	ldr	r4, [r3, #0]
 80051a0:	7afa      	ldrb	r2, [r7, #11]
 80051a2:	2300      	movs	r3, #0
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	4613      	mov	r3, r2
 80051ac:	2201      	movs	r2, #1
 80051ae:	4903      	ldr	r1, [pc, #12]	@ (80051bc <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	47a0      	blx	r4
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd90      	pop	{r4, r7, pc}
 80051bc:	20000280 	.word	0x20000280

080051c0 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051d4:	681c      	ldr	r4, [r3, #0]
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	2200      	movs	r2, #0
 80051da:	9201      	str	r2, [sp, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	9200      	str	r2, [sp, #0]
 80051e0:	2202      	movs	r2, #2
 80051e2:	4903      	ldr	r1, [pc, #12]	@ (80051f0 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	47a0      	blx	r4
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd90      	pop	{r4, r7, pc}
 80051f0:	20000280 	.word	0x20000280

080051f4 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	460b      	mov	r3, r1
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800520a:	681c      	ldr	r4, [r3, #0]
 800520c:	7afa      	ldrb	r2, [r7, #11]
 800520e:	2300      	movs	r3, #0
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	2203      	movs	r2, #3
 800521a:	4903      	ldr	r1, [pc, #12]	@ (8005228 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	47a0      	blx	r4
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	bd90      	pop	{r4, r7, pc}
 8005228:	20000280 	.word	0x20000280

0800522c <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b085      	sub	sp, #20
 8005230:	af02      	add	r7, sp, #8
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005240:	681c      	ldr	r4, [r3, #0]
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	2200      	movs	r2, #0
 8005246:	9201      	str	r2, [sp, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	9200      	str	r2, [sp, #0]
 800524c:	2204      	movs	r2, #4
 800524e:	4903      	ldr	r1, [pc, #12]	@ (800525c <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	47a0      	blx	r4
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	bd90      	pop	{r4, r7, pc}
 800525c:	20000280 	.word	0x20000280

08005260 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b087      	sub	sp, #28
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	460b      	mov	r3, r1
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005276:	681c      	ldr	r4, [r3, #0]
 8005278:	7afa      	ldrb	r2, [r7, #11]
 800527a:	2300      	movs	r3, #0
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	4613      	mov	r3, r2
 8005284:	2205      	movs	r2, #5
 8005286:	4903      	ldr	r1, [pc, #12]	@ (8005294 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	47a0      	blx	r4
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	bd90      	pop	{r4, r7, pc}
 8005294:	20000280 	.word	0x20000280

08005298 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8005298:	b590      	push	{r4, r7, lr}
 800529a:	b085      	sub	sp, #20
 800529c:	af02      	add	r7, sp, #8
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052aa:	681c      	ldr	r4, [r3, #0]
 80052ac:	2300      	movs	r3, #0
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	2300      	movs	r3, #0
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2206      	movs	r2, #6
 80052b8:	4903      	ldr	r1, [pc, #12]	@ (80052c8 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	47a0      	blx	r4
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd90      	pop	{r4, r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000280 	.word	0x20000280

080052cc <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	460b      	mov	r3, r1
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052e2:	681c      	ldr	r4, [r3, #0]
 80052e4:	7afa      	ldrb	r2, [r7, #11]
 80052e6:	2300      	movs	r3, #0
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	2207      	movs	r2, #7
 80052f2:	4903      	ldr	r1, [pc, #12]	@ (8005300 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	47a0      	blx	r4
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd90      	pop	{r4, r7, pc}
 8005300:	20000280 	.word	0x20000280

08005304 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b087      	sub	sp, #28
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	607b      	str	r3, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	72fb      	strb	r3, [r7, #11]
 8005312:	4613      	mov	r3, r2
 8005314:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800531e:	681c      	ldr	r4, [r3, #0]
 8005320:	7af9      	ldrb	r1, [r7, #11]
 8005322:	7abb      	ldrb	r3, [r7, #10]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	9201      	str	r2, [sp, #4]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	460b      	mov	r3, r1
 800532c:	2208      	movs	r2, #8
 800532e:	4903      	ldr	r1, [pc, #12]	@ (800533c <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	47a0      	blx	r4
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	bd90      	pop	{r4, r7, pc}
 800533c:	20000280 	.word	0x20000280

08005340 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b085      	sub	sp, #20
 8005344:	af02      	add	r7, sp, #8
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
 800534c:	4613      	mov	r3, r2
 800534e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005358:	681c      	ldr	r4, [r3, #0]
 800535a:	78fa      	ldrb	r2, [r7, #3]
 800535c:	78bb      	ldrb	r3, [r7, #2]
 800535e:	2100      	movs	r1, #0
 8005360:	9101      	str	r1, [sp, #4]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	2209      	movs	r2, #9
 8005368:	4903      	ldr	r1, [pc, #12]	@ (8005378 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	47a0      	blx	r4
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bd90      	pop	{r4, r7, pc}
 8005376:	bf00      	nop
 8005378:	20000280 	.word	0x20000280

0800537c <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b085      	sub	sp, #20
 8005380:	af02      	add	r7, sp, #8
 8005382:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800538c:	681c      	ldr	r4, [r3, #0]
 800538e:	2300      	movs	r3, #0
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	2300      	movs	r3, #0
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	2300      	movs	r3, #0
 8005398:	220a      	movs	r2, #10
 800539a:	4903      	ldr	r1, [pc, #12]	@ (80053a8 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	47a0      	blx	r4
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd90      	pop	{r4, r7, pc}
 80053a8:	20000280 	.word	0x20000280

080053ac <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053bc:	681c      	ldr	r4, [r3, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	2300      	movs	r3, #0
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	220b      	movs	r2, #11
 80053ca:	4903      	ldr	r1, [pc, #12]	@ (80053d8 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	47a0      	blx	r4
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd90      	pop	{r4, r7, pc}
 80053d8:	20000280 	.word	0x20000280

080053dc <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b085      	sub	sp, #20
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053ec:	681c      	ldr	r4, [r3, #0]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	2300      	movs	r3, #0
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	220c      	movs	r2, #12
 80053fa:	4903      	ldr	r1, [pc, #12]	@ (8005408 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	47a0      	blx	r4
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bd90      	pop	{r4, r7, pc}
 8005408:	20000280 	.word	0x20000280

0800540c <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b085      	sub	sp, #20
 8005410:	af02      	add	r7, sp, #8
 8005412:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800541c:	681c      	ldr	r4, [r3, #0]
 800541e:	2300      	movs	r3, #0
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	220d      	movs	r2, #13
 800542a:	4903      	ldr	r1, [pc, #12]	@ (8005438 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	47a0      	blx	r4
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	bd90      	pop	{r4, r7, pc}
 8005438:	20000280 	.word	0x20000280

0800543c <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b085      	sub	sp, #20
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800544c:	681c      	ldr	r4, [r3, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	2300      	movs	r3, #0
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	220e      	movs	r2, #14
 800545a:	4903      	ldr	r1, [pc, #12]	@ (8005468 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	47a0      	blx	r4
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bd90      	pop	{r4, r7, pc}
 8005468:	20000280 	.word	0x20000280

0800546c <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b085      	sub	sp, #20
 8005470:	af02      	add	r7, sp, #8
 8005472:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800547c:	681c      	ldr	r4, [r3, #0]
 800547e:	2300      	movs	r3, #0
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	220f      	movs	r2, #15
 800548a:	4903      	ldr	r1, [pc, #12]	@ (8005498 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	47a0      	blx	r4
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bd90      	pop	{r4, r7, pc}
 8005498:	20000280 	.word	0x20000280

0800549c <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b085      	sub	sp, #20
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054ac:	681c      	ldr	r4, [r3, #0]
 80054ae:	2300      	movs	r3, #0
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	2300      	movs	r3, #0
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	2300      	movs	r3, #0
 80054b8:	2210      	movs	r2, #16
 80054ba:	4903      	ldr	r1, [pc, #12]	@ (80054c8 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	47a0      	blx	r4
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd90      	pop	{r4, r7, pc}
 80054c8:	20000280 	.word	0x20000280

080054cc <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054dc:	681c      	ldr	r4, [r3, #0]
 80054de:	2300      	movs	r3, #0
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	2300      	movs	r3, #0
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	2300      	movs	r3, #0
 80054e8:	2211      	movs	r2, #17
 80054ea:	4903      	ldr	r1, [pc, #12]	@ (80054f8 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	47a0      	blx	r4
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd90      	pop	{r4, r7, pc}
 80054f8:	20000280 	.word	0x20000280

080054fc <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b085      	sub	sp, #20
 8005500:	af02      	add	r7, sp, #8
 8005502:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800550c:	681c      	ldr	r4, [r3, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	2300      	movs	r3, #0
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	2212      	movs	r2, #18
 800551a:	4903      	ldr	r1, [pc, #12]	@ (8005528 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	47a0      	blx	r4
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bd90      	pop	{r4, r7, pc}
 8005528:	20000280 	.word	0x20000280

0800552c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a09      	ldr	r2, [pc, #36]	@ (8005564 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005540:	4909      	ldr	r1, [pc, #36]	@ (8005568 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a06      	ldr	r2, [pc, #24]	@ (800556c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8005552:	4904      	ldr	r1, [pc, #16]	@ (8005564 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	200002a0 	.word	0x200002a0
 8005568:	20000280 	.word	0x20000280
 800556c:	200002a8 	.word	0x200002a8

08005570 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b089      	sub	sp, #36	@ 0x24
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800557c:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800557e:	2200      	movs	r2, #0
 8005580:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005582:	2300      	movs	r3, #0
 8005584:	75fb      	strb	r3, [r7, #23]
 8005586:	e020      	b.n	80055ca <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005590:	681c      	ldr	r4, [r3, #0]
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	461a      	mov	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	1899      	adds	r1, r3, r2
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	441a      	add	r2, r3
 80055a6:	230a      	movs	r3, #10
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2302      	movs	r3, #2
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80055b0:	2300      	movs	r3, #0
 80055b2:	75bb      	strb	r3, [r7, #22]
 80055b4:	e003      	b.n	80055be <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 80055b6:	bf00      	nop
 80055b8:	7dbb      	ldrb	r3, [r7, #22]
 80055ba:	3301      	adds	r3, #1
 80055bc:	75bb      	strb	r3, [r7, #22]
 80055be:	7dbb      	ldrb	r3, [r7, #22]
 80055c0:	2b7c      	cmp	r3, #124	@ 0x7c
 80055c2:	d9f8      	bls.n	80055b6 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80055c4:	7dfb      	ldrb	r3, [r7, #23]
 80055c6:	3301      	adds	r3, #1
 80055c8:	75fb      	strb	r3, [r7, #23]
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d9db      	bls.n	8005588 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 80055d0:	bf00      	nop
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd90      	pop	{r4, r7, pc}
 80055da:	bf00      	nop
 80055dc:	2000027d 	.word	0x2000027d

080055e0 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4613      	mov	r3, r2
 80055ec:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80055f2:	2301      	movs	r3, #1
 80055f4:	74fb      	strb	r3, [r7, #19]
 80055f6:	e016      	b.n	8005626 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	461a      	mov	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	7f1b      	ldrb	r3, [r3, #28]
 8005602:	4413      	add	r3, r2
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	4413      	add	r3, r2
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	79fa      	ldrb	r2, [r7, #7]
 800560e:	7cfb      	ldrb	r3, [r7, #19]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	461a      	mov	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	3301      	adds	r3, #1
 8005624:	74fb      	strb	r3, [r7, #19]
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d9e5      	bls.n	80055f8 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800562c:	697b      	ldr	r3, [r7, #20]
}
 800562e:	4618      	mov	r0, r3
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2118      	movs	r1, #24
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
 800565c:	4602      	mov	r2, r0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005662:	b292      	uxth	r2, r2
 8005664:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	2b0e      	cmp	r3, #14
 800566a:	f200 8099 	bhi.w	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 800566e:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	080056b1 	.word	0x080056b1
 8005678:	080056c1 	.word	0x080056c1
 800567c:	080056d1 	.word	0x080056d1
 8005680:	080056e1 	.word	0x080056e1
 8005684:	080056f1 	.word	0x080056f1
 8005688:	08005701 	.word	0x08005701
 800568c:	08005711 	.word	0x08005711
 8005690:	08005721 	.word	0x08005721
 8005694:	08005731 	.word	0x08005731
 8005698:	08005741 	.word	0x08005741
 800569c:	08005751 	.word	0x08005751
 80056a0:	08005761 	.word	0x08005761
 80056a4:	08005771 	.word	0x08005771
 80056a8:	08005781 	.word	0x08005781
 80056ac:	08005791 	.word	0x08005791
      state = pL6470_StatusRegister->HiZ;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	73fb      	strb	r3, [r7, #15]
      break;
 80056be:	e06f      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	73fb      	strb	r3, [r7, #15]
      break;
 80056ce:	e067      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	73fb      	strb	r3, [r7, #15]
      break;
 80056de:	e05f      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	73fb      	strb	r3, [r7, #15]
      break;
 80056ee:	e057      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	73fb      	strb	r3, [r7, #15]
      break;
 80056fe:	e04f      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800570a:	b2db      	uxtb	r3, r3
 800570c:	73fb      	strb	r3, [r7, #15]
      break;
 800570e:	e047      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800571a:	b2db      	uxtb	r3, r3
 800571c:	73fb      	strb	r3, [r7, #15]
      break;
 800571e:	e03f      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800572a:	b2db      	uxtb	r3, r3
 800572c:	73fb      	strb	r3, [r7, #15]
      break;
 800572e:	e037      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	73fb      	strb	r3, [r7, #15]
      break;
 800573e:	e02f      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	73fb      	strb	r3, [r7, #15]
      break;
 800574e:	e027      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	73fb      	strb	r3, [r7, #15]
      break;
 800575e:	e01f      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	73fb      	strb	r3, [r7, #15]
      break;
 800576e:	e017      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	73fb      	strb	r3, [r7, #15]
      break;
 800577e:	e00f      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	73fb      	strb	r3, [r7, #15]
      break;
 800578e:	e007      	b.n	80057a0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800579a:	b2db      	uxtb	r3, r3
 800579c:	73fb      	strb	r3, [r7, #15]
      break;
 800579e:	bf00      	nop
  return state;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop

080057ac <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	2b18      	cmp	r3, #24
 80057bc:	d809      	bhi.n	80057d2 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a19      	ldr	r1, [r3, #32]
 80057c2:	78fa      	ldrb	r2, [r7, #3]
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	3301      	adds	r3, #1
 80057d0:	e000      	b.n	80057d4 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
 80057ee:	e01a      	b.n	8005826 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	4413      	add	r3, r2
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	4413      	add	r3, r2
 8005804:	2200      	movs	r2, #0
 8005806:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	4413      	add	r3, r2
 8005810:	2200      	movs	r2, #0
 8005812:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	4413      	add	r3, r2
 800581c:	2200      	movs	r2, #0
 800581e:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	3301      	adds	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d9e1      	bls.n	80057f0 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4613      	mov	r3, r2
 8005848:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	7f1b      	ldrb	r3, [r3, #28]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	4413      	add	r3, r2
 8005854:	79fa      	ldrb	r2, [r7, #7]
 8005856:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	7f1b      	ldrb	r3, [r3, #28]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4413      	add	r3, r2
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	7f1b      	ldrb	r3, [r3, #28]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	4413      	add	r3, r2
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	7f1b      	ldrb	r3, [r3, #28]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4413      	add	r3, r2
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	60da      	str	r2, [r3, #12]
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b087      	sub	sp, #28
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80058a0:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80058a8:	4b0e      	ldr	r3, [pc, #56]	@ (80058e4 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80058c6:	681c      	ldr	r4, [r3, #0]
 80058c8:	79fa      	ldrb	r2, [r7, #7]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	47a0      	blx	r4
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd90      	pop	{r4, r7, pc}
 80058e2:	bf00      	nop
 80058e4:	2000027d 	.word	0x2000027d

080058e8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80058f8:	2300      	movs	r3, #0
 80058fa:	75bb      	strb	r3, [r7, #22]
 80058fc:	e013      	b.n	8005926 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80058fe:	2300      	movs	r3, #0
 8005900:	75fb      	strb	r3, [r7, #23]
 8005902:	e00a      	b.n	800591a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8005904:	7d7b      	ldrb	r3, [r7, #21]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	757a      	strb	r2, [r7, #21]
 800590a:	461a      	mov	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	3301      	adds	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
 800591a:	7dfb      	ldrb	r3, [r7, #23]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d9f1      	bls.n	8005904 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005920:	7dbb      	ldrb	r3, [r7, #22]
 8005922:	3301      	adds	r3, #1
 8005924:	75bb      	strb	r3, [r7, #22]
 8005926:	7dbb      	ldrb	r3, [r7, #22]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d9e8      	bls.n	80058fe <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800592c:	2300      	movs	r3, #0
 800592e:	75fb      	strb	r3, [r7, #23]
 8005930:	e1f1      	b.n	8005d16 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	440b      	add	r3, r1
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	4619      	mov	r1, r3
 8005942:	460b      	mov	r3, r1
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	1a5b      	subs	r3, r3, r1
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	441a      	add	r2, r3
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	440b      	add	r3, r1
 8005952:	7b12      	ldrb	r2, [r2, #12]
 8005954:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4413      	add	r3, r2
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b12      	cmp	r3, #18
 8005962:	f200 81d5 	bhi.w	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8005966:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005d11 	.word	0x08005d11
 8005970:	080059b9 	.word	0x080059b9
 8005974:	08005a41 	.word	0x08005a41
 8005978:	08005a71 	.word	0x08005a71
 800597c:	08005ad9 	.word	0x08005ad9
 8005980:	08005b07 	.word	0x08005b07
 8005984:	08005b6f 	.word	0x08005b6f
 8005988:	08005bab 	.word	0x08005bab
 800598c:	08005c13 	.word	0x08005c13
 8005990:	08005caf 	.word	0x08005caf
 8005994:	08005d11 	.word	0x08005d11
 8005998:	08005d11 	.word	0x08005d11
 800599c:	08005d11 	.word	0x08005d11
 80059a0:	08005d11 	.word	0x08005d11
 80059a4:	08005d11 	.word	0x08005d11
 80059a8:	08005d11 	.word	0x08005d11
 80059ac:	08005d11 	.word	0x08005d11
 80059b0:	08005d11 	.word	0x08005d11
 80059b4:	08005d11 	.word	0x08005d11
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	7819      	ldrb	r1, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a18      	ldr	r0, [r3, #32]
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	4413      	add	r3, r2
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4403      	add	r3, r0
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4403      	add	r3, r0
 80059e0:	430a      	orrs	r2, r1
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a19      	ldr	r1, [r3, #32]
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	7b9b      	ldrb	r3, [r3, #14]
 8005a00:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005a02:	2301      	movs	r3, #1
 8005a04:	75bb      	strb	r3, [r7, #22]
 8005a06:	e016      	b.n	8005a36 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4413      	add	r3, r2
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	7d39      	ldrb	r1, [r7, #20]
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	1acb      	subs	r3, r1, r3
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	fa22 f103 	lsr.w	r1, r2, r3
 8005a1e:	7dbb      	ldrb	r3, [r7, #22]
 8005a20:	005a      	lsls	r2, r3, #1
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	4413      	add	r3, r2
 8005a26:	461a      	mov	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	b2ca      	uxtb	r2, r1
 8005a2e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005a30:	7dbb      	ldrb	r3, [r7, #22]
 8005a32:	3301      	adds	r3, #1
 8005a34:	75bb      	strb	r3, [r7, #22]
 8005a36:	7d3a      	ldrb	r2, [r7, #20]
 8005a38:	7dbb      	ldrb	r3, [r7, #22]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d2e4      	bcs.n	8005a08 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8005a3e:	e167      	b.n	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	7819      	ldrb	r1, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a18      	ldr	r0, [r3, #32]
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	4413      	add	r3, r2
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4403      	add	r3, r0
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4403      	add	r3, r0
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
      break;
 8005a6e:	e14f      	b.n	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4413      	add	r3, r2
 8005a76:	7819      	ldrb	r1, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	4413      	add	r3, r2
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	4403      	add	r3, r0
 8005a8e:	7a1a      	ldrb	r2, [r3, #8]
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4403      	add	r3, r0
 8005a96:	430a      	orrs	r2, r1
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75bb      	strb	r3, [r7, #22]
 8005aa0:	e016      	b.n	8005ad0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	f1c3 0303 	rsb	r3, r3, #3
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	fa22 f103 	lsr.w	r1, r2, r3
 8005ab8:	7dbb      	ldrb	r3, [r7, #22]
 8005aba:	005a      	lsls	r2, r3, #1
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	4413      	add	r3, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	b2ca      	uxtb	r2, r1
 8005ac8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005aca:	7dbb      	ldrb	r3, [r7, #22]
 8005acc:	3301      	adds	r3, #1
 8005ace:	75bb      	strb	r3, [r7, #22]
 8005ad0:	7dbb      	ldrb	r3, [r7, #22]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d9e5      	bls.n	8005aa2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8005ad6:	e11b      	b.n	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	7819      	ldrb	r1, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	4413      	add	r3, r2
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4413      	add	r3, r2
 8005af4:	4403      	add	r3, r0
 8005af6:	7a1a      	ldrb	r2, [r3, #8]
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4403      	add	r3, r0
 8005afe:	430a      	orrs	r2, r1
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
      break;
 8005b04:	e104      	b.n	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	7819      	ldrb	r1, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	4413      	add	r3, r2
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	4403      	add	r3, r0
 8005b24:	7a1a      	ldrb	r2, [r3, #8]
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4403      	add	r3, r0
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b32:	2301      	movs	r3, #1
 8005b34:	75bb      	strb	r3, [r7, #22]
 8005b36:	e016      	b.n	8005b66 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	4413      	add	r3, r2
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	7dbb      	ldrb	r3, [r7, #22]
 8005b44:	f1c3 0303 	rsb	r3, r3, #3
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	fa22 f103 	lsr.w	r1, r2, r3
 8005b4e:	7dbb      	ldrb	r3, [r7, #22]
 8005b50:	005a      	lsls	r2, r3, #1
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	4413      	add	r3, r2
 8005b56:	461a      	mov	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	b2ca      	uxtb	r2, r1
 8005b5e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b60:	7dbb      	ldrb	r3, [r7, #22]
 8005b62:	3301      	adds	r3, #1
 8005b64:	75bb      	strb	r3, [r7, #22]
 8005b66:	7dbb      	ldrb	r3, [r7, #22]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d9e5      	bls.n	8005b38 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005b6c:	e0d0      	b.n	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75bb      	strb	r3, [r7, #22]
 8005b72:	e016      	b.n	8005ba2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	7dbb      	ldrb	r3, [r7, #22]
 8005b80:	f1c3 0303 	rsb	r3, r3, #3
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	fa22 f103 	lsr.w	r1, r2, r3
 8005b8a:	7dbb      	ldrb	r3, [r7, #22]
 8005b8c:	005a      	lsls	r2, r3, #1
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	4413      	add	r3, r2
 8005b92:	461a      	mov	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	b2ca      	uxtb	r2, r1
 8005b9a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b9c:	7dbb      	ldrb	r3, [r7, #22]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	75bb      	strb	r3, [r7, #22]
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d9e5      	bls.n	8005b74 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005ba8:	e0b2      	b.n	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	7819      	ldrb	r1, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	4403      	add	r3, r0
 8005bc8:	7a1a      	ldrb	r2, [r3, #8]
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4403      	add	r3, r0
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75bb      	strb	r3, [r7, #22]
 8005bda:	e016      	b.n	8005c0a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	4413      	add	r3, r2
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	7dbb      	ldrb	r3, [r7, #22]
 8005be8:	f1c3 0303 	rsb	r3, r3, #3
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	fa22 f103 	lsr.w	r1, r2, r3
 8005bf2:	7dbb      	ldrb	r3, [r7, #22]
 8005bf4:	005a      	lsls	r2, r3, #1
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	b2ca      	uxtb	r2, r1
 8005c02:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c04:	7dbb      	ldrb	r3, [r7, #22]
 8005c06:	3301      	adds	r3, #1
 8005c08:	75bb      	strb	r3, [r7, #22]
 8005c0a:	7dbb      	ldrb	r3, [r7, #22]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d9e5      	bls.n	8005bdc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005c10:	e07e      	b.n	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	4413      	add	r3, r2
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	b259      	sxtb	r1, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	4413      	add	r3, r2
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	4403      	add	r3, r0
 8005c32:	791b      	ldrb	r3, [r3, #4]
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	b259      	sxtb	r1, r3
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4413      	add	r3, r2
 8005c42:	b2ca      	uxtb	r2, r1
 8005c44:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	7819      	ldrb	r1, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4413      	add	r3, r2
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	4403      	add	r3, r0
 8005c64:	7a1a      	ldrb	r2, [r3, #8]
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4403      	add	r3, r0
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c72:	2301      	movs	r3, #1
 8005c74:	75bb      	strb	r3, [r7, #22]
 8005c76:	e016      	b.n	8005ca6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4413      	add	r3, r2
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	7dbb      	ldrb	r3, [r7, #22]
 8005c84:	f1c3 0303 	rsb	r3, r3, #3
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	fa22 f103 	lsr.w	r1, r2, r3
 8005c8e:	7dbb      	ldrb	r3, [r7, #22]
 8005c90:	005a      	lsls	r2, r3, #1
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	4413      	add	r3, r2
 8005c96:	461a      	mov	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	b2ca      	uxtb	r2, r1
 8005c9e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005ca0:	7dbb      	ldrb	r3, [r7, #22]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	75bb      	strb	r3, [r7, #22]
 8005ca6:	7dbb      	ldrb	r3, [r7, #22]
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d9e5      	bls.n	8005c78 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005cac:	e030      	b.n	8005d10 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b259      	sxtb	r1, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	4403      	add	r3, r0
 8005cce:	791b      	ldrb	r3, [r3, #4]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	b259      	sxtb	r1, r3
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	b2ca      	uxtb	r2, r1
 8005ce0:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	7819      	ldrb	r1, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	4403      	add	r3, r0
 8005d00:	7a1a      	ldrb	r2, [r3, #8]
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4403      	add	r3, r0
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
      break;
 8005d0e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	3301      	adds	r3, #1
 8005d14:	75fb      	strb	r3, [r7, #23]
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	f67f ae0a 	bls.w	8005932 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005d38:	edd7 7a00 	vldr	s15, [r7]
 8005d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d44:	db1e      	blt.n	8005d84 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005d46:	edd7 7a00 	vldr	s15, [r7]
 8005d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d4e:	ee17 2a90 	vmov	r2, s15
 8005d52:	edd7 7a00 	vldr	s15, [r7]
 8005d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d5e:	ed97 7a00 	vldr	s14, [r7]
 8005d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d72:	bf4c      	ite	mi
 8005d74:	2301      	movmi	r3, #1
 8005d76:	2300      	movpl	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f083 0301 	eor.w	r3, r3, #1
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	e01a      	b.n	8005dba <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005d84:	edd7 7a00 	vldr	s15, [r7]
 8005d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d8c:	ee17 2a90 	vmov	r2, s15
 8005d90:	edd7 7a00 	vldr	s15, [r7]
 8005d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9c:	ed97 7a00 	vldr	s14, [r7]
 8005da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8005da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db0:	d501      	bpl.n	8005db6 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005db6:	2300      	movs	r3, #0
 8005db8:	1ad3      	subs	r3, r2, r3
        }
    }
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b086      	sub	sp, #24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6918      	ldr	r0, [r3, #16]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8a9b      	ldrh	r3, [r3, #20]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	4619      	mov	r1, r3
 8005de0:	f008 fe6c 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6998      	ldr	r0, [r3, #24]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	2364      	movs	r3, #100	@ 0x64
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	f009 fe94 	bl	800fb1a <HAL_SPI_Receive>
 8005df2:	4603      	mov	r3, r0
 8005df4:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6918      	ldr	r0, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8a9b      	ldrh	r3, [r3, #20]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4619      	mov	r1, r3
 8005e02:	f008 fe5b 	bl	800eabc <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e06:	7dfb      	ldrb	r3, [r7, #23]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e10:	2300      	movs	r3, #0
    }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	4613      	mov	r3, r2
 8005e26:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6918      	ldr	r0, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8a9b      	ldrh	r3, [r3, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	4619      	mov	r1, r3
 8005e34:	f008 fe42 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6998      	ldr	r0, [r3, #24]
 8005e3c:	88fa      	ldrh	r2, [r7, #6]
 8005e3e:	2364      	movs	r3, #100	@ 0x64
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	f009 fd2e 	bl	800f8a2 <HAL_SPI_Transmit>
 8005e46:	4603      	mov	r3, r0
 8005e48:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6918      	ldr	r0, [r3, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8a9b      	ldrh	r3, [r3, #20]
 8005e52:	2201      	movs	r2, #1
 8005e54:	4619      	mov	r1, r3
 8005e56:	f008 fe31 	bl	800eabc <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e64:	2300      	movs	r3, #0
    }
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b088      	sub	sp, #32
 8005e72:	af02      	add	r7, sp, #8
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6918      	ldr	r0, [r3, #16]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8a9b      	ldrh	r3, [r3, #20]
 8005e84:	2200      	movs	r2, #0
 8005e86:	4619      	mov	r1, r3
 8005e88:	f008 fe18 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6998      	ldr	r0, [r3, #24]
 8005e90:	887b      	ldrh	r3, [r7, #2]
 8005e92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e96:	9200      	str	r2, [sp, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	f009 ff4e 	bl	800fd3c <HAL_SPI_TransmitReceive>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6918      	ldr	r0, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8a9b      	ldrh	r3, [r3, #20]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f008 fe01 	bl	800eabc <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e008      	b.n	8005ed0 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6918      	ldr	r0, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8a9b      	ldrh	r3, [r3, #20]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f008 fdf7 	bl	800eabc <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005ece:	2300      	movs	r3, #0
    }
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005eee:	681c      	ldr	r4, [r3, #0]
 8005ef0:	887b      	ldrh	r3, [r7, #2]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	47a0      	blx	r4
    }
 8005efa:	bf00      	nop
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd90      	pop	{r4, r7, pc}

08005f02 <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
 8005f1c:	4603      	mov	r3, r0
    }
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
 8005f3c:	4603      	mov	r3, r0
    }
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	4611      	mov	r1, r2
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	4798      	blx	r3
 8005f64:	4603      	mov	r3, r0
    }
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005f6e:	b590      	push	{r4, r7, lr}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005f7e:	681c      	ldr	r4, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	47a0      	blx	r4
 8005f98:	4603      	mov	r3, r0
    }
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd90      	pop	{r4, r7, pc}

08005fa2 <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8005fa2:	b590      	push	{r4, r7, lr}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005fb2:	681c      	ldr	r4, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	47a0      	blx	r4
 8005fcc:	4603      	mov	r3, r0
    }
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd90      	pop	{r4, r7, pc}

08005fd6 <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8005fd6:	b5b0      	push	{r4, r5, r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fe6:	681c      	ldr	r4, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8005ff0:	681d      	ldr	r5, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2103      	movs	r1, #3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	4798      	blx	r3
 8006002:	4603      	mov	r3, r0
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	47a8      	blx	r5
 800600a:	eef0 7a40 	vmov.f32	s15, s0
 800600e:	eeb0 0a67 	vmov.f32	s0, s15
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	47a0      	blx	r4
 8006016:	4603      	mov	r3, r0
    }
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bdb0      	pop	{r4, r5, r7, pc}

08006020 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8006020:	b5b0      	push	{r4, r5, r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006030:	681c      	ldr	r4, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800603a:	681d      	ldr	r5, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2106      	movs	r1, #6
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
 800604c:	4603      	mov	r3, r0
 800604e:	b29b      	uxth	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	47a8      	blx	r5
 8006056:	eef0 7a40 	vmov.f32	s15, s0
 800605a:	eeb0 0a67 	vmov.f32	s0, s15
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	47a0      	blx	r4
 8006062:	4603      	mov	r3, r0
    }
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bdb0      	pop	{r4, r5, r7, pc}

0800606c <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 800606c:	b5b0      	push	{r4, r5, r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800607c:	681c      	ldr	r4, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006086:	681d      	ldr	r5, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2107      	movs	r1, #7
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
 8006098:	4603      	mov	r3, r0
 800609a:	b29b      	uxth	r3, r3
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	47a8      	blx	r5
 80060a2:	eef0 7a40 	vmov.f32	s15, s0
 80060a6:	eeb0 0a67 	vmov.f32	s0, s15
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	47a0      	blx	r4
 80060ae:	4603      	mov	r3, r0
    }
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bdb0      	pop	{r4, r5, r7, pc}

080060b8 <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 80060b8:	b5b0      	push	{r4, r5, r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060c8:	681c      	ldr	r4, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80060d2:	681d      	ldr	r5, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2104      	movs	r1, #4
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
 80060e4:	4603      	mov	r3, r0
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	47a8      	blx	r5
 80060ee:	eef0 7a40 	vmov.f32	s15, s0
 80060f2:	eeb0 0a67 	vmov.f32	s0, s15
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	47a0      	blx	r4
 80060fa:	4603      	mov	r3, r0
    }
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bdb0      	pop	{r4, r5, r7, pc}

08006104 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8006104:	b5b0      	push	{r4, r5, r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006114:	681c      	ldr	r4, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800611e:	681d      	ldr	r5, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2105      	movs	r1, #5
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4798      	blx	r3
 8006130:	4603      	mov	r3, r0
 8006132:	b29b      	uxth	r3, r3
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	47a8      	blx	r5
 800613a:	eef0 7a40 	vmov.f32	s15, s0
 800613e:	eeb0 0a67 	vmov.f32	s0, s15
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	47a0      	blx	r4
 8006146:	4603      	mov	r3, r0
    }
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bdb0      	pop	{r4, r5, r7, pc}

08006150 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2104      	movs	r1, #4
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
 8006168:	4603      	mov	r3, r0
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 8006172:	2300      	movs	r3, #0
    }
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	b2d1      	uxtb	r1, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	4798      	blx	r3
    }
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
    }
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 80061c2:	b590      	push	{r4, r7, lr}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061d2:	681c      	ldr	r4, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2100      	movs	r1, #0
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	2102      	movs	r1, #2
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	47a0      	blx	r4
    }
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd90      	pop	{r4, r7, pc}

080061f6 <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 80061f6:	b590      	push	{r4, r7, lr}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006208:	681c      	ldr	r4, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	2102      	movs	r1, #2
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	47a0      	blx	r4
    }
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bd90      	pop	{r4, r7, pc}

0800622c <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 800622c:	b590      	push	{r4, r7, lr}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800623e:	681c      	ldr	r4, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	ee07 2a90 	vmov	s15, r2
 8006250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006254:	eeb0 0a67 	vmov.f32	s0, s15
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	2106      	movs	r1, #6
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	47a0      	blx	r4
        return true;
 8006266:	2301      	movs	r3, #1
    }
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}

08006270 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8006270:	b590      	push	{r4, r7, lr}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006282:	681c      	ldr	r4, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	ee07 2a90 	vmov	s15, r2
 8006294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006298:	eeb0 0a67 	vmov.f32	s0, s15
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	2107      	movs	r1, #7
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	47a0      	blx	r4
        return true;
 80062aa:	2301      	movs	r3, #1
    }
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd90      	pop	{r4, r7, pc}

080062b4 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80062c6:	681c      	ldr	r4, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	ee07 2a90 	vmov	s15, r2
 80062d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062dc:	eeb0 0a67 	vmov.f32	s0, s15
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
 80062e4:	4603      	mov	r3, r0
 80062e6:	461a      	mov	r2, r3
 80062e8:	2104      	movs	r1, #4
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	47a0      	blx	r4
        return true;
 80062ee:	2301      	movs	r3, #1
    }
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 80062f8:	b590      	push	{r4, r7, lr}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800630a:	681c      	ldr	r4, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	ee07 2a90 	vmov	s15, r2
 800631c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006320:	eeb0 0a67 	vmov.f32	s0, s15
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
 800632c:	2105      	movs	r1, #5
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	47a0      	blx	r4
        return true;
 8006332:	2301      	movs	r3, #1
    }
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	bd90      	pop	{r4, r7, pc}

0800633c <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	2b07      	cmp	r3, #7
 800634c:	d901      	bls.n	8006352 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 800634e:	2300      	movs	r3, #0
 8006350:	e00f      	b.n	8006372 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3380      	adds	r3, #128	@ 0x80
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	2115      	movs	r1, #21
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
        return true;
 8006370:	2301      	movs	r3, #1
    }
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 800637a:	b590      	push	{r4, r7, lr}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800638c:	681c      	ldr	r4, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
 800639e:	4603      	mov	r3, r0
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	47a0      	blx	r4
    }
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}

080063ae <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80063ae:	b5b0      	push	{r4, r5, r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	4613      	mov	r3, r2
 80063ba:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80063c4:	681c      	ldr	r4, [r3, #0]
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 80063cc:	2501      	movs	r5, #1
 80063ce:	e000      	b.n	80063d2 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 80063d0:	2500      	movs	r5, #0
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	4798      	blx	r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	461a      	mov	r2, r3
 80063e6:	4629      	mov	r1, r5
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	47a0      	blx	r4
    }
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bdb0      	pop	{r4, r5, r7, pc}

080063f4 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
    }
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4798      	blx	r3
    }
 8006428:	bf00      	nop
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8006430:	b5b0      	push	{r4, r5, r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	607b      	str	r3, [r7, #4]
 800643a:	460b      	mov	r3, r1
 800643c:	72fb      	strb	r3, [r7, #11]
 800643e:	4613      	mov	r3, r2
 8006440:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800644a:	681c      	ldr	r4, [r3, #0]
 800644c:	7abb      	ldrb	r3, [r7, #10]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006452:	2501      	movs	r5, #1
 8006454:	e000      	b.n	8006458 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006456:	2500      	movs	r5, #0
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	ee07 2a90 	vmov	s15, r2
 8006468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646c:	eeb0 0a67 	vmov.f32	s0, s15
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	4798      	blx	r3
 8006474:	4603      	mov	r3, r0
 8006476:	7af9      	ldrb	r1, [r7, #11]
 8006478:	462a      	mov	r2, r5
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	47a0      	blx	r4
    }
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bdb0      	pop	{r4, r5, r7, pc}

08006486 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8006486:	b5b0      	push	{r4, r5, r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800649a:	681c      	ldr	r4, [r3, #0]
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 80064a2:	2501      	movs	r5, #1
 80064a4:	e000      	b.n	80064a8 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 80064a6:	2500      	movs	r5, #0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2106      	movs	r1, #6
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
 80064b8:	4603      	mov	r3, r0
 80064ba:	461a      	mov	r2, r3
 80064bc:	4629      	mov	r1, r5
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	47a0      	blx	r4
    }
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bdb0      	pop	{r4, r5, r7, pc}

080064ca <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80064ca:	b5b0      	push	{r4, r5, r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	460b      	mov	r3, r1
 80064d4:	607a      	str	r2, [r7, #4]
 80064d6:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80064e0:	681c      	ldr	r4, [r3, #0]
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 80064e8:	2501      	movs	r5, #1
 80064ea:	e000      	b.n	80064ee <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 80064ec:	2500      	movs	r5, #0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	ee07 2a90 	vmov	s15, r2
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eeb0 0a67 	vmov.f32	s0, s15
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	4798      	blx	r3
 800650a:	4603      	mov	r3, r0
 800650c:	461a      	mov	r2, r3
 800650e:	4629      	mov	r1, r5
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	47a0      	blx	r4
    }
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bdb0      	pop	{r4, r5, r7, pc}

0800651c <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	460b      	mov	r3, r1
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	7afa      	ldrb	r2, [r7, #11]
 8006536:	2a01      	cmp	r2, #1
 8006538:	d101      	bne.n	800653e <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 800653a:	2101      	movs	r1, #1
 800653c:	e000      	b.n	8006540 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 800653e:	2100      	movs	r1, #0
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	4798      	blx	r3
    }
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
    }
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
    }
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
    }
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
    }
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80065ce:	bf00      	nop
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2101      	movs	r1, #1
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf0c      	ite	eq
 80065e6:	2301      	moveq	r3, #1
 80065e8:	2300      	movne	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1ef      	bne.n	80065d0 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3380      	adds	r3, #128	@ 0x80
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	2a01      	cmp	r2, #1
 8006620:	d101      	bne.n	8006626 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8006622:	2201      	movs	r2, #1
 8006624:	e000      	b.n	8006628 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8006626:	2200      	movs	r2, #0
 8006628:	4611      	mov	r1, r2
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
    }
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
 8006642:	4613      	mov	r3, r2
 8006644:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	78ba      	ldrb	r2, [r7, #2]
 8006652:	2a01      	cmp	r2, #1
 8006654:	d101      	bne.n	800665a <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006656:	2201      	movs	r2, #1
 8006658:	e000      	b.n	800665c <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800665a:	2200      	movs	r2, #0
 800665c:	78f9      	ldrb	r1, [r7, #3]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
    }
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
    }
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	4611      	mov	r1, r2
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2100      	movs	r1, #0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2102      	movs	r1, #2
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006724:	bf00      	nop
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2103      	movs	r1, #3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2203      	movs	r2, #3
 8006748:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2106      	movs	r1, #6
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2204      	movs	r2, #4
 8006770:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2107      	movs	r1, #7
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2205      	movs	r2, #5
 8006798:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2104      	movs	r1, #4
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2206      	movs	r2, #6
 80067c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2105      	movs	r1, #5
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2207      	movs	r2, #7
 80067e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 80067fc:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8006804:	4b09      	ldr	r3, [pc, #36]	@ (800682c <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006806:	2201      	movs	r2, #1
 8006808:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4906      	ldr	r1, [pc, #24]	@ (8006830 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2208      	movs	r2, #8
 800681e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000249 	.word	0x20000249
 8006830:	2000024c 	.word	0x2000024c

08006834 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	b2d1      	uxtb	r1, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800685c:	bf00      	nop
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2200      	movs	r2, #0
 800689e:	2102      	movs	r1, #2
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2209      	movs	r2, #9
 80068a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068c6:	681c      	ldr	r4, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	2102      	movs	r1, #2
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd90      	pop	{r4, r7, pc}

080068f2 <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 80068f2:	b590      	push	{r4, r7, lr}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006904:	681c      	ldr	r4, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	ee07 2a90 	vmov	s15, r2
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	eeb0 0a67 	vmov.f32	s0, s15
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
 8006922:	4603      	mov	r3, r0
 8006924:	461a      	mov	r2, r3
 8006926:	2103      	movs	r1, #3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bd90      	pop	{r4, r7, pc}

0800693c <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800694e:	681c      	ldr	r4, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	ee07 2a90 	vmov	s15, r2
 8006960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006964:	eeb0 0a67 	vmov.f32	s0, s15
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	2106      	movs	r1, #6
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	bd90      	pop	{r4, r7, pc}

08006986 <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8006986:	b590      	push	{r4, r7, lr}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006998:	681c      	ldr	r4, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	ee07 2a90 	vmov	s15, r2
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	eeb0 0a67 	vmov.f32	s0, s15
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	2107      	movs	r1, #7
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd90      	pop	{r4, r7, pc}

080069d0 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80069e2:	681c      	ldr	r4, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	ee07 2a90 	vmov	s15, r2
 80069f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f8:	eeb0 0a67 	vmov.f32	s0, s15
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	4603      	mov	r3, r0
 8006a02:	461a      	mov	r2, r3
 8006a04:	2104      	movs	r1, #4
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd90      	pop	{r4, r7, pc}

08006a1a <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8006a1a:	b590      	push	{r4, r7, lr}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006a2c:	681c      	ldr	r4, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	ee07 2a90 	vmov	s15, r2
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eeb0 0a67 	vmov.f32	s0, s15
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2105      	movs	r1, #5
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd90      	pop	{r4, r7, pc}

08006a64 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8006a76:	681c      	ldr	r4, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd90      	pop	{r4, r7, pc}

08006aa0 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006aa0:	b5b0      	push	{r4, r5, r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8006ab6:	681c      	ldr	r4, [r3, #0]
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8006abe:	2501      	movs	r5, #1
 8006ac0:	e000      	b.n	8006ac4 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006ac2:	2500      	movs	r5, #0
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	4798      	blx	r3
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4629      	mov	r1, r5
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bdb0      	pop	{r4, r5, r7, pc}

08006aee <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006b3a:	b5b0      	push	{r4, r5, r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	72fb      	strb	r3, [r7, #11]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006b54:	681c      	ldr	r4, [r3, #0]
 8006b56:	7abb      	ldrb	r3, [r7, #10]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006b5c:	2501      	movs	r5, #1
 8006b5e:	e000      	b.n	8006b62 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006b60:	2500      	movs	r5, #0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	ee07 2a90 	vmov	s15, r2
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eeb0 0a67 	vmov.f32	s0, s15
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	7af9      	ldrb	r1, [r7, #11]
 8006b82:	462a      	mov	r2, r5
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bdb0      	pop	{r4, r5, r7, pc}

08006b98 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006b98:	b5b0      	push	{r4, r5, r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006bac:	681c      	ldr	r4, [r3, #0]
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006bb4:	2501      	movs	r5, #1
 8006bb6:	e000      	b.n	8006bba <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006bb8:	2500      	movs	r5, #0
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2106      	movs	r1, #6
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4629      	mov	r1, r5
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bdb0      	pop	{r4, r5, r7, pc}

08006be4 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006be4:	b5b0      	push	{r4, r5, r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	460b      	mov	r3, r1
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006bfa:	681c      	ldr	r4, [r3, #0]
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006c02:	2501      	movs	r5, #1
 8006c04:	e000      	b.n	8006c08 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006c06:	2500      	movs	r5, #0
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	ee07 2a90 	vmov	s15, r2
 8006c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	4798      	blx	r3
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	4629      	mov	r1, r5
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bdb0      	pop	{r4, r5, r7, pc}

08006c3e <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	460b      	mov	r3, r1
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	7afa      	ldrb	r2, [r7, #11]
 8006c58:	2a01      	cmp	r2, #1
 8006c5a:	d101      	bne.n	8006c60 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	e000      	b.n	8006c62 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006c60:	2100      	movs	r1, #0
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	2a01      	cmp	r2, #1
 8006d2a:	d101      	bne.n	8006d30 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	e000      	b.n	8006d32 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006d30:	2200      	movs	r2, #0
 8006d32:	4611      	mov	r1, r2
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
 8006d54:	4613      	mov	r3, r2
 8006d56:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	78ba      	ldrb	r2, [r7, #2]
 8006d64:	2a01      	cmp	r2, #1
 8006d66:	d101      	bne.n	8006d6c <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006d68:	2201      	movs	r2, #1
 8006d6a:	e000      	b.n	8006d6e <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	78f9      	ldrb	r1, [r7, #3]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
 8006dc0:	4603      	mov	r3, r0
    }
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006de4:	b5b0      	push	{r4, r5, r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006df4:	3b01      	subs	r3, #1
 8006df6:	2b07      	cmp	r3, #7
 8006df8:	f200 80fe 	bhi.w	8006ff8 <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006e04 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e25 	.word	0x08006e25
 8006e08:	08006e51 	.word	0x08006e51
 8006e0c:	08006e7f 	.word	0x08006e7f
 8006e10:	08006ec3 	.word	0x08006ec3
 8006e14:	08006f09 	.word	0x08006f09
 8006e18:	08006f4f 	.word	0x08006f4f
 8006e1c:	08006f95 	.word	0x08006f95
 8006e20:	08006fdb 	.word	0x08006fdb
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006e2c:	681c      	ldr	r4, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6a12      	ldr	r2, [r2, #32]
 8006e3c:	7b92      	ldrb	r2, [r2, #14]
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	47a0      	blx	r4
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	e0d4      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006e58:	681c      	ldr	r4, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6a12      	ldr	r2, [r2, #32]
 8006e68:	3228      	adds	r2, #40	@ 0x28
 8006e6a:	7b92      	ldrb	r2, [r2, #14]
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	47a0      	blx	r4
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	e0bd      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e86:	681c      	ldr	r4, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6a12      	ldr	r2, [r2, #32]
 8006ea0:	323c      	adds	r2, #60	@ 0x3c
 8006ea2:	7b92      	ldrb	r2, [r2, #14]
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	47a8      	blx	r5
 8006eb2:	eef0 7a40 	vmov.f32	s15, s0
 8006eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	47a0      	blx	r4
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	e09b      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006eca:	681c      	ldr	r4, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ed4:	681d      	ldr	r5, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6a12      	ldr	r2, [r2, #32]
 8006ee4:	3278      	adds	r2, #120	@ 0x78
 8006ee6:	7b92      	ldrb	r2, [r2, #14]
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	47a8      	blx	r5
 8006ef8:	eef0 7a40 	vmov.f32	s15, s0
 8006efc:	eeb0 0a67 	vmov.f32	s0, s15
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	47a0      	blx	r4
 8006f04:	4603      	mov	r3, r0
 8006f06:	e078      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f10:	681c      	ldr	r4, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006f1a:	681d      	ldr	r5, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6a12      	ldr	r2, [r2, #32]
 8006f2a:	328c      	adds	r2, #140	@ 0x8c
 8006f2c:	7b92      	ldrb	r2, [r2, #14]
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	47a8      	blx	r5
 8006f3e:	eef0 7a40 	vmov.f32	s15, s0
 8006f42:	eeb0 0a67 	vmov.f32	s0, s15
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	47a0      	blx	r4
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	e055      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f56:	681c      	ldr	r4, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6a12      	ldr	r2, [r2, #32]
 8006f70:	3250      	adds	r2, #80	@ 0x50
 8006f72:	7b92      	ldrb	r2, [r2, #14]
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	47a8      	blx	r5
 8006f84:	eef0 7a40 	vmov.f32	s15, s0
 8006f88:	eeb0 0a67 	vmov.f32	s0, s15
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	47a0      	blx	r4
 8006f90:	4603      	mov	r3, r0
 8006f92:	e032      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f9c:	681c      	ldr	r4, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006fa6:	681d      	ldr	r5, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6a12      	ldr	r2, [r2, #32]
 8006fb6:	3264      	adds	r2, #100	@ 0x64
 8006fb8:	7b92      	ldrb	r2, [r2, #14]
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	47a8      	blx	r5
 8006fca:	eef0 7a40 	vmov.f32	s15, s0
 8006fce:	eeb0 0a67 	vmov.f32	s0, s15
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	47a0      	blx	r4
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	e00f      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2104      	movs	r1, #4
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e002      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e000      	b.n	8006ffa <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8006ff8:	2300      	movs	r3, #0
    }
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bdb0      	pop	{r4, r5, r7, pc}
 8007002:	bf00      	nop

08007004 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6898      	ldr	r0, [r3, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	899b      	ldrh	r3, [r3, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	4619      	mov	r1, r3
 8007018:	f007 fd50 	bl	800eabc <HAL_GPIO_WritePin>
    }
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007034:	d303      	bcc.n	800703e <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800703c:	e000      	b.n	8007040 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800703e:	683b      	ldr	r3, [r7, #0]
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	db05      	blt.n	8007068 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007062:	da01      	bge.n	8007068 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	e00c      	b.n	8007082 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800706e:	db06      	blt.n	800707e <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	da03      	bge.n	800707e <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800707c:	e001      	b.n	8007082 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800707e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80070bc <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 80070a8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80070ac:	eeb0 0a67 	vmov.f32	s0, s15
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	3c74242a 	.word	0x3c74242a

080070c0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 80070cc:	edd7 7a00 	vldr	s15, [r7]
 80070d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007104 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 80070d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070dc:	d80a      	bhi.n	80070f4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 80070de:	ed97 7a00 	vldr	s14, [r7]
 80070e2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007108 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 80070e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ee:	ee17 3a90 	vmov	r3, s15
 80070f2:	e000      	b.n	80070f6 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	4674241b 	.word	0x4674241b
 8007108:	3c74242a 	.word	0x3c74242a

0800710c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 8007118:	887b      	ldrh	r3, [r7, #2]
 800711a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800711e:	d209      	bcs.n	8007134 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8007120:	887b      	ldrh	r3, [r7, #2]
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800712a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007148 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 800712e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007132:	e001      	b.n	8007138 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8007134:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800714c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 8007138:	eeb0 0a67 	vmov.f32	s0, s15
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	4168d4fe 	.word	0x4168d4fe
 800714c:	00000000 	.word	0x00000000

08007150 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800715c:	edd7 7a00 	vldr	s15, [r7]
 8007160:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007194 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 8007164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716c:	d80b      	bhi.n	8007186 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800716e:	ed97 7a00 	vldr	s14, [r7]
 8007172:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007198 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 8007176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800717a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717e:	ee17 3a90 	vmov	r3, s15
 8007182:	b29b      	uxth	r3, r3
 8007184:	e000      	b.n	8007188 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	4768c671 	.word	0x4768c671
 8007198:	4168d4fe 	.word	0x4168d4fe

0800719c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 80071a8:	887b      	ldrh	r3, [r7, #2]
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ae:	d209      	bcs.n	80071c4 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 80071b0:	887b      	ldrh	r3, [r7, #2]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80071d8 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 80071be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071c2:	e001      	b.n	80071c8 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80071c4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80071dc <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 80071c8:	eeb0 0a67 	vmov.f32	s0, s15
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	4168d4fe 	.word	0x4168d4fe
 80071dc:	00000000 	.word	0x00000000

080071e0 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80071ec:	edd7 7a00 	vldr	s15, [r7]
 80071f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007224 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 80071f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fc:	d80b      	bhi.n	8007216 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80071fe:	ed97 7a00 	vldr	s14, [r7]
 8007202:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007228 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 8007206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800720a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720e:	ee17 3a90 	vmov	r3, s15
 8007212:	b29b      	uxth	r3, r3
 8007214:	e000      	b.n	8007218 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	4768c671 	.word	0x4768c671
 8007228:	4168d4fe 	.word	0x4168d4fe

0800722c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8007238:	887b      	ldrh	r3, [r7, #2]
 800723a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723e:	d209      	bcs.n	8007254 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8007240:	887b      	ldrh	r3, [r7, #2]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800724a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007268 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800724e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007252:	e001      	b.n	8007258 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007254:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800726c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8007258:	eeb0 0a67 	vmov.f32	s0, s15
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	4174240b 	.word	0x4174240b
 800726c:	00000000 	.word	0x00000000

08007270 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800727c:	edd7 7a00 	vldr	s15, [r7]
 8007280:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80072b4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8007284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728c:	d80b      	bhi.n	80072a6 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800728e:	ed97 7a00 	vldr	s14, [r7]
 8007292:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80072b8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8007296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800729a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729e:	ee17 3a90 	vmov	r3, s15
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	e000      	b.n	80072a8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	4673e702 	.word	0x4673e702
 80072b8:	4174240b 	.word	0x4174240b

080072bc <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80072c8:	887b      	ldrh	r3, [r7, #2]
 80072ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ce:	d209      	bcs.n	80072e4 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80072d0:	887b      	ldrh	r3, [r7, #2]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072da:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80072f8 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 80072de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072e2:	e001      	b.n	80072e8 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80072e4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80072fc <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 80072e8:	eeb0 0a67 	vmov.f32	s0, s15
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	3e742401 	.word	0x3e742401
 80072fc:	00000000 	.word	0x00000000

08007300 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800730c:	edd7 7a00 	vldr	s15, [r7]
 8007310:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007344 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 8007314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731c:	d80b      	bhi.n	8007336 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800731e:	ed97 7a00 	vldr	s14, [r7]
 8007322:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007348 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 8007326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800732a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732e:	ee17 3a90 	vmov	r3, s15
 8007332:	b29b      	uxth	r3, r3
 8007334:	e000      	b.n	8007338 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	447414bf 	.word	0x447414bf
 8007348:	3e742401 	.word	0x3e742401

0800734c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8007358:	887b      	ldrh	r3, [r7, #2]
 800735a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800735e:	d219      	bcs.n	8007394 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007360:	887b      	ldrh	r3, [r7, #2]
 8007362:	4618      	mov	r0, r3
 8007364:	f7f9 f90e 	bl	8000584 <__aeabi_i2d>
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	4b0e      	ldr	r3, [pc, #56]	@ (80073a8 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800736e:	f7f8 ffbd 	bl	80002ec <__adddf3>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4610      	mov	r0, r2
 8007378:	4619      	mov	r1, r3
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	4b0b      	ldr	r3, [pc, #44]	@ (80073ac <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8007380:	f7f9 f96a 	bl	8000658 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4610      	mov	r0, r2
 800738a:	4619      	mov	r1, r3
 800738c:	f7f9 fc5c 	bl	8000c48 <__aeabi_d2f>
 8007390:	4603      	mov	r3, r0
 8007392:	e001      	b.n	8007398 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 8007394:	f04f 0300 	mov.w	r3, #0
}
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eeb0 0a67 	vmov.f32	s0, s15
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	3fe00000 	.word	0x3fe00000
 80073ac:	402e8000 	.word	0x402e8000

080073b0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80073bc:	edd7 7a00 	vldr	s15, [r7]
 80073c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80073fc <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 80073c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073cc:	d80f      	bhi.n	80073ee <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80073ce:	ed97 7a00 	vldr	s14, [r7]
 80073d2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8007400 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 80073d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80073de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e6:	ee17 3a90 	vmov	r3, s15
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	e000      	b.n	80073f0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	4673e180 	.word	0x4673e180
 8007400:	41740000 	.word	0x41740000

08007404 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8007410:	887b      	ldrh	r3, [r7, #2]
 8007412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007416:	d209      	bcs.n	800742c <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8007418:	887b      	ldrh	r3, [r7, #2]
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007422:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007440 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8007426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800742a:	e001      	b.n	8007430 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800742c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007444 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8007430:	eeb0 0a67 	vmov.f32	s0, s15
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	3d7423f4 	.word	0x3d7423f4
 8007444:	00000000 	.word	0x00000000

08007448 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8007454:	edd7 7a00 	vldr	s15, [r7]
 8007458:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800748c <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 800745c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	d80b      	bhi.n	800747e <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8007466:	ed97 7a00 	vldr	s14, [r7]
 800746a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007490 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 800746e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007476:	ee17 3a90 	vmov	r3, s15
 800747a:	b29b      	uxth	r3, r3
 800747c:	e000      	b.n	8007480 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	44742023 	.word	0x44742023
 8007490:	3d7423f4 	.word	0x3d7423f4

08007494 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074aa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80074c0 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 80074ae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80074b2:	eeb0 0a67 	vmov.f32	s0, s15
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	3783956e 	.word	0x3783956e

080074c4 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80074d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80074d4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800750c <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 80074d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e0:	d80c      	bhi.n	80074fc <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80074e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80074e6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007510 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 80074ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80074f6:	793b      	ldrb	r3, [r7, #4]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	e000      	b.n	80074fe <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	3b8311d9 	.word	0x3b8311d9
 8007510:	3783956e 	.word	0x3783956e

08007514 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800752a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007540 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800752e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007532:	eeb0 0a67 	vmov.f32	s0, s15
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	3783956e 	.word	0x3783956e

08007544 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8007550:	edd7 7a02 	vldr	s15, [r7, #8]
 8007554:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800758c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8007558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007560:	d80c      	bhi.n	800757c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007562:	ed97 7a02 	vldr	s14, [r7, #8]
 8007566:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007590 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800756a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800756e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007572:	edc7 7a01 	vstr	s15, [r7, #4]
 8007576:	793b      	ldrb	r3, [r7, #4]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	e000      	b.n	800757e <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	3b8311d9 	.word	0x3b8311d9
 8007590:	3783956e 	.word	0x3783956e

08007594 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075aa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80075c0 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80075ae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80075b2:	eeb0 0a67 	vmov.f32	s0, s15
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	3783956e 	.word	0x3783956e

080075c4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80075d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80075d4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800760c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80075d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	d80c      	bhi.n	80075fc <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80075e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80075e6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007610 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 80075ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80075f6:	793b      	ldrb	r3, [r7, #4]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e000      	b.n	80075fe <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	3b8311d9 	.word	0x3b8311d9
 8007610:	3783956e 	.word	0x3783956e

08007614 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	2b0f      	cmp	r3, #15
 8007624:	d80a      	bhi.n	800763c <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	3301      	adds	r3, #1
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007632:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007650 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 8007636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800763a:	e001      	b.n	8007640 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800763c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007654 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 8007640:	eeb0 0a67 	vmov.f32	s0, s15
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	43bb8000 	.word	0x43bb8000
 8007654:	00000000 	.word	0x00000000

08007658 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8007664:	edd7 7a02 	vldr	s15, [r7, #8]
 8007668:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80076f4 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 800766c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007674:	d836      	bhi.n	80076e4 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 8007676:	ed97 7a02 	vldr	s14, [r7, #8]
 800767a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80076f8 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 800767e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007682:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007686:	edd7 7a05 	vldr	s15, [r7, #20]
 800768a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007692:	793b      	ldrb	r3, [r7, #4]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800769e:	ed97 7a05 	vldr	s14, [r7, #20]
 80076a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076a6:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 80076aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80076ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80076b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ba:	d50a      	bpl.n	80076d2 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80076bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80076c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80076c8:	793b      	ldrb	r3, [r7, #4]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	e009      	b.n	80076e6 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 80076d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80076d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076da:	edc7 7a01 	vstr	s15, [r7, #4]
 80076de:	793b      	ldrb	r3, [r7, #4]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	e000      	b.n	80076e6 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	45bb8000 	.word	0x45bb8000
 80076f8:	43bb8000 	.word	0x43bb8000

080076fc <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 8007708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800770c:	2b00      	cmp	r3, #0
 800770e:	db0a      	blt.n	8007726 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	3301      	adds	r3, #1
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800771c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007738 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 8007720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007724:	e001      	b.n	800772a <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 8007726:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800773c <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 800772a:	eeb0 0a67 	vmov.f32	s0, s15
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	41fa0000 	.word	0x41fa0000
 800773c:	00000000 	.word	0x00000000

08007740 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800774c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007750:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80077dc <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 8007754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775c:	d836      	bhi.n	80077cc <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800775e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007762:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80077e0 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 8007766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800776a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800776e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007776:	edc7 7a01 	vstr	s15, [r7, #4]
 800777a:	793b      	ldrb	r3, [r7, #4]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	ee07 3a90 	vmov	s15, r3
 8007782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007786:	ed97 7a05 	vldr	s14, [r7, #20]
 800778a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800778e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8007792:	edd7 7a04 	vldr	s15, [r7, #16]
 8007796:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800779a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800779e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a2:	d50a      	bpl.n	80077ba <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80077a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80077a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80077b0:	793b      	ldrb	r3, [r7, #4]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	e009      	b.n	80077ce <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 80077ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80077be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80077c6:	793b      	ldrb	r3, [r7, #4]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	e000      	b.n	80077ce <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	457a0000 	.word	0x457a0000
 80077e0:	41fa0000 	.word	0x41fa0000

080077e4 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
  reset_device();
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3394      	adds	r3, #148	@ 0x94
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	4798      	blx	r3
  get_status();
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	330c      	adds	r3, #12
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	edd2 7a05 	vldr	s15, [r2, #20]
 800781a:	eeb0 0a67 	vmov.f32	s0, s15
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	4798      	blx	r3
 8007822:	4603      	mov	r3, r0
 8007824:	461a      	mov	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	edd2 7a06 	vldr	s15, [r2, #24]
 800783c:	eeb0 0a67 	vmov.f32	s0, s15
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	4798      	blx	r3
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	edd2 7a07 	vldr	s15, [r2, #28]
 800785e:	eeb0 0a67 	vmov.f32	s0, s15
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	461a      	mov	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	edd2 7a08 	vldr	s15, [r2, #32]
 8007880:	eeb0 0a67 	vmov.f32	s0, s15
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	4798      	blx	r3
 8007888:	4603      	mov	r3, r0
 800788a:	461a      	mov	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80078a2:	eeb0 0a67 	vmov.f32	s0, s15
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	461a      	mov	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80078ba:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007b8c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078be:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	ed93 7a00 	vldr	s14, [r3]
 80078c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80078d4:	793b      	ldrb	r3, [r7, #4]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80078e4:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007b8c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	ed93 7a00 	vldr	s14, [r3]
 80078f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80078fe:	793b      	ldrb	r3, [r7, #4]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800790e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8007b8c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007912:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	ed93 7a00 	vldr	s14, [r3]
 800791c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007924:	edc7 7a01 	vstr	s15, [r7, #4]
 8007928:	793b      	ldrb	r3, [r7, #4]
 800792a:	b2da      	uxtb	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8007938:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8007b8c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800793c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	ed93 7a00 	vldr	s14, [r3]
 8007946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800794a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800794e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007952:	793b      	ldrb	r3, [r7, #4]
 8007954:	b2da      	uxtb	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800796c:	eeb0 0a67 	vmov.f32	s0, s15
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	4798      	blx	r3
 8007974:	4603      	mov	r3, r0
 8007976:	461a      	mov	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800798e:	eeb0 0a67 	vmov.f32	s0, s15
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 80079b0:	eeb0 0a67 	vmov.f32	s0, s15
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	4798      	blx	r3
 80079b8:	4603      	mov	r3, r0
 80079ba:	461a      	mov	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 80079d2:	eeb0 0a67 	vmov.f32	s0, s15
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	4798      	blx	r3
 80079da:	4603      	mov	r3, r0
 80079dc:	461a      	mov	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8007a00:	eeb0 0a67 	vmov.f32	s0, s15
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	4798      	blx	r3
 8007a08:	4603      	mov	r3, r0
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8007a22:	eeb0 0a67 	vmov.f32	s0, s15
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8007a68:	2104      	movs	r1, #4
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8007a7e:	2105      	movs	r1, #5
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8007a94:	2106      	movs	r1, #6
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8007aaa:	2107      	movs	r1, #7
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8007ac0:	2108      	movs	r1, #8
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8007ad6:	2109      	movs	r1, #9
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8007aec:	210a      	movs	r1, #10
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007b02:	210b      	movs	r1, #11
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007b18:	210c      	movs	r1, #12
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8007b2e:	210d      	movs	r1, #13
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8007b44:	210e      	movs	r1, #14
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8007b5a:	210f      	movs	r1, #15
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8007b70:	2110      	movs	r1, #16
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8007b86:	2111      	movs	r1, #17
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	e001      	b.n	8007b90 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007b8c:	43800000 	.word	0x43800000
 8007b90:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8007ba2:	2113      	movs	r1, #19
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8007bb8:	2114      	movs	r1, #20
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007bce:	2116      	movs	r1, #22
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8007be4:	2117      	movs	r1, #23
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3354      	adds	r3, #84	@ 0x54
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f083 0301 	eor.w	r3, r3, #1
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007c18:	b590      	push	{r4, r7, lr}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	460b      	mov	r3, r1
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c2e:	681c      	ldr	r4, [r3, #0]
 8007c30:	7afa      	ldrb	r2, [r7, #11]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	490c      	ldr	r1, [pc, #48]	@ (8007c70 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a09      	ldr	r2, [pc, #36]	@ (8007c74 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c50:	4907      	ldr	r1, [pc, #28]	@ (8007c70 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a05      	ldr	r2, [pc, #20]	@ (8007c78 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007c62:	4904      	ldr	r1, [pc, #16]	@ (8007c74 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	4798      	blx	r3
}
 8007c68:	bf00      	nop
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd90      	pop	{r4, r7, pc}
 8007c70:	2000024c 	.word	0x2000024c
 8007c74:	2000026c 	.word	0x2000026c
 8007c78:	20000274 	.word	0x20000274

08007c7c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007c7c:	b590      	push	{r4, r7, lr}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c90:	681c      	ldr	r4, [r3, #0]
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	2200      	movs	r2, #0
 8007c96:	9201      	str	r2, [sp, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	9200      	str	r2, [sp, #0]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	4917      	ldr	r1, [pc, #92]	@ (8007cfc <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a14      	ldr	r2, [pc, #80]	@ (8007d00 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007cb0:	4912      	ldr	r1, [pc, #72]	@ (8007cfc <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a10      	ldr	r2, [pc, #64]	@ (8007d04 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007cc2:	490f      	ldr	r1, [pc, #60]	@ (8007d00 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a19      	ldr	r1, [r3, #32]
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	7b9b      	ldrb	r3, [r3, #14]
 8007cda:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	7bfa      	ldrb	r2, [r7, #15]
 8007ce8:	4906      	ldr	r1, [pc, #24]	@ (8007d04 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	4798      	blx	r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd90      	pop	{r4, r7, pc}
 8007cfc:	2000024c 	.word	0x2000024c
 8007d00:	2000026c 	.word	0x2000026c
 8007d04:	20000274 	.word	0x20000274

08007d08 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	460b      	mov	r3, r1
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d1e:	681c      	ldr	r4, [r3, #0]
 8007d20:	7afa      	ldrb	r2, [r7, #11]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	490c      	ldr	r1, [pc, #48]	@ (8007d60 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a09      	ldr	r2, [pc, #36]	@ (8007d64 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007d40:	4907      	ldr	r1, [pc, #28]	@ (8007d60 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a05      	ldr	r2, [pc, #20]	@ (8007d68 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007d52:	4904      	ldr	r1, [pc, #16]	@ (8007d64 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	4798      	blx	r3
}
 8007d58:	bf00      	nop
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd90      	pop	{r4, r7, pc}
 8007d60:	2000024c 	.word	0x2000024c
 8007d64:	2000026c 	.word	0x2000026c
 8007d68:	20000274 	.word	0x20000274

08007d6c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007d6c:	b590      	push	{r4, r7, lr}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d80:	681c      	ldr	r4, [r3, #0]
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	2200      	movs	r2, #0
 8007d86:	9201      	str	r2, [sp, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	9200      	str	r2, [sp, #0]
 8007d8c:	2204      	movs	r2, #4
 8007d8e:	490c      	ldr	r1, [pc, #48]	@ (8007dc0 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a09      	ldr	r2, [pc, #36]	@ (8007dc4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007da0:	4907      	ldr	r1, [pc, #28]	@ (8007dc0 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a05      	ldr	r2, [pc, #20]	@ (8007dc8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007db2:	4904      	ldr	r1, [pc, #16]	@ (8007dc4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd90      	pop	{r4, r7, pc}
 8007dc0:	2000024c 	.word	0x2000024c
 8007dc4:	2000026c 	.word	0x2000026c
 8007dc8:	20000274 	.word	0x20000274

08007dcc <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007dcc:	b590      	push	{r4, r7, lr}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007de2:	681c      	ldr	r4, [r3, #0]
 8007de4:	7afa      	ldrb	r2, [r7, #11]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4613      	mov	r3, r2
 8007df0:	2205      	movs	r2, #5
 8007df2:	490c      	ldr	r1, [pc, #48]	@ (8007e24 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a09      	ldr	r2, [pc, #36]	@ (8007e28 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007e04:	4907      	ldr	r1, [pc, #28]	@ (8007e24 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a05      	ldr	r2, [pc, #20]	@ (8007e2c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007e16:	4904      	ldr	r1, [pc, #16]	@ (8007e28 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	4798      	blx	r3
}
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd90      	pop	{r4, r7, pc}
 8007e24:	2000024c 	.word	0x2000024c
 8007e28:	2000026c 	.word	0x2000026c
 8007e2c:	20000274 	.word	0x20000274

08007e30 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e40:	d21f      	bcs.n	8007e82 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e4a:	681c      	ldr	r4, [r3, #0]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	2300      	movs	r3, #0
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2206      	movs	r2, #6
 8007e58:	490c      	ldr	r1, [pc, #48]	@ (8007e8c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a09      	ldr	r2, [pc, #36]	@ (8007e90 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e6a:	4908      	ldr	r1, [pc, #32]	@ (8007e8c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a06      	ldr	r2, [pc, #24]	@ (8007e94 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007e7c:	4904      	ldr	r1, [pc, #16]	@ (8007e90 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd90      	pop	{r4, r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	2000024c 	.word	0x2000024c
 8007e90:	2000026c 	.word	0x2000026c
 8007e94:	20000274 	.word	0x20000274

08007e98 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af02      	add	r7, sp, #8
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007eac:	d220      	bcs.n	8007ef0 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007eb6:	681c      	ldr	r4, [r3, #0]
 8007eb8:	7afa      	ldrb	r2, [r7, #11]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	2207      	movs	r2, #7
 8007ec6:	490c      	ldr	r1, [pc, #48]	@ (8007ef8 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a09      	ldr	r2, [pc, #36]	@ (8007efc <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007ed8:	4907      	ldr	r1, [pc, #28]	@ (8007ef8 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a05      	ldr	r2, [pc, #20]	@ (8007f00 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007eea:	4904      	ldr	r1, [pc, #16]	@ (8007efc <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	4798      	blx	r3
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd90      	pop	{r4, r7, pc}
 8007ef8:	2000024c 	.word	0x2000024c
 8007efc:	2000026c 	.word	0x2000026c
 8007f00:	20000274 	.word	0x20000274

08007f04 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	72fb      	strb	r3, [r7, #11]
 8007f12:	4613      	mov	r3, r2
 8007f14:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f1e:	681c      	ldr	r4, [r3, #0]
 8007f20:	7af9      	ldrb	r1, [r7, #11]
 8007f22:	7abb      	ldrb	r3, [r7, #10]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	490c      	ldr	r1, [pc, #48]	@ (8007f60 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a09      	ldr	r2, [pc, #36]	@ (8007f64 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007f40:	4907      	ldr	r1, [pc, #28]	@ (8007f60 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a05      	ldr	r2, [pc, #20]	@ (8007f68 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007f52:	4904      	ldr	r1, [pc, #16]	@ (8007f64 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	4798      	blx	r3
}
 8007f58:	bf00      	nop
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}
 8007f60:	2000024c 	.word	0x2000024c
 8007f64:	2000026c 	.word	0x2000026c
 8007f68:	20000274 	.word	0x20000274

08007f6c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007f6c:	b590      	push	{r4, r7, lr}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f84:	681c      	ldr	r4, [r3, #0]
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	78bb      	ldrb	r3, [r7, #2]
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	9101      	str	r1, [sp, #4]
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	4613      	mov	r3, r2
 8007f92:	2209      	movs	r2, #9
 8007f94:	490c      	ldr	r1, [pc, #48]	@ (8007fc8 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a09      	ldr	r2, [pc, #36]	@ (8007fcc <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007fa6:	4908      	ldr	r1, [pc, #32]	@ (8007fc8 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a06      	ldr	r2, [pc, #24]	@ (8007fd0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8007fb8:	4904      	ldr	r1, [pc, #16]	@ (8007fcc <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd90      	pop	{r4, r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	2000024c 	.word	0x2000024c
 8007fcc:	2000026c 	.word	0x2000026c
 8007fd0:	20000274 	.word	0x20000274

08007fd4 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007fd4:	b590      	push	{r4, r7, lr}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007fe4:	681c      	ldr	r4, [r3, #0]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	2300      	movs	r3, #0
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	220a      	movs	r2, #10
 8007ff2:	490c      	ldr	r1, [pc, #48]	@ (8008024 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a09      	ldr	r2, [pc, #36]	@ (8008028 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8008004:	4907      	ldr	r1, [pc, #28]	@ (8008024 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a05      	ldr	r2, [pc, #20]	@ (800802c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 8008016:	4904      	ldr	r1, [pc, #16]	@ (8008028 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	bd90      	pop	{r4, r7, pc}
 8008024:	2000024c 	.word	0x2000024c
 8008028:	2000026c 	.word	0x2000026c
 800802c:	20000274 	.word	0x20000274

08008030 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8008030:	b590      	push	{r4, r7, lr}
 8008032:	b085      	sub	sp, #20
 8008034:	af02      	add	r7, sp, #8
 8008036:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008040:	681c      	ldr	r4, [r3, #0]
 8008042:	2300      	movs	r3, #0
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	2300      	movs	r3, #0
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	2300      	movs	r3, #0
 800804c:	220b      	movs	r2, #11
 800804e:	490c      	ldr	r1, [pc, #48]	@ (8008080 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a09      	ldr	r2, [pc, #36]	@ (8008084 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008060:	4907      	ldr	r1, [pc, #28]	@ (8008080 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a05      	ldr	r2, [pc, #20]	@ (8008088 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 8008072:	4904      	ldr	r1, [pc, #16]	@ (8008084 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bd90      	pop	{r4, r7, pc}
 8008080:	2000024c 	.word	0x2000024c
 8008084:	2000026c 	.word	0x2000026c
 8008088:	20000274 	.word	0x20000274

0800808c <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800808c:	b590      	push	{r4, r7, lr}
 800808e:	b085      	sub	sp, #20
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800809c:	681c      	ldr	r4, [r3, #0]
 800809e:	2300      	movs	r3, #0
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	2300      	movs	r3, #0
 80080a8:	220c      	movs	r2, #12
 80080aa:	490c      	ldr	r1, [pc, #48]	@ (80080dc <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a09      	ldr	r2, [pc, #36]	@ (80080e0 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 80080bc:	4907      	ldr	r1, [pc, #28]	@ (80080dc <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a05      	ldr	r2, [pc, #20]	@ (80080e4 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 80080ce:	4904      	ldr	r1, [pc, #16]	@ (80080e0 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd90      	pop	{r4, r7, pc}
 80080dc:	2000024c 	.word	0x2000024c
 80080e0:	2000026c 	.word	0x2000026c
 80080e4:	20000274 	.word	0x20000274

080080e8 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 80080e8:	b590      	push	{r4, r7, lr}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080f8:	681c      	ldr	r4, [r3, #0]
 80080fa:	2300      	movs	r3, #0
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	2300      	movs	r3, #0
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	2300      	movs	r3, #0
 8008104:	220d      	movs	r2, #13
 8008106:	490c      	ldr	r1, [pc, #48]	@ (8008138 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a09      	ldr	r2, [pc, #36]	@ (800813c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8008118:	4907      	ldr	r1, [pc, #28]	@ (8008138 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a05      	ldr	r2, [pc, #20]	@ (8008140 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 800812a:	4904      	ldr	r1, [pc, #16]	@ (800813c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	bd90      	pop	{r4, r7, pc}
 8008138:	2000024c 	.word	0x2000024c
 800813c:	2000026c 	.word	0x2000026c
 8008140:	20000274 	.word	0x20000274

08008144 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8008144:	b590      	push	{r4, r7, lr}
 8008146:	b085      	sub	sp, #20
 8008148:	af02      	add	r7, sp, #8
 800814a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008154:	681c      	ldr	r4, [r3, #0]
 8008156:	2300      	movs	r3, #0
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	2300      	movs	r3, #0
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	2300      	movs	r3, #0
 8008160:	220e      	movs	r2, #14
 8008162:	490c      	ldr	r1, [pc, #48]	@ (8008194 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a09      	ldr	r2, [pc, #36]	@ (8008198 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008174:	4907      	ldr	r1, [pc, #28]	@ (8008194 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a05      	ldr	r2, [pc, #20]	@ (800819c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 8008186:	4904      	ldr	r1, [pc, #16]	@ (8008198 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	bd90      	pop	{r4, r7, pc}
 8008194:	2000024c 	.word	0x2000024c
 8008198:	2000026c 	.word	0x2000026c
 800819c:	20000274 	.word	0x20000274

080081a0 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 80081a0:	b590      	push	{r4, r7, lr}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081b0:	681c      	ldr	r4, [r3, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	2300      	movs	r3, #0
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	2300      	movs	r3, #0
 80081bc:	220f      	movs	r2, #15
 80081be:	490c      	ldr	r1, [pc, #48]	@ (80081f0 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a09      	ldr	r2, [pc, #36]	@ (80081f4 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 80081d0:	4907      	ldr	r1, [pc, #28]	@ (80081f0 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a05      	ldr	r2, [pc, #20]	@ (80081f8 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 80081e2:	4904      	ldr	r1, [pc, #16]	@ (80081f4 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd90      	pop	{r4, r7, pc}
 80081f0:	2000024c 	.word	0x2000024c
 80081f4:	2000026c 	.word	0x2000026c
 80081f8:	20000274 	.word	0x20000274

080081fc <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 80081fc:	b590      	push	{r4, r7, lr}
 80081fe:	b085      	sub	sp, #20
 8008200:	af02      	add	r7, sp, #8
 8008202:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800820c:	681c      	ldr	r4, [r3, #0]
 800820e:	2300      	movs	r3, #0
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	2300      	movs	r3, #0
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	2300      	movs	r3, #0
 8008218:	2210      	movs	r2, #16
 800821a:	490c      	ldr	r1, [pc, #48]	@ (800824c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a09      	ldr	r2, [pc, #36]	@ (8008250 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 800822c:	4907      	ldr	r1, [pc, #28]	@ (800824c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a05      	ldr	r2, [pc, #20]	@ (8008254 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 800823e:	4904      	ldr	r1, [pc, #16]	@ (8008250 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	bd90      	pop	{r4, r7, pc}
 800824c:	2000024c 	.word	0x2000024c
 8008250:	2000026c 	.word	0x2000026c
 8008254:	20000274 	.word	0x20000274

08008258 <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8008258:	b590      	push	{r4, r7, lr}
 800825a:	b085      	sub	sp, #20
 800825c:	af02      	add	r7, sp, #8
 800825e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008268:	681c      	ldr	r4, [r3, #0]
 800826a:	2300      	movs	r3, #0
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	2300      	movs	r3, #0
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	2300      	movs	r3, #0
 8008274:	2211      	movs	r2, #17
 8008276:	490c      	ldr	r1, [pc, #48]	@ (80082a8 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a09      	ldr	r2, [pc, #36]	@ (80082ac <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008288:	4907      	ldr	r1, [pc, #28]	@ (80082a8 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a05      	ldr	r2, [pc, #20]	@ (80082b0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 800829a:	4904      	ldr	r1, [pc, #16]	@ (80082ac <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}
 80082a8:	2000024c 	.word	0x2000024c
 80082ac:	2000026c 	.word	0x2000026c
 80082b0:	20000274 	.word	0x20000274

080082b4 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082c4:	681c      	ldr	r4, [r3, #0]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	2300      	movs	r3, #0
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	2300      	movs	r3, #0
 80082d0:	2212      	movs	r2, #18
 80082d2:	4912      	ldr	r1, [pc, #72]	@ (800831c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a0f      	ldr	r2, [pc, #60]	@ (8008320 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80082e4:	490d      	ldr	r1, [pc, #52]	@ (800831c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008324 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 80082f6:	490a      	ldr	r1, [pc, #40]	@ (8008320 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2202      	movs	r2, #2
 8008308:	4906      	ldr	r1, [pc, #24]	@ (8008324 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
 800830e:	4603      	mov	r3, r0
 8008310:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8008312:	89fb      	ldrh	r3, [r7, #14]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	bd90      	pop	{r4, r7, pc}
 800831c:	2000024c 	.word	0x2000024c
 8008320:	2000026c 	.word	0x2000026c
 8008324:	20000274 	.word	0x20000274

08008328 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8008328:	b590      	push	{r4, r7, lr}
 800832a:	b087      	sub	sp, #28
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	460b      	mov	r3, r1
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800833e:	681c      	ldr	r4, [r3, #0]
 8008340:	7afa      	ldrb	r2, [r7, #11]
 8008342:	2300      	movs	r3, #0
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4613      	mov	r3, r2
 800834c:	2201      	movs	r2, #1
 800834e:	4903      	ldr	r1, [pc, #12]	@ (800835c <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	47a0      	blx	r4
}
 8008354:	bf00      	nop
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bd90      	pop	{r4, r7, pc}
 800835c:	2000024c 	.word	0x2000024c

08008360 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b085      	sub	sp, #20
 8008364:	af02      	add	r7, sp, #8
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008374:	681c      	ldr	r4, [r3, #0]
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	2200      	movs	r2, #0
 800837a:	9201      	str	r2, [sp, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	9200      	str	r2, [sp, #0]
 8008380:	2202      	movs	r2, #2
 8008382:	4903      	ldr	r1, [pc, #12]	@ (8008390 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	47a0      	blx	r4
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	bd90      	pop	{r4, r7, pc}
 8008390:	2000024c 	.word	0x2000024c

08008394 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b087      	sub	sp, #28
 8008398:	af02      	add	r7, sp, #8
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	460b      	mov	r3, r1
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083aa:	681c      	ldr	r4, [r3, #0]
 80083ac:	7afa      	ldrb	r2, [r7, #11]
 80083ae:	2300      	movs	r3, #0
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	4613      	mov	r3, r2
 80083b8:	2203      	movs	r2, #3
 80083ba:	4903      	ldr	r1, [pc, #12]	@ (80083c8 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	47a0      	blx	r4
}
 80083c0:	bf00      	nop
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd90      	pop	{r4, r7, pc}
 80083c8:	2000024c 	.word	0x2000024c

080083cc <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80083cc:	b590      	push	{r4, r7, lr}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af02      	add	r7, sp, #8
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083e0:	681c      	ldr	r4, [r3, #0]
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	2200      	movs	r2, #0
 80083e6:	9201      	str	r2, [sp, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	9200      	str	r2, [sp, #0]
 80083ec:	2204      	movs	r2, #4
 80083ee:	4903      	ldr	r1, [pc, #12]	@ (80083fc <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	47a0      	blx	r4
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd90      	pop	{r4, r7, pc}
 80083fc:	2000024c 	.word	0x2000024c

08008400 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8008400:	b590      	push	{r4, r7, lr}
 8008402:	b087      	sub	sp, #28
 8008404:	af02      	add	r7, sp, #8
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	460b      	mov	r3, r1
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008416:	681c      	ldr	r4, [r3, #0]
 8008418:	7afa      	ldrb	r2, [r7, #11]
 800841a:	2300      	movs	r3, #0
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	4613      	mov	r3, r2
 8008424:	2205      	movs	r2, #5
 8008426:	4903      	ldr	r1, [pc, #12]	@ (8008434 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	47a0      	blx	r4
}
 800842c:	bf00      	nop
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	bd90      	pop	{r4, r7, pc}
 8008434:	2000024c 	.word	0x2000024c

08008438 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8008438:	b590      	push	{r4, r7, lr}
 800843a:	b085      	sub	sp, #20
 800843c:	af02      	add	r7, sp, #8
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800844a:	681c      	ldr	r4, [r3, #0]
 800844c:	2300      	movs	r3, #0
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2206      	movs	r2, #6
 8008458:	4903      	ldr	r1, [pc, #12]	@ (8008468 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	47a0      	blx	r4
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	bd90      	pop	{r4, r7, pc}
 8008466:	bf00      	nop
 8008468:	2000024c 	.word	0x2000024c

0800846c <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	b087      	sub	sp, #28
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	460b      	mov	r3, r1
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008482:	681c      	ldr	r4, [r3, #0]
 8008484:	7afa      	ldrb	r2, [r7, #11]
 8008486:	2300      	movs	r3, #0
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	4613      	mov	r3, r2
 8008490:	2207      	movs	r2, #7
 8008492:	4903      	ldr	r1, [pc, #12]	@ (80084a0 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	47a0      	blx	r4
}
 8008498:	bf00      	nop
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	bd90      	pop	{r4, r7, pc}
 80084a0:	2000024c 	.word	0x2000024c

080084a4 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	607b      	str	r3, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	72fb      	strb	r3, [r7, #11]
 80084b2:	4613      	mov	r3, r2
 80084b4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084be:	681c      	ldr	r4, [r3, #0]
 80084c0:	7af9      	ldrb	r1, [r7, #11]
 80084c2:	7abb      	ldrb	r3, [r7, #10]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	9201      	str	r2, [sp, #4]
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	460b      	mov	r3, r1
 80084cc:	2208      	movs	r2, #8
 80084ce:	4903      	ldr	r1, [pc, #12]	@ (80084dc <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	47a0      	blx	r4
}
 80084d4:	bf00      	nop
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd90      	pop	{r4, r7, pc}
 80084dc:	2000024c 	.word	0x2000024c

080084e0 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80084e0:	b590      	push	{r4, r7, lr}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
 80084ec:	4613      	mov	r3, r2
 80084ee:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084f8:	681c      	ldr	r4, [r3, #0]
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	78bb      	ldrb	r3, [r7, #2]
 80084fe:	2100      	movs	r1, #0
 8008500:	9101      	str	r1, [sp, #4]
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4613      	mov	r3, r2
 8008506:	2209      	movs	r2, #9
 8008508:	4903      	ldr	r1, [pc, #12]	@ (8008518 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	47a0      	blx	r4
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}
 8008516:	bf00      	nop
 8008518:	2000024c 	.word	0x2000024c

0800851c <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b085      	sub	sp, #20
 8008520:	af02      	add	r7, sp, #8
 8008522:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800852c:	681c      	ldr	r4, [r3, #0]
 800852e:	2300      	movs	r3, #0
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	2300      	movs	r3, #0
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	2300      	movs	r3, #0
 8008538:	220a      	movs	r2, #10
 800853a:	4903      	ldr	r1, [pc, #12]	@ (8008548 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	47a0      	blx	r4
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	bd90      	pop	{r4, r7, pc}
 8008548:	2000024c 	.word	0x2000024c

0800854c <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800854c:	b590      	push	{r4, r7, lr}
 800854e:	b085      	sub	sp, #20
 8008550:	af02      	add	r7, sp, #8
 8008552:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800855c:	681c      	ldr	r4, [r3, #0]
 800855e:	2300      	movs	r3, #0
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	2300      	movs	r3, #0
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	2300      	movs	r3, #0
 8008568:	220b      	movs	r2, #11
 800856a:	4903      	ldr	r1, [pc, #12]	@ (8008578 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	47a0      	blx	r4
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	bd90      	pop	{r4, r7, pc}
 8008578:	2000024c 	.word	0x2000024c

0800857c <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b085      	sub	sp, #20
 8008580:	af02      	add	r7, sp, #8
 8008582:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800858c:	681c      	ldr	r4, [r3, #0]
 800858e:	2300      	movs	r3, #0
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	2300      	movs	r3, #0
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	220c      	movs	r2, #12
 800859a:	4903      	ldr	r1, [pc, #12]	@ (80085a8 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	47a0      	blx	r4
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd90      	pop	{r4, r7, pc}
 80085a8:	2000024c 	.word	0x2000024c

080085ac <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085bc:	681c      	ldr	r4, [r3, #0]
 80085be:	2300      	movs	r3, #0
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	2300      	movs	r3, #0
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	2300      	movs	r3, #0
 80085c8:	220d      	movs	r2, #13
 80085ca:	4903      	ldr	r1, [pc, #12]	@ (80085d8 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	47a0      	blx	r4
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd90      	pop	{r4, r7, pc}
 80085d8:	2000024c 	.word	0x2000024c

080085dc <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 80085dc:	b590      	push	{r4, r7, lr}
 80085de:	b085      	sub	sp, #20
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085ec:	681c      	ldr	r4, [r3, #0]
 80085ee:	2300      	movs	r3, #0
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	2300      	movs	r3, #0
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	2300      	movs	r3, #0
 80085f8:	220e      	movs	r2, #14
 80085fa:	4903      	ldr	r1, [pc, #12]	@ (8008608 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	47a0      	blx	r4
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bd90      	pop	{r4, r7, pc}
 8008608:	2000024c 	.word	0x2000024c

0800860c <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b085      	sub	sp, #20
 8008610:	af02      	add	r7, sp, #8
 8008612:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800861c:	681c      	ldr	r4, [r3, #0]
 800861e:	2300      	movs	r3, #0
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	2300      	movs	r3, #0
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	2300      	movs	r3, #0
 8008628:	220f      	movs	r2, #15
 800862a:	4903      	ldr	r1, [pc, #12]	@ (8008638 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	47a0      	blx	r4
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	bd90      	pop	{r4, r7, pc}
 8008638:	2000024c 	.word	0x2000024c

0800863c <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b085      	sub	sp, #20
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800864c:	681c      	ldr	r4, [r3, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	2300      	movs	r3, #0
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	2300      	movs	r3, #0
 8008658:	2210      	movs	r2, #16
 800865a:	4903      	ldr	r1, [pc, #12]	@ (8008668 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	47a0      	blx	r4
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	bd90      	pop	{r4, r7, pc}
 8008668:	2000024c 	.word	0x2000024c

0800866c <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800866c:	b590      	push	{r4, r7, lr}
 800866e:	b085      	sub	sp, #20
 8008670:	af02      	add	r7, sp, #8
 8008672:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800867c:	681c      	ldr	r4, [r3, #0]
 800867e:	2300      	movs	r3, #0
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	2300      	movs	r3, #0
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	2300      	movs	r3, #0
 8008688:	2211      	movs	r2, #17
 800868a:	4903      	ldr	r1, [pc, #12]	@ (8008698 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	47a0      	blx	r4
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	bd90      	pop	{r4, r7, pc}
 8008698:	2000024c 	.word	0x2000024c

0800869c <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b085      	sub	sp, #20
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80086ac:	681c      	ldr	r4, [r3, #0]
 80086ae:	2300      	movs	r3, #0
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	2300      	movs	r3, #0
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	2300      	movs	r3, #0
 80086b8:	2212      	movs	r2, #18
 80086ba:	4903      	ldr	r1, [pc, #12]	@ (80086c8 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	47a0      	blx	r4
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd90      	pop	{r4, r7, pc}
 80086c8:	2000024c 	.word	0x2000024c

080086cc <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a09      	ldr	r2, [pc, #36]	@ (8008704 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80086e0:	4909      	ldr	r1, [pc, #36]	@ (8008708 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a06      	ldr	r2, [pc, #24]	@ (800870c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 80086f2:	4904      	ldr	r1, [pc, #16]	@ (8008704 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80086f8:	4b04      	ldr	r3, [pc, #16]	@ (800870c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	2000026c 	.word	0x2000026c
 8008708:	2000024c 	.word	0x2000024c
 800870c:	20000274 	.word	0x20000274

08008710 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8008710:	b590      	push	{r4, r7, lr}
 8008712:	b089      	sub	sp, #36	@ 0x24
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800871c:	4b17      	ldr	r3, [pc, #92]	@ (800877c <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]
 8008726:	e020      	b.n	800876a <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008730:	681c      	ldr	r4, [r3, #0]
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	461a      	mov	r2, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	1899      	adds	r1, r3, r2
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	461a      	mov	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	441a      	add	r2, r3
 8008746:	230a      	movs	r3, #10
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	2302      	movs	r3, #2
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8008750:	2300      	movs	r3, #0
 8008752:	75bb      	strb	r3, [r7, #22]
 8008754:	e003      	b.n	800875e <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8008756:	bf00      	nop
 8008758:	7dbb      	ldrb	r3, [r7, #22]
 800875a:	3301      	adds	r3, #1
 800875c:	75bb      	strb	r3, [r7, #22]
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	2b7c      	cmp	r3, #124	@ 0x7c
 8008762:	d9f8      	bls.n	8008756 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	3301      	adds	r3, #1
 8008768:	75fb      	strb	r3, [r7, #23]
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d9db      	bls.n	8008728 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8008770:	bf00      	nop
}
 8008772:	bf00      	nop
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	bd90      	pop	{r4, r7, pc}
 800877a:	bf00      	nop
 800877c:	20000249 	.word	0x20000249

08008780 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800878e:	2300      	movs	r3, #0
 8008790:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008792:	2301      	movs	r3, #1
 8008794:	74fb      	strb	r3, [r7, #19]
 8008796:	e016      	b.n	80087c6 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8008798:	7cfb      	ldrb	r3, [r7, #19]
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	461a      	mov	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	7f1b      	ldrb	r3, [r3, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	4413      	add	r3, r2
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	4619      	mov	r1, r3
 80087ac:	79fa      	ldrb	r2, [r7, #7]
 80087ae:	7cfb      	ldrb	r3, [r7, #19]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	fa01 f303 	lsl.w	r3, r1, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	4313      	orrs	r3, r2
 80087be:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80087c0:	7cfb      	ldrb	r3, [r7, #19]
 80087c2:	3301      	adds	r3, #1
 80087c4:	74fb      	strb	r3, [r7, #19]
 80087c6:	7cfb      	ldrb	r3, [r7, #19]
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d9e5      	bls.n	8008798 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80087cc:	697b      	ldr	r3, [r7, #20]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2118      	movs	r1, #24
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	4798      	blx	r3
 80087fc:	4602      	mov	r2, r0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008802:	b292      	uxth	r2, r2
 8008804:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	2b0e      	cmp	r3, #14
 800880a:	f200 8099 	bhi.w	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 800880e:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	08008851 	.word	0x08008851
 8008818:	08008861 	.word	0x08008861
 800881c:	08008871 	.word	0x08008871
 8008820:	08008881 	.word	0x08008881
 8008824:	08008891 	.word	0x08008891
 8008828:	080088a1 	.word	0x080088a1
 800882c:	080088b1 	.word	0x080088b1
 8008830:	080088c1 	.word	0x080088c1
 8008834:	080088d1 	.word	0x080088d1
 8008838:	080088e1 	.word	0x080088e1
 800883c:	080088f1 	.word	0x080088f1
 8008840:	08008901 	.word	0x08008901
 8008844:	08008911 	.word	0x08008911
 8008848:	08008921 	.word	0x08008921
 800884c:	08008931 	.word	0x08008931
      state = pL6470_StatusRegister->HiZ;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800885a:	b2db      	uxtb	r3, r3
 800885c:	73fb      	strb	r3, [r7, #15]
      break;
 800885e:	e06f      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800886a:	b2db      	uxtb	r3, r3
 800886c:	73fb      	strb	r3, [r7, #15]
      break;
 800886e:	e067      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800887a:	b2db      	uxtb	r3, r3
 800887c:	73fb      	strb	r3, [r7, #15]
      break;
 800887e:	e05f      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	73fb      	strb	r3, [r7, #15]
      break;
 800888e:	e057      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800889a:	b2db      	uxtb	r3, r3
 800889c:	73fb      	strb	r3, [r7, #15]
      break;
 800889e:	e04f      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	73fb      	strb	r3, [r7, #15]
      break;
 80088ae:	e047      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	73fb      	strb	r3, [r7, #15]
      break;
 80088be:	e03f      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c4:	785b      	ldrb	r3, [r3, #1]
 80088c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	73fb      	strb	r3, [r7, #15]
      break;
 80088ce:	e037      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	73fb      	strb	r3, [r7, #15]
      break;
 80088de:	e02f      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	73fb      	strb	r3, [r7, #15]
      break;
 80088ee:	e027      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	73fb      	strb	r3, [r7, #15]
      break;
 80088fe:	e01f      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800890a:	b2db      	uxtb	r3, r3
 800890c:	73fb      	strb	r3, [r7, #15]
      break;
 800890e:	e017      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	73fb      	strb	r3, [r7, #15]
      break;
 800891e:	e00f      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800892a:	b2db      	uxtb	r3, r3
 800892c:	73fb      	strb	r3, [r7, #15]
      break;
 800892e:	e007      	b.n	8008940 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800893a:	b2db      	uxtb	r3, r3
 800893c:	73fb      	strb	r3, [r7, #15]
      break;
 800893e:	bf00      	nop
  return state;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop

0800894c <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	2b18      	cmp	r3, #24
 800895c:	d809      	bhi.n	8008972 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a19      	ldr	r1, [r3, #32]
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	3301      	adds	r3, #1
 8008970:	e000      	b.n	8008974 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
 800898e:	e01a      	b.n	80089c6 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	4413      	add	r3, r2
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	4413      	add	r3, r2
 80089a4:	2200      	movs	r2, #0
 80089a6:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	4413      	add	r3, r2
 80089b0:	2200      	movs	r2, #0
 80089b2:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	4413      	add	r3, r2
 80089bc:	2200      	movs	r2, #0
 80089be:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	3301      	adds	r3, #1
 80089c4:	73fb      	strb	r3, [r7, #15]
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d9e1      	bls.n	8008990 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80089cc:	bf00      	nop
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	603b      	str	r3, [r7, #0]
 80089e6:	4613      	mov	r3, r2
 80089e8:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	7f1b      	ldrb	r3, [r3, #28]
 80089ee:	011b      	lsls	r3, r3, #4
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	4413      	add	r3, r2
 80089f4:	79fa      	ldrb	r2, [r7, #7]
 80089f6:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	7f1b      	ldrb	r3, [r3, #28]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4413      	add	r3, r2
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	7f1b      	ldrb	r3, [r3, #28]
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	4413      	add	r3, r2
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	7f1b      	ldrb	r3, [r3, #28]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	60da      	str	r2, [r3, #12]
}
 8008a22:	bf00      	nop
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
	...

08008a30 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008a30:	b590      	push	{r4, r7, lr}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8008a40:	4b10      	ldr	r3, [pc, #64]	@ (8008a84 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8008a48:	4b0e      	ldr	r3, [pc, #56]	@ (8008a84 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8008a66:	681c      	ldr	r4, [r3, #0]
 8008a68:	79fa      	ldrb	r2, [r7, #7]
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	47a0      	blx	r4
}
 8008a7a:	bf00      	nop
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd90      	pop	{r4, r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20000249 	.word	0x20000249

08008a88 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75bb      	strb	r3, [r7, #22]
 8008a9c:	e013      	b.n	8008ac6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	75fb      	strb	r3, [r7, #23]
 8008aa2:	e00a      	b.n	8008aba <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8008aa4:	7d7b      	ldrb	r3, [r7, #21]
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	757a      	strb	r2, [r7, #21]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d9f1      	bls.n	8008aa4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008ac0:	7dbb      	ldrb	r3, [r7, #22]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	75bb      	strb	r3, [r7, #22]
 8008ac6:	7dbb      	ldrb	r3, [r7, #22]
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d9e8      	bls.n	8008a9e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008acc:	2300      	movs	r3, #0
 8008ace:	75fb      	strb	r3, [r7, #23]
 8008ad0:	e1f1      	b.n	8008eb6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	440b      	add	r3, r1
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	1a5b      	subs	r3, r3, r1
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	441a      	add	r2, r3
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	440b      	add	r3, r1
 8008af2:	7b12      	ldrb	r2, [r2, #12]
 8008af4:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	4413      	add	r3, r2
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b12      	cmp	r3, #18
 8008b02:	f200 81d5 	bhi.w	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8008b06:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008eb1 	.word	0x08008eb1
 8008b10:	08008b59 	.word	0x08008b59
 8008b14:	08008be1 	.word	0x08008be1
 8008b18:	08008c11 	.word	0x08008c11
 8008b1c:	08008c79 	.word	0x08008c79
 8008b20:	08008ca7 	.word	0x08008ca7
 8008b24:	08008d0f 	.word	0x08008d0f
 8008b28:	08008d4b 	.word	0x08008d4b
 8008b2c:	08008db3 	.word	0x08008db3
 8008b30:	08008e4f 	.word	0x08008e4f
 8008b34:	08008eb1 	.word	0x08008eb1
 8008b38:	08008eb1 	.word	0x08008eb1
 8008b3c:	08008eb1 	.word	0x08008eb1
 8008b40:	08008eb1 	.word	0x08008eb1
 8008b44:	08008eb1 	.word	0x08008eb1
 8008b48:	08008eb1 	.word	0x08008eb1
 8008b4c:	08008eb1 	.word	0x08008eb1
 8008b50:	08008eb1 	.word	0x08008eb1
 8008b54:	08008eb1 	.word	0x08008eb1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	7819      	ldrb	r1, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a18      	ldr	r0, [r3, #32]
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4403      	add	r3, r0
 8008b78:	781a      	ldrb	r2, [r3, #0]
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4403      	add	r3, r0
 8008b80:	430a      	orrs	r2, r1
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a19      	ldr	r1, [r3, #32]
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	011b      	lsls	r3, r3, #4
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	4413      	add	r3, r2
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	7b9b      	ldrb	r3, [r3, #14]
 8008ba0:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	75bb      	strb	r3, [r7, #22]
 8008ba6:	e016      	b.n	8008bd6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	4413      	add	r3, r2
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	7d39      	ldrb	r1, [r7, #20]
 8008bb4:	7dbb      	ldrb	r3, [r7, #22]
 8008bb6:	1acb      	subs	r3, r1, r3
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	fa22 f103 	lsr.w	r1, r2, r3
 8008bbe:	7dbb      	ldrb	r3, [r7, #22]
 8008bc0:	005a      	lsls	r2, r3, #1
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	b2ca      	uxtb	r2, r1
 8008bce:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008bd0:	7dbb      	ldrb	r3, [r7, #22]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	75bb      	strb	r3, [r7, #22]
 8008bd6:	7d3a      	ldrb	r2, [r7, #20]
 8008bd8:	7dbb      	ldrb	r3, [r7, #22]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d2e4      	bcs.n	8008ba8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008bde:	e167      	b.n	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	4413      	add	r3, r2
 8008be6:	7819      	ldrb	r1, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a18      	ldr	r0, [r3, #32]
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4403      	add	r3, r0
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	4403      	add	r3, r0
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]
      break;
 8008c0e:	e14f      	b.n	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	4413      	add	r3, r2
 8008c16:	7819      	ldrb	r1, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	4413      	add	r3, r2
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	4403      	add	r3, r0
 8008c2e:	7a1a      	ldrb	r2, [r3, #8]
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4403      	add	r3, r0
 8008c36:	430a      	orrs	r2, r1
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	75bb      	strb	r3, [r7, #22]
 8008c40:	e016      	b.n	8008c70 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	4413      	add	r3, r2
 8008c4a:	689a      	ldr	r2, [r3, #8]
 8008c4c:	7dbb      	ldrb	r3, [r7, #22]
 8008c4e:	f1c3 0303 	rsb	r3, r3, #3
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	fa22 f103 	lsr.w	r1, r2, r3
 8008c58:	7dbb      	ldrb	r3, [r7, #22]
 8008c5a:	005a      	lsls	r2, r3, #1
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	4413      	add	r3, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4413      	add	r3, r2
 8008c66:	b2ca      	uxtb	r2, r1
 8008c68:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c6a:	7dbb      	ldrb	r3, [r7, #22]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	75bb      	strb	r3, [r7, #22]
 8008c70:	7dbb      	ldrb	r3, [r7, #22]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d9e5      	bls.n	8008c42 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008c76:	e11b      	b.n	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	7819      	ldrb	r1, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	4413      	add	r3, r2
 8008c94:	4403      	add	r3, r0
 8008c96:	7a1a      	ldrb	r2, [r3, #8]
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4403      	add	r3, r0
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	b2d2      	uxtb	r2, r2
 8008ca2:	701a      	strb	r2, [r3, #0]
      break;
 8008ca4:	e104      	b.n	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	4413      	add	r3, r2
 8008cac:	7819      	ldrb	r1, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	4413      	add	r3, r2
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	4403      	add	r3, r0
 8008cc4:	7a1a      	ldrb	r2, [r3, #8]
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	4403      	add	r3, r0
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	b2d2      	uxtb	r2, r2
 8008cd0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75bb      	strb	r3, [r7, #22]
 8008cd6:	e016      	b.n	8008d06 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	011b      	lsls	r3, r3, #4
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	4413      	add	r3, r2
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	7dbb      	ldrb	r3, [r7, #22]
 8008ce4:	f1c3 0303 	rsb	r3, r3, #3
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	fa22 f103 	lsr.w	r1, r2, r3
 8008cee:	7dbb      	ldrb	r3, [r7, #22]
 8008cf0:	005a      	lsls	r2, r3, #1
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	b2ca      	uxtb	r2, r1
 8008cfe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d00:	7dbb      	ldrb	r3, [r7, #22]
 8008d02:	3301      	adds	r3, #1
 8008d04:	75bb      	strb	r3, [r7, #22]
 8008d06:	7dbb      	ldrb	r3, [r7, #22]
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d9e5      	bls.n	8008cd8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008d0c:	e0d0      	b.n	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d0e:	2301      	movs	r3, #1
 8008d10:	75bb      	strb	r3, [r7, #22]
 8008d12:	e016      	b.n	8008d42 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
 8008d20:	f1c3 0303 	rsb	r3, r3, #3
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	fa22 f103 	lsr.w	r1, r2, r3
 8008d2a:	7dbb      	ldrb	r3, [r7, #22]
 8008d2c:	005a      	lsls	r2, r3, #1
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	4413      	add	r3, r2
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4413      	add	r3, r2
 8008d38:	b2ca      	uxtb	r2, r1
 8008d3a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d3c:	7dbb      	ldrb	r3, [r7, #22]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	75bb      	strb	r3, [r7, #22]
 8008d42:	7dbb      	ldrb	r3, [r7, #22]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d9e5      	bls.n	8008d14 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008d48:	e0b2      	b.n	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	4413      	add	r3, r2
 8008d50:	7819      	ldrb	r1, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	4613      	mov	r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4413      	add	r3, r2
 8008d66:	4403      	add	r3, r0
 8008d68:	7a1a      	ldrb	r2, [r3, #8]
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	4403      	add	r3, r0
 8008d70:	430a      	orrs	r2, r1
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d76:	2301      	movs	r3, #1
 8008d78:	75bb      	strb	r3, [r7, #22]
 8008d7a:	e016      	b.n	8008daa <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	4413      	add	r3, r2
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	7dbb      	ldrb	r3, [r7, #22]
 8008d88:	f1c3 0303 	rsb	r3, r3, #3
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	fa22 f103 	lsr.w	r1, r2, r3
 8008d92:	7dbb      	ldrb	r3, [r7, #22]
 8008d94:	005a      	lsls	r2, r3, #1
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	4413      	add	r3, r2
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4413      	add	r3, r2
 8008da0:	b2ca      	uxtb	r2, r1
 8008da2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008da4:	7dbb      	ldrb	r3, [r7, #22]
 8008da6:	3301      	adds	r3, #1
 8008da8:	75bb      	strb	r3, [r7, #22]
 8008daa:	7dbb      	ldrb	r3, [r7, #22]
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d9e5      	bls.n	8008d7c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008db0:	e07e      	b.n	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	4413      	add	r3, r2
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	b259      	sxtb	r1, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	011b      	lsls	r3, r3, #4
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	4403      	add	r3, r0
 8008dd2:	791b      	ldrb	r3, [r3, #4]
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	b25b      	sxtb	r3, r3
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	b259      	sxtb	r1, r3
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	4413      	add	r3, r2
 8008de2:	b2ca      	uxtb	r2, r1
 8008de4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	4413      	add	r3, r2
 8008dec:	7819      	ldrb	r1, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	4413      	add	r3, r2
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	4403      	add	r3, r0
 8008e04:	7a1a      	ldrb	r2, [r3, #8]
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4403      	add	r3, r0
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e12:	2301      	movs	r3, #1
 8008e14:	75bb      	strb	r3, [r7, #22]
 8008e16:	e016      	b.n	8008e46 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	4413      	add	r3, r2
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	7dbb      	ldrb	r3, [r7, #22]
 8008e24:	f1c3 0303 	rsb	r3, r3, #3
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	fa22 f103 	lsr.w	r1, r2, r3
 8008e2e:	7dbb      	ldrb	r3, [r7, #22]
 8008e30:	005a      	lsls	r2, r3, #1
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	4413      	add	r3, r2
 8008e36:	461a      	mov	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	b2ca      	uxtb	r2, r1
 8008e3e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e40:	7dbb      	ldrb	r3, [r7, #22]
 8008e42:	3301      	adds	r3, #1
 8008e44:	75bb      	strb	r3, [r7, #22]
 8008e46:	7dbb      	ldrb	r3, [r7, #22]
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d9e5      	bls.n	8008e18 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008e4c:	e030      	b.n	8008eb0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	4413      	add	r3, r2
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	b259      	sxtb	r1, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	4413      	add	r3, r2
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	4403      	add	r3, r0
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	b25b      	sxtb	r3, r3
 8008e74:	430b      	orrs	r3, r1
 8008e76:	b259      	sxtb	r1, r3
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	b2ca      	uxtb	r2, r1
 8008e80:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	4413      	add	r3, r2
 8008e88:	7819      	ldrb	r1, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	4403      	add	r3, r0
 8008ea0:	7a1a      	ldrb	r2, [r3, #8]
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4403      	add	r3, r0
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	b2d2      	uxtb	r2, r2
 8008eac:	701a      	strb	r2, [r3, #0]
      break;
 8008eae:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	75fb      	strb	r3, [r7, #23]
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	f67f ae0a 	bls.w	8008ad2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008ed8:	edd7 7a00 	vldr	s15, [r7]
 8008edc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee4:	db1e      	blt.n	8008f24 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008ee6:	edd7 7a00 	vldr	s15, [r7]
 8008eea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eee:	ee17 2a90 	vmov	r2, s15
 8008ef2:	edd7 7a00 	vldr	s15, [r7]
 8008ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008efe:	ed97 7a00 	vldr	s14, [r7]
 8008f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f12:	bf4c      	ite	mi
 8008f14:	2301      	movmi	r3, #1
 8008f16:	2300      	movpl	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	f083 0301 	eor.w	r3, r3, #1
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	4413      	add	r3, r2
 8008f22:	e01a      	b.n	8008f5a <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008f24:	edd7 7a00 	vldr	s15, [r7]
 8008f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f2c:	ee17 2a90 	vmov	r2, s15
 8008f30:	edd7 7a00 	vldr	s15, [r7]
 8008f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f3c:	ed97 7a00 	vldr	s14, [r7]
 8008f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f44:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8008f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f50:	d501      	bpl.n	8008f56 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008f56:	2300      	movs	r3, #0
 8008f58:	1ad3      	subs	r3, r2, r3
    }
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	4613      	mov	r3, r2
 8008f72:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6918      	ldr	r0, [r3, #16]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8a9b      	ldrh	r3, [r3, #20]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4619      	mov	r1, r3
 8008f80:	f005 fd9c 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6998      	ldr	r0, [r3, #24]
 8008f88:	88fa      	ldrh	r2, [r7, #6]
 8008f8a:	2364      	movs	r3, #100	@ 0x64
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	f006 fdc4 	bl	800fb1a <HAL_SPI_Receive>
 8008f92:	4603      	mov	r3, r0
 8008f94:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6918      	ldr	r0, [r3, #16]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8a9b      	ldrh	r3, [r3, #20]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f005 fd8b 	bl	800eabc <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008fb0:	2300      	movs	r3, #0
    }
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6918      	ldr	r0, [r3, #16]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8a9b      	ldrh	r3, [r3, #20]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	f005 fd72 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6998      	ldr	r0, [r3, #24]
 8008fdc:	88fa      	ldrh	r2, [r7, #6]
 8008fde:	2364      	movs	r3, #100	@ 0x64
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	f006 fc5e 	bl	800f8a2 <HAL_SPI_Transmit>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6918      	ldr	r0, [r3, #16]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8a9b      	ldrh	r3, [r3, #20]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f005 fd61 	bl	800eabc <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8009004:	2300      	movs	r3, #0
    }
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800900e:	b580      	push	{r7, lr}
 8009010:	b088      	sub	sp, #32
 8009012:	af02      	add	r7, sp, #8
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6918      	ldr	r0, [r3, #16]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8a9b      	ldrh	r3, [r3, #20]
 8009024:	2200      	movs	r2, #0
 8009026:	4619      	mov	r1, r3
 8009028:	f005 fd48 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6998      	ldr	r0, [r3, #24]
 8009030:	887b      	ldrh	r3, [r7, #2]
 8009032:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009036:	9200      	str	r2, [sp, #0]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	f006 fe7e 	bl	800fd3c <HAL_SPI_TransmitReceive>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8009044:	7dfb      	ldrb	r3, [r7, #23]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6918      	ldr	r0, [r3, #16]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8a9b      	ldrh	r3, [r3, #20]
 8009052:	2201      	movs	r2, #1
 8009054:	4619      	mov	r1, r3
 8009056:	f005 fd31 	bl	800eabc <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e008      	b.n	8009070 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6918      	ldr	r0, [r3, #16]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8a9b      	ldrh	r3, [r3, #20]
 8009066:	2201      	movs	r2, #1
 8009068:	4619      	mov	r1, r3
 800906a:	f005 fd27 	bl	800eabc <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800906e:	2300      	movs	r3, #0
    }
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8009078:	b590      	push	{r4, r7, lr}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800908e:	681c      	ldr	r4, [r3, #0]
 8009090:	887b      	ldrh	r3, [r7, #2]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	47a0      	blx	r4
    }
 800909a:	bf00      	nop
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd90      	pop	{r4, r7, pc}

080090a2 <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	4798      	blx	r3
 80090bc:	4603      	mov	r3, r0
    }
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	4798      	blx	r3
 80090dc:	4603      	mov	r3, r0
    }
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	b2d2      	uxtb	r2, r2
 80090fe:	4611      	mov	r1, r2
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
 8009104:	4603      	mov	r3, r0
    }
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 800910e:	b590      	push	{r4, r7, lr}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800911e:	681c      	ldr	r4, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2100      	movs	r1, #0
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	4798      	blx	r3
 8009130:	4603      	mov	r3, r0
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	47a0      	blx	r4
 8009138:	4603      	mov	r3, r0
    }
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	bd90      	pop	{r4, r7, pc}

08009142 <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 8009142:	b590      	push	{r4, r7, lr}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009152:	681c      	ldr	r4, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2102      	movs	r1, #2
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
 8009164:	4603      	mov	r3, r0
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	47a0      	blx	r4
 800916c:	4603      	mov	r3, r0
    }
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	bd90      	pop	{r4, r7, pc}

08009176 <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8009176:	b5b0      	push	{r4, r5, r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009186:	681c      	ldr	r4, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009190:	681d      	ldr	r5, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2103      	movs	r1, #3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	4798      	blx	r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	47a8      	blx	r5
 80091aa:	eef0 7a40 	vmov.f32	s15, s0
 80091ae:	eeb0 0a67 	vmov.f32	s0, s15
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	47a0      	blx	r4
 80091b6:	4603      	mov	r3, r0
    }
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bdb0      	pop	{r4, r5, r7, pc}

080091c0 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 80091c0:	b5b0      	push	{r4, r5, r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80091d0:	681c      	ldr	r4, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091da:	681d      	ldr	r5, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2106      	movs	r1, #6
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	47a8      	blx	r5
 80091f6:	eef0 7a40 	vmov.f32	s15, s0
 80091fa:	eeb0 0a67 	vmov.f32	s0, s15
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	47a0      	blx	r4
 8009202:	4603      	mov	r3, r0
    }
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bdb0      	pop	{r4, r5, r7, pc}

0800920c <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 800920c:	b5b0      	push	{r4, r5, r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800921c:	681c      	ldr	r4, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009226:	681d      	ldr	r5, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2107      	movs	r1, #7
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	4798      	blx	r3
 8009238:	4603      	mov	r3, r0
 800923a:	b29b      	uxth	r3, r3
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	47a8      	blx	r5
 8009242:	eef0 7a40 	vmov.f32	s15, s0
 8009246:	eeb0 0a67 	vmov.f32	s0, s15
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	47a0      	blx	r4
 800924e:	4603      	mov	r3, r0
    }
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bdb0      	pop	{r4, r5, r7, pc}

08009258 <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8009258:	b5b0      	push	{r4, r5, r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009268:	681c      	ldr	r4, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8009272:	681d      	ldr	r5, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2104      	movs	r1, #4
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
 8009284:	4603      	mov	r3, r0
 8009286:	b29b      	uxth	r3, r3
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	47a8      	blx	r5
 800928e:	eef0 7a40 	vmov.f32	s15, s0
 8009292:	eeb0 0a67 	vmov.f32	s0, s15
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	47a0      	blx	r4
 800929a:	4603      	mov	r3, r0
    }
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bdb0      	pop	{r4, r5, r7, pc}

080092a4 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 80092a4:	b5b0      	push	{r4, r5, r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092b4:	681c      	ldr	r4, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80092be:	681d      	ldr	r5, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2105      	movs	r1, #5
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	4798      	blx	r3
 80092d0:	4603      	mov	r3, r0
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	47a8      	blx	r5
 80092da:	eef0 7a40 	vmov.f32	s15, s0
 80092de:	eeb0 0a67 	vmov.f32	s0, s15
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	47a0      	blx	r4
 80092e6:	4603      	mov	r3, r0
    }
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bdb0      	pop	{r4, r5, r7, pc}

080092f0 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2104      	movs	r1, #4
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
 8009308:	4603      	mov	r3, r0
 800930a:	2b01      	cmp	r3, #1
 800930c:	d101      	bne.n	8009312 <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 800930e:	2301      	movs	r3, #1
 8009310:	e000      	b.n	8009314 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 8009312:	2300      	movs	r3, #0
    }
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	b2d1      	uxtb	r1, r2
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	4798      	blx	r3
    }
 800933c:	bf00      	nop
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
    }
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 8009362:	b590      	push	{r4, r7, lr}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009372:	681c      	ldr	r4, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2100      	movs	r1, #0
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	4798      	blx	r3
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	2102      	movs	r1, #2
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	47a0      	blx	r4
    }
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	bd90      	pop	{r4, r7, pc}

08009396 <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 8009396:	b590      	push	{r4, r7, lr}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093a8:	681c      	ldr	r4, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	4798      	blx	r3
 80093ba:	4603      	mov	r3, r0
 80093bc:	461a      	mov	r2, r3
 80093be:	2102      	movs	r1, #2
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	47a0      	blx	r4
    }
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd90      	pop	{r4, r7, pc}

080093cc <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80093cc:	b590      	push	{r4, r7, lr}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093de:	681c      	ldr	r4, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	ee07 2a90 	vmov	s15, r2
 80093f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f4:	eeb0 0a67 	vmov.f32	s0, s15
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4798      	blx	r3
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	2106      	movs	r1, #6
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	47a0      	blx	r4
        return true;
 8009406:	2301      	movs	r3, #1
    }
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bd90      	pop	{r4, r7, pc}

08009410 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009422:	681c      	ldr	r4, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	ee07 2a90 	vmov	s15, r2
 8009434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009438:	eeb0 0a67 	vmov.f32	s0, s15
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	2107      	movs	r1, #7
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	47a0      	blx	r4
        return true;
 800944a:	2301      	movs	r3, #1
    }
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	bd90      	pop	{r4, r7, pc}

08009454 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009466:	681c      	ldr	r4, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	ee07 2a90 	vmov	s15, r2
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	eeb0 0a67 	vmov.f32	s0, s15
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	4603      	mov	r3, r0
 8009486:	461a      	mov	r2, r3
 8009488:	2104      	movs	r1, #4
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	47a0      	blx	r4
        return true;
 800948e:	2301      	movs	r3, #1
    }
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bd90      	pop	{r4, r7, pc}

08009498 <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80094aa:	681c      	ldr	r4, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	ee07 2a90 	vmov	s15, r2
 80094bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c0:	eeb0 0a67 	vmov.f32	s0, s15
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	2105      	movs	r1, #5
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	47a0      	blx	r4
        return true;
 80094d2:	2301      	movs	r3, #1
    }
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd90      	pop	{r4, r7, pc}

080094dc <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	2b07      	cmp	r3, #7
 80094ec:	d901      	bls.n	80094f2 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80094ee:	2300      	movs	r3, #0
 80094f0:	e00f      	b.n	8009512 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3380      	adds	r3, #128	@ 0x80
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	78fa      	ldrb	r2, [r7, #3]
 800950a:	2115      	movs	r1, #21
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
        return true;
 8009510:	2301      	movs	r3, #1
    }
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 800951a:	b590      	push	{r4, r7, lr}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800952c:	681c      	ldr	r4, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
 800953e:	4603      	mov	r3, r0
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	47a0      	blx	r4
    }
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	bd90      	pop	{r4, r7, pc}

0800954e <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 800954e:	b5b0      	push	{r4, r5, r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	4613      	mov	r3, r2
 800955a:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8009564:	681c      	ldr	r4, [r3, #0]
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 800956c:	2501      	movs	r5, #1
 800956e:	e000      	b.n	8009572 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8009570:	2500      	movs	r5, #0
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	4798      	blx	r3
 8009582:	4603      	mov	r3, r0
 8009584:	461a      	mov	r2, r3
 8009586:	4629      	mov	r1, r5
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	47a0      	blx	r4
    }
 800958c:	bf00      	nop
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bdb0      	pop	{r4, r5, r7, pc}

08009594 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
    }
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
    }
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80095d0:	b5b0      	push	{r4, r5, r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	607b      	str	r3, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	72fb      	strb	r3, [r7, #11]
 80095de:	4613      	mov	r3, r2
 80095e0:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80095ea:	681c      	ldr	r4, [r3, #0]
 80095ec:	7abb      	ldrb	r3, [r7, #10]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d101      	bne.n	80095f6 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80095f2:	2501      	movs	r5, #1
 80095f4:	e000      	b.n	80095f8 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80095f6:	2500      	movs	r5, #0
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	ee07 2a90 	vmov	s15, r2
 8009608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960c:	eeb0 0a67 	vmov.f32	s0, s15
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	4798      	blx	r3
 8009614:	4603      	mov	r3, r0
 8009616:	7af9      	ldrb	r1, [r7, #11]
 8009618:	462a      	mov	r2, r5
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	47a0      	blx	r4
    }
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bdb0      	pop	{r4, r5, r7, pc}

08009626 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8009626:	b5b0      	push	{r4, r5, r7, lr}
 8009628:	b082      	sub	sp, #8
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800963a:	681c      	ldr	r4, [r3, #0]
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 8009642:	2501      	movs	r5, #1
 8009644:	e000      	b.n	8009648 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 8009646:	2500      	movs	r5, #0
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2106      	movs	r1, #6
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	4798      	blx	r3
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	4629      	mov	r1, r5
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	47a0      	blx	r4
    }
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bdb0      	pop	{r4, r5, r7, pc}

0800966a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800966a:	b5b0      	push	{r4, r5, r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	60f8      	str	r0, [r7, #12]
 8009672:	460b      	mov	r3, r1
 8009674:	607a      	str	r2, [r7, #4]
 8009676:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009680:	681c      	ldr	r4, [r3, #0]
 8009682:	7afb      	ldrb	r3, [r7, #11]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d101      	bne.n	800968c <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 8009688:	2501      	movs	r5, #1
 800968a:	e000      	b.n	800968e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 800968c:	2500      	movs	r5, #0
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	ee07 2a90 	vmov	s15, r2
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	eeb0 0a67 	vmov.f32	s0, s15
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	4798      	blx	r3
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	4629      	mov	r1, r5
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	47a0      	blx	r4
    }
 80096b4:	bf00      	nop
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bdb0      	pop	{r4, r5, r7, pc}

080096bc <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	460b      	mov	r3, r1
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	7afa      	ldrb	r2, [r7, #11]
 80096d6:	2a01      	cmp	r2, #1
 80096d8:	d101      	bne.n	80096de <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 80096da:	2101      	movs	r1, #1
 80096dc:	e000      	b.n	80096e0 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 80096de:	2100      	movs	r1, #0
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	4798      	blx	r3
    }
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	4798      	blx	r3
    }
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
    }
 8009722:	bf00      	nop
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 800972a:	b580      	push	{r7, lr}
 800972c:	b082      	sub	sp, #8
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	4798      	blx	r3
    }
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
    }
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 800976e:	bf00      	nop
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2101      	movs	r1, #1
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	bf0c      	ite	eq
 8009786:	2301      	moveq	r3, #1
 8009788:	2300      	movne	r3, #0
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1ef      	bne.n	8009770 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 8009790:	bf00      	nop
 8009792:	bf00      	nop
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	460b      	mov	r3, r1
 80097a4:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3380      	adds	r3, #128	@ 0x80
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	2a01      	cmp	r2, #1
 80097c0:	d101      	bne.n	80097c6 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80097c2:	2201      	movs	r2, #1
 80097c4:	e000      	b.n	80097c8 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80097c6:	2200      	movs	r2, #0
 80097c8:	4611      	mov	r1, r2
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
    }
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	460b      	mov	r3, r1
 80097e0:	70fb      	strb	r3, [r7, #3]
 80097e2:	4613      	mov	r3, r2
 80097e4:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	78ba      	ldrb	r2, [r7, #2]
 80097f2:	2a01      	cmp	r2, #1
 80097f4:	d101      	bne.n	80097fa <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80097f6:	2201      	movs	r2, #1
 80097f8:	e000      	b.n	80097fc <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80097fa:	2200      	movs	r2, #0
 80097fc:	78f9      	ldrb	r1, [r7, #3]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	4798      	blx	r3
    }
 8009802:	bf00      	nop
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
    }
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	b2d2      	uxtb	r2, r2
 8009866:	4611      	mov	r1, r2
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2100      	movs	r1, #0
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2102      	movs	r1, #2
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2103      	movs	r1, #3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2203      	movs	r2, #3
 80098e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098ec:	bf00      	nop
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2106      	movs	r1, #6
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2204      	movs	r2, #4
 8009910:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2107      	movs	r1, #7
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2205      	movs	r2, #5
 8009938:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2104      	movs	r1, #4
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2206      	movs	r2, #6
 8009960:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2105      	movs	r1, #5
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2207      	movs	r2, #7
 8009988:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 800999c:	4b0b      	ldr	r3, [pc, #44]	@ (80099cc <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80099a4:	4b09      	ldr	r3, [pc, #36]	@ (80099cc <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80099a6:	2201      	movs	r2, #1
 80099a8:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4906      	ldr	r1, [pc, #24]	@ (80099d0 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2208      	movs	r2, #8
 80099be:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099c2:	bf00      	nop
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20000215 	.word	0x20000215
 80099d0:	20000218 	.word	0x20000218

080099d4 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	b2d1      	uxtb	r1, r2
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099fc:	bf00      	nop
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2102      	movs	r1, #2
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2209      	movs	r2, #9
 8009a48:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a4c:	bf00      	nop
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a66:	681c      	ldr	r4, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	4798      	blx	r3
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	2102      	movs	r1, #2
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd90      	pop	{r4, r7, pc}

08009a92 <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8009a92:	b590      	push	{r4, r7, lr}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009aa4:	681c      	ldr	r4, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	ee07 2a90 	vmov	s15, r2
 8009ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aba:	eeb0 0a67 	vmov.f32	s0, s15
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	2103      	movs	r1, #3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd90      	pop	{r4, r7, pc}

08009adc <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8009adc:	b590      	push	{r4, r7, lr}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009aee:	681c      	ldr	r4, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	ee07 2a90 	vmov	s15, r2
 8009b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b04:	eeb0 0a67 	vmov.f32	s0, s15
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	4798      	blx	r3
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	2106      	movs	r1, #6
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b1e:	bf00      	nop
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd90      	pop	{r4, r7, pc}

08009b26 <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8009b26:	b590      	push	{r4, r7, lr}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b38:	681c      	ldr	r4, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	ee07 2a90 	vmov	s15, r2
 8009b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	4798      	blx	r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	461a      	mov	r2, r3
 8009b5a:	2107      	movs	r1, #7
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd90      	pop	{r4, r7, pc}

08009b70 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009b70:	b590      	push	{r4, r7, lr}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b82:	681c      	ldr	r4, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	ee07 2a90 	vmov	s15, r2
 8009b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b98:	eeb0 0a67 	vmov.f32	s0, s15
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	4798      	blx	r3
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	2104      	movs	r1, #4
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bb2:	bf00      	nop
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd90      	pop	{r4, r7, pc}

08009bba <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8009bba:	b590      	push	{r4, r7, lr}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009bcc:	681c      	ldr	r4, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	ee07 2a90 	vmov	s15, r2
 8009bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be2:	eeb0 0a67 	vmov.f32	s0, s15
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	4798      	blx	r3
 8009bea:	4603      	mov	r3, r0
 8009bec:	461a      	mov	r2, r3
 8009bee:	2105      	movs	r1, #5
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd90      	pop	{r4, r7, pc}

08009c04 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8009c16:	681c      	ldr	r4, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd90      	pop	{r4, r7, pc}

08009c40 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009c40:	b5b0      	push	{r4, r5, r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009c56:	681c      	ldr	r4, [r3, #0]
 8009c58:	79fb      	ldrb	r3, [r7, #7]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d101      	bne.n	8009c62 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009c5e:	2501      	movs	r5, #1
 8009c60:	e000      	b.n	8009c64 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009c62:	2500      	movs	r5, #0
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	4798      	blx	r3
 8009c74:	4603      	mov	r3, r0
 8009c76:	461a      	mov	r2, r3
 8009c78:	4629      	mov	r1, r5
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c86:	bf00      	nop
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bdb0      	pop	{r4, r5, r7, pc}

08009c8e <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b082      	sub	sp, #8
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009cda:	b5b0      	push	{r4, r5, r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	607b      	str	r3, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	72fb      	strb	r3, [r7, #11]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009cf4:	681c      	ldr	r4, [r3, #0]
 8009cf6:	7abb      	ldrb	r3, [r7, #10]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d101      	bne.n	8009d00 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009cfc:	2501      	movs	r5, #1
 8009cfe:	e000      	b.n	8009d02 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009d00:	2500      	movs	r5, #0
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	ee07 2a90 	vmov	s15, r2
 8009d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d16:	eeb0 0a67 	vmov.f32	s0, s15
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	4798      	blx	r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	7af9      	ldrb	r1, [r7, #11]
 8009d22:	462a      	mov	r2, r5
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d30:	bf00      	nop
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bdb0      	pop	{r4, r5, r7, pc}

08009d38 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009d38:	b5b0      	push	{r4, r5, r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009d4c:	681c      	ldr	r4, [r3, #0]
 8009d4e:	78fb      	ldrb	r3, [r7, #3]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d101      	bne.n	8009d58 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009d54:	2501      	movs	r5, #1
 8009d56:	e000      	b.n	8009d5a <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009d58:	2500      	movs	r5, #0
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2106      	movs	r1, #6
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	4798      	blx	r3
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4629      	mov	r1, r5
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d7c:	bf00      	nop
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bdb0      	pop	{r4, r5, r7, pc}

08009d84 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009d84:	b5b0      	push	{r4, r5, r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009d9a:	681c      	ldr	r4, [r3, #0]
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d101      	bne.n	8009da6 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009da2:	2501      	movs	r5, #1
 8009da4:	e000      	b.n	8009da8 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009da6:	2500      	movs	r5, #0
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	ee07 2a90 	vmov	s15, r2
 8009db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	4798      	blx	r3
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	4629      	mov	r1, r5
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009dd6:	bf00      	nop
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bdb0      	pop	{r4, r5, r7, pc}

08009dde <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	460b      	mov	r3, r1
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	7afa      	ldrb	r2, [r7, #11]
 8009df8:	2a01      	cmp	r2, #1
 8009dfa:	d101      	bne.n	8009e00 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	e000      	b.n	8009e02 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009e00:	2100      	movs	r1, #0
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e5c:	bf00      	nop
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	2a01      	cmp	r2, #1
 8009eca:	d101      	bne.n	8009ed0 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009ecc:	2201      	movs	r2, #1
 8009ece:	e000      	b.n	8009ed2 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	78ba      	ldrb	r2, [r7, #2]
 8009f04:	2a01      	cmp	r2, #1
 8009f06:	d101      	bne.n	8009f0c <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009f08:	2201      	movs	r2, #1
 8009f0a:	e000      	b.n	8009f0e <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	78f9      	ldrb	r1, [r7, #3]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009f42:	bf00      	nop
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	4798      	blx	r3
 8009f60:	4603      	mov	r3, r0
    }
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8009f78:	4618      	mov	r0, r3
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8009f84:	b5b0      	push	{r4, r5, r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8009f94:	3b01      	subs	r3, #1
 8009f96:	2b07      	cmp	r3, #7
 8009f98:	f200 80fe 	bhi.w	800a198 <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 8009f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa4 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	08009fc5 	.word	0x08009fc5
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	0800a01f 	.word	0x0800a01f
 8009fb0:	0800a063 	.word	0x0800a063
 8009fb4:	0800a0a9 	.word	0x0800a0a9
 8009fb8:	0800a0ef 	.word	0x0800a0ef
 8009fbc:	0800a135 	.word	0x0800a135
 8009fc0:	0800a17b 	.word	0x0800a17b
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009fcc:	681c      	ldr	r4, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6a12      	ldr	r2, [r2, #32]
 8009fdc:	7b92      	ldrb	r2, [r2, #14]
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	4798      	blx	r3
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	47a0      	blx	r4
 8009fec:	4603      	mov	r3, r0
 8009fee:	e0d4      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009ff8:	681c      	ldr	r4, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	6a12      	ldr	r2, [r2, #32]
 800a008:	3228      	adds	r2, #40	@ 0x28
 800a00a:	7b92      	ldrb	r2, [r2, #14]
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
 800a012:	4603      	mov	r3, r0
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	47a0      	blx	r4
 800a01a:	4603      	mov	r3, r0
 800a01c:	e0bd      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a026:	681c      	ldr	r4, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800a030:	681d      	ldr	r5, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	6a12      	ldr	r2, [r2, #32]
 800a040:	323c      	adds	r2, #60	@ 0x3c
 800a042:	7b92      	ldrb	r2, [r2, #14]
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	4798      	blx	r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	47a8      	blx	r5
 800a052:	eef0 7a40 	vmov.f32	s15, s0
 800a056:	eeb0 0a67 	vmov.f32	s0, s15
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	47a0      	blx	r4
 800a05e:	4603      	mov	r3, r0
 800a060:	e09b      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a06a:	681c      	ldr	r4, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a074:	681d      	ldr	r5, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	6a12      	ldr	r2, [r2, #32]
 800a084:	3278      	adds	r2, #120	@ 0x78
 800a086:	7b92      	ldrb	r2, [r2, #14]
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	4798      	blx	r3
 800a08e:	4603      	mov	r3, r0
 800a090:	b29b      	uxth	r3, r3
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	47a8      	blx	r5
 800a098:	eef0 7a40 	vmov.f32	s15, s0
 800a09c:	eeb0 0a67 	vmov.f32	s0, s15
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	47a0      	blx	r4
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	e078      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0b0:	681c      	ldr	r4, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a0ba:	681d      	ldr	r5, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	6a12      	ldr	r2, [r2, #32]
 800a0ca:	328c      	adds	r2, #140	@ 0x8c
 800a0cc:	7b92      	ldrb	r2, [r2, #14]
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	4798      	blx	r3
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	47a8      	blx	r5
 800a0de:	eef0 7a40 	vmov.f32	s15, s0
 800a0e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	47a0      	blx	r4
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	e055      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0f6:	681c      	ldr	r4, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a100:	681d      	ldr	r5, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6a12      	ldr	r2, [r2, #32]
 800a110:	3250      	adds	r2, #80	@ 0x50
 800a112:	7b92      	ldrb	r2, [r2, #14]
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	4798      	blx	r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	47a8      	blx	r5
 800a124:	eef0 7a40 	vmov.f32	s15, s0
 800a128:	eeb0 0a67 	vmov.f32	s0, s15
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	47a0      	blx	r4
 800a130:	4603      	mov	r3, r0
 800a132:	e032      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a13c:	681c      	ldr	r4, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a146:	681d      	ldr	r5, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	6a12      	ldr	r2, [r2, #32]
 800a156:	3264      	adds	r2, #100	@ 0x64
 800a158:	7b92      	ldrb	r2, [r2, #14]
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	4798      	blx	r3
 800a160:	4603      	mov	r3, r0
 800a162:	b29b      	uxth	r3, r3
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	47a8      	blx	r5
 800a16a:	eef0 7a40 	vmov.f32	s15, s0
 800a16e:	eeb0 0a67 	vmov.f32	s0, s15
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	47a0      	blx	r4
 800a176:	4603      	mov	r3, r0
 800a178:	e00f      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2104      	movs	r1, #4
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	4798      	blx	r3
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d101      	bne.n	800a194 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a190:	2301      	movs	r3, #1
 800a192:	e002      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a194:	2300      	movs	r3, #0
 800a196:	e000      	b.n	800a19a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a198:	2300      	movs	r3, #0
    }
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a1a2:	bf00      	nop

0800a1a4 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6898      	ldr	r0, [r3, #8]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	899b      	ldrh	r3, [r3, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f004 fc80 	bl	800eabc <HAL_GPIO_WritePin>
    }
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1d4:	d303      	bcc.n	800a1de <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800a1dc:	e000      	b.n	800a1e0 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a1de:	683b      	ldr	r3, [r7, #0]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	db05      	blt.n	800a208 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a202:	da01      	bge.n	800a208 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	e00c      	b.n	800a222 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800a20e:	db06      	blt.n	800a21e <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	da03      	bge.n	800a21e <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800a21c:	e001      	b.n	800a222 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a21e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
	...

0800a230 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	ee07 3a90 	vmov	s15, r3
 800a240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a244:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a25c <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a248:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a24c:	eeb0 0a67 	vmov.f32	s0, s15
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	3c74242a 	.word	0x3c74242a

0800a260 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a26c:	edd7 7a00 	vldr	s15, [r7]
 800a270:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a2a4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a274:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a27c:	d80a      	bhi.n	800a294 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a27e:	ed97 7a00 	vldr	s14, [r7]
 800a282:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a2a8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a286:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a28a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a28e:	ee17 3a90 	vmov	r3, s15
 800a292:	e000      	b.n	800a296 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	4674241b 	.word	0x4674241b
 800a2a8:	3c74242a 	.word	0x3c74242a

0800a2ac <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a2b8:	887b      	ldrh	r3, [r7, #2]
 800a2ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2be:	d209      	bcs.n	800a2d4 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a2c0:	887b      	ldrh	r3, [r7, #2]
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ca:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a2e8 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a2ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2d2:	e001      	b.n	800a2d8 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a2d4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a2ec <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a2d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	4168d4fe 	.word	0x4168d4fe
 800a2ec:	00000000 	.word	0x00000000

0800a2f0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a2fc:	edd7 7a00 	vldr	s15, [r7]
 800a300:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a334 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a304:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30c:	d80b      	bhi.n	800a326 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a30e:	ed97 7a00 	vldr	s14, [r7]
 800a312:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a338 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a31a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a31e:	ee17 3a90 	vmov	r3, s15
 800a322:	b29b      	uxth	r3, r3
 800a324:	e000      	b.n	800a328 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	4768c671 	.word	0x4768c671
 800a338:	4168d4fe 	.word	0x4168d4fe

0800a33c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a348:	887b      	ldrh	r3, [r7, #2]
 800a34a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a34e:	d209      	bcs.n	800a364 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a350:	887b      	ldrh	r3, [r7, #2]
 800a352:	ee07 3a90 	vmov	s15, r3
 800a356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a35a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a378 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a35e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a362:	e001      	b.n	800a368 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a364:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a37c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a368:	eeb0 0a67 	vmov.f32	s0, s15
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	4168d4fe 	.word	0x4168d4fe
 800a37c:	00000000 	.word	0x00000000

0800a380 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a38c:	edd7 7a00 	vldr	s15, [r7]
 800a390:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a3c4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a394:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39c:	d80b      	bhi.n	800a3b6 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a39e:	ed97 7a00 	vldr	s14, [r7]
 800a3a2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a3c8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a3a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ae:	ee17 3a90 	vmov	r3, s15
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	e000      	b.n	800a3b8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	4768c671 	.word	0x4768c671
 800a3c8:	4168d4fe 	.word	0x4168d4fe

0800a3cc <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a3d8:	887b      	ldrh	r3, [r7, #2]
 800a3da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3de:	d209      	bcs.n	800a3f4 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a3e0:	887b      	ldrh	r3, [r7, #2]
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3ea:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a408 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a3ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3f2:	e001      	b.n	800a3f8 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a3f4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a40c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a3f8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	4174240b 	.word	0x4174240b
 800a40c:	00000000 	.word	0x00000000

0800a410 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a41c:	edd7 7a00 	vldr	s15, [r7]
 800a420:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a454 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a424:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42c:	d80b      	bhi.n	800a446 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a42e:	ed97 7a00 	vldr	s14, [r7]
 800a432:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a458 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a43a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a43e:	ee17 3a90 	vmov	r3, s15
 800a442:	b29b      	uxth	r3, r3
 800a444:	e000      	b.n	800a448 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	4673e702 	.word	0x4673e702
 800a458:	4174240b 	.word	0x4174240b

0800a45c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a468:	887b      	ldrh	r3, [r7, #2]
 800a46a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a46e:	d209      	bcs.n	800a484 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a470:	887b      	ldrh	r3, [r7, #2]
 800a472:	ee07 3a90 	vmov	s15, r3
 800a476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a47a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a498 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a47e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a482:	e001      	b.n	800a488 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a484:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a49c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a488:	eeb0 0a67 	vmov.f32	s0, s15
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	3e742401 	.word	0x3e742401
 800a49c:	00000000 	.word	0x00000000

0800a4a0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a4ac:	edd7 7a00 	vldr	s15, [r7]
 800a4b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a4e4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a4b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4bc:	d80b      	bhi.n	800a4d6 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a4be:	ed97 7a00 	vldr	s14, [r7]
 800a4c2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a4e8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a4c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ce:	ee17 3a90 	vmov	r3, s15
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	e000      	b.n	800a4d8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	447414bf 	.word	0x447414bf
 800a4e8:	3e742401 	.word	0x3e742401

0800a4ec <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a4f8:	887b      	ldrh	r3, [r7, #2]
 800a4fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4fe:	d219      	bcs.n	800a534 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a500:	887b      	ldrh	r3, [r7, #2]
 800a502:	4618      	mov	r0, r3
 800a504:	f7f6 f83e 	bl	8000584 <__aeabi_i2d>
 800a508:	f04f 0200 	mov.w	r2, #0
 800a50c:	4b0e      	ldr	r3, [pc, #56]	@ (800a548 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a50e:	f7f5 feed 	bl	80002ec <__adddf3>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	4610      	mov	r0, r2
 800a518:	4619      	mov	r1, r3
 800a51a:	f04f 0200 	mov.w	r2, #0
 800a51e:	4b0b      	ldr	r3, [pc, #44]	@ (800a54c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a520:	f7f6 f89a 	bl	8000658 <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4610      	mov	r0, r2
 800a52a:	4619      	mov	r1, r3
 800a52c:	f7f6 fb8c 	bl	8000c48 <__aeabi_d2f>
 800a530:	4603      	mov	r3, r0
 800a532:	e001      	b.n	800a538 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a534:	f04f 0300 	mov.w	r3, #0
}
 800a538:	ee07 3a90 	vmov	s15, r3
 800a53c:	eeb0 0a67 	vmov.f32	s0, s15
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	3fe00000 	.word	0x3fe00000
 800a54c:	402e8000 	.word	0x402e8000

0800a550 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a55c:	edd7 7a00 	vldr	s15, [r7]
 800a560:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a59c <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a564:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56c:	d80f      	bhi.n	800a58e <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a56e:	ed97 7a00 	vldr	s14, [r7]
 800a572:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800a5a0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a57a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a57e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a586:	ee17 3a90 	vmov	r3, s15
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	e000      	b.n	800a590 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	4673e180 	.word	0x4673e180
 800a5a0:	41740000 	.word	0x41740000

0800a5a4 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a5b0:	887b      	ldrh	r3, [r7, #2]
 800a5b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5b6:	d209      	bcs.n	800a5cc <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a5b8:	887b      	ldrh	r3, [r7, #2]
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a5e0 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a5c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a5ca:	e001      	b.n	800a5d0 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a5cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a5e4 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a5d0:	eeb0 0a67 	vmov.f32	s0, s15
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	3d7423f4 	.word	0x3d7423f4
 800a5e4:	00000000 	.word	0x00000000

0800a5e8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a5f4:	edd7 7a00 	vldr	s15, [r7]
 800a5f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a62c <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a5fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a604:	d80b      	bhi.n	800a61e <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a606:	ed97 7a00 	vldr	s14, [r7]
 800a60a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a630 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a60e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a616:	ee17 3a90 	vmov	r3, s15
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	e000      	b.n	800a620 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	44742023 	.word	0x44742023
 800a630:	3d7423f4 	.word	0x3d7423f4

0800a634 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a64a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a660 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a64e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a652:	eeb0 0a67 	vmov.f32	s0, s15
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	3783956e 	.word	0x3783956e

0800a664 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a670:	edd7 7a02 	vldr	s15, [r7, #8]
 800a674:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a6ac <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a680:	d80c      	bhi.n	800a69c <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a682:	ed97 7a02 	vldr	s14, [r7, #8]
 800a686:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a6b0 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a68a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a692:	edc7 7a01 	vstr	s15, [r7, #4]
 800a696:	793b      	ldrb	r3, [r7, #4]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	e000      	b.n	800a69e <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	3b8311d9 	.word	0x3b8311d9
 800a6b0:	3783956e 	.word	0x3783956e

0800a6b4 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6ca:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a6e0 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a6ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a6d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	3783956e 	.word	0x3783956e

0800a6e4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a6f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6f4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a72c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a6f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a700:	d80c      	bhi.n	800a71c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a702:	ed97 7a02 	vldr	s14, [r7, #8]
 800a706:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a730 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a70a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a70e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a712:	edc7 7a01 	vstr	s15, [r7, #4]
 800a716:	793b      	ldrb	r3, [r7, #4]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	e000      	b.n	800a71e <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	3b8311d9 	.word	0x3b8311d9
 800a730:	3783956e 	.word	0x3783956e

0800a734 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	ee07 3a90 	vmov	s15, r3
 800a746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a74a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a760 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a74e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a752:	eeb0 0a67 	vmov.f32	s0, s15
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	3783956e 	.word	0x3783956e

0800a764 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a770:	edd7 7a02 	vldr	s15, [r7, #8]
 800a774:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a7ac <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a780:	d80c      	bhi.n	800a79c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a782:	ed97 7a02 	vldr	s14, [r7, #8]
 800a786:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a7b0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a78a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a78e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a792:	edc7 7a01 	vstr	s15, [r7, #4]
 800a796:	793b      	ldrb	r3, [r7, #4]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	e000      	b.n	800a79e <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	3b8311d9 	.word	0x3b8311d9
 800a7b0:	3783956e 	.word	0x3783956e

0800a7b4 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a7c0:	78fb      	ldrb	r3, [r7, #3]
 800a7c2:	2b0f      	cmp	r3, #15
 800a7c4:	d80a      	bhi.n	800a7dc <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a7c6:	78fb      	ldrb	r3, [r7, #3]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	ee07 3a90 	vmov	s15, r3
 800a7ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7d2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a7f0 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a7d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7da:	e001      	b.n	800a7e0 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a7dc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a7f4 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a7e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	43bb8000 	.word	0x43bb8000
 800a7f4:	00000000 	.word	0x00000000

0800a7f8 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a804:	edd7 7a02 	vldr	s15, [r7, #8]
 800a808:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a894 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a80c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a814:	d836      	bhi.n	800a884 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a816:	ed97 7a02 	vldr	s14, [r7, #8]
 800a81a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a898 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a81e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a822:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a826:	edd7 7a05 	vldr	s15, [r7, #20]
 800a82a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a82e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a832:	793b      	ldrb	r3, [r7, #4]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a83e:	ed97 7a05 	vldr	s14, [r7, #20]
 800a842:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a846:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a84a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a84e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a852:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a85a:	d50a      	bpl.n	800a872 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a85c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a864:	edc7 7a01 	vstr	s15, [r7, #4]
 800a868:	793b      	ldrb	r3, [r7, #4]
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	3b01      	subs	r3, #1
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	e009      	b.n	800a886 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a872:	edd7 7a05 	vldr	s15, [r7, #20]
 800a876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a87a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a87e:	793b      	ldrb	r3, [r7, #4]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	e000      	b.n	800a886 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	371c      	adds	r7, #28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	45bb8000 	.word	0x45bb8000
 800a898:	43bb8000 	.word	0x43bb8000

0800a89c <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a8a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	db0a      	blt.n	800a8c6 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a8b0:	78fb      	ldrb	r3, [r7, #3]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	ee07 3a90 	vmov	s15, r3
 800a8b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8bc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a8d8 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a8c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8c4:	e001      	b.n	800a8ca <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a8c6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a8dc <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a8ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	41fa0000 	.word	0x41fa0000
 800a8dc:	00000000 	.word	0x00000000

0800a8e0 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a8ec:	edd7 7a02 	vldr	s15, [r7, #8]
 800a8f0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a97c <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a8f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fc:	d836      	bhi.n	800a96c <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a8fe:	ed97 7a02 	vldr	s14, [r7, #8]
 800a902:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a980 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a90a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a90e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a916:	edc7 7a01 	vstr	s15, [r7, #4]
 800a91a:	793b      	ldrb	r3, [r7, #4]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a926:	ed97 7a05 	vldr	s14, [r7, #20]
 800a92a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a92e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a932:	edd7 7a04 	vldr	s15, [r7, #16]
 800a936:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a93a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a942:	d50a      	bpl.n	800a95a <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a944:	edd7 7a05 	vldr	s15, [r7, #20]
 800a948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a94c:	edc7 7a01 	vstr	s15, [r7, #4]
 800a950:	793b      	ldrb	r3, [r7, #4]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	3b01      	subs	r3, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	e009      	b.n	800a96e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a95a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a95e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a962:	edc7 7a01 	vstr	s15, [r7, #4]
 800a966:	793b      	ldrb	r3, [r7, #4]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	e000      	b.n	800a96e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	371c      	adds	r7, #28
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	457a0000 	.word	0x457a0000
 800a980:	41fa0000 	.word	0x41fa0000

0800a984 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3394      	adds	r3, #148	@ 0x94
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	4798      	blx	r3
  get_status();
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	330c      	adds	r3, #12
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	edd2 7a05 	vldr	s15, [r2, #20]
 800a9ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	4798      	blx	r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	edd2 7a06 	vldr	s15, [r2, #24]
 800a9dc:	eeb0 0a67 	vmov.f32	s0, s15
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	4798      	blx	r3
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	edd2 7a07 	vldr	s15, [r2, #28]
 800a9fe:	eeb0 0a67 	vmov.f32	s0, s15
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	461a      	mov	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	edd2 7a08 	vldr	s15, [r2, #32]
 800aa20:	eeb0 0a67 	vmov.f32	s0, s15
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	4798      	blx	r3
 800aa28:	4603      	mov	r3, r0
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800aa42:	eeb0 0a67 	vmov.f32	s0, s15
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	4798      	blx	r3
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800aa5a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ad2c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa5e:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	ed93 7a00 	vldr	s14, [r3]
 800aa68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa70:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa74:	793b      	ldrb	r3, [r7, #4]
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800aa84:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800ad2c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa88:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	ed93 7a00 	vldr	s14, [r3]
 800aa92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa9a:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa9e:	793b      	ldrb	r3, [r7, #4]
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800aaae:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800ad2c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aab2:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	ed93 7a00 	vldr	s14, [r3]
 800aabc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aac4:	edc7 7a01 	vstr	s15, [r7, #4]
 800aac8:	793b      	ldrb	r3, [r7, #4]
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800aad8:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800ad2c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aadc:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	ed93 7a00 	vldr	s14, [r3]
 800aae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaee:	edc7 7a01 	vstr	s15, [r7, #4]
 800aaf2:	793b      	ldrb	r3, [r7, #4]
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800ab0c:	eeb0 0a67 	vmov.f32	s0, s15
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	4798      	blx	r3
 800ab14:	4603      	mov	r3, r0
 800ab16:	461a      	mov	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800ab2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	4798      	blx	r3
 800ab36:	4603      	mov	r3, r0
 800ab38:	461a      	mov	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800ab50:	eeb0 0a67 	vmov.f32	s0, s15
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	4798      	blx	r3
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800ab72:	eeb0 0a67 	vmov.f32	s0, s15
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	4798      	blx	r3
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800aba0:	eeb0 0a67 	vmov.f32	s0, s15
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	4798      	blx	r3
 800aba8:	4603      	mov	r3, r0
 800abaa:	461a      	mov	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800abc2:	eeb0 0a67 	vmov.f32	s0, s15
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	4798      	blx	r3
 800abca:	4603      	mov	r3, r0
 800abcc:	461a      	mov	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800ac08:	2104      	movs	r1, #4
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800ac1e:	2105      	movs	r1, #5
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800ac34:	2106      	movs	r1, #6
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800ac4a:	2107      	movs	r1, #7
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800ac60:	2108      	movs	r1, #8
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800ac76:	2109      	movs	r1, #9
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800ac8c:	210a      	movs	r1, #10
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800aca2:	210b      	movs	r1, #11
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800acb8:	210c      	movs	r1, #12
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800acce:	210d      	movs	r1, #13
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800ace4:	210e      	movs	r1, #14
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800acfa:	210f      	movs	r1, #15
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800ad10:	2110      	movs	r1, #16
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800ad26:	2111      	movs	r1, #17
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	e001      	b.n	800ad30 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800ad2c:	43800000 	.word	0x43800000
 800ad30:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800ad42:	2113      	movs	r1, #19
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800ad58:	2114      	movs	r1, #20
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800ad6e:	2116      	movs	r1, #22
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800ad84:	2117      	movs	r1, #23
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3354      	adds	r3, #84	@ 0x54
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800ad98:	4611      	mov	r1, r2
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	4798      	blx	r3
 800ad9e:	4603      	mov	r3, r0
 800ada0:	f083 0301 	eor.w	r3, r3, #1
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e000      	b.n	800adb0 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800adb8:	b590      	push	{r4, r7, lr}
 800adba:	b087      	sub	sp, #28
 800adbc:	af02      	add	r7, sp, #8
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	460b      	mov	r3, r1
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800adce:	681c      	ldr	r4, [r3, #0]
 800add0:	7afa      	ldrb	r2, [r7, #11]
 800add2:	2300      	movs	r3, #0
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	4613      	mov	r3, r2
 800addc:	2201      	movs	r2, #1
 800adde:	490c      	ldr	r1, [pc, #48]	@ (800ae10 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a09      	ldr	r2, [pc, #36]	@ (800ae14 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800adf0:	4907      	ldr	r1, [pc, #28]	@ (800ae10 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a05      	ldr	r2, [pc, #20]	@ (800ae18 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800ae02:	4904      	ldr	r1, [pc, #16]	@ (800ae14 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	4798      	blx	r3
}
 800ae08:	bf00      	nop
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd90      	pop	{r4, r7, pc}
 800ae10:	20000218 	.word	0x20000218
 800ae14:	20000238 	.word	0x20000238
 800ae18:	20000240 	.word	0x20000240

0800ae1c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800ae1c:	b590      	push	{r4, r7, lr}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af02      	add	r7, sp, #8
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae30:	681c      	ldr	r4, [r3, #0]
 800ae32:	78fb      	ldrb	r3, [r7, #3]
 800ae34:	2200      	movs	r2, #0
 800ae36:	9201      	str	r2, [sp, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	9200      	str	r2, [sp, #0]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	4917      	ldr	r1, [pc, #92]	@ (800ae9c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a14      	ldr	r2, [pc, #80]	@ (800aea0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae50:	4912      	ldr	r1, [pc, #72]	@ (800ae9c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a10      	ldr	r2, [pc, #64]	@ (800aea4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae62:	490f      	ldr	r1, [pc, #60]	@ (800aea0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a19      	ldr	r1, [r3, #32]
 800ae6c:	78fa      	ldrb	r2, [r7, #3]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	440b      	add	r3, r1
 800ae78:	7b9b      	ldrb	r3, [r3, #14]
 800ae7a:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	7bfa      	ldrb	r2, [r7, #15]
 800ae88:	4906      	ldr	r1, [pc, #24]	@ (800aea4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
 800ae8e:	4603      	mov	r3, r0
 800ae90:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800ae92:	68bb      	ldr	r3, [r7, #8]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd90      	pop	{r4, r7, pc}
 800ae9c:	20000218 	.word	0x20000218
 800aea0:	20000238 	.word	0x20000238
 800aea4:	20000240 	.word	0x20000240

0800aea8 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800aea8:	b590      	push	{r4, r7, lr}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af02      	add	r7, sp, #8
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	607a      	str	r2, [r7, #4]
 800aeb4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aebe:	681c      	ldr	r4, [r3, #0]
 800aec0:	7afa      	ldrb	r2, [r7, #11]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	4613      	mov	r3, r2
 800aecc:	2203      	movs	r2, #3
 800aece:	490c      	ldr	r1, [pc, #48]	@ (800af00 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a09      	ldr	r2, [pc, #36]	@ (800af04 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800aee0:	4907      	ldr	r1, [pc, #28]	@ (800af00 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a05      	ldr	r2, [pc, #20]	@ (800af08 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800aef2:	4904      	ldr	r1, [pc, #16]	@ (800af04 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	4798      	blx	r3
}
 800aef8:	bf00      	nop
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd90      	pop	{r4, r7, pc}
 800af00:	20000218 	.word	0x20000218
 800af04:	20000238 	.word	0x20000238
 800af08:	20000240 	.word	0x20000240

0800af0c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800af0c:	b590      	push	{r4, r7, lr}
 800af0e:	b085      	sub	sp, #20
 800af10:	af02      	add	r7, sp, #8
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af20:	681c      	ldr	r4, [r3, #0]
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	2200      	movs	r2, #0
 800af26:	9201      	str	r2, [sp, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	9200      	str	r2, [sp, #0]
 800af2c:	2204      	movs	r2, #4
 800af2e:	490c      	ldr	r1, [pc, #48]	@ (800af60 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a09      	ldr	r2, [pc, #36]	@ (800af64 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800af40:	4907      	ldr	r1, [pc, #28]	@ (800af60 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a05      	ldr	r2, [pc, #20]	@ (800af68 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800af52:	4904      	ldr	r1, [pc, #16]	@ (800af64 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	4798      	blx	r3
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd90      	pop	{r4, r7, pc}
 800af60:	20000218 	.word	0x20000218
 800af64:	20000238 	.word	0x20000238
 800af68:	20000240 	.word	0x20000240

0800af6c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800af6c:	b590      	push	{r4, r7, lr}
 800af6e:	b087      	sub	sp, #28
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	460b      	mov	r3, r1
 800af76:	607a      	str	r2, [r7, #4]
 800af78:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af82:	681c      	ldr	r4, [r3, #0]
 800af84:	7afa      	ldrb	r2, [r7, #11]
 800af86:	2300      	movs	r3, #0
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	4613      	mov	r3, r2
 800af90:	2205      	movs	r2, #5
 800af92:	490c      	ldr	r1, [pc, #48]	@ (800afc4 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a09      	ldr	r2, [pc, #36]	@ (800afc8 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800afa4:	4907      	ldr	r1, [pc, #28]	@ (800afc4 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a05      	ldr	r2, [pc, #20]	@ (800afcc <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800afb6:	4904      	ldr	r1, [pc, #16]	@ (800afc8 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	4798      	blx	r3
}
 800afbc:	bf00      	nop
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd90      	pop	{r4, r7, pc}
 800afc4:	20000218 	.word	0x20000218
 800afc8:	20000238 	.word	0x20000238
 800afcc:	20000240 	.word	0x20000240

0800afd0 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800afd0:	b590      	push	{r4, r7, lr}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af02      	add	r7, sp, #8
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afe0:	d21f      	bcs.n	800b022 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800afea:	681c      	ldr	r4, [r3, #0]
 800afec:	2300      	movs	r3, #0
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	2300      	movs	r3, #0
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2206      	movs	r2, #6
 800aff8:	490c      	ldr	r1, [pc, #48]	@ (800b02c <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a09      	ldr	r2, [pc, #36]	@ (800b030 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b00a:	4908      	ldr	r1, [pc, #32]	@ (800b02c <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a06      	ldr	r2, [pc, #24]	@ (800b034 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800b01c:	4904      	ldr	r1, [pc, #16]	@ (800b030 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	4798      	blx	r3
}
 800b022:	bf00      	nop
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	bd90      	pop	{r4, r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20000218 	.word	0x20000218
 800b030:	20000238 	.word	0x20000238
 800b034:	20000240 	.word	0x20000240

0800b038 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b038:	b590      	push	{r4, r7, lr}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	460b      	mov	r3, r1
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b04c:	d220      	bcs.n	800b090 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b056:	681c      	ldr	r4, [r3, #0]
 800b058:	7afa      	ldrb	r2, [r7, #11]
 800b05a:	2300      	movs	r3, #0
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	4613      	mov	r3, r2
 800b064:	2207      	movs	r2, #7
 800b066:	490c      	ldr	r1, [pc, #48]	@ (800b098 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a09      	ldr	r2, [pc, #36]	@ (800b09c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b078:	4907      	ldr	r1, [pc, #28]	@ (800b098 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a05      	ldr	r2, [pc, #20]	@ (800b0a0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800b08a:	4904      	ldr	r1, [pc, #16]	@ (800b09c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	4798      	blx	r3
}
 800b090:	bf00      	nop
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	bd90      	pop	{r4, r7, pc}
 800b098:	20000218 	.word	0x20000218
 800b09c:	20000238 	.word	0x20000238
 800b0a0:	20000240 	.word	0x20000240

0800b0a4 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b0a4:	b590      	push	{r4, r7, lr}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	72fb      	strb	r3, [r7, #11]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b0be:	681c      	ldr	r4, [r3, #0]
 800b0c0:	7af9      	ldrb	r1, [r7, #11]
 800b0c2:	7abb      	ldrb	r3, [r7, #10]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	9201      	str	r2, [sp, #4]
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	2208      	movs	r2, #8
 800b0ce:	490c      	ldr	r1, [pc, #48]	@ (800b100 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a09      	ldr	r2, [pc, #36]	@ (800b104 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b0e0:	4907      	ldr	r1, [pc, #28]	@ (800b100 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a05      	ldr	r2, [pc, #20]	@ (800b108 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800b0f2:	4904      	ldr	r1, [pc, #16]	@ (800b104 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	4798      	blx	r3
}
 800b0f8:	bf00      	nop
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd90      	pop	{r4, r7, pc}
 800b100:	20000218 	.word	0x20000218
 800b104:	20000238 	.word	0x20000238
 800b108:	20000240 	.word	0x20000240

0800b10c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b10c:	b590      	push	{r4, r7, lr}
 800b10e:	b085      	sub	sp, #20
 800b110:	af02      	add	r7, sp, #8
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
 800b118:	4613      	mov	r3, r2
 800b11a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b124:	681c      	ldr	r4, [r3, #0]
 800b126:	78fa      	ldrb	r2, [r7, #3]
 800b128:	78bb      	ldrb	r3, [r7, #2]
 800b12a:	2100      	movs	r1, #0
 800b12c:	9101      	str	r1, [sp, #4]
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	4613      	mov	r3, r2
 800b132:	2209      	movs	r2, #9
 800b134:	490c      	ldr	r1, [pc, #48]	@ (800b168 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a09      	ldr	r2, [pc, #36]	@ (800b16c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b146:	4908      	ldr	r1, [pc, #32]	@ (800b168 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a06      	ldr	r2, [pc, #24]	@ (800b170 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b158:	4904      	ldr	r1, [pc, #16]	@ (800b16c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	bd90      	pop	{r4, r7, pc}
 800b166:	bf00      	nop
 800b168:	20000218 	.word	0x20000218
 800b16c:	20000238 	.word	0x20000238
 800b170:	20000240 	.word	0x20000240

0800b174 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b174:	b590      	push	{r4, r7, lr}
 800b176:	b085      	sub	sp, #20
 800b178:	af02      	add	r7, sp, #8
 800b17a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b184:	681c      	ldr	r4, [r3, #0]
 800b186:	2300      	movs	r3, #0
 800b188:	9301      	str	r3, [sp, #4]
 800b18a:	2300      	movs	r3, #0
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	2300      	movs	r3, #0
 800b190:	220a      	movs	r2, #10
 800b192:	490c      	ldr	r1, [pc, #48]	@ (800b1c4 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a09      	ldr	r2, [pc, #36]	@ (800b1c8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b1a4:	4907      	ldr	r1, [pc, #28]	@ (800b1c4 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a05      	ldr	r2, [pc, #20]	@ (800b1cc <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b1b6:	4904      	ldr	r1, [pc, #16]	@ (800b1c8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	4798      	blx	r3
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd90      	pop	{r4, r7, pc}
 800b1c4:	20000218 	.word	0x20000218
 800b1c8:	20000238 	.word	0x20000238
 800b1cc:	20000240 	.word	0x20000240

0800b1d0 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b1d0:	b590      	push	{r4, r7, lr}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af02      	add	r7, sp, #8
 800b1d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1e0:	681c      	ldr	r4, [r3, #0]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	220b      	movs	r2, #11
 800b1ee:	490c      	ldr	r1, [pc, #48]	@ (800b220 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a09      	ldr	r2, [pc, #36]	@ (800b224 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b200:	4907      	ldr	r1, [pc, #28]	@ (800b220 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a05      	ldr	r2, [pc, #20]	@ (800b228 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b212:	4904      	ldr	r1, [pc, #16]	@ (800b224 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	4798      	blx	r3
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd90      	pop	{r4, r7, pc}
 800b220:	20000218 	.word	0x20000218
 800b224:	20000238 	.word	0x20000238
 800b228:	20000240 	.word	0x20000240

0800b22c <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b22c:	b590      	push	{r4, r7, lr}
 800b22e:	b085      	sub	sp, #20
 800b230:	af02      	add	r7, sp, #8
 800b232:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b23c:	681c      	ldr	r4, [r3, #0]
 800b23e:	2300      	movs	r3, #0
 800b240:	9301      	str	r3, [sp, #4]
 800b242:	2300      	movs	r3, #0
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	2300      	movs	r3, #0
 800b248:	220c      	movs	r2, #12
 800b24a:	490c      	ldr	r1, [pc, #48]	@ (800b27c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a09      	ldr	r2, [pc, #36]	@ (800b280 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b25c:	4907      	ldr	r1, [pc, #28]	@ (800b27c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a05      	ldr	r2, [pc, #20]	@ (800b284 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b26e:	4904      	ldr	r1, [pc, #16]	@ (800b280 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	4798      	blx	r3
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd90      	pop	{r4, r7, pc}
 800b27c:	20000218 	.word	0x20000218
 800b280:	20000238 	.word	0x20000238
 800b284:	20000240 	.word	0x20000240

0800b288 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b288:	b590      	push	{r4, r7, lr}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b298:	681c      	ldr	r4, [r3, #0]
 800b29a:	2300      	movs	r3, #0
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	220d      	movs	r2, #13
 800b2a6:	490c      	ldr	r1, [pc, #48]	@ (800b2d8 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a09      	ldr	r2, [pc, #36]	@ (800b2dc <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b2b8:	4907      	ldr	r1, [pc, #28]	@ (800b2d8 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a05      	ldr	r2, [pc, #20]	@ (800b2e0 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b2ca:	4904      	ldr	r1, [pc, #16]	@ (800b2dc <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	4798      	blx	r3
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd90      	pop	{r4, r7, pc}
 800b2d8:	20000218 	.word	0x20000218
 800b2dc:	20000238 	.word	0x20000238
 800b2e0:	20000240 	.word	0x20000240

0800b2e4 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b2e4:	b590      	push	{r4, r7, lr}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2f4:	681c      	ldr	r4, [r3, #0]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	2300      	movs	r3, #0
 800b300:	220e      	movs	r2, #14
 800b302:	490c      	ldr	r1, [pc, #48]	@ (800b334 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a09      	ldr	r2, [pc, #36]	@ (800b338 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b314:	4907      	ldr	r1, [pc, #28]	@ (800b334 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a05      	ldr	r2, [pc, #20]	@ (800b33c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b326:	4904      	ldr	r1, [pc, #16]	@ (800b338 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	4798      	blx	r3
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	bd90      	pop	{r4, r7, pc}
 800b334:	20000218 	.word	0x20000218
 800b338:	20000238 	.word	0x20000238
 800b33c:	20000240 	.word	0x20000240

0800b340 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b340:	b590      	push	{r4, r7, lr}
 800b342:	b085      	sub	sp, #20
 800b344:	af02      	add	r7, sp, #8
 800b346:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b350:	681c      	ldr	r4, [r3, #0]
 800b352:	2300      	movs	r3, #0
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	2300      	movs	r3, #0
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	2300      	movs	r3, #0
 800b35c:	220f      	movs	r2, #15
 800b35e:	490c      	ldr	r1, [pc, #48]	@ (800b390 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a09      	ldr	r2, [pc, #36]	@ (800b394 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b370:	4907      	ldr	r1, [pc, #28]	@ (800b390 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a05      	ldr	r2, [pc, #20]	@ (800b398 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b382:	4904      	ldr	r1, [pc, #16]	@ (800b394 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	4798      	blx	r3
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd90      	pop	{r4, r7, pc}
 800b390:	20000218 	.word	0x20000218
 800b394:	20000238 	.word	0x20000238
 800b398:	20000240 	.word	0x20000240

0800b39c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b39c:	b590      	push	{r4, r7, lr}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af02      	add	r7, sp, #8
 800b3a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3ac:	681c      	ldr	r4, [r3, #0]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	2210      	movs	r2, #16
 800b3ba:	490c      	ldr	r1, [pc, #48]	@ (800b3ec <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a09      	ldr	r2, [pc, #36]	@ (800b3f0 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b3cc:	4907      	ldr	r1, [pc, #28]	@ (800b3ec <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a05      	ldr	r2, [pc, #20]	@ (800b3f4 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b3de:	4904      	ldr	r1, [pc, #16]	@ (800b3f0 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	4798      	blx	r3
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd90      	pop	{r4, r7, pc}
 800b3ec:	20000218 	.word	0x20000218
 800b3f0:	20000238 	.word	0x20000238
 800b3f4:	20000240 	.word	0x20000240

0800b3f8 <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b3f8:	b590      	push	{r4, r7, lr}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b408:	681c      	ldr	r4, [r3, #0]
 800b40a:	2300      	movs	r3, #0
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	2300      	movs	r3, #0
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	2211      	movs	r2, #17
 800b416:	490c      	ldr	r1, [pc, #48]	@ (800b448 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a09      	ldr	r2, [pc, #36]	@ (800b44c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b428:	4907      	ldr	r1, [pc, #28]	@ (800b448 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a05      	ldr	r2, [pc, #20]	@ (800b450 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b43a:	4904      	ldr	r1, [pc, #16]	@ (800b44c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	4798      	blx	r3
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	bd90      	pop	{r4, r7, pc}
 800b448:	20000218 	.word	0x20000218
 800b44c:	20000238 	.word	0x20000238
 800b450:	20000240 	.word	0x20000240

0800b454 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b087      	sub	sp, #28
 800b458:	af02      	add	r7, sp, #8
 800b45a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b464:	681c      	ldr	r4, [r3, #0]
 800b466:	2300      	movs	r3, #0
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	2300      	movs	r3, #0
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	2300      	movs	r3, #0
 800b470:	2212      	movs	r2, #18
 800b472:	4912      	ldr	r1, [pc, #72]	@ (800b4bc <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a0f      	ldr	r2, [pc, #60]	@ (800b4c0 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b484:	490d      	ldr	r1, [pc, #52]	@ (800b4bc <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a0b      	ldr	r2, [pc, #44]	@ (800b4c4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b496:	490a      	ldr	r1, [pc, #40]	@ (800b4c0 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	4906      	ldr	r1, [pc, #24]	@ (800b4c4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	4798      	blx	r3
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b4b2:	89fb      	ldrh	r3, [r7, #14]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd90      	pop	{r4, r7, pc}
 800b4bc:	20000218 	.word	0x20000218
 800b4c0:	20000238 	.word	0x20000238
 800b4c4:	20000240 	.word	0x20000240

0800b4c8 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b4c8:	b590      	push	{r4, r7, lr}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af02      	add	r7, sp, #8
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4de:	681c      	ldr	r4, [r3, #0]
 800b4e0:	7afa      	ldrb	r2, [r7, #11]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	4903      	ldr	r1, [pc, #12]	@ (800b4fc <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	47a0      	blx	r4
}
 800b4f4:	bf00      	nop
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd90      	pop	{r4, r7, pc}
 800b4fc:	20000218 	.word	0x20000218

0800b500 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b500:	b590      	push	{r4, r7, lr}
 800b502:	b085      	sub	sp, #20
 800b504:	af02      	add	r7, sp, #8
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b514:	681c      	ldr	r4, [r3, #0]
 800b516:	78fb      	ldrb	r3, [r7, #3]
 800b518:	2200      	movs	r2, #0
 800b51a:	9201      	str	r2, [sp, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	9200      	str	r2, [sp, #0]
 800b520:	2202      	movs	r2, #2
 800b522:	4903      	ldr	r1, [pc, #12]	@ (800b530 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	47a0      	blx	r4
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd90      	pop	{r4, r7, pc}
 800b530:	20000218 	.word	0x20000218

0800b534 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b087      	sub	sp, #28
 800b538:	af02      	add	r7, sp, #8
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	460b      	mov	r3, r1
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b54a:	681c      	ldr	r4, [r3, #0]
 800b54c:	7afa      	ldrb	r2, [r7, #11]
 800b54e:	2300      	movs	r3, #0
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	4613      	mov	r3, r2
 800b558:	2203      	movs	r2, #3
 800b55a:	4903      	ldr	r1, [pc, #12]	@ (800b568 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	47a0      	blx	r4
}
 800b560:	bf00      	nop
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	bd90      	pop	{r4, r7, pc}
 800b568:	20000218 	.word	0x20000218

0800b56c <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b56c:	b590      	push	{r4, r7, lr}
 800b56e:	b085      	sub	sp, #20
 800b570:	af02      	add	r7, sp, #8
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b580:	681c      	ldr	r4, [r3, #0]
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	2200      	movs	r2, #0
 800b586:	9201      	str	r2, [sp, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	9200      	str	r2, [sp, #0]
 800b58c:	2204      	movs	r2, #4
 800b58e:	4903      	ldr	r1, [pc, #12]	@ (800b59c <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	47a0      	blx	r4
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd90      	pop	{r4, r7, pc}
 800b59c:	20000218 	.word	0x20000218

0800b5a0 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b5a0:	b590      	push	{r4, r7, lr}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5b6:	681c      	ldr	r4, [r3, #0]
 800b5b8:	7afa      	ldrb	r2, [r7, #11]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	2205      	movs	r2, #5
 800b5c6:	4903      	ldr	r1, [pc, #12]	@ (800b5d4 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	47a0      	blx	r4
}
 800b5cc:	bf00      	nop
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd90      	pop	{r4, r7, pc}
 800b5d4:	20000218 	.word	0x20000218

0800b5d8 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b5d8:	b590      	push	{r4, r7, lr}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5ea:	681c      	ldr	r4, [r3, #0]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2206      	movs	r2, #6
 800b5f8:	4903      	ldr	r1, [pc, #12]	@ (800b608 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	47a0      	blx	r4
}
 800b5fe:	bf00      	nop
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	bd90      	pop	{r4, r7, pc}
 800b606:	bf00      	nop
 800b608:	20000218 	.word	0x20000218

0800b60c <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b60c:	b590      	push	{r4, r7, lr}
 800b60e:	b087      	sub	sp, #28
 800b610:	af02      	add	r7, sp, #8
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	460b      	mov	r3, r1
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b622:	681c      	ldr	r4, [r3, #0]
 800b624:	7afa      	ldrb	r2, [r7, #11]
 800b626:	2300      	movs	r3, #0
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	4613      	mov	r3, r2
 800b630:	2207      	movs	r2, #7
 800b632:	4903      	ldr	r1, [pc, #12]	@ (800b640 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	47a0      	blx	r4
}
 800b638:	bf00      	nop
 800b63a:	3714      	adds	r7, #20
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd90      	pop	{r4, r7, pc}
 800b640:	20000218 	.word	0x20000218

0800b644 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b644:	b590      	push	{r4, r7, lr}
 800b646:	b087      	sub	sp, #28
 800b648:	af02      	add	r7, sp, #8
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	607b      	str	r3, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	72fb      	strb	r3, [r7, #11]
 800b652:	4613      	mov	r3, r2
 800b654:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b65e:	681c      	ldr	r4, [r3, #0]
 800b660:	7af9      	ldrb	r1, [r7, #11]
 800b662:	7abb      	ldrb	r3, [r7, #10]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	9201      	str	r2, [sp, #4]
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	460b      	mov	r3, r1
 800b66c:	2208      	movs	r2, #8
 800b66e:	4903      	ldr	r1, [pc, #12]	@ (800b67c <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	47a0      	blx	r4
}
 800b674:	bf00      	nop
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd90      	pop	{r4, r7, pc}
 800b67c:	20000218 	.word	0x20000218

0800b680 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b680:	b590      	push	{r4, r7, lr}
 800b682:	b085      	sub	sp, #20
 800b684:	af02      	add	r7, sp, #8
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	70fb      	strb	r3, [r7, #3]
 800b68c:	4613      	mov	r3, r2
 800b68e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b698:	681c      	ldr	r4, [r3, #0]
 800b69a:	78fa      	ldrb	r2, [r7, #3]
 800b69c:	78bb      	ldrb	r3, [r7, #2]
 800b69e:	2100      	movs	r1, #0
 800b6a0:	9101      	str	r1, [sp, #4]
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	2209      	movs	r2, #9
 800b6a8:	4903      	ldr	r1, [pc, #12]	@ (800b6b8 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	47a0      	blx	r4
}
 800b6ae:	bf00      	nop
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd90      	pop	{r4, r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20000218 	.word	0x20000218

0800b6bc <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b6bc:	b590      	push	{r4, r7, lr}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af02      	add	r7, sp, #8
 800b6c2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6cc:	681c      	ldr	r4, [r3, #0]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	220a      	movs	r2, #10
 800b6da:	4903      	ldr	r1, [pc, #12]	@ (800b6e8 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	47a0      	blx	r4
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd90      	pop	{r4, r7, pc}
 800b6e8:	20000218 	.word	0x20000218

0800b6ec <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b6ec:	b590      	push	{r4, r7, lr}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af02      	add	r7, sp, #8
 800b6f2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6fc:	681c      	ldr	r4, [r3, #0]
 800b6fe:	2300      	movs	r3, #0
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	2300      	movs	r3, #0
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	2300      	movs	r3, #0
 800b708:	220b      	movs	r2, #11
 800b70a:	4903      	ldr	r1, [pc, #12]	@ (800b718 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	47a0      	blx	r4
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	bd90      	pop	{r4, r7, pc}
 800b718:	20000218 	.word	0x20000218

0800b71c <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b71c:	b590      	push	{r4, r7, lr}
 800b71e:	b085      	sub	sp, #20
 800b720:	af02      	add	r7, sp, #8
 800b722:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b72c:	681c      	ldr	r4, [r3, #0]
 800b72e:	2300      	movs	r3, #0
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	2300      	movs	r3, #0
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	2300      	movs	r3, #0
 800b738:	220c      	movs	r2, #12
 800b73a:	4903      	ldr	r1, [pc, #12]	@ (800b748 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	47a0      	blx	r4
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	bd90      	pop	{r4, r7, pc}
 800b748:	20000218 	.word	0x20000218

0800b74c <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b74c:	b590      	push	{r4, r7, lr}
 800b74e:	b085      	sub	sp, #20
 800b750:	af02      	add	r7, sp, #8
 800b752:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b75c:	681c      	ldr	r4, [r3, #0]
 800b75e:	2300      	movs	r3, #0
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	2300      	movs	r3, #0
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	2300      	movs	r3, #0
 800b768:	220d      	movs	r2, #13
 800b76a:	4903      	ldr	r1, [pc, #12]	@ (800b778 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	47a0      	blx	r4
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	bd90      	pop	{r4, r7, pc}
 800b778:	20000218 	.word	0x20000218

0800b77c <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b77c:	b590      	push	{r4, r7, lr}
 800b77e:	b085      	sub	sp, #20
 800b780:	af02      	add	r7, sp, #8
 800b782:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b78c:	681c      	ldr	r4, [r3, #0]
 800b78e:	2300      	movs	r3, #0
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	2300      	movs	r3, #0
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	2300      	movs	r3, #0
 800b798:	220e      	movs	r2, #14
 800b79a:	4903      	ldr	r1, [pc, #12]	@ (800b7a8 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	47a0      	blx	r4
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd90      	pop	{r4, r7, pc}
 800b7a8:	20000218 	.word	0x20000218

0800b7ac <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b7ac:	b590      	push	{r4, r7, lr}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7bc:	681c      	ldr	r4, [r3, #0]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	220f      	movs	r2, #15
 800b7ca:	4903      	ldr	r1, [pc, #12]	@ (800b7d8 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	47a0      	blx	r4
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd90      	pop	{r4, r7, pc}
 800b7d8:	20000218 	.word	0x20000218

0800b7dc <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b7dc:	b590      	push	{r4, r7, lr}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af02      	add	r7, sp, #8
 800b7e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7ec:	681c      	ldr	r4, [r3, #0]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	9301      	str	r3, [sp, #4]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2210      	movs	r2, #16
 800b7fa:	4903      	ldr	r1, [pc, #12]	@ (800b808 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	47a0      	blx	r4
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	bd90      	pop	{r4, r7, pc}
 800b808:	20000218 	.word	0x20000218

0800b80c <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b085      	sub	sp, #20
 800b810:	af02      	add	r7, sp, #8
 800b812:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b81c:	681c      	ldr	r4, [r3, #0]
 800b81e:	2300      	movs	r3, #0
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	2300      	movs	r3, #0
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	2300      	movs	r3, #0
 800b828:	2211      	movs	r2, #17
 800b82a:	4903      	ldr	r1, [pc, #12]	@ (800b838 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	47a0      	blx	r4
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	bd90      	pop	{r4, r7, pc}
 800b838:	20000218 	.word	0x20000218

0800b83c <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b83c:	b590      	push	{r4, r7, lr}
 800b83e:	b085      	sub	sp, #20
 800b840:	af02      	add	r7, sp, #8
 800b842:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b84c:	681c      	ldr	r4, [r3, #0]
 800b84e:	2300      	movs	r3, #0
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	2300      	movs	r3, #0
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	2300      	movs	r3, #0
 800b858:	2212      	movs	r2, #18
 800b85a:	4903      	ldr	r1, [pc, #12]	@ (800b868 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	47a0      	blx	r4
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	bd90      	pop	{r4, r7, pc}
 800b868:	20000218 	.word	0x20000218

0800b86c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a09      	ldr	r2, [pc, #36]	@ (800b8a4 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b880:	4909      	ldr	r1, [pc, #36]	@ (800b8a8 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a06      	ldr	r2, [pc, #24]	@ (800b8ac <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b892:	4904      	ldr	r1, [pc, #16]	@ (800b8a4 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b898:	4b04      	ldr	r3, [pc, #16]	@ (800b8ac <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000238 	.word	0x20000238
 800b8a8:	20000218 	.word	0x20000218
 800b8ac:	20000240 	.word	0x20000240

0800b8b0 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b8b0:	b590      	push	{r4, r7, lr}
 800b8b2:	b089      	sub	sp, #36	@ 0x24
 800b8b4:	af02      	add	r7, sp, #8
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b8bc:	4b17      	ldr	r3, [pc, #92]	@ (800b91c <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75fb      	strb	r3, [r7, #23]
 800b8c6:	e020      	b.n	800b90a <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b8d0:	681c      	ldr	r4, [r3, #0]
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	1899      	adds	r1, r3, r2
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	005b      	lsls	r3, r3, #1
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	230a      	movs	r3, #10
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	75bb      	strb	r3, [r7, #22]
 800b8f4:	e003      	b.n	800b8fe <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b8f6:	bf00      	nop
 800b8f8:	7dbb      	ldrb	r3, [r7, #22]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	75bb      	strb	r3, [r7, #22]
 800b8fe:	7dbb      	ldrb	r3, [r7, #22]
 800b900:	2b7c      	cmp	r3, #124	@ 0x7c
 800b902:	d9f8      	bls.n	800b8f6 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b904:	7dfb      	ldrb	r3, [r7, #23]
 800b906:	3301      	adds	r3, #1
 800b908:	75fb      	strb	r3, [r7, #23]
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	d9db      	bls.n	800b8c8 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b910:	bf00      	nop
}
 800b912:	bf00      	nop
 800b914:	371c      	adds	r7, #28
 800b916:	46bd      	mov	sp, r7
 800b918:	bd90      	pop	{r4, r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20000215 	.word	0x20000215

0800b920 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b920:	b480      	push	{r7}
 800b922:	b087      	sub	sp, #28
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	4613      	mov	r3, r2
 800b92c:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b92e:	2300      	movs	r3, #0
 800b930:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b932:	2301      	movs	r3, #1
 800b934:	74fb      	strb	r3, [r7, #19]
 800b936:	e016      	b.n	800b966 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b938:	7cfb      	ldrb	r3, [r7, #19]
 800b93a:	005b      	lsls	r3, r3, #1
 800b93c:	461a      	mov	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	7f1b      	ldrb	r3, [r3, #28]
 800b942:	4413      	add	r3, r2
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	4413      	add	r3, r2
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	4619      	mov	r1, r3
 800b94c:	79fa      	ldrb	r2, [r7, #7]
 800b94e:	7cfb      	ldrb	r3, [r7, #19]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	fa01 f303 	lsl.w	r3, r1, r3
 800b958:	461a      	mov	r2, r3
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b960:	7cfb      	ldrb	r3, [r7, #19]
 800b962:	3301      	adds	r3, #1
 800b964:	74fb      	strb	r3, [r7, #19]
 800b966:	7cfb      	ldrb	r3, [r7, #19]
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d9e5      	bls.n	800b938 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b96c:	697b      	ldr	r3, [r7, #20]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	371c      	adds	r7, #28
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2118      	movs	r1, #24
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	4798      	blx	r3
 800b99c:	4602      	mov	r2, r0
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9a2:	b292      	uxth	r2, r2
 800b9a4:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b9a6:	78fb      	ldrb	r3, [r7, #3]
 800b9a8:	2b0e      	cmp	r3, #14
 800b9aa:	f200 8099 	bhi.w	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b4 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b4:	0800b9f1 	.word	0x0800b9f1
 800b9b8:	0800ba01 	.word	0x0800ba01
 800b9bc:	0800ba11 	.word	0x0800ba11
 800b9c0:	0800ba21 	.word	0x0800ba21
 800b9c4:	0800ba31 	.word	0x0800ba31
 800b9c8:	0800ba41 	.word	0x0800ba41
 800b9cc:	0800ba51 	.word	0x0800ba51
 800b9d0:	0800ba61 	.word	0x0800ba61
 800b9d4:	0800ba71 	.word	0x0800ba71
 800b9d8:	0800ba81 	.word	0x0800ba81
 800b9dc:	0800ba91 	.word	0x0800ba91
 800b9e0:	0800baa1 	.word	0x0800baa1
 800b9e4:	0800bab1 	.word	0x0800bab1
 800b9e8:	0800bac1 	.word	0x0800bac1
 800b9ec:	0800bad1 	.word	0x0800bad1
      state = pL6470_StatusRegister->HiZ;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b9fe:	e06f      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba0e:	e067      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1e:	e05f      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba2e:	e057      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3e:	e04f      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba4e:	e047      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba5e:	e03f      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba6e:	e037      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba74:	785b      	ldrb	r3, [r3, #1]
 800ba76:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba7e:	e02f      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba84:	785b      	ldrb	r3, [r3, #1]
 800ba86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba8e:	e027      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba94:	785b      	ldrb	r3, [r3, #1]
 800ba96:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba9e:	e01f      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baa4:	785b      	ldrb	r3, [r3, #1]
 800baa6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	73fb      	strb	r3, [r7, #15]
      break;
 800baae:	e017      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bab4:	785b      	ldrb	r3, [r3, #1]
 800bab6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800baba:	b2db      	uxtb	r3, r3
 800babc:	73fb      	strb	r3, [r7, #15]
      break;
 800babe:	e00f      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac4:	785b      	ldrb	r3, [r3, #1]
 800bac6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	73fb      	strb	r3, [r7, #15]
      break;
 800bace:	e007      	b.n	800bae0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bad4:	785b      	ldrb	r3, [r3, #1]
 800bad6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bada:	b2db      	uxtb	r3, r3
 800badc:	73fb      	strb	r3, [r7, #15]
      break;
 800bade:	bf00      	nop
  return state;
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop

0800baec <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800baf8:	78fb      	ldrb	r3, [r7, #3]
 800bafa:	2b18      	cmp	r3, #24
 800bafc:	d809      	bhi.n	800bb12 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a19      	ldr	r1, [r3, #32]
 800bb02:	78fa      	ldrb	r2, [r7, #3]
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	3301      	adds	r3, #1
 800bb10:	e000      	b.n	800bb14 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	73fb      	strb	r3, [r7, #15]
 800bb2e:	e01a      	b.n	800bb66 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	011b      	lsls	r3, r3, #4
 800bb34:	683a      	ldr	r2, [r7, #0]
 800bb36:	4413      	add	r3, r2
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
 800bb3e:	011b      	lsls	r3, r3, #4
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	4413      	add	r3, r2
 800bb44:	2200      	movs	r2, #0
 800bb46:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	4413      	add	r3, r2
 800bb50:	2200      	movs	r2, #0
 800bb52:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	3301      	adds	r3, #1
 800bb64:	73fb      	strb	r3, [r7, #15]
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d9e1      	bls.n	800bb30 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800bb6c:	bf00      	nop
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bb7a:	b480      	push	{r7}
 800bb7c:	b085      	sub	sp, #20
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	60f8      	str	r0, [r7, #12]
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	603b      	str	r3, [r7, #0]
 800bb86:	4613      	mov	r3, r2
 800bb88:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	7f1b      	ldrb	r3, [r3, #28]
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	4413      	add	r3, r2
 800bb94:	79fa      	ldrb	r2, [r7, #7]
 800bb96:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	7f1b      	ldrb	r3, [r3, #28]
 800bb9c:	011b      	lsls	r3, r3, #4
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	4413      	add	r3, r2
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	7f1b      	ldrb	r3, [r3, #28]
 800bbaa:	011b      	lsls	r3, r3, #4
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	4413      	add	r3, r2
 800bbb0:	69ba      	ldr	r2, [r7, #24]
 800bbb2:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	7f1b      	ldrb	r3, [r3, #28]
 800bbb8:	011b      	lsls	r3, r3, #4
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	69fa      	ldr	r2, [r7, #28]
 800bbc0:	60da      	str	r2, [r3, #12]
}
 800bbc2:	bf00      	nop
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
	...

0800bbd0 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bbd0:	b590      	push	{r4, r7, lr}
 800bbd2:	b087      	sub	sp, #28
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800bbe0:	4b10      	ldr	r3, [pc, #64]	@ (800bc24 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800bbe8:	4b0e      	ldr	r3, [pc, #56]	@ (800bc24 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bbea:	2201      	movs	r2, #1
 800bbec:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68b9      	ldr	r1, [r7, #8]
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800bc06:	681c      	ldr	r4, [r3, #0]
 800bc08:	79fa      	ldrb	r2, [r7, #7]
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	68b9      	ldr	r1, [r7, #8]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	47a0      	blx	r4
}
 800bc1a:	bf00      	nop
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd90      	pop	{r4, r7, pc}
 800bc22:	bf00      	nop
 800bc24:	20000215 	.word	0x20000215

0800bc28 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800bc28:	b480      	push	{r7}
 800bc2a:	b087      	sub	sp, #28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bc38:	2300      	movs	r3, #0
 800bc3a:	75bb      	strb	r3, [r7, #22]
 800bc3c:	e013      	b.n	800bc66 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc3e:	2300      	movs	r3, #0
 800bc40:	75fb      	strb	r3, [r7, #23]
 800bc42:	e00a      	b.n	800bc5a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800bc44:	7d7b      	ldrb	r3, [r7, #21]
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	757a      	strb	r2, [r7, #21]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4413      	add	r3, r2
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc54:	7dfb      	ldrb	r3, [r7, #23]
 800bc56:	3301      	adds	r3, #1
 800bc58:	75fb      	strb	r3, [r7, #23]
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d9f1      	bls.n	800bc44 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bc60:	7dbb      	ldrb	r3, [r7, #22]
 800bc62:	3301      	adds	r3, #1
 800bc64:	75bb      	strb	r3, [r7, #22]
 800bc66:	7dbb      	ldrb	r3, [r7, #22]
 800bc68:	2b03      	cmp	r3, #3
 800bc6a:	d9e8      	bls.n	800bc3e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75fb      	strb	r3, [r7, #23]
 800bc70:	e1f1      	b.n	800c056 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	011b      	lsls	r3, r3, #4
 800bc7a:	68b9      	ldr	r1, [r7, #8]
 800bc7c:	440b      	add	r3, r1
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	4619      	mov	r1, r3
 800bc82:	460b      	mov	r3, r1
 800bc84:	00db      	lsls	r3, r3, #3
 800bc86:	1a5b      	subs	r3, r3, r1
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	441a      	add	r2, r3
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	440b      	add	r3, r1
 800bc92:	7b12      	ldrb	r2, [r2, #12]
 800bc94:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b12      	cmp	r3, #18
 800bca2:	f200 81d5 	bhi.w	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800bca6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcac <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcac:	0800c051 	.word	0x0800c051
 800bcb0:	0800bcf9 	.word	0x0800bcf9
 800bcb4:	0800bd81 	.word	0x0800bd81
 800bcb8:	0800bdb1 	.word	0x0800bdb1
 800bcbc:	0800be19 	.word	0x0800be19
 800bcc0:	0800be47 	.word	0x0800be47
 800bcc4:	0800beaf 	.word	0x0800beaf
 800bcc8:	0800beeb 	.word	0x0800beeb
 800bccc:	0800bf53 	.word	0x0800bf53
 800bcd0:	0800bfef 	.word	0x0800bfef
 800bcd4:	0800c051 	.word	0x0800c051
 800bcd8:	0800c051 	.word	0x0800c051
 800bcdc:	0800c051 	.word	0x0800c051
 800bce0:	0800c051 	.word	0x0800c051
 800bce4:	0800c051 	.word	0x0800c051
 800bce8:	0800c051 	.word	0x0800c051
 800bcec:	0800c051 	.word	0x0800c051
 800bcf0:	0800c051 	.word	0x0800c051
 800bcf4:	0800c051 	.word	0x0800c051
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	7819      	ldrb	r1, [r3, #0]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6a18      	ldr	r0, [r3, #32]
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	011b      	lsls	r3, r3, #4
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4403      	add	r3, r0
 800bd18:	781a      	ldrb	r2, [r3, #0]
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	4403      	add	r3, r0
 800bd20:	430a      	orrs	r2, r1
 800bd22:	b2d2      	uxtb	r2, r2
 800bd24:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6a19      	ldr	r1, [r3, #32]
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
 800bd2c:	011b      	lsls	r3, r3, #4
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	4413      	add	r3, r2
 800bd32:	685a      	ldr	r2, [r3, #4]
 800bd34:	4613      	mov	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	440b      	add	r3, r1
 800bd3e:	7b9b      	ldrb	r3, [r3, #14]
 800bd40:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bd42:	2301      	movs	r3, #1
 800bd44:	75bb      	strb	r3, [r7, #22]
 800bd46:	e016      	b.n	800bd76 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bd48:	7dfb      	ldrb	r3, [r7, #23]
 800bd4a:	011b      	lsls	r3, r3, #4
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	4413      	add	r3, r2
 800bd50:	689a      	ldr	r2, [r3, #8]
 800bd52:	7d39      	ldrb	r1, [r7, #20]
 800bd54:	7dbb      	ldrb	r3, [r7, #22]
 800bd56:	1acb      	subs	r3, r1, r3
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	fa22 f103 	lsr.w	r1, r2, r3
 800bd5e:	7dbb      	ldrb	r3, [r7, #22]
 800bd60:	005a      	lsls	r2, r3, #1
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
 800bd64:	4413      	add	r3, r2
 800bd66:	461a      	mov	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	b2ca      	uxtb	r2, r1
 800bd6e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bd70:	7dbb      	ldrb	r3, [r7, #22]
 800bd72:	3301      	adds	r3, #1
 800bd74:	75bb      	strb	r3, [r7, #22]
 800bd76:	7d3a      	ldrb	r2, [r7, #20]
 800bd78:	7dbb      	ldrb	r3, [r7, #22]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d2e4      	bcs.n	800bd48 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800bd7e:	e167      	b.n	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	4413      	add	r3, r2
 800bd86:	7819      	ldrb	r1, [r3, #0]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6a18      	ldr	r0, [r3, #32]
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	4413      	add	r3, r2
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4403      	add	r3, r0
 800bda0:	781a      	ldrb	r2, [r3, #0]
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4403      	add	r3, r0
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]
      break;
 800bdae:	e14f      	b.n	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	7819      	ldrb	r1, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bdbc:	7dfb      	ldrb	r3, [r7, #23]
 800bdbe:	011b      	lsls	r3, r3, #4
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	4413      	add	r3, r2
 800bdcc:	4403      	add	r3, r0
 800bdce:	7a1a      	ldrb	r2, [r3, #8]
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	4403      	add	r3, r0
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	b2d2      	uxtb	r2, r2
 800bdda:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bddc:	2301      	movs	r3, #1
 800bdde:	75bb      	strb	r3, [r7, #22]
 800bde0:	e016      	b.n	800be10 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bde2:	7dfb      	ldrb	r3, [r7, #23]
 800bde4:	011b      	lsls	r3, r3, #4
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	4413      	add	r3, r2
 800bdea:	689a      	ldr	r2, [r3, #8]
 800bdec:	7dbb      	ldrb	r3, [r7, #22]
 800bdee:	f1c3 0303 	rsb	r3, r3, #3
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	fa22 f103 	lsr.w	r1, r2, r3
 800bdf8:	7dbb      	ldrb	r3, [r7, #22]
 800bdfa:	005a      	lsls	r2, r3, #1
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	4413      	add	r3, r2
 800be00:	461a      	mov	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4413      	add	r3, r2
 800be06:	b2ca      	uxtb	r2, r1
 800be08:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be0a:	7dbb      	ldrb	r3, [r7, #22]
 800be0c:	3301      	adds	r3, #1
 800be0e:	75bb      	strb	r3, [r7, #22]
 800be10:	7dbb      	ldrb	r3, [r7, #22]
 800be12:	2b03      	cmp	r3, #3
 800be14:	d9e5      	bls.n	800bde2 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800be16:	e11b      	b.n	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be18:	7dfb      	ldrb	r3, [r7, #23]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	4413      	add	r3, r2
 800be1e:	7819      	ldrb	r1, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800be24:	7dfb      	ldrb	r3, [r7, #23]
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	4413      	add	r3, r2
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	4613      	mov	r3, r2
 800be30:	00db      	lsls	r3, r3, #3
 800be32:	4413      	add	r3, r2
 800be34:	4403      	add	r3, r0
 800be36:	7a1a      	ldrb	r2, [r3, #8]
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	4403      	add	r3, r0
 800be3e:	430a      	orrs	r2, r1
 800be40:	b2d2      	uxtb	r2, r2
 800be42:	701a      	strb	r2, [r3, #0]
      break;
 800be44:	e104      	b.n	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	4413      	add	r3, r2
 800be4c:	7819      	ldrb	r1, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	4413      	add	r3, r2
 800be5a:	685a      	ldr	r2, [r3, #4]
 800be5c:	4613      	mov	r3, r2
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	4413      	add	r3, r2
 800be62:	4403      	add	r3, r0
 800be64:	7a1a      	ldrb	r2, [r3, #8]
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	4403      	add	r3, r0
 800be6c:	430a      	orrs	r2, r1
 800be6e:	b2d2      	uxtb	r2, r2
 800be70:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be72:	2301      	movs	r3, #1
 800be74:	75bb      	strb	r3, [r7, #22]
 800be76:	e016      	b.n	800bea6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	4413      	add	r3, r2
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	7dbb      	ldrb	r3, [r7, #22]
 800be84:	f1c3 0303 	rsb	r3, r3, #3
 800be88:	00db      	lsls	r3, r3, #3
 800be8a:	fa22 f103 	lsr.w	r1, r2, r3
 800be8e:	7dbb      	ldrb	r3, [r7, #22]
 800be90:	005a      	lsls	r2, r3, #1
 800be92:	7dfb      	ldrb	r3, [r7, #23]
 800be94:	4413      	add	r3, r2
 800be96:	461a      	mov	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4413      	add	r3, r2
 800be9c:	b2ca      	uxtb	r2, r1
 800be9e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bea0:	7dbb      	ldrb	r3, [r7, #22]
 800bea2:	3301      	adds	r3, #1
 800bea4:	75bb      	strb	r3, [r7, #22]
 800bea6:	7dbb      	ldrb	r3, [r7, #22]
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d9e5      	bls.n	800be78 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800beac:	e0d0      	b.n	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800beae:	2301      	movs	r3, #1
 800beb0:	75bb      	strb	r3, [r7, #22]
 800beb2:	e016      	b.n	800bee2 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800beb4:	7dfb      	ldrb	r3, [r7, #23]
 800beb6:	011b      	lsls	r3, r3, #4
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	4413      	add	r3, r2
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	7dbb      	ldrb	r3, [r7, #22]
 800bec0:	f1c3 0303 	rsb	r3, r3, #3
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	fa22 f103 	lsr.w	r1, r2, r3
 800beca:	7dbb      	ldrb	r3, [r7, #22]
 800becc:	005a      	lsls	r2, r3, #1
 800bece:	7dfb      	ldrb	r3, [r7, #23]
 800bed0:	4413      	add	r3, r2
 800bed2:	461a      	mov	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4413      	add	r3, r2
 800bed8:	b2ca      	uxtb	r2, r1
 800beda:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bedc:	7dbb      	ldrb	r3, [r7, #22]
 800bede:	3301      	adds	r3, #1
 800bee0:	75bb      	strb	r3, [r7, #22]
 800bee2:	7dbb      	ldrb	r3, [r7, #22]
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d9e5      	bls.n	800beb4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800bee8:	e0b2      	b.n	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	4413      	add	r3, r2
 800bef0:	7819      	ldrb	r1, [r3, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	011b      	lsls	r3, r3, #4
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	4413      	add	r3, r2
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	4613      	mov	r3, r2
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	4413      	add	r3, r2
 800bf06:	4403      	add	r3, r0
 800bf08:	7a1a      	ldrb	r2, [r3, #8]
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	4403      	add	r3, r0
 800bf10:	430a      	orrs	r2, r1
 800bf12:	b2d2      	uxtb	r2, r2
 800bf14:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf16:	2301      	movs	r3, #1
 800bf18:	75bb      	strb	r3, [r7, #22]
 800bf1a:	e016      	b.n	800bf4a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	011b      	lsls	r3, r3, #4
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	4413      	add	r3, r2
 800bf24:	689a      	ldr	r2, [r3, #8]
 800bf26:	7dbb      	ldrb	r3, [r7, #22]
 800bf28:	f1c3 0303 	rsb	r3, r3, #3
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	fa22 f103 	lsr.w	r1, r2, r3
 800bf32:	7dbb      	ldrb	r3, [r7, #22]
 800bf34:	005a      	lsls	r2, r3, #1
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	4413      	add	r3, r2
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4413      	add	r3, r2
 800bf40:	b2ca      	uxtb	r2, r1
 800bf42:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf44:	7dbb      	ldrb	r3, [r7, #22]
 800bf46:	3301      	adds	r3, #1
 800bf48:	75bb      	strb	r3, [r7, #22]
 800bf4a:	7dbb      	ldrb	r3, [r7, #22]
 800bf4c:	2b03      	cmp	r3, #3
 800bf4e:	d9e5      	bls.n	800bf1c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800bf50:	e07e      	b.n	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	4413      	add	r3, r2
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	b259      	sxtb	r1, r3
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
 800bf62:	011b      	lsls	r3, r3, #4
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	4413      	add	r3, r2
 800bf68:	685a      	ldr	r2, [r3, #4]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	4403      	add	r3, r0
 800bf72:	791b      	ldrb	r3, [r3, #4]
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	b25b      	sxtb	r3, r3
 800bf78:	430b      	orrs	r3, r1
 800bf7a:	b259      	sxtb	r1, r3
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	4413      	add	r3, r2
 800bf82:	b2ca      	uxtb	r2, r1
 800bf84:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	7819      	ldrb	r1, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	011b      	lsls	r3, r3, #4
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	4413      	add	r3, r2
 800bf9a:	689a      	ldr	r2, [r3, #8]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	4413      	add	r3, r2
 800bfa2:	4403      	add	r3, r0
 800bfa4:	7a1a      	ldrb	r2, [r3, #8]
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	4403      	add	r3, r0
 800bfac:	430a      	orrs	r2, r1
 800bfae:	b2d2      	uxtb	r2, r2
 800bfb0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	75bb      	strb	r3, [r7, #22]
 800bfb6:	e016      	b.n	800bfe6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	7dbb      	ldrb	r3, [r7, #22]
 800bfc4:	f1c3 0303 	rsb	r3, r3, #3
 800bfc8:	00db      	lsls	r3, r3, #3
 800bfca:	fa22 f103 	lsr.w	r1, r2, r3
 800bfce:	7dbb      	ldrb	r3, [r7, #22]
 800bfd0:	005a      	lsls	r2, r3, #1
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4413      	add	r3, r2
 800bfdc:	b2ca      	uxtb	r2, r1
 800bfde:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bfe0:	7dbb      	ldrb	r3, [r7, #22]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	75bb      	strb	r3, [r7, #22]
 800bfe6:	7dbb      	ldrb	r3, [r7, #22]
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d9e5      	bls.n	800bfb8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800bfec:	e030      	b.n	800c050 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bfee:	7dfb      	ldrb	r3, [r7, #23]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	4413      	add	r3, r2
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	b259      	sxtb	r1, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bffc:	7dfb      	ldrb	r3, [r7, #23]
 800bffe:	011b      	lsls	r3, r3, #4
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	4413      	add	r3, r2
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	4613      	mov	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	4403      	add	r3, r0
 800c00e:	791b      	ldrb	r3, [r3, #4]
 800c010:	00db      	lsls	r3, r3, #3
 800c012:	b25b      	sxtb	r3, r3
 800c014:	430b      	orrs	r3, r1
 800c016:	b259      	sxtb	r1, r3
 800c018:	7dfb      	ldrb	r3, [r7, #23]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	4413      	add	r3, r2
 800c01e:	b2ca      	uxtb	r2, r1
 800c020:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	4413      	add	r3, r2
 800c028:	7819      	ldrb	r1, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	011b      	lsls	r3, r3, #4
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	4413      	add	r3, r2
 800c036:	689a      	ldr	r2, [r3, #8]
 800c038:	4613      	mov	r3, r2
 800c03a:	00db      	lsls	r3, r3, #3
 800c03c:	4413      	add	r3, r2
 800c03e:	4403      	add	r3, r0
 800c040:	7a1a      	ldrb	r2, [r3, #8]
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	4403      	add	r3, r0
 800c048:	430a      	orrs	r2, r1
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	701a      	strb	r2, [r3, #0]
      break;
 800c04e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c050:	7dfb      	ldrb	r3, [r7, #23]
 800c052:	3301      	adds	r3, #1
 800c054:	75fb      	strb	r3, [r7, #23]
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	f67f ae0a 	bls.w	800bc72 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800c05e:	bf00      	nop
 800c060:	bf00      	nop
 800c062:	371c      	adds	r7, #28
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800c078:	edd7 7a00 	vldr	s15, [r7]
 800c07c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c084:	db1e      	blt.n	800c0c4 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800c086:	edd7 7a00 	vldr	s15, [r7]
 800c08a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c08e:	ee17 2a90 	vmov	r2, s15
 800c092:	edd7 7a00 	vldr	s15, [r7]
 800c096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c09a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c09e:	ed97 7a00 	vldr	s14, [r7]
 800c0a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c0aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b2:	bf4c      	ite	mi
 800c0b4:	2301      	movmi	r3, #1
 800c0b6:	2300      	movpl	r3, #0
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	f083 0301 	eor.w	r3, r3, #1
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	4413      	add	r3, r2
 800c0c2:	e01a      	b.n	800c0fa <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800c0c4:	edd7 7a00 	vldr	s15, [r7]
 800c0c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0cc:	ee17 2a90 	vmov	r2, s15
 800c0d0:	edd7 7a00 	vldr	s15, [r7]
 800c0d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0dc:	ed97 7a00 	vldr	s14, [r7]
 800c0e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0e4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c0e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f0:	d501      	bpl.n	800c0f6 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e000      	b.n	800c0f8 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	1ad3      	subs	r3, r2, r3
    }
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800c106:	b580      	push	{r7, lr}
 800c108:	b086      	sub	sp, #24
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	60f8      	str	r0, [r7, #12]
 800c10e:	60b9      	str	r1, [r7, #8]
 800c110:	4613      	mov	r3, r2
 800c112:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6918      	ldr	r0, [r3, #16]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	8a9b      	ldrh	r3, [r3, #20]
 800c11c:	2200      	movs	r2, #0
 800c11e:	4619      	mov	r1, r3
 800c120:	f002 fccc 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6998      	ldr	r0, [r3, #24]
 800c128:	88fa      	ldrh	r2, [r7, #6]
 800c12a:	2364      	movs	r3, #100	@ 0x64
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	f003 fcf4 	bl	800fb1a <HAL_SPI_Receive>
 800c132:	4603      	mov	r3, r0
 800c134:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6918      	ldr	r0, [r3, #16]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	8a9b      	ldrh	r3, [r3, #20]
 800c13e:	2201      	movs	r2, #1
 800c140:	4619      	mov	r1, r3
 800c142:	f002 fcbb 	bl	800eabc <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c146:	7dfb      	ldrb	r3, [r7, #23]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d001      	beq.n	800c150 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e000      	b.n	800c152 <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c150:	2300      	movs	r3, #0
    }
 800c152:	4618      	mov	r0, r3
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b086      	sub	sp, #24
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	4613      	mov	r3, r2
 800c166:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6918      	ldr	r0, [r3, #16]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	8a9b      	ldrh	r3, [r3, #20]
 800c170:	2200      	movs	r2, #0
 800c172:	4619      	mov	r1, r3
 800c174:	f002 fca2 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6998      	ldr	r0, [r3, #24]
 800c17c:	88fa      	ldrh	r2, [r7, #6]
 800c17e:	2364      	movs	r3, #100	@ 0x64
 800c180:	68b9      	ldr	r1, [r7, #8]
 800c182:	f003 fb8e 	bl	800f8a2 <HAL_SPI_Transmit>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6918      	ldr	r0, [r3, #16]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	8a9b      	ldrh	r3, [r3, #20]
 800c192:	2201      	movs	r2, #1
 800c194:	4619      	mov	r1, r3
 800c196:	f002 fc91 	bl	800eabc <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e000      	b.n	800c1a6 <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c1a4:	2300      	movs	r3, #0
    }
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b088      	sub	sp, #32
 800c1b2:	af02      	add	r7, sp, #8
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	607a      	str	r2, [r7, #4]
 800c1ba:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6918      	ldr	r0, [r3, #16]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	8a9b      	ldrh	r3, [r3, #20]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	f002 fc78 	bl	800eabc <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6998      	ldr	r0, [r3, #24]
 800c1d0:	887b      	ldrh	r3, [r7, #2]
 800c1d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c1d6:	9200      	str	r2, [sp, #0]
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	6879      	ldr	r1, [r7, #4]
 800c1dc:	f003 fdae 	bl	800fd3c <HAL_SPI_TransmitReceive>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d009      	beq.n	800c1fe <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6918      	ldr	r0, [r3, #16]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	8a9b      	ldrh	r3, [r3, #20]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	f002 fc61 	bl	800eabc <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e008      	b.n	800c210 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6918      	ldr	r0, [r3, #16]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	8a9b      	ldrh	r3, [r3, #20]
 800c206:	2201      	movs	r2, #1
 800c208:	4619      	mov	r1, r3
 800c20a:	f002 fc57 	bl	800eabc <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c20e:	2300      	movs	r3, #0
    }
 800c210:	4618      	mov	r0, r3
 800c212:	3718      	adds	r7, #24
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c218:	b590      	push	{r4, r7, lr}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
 800c224:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c22e:	681c      	ldr	r4, [r3, #0]
 800c230:	887b      	ldrh	r3, [r7, #2]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	47a0      	blx	r4
    }
 800c23a:	bf00      	nop
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd90      	pop	{r4, r7, pc}

0800c242 <_ZN12Embase3Roues10appendWaitEm>:
 * @brief Append a wait task at the end of the queue
 * 
 * @param delay_ms 
 * @return int32_t : the index of the added task, or -1 in case of failure (queue full)
 */
int32_t Embase3Roues::appendWait(uint32_t delay_ms) {
 800c242:	b5b0      	push	{r4, r5, r7, lr}
 800c244:	b096      	sub	sp, #88	@ 0x58
 800c246:	af08      	add	r7, sp, #32
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	6039      	str	r1, [r7, #0]
	Task_t task;
	initTask(task);
 800c24c:	f107 0308 	add.w	r3, r7, #8
 800c250:	4618      	mov	r0, r3
 800c252:	f000 f930 	bl	800c4b6 <_Z8initTaskR6Task_t>

	task.type = WAIT;
 800c256:	2301      	movs	r3, #1
 800c258:	723b      	strb	r3, [r7, #8]

	task.delay_ms = delay_ms;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	62bb      	str	r3, [r7, #40]	@ 0x28

	int32_t res = appendInstruction(task);
 800c25e:	466d      	mov	r5, sp
 800c260:	f107 0410 	add.w	r4, r7, #16
 800c264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c268:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c26c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c270:	f107 0308 	add.w	r3, r7, #8
 800c274:	cb0c      	ldmia	r3, {r2, r3}
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f946 	bl	800c508 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800c27c:	6378      	str	r0, [r7, #52]	@ 0x34
	return res;
 800c27e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c280:	4618      	mov	r0, r3
 800c282:	3738      	adds	r7, #56	@ 0x38
 800c284:	46bd      	mov	sp, r7
 800c286:	bdb0      	pop	{r4, r5, r7, pc}

0800c288 <_ZN12Embase3Roues15appendSpeedMoveEddd>:
	int32_t res = appendInstruction(task);
	return res;
}

int32_t Embase3Roues::appendSpeedMove(double vx, double vy, double wz)
{
 800c288:	b5b0      	push	{r4, r5, r7, lr}
 800c28a:	b09c      	sub	sp, #112	@ 0x70
 800c28c:	af08      	add	r7, sp, #32
 800c28e:	61f8      	str	r0, [r7, #28]
 800c290:	ed87 0b04 	vstr	d0, [r7, #16]
 800c294:	ed87 1b02 	vstr	d1, [r7, #8]
 800c298:	ed87 2b00 	vstr	d2, [r7]
	Task_t task;
	initTask(task);
 800c29c:	f107 0320 	add.w	r3, r7, #32
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 f908 	bl	800c4b6 <_Z8initTaskR6Task_t>

	task.type = MOVE_SPEED;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	f887 3020 	strb.w	r3, [r7, #32]

	task.x = vx;
 800c2ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c2b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	task.y = vy;
 800c2b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	task.theta = wz;
 800c2bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	int32_t res = appendInstruction(task);
 800c2c4:	466d      	mov	r5, sp
 800c2c6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c2ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c2d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c2d6:	f107 0320 	add.w	r3, r7, #32
 800c2da:	cb0c      	ldmia	r3, {r2, r3}
 800c2dc:	69f8      	ldr	r0, [r7, #28]
 800c2de:	f000 f913 	bl	800c508 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800c2e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
	return res;
 800c2e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3750      	adds	r7, #80	@ 0x50
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bdb0      	pop	{r4, r5, r7, pc}

0800c2ee <_ZN12Embase3Roues10appendStopEv>:


int32_t Embase3Roues::appendStop(void)
{
 800c2ee:	b5b0      	push	{r4, r5, r7, lr}
 800c2f0:	b096      	sub	sp, #88	@ 0x58
 800c2f2:	af08      	add	r7, sp, #32
 800c2f4:	6078      	str	r0, [r7, #4]
	Task_t task;
	initTask(task);
 800c2f6:	f107 0308 	add.w	r3, r7, #8
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 f8db 	bl	800c4b6 <_Z8initTaskR6Task_t>

	task.type = STOP;
 800c300:	2304      	movs	r3, #4
 800c302:	723b      	strb	r3, [r7, #8]

	int32_t res = appendInstruction(task);
 800c304:	466d      	mov	r5, sp
 800c306:	f107 0410 	add.w	r4, r7, #16
 800c30a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c30c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c30e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c312:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c316:	f107 0308 	add.w	r3, r7, #8
 800c31a:	cb0c      	ldmia	r3, {r2, r3}
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f8f3 	bl	800c508 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800c322:	6378      	str	r0, [r7, #52]	@ 0x34
	return res;
 800c324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c326:	4618      	mov	r0, r3
 800c328:	3738      	adds	r7, #56	@ 0x38
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c330 <_ZN12Embase3Roues18executeInstructionEv>:
/**
 * @brief Execute an instruction from the queue
 * 
 * @return int32_t : the index of the executed instruction
 */
TaskType_t Embase3Roues::executeInstruction() {
 800c330:	b5b0      	push	{r4, r5, r7, lr}
 800c332:	b08e      	sub	sp, #56	@ 0x38
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
	Task_t current_task = _task_buffer[_current_index];
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c33e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c340:	6879      	ldr	r1, [r7, #4]
 800c342:	4613      	mov	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	00db      	lsls	r3, r3, #3
 800c34a:	440b      	add	r3, r1
 800c34c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c350:	f107 0408 	add.w	r4, r7, #8
 800c354:	461d      	mov	r5, r3
 800c356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c35a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c35c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c35e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c362:	e884 0003 	stmia.w	r4, {r0, r1}
	TaskType_t type = current_task.type;
 800c366:	7a3b      	ldrb	r3, [r7, #8]
 800c368:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	// "delete" current task
	initTask(_task_buffer[_current_index]);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c372:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	00db      	lsls	r3, r3, #3
 800c37c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	4413      	add	r3, r2
 800c384:	4618      	mov	r0, r3
 800c386:	f000 f896 	bl	800c4b6 <_Z8initTaskR6Task_t>

	// Only go forward in the buffer if the task was not NONE.
	if (type != NONE)
 800c38a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d008      	beq.n	800c3a4 <_ZN12Embase3Roues18executeInstructionEv+0x74>
	{
		_current_index++;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c39a:	3301      	adds	r3, #1
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800c3a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
	}

	switch (type) {
 800c3a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3a8:	2b05      	cmp	r3, #5
 800c3aa:	d84f      	bhi.n	800c44c <_ZN12Embase3Roues18executeInstructionEv+0x11c>
 800c3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b4 <_ZN12Embase3Roues18executeInstructionEv+0x84>)
 800c3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b2:	bf00      	nop
 800c3b4:	0800c44d 	.word	0x0800c44d
 800c3b8:	0800c42d 	.word	0x0800c42d
 800c3bc:	0800c3f9 	.word	0x0800c3f9
 800c3c0:	0800c3cd 	.word	0x0800c3cd
 800c3c4:	0800c425 	.word	0x0800c425
 800c3c8:	0800c439 	.word	0x0800c439
	case NONE:
		// Do nothing...
		break;

	case MOVE_SPEED:
		moveSpeed(current_task.x, current_task.y, current_task.theta);
 800c3cc:	ed97 7b04 	vldr	d7, [r7, #16]
 800c3d0:	ed97 6b06 	vldr	d6, [r7, #24]
 800c3d4:	ed97 5b08 	vldr	d5, [r7, #32]
 800c3d8:	eeb0 2a45 	vmov.f32	s4, s10
 800c3dc:	eef0 2a65 	vmov.f32	s5, s11
 800c3e0:	eeb0 1a46 	vmov.f32	s2, s12
 800c3e4:	eef0 1a66 	vmov.f32	s3, s13
 800c3e8:	eeb0 0a47 	vmov.f32	s0, s14
 800c3ec:	eef0 0a67 	vmov.f32	s1, s15
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fc75 	bl	800cce0 <_ZN12Embase3Roues9moveSpeedEddd>
		break;
 800c3f6:	e02a      	b.n	800c44e <_ZN12Embase3Roues18executeInstructionEv+0x11e>

	case MOVE_RELATIVE:
		moveRelative(current_task.x, current_task.y, current_task.theta);
 800c3f8:	ed97 7b04 	vldr	d7, [r7, #16]
 800c3fc:	ed97 6b06 	vldr	d6, [r7, #24]
 800c400:	ed97 5b08 	vldr	d5, [r7, #32]
 800c404:	eeb0 2a45 	vmov.f32	s4, s10
 800c408:	eef0 2a65 	vmov.f32	s5, s11
 800c40c:	eeb0 1a46 	vmov.f32	s2, s12
 800c410:	eef0 1a66 	vmov.f32	s3, s13
 800c414:	eeb0 0a47 	vmov.f32	s0, s14
 800c418:	eef0 0a67 	vmov.f32	s1, s15
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fc17 	bl	800cc50 <_ZN12Embase3Roues12moveRelativeEddd>
		break;
 800c422:	e014      	b.n	800c44e <_ZN12Embase3Roues18executeInstructionEv+0x11e>

	case STOP:
		stop();
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 fd1d 	bl	800ce64 <_ZN12Embase3Roues4stopEv>
		break;
 800c42a:	e010      	b.n	800c44e <_ZN12Embase3Roues18executeInstructionEv+0x11e>

	case WAIT:
		wait(current_task.delay_ms);
 800c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fc35 	bl	800cca0 <_ZN12Embase3Roues4waitEm>
		break;
 800c436:	e00a      	b.n	800c44e <_ZN12Embase3Roues18executeInstructionEv+0x11e>

	case UART_SEND:
		HAL_UART_Transmit(&huart2, (uint8_t *) &current_task.c, 1*sizeof(char), 100);
 800c438:	f107 0308 	add.w	r3, r7, #8
 800c43c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800c440:	2364      	movs	r3, #100	@ 0x64
 800c442:	2201      	movs	r2, #1
 800c444:	4805      	ldr	r0, [pc, #20]	@ (800c45c <_ZN12Embase3Roues18executeInstructionEv+0x12c>)
 800c446:	f005 f840 	bl	80114ca <HAL_UART_Transmit>
		break;
 800c44a:	e000      	b.n	800c44e <_ZN12Embase3Roues18executeInstructionEv+0x11e>

	default:
		break;
 800c44c:	bf00      	nop
	}

	return type;
 800c44e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c452:	4618      	mov	r0, r3
 800c454:	3738      	adds	r7, #56	@ 0x38
 800c456:	46bd      	mov	sp, r7
 800c458:	bdb0      	pop	{r4, r5, r7, pc}
 800c45a:	bf00      	nop
 800c45c:	200004cc 	.word	0x200004cc

0800c460 <_Z8copyTaskR6Task_tS0_>:
/*******************************
 * Private functions
 ******************************/

void copyTask(Task_t &dest, Task_t &src)
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
	dest.type = src.type;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	781a      	ldrb	r2, [r3, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	701a      	strb	r2, [r3, #0]
	dest.x = src.x;
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c478:	6879      	ldr	r1, [r7, #4]
 800c47a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dest.y = src.y;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c484:	6879      	ldr	r1, [r7, #4]
 800c486:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dest.theta = src.theta;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c490:	6879      	ldr	r1, [r7, #4]
 800c492:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dest.delay_ms = src.delay_ms;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	6a1a      	ldr	r2, [r3, #32]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	621a      	str	r2, [r3, #32]
	dest.c = src.c;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800c4aa:	bf00      	nop
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <_Z8initTaskR6Task_t>:

void initTask(Task_t &task)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b083      	sub	sp, #12
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
	task.type = TaskType_t::NONE;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	701a      	strb	r2, [r3, #0]
	task.x = 0;
 800c4c4:	6879      	ldr	r1, [r7, #4]
 800c4c6:	f04f 0200 	mov.w	r2, #0
 800c4ca:	f04f 0300 	mov.w	r3, #0
 800c4ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	task.y = 0;
 800c4d2:	6879      	ldr	r1, [r7, #4]
 800c4d4:	f04f 0200 	mov.w	r2, #0
 800c4d8:	f04f 0300 	mov.w	r3, #0
 800c4dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	task.theta = 0;
 800c4e0:	6879      	ldr	r1, [r7, #4]
 800c4e2:	f04f 0200 	mov.w	r2, #0
 800c4e6:	f04f 0300 	mov.w	r3, #0
 800c4ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
	task.delay_ms = 0;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	621a      	str	r2, [r3, #32]
	task.c = '\0';
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <_ZN12Embase3Roues17appendInstructionE6Task_t>:

int32_t Embase3Roues::appendInstruction(Task_t task) {
 800c508:	b082      	sub	sp, #8
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	f107 0110 	add.w	r1, r7, #16
 800c516:	e881 000c 	stmia.w	r1, {r2, r3}
	if (_task_buffer[_last_index].type != NONE) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c520:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c522:	6879      	ldr	r1, [r7, #4]
 800c524:	4613      	mov	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	440b      	add	r3, r1
 800c52e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <_ZN12Embase3Roues17appendInstructionE6Task_t+0x36>
		// The task queue is full - error
	 	return -1;
 800c538:	f04f 33ff 	mov.w	r3, #4294967295
 800c53c:	e030      	b.n	800c5a0 <_ZN12Embase3Roues17appendInstructionE6Task_t+0x98>
	}
	if(task.type == NONE)
 800c53e:	7c3b      	ldrb	r3, [r7, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d104      	bne.n	800c54e <_ZN12Embase3Roues17appendInstructionE6Task_t+0x46>
	{
		// Nothing happened
		return _last_index;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c54a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c54c:	e028      	b.n	800c5a0 <_ZN12Embase3Roues17appendInstructionE6Task_t+0x98>
	}

	copyTask(_task_buffer[_last_index], task);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c554:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c556:	4613      	mov	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	4413      	add	r3, r2
 800c566:	f107 0110 	add.w	r1, r7, #16
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff ff78 	bl	800c460 <_Z8copyTaskR6Task_tS0_>

	_last_index = (_last_index + 1) % MAX_TASK_COUNT;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c578:	1c5a      	adds	r2, r3, #1
 800c57a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5b0 <_ZN12Embase3Roues17appendInstructionE6Task_t+0xa8>)
 800c57c:	fb83 1302 	smull	r1, r3, r3, r2
 800c580:	1159      	asrs	r1, r3, #5
 800c582:	17d3      	asrs	r3, r2, #31
 800c584:	1acb      	subs	r3, r1, r3
 800c586:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800c58a:	fb01 f303 	mul.w	r3, r1, r3
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800c596:	6593      	str	r3, [r2, #88]	@ 0x58

	return _last_index;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c59e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5aa:	b002      	add	sp, #8
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	1b4e81b5 	.word	0x1b4e81b5
 800c5b4:	00000000 	.word	0x00000000

0800c5b8 <_ZN12Embase3Roues7setStepEddd>:


	return _current_index;
}

void Embase3Roues::setStep(double x, double y, double theta) {
 800c5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ba:	b09d      	sub	sp, #116	@ 0x74
 800c5bc:	af06      	add	r7, sp, #24
 800c5be:	61f8      	str	r0, [r7, #28]
 800c5c0:	ed87 0b04 	vstr	d0, [r7, #16]
 800c5c4:	ed87 1b02 	vstr	d1, [r7, #8]
 800c5c8:	ed87 2b00 	vstr	d2, [r7]
	//Conversion en m
	x *= 4; //Conversion pour que Set-position(1,0,0) donne une translation de 1m suivant X
 800c5cc:	f04f 0200 	mov.w	r2, #0
 800c5d0:	4bb5      	ldr	r3, [pc, #724]	@ (800c8a8 <_ZN12Embase3Roues7setStepEddd+0x2f0>)
 800c5d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c5d6:	f7f4 f83f 	bl	8000658 <__aeabi_dmul>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	460b      	mov	r3, r1
 800c5de:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y *= 4; //Conversion pour que Set-position(0,1,0) donne une translation de 1m suivant Y
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	4bb0      	ldr	r3, [pc, #704]	@ (800c8a8 <_ZN12Embase3Roues7setStepEddd+0x2f0>)
 800c5e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5ec:	f7f4 f834 	bl	8000658 <__aeabi_dmul>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	theta *= 0.070777; //Conversion pour que Set_Position(0,0,360) donne une rotation de 360° autour de Z
 800c5f8:	a3a3      	add	r3, pc, #652	@ (adr r3, 800c888 <_ZN12Embase3Roues7setStepEddd+0x2d0>)
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c602:	f7f4 f829 	bl	8000658 <__aeabi_dmul>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	e9c7 2300 	strd	r2, r3, [r7]

	//Angles en radians
	double theta_a = 1 / Rayon_Roue * (coeff_1x * x * 0.5 - coeff_1y * y * coeff_Y - diametre_embase * theta * coeff_1z);
 800c60e:	f04f 0200 	mov.w	r2, #0
 800c612:	4ba6      	ldr	r3, [pc, #664]	@ (800c8ac <_ZN12Embase3Roues7setStepEddd+0x2f4>)
 800c614:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c618:	f7f4 f81e 	bl	8000658 <__aeabi_dmul>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4614      	mov	r4, r2
 800c622:	461d      	mov	r5, r3
 800c624:	a39a      	add	r3, pc, #616	@ (adr r3, 800c890 <_ZN12Embase3Roues7setStepEddd+0x2d8>)
 800c626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c62e:	f7f4 f813 	bl	8000658 <__aeabi_dmul>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	4620      	mov	r0, r4
 800c638:	4629      	mov	r1, r5
 800c63a:	f7f3 fe55 	bl	80002e8 <__aeabi_dsub>
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	4614      	mov	r4, r2
 800c644:	461d      	mov	r5, r3
 800c646:	a394      	add	r3, pc, #592	@ (adr r3, 800c898 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c650:	f7f4 f802 	bl	8000658 <__aeabi_dmul>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	4620      	mov	r0, r4
 800c65a:	4629      	mov	r1, r5
 800c65c:	f7f3 fe44 	bl	80002e8 <__aeabi_dsub>
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	4610      	mov	r0, r2
 800c666:	4619      	mov	r1, r3
 800c668:	a38d      	add	r3, pc, #564	@ (adr r3, 800c8a0 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	f7f3 fff3 	bl	8000658 <__aeabi_dmul>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double theta_c = 1 / Rayon_Roue * (coeff_3x * x * 0.5 + y * coeff_Y * coeff_3y - diametre_embase * theta * coeff_3z);
 800c67a:	f04f 0200 	mov.w	r2, #0
 800c67e:	4b8b      	ldr	r3, [pc, #556]	@ (800c8ac <_ZN12Embase3Roues7setStepEddd+0x2f4>)
 800c680:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c684:	f7f3 ffe8 	bl	8000658 <__aeabi_dmul>
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	4614      	mov	r4, r2
 800c68e:	461d      	mov	r5, r3
 800c690:	a37f      	add	r3, pc, #508	@ (adr r3, 800c890 <_ZN12Embase3Roues7setStepEddd+0x2d8>)
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c69a:	f7f3 ffdd 	bl	8000658 <__aeabi_dmul>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f3 fe21 	bl	80002ec <__adddf3>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4614      	mov	r4, r2
 800c6b0:	461d      	mov	r5, r3
 800c6b2:	a379      	add	r3, pc, #484	@ (adr r3, 800c898 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6bc:	f7f3 ffcc 	bl	8000658 <__aeabi_dmul>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	f7f3 fe0e 	bl	80002e8 <__aeabi_dsub>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	a372      	add	r3, pc, #456	@ (adr r3, 800c8a0 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	f7f3 ffbd 	bl	8000658 <__aeabi_dmul>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double theta_b = 1 / Rayon_Roue * (coeff_2x * 1 * x - diametre_embase * theta * coeff_2z);
 800c6e6:	a36c      	add	r3, pc, #432	@ (adr r3, 800c898 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6f0:	f7f3 ffb2 	bl	8000658 <__aeabi_dmul>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c6fc:	f7f3 fdf4 	bl	80002e8 <__aeabi_dsub>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4610      	mov	r0, r2
 800c706:	4619      	mov	r1, r3
 800c708:	a365      	add	r3, pc, #404	@ (adr r3, 800c8a0 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f7f3 ffa3 	bl	8000658 <__aeabi_dmul>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double step_a = rad_to_step(theta_a);
 800c71a:	69fc      	ldr	r4, [r7, #28]
 800c71c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c720:	f7f4 fa92 	bl	8000c48 <__aeabi_d2f>
 800c724:	4603      	mov	r3, r0
 800c726:	ee00 3a10 	vmov	s0, r3
 800c72a:	4620      	mov	r0, r4
 800c72c:	f7f5 fe1a 	bl	8002364 <_ZN11BlocMoteurs11rad_to_stepEf>
 800c730:	ee10 3a10 	vmov	r3, s0
 800c734:	4618      	mov	r0, r3
 800c736:	f7f3 ff37 	bl	80005a8 <__aeabi_f2d>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double step_b = rad_to_step(theta_b);
 800c742:	69fc      	ldr	r4, [r7, #28]
 800c744:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c748:	f7f4 fa7e 	bl	8000c48 <__aeabi_d2f>
 800c74c:	4603      	mov	r3, r0
 800c74e:	ee00 3a10 	vmov	s0, r3
 800c752:	4620      	mov	r0, r4
 800c754:	f7f5 fe06 	bl	8002364 <_ZN11BlocMoteurs11rad_to_stepEf>
 800c758:	ee10 3a10 	vmov	r3, s0
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7f3 ff23 	bl	80005a8 <__aeabi_f2d>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double step_c = rad_to_step(theta_c);
 800c76a:	69fc      	ldr	r4, [r7, #28]
 800c76c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c770:	f7f4 fa6a 	bl	8000c48 <__aeabi_d2f>
 800c774:	4603      	mov	r3, r0
 800c776:	ee00 3a10 	vmov	s0, r3
 800c77a:	4620      	mov	r0, r4
 800c77c:	f7f5 fdf2 	bl	8002364 <_ZN11BlocMoteurs11rad_to_stepEf>
 800c780:	ee10 3a10 	vmov	r3, s0
 800c784:	4618      	mov	r0, r3
 800c786:	f7f3 ff0f 	bl	80005a8 <__aeabi_f2d>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	StepperMotor::direction_t dir_a = FWD;
 800c792:	2301      	movs	r3, #1
 800c794:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	StepperMotor::direction_t dir_b = FWD;
 800c798:	2301      	movs	r3, #1
 800c79a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	StepperMotor::direction_t dir_c = FWD;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	//Gestion des directions par défaut: avancer sinon, si nb de step negatif, inversion du nb de steps et direction arriere
	if (step_a < 0) {
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	f04f 0300 	mov.w	r3, #0
 800c7ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c7b0:	f7f4 f9c4 	bl	8000b3c <__aeabi_dcmplt>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00e      	beq.n	800c7d8 <_ZN12Embase3Roues7setStepEddd+0x220>
		step_a = 0 - step_a;
 800c7ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c7be:	f04f 0000 	mov.w	r0, #0
 800c7c2:	f04f 0100 	mov.w	r1, #0
 800c7c6:	f7f3 fd8f 	bl	80002e8 <__aeabi_dsub>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		dir_a = BWD;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
	if (step_b < 0) {
 800c7d8:	f04f 0200 	mov.w	r2, #0
 800c7dc:	f04f 0300 	mov.w	r3, #0
 800c7e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c7e4:	f7f4 f9aa 	bl	8000b3c <__aeabi_dcmplt>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00e      	beq.n	800c80c <_ZN12Embase3Roues7setStepEddd+0x254>
		step_b = 0 - step_b;
 800c7ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c7f2:	f04f 0000 	mov.w	r0, #0
 800c7f6:	f04f 0100 	mov.w	r1, #0
 800c7fa:	f7f3 fd75 	bl	80002e8 <__aeabi_dsub>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		dir_b = BWD;
 800c806:	2300      	movs	r3, #0
 800c808:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	}
	if (step_c < 0) {
 800c80c:	f04f 0200 	mov.w	r2, #0
 800c810:	f04f 0300 	mov.w	r3, #0
 800c814:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c818:	f7f4 f990 	bl	8000b3c <__aeabi_dcmplt>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00e      	beq.n	800c840 <_ZN12Embase3Roues7setStepEddd+0x288>
		step_c = 0 - step_c;
 800c822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c826:	f04f 0000 	mov.w	r0, #0
 800c82a:	f04f 0100 	mov.w	r1, #0
 800c82e:	f7f3 fd5b 	bl	80002e8 <__aeabi_dsub>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		dir_c = BWD;
 800c83a:	2300      	movs	r3, #0
 800c83c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	}

	if (step_a || step_b || step_c)
 800c840:	f04f 0200 	mov.w	r2, #0
 800c844:	f04f 0300 	mov.w	r3, #0
 800c848:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c84c:	f7f4 f96c 	bl	8000b28 <__aeabi_dcmpeq>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d031      	beq.n	800c8ba <_ZN12Embase3Roues7setStepEddd+0x302>
 800c856:	f04f 0200 	mov.w	r2, #0
 800c85a:	f04f 0300 	mov.w	r3, #0
 800c85e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c862:	f7f4 f961 	bl	8000b28 <__aeabi_dcmpeq>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d026      	beq.n	800c8ba <_ZN12Embase3Roues7setStepEddd+0x302>
 800c86c:	f04f 0200 	mov.w	r2, #0
 800c870:	f04f 0300 	mov.w	r3, #0
 800c874:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c878:	f7f4 f956 	bl	8000b28 <__aeabi_dcmpeq>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d150      	bne.n	800c924 <_ZN12Embase3Roues7setStepEddd+0x36c>
	{
		while(!movement_allowed)
 800c882:	e01a      	b.n	800c8ba <_ZN12Embase3Roues7setStepEddd+0x302>
 800c884:	f3af 8000 	nop.w
 800c888:	044f1a1a 	.word	0x044f1a1a
 800c88c:	3fb21e71 	.word	0x3fb21e71
 800c890:	e875ed0f 	.word	0xe875ed0f
 800c894:	3febb67a 	.word	0x3febb67a
 800c898:	0a3d70a4 	.word	0x0a3d70a4
 800c89c:	3fc0a3d7 	.word	0x3fc0a3d7
 800c8a0:	a2e8ba2f 	.word	0xa2e8ba2f
 800c8a4:	40322e8b 	.word	0x40322e8b
 800c8a8:	40100000 	.word	0x40100000
 800c8ac:	3fe00000 	.word	0x3fe00000
		{
			if(get_out_step)
 800c8b0:	4b1e      	ldr	r3, [pc, #120]	@ (800c92c <_ZN12Embase3Roues7setStepEddd+0x374>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d133      	bne.n	800c922 <_ZN12Embase3Roues7setStepEddd+0x36a>
		while(!movement_allowed)
 800c8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c930 <_ZN12Embase3Roues7setStepEddd+0x378>)
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	f083 0301 	eor.w	r3, r3, #1
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1f2      	bne.n	800c8b0 <_ZN12Embase3Roues7setStepEddd+0x2f8>
			{
				return;
			}
		}
		motors_busy = true;
 800c8ca:	4b1a      	ldr	r3, [pc, #104]	@ (800c934 <_ZN12Embase3Roues7setStepEddd+0x37c>)
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	701a      	strb	r2, [r3, #0]
		commande_step_indiv(step_a, dir_a, step_b, dir_b, step_c, dir_c, 0, FWD);
 800c8d0:	69fc      	ldr	r4, [r7, #28]
 800c8d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c8d6:	f7f4 f997 	bl	8000c08 <__aeabi_d2uiz>
 800c8da:	4605      	mov	r5, r0
 800c8dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c8e0:	f7f4 f992 	bl	8000c08 <__aeabi_d2uiz>
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c8ea:	f7f4 f98d 	bl	8000c08 <__aeabi_d2uiz>
 800c8ee:	4601      	mov	r1, r0
 800c8f0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	9304      	str	r3, [sp, #16]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	9303      	str	r3, [sp, #12]
 800c8fc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c900:	9302      	str	r3, [sp, #8]
 800c902:	9101      	str	r1, [sp, #4]
 800c904:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	4633      	mov	r3, r6
 800c90c:	4629      	mov	r1, r5
 800c90e:	4620      	mov	r0, r4
 800c910:	f7f5 fef2 	bl	80026f8 <_ZN11BlocMoteurs19commande_step_indivEjN12StepperMotor11direction_tEjS1_jS1_jS1_>
		while(motors_busy); // Wait for motors to be off.
 800c914:	bf00      	nop
 800c916:	4b07      	ldr	r3, [pc, #28]	@ (800c934 <_ZN12Embase3Roues7setStepEddd+0x37c>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1fa      	bne.n	800c916 <_ZN12Embase3Roues7setStepEddd+0x35e>
 800c920:	e000      	b.n	800c924 <_ZN12Embase3Roues7setStepEddd+0x36c>
				return;
 800c922:	bf00      	nop
	}

}
 800c924:	375c      	adds	r7, #92	@ 0x5c
 800c926:	46bd      	mov	sp, r7
 800c928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c92a:	bf00      	nop
 800c92c:	2000055c 	.word	0x2000055c
 800c930:	20000559 	.word	0x20000559
 800c934:	20000558 	.word	0x20000558

0800c938 <_ZN12Embase3Roues9translateEdd>:

void Embase3Roues::translate(double x, double y) {
 800c938:	b5b0      	push	{r4, r5, r7, lr}
 800c93a:	b08e      	sub	sp, #56	@ 0x38
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6278      	str	r0, [r7, #36]	@ 0x24
 800c940:	ed87 0b06 	vstr	d0, [r7, #24]
 800c944:	ed87 1b04 	vstr	d1, [r7, #16]

	// passage en coordonnées polaires.
	double distance = 0;
 800c948:	f04f 0200 	mov.w	r2, #0
 800c94c:	f04f 0300 	mov.w	r3, #0
 800c950:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double theta = 0;
 800c954:	f04f 0200 	mov.w	r2, #0
 800c958:	f04f 0300 	mov.w	r3, #0
 800c95c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if((y == 0)&&(x != 0))
 800c960:	f04f 0200 	mov.w	r2, #0
 800c964:	f04f 0300 	mov.w	r3, #0
 800c968:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c96c:	f7f4 f8dc 	bl	8000b28 <__aeabi_dcmpeq>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d02b      	beq.n	800c9ce <_ZN12Embase3Roues9translateEdd+0x96>
 800c976:	f04f 0200 	mov.w	r2, #0
 800c97a:	f04f 0300 	mov.w	r3, #0
 800c97e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c982:	f7f4 f8d1 	bl	8000b28 <__aeabi_dcmpeq>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d120      	bne.n	800c9ce <_ZN12Embase3Roues9translateEdd+0x96>
	{
		if(x < 0)
 800c98c:	f04f 0200 	mov.w	r2, #0
 800c990:	f04f 0300 	mov.w	r3, #0
 800c994:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c998:	f7f4 f8d0 	bl	8000b3c <__aeabi_dcmplt>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00b      	beq.n	800c9ba <_ZN12Embase3Roues9translateEdd+0x82>
		{
			theta = 90;
 800c9a2:	f04f 0200 	mov.w	r2, #0
 800c9a6:	4b8c      	ldr	r3, [pc, #560]	@ (800cbd8 <_ZN12Embase3Roues9translateEdd+0x2a0>)
 800c9a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = -x;
 800c9ac:	69bc      	ldr	r4, [r7, #24]
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800c9b4:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
		if(x < 0)
 800c9b8:	e07a      	b.n	800cab0 <_ZN12Embase3Roues9translateEdd+0x178>

		}
		else
		{
			theta = 90;
 800c9ba:	f04f 0200 	mov.w	r2, #0
 800c9be:	4b86      	ldr	r3, [pc, #536]	@ (800cbd8 <_ZN12Embase3Roues9translateEdd+0x2a0>)
 800c9c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = x;
 800c9c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(x < 0)
 800c9cc:	e070      	b.n	800cab0 <_ZN12Embase3Roues9translateEdd+0x178>

		}

	}
	else if((y != 0) && (x == 0))
 800c9ce:	f04f 0200 	mov.w	r2, #0
 800c9d2:	f04f 0300 	mov.w	r3, #0
 800c9d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c9da:	f7f4 f8a5 	bl	8000b28 <__aeabi_dcmpeq>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d12b      	bne.n	800ca3c <_ZN12Embase3Roues9translateEdd+0x104>
 800c9e4:	f04f 0200 	mov.w	r2, #0
 800c9e8:	f04f 0300 	mov.w	r3, #0
 800c9ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c9f0:	f7f4 f89a 	bl	8000b28 <__aeabi_dcmpeq>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d020      	beq.n	800ca3c <_ZN12Embase3Roues9translateEdd+0x104>
	{
		if(y < 0)
 800c9fa:	f04f 0200 	mov.w	r2, #0
 800c9fe:	f04f 0300 	mov.w	r3, #0
 800ca02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ca06:	f7f4 f899 	bl	8000b3c <__aeabi_dcmplt>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00a      	beq.n	800ca26 <_ZN12Embase3Roues9translateEdd+0xee>
		{
			theta = 0;
 800ca10:	f04f 0200 	mov.w	r2, #0
 800ca14:	f04f 0300 	mov.w	r3, #0
 800ca18:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = y;
 800ca1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca20:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(y < 0)
 800ca24:	e044      	b.n	800cab0 <_ZN12Embase3Roues9translateEdd+0x178>

		}
		else
		{
			theta = 0;
 800ca26:	f04f 0200 	mov.w	r2, #0
 800ca2a:	f04f 0300 	mov.w	r3, #0
 800ca2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = y;
 800ca32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca36:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(y < 0)
 800ca3a:	e039      	b.n	800cab0 <_ZN12Embase3Roues9translateEdd+0x178>

		}
	}
	else
	{
		distance = sqrt(pow(x * Coeff_erreur_x, 2) + pow(y * Coeff_erreur_y, 2));//Distance à parcourir en m
 800ca3c:	ed9f 1b5c 	vldr	d1, [pc, #368]	@ 800cbb0 <_ZN12Embase3Roues9translateEdd+0x278>
 800ca40:	ed97 0b06 	vldr	d0, [r7, #24]
 800ca44:	f006 fa76 	bl	8012f34 <pow>
 800ca48:	ec55 4b10 	vmov	r4, r5, d0
 800ca4c:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 800cbb0 <_ZN12Embase3Roues9translateEdd+0x278>
 800ca50:	ed97 0b04 	vldr	d0, [r7, #16]
 800ca54:	f006 fa6e 	bl	8012f34 <pow>
 800ca58:	ec53 2b10 	vmov	r2, r3, d0
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	4629      	mov	r1, r5
 800ca60:	f7f3 fc44 	bl	80002ec <__adddf3>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	ec43 2b17 	vmov	d7, r2, r3
 800ca6c:	eeb0 0a47 	vmov.f32	s0, s14
 800ca70:	eef0 0a67 	vmov.f32	s1, s15
 800ca74:	f006 face 	bl	8013014 <sqrt>
 800ca78:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
		theta = atan2(x, y) * 180.0 / M_PI;//Angle vers lequel s'orienté en °
 800ca7c:	ed97 1b04 	vldr	d1, [r7, #16]
 800ca80:	ed97 0b06 	vldr	d0, [r7, #24]
 800ca84:	f006 fa54 	bl	8012f30 <atan2>
 800ca88:	ec51 0b10 	vmov	r0, r1, d0
 800ca8c:	f04f 0200 	mov.w	r2, #0
 800ca90:	4b52      	ldr	r3, [pc, #328]	@ (800cbdc <_ZN12Embase3Roues9translateEdd+0x2a4>)
 800ca92:	f7f3 fde1 	bl	8000658 <__aeabi_dmul>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	a346      	add	r3, pc, #280	@ (adr r3, 800cbb8 <_ZN12Embase3Roues9translateEdd+0x280>)
 800caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa4:	f7f3 ff02 	bl	80008ac <__aeabi_ddiv>
 800caa8:	4602      	mov	r2, r0
 800caaa:	460b      	mov	r3, r1
 800caac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	}

	// Execution des mouvements
	rotate(theta); // Rotation initiale
 800cab0:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800cab4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cab6:	f000 f897 	bl	800cbe8 <_ZN12Embase3Roues6rotateEd>

	while(fabs(distance) > BASE_MOVEMENT_DIST_M)
 800caba:	e047      	b.n	800cb4c <_ZN12Embase3Roues9translateEdd+0x214>
	{
		while(!movement_allowed);
 800cabc:	bf00      	nop
 800cabe:	4b48      	ldr	r3, [pc, #288]	@ (800cbe0 <_ZN12Embase3Roues9translateEdd+0x2a8>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f083 0301 	eor.w	r3, r3, #1
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1f7      	bne.n	800cabe <_ZN12Embase3Roues9translateEdd+0x186>
		if(distance>0){
 800cace:	f04f 0200 	mov.w	r2, #0
 800cad2:	f04f 0300 	mov.w	r3, #0
 800cad6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800cada:	f7f4 f84d 	bl	8000b78 <__aeabi_dcmpgt>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d014      	beq.n	800cb0e <_ZN12Embase3Roues9translateEdd+0x1d6>
			distance -= BASE_MOVEMENT_DIST_M;
 800cae4:	a336      	add	r3, pc, #216	@ (adr r3, 800cbc0 <_ZN12Embase3Roues9translateEdd+0x288>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800caee:	f7f3 fbfb 	bl	80002e8 <__aeabi_dsub>
 800caf2:	4602      	mov	r2, r0
 800caf4:	460b      	mov	r3, r1
 800caf6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			setStep(0, BASE_MOVEMENT_DIST_M, 0); // Découpage des mouvements
 800cafa:	ed9f 2b33 	vldr	d2, [pc, #204]	@ 800cbc8 <_ZN12Embase3Roues9translateEdd+0x290>
 800cafe:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 800cbc0 <_ZN12Embase3Roues9translateEdd+0x288>
 800cb02:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 800cbc8 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb08:	f7ff fd56 	bl	800c5b8 <_ZN12Embase3Roues7setStepEddd>
 800cb0c:	e01e      	b.n	800cb4c <_ZN12Embase3Roues9translateEdd+0x214>

		}
		else if(distance<0){
 800cb0e:	f04f 0200 	mov.w	r2, #0
 800cb12:	f04f 0300 	mov.w	r3, #0
 800cb16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800cb1a:	f7f4 f80f 	bl	8000b3c <__aeabi_dcmplt>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d013      	beq.n	800cb4c <_ZN12Embase3Roues9translateEdd+0x214>
			distance += BASE_MOVEMENT_DIST_M;
 800cb24:	a326      	add	r3, pc, #152	@ (adr r3, 800cbc0 <_ZN12Embase3Roues9translateEdd+0x288>)
 800cb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800cb2e:	f7f3 fbdd 	bl	80002ec <__adddf3>
 800cb32:	4602      	mov	r2, r0
 800cb34:	460b      	mov	r3, r1
 800cb36:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			setStep(0, -BASE_MOVEMENT_DIST_M, 0); // Découpage des mouvements
 800cb3a:	ed9f 2b23 	vldr	d2, [pc, #140]	@ 800cbc8 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb3e:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 800cbd0 <_ZN12Embase3Roues9translateEdd+0x298>
 800cb42:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 800cbc8 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb48:	f7ff fd36 	bl	800c5b8 <_ZN12Embase3Roues7setStepEddd>
	while(fabs(distance) > BASE_MOVEMENT_DIST_M)
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4e:	60bb      	str	r3, [r7, #8]
 800cb50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	a319      	add	r3, pc, #100	@ (adr r3, 800cbc0 <_ZN12Embase3Roues9translateEdd+0x288>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb62:	f7f4 f809 	bl	8000b78 <__aeabi_dcmpgt>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1a7      	bne.n	800cabc <_ZN12Embase3Roues9translateEdd+0x184>

		}
	}

	while(!movement_allowed);
 800cb6c:	bf00      	nop
 800cb6e:	4b1c      	ldr	r3, [pc, #112]	@ (800cbe0 <_ZN12Embase3Roues9translateEdd+0x2a8>)
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	f083 0301 	eor.w	r3, r3, #1
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1f7      	bne.n	800cb6e <_ZN12Embase3Roues9translateEdd+0x236>
	//printf("%f\r\n",distance);
	setStep(0, distance, 0); // Mouvement final
 800cb7e:	ed9f 2b12 	vldr	d2, [pc, #72]	@ 800cbc8 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb82:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800cb86:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 800cbc8 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb8c:	f7ff fd14 	bl	800c5b8 <_ZN12Embase3Roues7setStepEddd>

	rotate(-theta);
 800cb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb96:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800cb9a:	607b      	str	r3, [r7, #4]
 800cb9c:	ed97 0b00 	vldr	d0, [r7]
 800cba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cba2:	f000 f821 	bl	800cbe8 <_ZN12Embase3Roues6rotateEd>
}
 800cba6:	bf00      	nop
 800cba8:	3738      	adds	r7, #56	@ 0x38
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bdb0      	pop	{r4, r5, r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	00000000 	.word	0x00000000
 800cbb4:	40000000 	.word	0x40000000
 800cbb8:	54442d18 	.word	0x54442d18
 800cbbc:	400921fb 	.word	0x400921fb
 800cbc0:	9999999a 	.word	0x9999999a
 800cbc4:	3fa99999 	.word	0x3fa99999
	...
 800cbd0:	9999999a 	.word	0x9999999a
 800cbd4:	bfa99999 	.word	0xbfa99999
 800cbd8:	40568000 	.word	0x40568000
 800cbdc:	40668000 	.word	0x40668000
 800cbe0:	20000559 	.word	0x20000559
 800cbe4:	00000000 	.word	0x00000000

0800cbe8 <_ZN12Embase3Roues6rotateEd>:

void Embase3Roues::rotate(double theta) {
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	ed87 0b00 	vstr	d0, [r7]
	setStep(0, 0, theta * Coeff_erreur_z);
 800cbf4:	f04f 0200 	mov.w	r2, #0
 800cbf8:	4b13      	ldr	r3, [pc, #76]	@ (800cc48 <_ZN12Embase3Roues6rotateEd+0x60>)
 800cbfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbfe:	f7f3 fd2b 	bl	8000658 <__aeabi_dmul>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4610      	mov	r0, r2
 800cc08:	4619      	mov	r1, r3
 800cc0a:	f04f 0200 	mov.w	r2, #0
 800cc0e:	4b0f      	ldr	r3, [pc, #60]	@ (800cc4c <_ZN12Embase3Roues6rotateEd+0x64>)
 800cc10:	f7f3 fe4c 	bl	80008ac <__aeabi_ddiv>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	ec43 2b17 	vmov	d7, r2, r3
 800cc1c:	eeb0 2a47 	vmov.f32	s4, s14
 800cc20:	eef0 2a67 	vmov.f32	s5, s15
 800cc24:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 800cc40 <_ZN12Embase3Roues6rotateEd+0x58>
 800cc28:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800cc40 <_ZN12Embase3Roues6rotateEd+0x58>
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f7ff fcc3 	bl	800c5b8 <_ZN12Embase3Roues7setStepEddd>
}
 800cc32:	bf00      	nop
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	f3af 8000 	nop.w
	...
 800cc48:	40468000 	.word	0x40468000
 800cc4c:	40460000 	.word	0x40460000

0800cc50 <_ZN12Embase3Roues12moveRelativeEddd>:

void Embase3Roues::moveRelative(double x, double y, double theta) {
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b088      	sub	sp, #32
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	61f8      	str	r0, [r7, #28]
 800cc58:	ed87 0b04 	vstr	d0, [r7, #16]
 800cc5c:	ed87 1b02 	vstr	d1, [r7, #8]
 800cc60:	ed87 2b00 	vstr	d2, [r7]
	motors_on();
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f5 fdf2 	bl	8002850 <_ZN11BlocMoteurs9motors_onEv>
	translate(x, y);
 800cc6c:	ed97 1b02 	vldr	d1, [r7, #8]
 800cc70:	ed97 0b04 	vldr	d0, [r7, #16]
 800cc74:	69f8      	ldr	r0, [r7, #28]
 800cc76:	f7ff fe5f 	bl	800c938 <_ZN12Embase3Roues9translateEdd>
	rotate(theta);
 800cc7a:	ed97 0b00 	vldr	d0, [r7]
 800cc7e:	69f8      	ldr	r0, [r7, #28]
 800cc80:	f7ff ffb2 	bl	800cbe8 <_ZN12Embase3Roues6rotateEd>
	get_out_step = false;
 800cc84:	4b05      	ldr	r3, [pc, #20]	@ (800cc9c <_ZN12Embase3Roues12moveRelativeEddd+0x4c>)
 800cc86:	2200      	movs	r2, #0
 800cc88:	701a      	strb	r2, [r3, #0]
	motors_stop_hard();
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7f5 fdec 	bl	800286a <_ZN11BlocMoteurs16motors_stop_hardEv>
}
 800cc92:	bf00      	nop
 800cc94:	3720      	adds	r7, #32
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	2000055c 	.word	0x2000055c

0800cca0 <_ZN12Embase3Roues4waitEm>:

void Embase3Roues::wait(uint32_t delay_ms) {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
	//motors_stop_hard();
	if (delay_ms == 0)
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10c      	bne.n	800ccca <_ZN12Embase3Roues4waitEm+0x2a>
	{
		movement_allowed = false;
 800ccb0:	4b09      	ldr	r3, [pc, #36]	@ (800ccd8 <_ZN12Embase3Roues4waitEm+0x38>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	701a      	strb	r2, [r3, #0]
		while(!movement_allowed);
 800ccb6:	bf00      	nop
 800ccb8:	4b07      	ldr	r3, [pc, #28]	@ (800ccd8 <_ZN12Embase3Roues4waitEm+0x38>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	f083 0301 	eor.w	r3, r3, #1
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1f7      	bne.n	800ccb8 <_ZN12Embase3Roues4waitEm+0x18>
	}
	else{
		HAL_Delay(delay_ms);
	}
}
 800ccc8:	e002      	b.n	800ccd0 <_ZN12Embase3Roues4waitEm+0x30>
		HAL_Delay(delay_ms);
 800ccca:	6838      	ldr	r0, [r7, #0]
 800cccc:	f001 fb9a 	bl	800e404 <HAL_Delay>
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	20000559 	.word	0x20000559
 800ccdc:	00000000 	.word	0x00000000

0800cce0 <_ZN12Embase3Roues9moveSpeedEddd>:


/*Fonctions pour la commande en vitesse*/

void Embase3Roues::moveSpeed(double vx, double vy, double wz)
{
 800cce0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cce4:	ed2d 8b02 	vpush	{d8}
 800cce8:	b090      	sub	sp, #64	@ 0x40
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	61f8      	str	r0, [r7, #28]
 800ccee:	ed87 0b04 	vstr	d0, [r7, #16]
 800ccf2:	ed87 1b02 	vstr	d1, [r7, #8]
 800ccf6:	ed87 2b00 	vstr	d2, [r7]
	const double d = 0.13; //m
 800ccfa:	a355      	add	r3, pc, #340	@ (adr r3, 800ce50 <_ZN12Embase3Roues9moveSpeedEddd+0x170>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	//calcul des vitesses
	double Vaf = 0.5*vy - sqrt(3)/2*vx - d*wz;
 800cd04:	f04f 0200 	mov.w	r2, #0
 800cd08:	4b53      	ldr	r3, [pc, #332]	@ (800ce58 <_ZN12Embase3Roues9moveSpeedEddd+0x178>)
 800cd0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd0e:	f7f3 fca3 	bl	8000658 <__aeabi_dmul>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4690      	mov	r8, r2
 800cd18:	4699      	mov	r9, r3
 800cd1a:	a34b      	add	r3, pc, #300	@ (adr r3, 800ce48 <_ZN12Embase3Roues9moveSpeedEddd+0x168>)
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cd24:	f7f3 fc98 	bl	8000658 <__aeabi_dmul>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4649      	mov	r1, r9
 800cd30:	f7f3 fada 	bl	80002e8 <__aeabi_dsub>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	4690      	mov	r8, r2
 800cd3a:	4699      	mov	r9, r3
 800cd3c:	a344      	add	r3, pc, #272	@ (adr r3, 800ce50 <_ZN12Embase3Roues9moveSpeedEddd+0x170>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd46:	f7f3 fc87 	bl	8000658 <__aeabi_dmul>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	4640      	mov	r0, r8
 800cd50:	4649      	mov	r1, r9
 800cd52:	f7f3 fac9 	bl	80002e8 <__aeabi_dsub>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double Vbf = 0.5*vy + sqrt(3)/2*vx - d*wz;
 800cd5e:	f04f 0200 	mov.w	r2, #0
 800cd62:	4b3d      	ldr	r3, [pc, #244]	@ (800ce58 <_ZN12Embase3Roues9moveSpeedEddd+0x178>)
 800cd64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd68:	f7f3 fc76 	bl	8000658 <__aeabi_dmul>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	4690      	mov	r8, r2
 800cd72:	4699      	mov	r9, r3
 800cd74:	a334      	add	r3, pc, #208	@ (adr r3, 800ce48 <_ZN12Embase3Roues9moveSpeedEddd+0x168>)
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cd7e:	f7f3 fc6b 	bl	8000658 <__aeabi_dmul>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	4640      	mov	r0, r8
 800cd88:	4649      	mov	r1, r9
 800cd8a:	f7f3 faaf 	bl	80002ec <__adddf3>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	4690      	mov	r8, r2
 800cd94:	4699      	mov	r9, r3
 800cd96:	a32e      	add	r3, pc, #184	@ (adr r3, 800ce50 <_ZN12Embase3Roues9moveSpeedEddd+0x170>)
 800cd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cda0:	f7f3 fc5a 	bl	8000658 <__aeabi_dmul>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	4640      	mov	r0, r8
 800cdaa:	4649      	mov	r1, r9
 800cdac:	f7f3 fa9c 	bl	80002e8 <__aeabi_dsub>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double Vcf = -vy - d*wz;
 800cdb8:	68bc      	ldr	r4, [r7, #8]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800cdc0:	a323      	add	r3, pc, #140	@ (adr r3, 800ce50 <_ZN12Embase3Roues9moveSpeedEddd+0x170>)
 800cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdca:	f7f3 fc45 	bl	8000658 <__aeabi_dmul>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	f7f3 fa87 	bl	80002e8 <__aeabi_dsub>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//pilotage des moteurs

	while(!movement_allowed); //on attends que le mouvement soit autorise si on est arrete
 800cde2:	bf00      	nop
 800cde4:	4b1d      	ldr	r3, [pc, #116]	@ (800ce5c <_ZN12Embase3Roues9moveSpeedEddd+0x17c>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	f083 0301 	eor.w	r3, r3, #1
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1f7      	bne.n	800cde4 <_ZN12Embase3Roues9moveSpeedEddd+0x104>

	motors_on();
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7f5 fd2a 	bl	8002850 <_ZN11BlocMoteurs9motors_onEv>
	commande_vitesses_absolues(Vaf, -Vcf, Vbf, 0);
 800cdfc:	69fc      	ldr	r4, [r7, #28]
 800cdfe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800ce02:	f7f3 ff21 	bl	8000c48 <__aeabi_d2f>
 800ce06:	4605      	mov	r5, r0
 800ce08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ce0c:	f7f3 ff1c 	bl	8000c48 <__aeabi_d2f>
 800ce10:	4603      	mov	r3, r0
 800ce12:	ee07 3a90 	vmov	s15, r3
 800ce16:	eeb1 8a67 	vneg.f32	s16, s15
 800ce1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ce1e:	f7f3 ff13 	bl	8000c48 <__aeabi_d2f>
 800ce22:	4603      	mov	r3, r0
 800ce24:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800ce60 <_ZN12Embase3Roues9moveSpeedEddd+0x180>
 800ce28:	ee01 3a10 	vmov	s2, r3
 800ce2c:	eef0 0a48 	vmov.f32	s1, s16
 800ce30:	ee00 5a10 	vmov	s0, r5
 800ce34:	4620      	mov	r0, r4
 800ce36:	f7f5 fc04 	bl	8002642 <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>
//	commande_vitesses_absolues(0, 10, 0, 0);
}
 800ce3a:	bf00      	nop
 800ce3c:	3740      	adds	r7, #64	@ 0x40
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	ecbd 8b02 	vpop	{d8}
 800ce44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ce48:	e8584caa 	.word	0xe8584caa
 800ce4c:	3febb67a 	.word	0x3febb67a
 800ce50:	0a3d70a4 	.word	0x0a3d70a4
 800ce54:	3fc0a3d7 	.word	0x3fc0a3d7
 800ce58:	3fe00000 	.word	0x3fe00000
 800ce5c:	20000559 	.word	0x20000559
 800ce60:	00000000 	.word	0x00000000

0800ce64 <_ZN12Embase3Roues4stopEv>:


void Embase3Roues::stop(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	motors_stop_hard();
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7f5 fcfb 	bl	800286a <_ZN11BlocMoteurs16motors_stop_hardEv>
	HAL_Delay(500);
 800ce74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ce78:	f001 fac4 	bl	800e404 <HAL_Delay>
}
 800ce7c:	bf00      	nop
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	4a04      	ldr	r2, [pc, #16]	@ (800cea0 <_ZN13abstractL6470C1Ev+0x1c>)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	601a      	str	r2, [r3, #0]
{

}
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	08017e14 	.word	0x08017e14

0800cea4 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	4a04      	ldr	r2, [pc, #16]	@ (800cec0 <_ZN13abstractL6470D1Ev+0x1c>)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	601a      	str	r2, [r3, #0]
{

}
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	08017e14 	.word	0x08017e14

0800cec4 <_ZN12Embase3RouesCI111BlocMoteursEP19__SPI_HandleTypeDefP12GPIO_TypeDeftS4_tS4_tS4_t>:
};

class Embase3Roues : public BlocMoteurs
{
public:
	using BlocMoteurs::BlocMoteurs;
 800cec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cec6:	b08d      	sub	sp, #52	@ 0x34
 800cec8:	af06      	add	r7, sp, #24
 800ceca:	6178      	str	r0, [r7, #20]
 800cecc:	6139      	str	r1, [r7, #16]
 800cece:	60fa      	str	r2, [r7, #12]
 800ced0:	817b      	strh	r3, [r7, #10]
 800ced2:	697e      	ldr	r6, [r7, #20]
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	607b      	str	r3, [r7, #4]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	603a      	str	r2, [r7, #0]
 800cedc:	f8b7 c00a 	ldrh.w	ip, [r7, #10]
 800cee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800cee4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cee6:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 800cee8:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ceea:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 800ceee:	9505      	str	r5, [sp, #20]
 800cef0:	9404      	str	r4, [sp, #16]
 800cef2:	9003      	str	r0, [sp, #12]
 800cef4:	9102      	str	r1, [sp, #8]
 800cef6:	9201      	str	r2, [sp, #4]
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	4663      	mov	r3, ip
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	4630      	mov	r0, r6
 800cf02:	f7f5 f99b 	bl	800223c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	2300      	movs	r3, #0
 800cf10:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800cf18:	461a      	mov	r2, r3
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	4618      	mov	r0, r3
 800cf22:	371c      	adds	r7, #28
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800cf28:	b5b0      	push	{r4, r5, r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800cf2e:	f001 f9f7 	bl	800e320 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800cf32:	f000 f8a7 	bl	800d084 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800cf36:	f000 fc73 	bl	800d820 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800cf3a:	f000 fc15 	bl	800d768 <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 800cf3e:	f000 fa43 	bl	800d3c8 <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 800cf42:	f000 f921 	bl	800d188 <_ZL12MX_SPI1_Initv>
	MX_SPI2_Init();
 800cf46:	f000 f95b 	bl	800d200 <_ZL12MX_SPI2_Initv>
	MX_TIM1_Init();
 800cf4a:	f000 f995 	bl	800d278 <_ZL12MX_TIM1_Initv>
	MX_TIM4_Init();
 800cf4e:	f000 facb 	bl	800d4e8 <_ZL12MX_TIM4_Initv>
	MX_TIM8_Init();
 800cf52:	f000 fb71 	bl	800d638 <_ZL12MX_TIM8_Initv>
	MX_USART3_UART_Init();
 800cf56:	f000 fc35 	bl	800d7c4 <_ZL19MX_USART3_UART_Initv>
	MX_TIM6_Init();
 800cf5a:	f000 fb2d 	bl	800d5b8 <_ZL12MX_TIM6_Initv>
	/* USER CODE BEGIN 2 */

	//Start Timer2 interrupt (every 20 ms here)
	HAL_TIM_Base_Start_IT(&htim2);
 800cf5e:	4840      	ldr	r0, [pc, #256]	@ (800d060 <main+0x138>)
 800cf60:	f003 fb20 	bl	80105a4 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800cf64:	2201      	movs	r2, #1
 800cf66:	493f      	ldr	r1, [pc, #252]	@ (800d064 <main+0x13c>)
 800cf68:	483f      	ldr	r0, [pc, #252]	@ (800d068 <main+0x140>)
 800cf6a:	f004 fb40 	bl	80115ee <HAL_UART_Receive_IT>
			ssel2_Pin); */

	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
			reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
			reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port,
			ssel2_Pin);
 800cf6e:	f243 0060 	movw	r0, #12384	@ 0x3060
 800cf72:	f005 fe9a 	bl	8012caa <_Znwj>
 800cf76:	4603      	mov	r3, r0
 800cf78:	461c      	mov	r4, r3
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800cf7a:	2501      	movs	r5, #1
			ssel2_Pin);
 800cf7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf80:	9305      	str	r3, [sp, #20]
 800cf82:	4b3a      	ldr	r3, [pc, #232]	@ (800d06c <main+0x144>)
 800cf84:	9304      	str	r3, [sp, #16]
 800cf86:	2310      	movs	r3, #16
 800cf88:	9303      	str	r3, [sp, #12]
 800cf8a:	4b39      	ldr	r3, [pc, #228]	@ (800d070 <main+0x148>)
 800cf8c:	9302      	str	r3, [sp, #8]
 800cf8e:	2310      	movs	r3, #16
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	4b36      	ldr	r3, [pc, #216]	@ (800d06c <main+0x144>)
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	2320      	movs	r3, #32
 800cf98:	4a35      	ldr	r2, [pc, #212]	@ (800d070 <main+0x148>)
 800cf9a:	4936      	ldr	r1, [pc, #216]	@ (800d074 <main+0x14c>)
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f7ff ff91 	bl	800cec4 <_ZN12Embase3RouesCI111BlocMoteursEP19__SPI_HandleTypeDefP12GPIO_TypeDeftS4_tS4_tS4_t>
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800cfa2:	4b35      	ldr	r3, [pc, #212]	@ (800d078 <main+0x150>)
 800cfa4:	601c      	str	r4, [r3, #0]


	embase->set_microstepping_mode(step_mode_t::STEP_MODE_HALF);
 800cfa6:	4b34      	ldr	r3, [pc, #208]	@ (800d078 <main+0x150>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2101      	movs	r1, #1
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f5 fc0f 	bl	80027d0 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
	embase->set_max_speed_moteurs(W_MAX);
 800cfb2:	4b31      	ldr	r3, [pc, #196]	@ (800d078 <main+0x150>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7f5 fc85 	bl	80028ca <_ZN11BlocMoteurs21set_max_speed_moteursEf>

	embase->appendSpeedMove(10, 0, 0);
 800cfc0:	4b2d      	ldr	r3, [pc, #180]	@ (800d078 <main+0x150>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	ed9f 2b22 	vldr	d2, [pc, #136]	@ 800d050 <main+0x128>
 800cfc8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d050 <main+0x128>
 800cfcc:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 800d058 <main+0x130>
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff f959 	bl	800c288 <_ZN12Embase3Roues15appendSpeedMoveEddd>
	embase->appendWait(20000);
 800cfd6:	4b28      	ldr	r3, [pc, #160]	@ (800d078 <main+0x150>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff f92f 	bl	800c242 <_ZN12Embase3Roues10appendWaitEm>
	embase->appendStop();
 800cfe4:	4b24      	ldr	r3, [pc, #144]	@ (800d078 <main+0x150>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff f980 	bl	800c2ee <_ZN12Embase3Roues10appendStopEv>



	embase->appendSpeedMove(0, 10, 0);
 800cfee:	4b22      	ldr	r3, [pc, #136]	@ (800d078 <main+0x150>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 800d050 <main+0x128>
 800cff6:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 800d058 <main+0x130>
 800cffa:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 800d050 <main+0x128>
 800cffe:	4618      	mov	r0, r3
 800d000:	f7ff f942 	bl	800c288 <_ZN12Embase3Roues15appendSpeedMoveEddd>
	embase->appendWait(2000);
 800d004:	4b1c      	ldr	r3, [pc, #112]	@ (800d078 <main+0x150>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7ff f918 	bl	800c242 <_ZN12Embase3Roues10appendWaitEm>
	embase->appendStop();
 800d012:	4b19      	ldr	r3, [pc, #100]	@ (800d078 <main+0x150>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff f969 	bl	800c2ee <_ZN12Embase3Roues10appendStopEv>




	movement_allowed = true;// TODO: false not true !!!
 800d01c:	4b17      	ldr	r3, [pc, #92]	@ (800d07c <main+0x154>)
 800d01e:	2201      	movs	r2, #1
 800d020:	701a      	strb	r2, [r3, #0]
	robot_started = true; // TODO: false not true !!!
 800d022:	4b17      	ldr	r3, [pc, #92]	@ (800d080 <main+0x158>)
 800d024:	2201      	movs	r2, #1
 800d026:	701a      	strb	r2, [r3, #0]
//			setDefaultInstructions(embase);
//			robot_started = false;
//			//HAL_UART_Transmit(&huart2, (uint8_t *) "Init OK\n", 8*sizeof(char), 1000);
//		}

		if(robot_started){
 800d028:	4b15      	ldr	r3, [pc, #84]	@ (800d080 <main+0x158>)
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0fa      	beq.n	800d028 <main+0x100>
			embase->executeInstruction();
 800d032:	4b11      	ldr	r3, [pc, #68]	@ (800d078 <main+0x150>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4618      	mov	r0, r3
 800d038:	f7ff f97a 	bl	800c330 <_ZN12Embase3Roues18executeInstructionEv>
		if(robot_started){
 800d03c:	e7f4      	b.n	800d028 <main+0x100>
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800d03e:	2d00      	cmp	r5, #0
 800d040:	d004      	beq.n	800d04c <main+0x124>
			ssel2_Pin);
 800d042:	f243 0160 	movw	r1, #12384	@ 0x3060
 800d046:	4620      	mov	r0, r4
 800d048:	f005 fad4 	bl	80125f4 <_ZdlPvj>
 800d04c:	f005 fad4 	bl	80125f8 <__cxa_end_cleanup>
	...
 800d05c:	40240000 	.word	0x40240000
 800d060:	200003ac 	.word	0x200003ac
 800d064:	2000055e 	.word	0x2000055e
 800d068:	200004cc 	.word	0x200004cc
 800d06c:	40020000 	.word	0x40020000
 800d070:	40020400 	.word	0x40020400
 800d074:	200002b4 	.word	0x200002b4
 800d078:	20000554 	.word	0x20000554
 800d07c:	20000559 	.word	0x20000559
 800d080:	2000055a 	.word	0x2000055a

0800d084 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800d084:	b580      	push	{r7, lr}
 800d086:	b094      	sub	sp, #80	@ 0x50
 800d088:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800d08a:	f107 031c 	add.w	r3, r7, #28
 800d08e:	2234      	movs	r2, #52	@ 0x34
 800d090:	2100      	movs	r1, #0
 800d092:	4618      	mov	r0, r3
 800d094:	f007 ff69 	bl	8014f6a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800d098:	f107 0308 	add.w	r3, r7, #8
 800d09c:	2200      	movs	r2, #0
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	605a      	str	r2, [r3, #4]
 800d0a2:	609a      	str	r2, [r3, #8]
 800d0a4:	60da      	str	r2, [r3, #12]
 800d0a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	607b      	str	r3, [r7, #4]
 800d0ac:	4b34      	ldr	r3, [pc, #208]	@ (800d180 <_Z18SystemClock_Configv+0xfc>)
 800d0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0b0:	4a33      	ldr	r2, [pc, #204]	@ (800d180 <_Z18SystemClock_Configv+0xfc>)
 800d0b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d0b6:	6413      	str	r3, [r2, #64]	@ 0x40
 800d0b8:	4b31      	ldr	r3, [pc, #196]	@ (800d180 <_Z18SystemClock_Configv+0xfc>)
 800d0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0c0:	607b      	str	r3, [r7, #4]
 800d0c2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	603b      	str	r3, [r7, #0]
 800d0c8:	4b2e      	ldr	r3, [pc, #184]	@ (800d184 <_Z18SystemClock_Configv+0x100>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a2d      	ldr	r2, [pc, #180]	@ (800d184 <_Z18SystemClock_Configv+0x100>)
 800d0ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d0d2:	6013      	str	r3, [r2, #0]
 800d0d4:	4b2b      	ldr	r3, [pc, #172]	@ (800d184 <_Z18SystemClock_Configv+0x100>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d0dc:	603b      	str	r3, [r7, #0]
 800d0de:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d0e8:	2310      	movs	r3, #16
 800d0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800d0f4:	2308      	movs	r3, #8
 800d0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800d0f8:	23b4      	movs	r3, #180	@ 0xb4
 800d0fa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800d100:	2302      	movs	r3, #2
 800d102:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800d104:	2302      	movs	r3, #2
 800d106:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800d108:	f107 031c 	add.w	r3, r7, #28
 800d10c:	4618      	mov	r0, r3
 800d10e:	f002 f8a1 	bl	800f254 <HAL_RCC_OscConfig>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	bf14      	ite	ne
 800d118:	2301      	movne	r3, #1
 800d11a:	2300      	moveq	r3, #0
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 800d122:	f000 fcd1 	bl	800dac8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800d126:	f001 fcfb 	bl	800eb20 <HAL_PWREx_EnableOverDrive>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	bf14      	ite	ne
 800d130:	2301      	movne	r3, #1
 800d132:	2300      	moveq	r3, #0
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800d13a:	f000 fcc5 	bl	800dac8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800d13e:	230f      	movs	r3, #15
 800d140:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d142:	2302      	movs	r3, #2
 800d144:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d146:	2300      	movs	r3, #0
 800d148:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d14a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800d14e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800d150:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800d154:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800d156:	f107 0308 	add.w	r3, r7, #8
 800d15a:	2105      	movs	r1, #5
 800d15c:	4618      	mov	r0, r3
 800d15e:	f001 fd2f 	bl	800ebc0 <HAL_RCC_ClockConfig>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	bf14      	ite	ne
 800d168:	2301      	movne	r3, #1
 800d16a:	2300      	moveq	r3, #0
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800d172:	f000 fca9 	bl	800dac8 <Error_Handler>
	}
}
 800d176:	bf00      	nop
 800d178:	3750      	adds	r7, #80	@ 0x50
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	40023800 	.word	0x40023800
 800d184:	40007000 	.word	0x40007000

0800d188 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800d188:	b580      	push	{r7, lr}
 800d18a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800d18c:	4b1a      	ldr	r3, [pc, #104]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d18e:	4a1b      	ldr	r2, [pc, #108]	@ (800d1fc <_ZL12MX_SPI1_Initv+0x74>)
 800d190:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800d192:	4b19      	ldr	r3, [pc, #100]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d194:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d198:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d19a:	4b17      	ldr	r3, [pc, #92]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d1a0:	4b15      	ldr	r3, [pc, #84]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d1a6:	4b14      	ldr	r3, [pc, #80]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800d1ac:	4b12      	ldr	r3, [pc, #72]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800d1b2:	4b11      	ldr	r3, [pc, #68]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1b8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800d1ba:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1bc:	2210      	movs	r2, #16
 800d1be:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d1c0:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d1c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800d1d2:	4b09      	ldr	r3, [pc, #36]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1d4:	220a      	movs	r2, #10
 800d1d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800d1d8:	4807      	ldr	r0, [pc, #28]	@ (800d1f8 <_ZL12MX_SPI1_Initv+0x70>)
 800d1da:	f002 fad9 	bl	800f790 <HAL_SPI_Init>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	bf14      	ite	ne
 800d1e4:	2301      	movne	r3, #1
 800d1e6:	2300      	moveq	r3, #0
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800d1ee:	f000 fc6b 	bl	800dac8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800d1f2:	bf00      	nop
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	200002b4 	.word	0x200002b4
 800d1fc:	40013000 	.word	0x40013000

0800d200 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800d200:	b580      	push	{r7, lr}
 800d202:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800d204:	4b1a      	ldr	r3, [pc, #104]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d206:	4a1b      	ldr	r2, [pc, #108]	@ (800d274 <_ZL12MX_SPI2_Initv+0x74>)
 800d208:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800d20a:	4b19      	ldr	r3, [pc, #100]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d20c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d210:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d212:	4b17      	ldr	r3, [pc, #92]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d214:	2200      	movs	r2, #0
 800d216:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d218:	4b15      	ldr	r3, [pc, #84]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d21e:	4b14      	ldr	r3, [pc, #80]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d220:	2200      	movs	r2, #0
 800d222:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d224:	4b12      	ldr	r3, [pc, #72]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d226:	2200      	movs	r2, #0
 800d228:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800d22a:	4b11      	ldr	r3, [pc, #68]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d22c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d230:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d232:	4b0f      	ldr	r3, [pc, #60]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d234:	2200      	movs	r2, #0
 800d236:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d238:	4b0d      	ldr	r3, [pc, #52]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d23e:	4b0c      	ldr	r3, [pc, #48]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d240:	2200      	movs	r2, #0
 800d242:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d244:	4b0a      	ldr	r3, [pc, #40]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d246:	2200      	movs	r2, #0
 800d248:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 800d24a:	4b09      	ldr	r3, [pc, #36]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d24c:	220a      	movs	r2, #10
 800d24e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800d250:	4807      	ldr	r0, [pc, #28]	@ (800d270 <_ZL12MX_SPI2_Initv+0x70>)
 800d252:	f002 fa9d 	bl	800f790 <HAL_SPI_Init>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	bf14      	ite	ne
 800d25c:	2301      	movne	r3, #1
 800d25e:	2300      	moveq	r3, #0
 800d260:	b2db      	uxtb	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d001      	beq.n	800d26a <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 800d266:	f000 fc2f 	bl	800dac8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800d26a:	bf00      	nop
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	2000030c 	.word	0x2000030c
 800d274:	40003800 	.word	0x40003800

0800d278 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800d278:	b580      	push	{r7, lr}
 800d27a:	b092      	sub	sp, #72	@ 0x48
 800d27c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d27e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	605a      	str	r2, [r3, #4]
 800d292:	609a      	str	r2, [r3, #8]
 800d294:	60da      	str	r2, [r3, #12]
 800d296:	611a      	str	r2, [r3, #16]
 800d298:	615a      	str	r2, [r3, #20]
 800d29a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800d29c:	1d3b      	adds	r3, r7, #4
 800d29e:	2220      	movs	r2, #32
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f007 fe61 	bl	8014f6a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800d2a8:	4b45      	ldr	r3, [pc, #276]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2aa:	4a46      	ldr	r2, [pc, #280]	@ (800d3c4 <_ZL12MX_TIM1_Initv+0x14c>)
 800d2ac:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800d2ae:	4b44      	ldr	r3, [pc, #272]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2b4:	4b42      	ldr	r3, [pc, #264]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800d2ba:	4b41      	ldr	r3, [pc, #260]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d2c0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d2c2:	4b3f      	ldr	r3, [pc, #252]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800d2c8:	4b3d      	ldr	r3, [pc, #244]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2ce:	4b3c      	ldr	r3, [pc, #240]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800d2d4:	483a      	ldr	r0, [pc, #232]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2d6:	f003 f9d5 	bl	8010684 <HAL_TIM_PWM_Init>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bf14      	ite	ne
 800d2e0:	2301      	movne	r3, #1
 800d2e2:	2300      	moveq	r3, #0
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800d2ea:	f000 fbed 	bl	800dac8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800d2f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4830      	ldr	r0, [pc, #192]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d2fe:	f003 ffb5 	bl	801126c <HAL_TIMEx_MasterConfigSynchronization>
 800d302:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d304:	2b00      	cmp	r3, #0
 800d306:	bf14      	ite	ne
 800d308:	2301      	movne	r3, #1
 800d30a:	2300      	moveq	r3, #0
 800d30c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 800d312:	f000 fbd9 	bl	800dac8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d316:	2360      	movs	r3, #96	@ 0x60
 800d318:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d31e:	2300      	movs	r3, #0
 800d320:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d322:	2300      	movs	r3, #0
 800d324:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d326:	2300      	movs	r3, #0
 800d328:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d32a:	2300      	movs	r3, #0
 800d32c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d32e:	2300      	movs	r3, #0
 800d330:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800d332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d336:	2204      	movs	r2, #4
 800d338:	4619      	mov	r1, r3
 800d33a:	4821      	ldr	r0, [pc, #132]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d33c:	f003 fafa 	bl	8010934 <HAL_TIM_PWM_ConfigChannel>
 800d340:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d342:	2b00      	cmp	r3, #0
 800d344:	bf14      	ite	ne
 800d346:	2301      	movne	r3, #1
 800d348:	2300      	moveq	r3, #0
 800d34a:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 800d350:	f000 fbba 	bl	800dac8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800d354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d358:	2208      	movs	r2, #8
 800d35a:	4619      	mov	r1, r3
 800d35c:	4818      	ldr	r0, [pc, #96]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d35e:	f003 fae9 	bl	8010934 <HAL_TIM_PWM_ConfigChannel>
 800d362:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d364:	2b00      	cmp	r3, #0
 800d366:	bf14      	ite	ne
 800d368:	2301      	movne	r3, #1
 800d36a:	2300      	moveq	r3, #0
 800d36c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <_ZL12MX_TIM1_Initv+0xfe>
		Error_Handler();
 800d372:	f000 fba9 	bl	800dac8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d376:	2300      	movs	r3, #0
 800d378:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d37a:	2300      	movs	r3, #0
 800d37c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d37e:	2300      	movs	r3, #0
 800d380:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d386:	2300      	movs	r3, #0
 800d388:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d38a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d38e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d390:	2300      	movs	r3, #0
 800d392:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800d394:	1d3b      	adds	r3, r7, #4
 800d396:	4619      	mov	r1, r3
 800d398:	4809      	ldr	r0, [pc, #36]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d39a:	f003 ffe3 	bl	8011364 <HAL_TIMEx_ConfigBreakDeadTime>
 800d39e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	bf14      	ite	ne
 800d3a4:	2301      	movne	r3, #1
 800d3a6:	2300      	moveq	r3, #0
 800d3a8:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <_ZL12MX_TIM1_Initv+0x13a>
		Error_Handler();
 800d3ae:	f000 fb8b 	bl	800dac8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 800d3b2:	4803      	ldr	r0, [pc, #12]	@ (800d3c0 <_ZL12MX_TIM1_Initv+0x148>)
 800d3b4:	f000 fcee 	bl	800dd94 <HAL_TIM_MspPostInit>

}
 800d3b8:	bf00      	nop
 800d3ba:	3748      	adds	r7, #72	@ 0x48
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20000364 	.word	0x20000364
 800d3c4:	40010000 	.word	0x40010000

0800d3c8 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08e      	sub	sp, #56	@ 0x38
 800d3cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800d3ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]
 800d3d6:	605a      	str	r2, [r3, #4]
 800d3d8:	609a      	str	r2, [r3, #8]
 800d3da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d3dc:	f107 0320 	add.w	r3, r7, #32
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d3e6:	1d3b      	adds	r3, r7, #4
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	605a      	str	r2, [r3, #4]
 800d3ee:	609a      	str	r2, [r3, #8]
 800d3f0:	60da      	str	r2, [r3, #12]
 800d3f2:	611a      	str	r2, [r3, #16]
 800d3f4:	615a      	str	r2, [r3, #20]
 800d3f6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800d3f8:	4b39      	ldr	r3, [pc, #228]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d3fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d3fe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800d400:	4b37      	ldr	r3, [pc, #220]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d402:	2200      	movs	r2, #0
 800d404:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d406:	4b36      	ldr	r3, [pc, #216]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d408:	2200      	movs	r2, #0
 800d40a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1800000;
 800d40c:	4b34      	ldr	r3, [pc, #208]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d40e:	4a35      	ldr	r2, [pc, #212]	@ (800d4e4 <_ZL12MX_TIM2_Initv+0x11c>)
 800d410:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d412:	4b33      	ldr	r3, [pc, #204]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d414:	2200      	movs	r2, #0
 800d416:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d418:	4b31      	ldr	r3, [pc, #196]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d41a:	2280      	movs	r2, #128	@ 0x80
 800d41c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800d41e:	4830      	ldr	r0, [pc, #192]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d420:	f003 f870 	bl	8010504 <HAL_TIM_Base_Init>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	bf14      	ite	ne
 800d42a:	2301      	movne	r3, #1
 800d42c:	2300      	moveq	r3, #0
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <_ZL12MX_TIM2_Initv+0x70>
		Error_Handler();
 800d434:	f000 fb48 	bl	800dac8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d43c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800d43e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d442:	4619      	mov	r1, r3
 800d444:	4826      	ldr	r0, [pc, #152]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d446:	f003 fb37 	bl	8010ab8 <HAL_TIM_ConfigClockSource>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	bf14      	ite	ne
 800d450:	2301      	movne	r3, #1
 800d452:	2300      	moveq	r3, #0
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <_ZL12MX_TIM2_Initv+0x96>
		Error_Handler();
 800d45a:	f000 fb35 	bl	800dac8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800d45e:	4820      	ldr	r0, [pc, #128]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d460:	f003 f910 	bl	8010684 <HAL_TIM_PWM_Init>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	bf14      	ite	ne
 800d46a:	2301      	movne	r3, #1
 800d46c:	2300      	moveq	r3, #0
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 800d474:	f000 fb28 	bl	800dac8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d478:	2300      	movs	r3, #0
 800d47a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d47c:	2300      	movs	r3, #0
 800d47e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800d480:	f107 0320 	add.w	r3, r7, #32
 800d484:	4619      	mov	r1, r3
 800d486:	4816      	ldr	r0, [pc, #88]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d488:	f003 fef0 	bl	801126c <HAL_TIMEx_MasterConfigSynchronization>
 800d48c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bf14      	ite	ne
 800d492:	2301      	movne	r3, #1
 800d494:	2300      	moveq	r3, #0
 800d496:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <_ZL12MX_TIM2_Initv+0xd8>
		Error_Handler();
 800d49c:	f000 fb14 	bl	800dac8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d4a0:	2360      	movs	r3, #96	@ 0x60
 800d4a2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800d4b0:	1d3b      	adds	r3, r7, #4
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	480a      	ldr	r0, [pc, #40]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d4b8:	f003 fa3c 	bl	8010934 <HAL_TIM_PWM_ConfigChannel>
 800d4bc:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	bf14      	ite	ne
 800d4c2:	2301      	movne	r3, #1
 800d4c4:	2300      	moveq	r3, #0
 800d4c6:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <_ZL12MX_TIM2_Initv+0x108>
		Error_Handler();
 800d4cc:	f000 fafc 	bl	800dac8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800d4d0:	4803      	ldr	r0, [pc, #12]	@ (800d4e0 <_ZL12MX_TIM2_Initv+0x118>)
 800d4d2:	f000 fc5f 	bl	800dd94 <HAL_TIM_MspPostInit>

}
 800d4d6:	bf00      	nop
 800d4d8:	3738      	adds	r7, #56	@ 0x38
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	200003ac 	.word	0x200003ac
 800d4e4:	001b7740 	.word	0x001b7740

0800d4e8 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08a      	sub	sp, #40	@ 0x28
 800d4ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d4ee:	f107 0320 	add.w	r3, r7, #32
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
 800d4f6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d4f8:	1d3b      	adds	r3, r7, #4
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	605a      	str	r2, [r3, #4]
 800d500:	609a      	str	r2, [r3, #8]
 800d502:	60da      	str	r2, [r3, #12]
 800d504:	611a      	str	r2, [r3, #16]
 800d506:	615a      	str	r2, [r3, #20]
 800d508:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800d50a:	4b29      	ldr	r3, [pc, #164]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d50c:	4a29      	ldr	r2, [pc, #164]	@ (800d5b4 <_ZL12MX_TIM4_Initv+0xcc>)
 800d50e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800d510:	4b27      	ldr	r3, [pc, #156]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d512:	2200      	movs	r2, #0
 800d514:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d516:	4b26      	ldr	r3, [pc, #152]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d518:	2200      	movs	r2, #0
 800d51a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800d51c:	4b24      	ldr	r3, [pc, #144]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d51e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d522:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d524:	4b22      	ldr	r3, [pc, #136]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d526:	2200      	movs	r2, #0
 800d528:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d52a:	4b21      	ldr	r3, [pc, #132]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d52c:	2200      	movs	r2, #0
 800d52e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800d530:	481f      	ldr	r0, [pc, #124]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d532:	f003 f8a7 	bl	8010684 <HAL_TIM_PWM_Init>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	bf14      	ite	ne
 800d53c:	2301      	movne	r3, #1
 800d53e:	2300      	moveq	r3, #0
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 800d546:	f000 fabf 	bl	800dac8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d54a:	2300      	movs	r3, #0
 800d54c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d54e:	2300      	movs	r3, #0
 800d550:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800d552:	f107 0320 	add.w	r3, r7, #32
 800d556:	4619      	mov	r1, r3
 800d558:	4815      	ldr	r0, [pc, #84]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d55a:	f003 fe87 	bl	801126c <HAL_TIMEx_MasterConfigSynchronization>
 800d55e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d560:	2b00      	cmp	r3, #0
 800d562:	bf14      	ite	ne
 800d564:	2301      	movne	r3, #1
 800d566:	2300      	moveq	r3, #0
 800d568:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d001      	beq.n	800d572 <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 800d56e:	f000 faab 	bl	800dac8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d572:	2360      	movs	r3, #96	@ 0x60
 800d574:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d57a:	2300      	movs	r3, #0
 800d57c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800d582:	1d3b      	adds	r3, r7, #4
 800d584:	2204      	movs	r2, #4
 800d586:	4619      	mov	r1, r3
 800d588:	4809      	ldr	r0, [pc, #36]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d58a:	f003 f9d3 	bl	8010934 <HAL_TIM_PWM_ConfigChannel>
 800d58e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d590:	2b00      	cmp	r3, #0
 800d592:	bf14      	ite	ne
 800d594:	2301      	movne	r3, #1
 800d596:	2300      	moveq	r3, #0
 800d598:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 800d59e:	f000 fa93 	bl	800dac8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit (&htim4);
 800d5a2:	4803      	ldr	r0, [pc, #12]	@ (800d5b0 <_ZL12MX_TIM4_Initv+0xc8>)
 800d5a4:	f000 fbf6 	bl	800dd94 <HAL_TIM_MspPostInit>

}
 800d5a8:	bf00      	nop
 800d5aa:	3728      	adds	r7, #40	@ 0x28
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	200003f4 	.word	0x200003f4
 800d5b4:	40000800 	.word	0x40000800

0800d5b8 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d5be:	463b      	mov	r3, r7
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d630 <_ZL12MX_TIM6_Initv+0x78>)
 800d5c8:	4a1a      	ldr	r2, [pc, #104]	@ (800d634 <_ZL12MX_TIM6_Initv+0x7c>)
 800d5ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 800d5cc:	4b18      	ldr	r3, [pc, #96]	@ (800d630 <_ZL12MX_TIM6_Initv+0x78>)
 800d5ce:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800d5d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d5d4:	4b16      	ldr	r3, [pc, #88]	@ (800d630 <_ZL12MX_TIM6_Initv+0x78>)
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65520;
 800d5da:	4b15      	ldr	r3, [pc, #84]	@ (800d630 <_ZL12MX_TIM6_Initv+0x78>)
 800d5dc:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800d5e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d5e2:	4b13      	ldr	r3, [pc, #76]	@ (800d630 <_ZL12MX_TIM6_Initv+0x78>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d5e8:	4811      	ldr	r0, [pc, #68]	@ (800d630 <_ZL12MX_TIM6_Initv+0x78>)
 800d5ea:	f002 ff8b 	bl	8010504 <HAL_TIM_Base_Init>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	bf14      	ite	ne
 800d5f4:	2301      	movne	r3, #1
 800d5f6:	2300      	moveq	r3, #0
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800d5fe:	f000 fa63 	bl	800dac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d602:	2300      	movs	r3, #0
 800d604:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d606:	2300      	movs	r3, #0
 800d608:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d60a:	463b      	mov	r3, r7
 800d60c:	4619      	mov	r1, r3
 800d60e:	4808      	ldr	r0, [pc, #32]	@ (800d630 <_ZL12MX_TIM6_Initv+0x78>)
 800d610:	f003 fe2c 	bl	801126c <HAL_TIMEx_MasterConfigSynchronization>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	bf14      	ite	ne
 800d61a:	2301      	movne	r3, #1
 800d61c:	2300      	moveq	r3, #0
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800d624:	f000 fa50 	bl	800dac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d628:	bf00      	nop
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	2000043c 	.word	0x2000043c
 800d634:	40001000 	.word	0x40001000

0800d638 <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800d638:	b580      	push	{r7, lr}
 800d63a:	b092      	sub	sp, #72	@ 0x48
 800d63c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d63e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]
 800d646:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d64c:	2200      	movs	r2, #0
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	605a      	str	r2, [r3, #4]
 800d652:	609a      	str	r2, [r3, #8]
 800d654:	60da      	str	r2, [r3, #12]
 800d656:	611a      	str	r2, [r3, #16]
 800d658:	615a      	str	r2, [r3, #20]
 800d65a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800d65c:	1d3b      	adds	r3, r7, #4
 800d65e:	2220      	movs	r2, #32
 800d660:	2100      	movs	r1, #0
 800d662:	4618      	mov	r0, r3
 800d664:	f007 fc81 	bl	8014f6a <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800d668:	4b3d      	ldr	r3, [pc, #244]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d66a:	4a3e      	ldr	r2, [pc, #248]	@ (800d764 <_ZL12MX_TIM8_Initv+0x12c>)
 800d66c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800d66e:	4b3c      	ldr	r3, [pc, #240]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d670:	2200      	movs	r2, #0
 800d672:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d674:	4b3a      	ldr	r3, [pc, #232]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d676:	2200      	movs	r2, #0
 800d678:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800d67a:	4b39      	ldr	r3, [pc, #228]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d67c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d680:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d682:	4b37      	ldr	r3, [pc, #220]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d684:	2200      	movs	r2, #0
 800d686:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800d688:	4b35      	ldr	r3, [pc, #212]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d68e:	4b34      	ldr	r3, [pc, #208]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d690:	2200      	movs	r2, #0
 800d692:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800d694:	4832      	ldr	r0, [pc, #200]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d696:	f002 fff5 	bl	8010684 <HAL_TIM_PWM_Init>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	bf14      	ite	ne
 800d6a0:	2301      	movne	r3, #1
 800d6a2:	2300      	moveq	r3, #0
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <_ZL12MX_TIM8_Initv+0x76>
		Error_Handler();
 800d6aa:	f000 fa0d 	bl	800dac8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800d6b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	4828      	ldr	r0, [pc, #160]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d6be:	f003 fdd5 	bl	801126c <HAL_TIMEx_MasterConfigSynchronization>
 800d6c2:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bf14      	ite	ne
 800d6c8:	2301      	movne	r3, #1
 800d6ca:	2300      	moveq	r3, #0
 800d6cc:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <_ZL12MX_TIM8_Initv+0x9e>
		Error_Handler();
 800d6d2:	f000 f9f9 	bl	800dac8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d6d6:	2360      	movs	r3, #96	@ 0x60
 800d6d8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800d6f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6f6:	2204      	movs	r2, #4
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	4819      	ldr	r0, [pc, #100]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d6fc:	f003 f91a 	bl	8010934 <HAL_TIM_PWM_ConfigChannel>
 800d700:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d702:	2b00      	cmp	r3, #0
 800d704:	bf14      	ite	ne
 800d706:	2301      	movne	r3, #1
 800d708:	2300      	moveq	r3, #0
 800d70a:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <_ZL12MX_TIM8_Initv+0xdc>
		Error_Handler();
 800d710:	f000 f9da 	bl	800dac8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d714:	2300      	movs	r3, #0
 800d716:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d718:	2300      	movs	r3, #0
 800d71a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d71c:	2300      	movs	r3, #0
 800d71e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800d720:	2300      	movs	r3, #0
 800d722:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d724:	2300      	movs	r3, #0
 800d726:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d72c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d72e:	2300      	movs	r3, #0
 800d730:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800d732:	1d3b      	adds	r3, r7, #4
 800d734:	4619      	mov	r1, r3
 800d736:	480a      	ldr	r0, [pc, #40]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d738:	f003 fe14 	bl	8011364 <HAL_TIMEx_ConfigBreakDeadTime>
 800d73c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d73e:	2b00      	cmp	r3, #0
 800d740:	bf14      	ite	ne
 800d742:	2301      	movne	r3, #1
 800d744:	2300      	moveq	r3, #0
 800d746:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <_ZL12MX_TIM8_Initv+0x118>
		Error_Handler();
 800d74c:	f000 f9bc 	bl	800dac8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit (&htim8);
 800d750:	4803      	ldr	r0, [pc, #12]	@ (800d760 <_ZL12MX_TIM8_Initv+0x128>)
 800d752:	f000 fb1f 	bl	800dd94 <HAL_TIM_MspPostInit>

}
 800d756:	bf00      	nop
 800d758:	3748      	adds	r7, #72	@ 0x48
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	20000484 	.word	0x20000484
 800d764:	40010400 	.word	0x40010400

0800d768 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800d768:	b580      	push	{r7, lr}
 800d76a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800d76c:	4b13      	ldr	r3, [pc, #76]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d76e:	4a14      	ldr	r2, [pc, #80]	@ (800d7c0 <_ZL19MX_USART2_UART_Initv+0x58>)
 800d770:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800d772:	4b12      	ldr	r3, [pc, #72]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d778:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d77a:	4b10      	ldr	r3, [pc, #64]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800d780:	4b0e      	ldr	r3, [pc, #56]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d782:	2200      	movs	r2, #0
 800d784:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800d786:	4b0d      	ldr	r3, [pc, #52]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d788:	2200      	movs	r2, #0
 800d78a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800d78c:	4b0b      	ldr	r3, [pc, #44]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d78e:	220c      	movs	r2, #12
 800d790:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d792:	4b0a      	ldr	r3, [pc, #40]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d794:	2200      	movs	r2, #0
 800d796:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d798:	4b08      	ldr	r3, [pc, #32]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d79a:	2200      	movs	r2, #0
 800d79c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800d79e:	4807      	ldr	r0, [pc, #28]	@ (800d7bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800d7a0:	f003 fe46 	bl	8011430 <HAL_UART_Init>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	bf14      	ite	ne
 800d7aa:	2301      	movne	r3, #1
 800d7ac:	2300      	moveq	r3, #0
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d001      	beq.n	800d7b8 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800d7b4:	f000 f988 	bl	800dac8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800d7b8:	bf00      	nop
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	200004cc 	.word	0x200004cc
 800d7c0:	40004400 	.word	0x40004400

0800d7c4 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800d7c8:	4b13      	ldr	r3, [pc, #76]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7ca:	4a14      	ldr	r2, [pc, #80]	@ (800d81c <_ZL19MX_USART3_UART_Initv+0x58>)
 800d7cc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800d7ce:	4b12      	ldr	r3, [pc, #72]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d7d4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d7d6:	4b10      	ldr	r3, [pc, #64]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7d8:	2200      	movs	r2, #0
 800d7da:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800d7dc:	4b0e      	ldr	r3, [pc, #56]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800d7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800d7e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7ea:	220c      	movs	r2, #12
 800d7ec:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d7f4:	4b08      	ldr	r3, [pc, #32]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800d7fa:	4807      	ldr	r0, [pc, #28]	@ (800d818 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7fc:	f003 fe18 	bl	8011430 <HAL_UART_Init>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	bf14      	ite	ne
 800d806:	2301      	movne	r3, #1
 800d808:	2300      	moveq	r3, #0
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <_ZL19MX_USART3_UART_Initv+0x50>
		Error_Handler();
 800d810:	f000 f95a 	bl	800dac8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800d814:	bf00      	nop
 800d816:	bd80      	pop	{r7, pc}
 800d818:	20000510 	.word	0x20000510
 800d81c:	40004800 	.word	0x40004800

0800d820 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800d820:	b580      	push	{r7, lr}
 800d822:	b08a      	sub	sp, #40	@ 0x28
 800d824:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d826:	f107 0314 	add.w	r3, r7, #20
 800d82a:	2200      	movs	r2, #0
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	605a      	str	r2, [r3, #4]
 800d830:	609a      	str	r2, [r3, #8]
 800d832:	60da      	str	r2, [r3, #12]
 800d834:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d836:	2300      	movs	r3, #0
 800d838:	613b      	str	r3, [r7, #16]
 800d83a:	4b43      	ldr	r3, [pc, #268]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d83e:	4a42      	ldr	r2, [pc, #264]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d840:	f043 0304 	orr.w	r3, r3, #4
 800d844:	6313      	str	r3, [r2, #48]	@ 0x30
 800d846:	4b40      	ldr	r3, [pc, #256]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d84a:	f003 0304 	and.w	r3, r3, #4
 800d84e:	613b      	str	r3, [r7, #16]
 800d850:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d852:	2300      	movs	r3, #0
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	4b3c      	ldr	r3, [pc, #240]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d85a:	4a3b      	ldr	r2, [pc, #236]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d85c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d860:	6313      	str	r3, [r2, #48]	@ 0x30
 800d862:	4b39      	ldr	r3, [pc, #228]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d86a:	60fb      	str	r3, [r7, #12]
 800d86c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d86e:	2300      	movs	r3, #0
 800d870:	60bb      	str	r3, [r7, #8]
 800d872:	4b35      	ldr	r3, [pc, #212]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d876:	4a34      	ldr	r2, [pc, #208]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d878:	f043 0301 	orr.w	r3, r3, #1
 800d87c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d87e:	4b32      	ldr	r3, [pc, #200]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d882:	f003 0301 	and.w	r3, r3, #1
 800d886:	60bb      	str	r3, [r7, #8]
 800d888:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d88a:	2300      	movs	r3, #0
 800d88c:	607b      	str	r3, [r7, #4]
 800d88e:	4b2e      	ldr	r3, [pc, #184]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d892:	4a2d      	ldr	r2, [pc, #180]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d894:	f043 0302 	orr.w	r3, r3, #2
 800d898:	6313      	str	r3, [r2, #48]	@ 0x30
 800d89a:	4b2b      	ldr	r3, [pc, #172]	@ (800d948 <_ZL12MX_GPIO_Initv+0x128>)
 800d89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d89e:	f003 0302 	and.w	r3, r3, #2
 800d8a2:	607b      	str	r3, [r7, #4]
 800d8a4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ssel1_Pin | LD2_Pin | ssel2_Pin, GPIO_PIN_RESET);
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800d8ac:	4827      	ldr	r0, [pc, #156]	@ (800d94c <_ZL12MX_GPIO_Initv+0x12c>)
 800d8ae:	f001 f905 	bl	800eabc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f241 2130 	movw	r1, #4656	@ 0x1230
 800d8b8:	4825      	ldr	r0, [pc, #148]	@ (800d950 <_ZL12MX_GPIO_Initv+0x130>)
 800d8ba:	f001 f8ff 	bl	800eabc <HAL_GPIO_WritePin>
			GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800d8be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d8c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d8c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d8c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d8ce:	f107 0314 	add.w	r3, r7, #20
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	481f      	ldr	r0, [pc, #124]	@ (800d954 <_ZL12MX_GPIO_Initv+0x134>)
 800d8d6:	f000 ff5d 	bl	800e794 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d8de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800d8e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8e8:	f107 0314 	add.w	r3, r7, #20
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4819      	ldr	r0, [pc, #100]	@ (800d954 <_ZL12MX_GPIO_Initv+0x134>)
 800d8f0:	f000 ff50 	bl	800e794 <HAL_GPIO_Init>

	/*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
	GPIO_InitStruct.Pin = ssel1_Pin | LD2_Pin | ssel2_Pin;
 800d8f4:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800d8f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8fe:	2300      	movs	r3, #0
 800d900:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d902:	2300      	movs	r3, #0
 800d904:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d906:	f107 0314 	add.w	r3, r7, #20
 800d90a:	4619      	mov	r1, r3
 800d90c:	480f      	ldr	r0, [pc, #60]	@ (800d94c <_ZL12MX_GPIO_Initv+0x12c>)
 800d90e:	f000 ff41 	bl	800e794 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 reset_shield_2_Pin reset_shield_1_Pin PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin
 800d912:	f241 2330 	movw	r3, #4656	@ 0x1230
 800d916:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d918:	2301      	movs	r3, #1
 800d91a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d91c:	2300      	movs	r3, #0
 800d91e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d920:	2300      	movs	r3, #0
 800d922:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d924:	f107 0314 	add.w	r3, r7, #20
 800d928:	4619      	mov	r1, r3
 800d92a:	4809      	ldr	r0, [pc, #36]	@ (800d950 <_ZL12MX_GPIO_Initv+0x130>)
 800d92c:	f000 ff32 	bl	800e794 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800d930:	2200      	movs	r2, #0
 800d932:	2100      	movs	r1, #0
 800d934:	2006      	movs	r0, #6
 800d936:	f000 fe64 	bl	800e602 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d93a:	2006      	movs	r0, #6
 800d93c:	f000 fe7d 	bl	800e63a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800d940:	bf00      	nop
 800d942:	3728      	adds	r7, #40	@ 0x28
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	40023800 	.word	0x40023800
 800d94c:	40020000 	.word	0x40020000
 800d950:	40020400 	.word	0x40020400
 800d954:	40020800 	.word	0x40020800

0800d958 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800d962:	88fb      	ldrh	r3, [r7, #6]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d102      	bne.n	800d96e <HAL_GPIO_EXTI_Callback+0x16>
		// Motors are busy when pin low. Rising edge -> no longer busy
		motors_busy = false;
 800d968:	4b04      	ldr	r3, [pc, #16]	@ (800d97c <HAL_GPIO_EXTI_Callback+0x24>)
 800d96a:	2200      	movs	r2, #0
 800d96c:	701a      	strb	r2, [r3, #0]
	}
}
 800d96e:	bf00      	nop
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	20000558 	.word	0x20000558

0800d980 <HAL_UART_TxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]

}
 800d988:	bf00      	nop
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a3a      	ldr	r2, [pc, #232]	@ (800da8c <HAL_UART_RxCpltCallback+0xf8>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d16e      	bne.n	800da84 <HAL_UART_RxCpltCallback+0xf0>
	{
		switch(uart_received_char)
 800d9a6:	4b3a      	ldr	r3, [pc, #232]	@ (800da90 <HAL_UART_RxCpltCallback+0xfc>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	2b78      	cmp	r3, #120	@ 0x78
 800d9ac:	dc64      	bgt.n	800da78 <HAL_UART_RxCpltCallback+0xe4>
 800d9ae:	2b62      	cmp	r3, #98	@ 0x62
 800d9b0:	da04      	bge.n	800d9bc <HAL_UART_RxCpltCallback+0x28>
 800d9b2:	2b33      	cmp	r3, #51	@ 0x33
 800d9b4:	d050      	beq.n	800da58 <HAL_UART_RxCpltCallback+0xc4>
 800d9b6:	2b36      	cmp	r3, #54	@ 0x36
 800d9b8:	d052      	beq.n	800da60 <HAL_UART_RxCpltCallback+0xcc>
			//stop moteur
			embase->stop();
			movement_allowed = false;

		default:
			break;
 800d9ba:	e05d      	b.n	800da78 <HAL_UART_RxCpltCallback+0xe4>
		switch(uart_received_char)
 800d9bc:	3b62      	subs	r3, #98	@ 0x62
 800d9be:	2b16      	cmp	r3, #22
 800d9c0:	d85a      	bhi.n	800da78 <HAL_UART_RxCpltCallback+0xe4>
 800d9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9c8 <HAL_UART_RxCpltCallback+0x34>)
 800d9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c8:	0800da49 	.word	0x0800da49
 800d9cc:	0800da79 	.word	0x0800da79
 800d9d0:	0800da79 	.word	0x0800da79
 800d9d4:	0800da79 	.word	0x0800da79
 800d9d8:	0800da79 	.word	0x0800da79
 800d9dc:	0800da79 	.word	0x0800da79
 800d9e0:	0800da79 	.word	0x0800da79
 800d9e4:	0800da3b 	.word	0x0800da3b
 800d9e8:	0800da51 	.word	0x0800da51
 800d9ec:	0800da79 	.word	0x0800da79
 800d9f0:	0800da79 	.word	0x0800da79
 800d9f4:	0800da79 	.word	0x0800da79
 800d9f8:	0800da79 	.word	0x0800da79
 800d9fc:	0800da79 	.word	0x0800da79
 800da00:	0800da79 	.word	0x0800da79
 800da04:	0800da79 	.word	0x0800da79
 800da08:	0800da79 	.word	0x0800da79
 800da0c:	0800da25 	.word	0x0800da25
 800da10:	0800da79 	.word	0x0800da79
 800da14:	0800da79 	.word	0x0800da79
 800da18:	0800da79 	.word	0x0800da79
 800da1c:	0800da33 	.word	0x0800da33
 800da20:	0800da69 	.word	0x0800da69
			movement_allowed = true;
 800da24:	4b1b      	ldr	r3, [pc, #108]	@ (800da94 <HAL_UART_RxCpltCallback+0x100>)
 800da26:	2201      	movs	r2, #1
 800da28:	701a      	strb	r2, [r3, #0]
			robot_started = true;
 800da2a:	4b1b      	ldr	r3, [pc, #108]	@ (800da98 <HAL_UART_RxCpltCallback+0x104>)
 800da2c:	2201      	movs	r2, #1
 800da2e:	701a      	strb	r2, [r3, #0]
			break;
 800da30:	e023      	b.n	800da7a <HAL_UART_RxCpltCallback+0xe6>
			movement_allowed = false;
 800da32:	4b18      	ldr	r3, [pc, #96]	@ (800da94 <HAL_UART_RxCpltCallback+0x100>)
 800da34:	2200      	movs	r2, #0
 800da36:	701a      	strb	r2, [r3, #0]
			break;
 800da38:	e01f      	b.n	800da7a <HAL_UART_RxCpltCallback+0xe6>
			init_requested = true;
 800da3a:	4b18      	ldr	r3, [pc, #96]	@ (800da9c <HAL_UART_RxCpltCallback+0x108>)
 800da3c:	2201      	movs	r2, #1
 800da3e:	701a      	strb	r2, [r3, #0]
			get_out_step = true;
 800da40:	4b17      	ldr	r3, [pc, #92]	@ (800daa0 <HAL_UART_RxCpltCallback+0x10c>)
 800da42:	2201      	movs	r2, #1
 800da44:	701a      	strb	r2, [r3, #0]
			break;
 800da46:	e018      	b.n	800da7a <HAL_UART_RxCpltCallback+0xe6>
			equipe = BLEU;
 800da48:	4b16      	ldr	r3, [pc, #88]	@ (800daa4 <HAL_UART_RxCpltCallback+0x110>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	701a      	strb	r2, [r3, #0]
			break;
 800da4e:	e014      	b.n	800da7a <HAL_UART_RxCpltCallback+0xe6>
			equipe = JAUNE;
 800da50:	4b14      	ldr	r3, [pc, #80]	@ (800daa4 <HAL_UART_RxCpltCallback+0x110>)
 800da52:	2201      	movs	r2, #1
 800da54:	701a      	strb	r2, [r3, #0]
			break;
 800da56:	e010      	b.n	800da7a <HAL_UART_RxCpltCallback+0xe6>
			nb_panneaux = 3;
 800da58:	4b13      	ldr	r3, [pc, #76]	@ (800daa8 <HAL_UART_RxCpltCallback+0x114>)
 800da5a:	2203      	movs	r2, #3
 800da5c:	701a      	strb	r2, [r3, #0]
			break;
 800da5e:	e00c      	b.n	800da7a <HAL_UART_RxCpltCallback+0xe6>
			nb_panneaux = 6;
 800da60:	4b11      	ldr	r3, [pc, #68]	@ (800daa8 <HAL_UART_RxCpltCallback+0x114>)
 800da62:	2206      	movs	r2, #6
 800da64:	701a      	strb	r2, [r3, #0]
			break;
 800da66:	e008      	b.n	800da7a <HAL_UART_RxCpltCallback+0xe6>
			embase->stop();
 800da68:	4b10      	ldr	r3, [pc, #64]	@ (800daac <HAL_UART_RxCpltCallback+0x118>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7ff f9f9 	bl	800ce64 <_ZN12Embase3Roues4stopEv>
			movement_allowed = false;
 800da72:	4b08      	ldr	r3, [pc, #32]	@ (800da94 <HAL_UART_RxCpltCallback+0x100>)
 800da74:	2200      	movs	r2, #0
 800da76:	701a      	strb	r2, [r3, #0]
			break;
 800da78:	bf00      	nop
		}

		// ALWAYS READ UART
		HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800da7a:	2201      	movs	r2, #1
 800da7c:	4904      	ldr	r1, [pc, #16]	@ (800da90 <HAL_UART_RxCpltCallback+0xfc>)
 800da7e:	480c      	ldr	r0, [pc, #48]	@ (800dab0 <HAL_UART_RxCpltCallback+0x11c>)
 800da80:	f003 fdb5 	bl	80115ee <HAL_UART_Receive_IT>
	}
}
 800da84:	bf00      	nop
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	40004400 	.word	0x40004400
 800da90:	2000055e 	.word	0x2000055e
 800da94:	20000559 	.word	0x20000559
 800da98:	2000055a 	.word	0x2000055a
 800da9c:	2000055b 	.word	0x2000055b
 800daa0:	2000055c 	.word	0x2000055c
 800daa4:	2000055d 	.word	0x2000055d
 800daa8:	20000004 	.word	0x20000004
 800daac:	20000554 	.word	0x20000554
 800dab0:	200004cc 	.word	0x200004cc

0800dab4 <HAL_TIM_PeriodElapsedCallback>:

//Timer 2 interrupt (every 20ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
						break;
			}

		}
	}*/
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800dac8:	b480      	push	{r7}
 800daca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800dacc:	b672      	cpsid	i
}
 800dace:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800dad0:	bf00      	nop
 800dad2:	e7fd      	b.n	800dad0 <Error_Handler+0x8>

0800dad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dada:	2300      	movs	r3, #0
 800dadc:	607b      	str	r3, [r7, #4]
 800dade:	4b10      	ldr	r3, [pc, #64]	@ (800db20 <HAL_MspInit+0x4c>)
 800dae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dae2:	4a0f      	ldr	r2, [pc, #60]	@ (800db20 <HAL_MspInit+0x4c>)
 800dae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dae8:	6453      	str	r3, [r2, #68]	@ 0x44
 800daea:	4b0d      	ldr	r3, [pc, #52]	@ (800db20 <HAL_MspInit+0x4c>)
 800daec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800daf2:	607b      	str	r3, [r7, #4]
 800daf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800daf6:	2300      	movs	r3, #0
 800daf8:	603b      	str	r3, [r7, #0]
 800dafa:	4b09      	ldr	r3, [pc, #36]	@ (800db20 <HAL_MspInit+0x4c>)
 800dafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dafe:	4a08      	ldr	r2, [pc, #32]	@ (800db20 <HAL_MspInit+0x4c>)
 800db00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db04:	6413      	str	r3, [r2, #64]	@ 0x40
 800db06:	4b06      	ldr	r3, [pc, #24]	@ (800db20 <HAL_MspInit+0x4c>)
 800db08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db0e:	603b      	str	r3, [r7, #0]
 800db10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800db12:	2007      	movs	r0, #7
 800db14:	f000 fd6a 	bl	800e5ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800db18:	bf00      	nop
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	40023800 	.word	0x40023800

0800db24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08c      	sub	sp, #48	@ 0x30
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db2c:	f107 031c 	add.w	r3, r7, #28
 800db30:	2200      	movs	r2, #0
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	605a      	str	r2, [r3, #4]
 800db36:	609a      	str	r2, [r3, #8]
 800db38:	60da      	str	r2, [r3, #12]
 800db3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a45      	ldr	r2, [pc, #276]	@ (800dc58 <HAL_SPI_MspInit+0x134>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d14a      	bne.n	800dbdc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800db46:	2300      	movs	r3, #0
 800db48:	61bb      	str	r3, [r7, #24]
 800db4a:	4b44      	ldr	r3, [pc, #272]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db4e:	4a43      	ldr	r2, [pc, #268]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800db54:	6453      	str	r3, [r2, #68]	@ 0x44
 800db56:	4b41      	ldr	r3, [pc, #260]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db5e:	61bb      	str	r3, [r7, #24]
 800db60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]
 800db66:	4b3d      	ldr	r3, [pc, #244]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db6a:	4a3c      	ldr	r2, [pc, #240]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db6c:	f043 0301 	orr.w	r3, r3, #1
 800db70:	6313      	str	r3, [r2, #48]	@ 0x30
 800db72:	4b3a      	ldr	r3, [pc, #232]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db76:	f003 0301 	and.w	r3, r3, #1
 800db7a:	617b      	str	r3, [r7, #20]
 800db7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800db7e:	2300      	movs	r3, #0
 800db80:	613b      	str	r3, [r7, #16]
 800db82:	4b36      	ldr	r3, [pc, #216]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db86:	4a35      	ldr	r2, [pc, #212]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db88:	f043 0302 	orr.w	r3, r3, #2
 800db8c:	6313      	str	r3, [r2, #48]	@ 0x30
 800db8e:	4b33      	ldr	r3, [pc, #204]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800db90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db92:	f003 0302 	and.w	r3, r3, #2
 800db96:	613b      	str	r3, [r7, #16]
 800db98:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800db9a:	23c0      	movs	r3, #192	@ 0xc0
 800db9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db9e:	2302      	movs	r3, #2
 800dba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dba2:	2300      	movs	r3, #0
 800dba4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dba6:	2303      	movs	r3, #3
 800dba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800dbaa:	2305      	movs	r3, #5
 800dbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbae:	f107 031c 	add.w	r3, r7, #28
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	482a      	ldr	r0, [pc, #168]	@ (800dc60 <HAL_SPI_MspInit+0x13c>)
 800dbb6:	f000 fded 	bl	800e794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800dbba:	2308      	movs	r3, #8
 800dbbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbbe:	2302      	movs	r3, #2
 800dbc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800dbca:	2305      	movs	r3, #5
 800dbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dbce:	f107 031c 	add.w	r3, r7, #28
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4823      	ldr	r0, [pc, #140]	@ (800dc64 <HAL_SPI_MspInit+0x140>)
 800dbd6:	f000 fddd 	bl	800e794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800dbda:	e038      	b.n	800dc4e <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a21      	ldr	r2, [pc, #132]	@ (800dc68 <HAL_SPI_MspInit+0x144>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d133      	bne.n	800dc4e <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60fb      	str	r3, [r7, #12]
 800dbea:	4b1c      	ldr	r3, [pc, #112]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800dbec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbee:	4a1b      	ldr	r2, [pc, #108]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800dbf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dbf4:	6413      	str	r3, [r2, #64]	@ 0x40
 800dbf6:	4b19      	ldr	r3, [pc, #100]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800dbf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbfe:	60fb      	str	r3, [r7, #12]
 800dc00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dc02:	2300      	movs	r3, #0
 800dc04:	60bb      	str	r3, [r7, #8]
 800dc06:	4b15      	ldr	r3, [pc, #84]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800dc08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc0a:	4a14      	ldr	r2, [pc, #80]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800dc0c:	f043 0304 	orr.w	r3, r3, #4
 800dc10:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc12:	4b12      	ldr	r3, [pc, #72]	@ (800dc5c <HAL_SPI_MspInit+0x138>)
 800dc14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc16:	f003 0304 	and.w	r3, r3, #4
 800dc1a:	60bb      	str	r3, [r7, #8]
 800dc1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800dc1e:	238c      	movs	r3, #140	@ 0x8c
 800dc20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc22:	2302      	movs	r3, #2
 800dc24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc26:	2300      	movs	r3, #0
 800dc28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc2a:	2303      	movs	r3, #3
 800dc2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800dc2e:	2305      	movs	r3, #5
 800dc30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc32:	f107 031c 	add.w	r3, r7, #28
 800dc36:	4619      	mov	r1, r3
 800dc38:	480c      	ldr	r0, [pc, #48]	@ (800dc6c <HAL_SPI_MspInit+0x148>)
 800dc3a:	f000 fdab 	bl	800e794 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800dc3e:	2200      	movs	r2, #0
 800dc40:	2100      	movs	r1, #0
 800dc42:	2024      	movs	r0, #36	@ 0x24
 800dc44:	f000 fcdd 	bl	800e602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800dc48:	2024      	movs	r0, #36	@ 0x24
 800dc4a:	f000 fcf6 	bl	800e63a <HAL_NVIC_EnableIRQ>
}
 800dc4e:	bf00      	nop
 800dc50:	3730      	adds	r7, #48	@ 0x30
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	40013000 	.word	0x40013000
 800dc5c:	40023800 	.word	0x40023800
 800dc60:	40020000 	.word	0x40020000
 800dc64:	40020400 	.word	0x40020400
 800dc68:	40003800 	.word	0x40003800
 800dc6c:	40020800 	.word	0x40020800

0800dc70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b087      	sub	sp, #28
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a1f      	ldr	r2, [pc, #124]	@ (800dcfc <HAL_TIM_PWM_MspInit+0x8c>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d10e      	bne.n	800dca0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800dc82:	2300      	movs	r3, #0
 800dc84:	617b      	str	r3, [r7, #20]
 800dc86:	4b1e      	ldr	r3, [pc, #120]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dc88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc8a:	4a1d      	ldr	r2, [pc, #116]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dc8c:	f043 0301 	orr.w	r3, r3, #1
 800dc90:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc92:	4b1b      	ldr	r3, [pc, #108]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dc94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc96:	f003 0301 	and.w	r3, r3, #1
 800dc9a:	617b      	str	r3, [r7, #20]
 800dc9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800dc9e:	e026      	b.n	800dcee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a17      	ldr	r2, [pc, #92]	@ (800dd04 <HAL_TIM_PWM_MspInit+0x94>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d10e      	bne.n	800dcc8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800dcaa:	2300      	movs	r3, #0
 800dcac:	613b      	str	r3, [r7, #16]
 800dcae:	4b14      	ldr	r3, [pc, #80]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb2:	4a13      	ldr	r2, [pc, #76]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dcb4:	f043 0304 	orr.w	r3, r3, #4
 800dcb8:	6413      	str	r3, [r2, #64]	@ 0x40
 800dcba:	4b11      	ldr	r3, [pc, #68]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dcbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcbe:	f003 0304 	and.w	r3, r3, #4
 800dcc2:	613b      	str	r3, [r7, #16]
 800dcc4:	693b      	ldr	r3, [r7, #16]
}
 800dcc6:	e012      	b.n	800dcee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a0e      	ldr	r2, [pc, #56]	@ (800dd08 <HAL_TIM_PWM_MspInit+0x98>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d10d      	bne.n	800dcee <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60fb      	str	r3, [r7, #12]
 800dcd6:	4b0a      	ldr	r3, [pc, #40]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dcd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcda:	4a09      	ldr	r2, [pc, #36]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dcdc:	f043 0302 	orr.w	r3, r3, #2
 800dce0:	6453      	str	r3, [r2, #68]	@ 0x44
 800dce2:	4b07      	ldr	r3, [pc, #28]	@ (800dd00 <HAL_TIM_PWM_MspInit+0x90>)
 800dce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dce6:	f003 0302 	and.w	r3, r3, #2
 800dcea:	60fb      	str	r3, [r7, #12]
 800dcec:	68fb      	ldr	r3, [r7, #12]
}
 800dcee:	bf00      	nop
 800dcf0:	371c      	adds	r7, #28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	40010000 	.word	0x40010000
 800dd00:	40023800 	.word	0x40023800
 800dd04:	40000800 	.word	0x40000800
 800dd08:	40010400 	.word	0x40010400

0800dd0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd1c:	d116      	bne.n	800dd4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800dd1e:	2300      	movs	r3, #0
 800dd20:	60fb      	str	r3, [r7, #12]
 800dd22:	4b1a      	ldr	r3, [pc, #104]	@ (800dd8c <HAL_TIM_Base_MspInit+0x80>)
 800dd24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd26:	4a19      	ldr	r2, [pc, #100]	@ (800dd8c <HAL_TIM_Base_MspInit+0x80>)
 800dd28:	f043 0301 	orr.w	r3, r3, #1
 800dd2c:	6413      	str	r3, [r2, #64]	@ 0x40
 800dd2e:	4b17      	ldr	r3, [pc, #92]	@ (800dd8c <HAL_TIM_Base_MspInit+0x80>)
 800dd30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	201c      	movs	r0, #28
 800dd40:	f000 fc5f 	bl	800e602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800dd44:	201c      	movs	r0, #28
 800dd46:	f000 fc78 	bl	800e63a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800dd4a:	e01a      	b.n	800dd82 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a0f      	ldr	r2, [pc, #60]	@ (800dd90 <HAL_TIM_Base_MspInit+0x84>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d115      	bne.n	800dd82 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800dd56:	2300      	movs	r3, #0
 800dd58:	60bb      	str	r3, [r7, #8]
 800dd5a:	4b0c      	ldr	r3, [pc, #48]	@ (800dd8c <HAL_TIM_Base_MspInit+0x80>)
 800dd5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd5e:	4a0b      	ldr	r2, [pc, #44]	@ (800dd8c <HAL_TIM_Base_MspInit+0x80>)
 800dd60:	f043 0310 	orr.w	r3, r3, #16
 800dd64:	6413      	str	r3, [r2, #64]	@ 0x40
 800dd66:	4b09      	ldr	r3, [pc, #36]	@ (800dd8c <HAL_TIM_Base_MspInit+0x80>)
 800dd68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd6a:	f003 0310 	and.w	r3, r3, #16
 800dd6e:	60bb      	str	r3, [r7, #8]
 800dd70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800dd72:	2200      	movs	r2, #0
 800dd74:	2100      	movs	r1, #0
 800dd76:	2036      	movs	r0, #54	@ 0x36
 800dd78:	f000 fc43 	bl	800e602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800dd7c:	2036      	movs	r0, #54	@ 0x36
 800dd7e:	f000 fc5c 	bl	800e63a <HAL_NVIC_EnableIRQ>
}
 800dd82:	bf00      	nop
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	40023800 	.word	0x40023800
 800dd90:	40001000 	.word	0x40001000

0800dd94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b08c      	sub	sp, #48	@ 0x30
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd9c:	f107 031c 	add.w	r3, r7, #28
 800dda0:	2200      	movs	r2, #0
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	605a      	str	r2, [r3, #4]
 800dda6:	609a      	str	r2, [r3, #8]
 800dda8:	60da      	str	r2, [r3, #12]
 800ddaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a49      	ldr	r2, [pc, #292]	@ (800ded8 <HAL_TIM_MspPostInit+0x144>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d11f      	bne.n	800ddf6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	61bb      	str	r3, [r7, #24]
 800ddba:	4b48      	ldr	r3, [pc, #288]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800ddbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddbe:	4a47      	ldr	r2, [pc, #284]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800ddc0:	f043 0302 	orr.w	r3, r3, #2
 800ddc4:	6313      	str	r3, [r2, #48]	@ 0x30
 800ddc6:	4b45      	ldr	r3, [pc, #276]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800ddc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddca:	f003 0302 	and.w	r3, r3, #2
 800ddce:	61bb      	str	r3, [r7, #24]
 800ddd0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800ddd2:	f248 0301 	movw	r3, #32769	@ 0x8001
 800ddd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddd8:	2302      	movs	r3, #2
 800ddda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dddc:	2300      	movs	r3, #0
 800ddde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dde0:	2300      	movs	r3, #0
 800dde2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800dde4:	2301      	movs	r3, #1
 800dde6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dde8:	f107 031c 	add.w	r3, r7, #28
 800ddec:	4619      	mov	r1, r3
 800ddee:	483c      	ldr	r0, [pc, #240]	@ (800dee0 <HAL_TIM_MspPostInit+0x14c>)
 800ddf0:	f000 fcd0 	bl	800e794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ddf4:	e06c      	b.n	800ded0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ddfe:	d11f      	bne.n	800de40 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de00:	2300      	movs	r3, #0
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	4b35      	ldr	r3, [pc, #212]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800de06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de08:	4a34      	ldr	r2, [pc, #208]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800de0a:	f043 0301 	orr.w	r3, r3, #1
 800de0e:	6313      	str	r3, [r2, #48]	@ 0x30
 800de10:	4b32      	ldr	r3, [pc, #200]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800de12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	617b      	str	r3, [r7, #20]
 800de1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800de1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de22:	2302      	movs	r3, #2
 800de24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de26:	2300      	movs	r3, #0
 800de28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de2a:	2300      	movs	r3, #0
 800de2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800de2e:	2301      	movs	r3, #1
 800de30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de32:	f107 031c 	add.w	r3, r7, #28
 800de36:	4619      	mov	r1, r3
 800de38:	482a      	ldr	r0, [pc, #168]	@ (800dee4 <HAL_TIM_MspPostInit+0x150>)
 800de3a:	f000 fcab 	bl	800e794 <HAL_GPIO_Init>
}
 800de3e:	e047      	b.n	800ded0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a28      	ldr	r2, [pc, #160]	@ (800dee8 <HAL_TIM_MspPostInit+0x154>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d11e      	bne.n	800de88 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de4a:	2300      	movs	r3, #0
 800de4c:	613b      	str	r3, [r7, #16]
 800de4e:	4b23      	ldr	r3, [pc, #140]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800de50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de52:	4a22      	ldr	r2, [pc, #136]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800de54:	f043 0302 	orr.w	r3, r3, #2
 800de58:	6313      	str	r3, [r2, #48]	@ 0x30
 800de5a:	4b20      	ldr	r3, [pc, #128]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800de5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de5e:	f003 0302 	and.w	r3, r3, #2
 800de62:	613b      	str	r3, [r7, #16]
 800de64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800de66:	2380      	movs	r3, #128	@ 0x80
 800de68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de6a:	2302      	movs	r3, #2
 800de6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de6e:	2300      	movs	r3, #0
 800de70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de72:	2300      	movs	r3, #0
 800de74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800de76:	2302      	movs	r3, #2
 800de78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de7a:	f107 031c 	add.w	r3, r7, #28
 800de7e:	4619      	mov	r1, r3
 800de80:	4817      	ldr	r0, [pc, #92]	@ (800dee0 <HAL_TIM_MspPostInit+0x14c>)
 800de82:	f000 fc87 	bl	800e794 <HAL_GPIO_Init>
}
 800de86:	e023      	b.n	800ded0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a17      	ldr	r2, [pc, #92]	@ (800deec <HAL_TIM_MspPostInit+0x158>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d11e      	bne.n	800ded0 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de92:	2300      	movs	r3, #0
 800de94:	60fb      	str	r3, [r7, #12]
 800de96:	4b11      	ldr	r3, [pc, #68]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800de98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de9a:	4a10      	ldr	r2, [pc, #64]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800de9c:	f043 0302 	orr.w	r3, r3, #2
 800dea0:	6313      	str	r3, [r2, #48]	@ 0x30
 800dea2:	4b0e      	ldr	r3, [pc, #56]	@ (800dedc <HAL_TIM_MspPostInit+0x148>)
 800dea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dea6:	f003 0302 	and.w	r3, r3, #2
 800deaa:	60fb      	str	r3, [r7, #12]
 800deac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800deae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800deb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deb4:	2302      	movs	r3, #2
 800deb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deb8:	2300      	movs	r3, #0
 800deba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800debc:	2300      	movs	r3, #0
 800debe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800dec0:	2303      	movs	r3, #3
 800dec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dec4:	f107 031c 	add.w	r3, r7, #28
 800dec8:	4619      	mov	r1, r3
 800deca:	4805      	ldr	r0, [pc, #20]	@ (800dee0 <HAL_TIM_MspPostInit+0x14c>)
 800decc:	f000 fc62 	bl	800e794 <HAL_GPIO_Init>
}
 800ded0:	bf00      	nop
 800ded2:	3730      	adds	r7, #48	@ 0x30
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	40010000 	.word	0x40010000
 800dedc:	40023800 	.word	0x40023800
 800dee0:	40020400 	.word	0x40020400
 800dee4:	40020000 	.word	0x40020000
 800dee8:	40000800 	.word	0x40000800
 800deec:	40010400 	.word	0x40010400

0800def0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b08c      	sub	sp, #48	@ 0x30
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800def8:	f107 031c 	add.w	r3, r7, #28
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	605a      	str	r2, [r3, #4]
 800df02:	609a      	str	r2, [r3, #8]
 800df04:	60da      	str	r2, [r3, #12]
 800df06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a49      	ldr	r2, [pc, #292]	@ (800e034 <HAL_UART_MspInit+0x144>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d134      	bne.n	800df7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800df12:	2300      	movs	r3, #0
 800df14:	61bb      	str	r3, [r7, #24]
 800df16:	4b48      	ldr	r3, [pc, #288]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df1a:	4a47      	ldr	r2, [pc, #284]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df20:	6413      	str	r3, [r2, #64]	@ 0x40
 800df22:	4b45      	ldr	r3, [pc, #276]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df2a:	61bb      	str	r3, [r7, #24]
 800df2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df2e:	2300      	movs	r3, #0
 800df30:	617b      	str	r3, [r7, #20]
 800df32:	4b41      	ldr	r3, [pc, #260]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df36:	4a40      	ldr	r2, [pc, #256]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df38:	f043 0301 	orr.w	r3, r3, #1
 800df3c:	6313      	str	r3, [r2, #48]	@ 0x30
 800df3e:	4b3e      	ldr	r3, [pc, #248]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df42:	f003 0301 	and.w	r3, r3, #1
 800df46:	617b      	str	r3, [r7, #20]
 800df48:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800df4a:	230c      	movs	r3, #12
 800df4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df4e:	2302      	movs	r3, #2
 800df50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df52:	2300      	movs	r3, #0
 800df54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df56:	2303      	movs	r3, #3
 800df58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800df5a:	2307      	movs	r3, #7
 800df5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df5e:	f107 031c 	add.w	r3, r7, #28
 800df62:	4619      	mov	r1, r3
 800df64:	4835      	ldr	r0, [pc, #212]	@ (800e03c <HAL_UART_MspInit+0x14c>)
 800df66:	f000 fc15 	bl	800e794 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800df6a:	2200      	movs	r2, #0
 800df6c:	2100      	movs	r1, #0
 800df6e:	2026      	movs	r0, #38	@ 0x26
 800df70:	f000 fb47 	bl	800e602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800df74:	2026      	movs	r0, #38	@ 0x26
 800df76:	f000 fb60 	bl	800e63a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800df7a:	e057      	b.n	800e02c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a2f      	ldr	r2, [pc, #188]	@ (800e040 <HAL_UART_MspInit+0x150>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d152      	bne.n	800e02c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800df86:	2300      	movs	r3, #0
 800df88:	613b      	str	r3, [r7, #16]
 800df8a:	4b2b      	ldr	r3, [pc, #172]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df8e:	4a2a      	ldr	r2, [pc, #168]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800df94:	6413      	str	r3, [r2, #64]	@ 0x40
 800df96:	4b28      	ldr	r3, [pc, #160]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800df98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800df9e:	613b      	str	r3, [r7, #16]
 800dfa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60fb      	str	r3, [r7, #12]
 800dfa6:	4b24      	ldr	r3, [pc, #144]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800dfa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfaa:	4a23      	ldr	r2, [pc, #140]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800dfac:	f043 0304 	orr.w	r3, r3, #4
 800dfb0:	6313      	str	r3, [r2, #48]	@ 0x30
 800dfb2:	4b21      	ldr	r3, [pc, #132]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800dfb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfb6:	f003 0304 	and.w	r3, r3, #4
 800dfba:	60fb      	str	r3, [r7, #12]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	60bb      	str	r3, [r7, #8]
 800dfc2:	4b1d      	ldr	r3, [pc, #116]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800dfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc6:	4a1c      	ldr	r2, [pc, #112]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800dfc8:	f043 0302 	orr.w	r3, r3, #2
 800dfcc:	6313      	str	r3, [r2, #48]	@ 0x30
 800dfce:	4b1a      	ldr	r3, [pc, #104]	@ (800e038 <HAL_UART_MspInit+0x148>)
 800dfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfd2:	f003 0302 	and.w	r3, r3, #2
 800dfd6:	60bb      	str	r3, [r7, #8]
 800dfd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dfda:	2320      	movs	r3, #32
 800dfdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfde:	2302      	movs	r3, #2
 800dfe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfe6:	2303      	movs	r3, #3
 800dfe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800dfea:	2307      	movs	r3, #7
 800dfec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dfee:	f107 031c 	add.w	r3, r7, #28
 800dff2:	4619      	mov	r1, r3
 800dff4:	4813      	ldr	r0, [pc, #76]	@ (800e044 <HAL_UART_MspInit+0x154>)
 800dff6:	f000 fbcd 	bl	800e794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800dffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e000:	2302      	movs	r3, #2
 800e002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e004:	2300      	movs	r3, #0
 800e006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e008:	2303      	movs	r3, #3
 800e00a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e00c:	2307      	movs	r3, #7
 800e00e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e010:	f107 031c 	add.w	r3, r7, #28
 800e014:	4619      	mov	r1, r3
 800e016:	480c      	ldr	r0, [pc, #48]	@ (800e048 <HAL_UART_MspInit+0x158>)
 800e018:	f000 fbbc 	bl	800e794 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800e01c:	2200      	movs	r2, #0
 800e01e:	2100      	movs	r1, #0
 800e020:	2027      	movs	r0, #39	@ 0x27
 800e022:	f000 faee 	bl	800e602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e026:	2027      	movs	r0, #39	@ 0x27
 800e028:	f000 fb07 	bl	800e63a <HAL_NVIC_EnableIRQ>
}
 800e02c:	bf00      	nop
 800e02e:	3730      	adds	r7, #48	@ 0x30
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	40004400 	.word	0x40004400
 800e038:	40023800 	.word	0x40023800
 800e03c:	40020000 	.word	0x40020000
 800e040:	40004800 	.word	0x40004800
 800e044:	40020800 	.word	0x40020800
 800e048:	40020400 	.word	0x40020400

0800e04c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e04c:	b480      	push	{r7}
 800e04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e050:	bf00      	nop
 800e052:	e7fd      	b.n	800e050 <NMI_Handler+0x4>

0800e054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e054:	b480      	push	{r7}
 800e056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e058:	bf00      	nop
 800e05a:	e7fd      	b.n	800e058 <HardFault_Handler+0x4>

0800e05c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e05c:	b480      	push	{r7}
 800e05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e060:	bf00      	nop
 800e062:	e7fd      	b.n	800e060 <MemManage_Handler+0x4>

0800e064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e064:	b480      	push	{r7}
 800e066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e068:	bf00      	nop
 800e06a:	e7fd      	b.n	800e068 <BusFault_Handler+0x4>

0800e06c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e06c:	b480      	push	{r7}
 800e06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e070:	bf00      	nop
 800e072:	e7fd      	b.n	800e070 <UsageFault_Handler+0x4>

0800e074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e074:	b480      	push	{r7}
 800e076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e078:	bf00      	nop
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e082:	b480      	push	{r7}
 800e084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e086:	bf00      	nop
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e090:	b480      	push	{r7}
 800e092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e094:	bf00      	nop
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e0a2:	f000 f98f 	bl	800e3c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e0a6:	bf00      	nop
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800e0ae:	2001      	movs	r0, #1
 800e0b0:	f000 fd1e 	bl	800eaf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800e0b4:	bf00      	nop
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800e0bc:	4802      	ldr	r0, [pc, #8]	@ (800e0c8 <TIM2_IRQHandler+0x10>)
 800e0be:	f002 fb30 	bl	8010722 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800e0c2:	bf00      	nop
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	200003ac 	.word	0x200003ac

0800e0cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800e0d0:	4802      	ldr	r0, [pc, #8]	@ (800e0dc <SPI2_IRQHandler+0x10>)
 800e0d2:	f001 ffd5 	bl	8010080 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800e0d6:	bf00      	nop
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	2000030c 	.word	0x2000030c

0800e0e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800e0e4:	4802      	ldr	r0, [pc, #8]	@ (800e0f0 <USART2_IRQHandler+0x10>)
 800e0e6:	f003 fab3 	bl	8011650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800e0ea:	bf00      	nop
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	200004cc 	.word	0x200004cc

0800e0f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e0f8:	4802      	ldr	r0, [pc, #8]	@ (800e104 <USART3_IRQHandler+0x10>)
 800e0fa:	f003 faa9 	bl	8011650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800e0fe:	bf00      	nop
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	20000510 	.word	0x20000510

0800e108 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800e10c:	4802      	ldr	r0, [pc, #8]	@ (800e118 <TIM6_DAC_IRQHandler+0x10>)
 800e10e:	f002 fb08 	bl	8010722 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e112:	bf00      	nop
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	2000043c 	.word	0x2000043c

0800e11c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e11c:	b480      	push	{r7}
 800e11e:	af00      	add	r7, sp, #0
  return 1;
 800e120:	2301      	movs	r3, #1
}
 800e122:	4618      	mov	r0, r3
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <_kill>:

int _kill(int pid, int sig)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e136:	f006 ffbf 	bl	80150b8 <__errno>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2216      	movs	r2, #22
 800e13e:	601a      	str	r2, [r3, #0]
  return -1;
 800e140:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e144:	4618      	mov	r0, r3
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <_exit>:

void _exit (int status)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e154:	f04f 31ff 	mov.w	r1, #4294967295
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7ff ffe7 	bl	800e12c <_kill>
  while (1) {}    /* Make sure we hang here */
 800e15e:	bf00      	nop
 800e160:	e7fd      	b.n	800e15e <_exit+0x12>

0800e162 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b086      	sub	sp, #24
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	60b9      	str	r1, [r7, #8]
 800e16c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e16e:	2300      	movs	r3, #0
 800e170:	617b      	str	r3, [r7, #20]
 800e172:	e00a      	b.n	800e18a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e174:	f3af 8000 	nop.w
 800e178:	4601      	mov	r1, r0
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	1c5a      	adds	r2, r3, #1
 800e17e:	60ba      	str	r2, [r7, #8]
 800e180:	b2ca      	uxtb	r2, r1
 800e182:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	3301      	adds	r3, #1
 800e188:	617b      	str	r3, [r7, #20]
 800e18a:	697a      	ldr	r2, [r7, #20]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	429a      	cmp	r2, r3
 800e190:	dbf0      	blt.n	800e174 <_read+0x12>
  }

  return len;
 800e192:	687b      	ldr	r3, [r7, #4]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3718      	adds	r7, #24
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b086      	sub	sp, #24
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	617b      	str	r3, [r7, #20]
 800e1ac:	e009      	b.n	800e1c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	1c5a      	adds	r2, r3, #1
 800e1b2:	60ba      	str	r2, [r7, #8]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	617b      	str	r3, [r7, #20]
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	dbf1      	blt.n	800e1ae <_write+0x12>
  }
  return len;
 800e1ca:	687b      	ldr	r3, [r7, #4]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_close>:

int _close(int file)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e1dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e1fc:	605a      	str	r2, [r3, #4]
  return 0;
 800e1fe:	2300      	movs	r3, #0
}
 800e200:	4618      	mov	r0, r3
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <_isatty>:

int _isatty(int file)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e214:	2301      	movs	r3, #1
}
 800e216:	4618      	mov	r0, r3
 800e218:	370c      	adds	r7, #12
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr

0800e222 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e222:	b480      	push	{r7}
 800e224:	b085      	sub	sp, #20
 800e226:	af00      	add	r7, sp, #0
 800e228:	60f8      	str	r0, [r7, #12]
 800e22a:	60b9      	str	r1, [r7, #8]
 800e22c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e244:	4a14      	ldr	r2, [pc, #80]	@ (800e298 <_sbrk+0x5c>)
 800e246:	4b15      	ldr	r3, [pc, #84]	@ (800e29c <_sbrk+0x60>)
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e250:	4b13      	ldr	r3, [pc, #76]	@ (800e2a0 <_sbrk+0x64>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d102      	bne.n	800e25e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e258:	4b11      	ldr	r3, [pc, #68]	@ (800e2a0 <_sbrk+0x64>)
 800e25a:	4a12      	ldr	r2, [pc, #72]	@ (800e2a4 <_sbrk+0x68>)
 800e25c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e25e:	4b10      	ldr	r3, [pc, #64]	@ (800e2a0 <_sbrk+0x64>)
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4413      	add	r3, r2
 800e266:	693a      	ldr	r2, [r7, #16]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d207      	bcs.n	800e27c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e26c:	f006 ff24 	bl	80150b8 <__errno>
 800e270:	4603      	mov	r3, r0
 800e272:	220c      	movs	r2, #12
 800e274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e276:	f04f 33ff 	mov.w	r3, #4294967295
 800e27a:	e009      	b.n	800e290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e27c:	4b08      	ldr	r3, [pc, #32]	@ (800e2a0 <_sbrk+0x64>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e282:	4b07      	ldr	r3, [pc, #28]	@ (800e2a0 <_sbrk+0x64>)
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	4413      	add	r3, r2
 800e28a:	4a05      	ldr	r2, [pc, #20]	@ (800e2a0 <_sbrk+0x64>)
 800e28c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e28e:	68fb      	ldr	r3, [r7, #12]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3718      	adds	r7, #24
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20020000 	.word	0x20020000
 800e29c:	00000400 	.word	0x00000400
 800e2a0:	20000560 	.word	0x20000560
 800e2a4:	200006c8 	.word	0x200006c8

0800e2a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e2ac:	4b06      	ldr	r3, [pc, #24]	@ (800e2c8 <SystemInit+0x20>)
 800e2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2b2:	4a05      	ldr	r2, [pc, #20]	@ (800e2c8 <SystemInit+0x20>)
 800e2b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e2b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e2bc:	bf00      	nop
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	e000ed00 	.word	0xe000ed00

0800e2cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	;  ldr   sp, =_estack      /* set stack pointer */
 800e2cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800e304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e2d0:	480d      	ldr	r0, [pc, #52]	@ (800e308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e2d2:	490e      	ldr	r1, [pc, #56]	@ (800e30c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e2d4:	4a0e      	ldr	r2, [pc, #56]	@ (800e310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e2d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e2d8:	e002      	b.n	800e2e0 <LoopCopyDataInit>

0800e2da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e2da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e2dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e2de:	3304      	adds	r3, #4

0800e2e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e2e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e2e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e2e4:	d3f9      	bcc.n	800e2da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e2e6:	4a0b      	ldr	r2, [pc, #44]	@ (800e314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e2e8:	4c0b      	ldr	r4, [pc, #44]	@ (800e318 <LoopFillZerobss+0x26>)
  movs r3, #0
 800e2ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e2ec:	e001      	b.n	800e2f2 <LoopFillZerobss>

0800e2ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e2ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e2f0:	3204      	adds	r2, #4

0800e2f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e2f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e2f4:	d3fb      	bcc.n	800e2ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e2f6:	f7ff ffd7 	bl	800e2a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e2fa:	f006 fee3 	bl	80150c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e2fe:	f7fe fe13 	bl	800cf28 <main>
  bx  lr    
 800e302:	4770      	bx	lr
	;  ldr   sp, =_estack      /* set stack pointer */
 800e304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e30c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800e310:	0801a624 	.word	0x0801a624
  ldr r2, =_sbss
 800e314:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800e318:	200006c4 	.word	0x200006c4

0800e31c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e31c:	e7fe      	b.n	800e31c <ADC_IRQHandler>
	...

0800e320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e324:	4b0e      	ldr	r3, [pc, #56]	@ (800e360 <HAL_Init+0x40>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a0d      	ldr	r2, [pc, #52]	@ (800e360 <HAL_Init+0x40>)
 800e32a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e32e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e330:	4b0b      	ldr	r3, [pc, #44]	@ (800e360 <HAL_Init+0x40>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a0a      	ldr	r2, [pc, #40]	@ (800e360 <HAL_Init+0x40>)
 800e336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e33a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e33c:	4b08      	ldr	r3, [pc, #32]	@ (800e360 <HAL_Init+0x40>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a07      	ldr	r2, [pc, #28]	@ (800e360 <HAL_Init+0x40>)
 800e342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e348:	2003      	movs	r0, #3
 800e34a:	f000 f94f 	bl	800e5ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e34e:	2000      	movs	r0, #0
 800e350:	f000 f808 	bl	800e364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e354:	f7ff fbbe 	bl	800dad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	40023c00 	.word	0x40023c00

0800e364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e36c:	4b12      	ldr	r3, [pc, #72]	@ (800e3b8 <HAL_InitTick+0x54>)
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	4b12      	ldr	r3, [pc, #72]	@ (800e3bc <HAL_InitTick+0x58>)
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	4619      	mov	r1, r3
 800e376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e37a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e382:	4618      	mov	r0, r3
 800e384:	f000 f967 	bl	800e656 <HAL_SYSTICK_Config>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d001      	beq.n	800e392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e38e:	2301      	movs	r3, #1
 800e390:	e00e      	b.n	800e3b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2b0f      	cmp	r3, #15
 800e396:	d80a      	bhi.n	800e3ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e398:	2200      	movs	r2, #0
 800e39a:	6879      	ldr	r1, [r7, #4]
 800e39c:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a0:	f000 f92f 	bl	800e602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e3a4:	4a06      	ldr	r2, [pc, #24]	@ (800e3c0 <HAL_InitTick+0x5c>)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	e000      	b.n	800e3b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e3ae:	2301      	movs	r3, #1
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	20000008 	.word	0x20000008
 800e3bc:	20000010 	.word	0x20000010
 800e3c0:	2000000c 	.word	0x2000000c

0800e3c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e3c8:	4b06      	ldr	r3, [pc, #24]	@ (800e3e4 <HAL_IncTick+0x20>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	4b06      	ldr	r3, [pc, #24]	@ (800e3e8 <HAL_IncTick+0x24>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	4a04      	ldr	r2, [pc, #16]	@ (800e3e8 <HAL_IncTick+0x24>)
 800e3d6:	6013      	str	r3, [r2, #0]
}
 800e3d8:	bf00      	nop
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	20000010 	.word	0x20000010
 800e3e8:	20000564 	.word	0x20000564

0800e3ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	af00      	add	r7, sp, #0
  return uwTick;
 800e3f0:	4b03      	ldr	r3, [pc, #12]	@ (800e400 <HAL_GetTick+0x14>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop
 800e400:	20000564 	.word	0x20000564

0800e404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e40c:	f7ff ffee 	bl	800e3ec <HAL_GetTick>
 800e410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e41c:	d005      	beq.n	800e42a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e41e:	4b0a      	ldr	r3, [pc, #40]	@ (800e448 <HAL_Delay+0x44>)
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	461a      	mov	r2, r3
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	4413      	add	r3, r2
 800e428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e42a:	bf00      	nop
 800e42c:	f7ff ffde 	bl	800e3ec <HAL_GetTick>
 800e430:	4602      	mov	r2, r0
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	1ad3      	subs	r3, r2, r3
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d8f7      	bhi.n	800e42c <HAL_Delay+0x28>
  {
  }
}
 800e43c:	bf00      	nop
 800e43e:	bf00      	nop
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20000010 	.word	0x20000010

0800e44c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f003 0307 	and.w	r3, r3, #7
 800e45a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e45c:	4b0c      	ldr	r3, [pc, #48]	@ (800e490 <__NVIC_SetPriorityGrouping+0x44>)
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800e468:	4013      	ands	r3, r2
 800e46a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e474:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800e478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e47c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e47e:	4a04      	ldr	r2, [pc, #16]	@ (800e490 <__NVIC_SetPriorityGrouping+0x44>)
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	60d3      	str	r3, [r2, #12]
}
 800e484:	bf00      	nop
 800e486:	3714      	adds	r7, #20
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr
 800e490:	e000ed00 	.word	0xe000ed00

0800e494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e494:	b480      	push	{r7}
 800e496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e498:	4b04      	ldr	r3, [pc, #16]	@ (800e4ac <__NVIC_GetPriorityGrouping+0x18>)
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	0a1b      	lsrs	r3, r3, #8
 800e49e:	f003 0307 	and.w	r3, r3, #7
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	e000ed00 	.word	0xe000ed00

0800e4b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e4ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	db0b      	blt.n	800e4da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
 800e4c4:	f003 021f 	and.w	r2, r3, #31
 800e4c8:	4907      	ldr	r1, [pc, #28]	@ (800e4e8 <__NVIC_EnableIRQ+0x38>)
 800e4ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4ce:	095b      	lsrs	r3, r3, #5
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	fa00 f202 	lsl.w	r2, r0, r2
 800e4d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e4da:	bf00      	nop
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop
 800e4e8:	e000e100 	.word	0xe000e100

0800e4ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	6039      	str	r1, [r7, #0]
 800e4f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e4f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	db0a      	blt.n	800e516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	b2da      	uxtb	r2, r3
 800e504:	490c      	ldr	r1, [pc, #48]	@ (800e538 <__NVIC_SetPriority+0x4c>)
 800e506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e50a:	0112      	lsls	r2, r2, #4
 800e50c:	b2d2      	uxtb	r2, r2
 800e50e:	440b      	add	r3, r1
 800e510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e514:	e00a      	b.n	800e52c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	4908      	ldr	r1, [pc, #32]	@ (800e53c <__NVIC_SetPriority+0x50>)
 800e51c:	79fb      	ldrb	r3, [r7, #7]
 800e51e:	f003 030f 	and.w	r3, r3, #15
 800e522:	3b04      	subs	r3, #4
 800e524:	0112      	lsls	r2, r2, #4
 800e526:	b2d2      	uxtb	r2, r2
 800e528:	440b      	add	r3, r1
 800e52a:	761a      	strb	r2, [r3, #24]
}
 800e52c:	bf00      	nop
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	e000e100 	.word	0xe000e100
 800e53c:	e000ed00 	.word	0xe000ed00

0800e540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e540:	b480      	push	{r7}
 800e542:	b089      	sub	sp, #36	@ 0x24
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f003 0307 	and.w	r3, r3, #7
 800e552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	f1c3 0307 	rsb	r3, r3, #7
 800e55a:	2b04      	cmp	r3, #4
 800e55c:	bf28      	it	cs
 800e55e:	2304      	movcs	r3, #4
 800e560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	3304      	adds	r3, #4
 800e566:	2b06      	cmp	r3, #6
 800e568:	d902      	bls.n	800e570 <NVIC_EncodePriority+0x30>
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	3b03      	subs	r3, #3
 800e56e:	e000      	b.n	800e572 <NVIC_EncodePriority+0x32>
 800e570:	2300      	movs	r3, #0
 800e572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e574:	f04f 32ff 	mov.w	r2, #4294967295
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	fa02 f303 	lsl.w	r3, r2, r3
 800e57e:	43da      	mvns	r2, r3
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	401a      	ands	r2, r3
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e588:	f04f 31ff 	mov.w	r1, #4294967295
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	fa01 f303 	lsl.w	r3, r1, r3
 800e592:	43d9      	mvns	r1, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e598:	4313      	orrs	r3, r2
         );
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3724      	adds	r7, #36	@ 0x24
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
	...

0800e5a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3b01      	subs	r3, #1
 800e5b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5b8:	d301      	bcc.n	800e5be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e00f      	b.n	800e5de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e5be:	4a0a      	ldr	r2, [pc, #40]	@ (800e5e8 <SysTick_Config+0x40>)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e5c6:	210f      	movs	r1, #15
 800e5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5cc:	f7ff ff8e 	bl	800e4ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e5d0:	4b05      	ldr	r3, [pc, #20]	@ (800e5e8 <SysTick_Config+0x40>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e5d6:	4b04      	ldr	r3, [pc, #16]	@ (800e5e8 <SysTick_Config+0x40>)
 800e5d8:	2207      	movs	r2, #7
 800e5da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	e000e010 	.word	0xe000e010

0800e5ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7ff ff29 	bl	800e44c <__NVIC_SetPriorityGrouping>
}
 800e5fa:	bf00      	nop
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e602:	b580      	push	{r7, lr}
 800e604:	b086      	sub	sp, #24
 800e606:	af00      	add	r7, sp, #0
 800e608:	4603      	mov	r3, r0
 800e60a:	60b9      	str	r1, [r7, #8]
 800e60c:	607a      	str	r2, [r7, #4]
 800e60e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e610:	2300      	movs	r3, #0
 800e612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e614:	f7ff ff3e 	bl	800e494 <__NVIC_GetPriorityGrouping>
 800e618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	68b9      	ldr	r1, [r7, #8]
 800e61e:	6978      	ldr	r0, [r7, #20]
 800e620:	f7ff ff8e 	bl	800e540 <NVIC_EncodePriority>
 800e624:	4602      	mov	r2, r0
 800e626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e62a:	4611      	mov	r1, r2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff ff5d 	bl	800e4ec <__NVIC_SetPriority>
}
 800e632:	bf00      	nop
 800e634:	3718      	adds	r7, #24
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b082      	sub	sp, #8
 800e63e:	af00      	add	r7, sp, #0
 800e640:	4603      	mov	r3, r0
 800e642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e648:	4618      	mov	r0, r3
 800e64a:	f7ff ff31 	bl	800e4b0 <__NVIC_EnableIRQ>
}
 800e64e:	bf00      	nop
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b082      	sub	sp, #8
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f7ff ffa2 	bl	800e5a8 <SysTick_Config>
 800e664:	4603      	mov	r3, r0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3708      	adds	r7, #8
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}

0800e66e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e66e:	b580      	push	{r7, lr}
 800e670:	b084      	sub	sp, #16
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e67a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e67c:	f7ff feb6 	bl	800e3ec <HAL_GetTick>
 800e680:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	d008      	beq.n	800e6a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2280      	movs	r2, #128	@ 0x80
 800e692:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800e69c:	2301      	movs	r3, #1
 800e69e:	e052      	b.n	800e746 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f022 0216 	bic.w	r2, r2, #22
 800e6ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	695a      	ldr	r2, [r3, #20]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e6be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d103      	bne.n	800e6d0 <HAL_DMA_Abort+0x62>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d007      	beq.n	800e6e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f022 0208 	bic.w	r2, r2, #8
 800e6de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f022 0201 	bic.w	r2, r2, #1
 800e6ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e6f0:	e013      	b.n	800e71a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e6f2:	f7ff fe7b 	bl	800e3ec <HAL_GetTick>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	1ad3      	subs	r3, r2, r3
 800e6fc:	2b05      	cmp	r3, #5
 800e6fe:	d90c      	bls.n	800e71a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2220      	movs	r2, #32
 800e704:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2203      	movs	r2, #3
 800e70a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800e716:	2303      	movs	r3, #3
 800e718:	e015      	b.n	800e746 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f003 0301 	and.w	r3, r3, #1
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1e4      	bne.n	800e6f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e72c:	223f      	movs	r2, #63	@ 0x3f
 800e72e:	409a      	lsls	r2, r3
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3710      	adds	r7, #16
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e74e:	b480      	push	{r7}
 800e750:	b083      	sub	sp, #12
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	2b02      	cmp	r3, #2
 800e760:	d004      	beq.n	800e76c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2280      	movs	r2, #128	@ 0x80
 800e766:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800e768:	2301      	movs	r3, #1
 800e76a:	e00c      	b.n	800e786 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2205      	movs	r2, #5
 800e770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f022 0201 	bic.w	r2, r2, #1
 800e782:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	370c      	adds	r7, #12
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
	...

0800e794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e794:	b480      	push	{r7}
 800e796:	b089      	sub	sp, #36	@ 0x24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	61fb      	str	r3, [r7, #28]
 800e7ae:	e165      	b.n	800ea7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	4013      	ands	r3, r2
 800e7c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	f040 8154 	bne.w	800ea76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	f003 0303 	and.w	r3, r3, #3
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d005      	beq.n	800e7e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d130      	bne.n	800e848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	005b      	lsls	r3, r3, #1
 800e7f0:	2203      	movs	r2, #3
 800e7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e7f6:	43db      	mvns	r3, r3
 800e7f8:	69ba      	ldr	r2, [r7, #24]
 800e7fa:	4013      	ands	r3, r2
 800e7fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	68da      	ldr	r2, [r3, #12]
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	fa02 f303 	lsl.w	r3, r2, r3
 800e80a:	69ba      	ldr	r2, [r7, #24]
 800e80c:	4313      	orrs	r3, r2
 800e80e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	69ba      	ldr	r2, [r7, #24]
 800e814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e81c:	2201      	movs	r2, #1
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	fa02 f303 	lsl.w	r3, r2, r3
 800e824:	43db      	mvns	r3, r3
 800e826:	69ba      	ldr	r2, [r7, #24]
 800e828:	4013      	ands	r3, r2
 800e82a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	091b      	lsrs	r3, r3, #4
 800e832:	f003 0201 	and.w	r2, r3, #1
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	fa02 f303 	lsl.w	r3, r2, r3
 800e83c:	69ba      	ldr	r2, [r7, #24]
 800e83e:	4313      	orrs	r3, r2
 800e840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	69ba      	ldr	r2, [r7, #24]
 800e846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	f003 0303 	and.w	r3, r3, #3
 800e850:	2b03      	cmp	r3, #3
 800e852:	d017      	beq.n	800e884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	005b      	lsls	r3, r3, #1
 800e85e:	2203      	movs	r2, #3
 800e860:	fa02 f303 	lsl.w	r3, r2, r3
 800e864:	43db      	mvns	r3, r3
 800e866:	69ba      	ldr	r2, [r7, #24]
 800e868:	4013      	ands	r3, r2
 800e86a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	689a      	ldr	r2, [r3, #8]
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	fa02 f303 	lsl.w	r3, r2, r3
 800e878:	69ba      	ldr	r2, [r7, #24]
 800e87a:	4313      	orrs	r3, r2
 800e87c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	69ba      	ldr	r2, [r7, #24]
 800e882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	f003 0303 	and.w	r3, r3, #3
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d123      	bne.n	800e8d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	08da      	lsrs	r2, r3, #3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	3208      	adds	r2, #8
 800e898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e89c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	f003 0307 	and.w	r3, r3, #7
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	220f      	movs	r2, #15
 800e8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ac:	43db      	mvns	r3, r3
 800e8ae:	69ba      	ldr	r2, [r7, #24]
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	691a      	ldr	r2, [r3, #16]
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	f003 0307 	and.w	r3, r3, #7
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8c4:	69ba      	ldr	r2, [r7, #24]
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	08da      	lsrs	r2, r3, #3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	3208      	adds	r2, #8
 800e8d2:	69b9      	ldr	r1, [r7, #24]
 800e8d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	005b      	lsls	r3, r3, #1
 800e8e2:	2203      	movs	r2, #3
 800e8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8e8:	43db      	mvns	r3, r3
 800e8ea:	69ba      	ldr	r2, [r7, #24]
 800e8ec:	4013      	ands	r3, r2
 800e8ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	f003 0203 	and.w	r2, r3, #3
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	005b      	lsls	r3, r3, #1
 800e8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e900:	69ba      	ldr	r2, [r7, #24]
 800e902:	4313      	orrs	r3, r2
 800e904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	69ba      	ldr	r2, [r7, #24]
 800e90a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e914:	2b00      	cmp	r3, #0
 800e916:	f000 80ae 	beq.w	800ea76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e91a:	2300      	movs	r3, #0
 800e91c:	60fb      	str	r3, [r7, #12]
 800e91e:	4b5d      	ldr	r3, [pc, #372]	@ (800ea94 <HAL_GPIO_Init+0x300>)
 800e920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e922:	4a5c      	ldr	r2, [pc, #368]	@ (800ea94 <HAL_GPIO_Init+0x300>)
 800e924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e928:	6453      	str	r3, [r2, #68]	@ 0x44
 800e92a:	4b5a      	ldr	r3, [pc, #360]	@ (800ea94 <HAL_GPIO_Init+0x300>)
 800e92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e92e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e936:	4a58      	ldr	r2, [pc, #352]	@ (800ea98 <HAL_GPIO_Init+0x304>)
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	089b      	lsrs	r3, r3, #2
 800e93c:	3302      	adds	r3, #2
 800e93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	f003 0303 	and.w	r3, r3, #3
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	220f      	movs	r2, #15
 800e94e:	fa02 f303 	lsl.w	r3, r2, r3
 800e952:	43db      	mvns	r3, r3
 800e954:	69ba      	ldr	r2, [r7, #24]
 800e956:	4013      	ands	r3, r2
 800e958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a4f      	ldr	r2, [pc, #316]	@ (800ea9c <HAL_GPIO_Init+0x308>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d025      	beq.n	800e9ae <HAL_GPIO_Init+0x21a>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a4e      	ldr	r2, [pc, #312]	@ (800eaa0 <HAL_GPIO_Init+0x30c>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d01f      	beq.n	800e9aa <HAL_GPIO_Init+0x216>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a4d      	ldr	r2, [pc, #308]	@ (800eaa4 <HAL_GPIO_Init+0x310>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d019      	beq.n	800e9a6 <HAL_GPIO_Init+0x212>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a4c      	ldr	r2, [pc, #304]	@ (800eaa8 <HAL_GPIO_Init+0x314>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d013      	beq.n	800e9a2 <HAL_GPIO_Init+0x20e>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a4b      	ldr	r2, [pc, #300]	@ (800eaac <HAL_GPIO_Init+0x318>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d00d      	beq.n	800e99e <HAL_GPIO_Init+0x20a>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a4a      	ldr	r2, [pc, #296]	@ (800eab0 <HAL_GPIO_Init+0x31c>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d007      	beq.n	800e99a <HAL_GPIO_Init+0x206>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a49      	ldr	r2, [pc, #292]	@ (800eab4 <HAL_GPIO_Init+0x320>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d101      	bne.n	800e996 <HAL_GPIO_Init+0x202>
 800e992:	2306      	movs	r3, #6
 800e994:	e00c      	b.n	800e9b0 <HAL_GPIO_Init+0x21c>
 800e996:	2307      	movs	r3, #7
 800e998:	e00a      	b.n	800e9b0 <HAL_GPIO_Init+0x21c>
 800e99a:	2305      	movs	r3, #5
 800e99c:	e008      	b.n	800e9b0 <HAL_GPIO_Init+0x21c>
 800e99e:	2304      	movs	r3, #4
 800e9a0:	e006      	b.n	800e9b0 <HAL_GPIO_Init+0x21c>
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	e004      	b.n	800e9b0 <HAL_GPIO_Init+0x21c>
 800e9a6:	2302      	movs	r3, #2
 800e9a8:	e002      	b.n	800e9b0 <HAL_GPIO_Init+0x21c>
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e000      	b.n	800e9b0 <HAL_GPIO_Init+0x21c>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	69fa      	ldr	r2, [r7, #28]
 800e9b2:	f002 0203 	and.w	r2, r2, #3
 800e9b6:	0092      	lsls	r2, r2, #2
 800e9b8:	4093      	lsls	r3, r2
 800e9ba:	69ba      	ldr	r2, [r7, #24]
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e9c0:	4935      	ldr	r1, [pc, #212]	@ (800ea98 <HAL_GPIO_Init+0x304>)
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	089b      	lsrs	r3, r3, #2
 800e9c6:	3302      	adds	r3, #2
 800e9c8:	69ba      	ldr	r2, [r7, #24]
 800e9ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e9ce:	4b3a      	ldr	r3, [pc, #232]	@ (800eab8 <HAL_GPIO_Init+0x324>)
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	43db      	mvns	r3, r3
 800e9d8:	69ba      	ldr	r2, [r7, #24]
 800e9da:	4013      	ands	r3, r2
 800e9dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d003      	beq.n	800e9f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800e9ea:	69ba      	ldr	r2, [r7, #24]
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e9f2:	4a31      	ldr	r2, [pc, #196]	@ (800eab8 <HAL_GPIO_Init+0x324>)
 800e9f4:	69bb      	ldr	r3, [r7, #24]
 800e9f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e9f8:	4b2f      	ldr	r3, [pc, #188]	@ (800eab8 <HAL_GPIO_Init+0x324>)
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	43db      	mvns	r3, r3
 800ea02:	69ba      	ldr	r2, [r7, #24]
 800ea04:	4013      	ands	r3, r2
 800ea06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d003      	beq.n	800ea1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800ea14:	69ba      	ldr	r2, [r7, #24]
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ea1c:	4a26      	ldr	r2, [pc, #152]	@ (800eab8 <HAL_GPIO_Init+0x324>)
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ea22:	4b25      	ldr	r3, [pc, #148]	@ (800eab8 <HAL_GPIO_Init+0x324>)
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	43db      	mvns	r3, r3
 800ea2c:	69ba      	ldr	r2, [r7, #24]
 800ea2e:	4013      	ands	r3, r2
 800ea30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d003      	beq.n	800ea46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800ea3e:	69ba      	ldr	r2, [r7, #24]
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	4313      	orrs	r3, r2
 800ea44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ea46:	4a1c      	ldr	r2, [pc, #112]	@ (800eab8 <HAL_GPIO_Init+0x324>)
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ea4c:	4b1a      	ldr	r3, [pc, #104]	@ (800eab8 <HAL_GPIO_Init+0x324>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	43db      	mvns	r3, r3
 800ea56:	69ba      	ldr	r2, [r7, #24]
 800ea58:	4013      	ands	r3, r2
 800ea5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d003      	beq.n	800ea70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ea68:	69ba      	ldr	r2, [r7, #24]
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ea70:	4a11      	ldr	r2, [pc, #68]	@ (800eab8 <HAL_GPIO_Init+0x324>)
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ea76:	69fb      	ldr	r3, [r7, #28]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	61fb      	str	r3, [r7, #28]
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	2b0f      	cmp	r3, #15
 800ea80:	f67f ae96 	bls.w	800e7b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop
 800ea88:	3724      	adds	r7, #36	@ 0x24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	40023800 	.word	0x40023800
 800ea98:	40013800 	.word	0x40013800
 800ea9c:	40020000 	.word	0x40020000
 800eaa0:	40020400 	.word	0x40020400
 800eaa4:	40020800 	.word	0x40020800
 800eaa8:	40020c00 	.word	0x40020c00
 800eaac:	40021000 	.word	0x40021000
 800eab0:	40021400 	.word	0x40021400
 800eab4:	40021800 	.word	0x40021800
 800eab8:	40013c00 	.word	0x40013c00

0800eabc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	460b      	mov	r3, r1
 800eac6:	807b      	strh	r3, [r7, #2]
 800eac8:	4613      	mov	r3, r2
 800eaca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800eacc:	787b      	ldrb	r3, [r7, #1]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d003      	beq.n	800eada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ead2:	887a      	ldrh	r2, [r7, #2]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ead8:	e003      	b.n	800eae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800eada:	887b      	ldrh	r3, [r7, #2]
 800eadc:	041a      	lsls	r2, r3, #16
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	619a      	str	r2, [r3, #24]
}
 800eae2:	bf00      	nop
 800eae4:	370c      	adds	r7, #12
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
	...

0800eaf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800eafa:	4b08      	ldr	r3, [pc, #32]	@ (800eb1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eafc:	695a      	ldr	r2, [r3, #20]
 800eafe:	88fb      	ldrh	r3, [r7, #6]
 800eb00:	4013      	ands	r3, r2
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d006      	beq.n	800eb14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800eb06:	4a05      	ldr	r2, [pc, #20]	@ (800eb1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eb08:	88fb      	ldrh	r3, [r7, #6]
 800eb0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800eb0c:	88fb      	ldrh	r3, [r7, #6]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe ff22 	bl	800d958 <HAL_GPIO_EXTI_Callback>
  }
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	40013c00 	.word	0x40013c00

0800eb20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800eb26:	2300      	movs	r3, #0
 800eb28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	603b      	str	r3, [r7, #0]
 800eb2e:	4b20      	ldr	r3, [pc, #128]	@ (800ebb0 <HAL_PWREx_EnableOverDrive+0x90>)
 800eb30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb32:	4a1f      	ldr	r2, [pc, #124]	@ (800ebb0 <HAL_PWREx_EnableOverDrive+0x90>)
 800eb34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb38:	6413      	str	r3, [r2, #64]	@ 0x40
 800eb3a:	4b1d      	ldr	r3, [pc, #116]	@ (800ebb0 <HAL_PWREx_EnableOverDrive+0x90>)
 800eb3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800eb46:	4b1b      	ldr	r3, [pc, #108]	@ (800ebb4 <HAL_PWREx_EnableOverDrive+0x94>)
 800eb48:	2201      	movs	r2, #1
 800eb4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800eb4c:	f7ff fc4e 	bl	800e3ec <HAL_GetTick>
 800eb50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800eb52:	e009      	b.n	800eb68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800eb54:	f7ff fc4a 	bl	800e3ec <HAL_GetTick>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eb62:	d901      	bls.n	800eb68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800eb64:	2303      	movs	r3, #3
 800eb66:	e01f      	b.n	800eba8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800eb68:	4b13      	ldr	r3, [pc, #76]	@ (800ebb8 <HAL_PWREx_EnableOverDrive+0x98>)
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb74:	d1ee      	bne.n	800eb54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800eb76:	4b11      	ldr	r3, [pc, #68]	@ (800ebbc <HAL_PWREx_EnableOverDrive+0x9c>)
 800eb78:	2201      	movs	r2, #1
 800eb7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800eb7c:	f7ff fc36 	bl	800e3ec <HAL_GetTick>
 800eb80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800eb82:	e009      	b.n	800eb98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800eb84:	f7ff fc32 	bl	800e3ec <HAL_GetTick>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eb92:	d901      	bls.n	800eb98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800eb94:	2303      	movs	r3, #3
 800eb96:	e007      	b.n	800eba8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800eb98:	4b07      	ldr	r3, [pc, #28]	@ (800ebb8 <HAL_PWREx_EnableOverDrive+0x98>)
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eba4:	d1ee      	bne.n	800eb84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	40023800 	.word	0x40023800
 800ebb4:	420e0040 	.word	0x420e0040
 800ebb8:	40007000 	.word	0x40007000
 800ebbc:	420e0044 	.word	0x420e0044

0800ebc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d101      	bne.n	800ebd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e0cc      	b.n	800ed6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ebd4:	4b68      	ldr	r3, [pc, #416]	@ (800ed78 <HAL_RCC_ClockConfig+0x1b8>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f003 030f 	and.w	r3, r3, #15
 800ebdc:	683a      	ldr	r2, [r7, #0]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d90c      	bls.n	800ebfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ebe2:	4b65      	ldr	r3, [pc, #404]	@ (800ed78 <HAL_RCC_ClockConfig+0x1b8>)
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	b2d2      	uxtb	r2, r2
 800ebe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ebea:	4b63      	ldr	r3, [pc, #396]	@ (800ed78 <HAL_RCC_ClockConfig+0x1b8>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f003 030f 	and.w	r3, r3, #15
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d001      	beq.n	800ebfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e0b8      	b.n	800ed6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f003 0302 	and.w	r3, r3, #2
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d020      	beq.n	800ec4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f003 0304 	and.w	r3, r3, #4
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d005      	beq.n	800ec20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ec14:	4b59      	ldr	r3, [pc, #356]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec16:	689b      	ldr	r3, [r3, #8]
 800ec18:	4a58      	ldr	r2, [pc, #352]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ec1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 0308 	and.w	r3, r3, #8
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d005      	beq.n	800ec38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ec2c:	4b53      	ldr	r3, [pc, #332]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	4a52      	ldr	r2, [pc, #328]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ec36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ec38:	4b50      	ldr	r3, [pc, #320]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec3a:	689b      	ldr	r3, [r3, #8]
 800ec3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	494d      	ldr	r1, [pc, #308]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec46:	4313      	orrs	r3, r2
 800ec48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 0301 	and.w	r3, r3, #1
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d044      	beq.n	800ece0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d107      	bne.n	800ec6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ec5e:	4b47      	ldr	r3, [pc, #284]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d119      	bne.n	800ec9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e07f      	b.n	800ed6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d003      	beq.n	800ec7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ec7a:	2b03      	cmp	r3, #3
 800ec7c:	d107      	bne.n	800ec8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ec7e:	4b3f      	ldr	r3, [pc, #252]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d109      	bne.n	800ec9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e06f      	b.n	800ed6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec8e:	4b3b      	ldr	r3, [pc, #236]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f003 0302 	and.w	r3, r3, #2
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e067      	b.n	800ed6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ec9e:	4b37      	ldr	r3, [pc, #220]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	f023 0203 	bic.w	r2, r3, #3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	4934      	ldr	r1, [pc, #208]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ecac:	4313      	orrs	r3, r2
 800ecae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ecb0:	f7ff fb9c 	bl	800e3ec <HAL_GetTick>
 800ecb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ecb6:	e00a      	b.n	800ecce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ecb8:	f7ff fb98 	bl	800e3ec <HAL_GetTick>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d901      	bls.n	800ecce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ecca:	2303      	movs	r3, #3
 800eccc:	e04f      	b.n	800ed6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ecce:	4b2b      	ldr	r3, [pc, #172]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	f003 020c 	and.w	r2, r3, #12
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d1eb      	bne.n	800ecb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ece0:	4b25      	ldr	r3, [pc, #148]	@ (800ed78 <HAL_RCC_ClockConfig+0x1b8>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f003 030f 	and.w	r3, r3, #15
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d20c      	bcs.n	800ed08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ecee:	4b22      	ldr	r3, [pc, #136]	@ (800ed78 <HAL_RCC_ClockConfig+0x1b8>)
 800ecf0:	683a      	ldr	r2, [r7, #0]
 800ecf2:	b2d2      	uxtb	r2, r2
 800ecf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ecf6:	4b20      	ldr	r3, [pc, #128]	@ (800ed78 <HAL_RCC_ClockConfig+0x1b8>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f003 030f 	and.w	r3, r3, #15
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d001      	beq.n	800ed08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ed04:	2301      	movs	r3, #1
 800ed06:	e032      	b.n	800ed6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f003 0304 	and.w	r3, r3, #4
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d008      	beq.n	800ed26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ed14:	4b19      	ldr	r3, [pc, #100]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	4916      	ldr	r1, [pc, #88]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ed22:	4313      	orrs	r3, r2
 800ed24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f003 0308 	and.w	r3, r3, #8
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d009      	beq.n	800ed46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ed32:	4b12      	ldr	r3, [pc, #72]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	490e      	ldr	r1, [pc, #56]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ed42:	4313      	orrs	r3, r2
 800ed44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ed46:	f000 f855 	bl	800edf4 <HAL_RCC_GetSysClockFreq>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ed7c <HAL_RCC_ClockConfig+0x1bc>)
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	091b      	lsrs	r3, r3, #4
 800ed52:	f003 030f 	and.w	r3, r3, #15
 800ed56:	490a      	ldr	r1, [pc, #40]	@ (800ed80 <HAL_RCC_ClockConfig+0x1c0>)
 800ed58:	5ccb      	ldrb	r3, [r1, r3]
 800ed5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ed5e:	4a09      	ldr	r2, [pc, #36]	@ (800ed84 <HAL_RCC_ClockConfig+0x1c4>)
 800ed60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ed62:	4b09      	ldr	r3, [pc, #36]	@ (800ed88 <HAL_RCC_ClockConfig+0x1c8>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7ff fafc 	bl	800e364 <HAL_InitTick>

  return HAL_OK;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	40023c00 	.word	0x40023c00
 800ed7c:	40023800 	.word	0x40023800
 800ed80:	08018090 	.word	0x08018090
 800ed84:	20000008 	.word	0x20000008
 800ed88:	2000000c 	.word	0x2000000c

0800ed8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ed90:	4b03      	ldr	r3, [pc, #12]	@ (800eda0 <HAL_RCC_GetHCLKFreq+0x14>)
 800ed92:	681b      	ldr	r3, [r3, #0]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	20000008 	.word	0x20000008

0800eda4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800eda8:	f7ff fff0 	bl	800ed8c <HAL_RCC_GetHCLKFreq>
 800edac:	4602      	mov	r2, r0
 800edae:	4b05      	ldr	r3, [pc, #20]	@ (800edc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	0a9b      	lsrs	r3, r3, #10
 800edb4:	f003 0307 	and.w	r3, r3, #7
 800edb8:	4903      	ldr	r1, [pc, #12]	@ (800edc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800edba:	5ccb      	ldrb	r3, [r1, r3]
 800edbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	40023800 	.word	0x40023800
 800edc8:	080180a0 	.word	0x080180a0

0800edcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800edd0:	f7ff ffdc 	bl	800ed8c <HAL_RCC_GetHCLKFreq>
 800edd4:	4602      	mov	r2, r0
 800edd6:	4b05      	ldr	r3, [pc, #20]	@ (800edec <HAL_RCC_GetPCLK2Freq+0x20>)
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	0b5b      	lsrs	r3, r3, #13
 800eddc:	f003 0307 	and.w	r3, r3, #7
 800ede0:	4903      	ldr	r1, [pc, #12]	@ (800edf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ede2:	5ccb      	ldrb	r3, [r1, r3]
 800ede4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ede8:	4618      	mov	r0, r3
 800edea:	bd80      	pop	{r7, pc}
 800edec:	40023800 	.word	0x40023800
 800edf0:	080180a0 	.word	0x080180a0

0800edf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800edf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edf8:	b0ae      	sub	sp, #184	@ 0xb8
 800edfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800edfc:	2300      	movs	r3, #0
 800edfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800ee02:	2300      	movs	r3, #0
 800ee04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800ee14:	2300      	movs	r3, #0
 800ee16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee1a:	4bcb      	ldr	r3, [pc, #812]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	f003 030c 	and.w	r3, r3, #12
 800ee22:	2b0c      	cmp	r3, #12
 800ee24:	f200 8206 	bhi.w	800f234 <HAL_RCC_GetSysClockFreq+0x440>
 800ee28:	a201      	add	r2, pc, #4	@ (adr r2, 800ee30 <HAL_RCC_GetSysClockFreq+0x3c>)
 800ee2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee2e:	bf00      	nop
 800ee30:	0800ee65 	.word	0x0800ee65
 800ee34:	0800f235 	.word	0x0800f235
 800ee38:	0800f235 	.word	0x0800f235
 800ee3c:	0800f235 	.word	0x0800f235
 800ee40:	0800ee6d 	.word	0x0800ee6d
 800ee44:	0800f235 	.word	0x0800f235
 800ee48:	0800f235 	.word	0x0800f235
 800ee4c:	0800f235 	.word	0x0800f235
 800ee50:	0800ee75 	.word	0x0800ee75
 800ee54:	0800f235 	.word	0x0800f235
 800ee58:	0800f235 	.word	0x0800f235
 800ee5c:	0800f235 	.word	0x0800f235
 800ee60:	0800f065 	.word	0x0800f065
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ee64:	4bb9      	ldr	r3, [pc, #740]	@ (800f14c <HAL_RCC_GetSysClockFreq+0x358>)
 800ee66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800ee6a:	e1e7      	b.n	800f23c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ee6c:	4bb8      	ldr	r3, [pc, #736]	@ (800f150 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ee6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ee72:	e1e3      	b.n	800f23c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ee74:	4bb4      	ldr	r3, [pc, #720]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ee80:	4bb1      	ldr	r3, [pc, #708]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d071      	beq.n	800ef70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee8c:	4bae      	ldr	r3, [pc, #696]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	099b      	lsrs	r3, r3, #6
 800ee92:	2200      	movs	r2, #0
 800ee94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ee98:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800ee9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eea4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eeae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800eeb2:	4622      	mov	r2, r4
 800eeb4:	462b      	mov	r3, r5
 800eeb6:	f04f 0000 	mov.w	r0, #0
 800eeba:	f04f 0100 	mov.w	r1, #0
 800eebe:	0159      	lsls	r1, r3, #5
 800eec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eec4:	0150      	lsls	r0, r2, #5
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	4621      	mov	r1, r4
 800eecc:	1a51      	subs	r1, r2, r1
 800eece:	6439      	str	r1, [r7, #64]	@ 0x40
 800eed0:	4629      	mov	r1, r5
 800eed2:	eb63 0301 	sbc.w	r3, r3, r1
 800eed6:	647b      	str	r3, [r7, #68]	@ 0x44
 800eed8:	f04f 0200 	mov.w	r2, #0
 800eedc:	f04f 0300 	mov.w	r3, #0
 800eee0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800eee4:	4649      	mov	r1, r9
 800eee6:	018b      	lsls	r3, r1, #6
 800eee8:	4641      	mov	r1, r8
 800eeea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800eeee:	4641      	mov	r1, r8
 800eef0:	018a      	lsls	r2, r1, #6
 800eef2:	4641      	mov	r1, r8
 800eef4:	1a51      	subs	r1, r2, r1
 800eef6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800eef8:	4649      	mov	r1, r9
 800eefa:	eb63 0301 	sbc.w	r3, r3, r1
 800eefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef00:	f04f 0200 	mov.w	r2, #0
 800ef04:	f04f 0300 	mov.w	r3, #0
 800ef08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800ef0c:	4649      	mov	r1, r9
 800ef0e:	00cb      	lsls	r3, r1, #3
 800ef10:	4641      	mov	r1, r8
 800ef12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ef16:	4641      	mov	r1, r8
 800ef18:	00ca      	lsls	r2, r1, #3
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	4603      	mov	r3, r0
 800ef20:	4622      	mov	r2, r4
 800ef22:	189b      	adds	r3, r3, r2
 800ef24:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef26:	462b      	mov	r3, r5
 800ef28:	460a      	mov	r2, r1
 800ef2a:	eb42 0303 	adc.w	r3, r2, r3
 800ef2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef30:	f04f 0200 	mov.w	r2, #0
 800ef34:	f04f 0300 	mov.w	r3, #0
 800ef38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	024b      	lsls	r3, r1, #9
 800ef40:	4621      	mov	r1, r4
 800ef42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ef46:	4621      	mov	r1, r4
 800ef48:	024a      	lsls	r2, r1, #9
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef52:	2200      	movs	r2, #0
 800ef54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ef5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ef60:	f7f1 fec2 	bl	8000ce8 <__aeabi_uldivmod>
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	4613      	mov	r3, r2
 800ef6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef6e:	e067      	b.n	800f040 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ef70:	4b75      	ldr	r3, [pc, #468]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	099b      	lsrs	r3, r3, #6
 800ef76:	2200      	movs	r2, #0
 800ef78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef7c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ef80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ef84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef88:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800ef92:	4622      	mov	r2, r4
 800ef94:	462b      	mov	r3, r5
 800ef96:	f04f 0000 	mov.w	r0, #0
 800ef9a:	f04f 0100 	mov.w	r1, #0
 800ef9e:	0159      	lsls	r1, r3, #5
 800efa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800efa4:	0150      	lsls	r0, r2, #5
 800efa6:	4602      	mov	r2, r0
 800efa8:	460b      	mov	r3, r1
 800efaa:	4621      	mov	r1, r4
 800efac:	1a51      	subs	r1, r2, r1
 800efae:	62b9      	str	r1, [r7, #40]	@ 0x28
 800efb0:	4629      	mov	r1, r5
 800efb2:	eb63 0301 	sbc.w	r3, r3, r1
 800efb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800efb8:	f04f 0200 	mov.w	r2, #0
 800efbc:	f04f 0300 	mov.w	r3, #0
 800efc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800efc4:	4649      	mov	r1, r9
 800efc6:	018b      	lsls	r3, r1, #6
 800efc8:	4641      	mov	r1, r8
 800efca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800efce:	4641      	mov	r1, r8
 800efd0:	018a      	lsls	r2, r1, #6
 800efd2:	4641      	mov	r1, r8
 800efd4:	ebb2 0a01 	subs.w	sl, r2, r1
 800efd8:	4649      	mov	r1, r9
 800efda:	eb63 0b01 	sbc.w	fp, r3, r1
 800efde:	f04f 0200 	mov.w	r2, #0
 800efe2:	f04f 0300 	mov.w	r3, #0
 800efe6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800efea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800efee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eff2:	4692      	mov	sl, r2
 800eff4:	469b      	mov	fp, r3
 800eff6:	4623      	mov	r3, r4
 800eff8:	eb1a 0303 	adds.w	r3, sl, r3
 800effc:	623b      	str	r3, [r7, #32]
 800effe:	462b      	mov	r3, r5
 800f000:	eb4b 0303 	adc.w	r3, fp, r3
 800f004:	627b      	str	r3, [r7, #36]	@ 0x24
 800f006:	f04f 0200 	mov.w	r2, #0
 800f00a:	f04f 0300 	mov.w	r3, #0
 800f00e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800f012:	4629      	mov	r1, r5
 800f014:	028b      	lsls	r3, r1, #10
 800f016:	4621      	mov	r1, r4
 800f018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f01c:	4621      	mov	r1, r4
 800f01e:	028a      	lsls	r2, r1, #10
 800f020:	4610      	mov	r0, r2
 800f022:	4619      	mov	r1, r3
 800f024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f028:	2200      	movs	r2, #0
 800f02a:	673b      	str	r3, [r7, #112]	@ 0x70
 800f02c:	677a      	str	r2, [r7, #116]	@ 0x74
 800f02e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f032:	f7f1 fe59 	bl	8000ce8 <__aeabi_uldivmod>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4613      	mov	r3, r2
 800f03c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f040:	4b41      	ldr	r3, [pc, #260]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	0c1b      	lsrs	r3, r3, #16
 800f046:	f003 0303 	and.w	r3, r3, #3
 800f04a:	3301      	adds	r3, #1
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800f052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f05e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800f062:	e0eb      	b.n	800f23c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f064:	4b38      	ldr	r3, [pc, #224]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f06c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f070:	4b35      	ldr	r3, [pc, #212]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d06b      	beq.n	800f154 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f07c:	4b32      	ldr	r3, [pc, #200]	@ (800f148 <HAL_RCC_GetSysClockFreq+0x354>)
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	099b      	lsrs	r3, r3, #6
 800f082:	2200      	movs	r2, #0
 800f084:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f086:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f08e:	663b      	str	r3, [r7, #96]	@ 0x60
 800f090:	2300      	movs	r3, #0
 800f092:	667b      	str	r3, [r7, #100]	@ 0x64
 800f094:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800f098:	4622      	mov	r2, r4
 800f09a:	462b      	mov	r3, r5
 800f09c:	f04f 0000 	mov.w	r0, #0
 800f0a0:	f04f 0100 	mov.w	r1, #0
 800f0a4:	0159      	lsls	r1, r3, #5
 800f0a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f0aa:	0150      	lsls	r0, r2, #5
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	1a51      	subs	r1, r2, r1
 800f0b4:	61b9      	str	r1, [r7, #24]
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	eb63 0301 	sbc.w	r3, r3, r1
 800f0bc:	61fb      	str	r3, [r7, #28]
 800f0be:	f04f 0200 	mov.w	r2, #0
 800f0c2:	f04f 0300 	mov.w	r3, #0
 800f0c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800f0ca:	4659      	mov	r1, fp
 800f0cc:	018b      	lsls	r3, r1, #6
 800f0ce:	4651      	mov	r1, sl
 800f0d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f0d4:	4651      	mov	r1, sl
 800f0d6:	018a      	lsls	r2, r1, #6
 800f0d8:	4651      	mov	r1, sl
 800f0da:	ebb2 0801 	subs.w	r8, r2, r1
 800f0de:	4659      	mov	r1, fp
 800f0e0:	eb63 0901 	sbc.w	r9, r3, r1
 800f0e4:	f04f 0200 	mov.w	r2, #0
 800f0e8:	f04f 0300 	mov.w	r3, #0
 800f0ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f0f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f0f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f0f8:	4690      	mov	r8, r2
 800f0fa:	4699      	mov	r9, r3
 800f0fc:	4623      	mov	r3, r4
 800f0fe:	eb18 0303 	adds.w	r3, r8, r3
 800f102:	613b      	str	r3, [r7, #16]
 800f104:	462b      	mov	r3, r5
 800f106:	eb49 0303 	adc.w	r3, r9, r3
 800f10a:	617b      	str	r3, [r7, #20]
 800f10c:	f04f 0200 	mov.w	r2, #0
 800f110:	f04f 0300 	mov.w	r3, #0
 800f114:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800f118:	4629      	mov	r1, r5
 800f11a:	024b      	lsls	r3, r1, #9
 800f11c:	4621      	mov	r1, r4
 800f11e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f122:	4621      	mov	r1, r4
 800f124:	024a      	lsls	r2, r1, #9
 800f126:	4610      	mov	r0, r2
 800f128:	4619      	mov	r1, r3
 800f12a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f12e:	2200      	movs	r2, #0
 800f130:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f132:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800f134:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f138:	f7f1 fdd6 	bl	8000ce8 <__aeabi_uldivmod>
 800f13c:	4602      	mov	r2, r0
 800f13e:	460b      	mov	r3, r1
 800f140:	4613      	mov	r3, r2
 800f142:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f146:	e065      	b.n	800f214 <HAL_RCC_GetSysClockFreq+0x420>
 800f148:	40023800 	.word	0x40023800
 800f14c:	00f42400 	.word	0x00f42400
 800f150:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f154:	4b3d      	ldr	r3, [pc, #244]	@ (800f24c <HAL_RCC_GetSysClockFreq+0x458>)
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	099b      	lsrs	r3, r3, #6
 800f15a:	2200      	movs	r2, #0
 800f15c:	4618      	mov	r0, r3
 800f15e:	4611      	mov	r1, r2
 800f160:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f164:	653b      	str	r3, [r7, #80]	@ 0x50
 800f166:	2300      	movs	r3, #0
 800f168:	657b      	str	r3, [r7, #84]	@ 0x54
 800f16a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800f16e:	4642      	mov	r2, r8
 800f170:	464b      	mov	r3, r9
 800f172:	f04f 0000 	mov.w	r0, #0
 800f176:	f04f 0100 	mov.w	r1, #0
 800f17a:	0159      	lsls	r1, r3, #5
 800f17c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f180:	0150      	lsls	r0, r2, #5
 800f182:	4602      	mov	r2, r0
 800f184:	460b      	mov	r3, r1
 800f186:	4641      	mov	r1, r8
 800f188:	1a51      	subs	r1, r2, r1
 800f18a:	60b9      	str	r1, [r7, #8]
 800f18c:	4649      	mov	r1, r9
 800f18e:	eb63 0301 	sbc.w	r3, r3, r1
 800f192:	60fb      	str	r3, [r7, #12]
 800f194:	f04f 0200 	mov.w	r2, #0
 800f198:	f04f 0300 	mov.w	r3, #0
 800f19c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800f1a0:	4659      	mov	r1, fp
 800f1a2:	018b      	lsls	r3, r1, #6
 800f1a4:	4651      	mov	r1, sl
 800f1a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f1aa:	4651      	mov	r1, sl
 800f1ac:	018a      	lsls	r2, r1, #6
 800f1ae:	4651      	mov	r1, sl
 800f1b0:	1a54      	subs	r4, r2, r1
 800f1b2:	4659      	mov	r1, fp
 800f1b4:	eb63 0501 	sbc.w	r5, r3, r1
 800f1b8:	f04f 0200 	mov.w	r2, #0
 800f1bc:	f04f 0300 	mov.w	r3, #0
 800f1c0:	00eb      	lsls	r3, r5, #3
 800f1c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f1c6:	00e2      	lsls	r2, r4, #3
 800f1c8:	4614      	mov	r4, r2
 800f1ca:	461d      	mov	r5, r3
 800f1cc:	4643      	mov	r3, r8
 800f1ce:	18e3      	adds	r3, r4, r3
 800f1d0:	603b      	str	r3, [r7, #0]
 800f1d2:	464b      	mov	r3, r9
 800f1d4:	eb45 0303 	adc.w	r3, r5, r3
 800f1d8:	607b      	str	r3, [r7, #4]
 800f1da:	f04f 0200 	mov.w	r2, #0
 800f1de:	f04f 0300 	mov.w	r3, #0
 800f1e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f1e6:	4629      	mov	r1, r5
 800f1e8:	028b      	lsls	r3, r1, #10
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f1f0:	4621      	mov	r1, r4
 800f1f2:	028a      	lsls	r2, r1, #10
 800f1f4:	4610      	mov	r0, r2
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f200:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f202:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800f206:	f7f1 fd6f 	bl	8000ce8 <__aeabi_uldivmod>
 800f20a:	4602      	mov	r2, r0
 800f20c:	460b      	mov	r3, r1
 800f20e:	4613      	mov	r3, r2
 800f210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800f214:	4b0d      	ldr	r3, [pc, #52]	@ (800f24c <HAL_RCC_GetSysClockFreq+0x458>)
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	0f1b      	lsrs	r3, r3, #28
 800f21a:	f003 0307 	and.w	r3, r3, #7
 800f21e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800f222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f22e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800f232:	e003      	b.n	800f23c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f234:	4b06      	ldr	r3, [pc, #24]	@ (800f250 <HAL_RCC_GetSysClockFreq+0x45c>)
 800f236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800f23a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f23c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800f240:	4618      	mov	r0, r3
 800f242:	37b8      	adds	r7, #184	@ 0xb8
 800f244:	46bd      	mov	sp, r7
 800f246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f24a:	bf00      	nop
 800f24c:	40023800 	.word	0x40023800
 800f250:	00f42400 	.word	0x00f42400

0800f254 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d101      	bne.n	800f266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f262:	2301      	movs	r3, #1
 800f264:	e28d      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f003 0301 	and.w	r3, r3, #1
 800f26e:	2b00      	cmp	r3, #0
 800f270:	f000 8083 	beq.w	800f37a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800f274:	4b94      	ldr	r3, [pc, #592]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f276:	689b      	ldr	r3, [r3, #8]
 800f278:	f003 030c 	and.w	r3, r3, #12
 800f27c:	2b04      	cmp	r3, #4
 800f27e:	d019      	beq.n	800f2b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f280:	4b91      	ldr	r3, [pc, #580]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800f288:	2b08      	cmp	r3, #8
 800f28a:	d106      	bne.n	800f29a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f28c:	4b8e      	ldr	r3, [pc, #568]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f298:	d00c      	beq.n	800f2b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f29a:	4b8b      	ldr	r3, [pc, #556]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f2a2:	2b0c      	cmp	r3, #12
 800f2a4:	d112      	bne.n	800f2cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f2a6:	4b88      	ldr	r3, [pc, #544]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f2b2:	d10b      	bne.n	800f2cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f2b4:	4b84      	ldr	r3, [pc, #528]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d05b      	beq.n	800f378 <HAL_RCC_OscConfig+0x124>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d157      	bne.n	800f378 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e25a      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2d4:	d106      	bne.n	800f2e4 <HAL_RCC_OscConfig+0x90>
 800f2d6:	4b7c      	ldr	r3, [pc, #496]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a7b      	ldr	r2, [pc, #492]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f2dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f2e0:	6013      	str	r3, [r2, #0]
 800f2e2:	e01d      	b.n	800f320 <HAL_RCC_OscConfig+0xcc>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f2ec:	d10c      	bne.n	800f308 <HAL_RCC_OscConfig+0xb4>
 800f2ee:	4b76      	ldr	r3, [pc, #472]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	4a75      	ldr	r2, [pc, #468]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f2f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f2f8:	6013      	str	r3, [r2, #0]
 800f2fa:	4b73      	ldr	r3, [pc, #460]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	4a72      	ldr	r2, [pc, #456]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f304:	6013      	str	r3, [r2, #0]
 800f306:	e00b      	b.n	800f320 <HAL_RCC_OscConfig+0xcc>
 800f308:	4b6f      	ldr	r3, [pc, #444]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a6e      	ldr	r2, [pc, #440]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f30e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	4b6c      	ldr	r3, [pc, #432]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4a6b      	ldr	r2, [pc, #428]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f31a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f31e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d013      	beq.n	800f350 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f328:	f7ff f860 	bl	800e3ec <HAL_GetTick>
 800f32c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f32e:	e008      	b.n	800f342 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f330:	f7ff f85c 	bl	800e3ec <HAL_GetTick>
 800f334:	4602      	mov	r2, r0
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	2b64      	cmp	r3, #100	@ 0x64
 800f33c:	d901      	bls.n	800f342 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800f33e:	2303      	movs	r3, #3
 800f340:	e21f      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f342:	4b61      	ldr	r3, [pc, #388]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d0f0      	beq.n	800f330 <HAL_RCC_OscConfig+0xdc>
 800f34e:	e014      	b.n	800f37a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f350:	f7ff f84c 	bl	800e3ec <HAL_GetTick>
 800f354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f356:	e008      	b.n	800f36a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f358:	f7ff f848 	bl	800e3ec <HAL_GetTick>
 800f35c:	4602      	mov	r2, r0
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	2b64      	cmp	r3, #100	@ 0x64
 800f364:	d901      	bls.n	800f36a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800f366:	2303      	movs	r3, #3
 800f368:	e20b      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f36a:	4b57      	ldr	r3, [pc, #348]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1f0      	bne.n	800f358 <HAL_RCC_OscConfig+0x104>
 800f376:	e000      	b.n	800f37a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f003 0302 	and.w	r3, r3, #2
 800f382:	2b00      	cmp	r3, #0
 800f384:	d06f      	beq.n	800f466 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800f386:	4b50      	ldr	r3, [pc, #320]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	f003 030c 	and.w	r3, r3, #12
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d017      	beq.n	800f3c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f392:	4b4d      	ldr	r3, [pc, #308]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800f39a:	2b08      	cmp	r3, #8
 800f39c:	d105      	bne.n	800f3aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f39e:	4b4a      	ldr	r3, [pc, #296]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00b      	beq.n	800f3c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f3aa:	4b47      	ldr	r3, [pc, #284]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f3b2:	2b0c      	cmp	r3, #12
 800f3b4:	d11c      	bne.n	800f3f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f3b6:	4b44      	ldr	r3, [pc, #272]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d116      	bne.n	800f3f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f3c2:	4b41      	ldr	r3, [pc, #260]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 0302 	and.w	r3, r3, #2
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d005      	beq.n	800f3da <HAL_RCC_OscConfig+0x186>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d001      	beq.n	800f3da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e1d3      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f3da:	4b3b      	ldr	r3, [pc, #236]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	00db      	lsls	r3, r3, #3
 800f3e8:	4937      	ldr	r1, [pc, #220]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f3ee:	e03a      	b.n	800f466 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d020      	beq.n	800f43a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f3f8:	4b34      	ldr	r3, [pc, #208]	@ (800f4cc <HAL_RCC_OscConfig+0x278>)
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3fe:	f7fe fff5 	bl	800e3ec <HAL_GetTick>
 800f402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f404:	e008      	b.n	800f418 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f406:	f7fe fff1 	bl	800e3ec <HAL_GetTick>
 800f40a:	4602      	mov	r2, r0
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	2b02      	cmp	r3, #2
 800f412:	d901      	bls.n	800f418 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800f414:	2303      	movs	r3, #3
 800f416:	e1b4      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f418:	4b2b      	ldr	r3, [pc, #172]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f003 0302 	and.w	r3, r3, #2
 800f420:	2b00      	cmp	r3, #0
 800f422:	d0f0      	beq.n	800f406 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f424:	4b28      	ldr	r3, [pc, #160]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	4925      	ldr	r1, [pc, #148]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f434:	4313      	orrs	r3, r2
 800f436:	600b      	str	r3, [r1, #0]
 800f438:	e015      	b.n	800f466 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f43a:	4b24      	ldr	r3, [pc, #144]	@ (800f4cc <HAL_RCC_OscConfig+0x278>)
 800f43c:	2200      	movs	r2, #0
 800f43e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f440:	f7fe ffd4 	bl	800e3ec <HAL_GetTick>
 800f444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f446:	e008      	b.n	800f45a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f448:	f7fe ffd0 	bl	800e3ec <HAL_GetTick>
 800f44c:	4602      	mov	r2, r0
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	1ad3      	subs	r3, r2, r3
 800f452:	2b02      	cmp	r3, #2
 800f454:	d901      	bls.n	800f45a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800f456:	2303      	movs	r3, #3
 800f458:	e193      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f45a:	4b1b      	ldr	r3, [pc, #108]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f003 0302 	and.w	r3, r3, #2
 800f462:	2b00      	cmp	r3, #0
 800f464:	d1f0      	bne.n	800f448 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f003 0308 	and.w	r3, r3, #8
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d036      	beq.n	800f4e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d016      	beq.n	800f4a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f47a:	4b15      	ldr	r3, [pc, #84]	@ (800f4d0 <HAL_RCC_OscConfig+0x27c>)
 800f47c:	2201      	movs	r2, #1
 800f47e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f480:	f7fe ffb4 	bl	800e3ec <HAL_GetTick>
 800f484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f486:	e008      	b.n	800f49a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f488:	f7fe ffb0 	bl	800e3ec <HAL_GetTick>
 800f48c:	4602      	mov	r2, r0
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	2b02      	cmp	r3, #2
 800f494:	d901      	bls.n	800f49a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800f496:	2303      	movs	r3, #3
 800f498:	e173      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f49a:	4b0b      	ldr	r3, [pc, #44]	@ (800f4c8 <HAL_RCC_OscConfig+0x274>)
 800f49c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f49e:	f003 0302 	and.w	r3, r3, #2
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d0f0      	beq.n	800f488 <HAL_RCC_OscConfig+0x234>
 800f4a6:	e01b      	b.n	800f4e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f4a8:	4b09      	ldr	r3, [pc, #36]	@ (800f4d0 <HAL_RCC_OscConfig+0x27c>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f4ae:	f7fe ff9d 	bl	800e3ec <HAL_GetTick>
 800f4b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f4b4:	e00e      	b.n	800f4d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f4b6:	f7fe ff99 	bl	800e3ec <HAL_GetTick>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	2b02      	cmp	r3, #2
 800f4c2:	d907      	bls.n	800f4d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	e15c      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
 800f4c8:	40023800 	.word	0x40023800
 800f4cc:	42470000 	.word	0x42470000
 800f4d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f4d4:	4b8a      	ldr	r3, [pc, #552]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f4d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4d8:	f003 0302 	and.w	r3, r3, #2
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d1ea      	bne.n	800f4b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f003 0304 	and.w	r3, r3, #4
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f000 8097 	beq.w	800f61c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f4f2:	4b83      	ldr	r3, [pc, #524]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d10f      	bne.n	800f51e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f4fe:	2300      	movs	r3, #0
 800f500:	60bb      	str	r3, [r7, #8]
 800f502:	4b7f      	ldr	r3, [pc, #508]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f506:	4a7e      	ldr	r2, [pc, #504]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f50c:	6413      	str	r3, [r2, #64]	@ 0x40
 800f50e:	4b7c      	ldr	r3, [pc, #496]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f516:	60bb      	str	r3, [r7, #8]
 800f518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f51a:	2301      	movs	r3, #1
 800f51c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f51e:	4b79      	ldr	r3, [pc, #484]	@ (800f704 <HAL_RCC_OscConfig+0x4b0>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f526:	2b00      	cmp	r3, #0
 800f528:	d118      	bne.n	800f55c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f52a:	4b76      	ldr	r3, [pc, #472]	@ (800f704 <HAL_RCC_OscConfig+0x4b0>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	4a75      	ldr	r2, [pc, #468]	@ (800f704 <HAL_RCC_OscConfig+0x4b0>)
 800f530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f536:	f7fe ff59 	bl	800e3ec <HAL_GetTick>
 800f53a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f53c:	e008      	b.n	800f550 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f53e:	f7fe ff55 	bl	800e3ec <HAL_GetTick>
 800f542:	4602      	mov	r2, r0
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	2b02      	cmp	r3, #2
 800f54a:	d901      	bls.n	800f550 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800f54c:	2303      	movs	r3, #3
 800f54e:	e118      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f550:	4b6c      	ldr	r3, [pc, #432]	@ (800f704 <HAL_RCC_OscConfig+0x4b0>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d0f0      	beq.n	800f53e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d106      	bne.n	800f572 <HAL_RCC_OscConfig+0x31e>
 800f564:	4b66      	ldr	r3, [pc, #408]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f568:	4a65      	ldr	r2, [pc, #404]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f56a:	f043 0301 	orr.w	r3, r3, #1
 800f56e:	6713      	str	r3, [r2, #112]	@ 0x70
 800f570:	e01c      	b.n	800f5ac <HAL_RCC_OscConfig+0x358>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	2b05      	cmp	r3, #5
 800f578:	d10c      	bne.n	800f594 <HAL_RCC_OscConfig+0x340>
 800f57a:	4b61      	ldr	r3, [pc, #388]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f57e:	4a60      	ldr	r2, [pc, #384]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f580:	f043 0304 	orr.w	r3, r3, #4
 800f584:	6713      	str	r3, [r2, #112]	@ 0x70
 800f586:	4b5e      	ldr	r3, [pc, #376]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f58a:	4a5d      	ldr	r2, [pc, #372]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f58c:	f043 0301 	orr.w	r3, r3, #1
 800f590:	6713      	str	r3, [r2, #112]	@ 0x70
 800f592:	e00b      	b.n	800f5ac <HAL_RCC_OscConfig+0x358>
 800f594:	4b5a      	ldr	r3, [pc, #360]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f598:	4a59      	ldr	r2, [pc, #356]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f59a:	f023 0301 	bic.w	r3, r3, #1
 800f59e:	6713      	str	r3, [r2, #112]	@ 0x70
 800f5a0:	4b57      	ldr	r3, [pc, #348]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f5a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5a4:	4a56      	ldr	r2, [pc, #344]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f5a6:	f023 0304 	bic.w	r3, r3, #4
 800f5aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d015      	beq.n	800f5e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5b4:	f7fe ff1a 	bl	800e3ec <HAL_GetTick>
 800f5b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f5ba:	e00a      	b.n	800f5d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f5bc:	f7fe ff16 	bl	800e3ec <HAL_GetTick>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d901      	bls.n	800f5d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800f5ce:	2303      	movs	r3, #3
 800f5d0:	e0d7      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f5d2:	4b4b      	ldr	r3, [pc, #300]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5d6:	f003 0302 	and.w	r3, r3, #2
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d0ee      	beq.n	800f5bc <HAL_RCC_OscConfig+0x368>
 800f5de:	e014      	b.n	800f60a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5e0:	f7fe ff04 	bl	800e3ec <HAL_GetTick>
 800f5e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f5e6:	e00a      	b.n	800f5fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f5e8:	f7fe ff00 	bl	800e3ec <HAL_GetTick>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d901      	bls.n	800f5fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	e0c1      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f5fe:	4b40      	ldr	r3, [pc, #256]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f602:	f003 0302 	and.w	r3, r3, #2
 800f606:	2b00      	cmp	r3, #0
 800f608:	d1ee      	bne.n	800f5e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f60a:	7dfb      	ldrb	r3, [r7, #23]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d105      	bne.n	800f61c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f610:	4b3b      	ldr	r3, [pc, #236]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f614:	4a3a      	ldr	r2, [pc, #232]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f61a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	699b      	ldr	r3, [r3, #24]
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 80ad 	beq.w	800f780 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f626:	4b36      	ldr	r3, [pc, #216]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	f003 030c 	and.w	r3, r3, #12
 800f62e:	2b08      	cmp	r3, #8
 800f630:	d060      	beq.n	800f6f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	699b      	ldr	r3, [r3, #24]
 800f636:	2b02      	cmp	r3, #2
 800f638:	d145      	bne.n	800f6c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f63a:	4b33      	ldr	r3, [pc, #204]	@ (800f708 <HAL_RCC_OscConfig+0x4b4>)
 800f63c:	2200      	movs	r2, #0
 800f63e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f640:	f7fe fed4 	bl	800e3ec <HAL_GetTick>
 800f644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f646:	e008      	b.n	800f65a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f648:	f7fe fed0 	bl	800e3ec <HAL_GetTick>
 800f64c:	4602      	mov	r2, r0
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	2b02      	cmp	r3, #2
 800f654:	d901      	bls.n	800f65a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800f656:	2303      	movs	r3, #3
 800f658:	e093      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f65a:	4b29      	ldr	r3, [pc, #164]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1f0      	bne.n	800f648 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	69da      	ldr	r2, [r3, #28]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6a1b      	ldr	r3, [r3, #32]
 800f66e:	431a      	orrs	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f674:	019b      	lsls	r3, r3, #6
 800f676:	431a      	orrs	r2, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f67c:	085b      	lsrs	r3, r3, #1
 800f67e:	3b01      	subs	r3, #1
 800f680:	041b      	lsls	r3, r3, #16
 800f682:	431a      	orrs	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f688:	061b      	lsls	r3, r3, #24
 800f68a:	431a      	orrs	r2, r3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f690:	071b      	lsls	r3, r3, #28
 800f692:	491b      	ldr	r1, [pc, #108]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f694:	4313      	orrs	r3, r2
 800f696:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f698:	4b1b      	ldr	r3, [pc, #108]	@ (800f708 <HAL_RCC_OscConfig+0x4b4>)
 800f69a:	2201      	movs	r2, #1
 800f69c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f69e:	f7fe fea5 	bl	800e3ec <HAL_GetTick>
 800f6a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f6a4:	e008      	b.n	800f6b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f6a6:	f7fe fea1 	bl	800e3ec <HAL_GetTick>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d901      	bls.n	800f6b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800f6b4:	2303      	movs	r3, #3
 800f6b6:	e064      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f6b8:	4b11      	ldr	r3, [pc, #68]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d0f0      	beq.n	800f6a6 <HAL_RCC_OscConfig+0x452>
 800f6c4:	e05c      	b.n	800f780 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f6c6:	4b10      	ldr	r3, [pc, #64]	@ (800f708 <HAL_RCC_OscConfig+0x4b4>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6cc:	f7fe fe8e 	bl	800e3ec <HAL_GetTick>
 800f6d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f6d2:	e008      	b.n	800f6e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f6d4:	f7fe fe8a 	bl	800e3ec <HAL_GetTick>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d901      	bls.n	800f6e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800f6e2:	2303      	movs	r3, #3
 800f6e4:	e04d      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f6e6:	4b06      	ldr	r3, [pc, #24]	@ (800f700 <HAL_RCC_OscConfig+0x4ac>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1f0      	bne.n	800f6d4 <HAL_RCC_OscConfig+0x480>
 800f6f2:	e045      	b.n	800f780 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	699b      	ldr	r3, [r3, #24]
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d107      	bne.n	800f70c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e040      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
 800f700:	40023800 	.word	0x40023800
 800f704:	40007000 	.word	0x40007000
 800f708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f70c:	4b1f      	ldr	r3, [pc, #124]	@ (800f78c <HAL_RCC_OscConfig+0x538>)
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	699b      	ldr	r3, [r3, #24]
 800f716:	2b01      	cmp	r3, #1
 800f718:	d030      	beq.n	800f77c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f724:	429a      	cmp	r2, r3
 800f726:	d129      	bne.n	800f77c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f732:	429a      	cmp	r2, r3
 800f734:	d122      	bne.n	800f77c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f736:	68fa      	ldr	r2, [r7, #12]
 800f738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f73c:	4013      	ands	r3, r2
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f744:	4293      	cmp	r3, r2
 800f746:	d119      	bne.n	800f77c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f752:	085b      	lsrs	r3, r3, #1
 800f754:	3b01      	subs	r3, #1
 800f756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f758:	429a      	cmp	r2, r3
 800f75a:	d10f      	bne.n	800f77c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f768:	429a      	cmp	r2, r3
 800f76a:	d107      	bne.n	800f77c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f776:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f778:	429a      	cmp	r2, r3
 800f77a:	d001      	beq.n	800f780 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800f77c:	2301      	movs	r3, #1
 800f77e:	e000      	b.n	800f782 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800f780:	2300      	movs	r3, #0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3718      	adds	r7, #24
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	40023800 	.word	0x40023800

0800f790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d101      	bne.n	800f7a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	e07b      	b.n	800f89a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d108      	bne.n	800f7bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f7b2:	d009      	beq.n	800f7c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	61da      	str	r2, [r3, #28]
 800f7ba:	e005      	b.n	800f7c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d106      	bne.n	800f7e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7fe f99e 	bl	800db24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2202      	movs	r2, #2
 800f7ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f810:	431a      	orrs	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f81a:	431a      	orrs	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	f003 0302 	and.w	r3, r3, #2
 800f824:	431a      	orrs	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	695b      	ldr	r3, [r3, #20]
 800f82a:	f003 0301 	and.w	r3, r3, #1
 800f82e:	431a      	orrs	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	699b      	ldr	r3, [r3, #24]
 800f834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f838:	431a      	orrs	r2, r3
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	69db      	ldr	r3, [r3, #28]
 800f83e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f842:	431a      	orrs	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a1b      	ldr	r3, [r3, #32]
 800f848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f84c:	ea42 0103 	orr.w	r1, r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f854:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	430a      	orrs	r2, r1
 800f85e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	699b      	ldr	r3, [r3, #24]
 800f864:	0c1b      	lsrs	r3, r3, #16
 800f866:	f003 0104 	and.w	r1, r3, #4
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f86e:	f003 0210 	and.w	r2, r3, #16
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	430a      	orrs	r2, r1
 800f878:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	69da      	ldr	r2, [r3, #28]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f888:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f898:	2300      	movs	r3, #0
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3708      	adds	r7, #8
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b088      	sub	sp, #32
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	60f8      	str	r0, [r7, #12]
 800f8aa:	60b9      	str	r1, [r7, #8]
 800f8ac:	603b      	str	r3, [r7, #0]
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d101      	bne.n	800f8c4 <HAL_SPI_Transmit+0x22>
 800f8c0:	2302      	movs	r3, #2
 800f8c2:	e126      	b.n	800fb12 <HAL_SPI_Transmit+0x270>
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f8cc:	f7fe fd8e 	bl	800e3ec <HAL_GetTick>
 800f8d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f8d2:	88fb      	ldrh	r3, [r7, #6]
 800f8d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d002      	beq.n	800f8e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f8e6:	e10b      	b.n	800fb00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d002      	beq.n	800f8f4 <HAL_SPI_Transmit+0x52>
 800f8ee:	88fb      	ldrh	r3, [r7, #6]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d102      	bne.n	800f8fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f8f8:	e102      	b.n	800fb00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2203      	movs	r2, #3
 800f8fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2200      	movs	r2, #0
 800f906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	68ba      	ldr	r2, [r7, #8]
 800f90c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	88fa      	ldrh	r2, [r7, #6]
 800f912:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	88fa      	ldrh	r2, [r7, #6]
 800f918:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2200      	movs	r2, #0
 800f91e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2200      	movs	r2, #0
 800f92a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2200      	movs	r2, #0
 800f930:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2200      	movs	r2, #0
 800f936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f940:	d10f      	bne.n	800f962 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f950:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f960:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f96c:	2b40      	cmp	r3, #64	@ 0x40
 800f96e:	d007      	beq.n	800f980 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f97e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f988:	d14b      	bne.n	800fa22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d002      	beq.n	800f998 <HAL_SPI_Transmit+0xf6>
 800f992:	8afb      	ldrh	r3, [r7, #22]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d13e      	bne.n	800fa16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f99c:	881a      	ldrh	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9a8:	1c9a      	adds	r2, r3, #2
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	b29a      	uxth	r2, r3
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f9bc:	e02b      	b.n	800fa16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	f003 0302 	and.w	r3, r3, #2
 800f9c8:	2b02      	cmp	r3, #2
 800f9ca:	d112      	bne.n	800f9f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9d0:	881a      	ldrh	r2, [r3, #0]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9dc:	1c9a      	adds	r2, r3, #2
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f9f0:	e011      	b.n	800fa16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f9f2:	f7fe fcfb 	bl	800e3ec <HAL_GetTick>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	683a      	ldr	r2, [r7, #0]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d803      	bhi.n	800fa0a <HAL_SPI_Transmit+0x168>
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa08:	d102      	bne.n	800fa10 <HAL_SPI_Transmit+0x16e>
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d102      	bne.n	800fa16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800fa10:	2303      	movs	r3, #3
 800fa12:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fa14:	e074      	b.n	800fb00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1ce      	bne.n	800f9be <HAL_SPI_Transmit+0x11c>
 800fa20:	e04c      	b.n	800fabc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d002      	beq.n	800fa30 <HAL_SPI_Transmit+0x18e>
 800fa2a:	8afb      	ldrh	r3, [r7, #22]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d140      	bne.n	800fab2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	330c      	adds	r3, #12
 800fa3a:	7812      	ldrb	r2, [r2, #0]
 800fa3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa42:	1c5a      	adds	r2, r3, #1
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	3b01      	subs	r3, #1
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800fa56:	e02c      	b.n	800fab2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	689b      	ldr	r3, [r3, #8]
 800fa5e:	f003 0302 	and.w	r3, r3, #2
 800fa62:	2b02      	cmp	r3, #2
 800fa64:	d113      	bne.n	800fa8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	330c      	adds	r3, #12
 800fa70:	7812      	ldrb	r2, [r2, #0]
 800fa72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa78:	1c5a      	adds	r2, r3, #1
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	3b01      	subs	r3, #1
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800fa8c:	e011      	b.n	800fab2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa8e:	f7fe fcad 	bl	800e3ec <HAL_GetTick>
 800fa92:	4602      	mov	r2, r0
 800fa94:	69bb      	ldr	r3, [r7, #24]
 800fa96:	1ad3      	subs	r3, r2, r3
 800fa98:	683a      	ldr	r2, [r7, #0]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d803      	bhi.n	800faa6 <HAL_SPI_Transmit+0x204>
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa4:	d102      	bne.n	800faac <HAL_SPI_Transmit+0x20a>
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d102      	bne.n	800fab2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800faac:	2303      	movs	r3, #3
 800faae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fab0:	e026      	b.n	800fb00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1cd      	bne.n	800fa58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fabc:	69ba      	ldr	r2, [r7, #24]
 800fabe:	6839      	ldr	r1, [r7, #0]
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	f000 fcdd 	bl	8010480 <SPI_EndRxTxTransaction>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d002      	beq.n	800fad2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	2220      	movs	r2, #32
 800fad0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d10a      	bne.n	800faf0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fada:	2300      	movs	r3, #0
 800fadc:	613b      	str	r3, [r7, #16]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	613b      	str	r3, [r7, #16]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	613b      	str	r3, [r7, #16]
 800faee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800faf8:	2301      	movs	r3, #1
 800fafa:	77fb      	strb	r3, [r7, #31]
 800fafc:	e000      	b.n	800fb00 <HAL_SPI_Transmit+0x25e>
  }

error:
 800fafe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2201      	movs	r2, #1
 800fb04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800fb10:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3720      	adds	r7, #32
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b088      	sub	sp, #32
 800fb1e:	af02      	add	r7, sp, #8
 800fb20:	60f8      	str	r0, [r7, #12]
 800fb22:	60b9      	str	r1, [r7, #8]
 800fb24:	603b      	str	r3, [r7, #0]
 800fb26:	4613      	mov	r3, r2
 800fb28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fb36:	d112      	bne.n	800fb5e <HAL_SPI_Receive+0x44>
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	689b      	ldr	r3, [r3, #8]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10e      	bne.n	800fb5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2204      	movs	r2, #4
 800fb44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800fb48:	88fa      	ldrh	r2, [r7, #6]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	4613      	mov	r3, r2
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	68b9      	ldr	r1, [r7, #8]
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f000 f8f1 	bl	800fd3c <HAL_SPI_TransmitReceive>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	e0ea      	b.n	800fd34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d101      	bne.n	800fb6c <HAL_SPI_Receive+0x52>
 800fb68:	2302      	movs	r3, #2
 800fb6a:	e0e3      	b.n	800fd34 <HAL_SPI_Receive+0x21a>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb74:	f7fe fc3a 	bl	800e3ec <HAL_GetTick>
 800fb78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d002      	beq.n	800fb8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800fb86:	2302      	movs	r3, #2
 800fb88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fb8a:	e0ca      	b.n	800fd22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d002      	beq.n	800fb98 <HAL_SPI_Receive+0x7e>
 800fb92:	88fb      	ldrh	r3, [r7, #6]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d102      	bne.n	800fb9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800fb98:	2301      	movs	r3, #1
 800fb9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fb9c:	e0c1      	b.n	800fd22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2204      	movs	r2, #4
 800fba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	68ba      	ldr	r2, [r7, #8]
 800fbb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	88fa      	ldrh	r2, [r7, #6]
 800fbb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	88fa      	ldrh	r2, [r7, #6]
 800fbbc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	689b      	ldr	r3, [r3, #8]
 800fbe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fbe4:	d10f      	bne.n	800fc06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fbf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fc04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc10:	2b40      	cmp	r3, #64	@ 0x40
 800fc12:	d007      	beq.n	800fc24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fc22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d162      	bne.n	800fcf2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800fc2c:	e02e      	b.n	800fc8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	f003 0301 	and.w	r3, r3, #1
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d115      	bne.n	800fc68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f103 020c 	add.w	r2, r3, #12
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc48:	7812      	ldrb	r2, [r2, #0]
 800fc4a:	b2d2      	uxtb	r2, r2
 800fc4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc52:	1c5a      	adds	r2, r3, #1
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fc66:	e011      	b.n	800fc8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc68:	f7fe fbc0 	bl	800e3ec <HAL_GetTick>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	683a      	ldr	r2, [r7, #0]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d803      	bhi.n	800fc80 <HAL_SPI_Receive+0x166>
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc7e:	d102      	bne.n	800fc86 <HAL_SPI_Receive+0x16c>
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d102      	bne.n	800fc8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800fc86:	2303      	movs	r3, #3
 800fc88:	75fb      	strb	r3, [r7, #23]
          goto error;
 800fc8a:	e04a      	b.n	800fd22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1cb      	bne.n	800fc2e <HAL_SPI_Receive+0x114>
 800fc96:	e031      	b.n	800fcfc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	f003 0301 	and.w	r3, r3, #1
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d113      	bne.n	800fcce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	68da      	ldr	r2, [r3, #12]
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcb0:	b292      	uxth	r2, r2
 800fcb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcb8:	1c9a      	adds	r2, r3, #2
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fccc:	e011      	b.n	800fcf2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fcce:	f7fe fb8d 	bl	800e3ec <HAL_GetTick>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	683a      	ldr	r2, [r7, #0]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d803      	bhi.n	800fce6 <HAL_SPI_Receive+0x1cc>
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fce4:	d102      	bne.n	800fcec <HAL_SPI_Receive+0x1d2>
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d102      	bne.n	800fcf2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800fcec:	2303      	movs	r3, #3
 800fcee:	75fb      	strb	r3, [r7, #23]
          goto error;
 800fcf0:	e017      	b.n	800fd22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1cd      	bne.n	800fc98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fcfc:	693a      	ldr	r2, [r7, #16]
 800fcfe:	6839      	ldr	r1, [r7, #0]
 800fd00:	68f8      	ldr	r0, [r7, #12]
 800fd02:	f000 fb57 	bl	80103b4 <SPI_EndRxTransaction>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d002      	beq.n	800fd12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2220      	movs	r2, #32
 800fd10:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d002      	beq.n	800fd20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	75fb      	strb	r3, [r7, #23]
 800fd1e:	e000      	b.n	800fd22 <HAL_SPI_Receive+0x208>
  }

error :
 800fd20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2201      	movs	r2, #1
 800fd26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800fd32:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3718      	adds	r7, #24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b08c      	sub	sp, #48	@ 0x30
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d101      	bne.n	800fd62 <HAL_SPI_TransmitReceive+0x26>
 800fd5e:	2302      	movs	r3, #2
 800fd60:	e18a      	b.n	8010078 <HAL_SPI_TransmitReceive+0x33c>
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2201      	movs	r2, #1
 800fd66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fd6a:	f7fe fb3f 	bl	800e3ec <HAL_GetTick>
 800fd6e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fd76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800fd80:	887b      	ldrh	r3, [r7, #2]
 800fd82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fd84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d00f      	beq.n	800fdac <HAL_SPI_TransmitReceive+0x70>
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd92:	d107      	bne.n	800fda4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d103      	bne.n	800fda4 <HAL_SPI_TransmitReceive+0x68>
 800fd9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fda0:	2b04      	cmp	r3, #4
 800fda2:	d003      	beq.n	800fdac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800fda4:	2302      	movs	r3, #2
 800fda6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800fdaa:	e15b      	b.n	8010064 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d005      	beq.n	800fdbe <HAL_SPI_TransmitReceive+0x82>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <HAL_SPI_TransmitReceive+0x82>
 800fdb8:	887b      	ldrh	r3, [r7, #2]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d103      	bne.n	800fdc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800fdc4:	e14e      	b.n	8010064 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b04      	cmp	r3, #4
 800fdd0:	d003      	beq.n	800fdda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2205      	movs	r2, #5
 800fdd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	887a      	ldrh	r2, [r7, #2]
 800fdea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	887a      	ldrh	r2, [r7, #2]
 800fdf0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	68ba      	ldr	r2, [r7, #8]
 800fdf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	887a      	ldrh	r2, [r7, #2]
 800fdfc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	887a      	ldrh	r2, [r7, #2]
 800fe02:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2200      	movs	r2, #0
 800fe08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe1a:	2b40      	cmp	r3, #64	@ 0x40
 800fe1c:	d007      	beq.n	800fe2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe36:	d178      	bne.n	800ff2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <HAL_SPI_TransmitReceive+0x10a>
 800fe40:	8b7b      	ldrh	r3, [r7, #26]
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d166      	bne.n	800ff14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe4a:	881a      	ldrh	r2, [r3, #0]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe56:	1c9a      	adds	r2, r3, #2
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	3b01      	subs	r3, #1
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fe6a:	e053      	b.n	800ff14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	f003 0302 	and.w	r3, r3, #2
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d11b      	bne.n	800feb2 <HAL_SPI_TransmitReceive+0x176>
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d016      	beq.n	800feb2 <HAL_SPI_TransmitReceive+0x176>
 800fe84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d113      	bne.n	800feb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe8e:	881a      	ldrh	r2, [r3, #0]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe9a:	1c9a      	adds	r2, r3, #2
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	3b01      	subs	r3, #1
 800fea8:	b29a      	uxth	r2, r3
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800feae:	2300      	movs	r3, #0
 800feb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	689b      	ldr	r3, [r3, #8]
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	2b01      	cmp	r3, #1
 800febe:	d119      	bne.n	800fef4 <HAL_SPI_TransmitReceive+0x1b8>
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d014      	beq.n	800fef4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	68da      	ldr	r2, [r3, #12]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed4:	b292      	uxth	r2, r2
 800fed6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fedc:	1c9a      	adds	r2, r3, #2
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	3b01      	subs	r3, #1
 800feea:	b29a      	uxth	r2, r3
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fef0:	2301      	movs	r3, #1
 800fef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fef4:	f7fe fa7a 	bl	800e3ec <HAL_GetTick>
 800fef8:	4602      	mov	r2, r0
 800fefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefc:	1ad3      	subs	r3, r2, r3
 800fefe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d807      	bhi.n	800ff14 <HAL_SPI_TransmitReceive+0x1d8>
 800ff04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff0a:	d003      	beq.n	800ff14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800ff12:	e0a7      	b.n	8010064 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1a6      	bne.n	800fe6c <HAL_SPI_TransmitReceive+0x130>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d1a1      	bne.n	800fe6c <HAL_SPI_TransmitReceive+0x130>
 800ff28:	e07c      	b.n	8010024 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d002      	beq.n	800ff38 <HAL_SPI_TransmitReceive+0x1fc>
 800ff32:	8b7b      	ldrh	r3, [r7, #26]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d16b      	bne.n	8010010 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	330c      	adds	r3, #12
 800ff42:	7812      	ldrb	r2, [r2, #0]
 800ff44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	3b01      	subs	r3, #1
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ff5e:	e057      	b.n	8010010 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	689b      	ldr	r3, [r3, #8]
 800ff66:	f003 0302 	and.w	r3, r3, #2
 800ff6a:	2b02      	cmp	r3, #2
 800ff6c:	d11c      	bne.n	800ffa8 <HAL_SPI_TransmitReceive+0x26c>
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d017      	beq.n	800ffa8 <HAL_SPI_TransmitReceive+0x26c>
 800ff78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d114      	bne.n	800ffa8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	330c      	adds	r3, #12
 800ff88:	7812      	ldrb	r2, [r2, #0]
 800ff8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff90:	1c5a      	adds	r2, r3, #1
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	689b      	ldr	r3, [r3, #8]
 800ffae:	f003 0301 	and.w	r3, r3, #1
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d119      	bne.n	800ffea <HAL_SPI_TransmitReceive+0x2ae>
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d014      	beq.n	800ffea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	68da      	ldr	r2, [r3, #12]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffca:	b2d2      	uxtb	r2, r2
 800ffcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffd2:	1c5a      	adds	r2, r3, #1
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	b29a      	uxth	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ffea:	f7fe f9ff 	bl	800e3ec <HAL_GetTick>
 800ffee:	4602      	mov	r2, r0
 800fff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff2:	1ad3      	subs	r3, r2, r3
 800fff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d803      	bhi.n	8010002 <HAL_SPI_TransmitReceive+0x2c6>
 800fffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010000:	d102      	bne.n	8010008 <HAL_SPI_TransmitReceive+0x2cc>
 8010002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010004:	2b00      	cmp	r3, #0
 8010006:	d103      	bne.n	8010010 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8010008:	2303      	movs	r3, #3
 801000a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 801000e:	e029      	b.n	8010064 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010014:	b29b      	uxth	r3, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	d1a2      	bne.n	800ff60 <HAL_SPI_TransmitReceive+0x224>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801001e:	b29b      	uxth	r3, r3
 8010020:	2b00      	cmp	r3, #0
 8010022:	d19d      	bne.n	800ff60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010028:	68f8      	ldr	r0, [r7, #12]
 801002a:	f000 fa29 	bl	8010480 <SPI_EndRxTxTransaction>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d006      	beq.n	8010042 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2220      	movs	r2, #32
 801003e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8010040:	e010      	b.n	8010064 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	689b      	ldr	r3, [r3, #8]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d10b      	bne.n	8010062 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801004a:	2300      	movs	r3, #0
 801004c:	617b      	str	r3, [r7, #20]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	617b      	str	r3, [r7, #20]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	617b      	str	r3, [r7, #20]
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	e000      	b.n	8010064 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2201      	movs	r2, #1
 8010068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2200      	movs	r2, #0
 8010070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8010074:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8010078:	4618      	mov	r0, r3
 801007a:	3730      	adds	r7, #48	@ 0x30
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b088      	sub	sp, #32
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d10e      	bne.n	80100c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d009      	beq.n	80100c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d004      	beq.n	80100c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	4798      	blx	r3
    return;
 80100be:	e0ce      	b.n	801025e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	f003 0302 	and.w	r3, r3, #2
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d009      	beq.n	80100de <HAL_SPI_IRQHandler+0x5e>
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d004      	beq.n	80100de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	4798      	blx	r3
    return;
 80100dc:	e0bf      	b.n	801025e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	f003 0320 	and.w	r3, r3, #32
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10a      	bne.n	80100fe <HAL_SPI_IRQHandler+0x7e>
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d105      	bne.n	80100fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f000 80b0 	beq.w	801025e <HAL_SPI_IRQHandler+0x1de>
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	f003 0320 	and.w	r3, r3, #32
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 80aa 	beq.w	801025e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801010a:	69bb      	ldr	r3, [r7, #24]
 801010c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010110:	2b00      	cmp	r3, #0
 8010112:	d023      	beq.n	801015c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801011a:	b2db      	uxtb	r3, r3
 801011c:	2b03      	cmp	r3, #3
 801011e:	d011      	beq.n	8010144 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010124:	f043 0204 	orr.w	r2, r3, #4
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801012c:	2300      	movs	r3, #0
 801012e:	617b      	str	r3, [r7, #20]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	617b      	str	r3, [r7, #20]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	617b      	str	r3, [r7, #20]
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	e00b      	b.n	801015c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010144:	2300      	movs	r3, #0
 8010146:	613b      	str	r3, [r7, #16]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	68db      	ldr	r3, [r3, #12]
 801014e:	613b      	str	r3, [r7, #16]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	689b      	ldr	r3, [r3, #8]
 8010156:	613b      	str	r3, [r7, #16]
 8010158:	693b      	ldr	r3, [r7, #16]
        return;
 801015a:	e080      	b.n	801025e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801015c:	69bb      	ldr	r3, [r7, #24]
 801015e:	f003 0320 	and.w	r3, r3, #32
 8010162:	2b00      	cmp	r3, #0
 8010164:	d014      	beq.n	8010190 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801016a:	f043 0201 	orr.w	r2, r3, #1
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010172:	2300      	movs	r3, #0
 8010174:	60fb      	str	r3, [r7, #12]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	60fb      	str	r3, [r7, #12]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801018c:	601a      	str	r2, [r3, #0]
 801018e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00c      	beq.n	80101b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801019e:	f043 0208 	orr.w	r2, r3, #8
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80101a6:	2300      	movs	r3, #0
 80101a8:	60bb      	str	r3, [r7, #8]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	689b      	ldr	r3, [r3, #8]
 80101b0:	60bb      	str	r3, [r7, #8]
 80101b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d04f      	beq.n	801025c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	685a      	ldr	r2, [r3, #4]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80101ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	f003 0302 	and.w	r3, r3, #2
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d104      	bne.n	80101e8 <HAL_SPI_IRQHandler+0x168>
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	f003 0301 	and.w	r3, r3, #1
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d034      	beq.n	8010252 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	685a      	ldr	r2, [r3, #4]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f022 0203 	bic.w	r2, r2, #3
 80101f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d011      	beq.n	8010224 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010204:	4a17      	ldr	r2, [pc, #92]	@ (8010264 <HAL_SPI_IRQHandler+0x1e4>)
 8010206:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801020c:	4618      	mov	r0, r3
 801020e:	f7fe fa9e 	bl	800e74e <HAL_DMA_Abort_IT>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801021c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010228:	2b00      	cmp	r3, #0
 801022a:	d016      	beq.n	801025a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010230:	4a0c      	ldr	r2, [pc, #48]	@ (8010264 <HAL_SPI_IRQHandler+0x1e4>)
 8010232:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010238:	4618      	mov	r0, r3
 801023a:	f7fe fa88 	bl	800e74e <HAL_DMA_Abort_IT>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00a      	beq.n	801025a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010248:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8010250:	e003      	b.n	801025a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 f808 	bl	8010268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010258:	e000      	b.n	801025c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 801025a:	bf00      	nop
    return;
 801025c:	bf00      	nop
  }
}
 801025e:	3720      	adds	r7, #32
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	0801027d 	.word	0x0801027d

08010268 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010288:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2200      	movs	r2, #0
 801028e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2200      	movs	r2, #0
 8010294:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f7ff ffe6 	bl	8010268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801029c:	bf00      	nop
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	603b      	str	r3, [r7, #0]
 80102b0:	4613      	mov	r3, r2
 80102b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80102b4:	f7fe f89a 	bl	800e3ec <HAL_GetTick>
 80102b8:	4602      	mov	r2, r0
 80102ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102bc:	1a9b      	subs	r3, r3, r2
 80102be:	683a      	ldr	r2, [r7, #0]
 80102c0:	4413      	add	r3, r2
 80102c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80102c4:	f7fe f892 	bl	800e3ec <HAL_GetTick>
 80102c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80102ca:	4b39      	ldr	r3, [pc, #228]	@ (80103b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	015b      	lsls	r3, r3, #5
 80102d0:	0d1b      	lsrs	r3, r3, #20
 80102d2:	69fa      	ldr	r2, [r7, #28]
 80102d4:	fb02 f303 	mul.w	r3, r2, r3
 80102d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80102da:	e054      	b.n	8010386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e2:	d050      	beq.n	8010386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80102e4:	f7fe f882 	bl	800e3ec <HAL_GetTick>
 80102e8:	4602      	mov	r2, r0
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	1ad3      	subs	r3, r2, r3
 80102ee:	69fa      	ldr	r2, [r7, #28]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d902      	bls.n	80102fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d13d      	bne.n	8010376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	685a      	ldr	r2, [r3, #4]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010312:	d111      	bne.n	8010338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801031c:	d004      	beq.n	8010328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010326:	d107      	bne.n	8010338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801033c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010340:	d10f      	bne.n	8010362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2201      	movs	r2, #1
 8010366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2200      	movs	r2, #0
 801036e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8010372:	2303      	movs	r3, #3
 8010374:	e017      	b.n	80103a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d101      	bne.n	8010380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801037c:	2300      	movs	r3, #0
 801037e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	3b01      	subs	r3, #1
 8010384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	689a      	ldr	r2, [r3, #8]
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	4013      	ands	r3, r2
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	429a      	cmp	r2, r3
 8010394:	bf0c      	ite	eq
 8010396:	2301      	moveq	r3, #1
 8010398:	2300      	movne	r3, #0
 801039a:	b2db      	uxtb	r3, r3
 801039c:	461a      	mov	r2, r3
 801039e:	79fb      	ldrb	r3, [r7, #7]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d19b      	bne.n	80102dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80103a4:	2300      	movs	r3, #0
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3720      	adds	r7, #32
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	20000008 	.word	0x20000008

080103b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af02      	add	r7, sp, #8
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80103c8:	d111      	bne.n	80103ee <SPI_EndRxTransaction+0x3a>
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103d2:	d004      	beq.n	80103de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	689b      	ldr	r3, [r3, #8]
 80103d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103dc:	d107      	bne.n	80103ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80103ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80103f6:	d12a      	bne.n	801044e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010400:	d012      	beq.n	8010428 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	2200      	movs	r2, #0
 801040a:	2180      	movs	r1, #128	@ 0x80
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f7ff ff49 	bl	80102a4 <SPI_WaitFlagStateUntilTimeout>
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	d02d      	beq.n	8010474 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801041c:	f043 0220 	orr.w	r2, r3, #32
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010424:	2303      	movs	r3, #3
 8010426:	e026      	b.n	8010476 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	2200      	movs	r2, #0
 8010430:	2101      	movs	r1, #1
 8010432:	68f8      	ldr	r0, [r7, #12]
 8010434:	f7ff ff36 	bl	80102a4 <SPI_WaitFlagStateUntilTimeout>
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d01a      	beq.n	8010474 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010442:	f043 0220 	orr.w	r2, r3, #32
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801044a:	2303      	movs	r3, #3
 801044c:	e013      	b.n	8010476 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	2200      	movs	r2, #0
 8010456:	2101      	movs	r1, #1
 8010458:	68f8      	ldr	r0, [r7, #12]
 801045a:	f7ff ff23 	bl	80102a4 <SPI_WaitFlagStateUntilTimeout>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d007      	beq.n	8010474 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010468:	f043 0220 	orr.w	r2, r3, #32
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010470:	2303      	movs	r3, #3
 8010472:	e000      	b.n	8010476 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
	...

08010480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af02      	add	r7, sp, #8
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801048c:	4b1b      	ldr	r3, [pc, #108]	@ (80104fc <SPI_EndRxTxTransaction+0x7c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a1b      	ldr	r2, [pc, #108]	@ (8010500 <SPI_EndRxTxTransaction+0x80>)
 8010492:	fba2 2303 	umull	r2, r3, r2, r3
 8010496:	0d5b      	lsrs	r3, r3, #21
 8010498:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801049c:	fb02 f303 	mul.w	r3, r2, r3
 80104a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80104aa:	d112      	bne.n	80104d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	2200      	movs	r2, #0
 80104b4:	2180      	movs	r1, #128	@ 0x80
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	f7ff fef4 	bl	80102a4 <SPI_WaitFlagStateUntilTimeout>
 80104bc:	4603      	mov	r3, r0
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d016      	beq.n	80104f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104c6:	f043 0220 	orr.w	r2, r3, #32
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80104ce:	2303      	movs	r3, #3
 80104d0:	e00f      	b.n	80104f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00a      	beq.n	80104ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	3b01      	subs	r3, #1
 80104dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104e8:	2b80      	cmp	r3, #128	@ 0x80
 80104ea:	d0f2      	beq.n	80104d2 <SPI_EndRxTxTransaction+0x52>
 80104ec:	e000      	b.n	80104f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80104ee:	bf00      	nop
  }

  return HAL_OK;
 80104f0:	2300      	movs	r3, #0
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3718      	adds	r7, #24
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	20000008 	.word	0x20000008
 8010500:	165e9f81 	.word	0x165e9f81

08010504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d101      	bne.n	8010516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010512:	2301      	movs	r3, #1
 8010514:	e041      	b.n	801059a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801051c:	b2db      	uxtb	r3, r3
 801051e:	2b00      	cmp	r3, #0
 8010520:	d106      	bne.n	8010530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2200      	movs	r2, #0
 8010526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7fd fbee 	bl	800dd0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2202      	movs	r2, #2
 8010534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	3304      	adds	r3, #4
 8010540:	4619      	mov	r1, r3
 8010542:	4610      	mov	r0, r2
 8010544:	f000 fba8 	bl	8010c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2201      	movs	r2, #1
 8010554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2201      	movs	r2, #1
 801055c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2201      	movs	r2, #1
 8010564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2201      	movs	r2, #1
 801056c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2201      	movs	r2, #1
 801057c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2201      	movs	r2, #1
 8010584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2201      	movs	r2, #1
 801058c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2201      	movs	r2, #1
 8010594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
	...

080105a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b085      	sub	sp, #20
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d001      	beq.n	80105bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80105b8:	2301      	movs	r3, #1
 80105ba:	e04e      	b.n	801065a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2202      	movs	r2, #2
 80105c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68da      	ldr	r2, [r3, #12]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f042 0201 	orr.w	r2, r2, #1
 80105d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a23      	ldr	r2, [pc, #140]	@ (8010668 <HAL_TIM_Base_Start_IT+0xc4>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d022      	beq.n	8010624 <HAL_TIM_Base_Start_IT+0x80>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105e6:	d01d      	beq.n	8010624 <HAL_TIM_Base_Start_IT+0x80>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a1f      	ldr	r2, [pc, #124]	@ (801066c <HAL_TIM_Base_Start_IT+0xc8>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d018      	beq.n	8010624 <HAL_TIM_Base_Start_IT+0x80>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	4a1e      	ldr	r2, [pc, #120]	@ (8010670 <HAL_TIM_Base_Start_IT+0xcc>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d013      	beq.n	8010624 <HAL_TIM_Base_Start_IT+0x80>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	4a1c      	ldr	r2, [pc, #112]	@ (8010674 <HAL_TIM_Base_Start_IT+0xd0>)
 8010602:	4293      	cmp	r3, r2
 8010604:	d00e      	beq.n	8010624 <HAL_TIM_Base_Start_IT+0x80>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	4a1b      	ldr	r2, [pc, #108]	@ (8010678 <HAL_TIM_Base_Start_IT+0xd4>)
 801060c:	4293      	cmp	r3, r2
 801060e:	d009      	beq.n	8010624 <HAL_TIM_Base_Start_IT+0x80>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4a19      	ldr	r2, [pc, #100]	@ (801067c <HAL_TIM_Base_Start_IT+0xd8>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d004      	beq.n	8010624 <HAL_TIM_Base_Start_IT+0x80>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	4a18      	ldr	r2, [pc, #96]	@ (8010680 <HAL_TIM_Base_Start_IT+0xdc>)
 8010620:	4293      	cmp	r3, r2
 8010622:	d111      	bne.n	8010648 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	689b      	ldr	r3, [r3, #8]
 801062a:	f003 0307 	and.w	r3, r3, #7
 801062e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2b06      	cmp	r3, #6
 8010634:	d010      	beq.n	8010658 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f042 0201 	orr.w	r2, r2, #1
 8010644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010646:	e007      	b.n	8010658 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f042 0201 	orr.w	r2, r2, #1
 8010656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	3714      	adds	r7, #20
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop
 8010668:	40010000 	.word	0x40010000
 801066c:	40000400 	.word	0x40000400
 8010670:	40000800 	.word	0x40000800
 8010674:	40000c00 	.word	0x40000c00
 8010678:	40010400 	.word	0x40010400
 801067c:	40014000 	.word	0x40014000
 8010680:	40001800 	.word	0x40001800

08010684 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d101      	bne.n	8010696 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010692:	2301      	movs	r3, #1
 8010694:	e041      	b.n	801071a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801069c:	b2db      	uxtb	r3, r3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d106      	bne.n	80106b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f7fd fae0 	bl	800dc70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2202      	movs	r2, #2
 80106b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	3304      	adds	r3, #4
 80106c0:	4619      	mov	r1, r3
 80106c2:	4610      	mov	r0, r2
 80106c4:	f000 fae8 	bl	8010c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2201      	movs	r2, #1
 80106cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2201      	movs	r2, #1
 80106dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2201      	movs	r2, #1
 80106e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2201      	movs	r2, #1
 80106ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2201      	movs	r2, #1
 80106f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2201      	movs	r2, #1
 80106fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2201      	movs	r2, #1
 8010704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2201      	movs	r2, #1
 801070c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2201      	movs	r2, #1
 8010714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}

08010722 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b082      	sub	sp, #8
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	f003 0302 	and.w	r3, r3, #2
 8010734:	2b02      	cmp	r3, #2
 8010736:	d122      	bne.n	801077e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	f003 0302 	and.w	r3, r3, #2
 8010742:	2b02      	cmp	r3, #2
 8010744:	d11b      	bne.n	801077e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f06f 0202 	mvn.w	r2, #2
 801074e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2201      	movs	r2, #1
 8010754:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	699b      	ldr	r3, [r3, #24]
 801075c:	f003 0303 	and.w	r3, r3, #3
 8010760:	2b00      	cmp	r3, #0
 8010762:	d003      	beq.n	801076c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f000 fa78 	bl	8010c5a <HAL_TIM_IC_CaptureCallback>
 801076a:	e005      	b.n	8010778 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 fa6a 	bl	8010c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f000 fa7b 	bl	8010c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	691b      	ldr	r3, [r3, #16]
 8010784:	f003 0304 	and.w	r3, r3, #4
 8010788:	2b04      	cmp	r3, #4
 801078a:	d122      	bne.n	80107d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	f003 0304 	and.w	r3, r3, #4
 8010796:	2b04      	cmp	r3, #4
 8010798:	d11b      	bne.n	80107d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f06f 0204 	mvn.w	r2, #4
 80107a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2202      	movs	r2, #2
 80107a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	699b      	ldr	r3, [r3, #24]
 80107b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d003      	beq.n	80107c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 fa4e 	bl	8010c5a <HAL_TIM_IC_CaptureCallback>
 80107be:	e005      	b.n	80107cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f000 fa40 	bl	8010c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 fa51 	bl	8010c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2200      	movs	r2, #0
 80107d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	f003 0308 	and.w	r3, r3, #8
 80107dc:	2b08      	cmp	r3, #8
 80107de:	d122      	bne.n	8010826 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	f003 0308 	and.w	r3, r3, #8
 80107ea:	2b08      	cmp	r3, #8
 80107ec:	d11b      	bne.n	8010826 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f06f 0208 	mvn.w	r2, #8
 80107f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2204      	movs	r2, #4
 80107fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	69db      	ldr	r3, [r3, #28]
 8010804:	f003 0303 	and.w	r3, r3, #3
 8010808:	2b00      	cmp	r3, #0
 801080a:	d003      	beq.n	8010814 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f000 fa24 	bl	8010c5a <HAL_TIM_IC_CaptureCallback>
 8010812:	e005      	b.n	8010820 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f000 fa16 	bl	8010c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 fa27 	bl	8010c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	691b      	ldr	r3, [r3, #16]
 801082c:	f003 0310 	and.w	r3, r3, #16
 8010830:	2b10      	cmp	r3, #16
 8010832:	d122      	bne.n	801087a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	f003 0310 	and.w	r3, r3, #16
 801083e:	2b10      	cmp	r3, #16
 8010840:	d11b      	bne.n	801087a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f06f 0210 	mvn.w	r2, #16
 801084a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2208      	movs	r2, #8
 8010850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	69db      	ldr	r3, [r3, #28]
 8010858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801085c:	2b00      	cmp	r3, #0
 801085e:	d003      	beq.n	8010868 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 f9fa 	bl	8010c5a <HAL_TIM_IC_CaptureCallback>
 8010866:	e005      	b.n	8010874 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 f9ec 	bl	8010c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 f9fd 	bl	8010c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	f003 0301 	and.w	r3, r3, #1
 8010884:	2b01      	cmp	r3, #1
 8010886:	d10e      	bne.n	80108a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	f003 0301 	and.w	r3, r3, #1
 8010892:	2b01      	cmp	r3, #1
 8010894:	d107      	bne.n	80108a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f06f 0201 	mvn.w	r2, #1
 801089e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f7fd f907 	bl	800dab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108b0:	2b80      	cmp	r3, #128	@ 0x80
 80108b2:	d10e      	bne.n	80108d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108be:	2b80      	cmp	r3, #128	@ 0x80
 80108c0:	d107      	bne.n	80108d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80108ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 fda5 	bl	801141c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	691b      	ldr	r3, [r3, #16]
 80108d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108dc:	2b40      	cmp	r3, #64	@ 0x40
 80108de:	d10e      	bne.n	80108fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108ea:	2b40      	cmp	r3, #64	@ 0x40
 80108ec:	d107      	bne.n	80108fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80108f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f000 f9c2 	bl	8010c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	691b      	ldr	r3, [r3, #16]
 8010904:	f003 0320 	and.w	r3, r3, #32
 8010908:	2b20      	cmp	r3, #32
 801090a:	d10e      	bne.n	801092a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	f003 0320 	and.w	r3, r3, #32
 8010916:	2b20      	cmp	r3, #32
 8010918:	d107      	bne.n	801092a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f06f 0220 	mvn.w	r2, #32
 8010922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 fd6f 	bl	8011408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801092a:	bf00      	nop
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
	...

08010934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b086      	sub	sp, #24
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010940:	2300      	movs	r3, #0
 8010942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801094a:	2b01      	cmp	r3, #1
 801094c:	d101      	bne.n	8010952 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801094e:	2302      	movs	r3, #2
 8010950:	e0ae      	b.n	8010ab0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2201      	movs	r2, #1
 8010956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2b0c      	cmp	r3, #12
 801095e:	f200 809f 	bhi.w	8010aa0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8010962:	a201      	add	r2, pc, #4	@ (adr r2, 8010968 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010968:	0801099d 	.word	0x0801099d
 801096c:	08010aa1 	.word	0x08010aa1
 8010970:	08010aa1 	.word	0x08010aa1
 8010974:	08010aa1 	.word	0x08010aa1
 8010978:	080109dd 	.word	0x080109dd
 801097c:	08010aa1 	.word	0x08010aa1
 8010980:	08010aa1 	.word	0x08010aa1
 8010984:	08010aa1 	.word	0x08010aa1
 8010988:	08010a1f 	.word	0x08010a1f
 801098c:	08010aa1 	.word	0x08010aa1
 8010990:	08010aa1 	.word	0x08010aa1
 8010994:	08010aa1 	.word	0x08010aa1
 8010998:	08010a5f 	.word	0x08010a5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68b9      	ldr	r1, [r7, #8]
 80109a2:	4618      	mov	r0, r3
 80109a4:	f000 fa18 	bl	8010dd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	699a      	ldr	r2, [r3, #24]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f042 0208 	orr.w	r2, r2, #8
 80109b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	699a      	ldr	r2, [r3, #24]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f022 0204 	bic.w	r2, r2, #4
 80109c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	6999      	ldr	r1, [r3, #24]
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	691a      	ldr	r2, [r3, #16]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	430a      	orrs	r2, r1
 80109d8:	619a      	str	r2, [r3, #24]
      break;
 80109da:	e064      	b.n	8010aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	68b9      	ldr	r1, [r7, #8]
 80109e2:	4618      	mov	r0, r3
 80109e4:	f000 fa68 	bl	8010eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	699a      	ldr	r2, [r3, #24]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80109f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	699a      	ldr	r2, [r3, #24]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	6999      	ldr	r1, [r3, #24]
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	691b      	ldr	r3, [r3, #16]
 8010a12:	021a      	lsls	r2, r3, #8
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	430a      	orrs	r2, r1
 8010a1a:	619a      	str	r2, [r3, #24]
      break;
 8010a1c:	e043      	b.n	8010aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	68b9      	ldr	r1, [r7, #8]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 fabd 	bl	8010fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	69da      	ldr	r2, [r3, #28]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f042 0208 	orr.w	r2, r2, #8
 8010a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	69da      	ldr	r2, [r3, #28]
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f022 0204 	bic.w	r2, r2, #4
 8010a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	69d9      	ldr	r1, [r3, #28]
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	691a      	ldr	r2, [r3, #16]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	430a      	orrs	r2, r1
 8010a5a:	61da      	str	r2, [r3, #28]
      break;
 8010a5c:	e023      	b.n	8010aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	68b9      	ldr	r1, [r7, #8]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 fb11 	bl	801108c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	69da      	ldr	r2, [r3, #28]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	69da      	ldr	r2, [r3, #28]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	69d9      	ldr	r1, [r3, #28]
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	691b      	ldr	r3, [r3, #16]
 8010a94:	021a      	lsls	r2, r3, #8
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	430a      	orrs	r2, r1
 8010a9c:	61da      	str	r2, [r3, #28]
      break;
 8010a9e:	e002      	b.n	8010aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8010aa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3718      	adds	r7, #24
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d101      	bne.n	8010ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8010ad0:	2302      	movs	r3, #2
 8010ad2:	e0b4      	b.n	8010c3e <HAL_TIM_ConfigClockSource+0x186>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2202      	movs	r2, #2
 8010ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010afa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	68ba      	ldr	r2, [r7, #8]
 8010b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010b0c:	d03e      	beq.n	8010b8c <HAL_TIM_ConfigClockSource+0xd4>
 8010b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010b12:	f200 8087 	bhi.w	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
 8010b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b1a:	f000 8086 	beq.w	8010c2a <HAL_TIM_ConfigClockSource+0x172>
 8010b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b22:	d87f      	bhi.n	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
 8010b24:	2b70      	cmp	r3, #112	@ 0x70
 8010b26:	d01a      	beq.n	8010b5e <HAL_TIM_ConfigClockSource+0xa6>
 8010b28:	2b70      	cmp	r3, #112	@ 0x70
 8010b2a:	d87b      	bhi.n	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
 8010b2c:	2b60      	cmp	r3, #96	@ 0x60
 8010b2e:	d050      	beq.n	8010bd2 <HAL_TIM_ConfigClockSource+0x11a>
 8010b30:	2b60      	cmp	r3, #96	@ 0x60
 8010b32:	d877      	bhi.n	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
 8010b34:	2b50      	cmp	r3, #80	@ 0x50
 8010b36:	d03c      	beq.n	8010bb2 <HAL_TIM_ConfigClockSource+0xfa>
 8010b38:	2b50      	cmp	r3, #80	@ 0x50
 8010b3a:	d873      	bhi.n	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
 8010b3c:	2b40      	cmp	r3, #64	@ 0x40
 8010b3e:	d058      	beq.n	8010bf2 <HAL_TIM_ConfigClockSource+0x13a>
 8010b40:	2b40      	cmp	r3, #64	@ 0x40
 8010b42:	d86f      	bhi.n	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
 8010b44:	2b30      	cmp	r3, #48	@ 0x30
 8010b46:	d064      	beq.n	8010c12 <HAL_TIM_ConfigClockSource+0x15a>
 8010b48:	2b30      	cmp	r3, #48	@ 0x30
 8010b4a:	d86b      	bhi.n	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
 8010b4c:	2b20      	cmp	r3, #32
 8010b4e:	d060      	beq.n	8010c12 <HAL_TIM_ConfigClockSource+0x15a>
 8010b50:	2b20      	cmp	r3, #32
 8010b52:	d867      	bhi.n	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d05c      	beq.n	8010c12 <HAL_TIM_ConfigClockSource+0x15a>
 8010b58:	2b10      	cmp	r3, #16
 8010b5a:	d05a      	beq.n	8010c12 <HAL_TIM_ConfigClockSource+0x15a>
 8010b5c:	e062      	b.n	8010c24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6818      	ldr	r0, [r3, #0]
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	6899      	ldr	r1, [r3, #8]
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	685a      	ldr	r2, [r3, #4]
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	68db      	ldr	r3, [r3, #12]
 8010b6e:	f000 fb5d 	bl	801122c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	68ba      	ldr	r2, [r7, #8]
 8010b88:	609a      	str	r2, [r3, #8]
      break;
 8010b8a:	e04f      	b.n	8010c2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6818      	ldr	r0, [r3, #0]
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	6899      	ldr	r1, [r3, #8]
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	685a      	ldr	r2, [r3, #4]
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	f000 fb46 	bl	801122c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	689a      	ldr	r2, [r3, #8]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010bae:	609a      	str	r2, [r3, #8]
      break;
 8010bb0:	e03c      	b.n	8010c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6818      	ldr	r0, [r3, #0]
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	6859      	ldr	r1, [r3, #4]
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	f000 faba 	bl	8011138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2150      	movs	r1, #80	@ 0x50
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f000 fb13 	bl	80111f6 <TIM_ITRx_SetConfig>
      break;
 8010bd0:	e02c      	b.n	8010c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6818      	ldr	r0, [r3, #0]
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	6859      	ldr	r1, [r3, #4]
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	461a      	mov	r2, r3
 8010be0:	f000 fad9 	bl	8011196 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2160      	movs	r1, #96	@ 0x60
 8010bea:	4618      	mov	r0, r3
 8010bec:	f000 fb03 	bl	80111f6 <TIM_ITRx_SetConfig>
      break;
 8010bf0:	e01c      	b.n	8010c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6818      	ldr	r0, [r3, #0]
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	6859      	ldr	r1, [r3, #4]
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	461a      	mov	r2, r3
 8010c00:	f000 fa9a 	bl	8011138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2140      	movs	r1, #64	@ 0x40
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f000 faf3 	bl	80111f6 <TIM_ITRx_SetConfig>
      break;
 8010c10:	e00c      	b.n	8010c2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681a      	ldr	r2, [r3, #0]
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	4610      	mov	r0, r2
 8010c1e:	f000 faea 	bl	80111f6 <TIM_ITRx_SetConfig>
      break;
 8010c22:	e003      	b.n	8010c2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010c24:	2301      	movs	r3, #1
 8010c26:	73fb      	strb	r3, [r7, #15]
      break;
 8010c28:	e000      	b.n	8010c2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010c46:	b480      	push	{r7}
 8010c48:	b083      	sub	sp, #12
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010c4e:	bf00      	nop
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010c5a:	b480      	push	{r7}
 8010c5c:	b083      	sub	sp, #12
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010c62:	bf00      	nop
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010c6e:	b480      	push	{r7}
 8010c70:	b083      	sub	sp, #12
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010c76:	bf00      	nop
 8010c78:	370c      	adds	r7, #12
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010c82:	b480      	push	{r7}
 8010c84:	b083      	sub	sp, #12
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010c8a:	bf00      	nop
 8010c8c:	370c      	adds	r7, #12
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr
	...

08010c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4a40      	ldr	r2, [pc, #256]	@ (8010dac <TIM_Base_SetConfig+0x114>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d013      	beq.n	8010cd8 <TIM_Base_SetConfig+0x40>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010cb6:	d00f      	beq.n	8010cd8 <TIM_Base_SetConfig+0x40>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4a3d      	ldr	r2, [pc, #244]	@ (8010db0 <TIM_Base_SetConfig+0x118>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d00b      	beq.n	8010cd8 <TIM_Base_SetConfig+0x40>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8010db4 <TIM_Base_SetConfig+0x11c>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d007      	beq.n	8010cd8 <TIM_Base_SetConfig+0x40>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	4a3b      	ldr	r2, [pc, #236]	@ (8010db8 <TIM_Base_SetConfig+0x120>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d003      	beq.n	8010cd8 <TIM_Base_SetConfig+0x40>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8010dbc <TIM_Base_SetConfig+0x124>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d108      	bne.n	8010cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	68fa      	ldr	r2, [r7, #12]
 8010ce6:	4313      	orrs	r3, r2
 8010ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4a2f      	ldr	r2, [pc, #188]	@ (8010dac <TIM_Base_SetConfig+0x114>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d02b      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010cf8:	d027      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8010db0 <TIM_Base_SetConfig+0x118>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d023      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4a2b      	ldr	r2, [pc, #172]	@ (8010db4 <TIM_Base_SetConfig+0x11c>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d01f      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8010db8 <TIM_Base_SetConfig+0x120>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d01b      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	4a29      	ldr	r2, [pc, #164]	@ (8010dbc <TIM_Base_SetConfig+0x124>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d017      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	4a28      	ldr	r2, [pc, #160]	@ (8010dc0 <TIM_Base_SetConfig+0x128>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d013      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	4a27      	ldr	r2, [pc, #156]	@ (8010dc4 <TIM_Base_SetConfig+0x12c>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d00f      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	4a26      	ldr	r2, [pc, #152]	@ (8010dc8 <TIM_Base_SetConfig+0x130>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d00b      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4a25      	ldr	r2, [pc, #148]	@ (8010dcc <TIM_Base_SetConfig+0x134>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d007      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	4a24      	ldr	r2, [pc, #144]	@ (8010dd0 <TIM_Base_SetConfig+0x138>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d003      	beq.n	8010d4a <TIM_Base_SetConfig+0xb2>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4a23      	ldr	r2, [pc, #140]	@ (8010dd4 <TIM_Base_SetConfig+0x13c>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d108      	bne.n	8010d5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	68db      	ldr	r3, [r3, #12]
 8010d56:	68fa      	ldr	r2, [r7, #12]
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	695b      	ldr	r3, [r3, #20]
 8010d66:	4313      	orrs	r3, r2
 8010d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	68fa      	ldr	r2, [r7, #12]
 8010d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	689a      	ldr	r2, [r3, #8]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4a0a      	ldr	r2, [pc, #40]	@ (8010dac <TIM_Base_SetConfig+0x114>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d003      	beq.n	8010d90 <TIM_Base_SetConfig+0xf8>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8010dbc <TIM_Base_SetConfig+0x124>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d103      	bne.n	8010d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	691a      	ldr	r2, [r3, #16]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	615a      	str	r2, [r3, #20]
}
 8010d9e:	bf00      	nop
 8010da0:	3714      	adds	r7, #20
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop
 8010dac:	40010000 	.word	0x40010000
 8010db0:	40000400 	.word	0x40000400
 8010db4:	40000800 	.word	0x40000800
 8010db8:	40000c00 	.word	0x40000c00
 8010dbc:	40010400 	.word	0x40010400
 8010dc0:	40014000 	.word	0x40014000
 8010dc4:	40014400 	.word	0x40014400
 8010dc8:	40014800 	.word	0x40014800
 8010dcc:	40001800 	.word	0x40001800
 8010dd0:	40001c00 	.word	0x40001c00
 8010dd4:	40002000 	.word	0x40002000

08010dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010dd8:	b480      	push	{r7}
 8010dda:	b087      	sub	sp, #28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6a1b      	ldr	r3, [r3, #32]
 8010de6:	f023 0201 	bic.w	r2, r3, #1
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6a1b      	ldr	r3, [r3, #32]
 8010df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	699b      	ldr	r3, [r3, #24]
 8010dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f023 0303 	bic.w	r3, r3, #3
 8010e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	68fa      	ldr	r2, [r7, #12]
 8010e16:	4313      	orrs	r3, r2
 8010e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	f023 0302 	bic.w	r3, r3, #2
 8010e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	697a      	ldr	r2, [r7, #20]
 8010e28:	4313      	orrs	r3, r2
 8010e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	4a20      	ldr	r2, [pc, #128]	@ (8010eb0 <TIM_OC1_SetConfig+0xd8>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d003      	beq.n	8010e3c <TIM_OC1_SetConfig+0x64>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	4a1f      	ldr	r2, [pc, #124]	@ (8010eb4 <TIM_OC1_SetConfig+0xdc>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d10c      	bne.n	8010e56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	f023 0308 	bic.w	r3, r3, #8
 8010e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	697a      	ldr	r2, [r7, #20]
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	f023 0304 	bic.w	r3, r3, #4
 8010e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4a15      	ldr	r2, [pc, #84]	@ (8010eb0 <TIM_OC1_SetConfig+0xd8>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d003      	beq.n	8010e66 <TIM_OC1_SetConfig+0x8e>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4a14      	ldr	r2, [pc, #80]	@ (8010eb4 <TIM_OC1_SetConfig+0xdc>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d111      	bne.n	8010e8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	695b      	ldr	r3, [r3, #20]
 8010e7a:	693a      	ldr	r2, [r7, #16]
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	699b      	ldr	r3, [r3, #24]
 8010e84:	693a      	ldr	r2, [r7, #16]
 8010e86:	4313      	orrs	r3, r2
 8010e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	693a      	ldr	r2, [r7, #16]
 8010e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	68fa      	ldr	r2, [r7, #12]
 8010e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	685a      	ldr	r2, [r3, #4]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	697a      	ldr	r2, [r7, #20]
 8010ea2:	621a      	str	r2, [r3, #32]
}
 8010ea4:	bf00      	nop
 8010ea6:	371c      	adds	r7, #28
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr
 8010eb0:	40010000 	.word	0x40010000
 8010eb4:	40010400 	.word	0x40010400

08010eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b087      	sub	sp, #28
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6a1b      	ldr	r3, [r3, #32]
 8010ec6:	f023 0210 	bic.w	r2, r3, #16
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6a1b      	ldr	r3, [r3, #32]
 8010ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	699b      	ldr	r3, [r3, #24]
 8010ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	021b      	lsls	r3, r3, #8
 8010ef6:	68fa      	ldr	r2, [r7, #12]
 8010ef8:	4313      	orrs	r3, r2
 8010efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	f023 0320 	bic.w	r3, r3, #32
 8010f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	011b      	lsls	r3, r3, #4
 8010f0a:	697a      	ldr	r2, [r7, #20]
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a22      	ldr	r2, [pc, #136]	@ (8010f9c <TIM_OC2_SetConfig+0xe4>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d003      	beq.n	8010f20 <TIM_OC2_SetConfig+0x68>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a21      	ldr	r2, [pc, #132]	@ (8010fa0 <TIM_OC2_SetConfig+0xe8>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d10d      	bne.n	8010f3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	011b      	lsls	r3, r3, #4
 8010f2e:	697a      	ldr	r2, [r7, #20]
 8010f30:	4313      	orrs	r3, r2
 8010f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4a17      	ldr	r2, [pc, #92]	@ (8010f9c <TIM_OC2_SetConfig+0xe4>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d003      	beq.n	8010f4c <TIM_OC2_SetConfig+0x94>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	4a16      	ldr	r2, [pc, #88]	@ (8010fa0 <TIM_OC2_SetConfig+0xe8>)
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d113      	bne.n	8010f74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	695b      	ldr	r3, [r3, #20]
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	693a      	ldr	r2, [r7, #16]
 8010f64:	4313      	orrs	r3, r2
 8010f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	699b      	ldr	r3, [r3, #24]
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	693a      	ldr	r2, [r7, #16]
 8010f70:	4313      	orrs	r3, r2
 8010f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	693a      	ldr	r2, [r7, #16]
 8010f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	68fa      	ldr	r2, [r7, #12]
 8010f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	685a      	ldr	r2, [r3, #4]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	697a      	ldr	r2, [r7, #20]
 8010f8c:	621a      	str	r2, [r3, #32]
}
 8010f8e:	bf00      	nop
 8010f90:	371c      	adds	r7, #28
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop
 8010f9c:	40010000 	.word	0x40010000
 8010fa0:	40010400 	.word	0x40010400

08010fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b087      	sub	sp, #28
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6a1b      	ldr	r3, [r3, #32]
 8010fb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a1b      	ldr	r3, [r3, #32]
 8010fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	69db      	ldr	r3, [r3, #28]
 8010fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f023 0303 	bic.w	r3, r3, #3
 8010fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	021b      	lsls	r3, r3, #8
 8010ff4:	697a      	ldr	r2, [r7, #20]
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4a21      	ldr	r2, [pc, #132]	@ (8011084 <TIM_OC3_SetConfig+0xe0>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d003      	beq.n	801100a <TIM_OC3_SetConfig+0x66>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4a20      	ldr	r2, [pc, #128]	@ (8011088 <TIM_OC3_SetConfig+0xe4>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d10d      	bne.n	8011026 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	021b      	lsls	r3, r3, #8
 8011018:	697a      	ldr	r2, [r7, #20]
 801101a:	4313      	orrs	r3, r2
 801101c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4a16      	ldr	r2, [pc, #88]	@ (8011084 <TIM_OC3_SetConfig+0xe0>)
 801102a:	4293      	cmp	r3, r2
 801102c:	d003      	beq.n	8011036 <TIM_OC3_SetConfig+0x92>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4a15      	ldr	r2, [pc, #84]	@ (8011088 <TIM_OC3_SetConfig+0xe4>)
 8011032:	4293      	cmp	r3, r2
 8011034:	d113      	bne.n	801105e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801103c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	695b      	ldr	r3, [r3, #20]
 801104a:	011b      	lsls	r3, r3, #4
 801104c:	693a      	ldr	r2, [r7, #16]
 801104e:	4313      	orrs	r3, r2
 8011050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	699b      	ldr	r3, [r3, #24]
 8011056:	011b      	lsls	r3, r3, #4
 8011058:	693a      	ldr	r2, [r7, #16]
 801105a:	4313      	orrs	r3, r2
 801105c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	693a      	ldr	r2, [r7, #16]
 8011062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	685a      	ldr	r2, [r3, #4]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	697a      	ldr	r2, [r7, #20]
 8011076:	621a      	str	r2, [r3, #32]
}
 8011078:	bf00      	nop
 801107a:	371c      	adds	r7, #28
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	40010000 	.word	0x40010000
 8011088:	40010400 	.word	0x40010400

0801108c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801108c:	b480      	push	{r7}
 801108e:	b087      	sub	sp, #28
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6a1b      	ldr	r3, [r3, #32]
 801109a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6a1b      	ldr	r3, [r3, #32]
 80110a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	69db      	ldr	r3, [r3, #28]
 80110b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80110ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80110c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	021b      	lsls	r3, r3, #8
 80110ca:	68fa      	ldr	r2, [r7, #12]
 80110cc:	4313      	orrs	r3, r2
 80110ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80110d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	689b      	ldr	r3, [r3, #8]
 80110dc:	031b      	lsls	r3, r3, #12
 80110de:	693a      	ldr	r2, [r7, #16]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4a12      	ldr	r2, [pc, #72]	@ (8011130 <TIM_OC4_SetConfig+0xa4>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d003      	beq.n	80110f4 <TIM_OC4_SetConfig+0x68>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	4a11      	ldr	r2, [pc, #68]	@ (8011134 <TIM_OC4_SetConfig+0xa8>)
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d109      	bne.n	8011108 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80110fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	695b      	ldr	r3, [r3, #20]
 8011100:	019b      	lsls	r3, r3, #6
 8011102:	697a      	ldr	r2, [r7, #20]
 8011104:	4313      	orrs	r3, r2
 8011106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	697a      	ldr	r2, [r7, #20]
 801110c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	685a      	ldr	r2, [r3, #4]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	693a      	ldr	r2, [r7, #16]
 8011120:	621a      	str	r2, [r3, #32]
}
 8011122:	bf00      	nop
 8011124:	371c      	adds	r7, #28
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop
 8011130:	40010000 	.word	0x40010000
 8011134:	40010400 	.word	0x40010400

08011138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011138:	b480      	push	{r7}
 801113a:	b087      	sub	sp, #28
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6a1b      	ldr	r3, [r3, #32]
 8011148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6a1b      	ldr	r3, [r3, #32]
 801114e:	f023 0201 	bic.w	r2, r3, #1
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	699b      	ldr	r3, [r3, #24]
 801115a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	011b      	lsls	r3, r3, #4
 8011168:	693a      	ldr	r2, [r7, #16]
 801116a:	4313      	orrs	r3, r2
 801116c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	f023 030a 	bic.w	r3, r3, #10
 8011174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	4313      	orrs	r3, r2
 801117c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	693a      	ldr	r2, [r7, #16]
 8011182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	697a      	ldr	r2, [r7, #20]
 8011188:	621a      	str	r2, [r3, #32]
}
 801118a:	bf00      	nop
 801118c:	371c      	adds	r7, #28
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr

08011196 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011196:	b480      	push	{r7}
 8011198:	b087      	sub	sp, #28
 801119a:	af00      	add	r7, sp, #0
 801119c:	60f8      	str	r0, [r7, #12]
 801119e:	60b9      	str	r1, [r7, #8]
 80111a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6a1b      	ldr	r3, [r3, #32]
 80111a6:	f023 0210 	bic.w	r2, r3, #16
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	699b      	ldr	r3, [r3, #24]
 80111b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	6a1b      	ldr	r3, [r3, #32]
 80111b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80111c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	031b      	lsls	r3, r3, #12
 80111c6:	697a      	ldr	r2, [r7, #20]
 80111c8:	4313      	orrs	r3, r2
 80111ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80111d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	011b      	lsls	r3, r3, #4
 80111d8:	693a      	ldr	r2, [r7, #16]
 80111da:	4313      	orrs	r3, r2
 80111dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	697a      	ldr	r2, [r7, #20]
 80111e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	693a      	ldr	r2, [r7, #16]
 80111e8:	621a      	str	r2, [r3, #32]
}
 80111ea:	bf00      	nop
 80111ec:	371c      	adds	r7, #28
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr

080111f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80111f6:	b480      	push	{r7}
 80111f8:	b085      	sub	sp, #20
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
 80111fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	689b      	ldr	r3, [r3, #8]
 8011204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801120c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801120e:	683a      	ldr	r2, [r7, #0]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	4313      	orrs	r3, r2
 8011214:	f043 0307 	orr.w	r3, r3, #7
 8011218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	609a      	str	r2, [r3, #8]
}
 8011220:	bf00      	nop
 8011222:	3714      	adds	r7, #20
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801122c:	b480      	push	{r7}
 801122e:	b087      	sub	sp, #28
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	021a      	lsls	r2, r3, #8
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	431a      	orrs	r2, r3
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	4313      	orrs	r3, r2
 8011254:	697a      	ldr	r2, [r7, #20]
 8011256:	4313      	orrs	r3, r2
 8011258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	609a      	str	r2, [r3, #8]
}
 8011260:	bf00      	nop
 8011262:	371c      	adds	r7, #28
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801126c:	b480      	push	{r7}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801127c:	2b01      	cmp	r3, #1
 801127e:	d101      	bne.n	8011284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011280:	2302      	movs	r3, #2
 8011282:	e05a      	b.n	801133a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2201      	movs	r2, #1
 8011288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2202      	movs	r2, #2
 8011290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	68fa      	ldr	r2, [r7, #12]
 80112b2:	4313      	orrs	r3, r2
 80112b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	4a21      	ldr	r2, [pc, #132]	@ (8011348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d022      	beq.n	801130e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80112d0:	d01d      	beq.n	801130e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4a1d      	ldr	r2, [pc, #116]	@ (801134c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d018      	beq.n	801130e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4a1b      	ldr	r2, [pc, #108]	@ (8011350 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d013      	beq.n	801130e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a1a      	ldr	r2, [pc, #104]	@ (8011354 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d00e      	beq.n	801130e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4a18      	ldr	r2, [pc, #96]	@ (8011358 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d009      	beq.n	801130e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4a17      	ldr	r2, [pc, #92]	@ (801135c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011300:	4293      	cmp	r3, r2
 8011302:	d004      	beq.n	801130e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4a15      	ldr	r2, [pc, #84]	@ (8011360 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d10c      	bne.n	8011328 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	68ba      	ldr	r2, [r7, #8]
 801131c:	4313      	orrs	r3, r2
 801131e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2201      	movs	r2, #1
 801132c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011338:	2300      	movs	r3, #0
}
 801133a:	4618      	mov	r0, r3
 801133c:	3714      	adds	r7, #20
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop
 8011348:	40010000 	.word	0x40010000
 801134c:	40000400 	.word	0x40000400
 8011350:	40000800 	.word	0x40000800
 8011354:	40000c00 	.word	0x40000c00
 8011358:	40010400 	.word	0x40010400
 801135c:	40014000 	.word	0x40014000
 8011360:	40001800 	.word	0x40001800

08011364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011364:	b480      	push	{r7}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801136e:	2300      	movs	r3, #0
 8011370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011378:	2b01      	cmp	r3, #1
 801137a:	d101      	bne.n	8011380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801137c:	2302      	movs	r3, #2
 801137e:	e03d      	b.n	80113fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2201      	movs	r2, #1
 8011384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	4313      	orrs	r3, r2
 8011394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	689b      	ldr	r3, [r3, #8]
 80113a0:	4313      	orrs	r3, r2
 80113a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	4313      	orrs	r3, r2
 80113b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4313      	orrs	r3, r2
 80113be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	691b      	ldr	r3, [r3, #16]
 80113ca:	4313      	orrs	r3, r2
 80113cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	695b      	ldr	r3, [r3, #20]
 80113d8:	4313      	orrs	r3, r2
 80113da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	69db      	ldr	r3, [r3, #28]
 80113e6:	4313      	orrs	r3, r2
 80113e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	68fa      	ldr	r2, [r7, #12]
 80113f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80113fa:	2300      	movs	r3, #0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3714      	adds	r7, #20
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011410:	bf00      	nop
 8011412:	370c      	adds	r7, #12
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr

0801141c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011424:	bf00      	nop
 8011426:	370c      	adds	r7, #12
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d101      	bne.n	8011442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801143e:	2301      	movs	r3, #1
 8011440:	e03f      	b.n	80114c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011448:	b2db      	uxtb	r3, r3
 801144a:	2b00      	cmp	r3, #0
 801144c:	d106      	bne.n	801145c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f7fc fd4a 	bl	800def0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2224      	movs	r2, #36	@ 0x24
 8011460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	68da      	ldr	r2, [r3, #12]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fdd5 	bl	8012024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	691a      	ldr	r2, [r3, #16]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	695a      	ldr	r2, [r3, #20]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	68da      	ldr	r2, [r3, #12]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80114a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2200      	movs	r2, #0
 80114ae:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2220      	movs	r2, #32
 80114b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2220      	movs	r2, #32
 80114bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80114c0:	2300      	movs	r3, #0
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3708      	adds	r7, #8
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b08a      	sub	sp, #40	@ 0x28
 80114ce:	af02      	add	r7, sp, #8
 80114d0:	60f8      	str	r0, [r7, #12]
 80114d2:	60b9      	str	r1, [r7, #8]
 80114d4:	603b      	str	r3, [r7, #0]
 80114d6:	4613      	mov	r3, r2
 80114d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80114da:	2300      	movs	r3, #0
 80114dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	2b20      	cmp	r3, #32
 80114e8:	d17c      	bne.n	80115e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d002      	beq.n	80114f6 <HAL_UART_Transmit+0x2c>
 80114f0:	88fb      	ldrh	r3, [r7, #6]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d101      	bne.n	80114fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80114f6:	2301      	movs	r3, #1
 80114f8:	e075      	b.n	80115e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011500:	2b01      	cmp	r3, #1
 8011502:	d101      	bne.n	8011508 <HAL_UART_Transmit+0x3e>
 8011504:	2302      	movs	r3, #2
 8011506:	e06e      	b.n	80115e6 <HAL_UART_Transmit+0x11c>
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2201      	movs	r2, #1
 801150c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2200      	movs	r2, #0
 8011514:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2221      	movs	r2, #33	@ 0x21
 801151a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801151e:	f7fc ff65 	bl	800e3ec <HAL_GetTick>
 8011522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	88fa      	ldrh	r2, [r7, #6]
 8011528:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	88fa      	ldrh	r2, [r7, #6]
 801152e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011538:	d108      	bne.n	801154c <HAL_UART_Transmit+0x82>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d104      	bne.n	801154c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011542:	2300      	movs	r3, #0
 8011544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	61bb      	str	r3, [r7, #24]
 801154a:	e003      	b.n	8011554 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011550:	2300      	movs	r3, #0
 8011552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	2200      	movs	r2, #0
 8011558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 801155c:	e02a      	b.n	80115b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	2200      	movs	r2, #0
 8011566:	2180      	movs	r1, #128	@ 0x80
 8011568:	68f8      	ldr	r0, [r7, #12]
 801156a:	f000 fb15 	bl	8011b98 <UART_WaitOnFlagUntilTimeout>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d001      	beq.n	8011578 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011574:	2303      	movs	r3, #3
 8011576:	e036      	b.n	80115e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d10b      	bne.n	8011596 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801157e:	69bb      	ldr	r3, [r7, #24]
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	461a      	mov	r2, r3
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801158c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	3302      	adds	r3, #2
 8011592:	61bb      	str	r3, [r7, #24]
 8011594:	e007      	b.n	80115a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	781a      	ldrb	r2, [r3, #0]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	3301      	adds	r3, #1
 80115a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	3b01      	subs	r3, #1
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1cf      	bne.n	801155e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	9300      	str	r3, [sp, #0]
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	2200      	movs	r2, #0
 80115c6:	2140      	movs	r1, #64	@ 0x40
 80115c8:	68f8      	ldr	r0, [r7, #12]
 80115ca:	f000 fae5 	bl	8011b98 <UART_WaitOnFlagUntilTimeout>
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d001      	beq.n	80115d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80115d4:	2303      	movs	r3, #3
 80115d6:	e006      	b.n	80115e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	2220      	movs	r2, #32
 80115dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80115e0:	2300      	movs	r3, #0
 80115e2:	e000      	b.n	80115e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80115e4:	2302      	movs	r3, #2
  }
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3720      	adds	r7, #32
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b084      	sub	sp, #16
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	60f8      	str	r0, [r7, #12]
 80115f6:	60b9      	str	r1, [r7, #8]
 80115f8:	4613      	mov	r3, r2
 80115fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011602:	b2db      	uxtb	r3, r3
 8011604:	2b20      	cmp	r3, #32
 8011606:	d11d      	bne.n	8011644 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <HAL_UART_Receive_IT+0x26>
 801160e:	88fb      	ldrh	r3, [r7, #6]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d101      	bne.n	8011618 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8011614:	2301      	movs	r3, #1
 8011616:	e016      	b.n	8011646 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801161e:	2b01      	cmp	r3, #1
 8011620:	d101      	bne.n	8011626 <HAL_UART_Receive_IT+0x38>
 8011622:	2302      	movs	r3, #2
 8011624:	e00f      	b.n	8011646 <HAL_UART_Receive_IT+0x58>
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2201      	movs	r2, #1
 801162a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2200      	movs	r2, #0
 8011632:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011634:	88fb      	ldrh	r3, [r7, #6]
 8011636:	461a      	mov	r2, r3
 8011638:	68b9      	ldr	r1, [r7, #8]
 801163a:	68f8      	ldr	r0, [r7, #12]
 801163c:	f000 fb1a 	bl	8011c74 <UART_Start_Receive_IT>
 8011640:	4603      	mov	r3, r0
 8011642:	e000      	b.n	8011646 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8011644:	2302      	movs	r3, #2
  }
}
 8011646:	4618      	mov	r0, r3
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
	...

08011650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b0ba      	sub	sp, #232	@ 0xe8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	695b      	ldr	r3, [r3, #20]
 8011672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8011676:	2300      	movs	r3, #0
 8011678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 801167c:	2300      	movs	r3, #0
 801167e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011686:	f003 030f 	and.w	r3, r3, #15
 801168a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 801168e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011692:	2b00      	cmp	r3, #0
 8011694:	d10f      	bne.n	80116b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801169a:	f003 0320 	and.w	r3, r3, #32
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d009      	beq.n	80116b6 <HAL_UART_IRQHandler+0x66>
 80116a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116a6:	f003 0320 	and.w	r3, r3, #32
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d003      	beq.n	80116b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fbfd 	bl	8011eae <UART_Receive_IT>
      return;
 80116b4:	e256      	b.n	8011b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80116b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f000 80de 	beq.w	801187c <HAL_UART_IRQHandler+0x22c>
 80116c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80116c4:	f003 0301 	and.w	r3, r3, #1
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d106      	bne.n	80116da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80116cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f000 80d1 	beq.w	801187c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80116da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116de:	f003 0301 	and.w	r3, r3, #1
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00b      	beq.n	80116fe <HAL_UART_IRQHandler+0xae>
 80116e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d005      	beq.n	80116fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116f6:	f043 0201 	orr.w	r2, r3, #1
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80116fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011702:	f003 0304 	and.w	r3, r3, #4
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00b      	beq.n	8011722 <HAL_UART_IRQHandler+0xd2>
 801170a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801170e:	f003 0301 	and.w	r3, r3, #1
 8011712:	2b00      	cmp	r3, #0
 8011714:	d005      	beq.n	8011722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801171a:	f043 0202 	orr.w	r2, r3, #2
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011726:	f003 0302 	and.w	r3, r3, #2
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00b      	beq.n	8011746 <HAL_UART_IRQHandler+0xf6>
 801172e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011732:	f003 0301 	and.w	r3, r3, #1
 8011736:	2b00      	cmp	r3, #0
 8011738:	d005      	beq.n	8011746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801173e:	f043 0204 	orr.w	r2, r3, #4
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801174a:	f003 0308 	and.w	r3, r3, #8
 801174e:	2b00      	cmp	r3, #0
 8011750:	d011      	beq.n	8011776 <HAL_UART_IRQHandler+0x126>
 8011752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011756:	f003 0320 	and.w	r3, r3, #32
 801175a:	2b00      	cmp	r3, #0
 801175c:	d105      	bne.n	801176a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801175e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011762:	f003 0301 	and.w	r3, r3, #1
 8011766:	2b00      	cmp	r3, #0
 8011768:	d005      	beq.n	8011776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801176e:	f043 0208 	orr.w	r2, r3, #8
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801177a:	2b00      	cmp	r3, #0
 801177c:	f000 81ed 	beq.w	8011b5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011784:	f003 0320 	and.w	r3, r3, #32
 8011788:	2b00      	cmp	r3, #0
 801178a:	d008      	beq.n	801179e <HAL_UART_IRQHandler+0x14e>
 801178c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011790:	f003 0320 	and.w	r3, r3, #32
 8011794:	2b00      	cmp	r3, #0
 8011796:	d002      	beq.n	801179e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 fb88 	bl	8011eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	695b      	ldr	r3, [r3, #20]
 80117a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117a8:	2b40      	cmp	r3, #64	@ 0x40
 80117aa:	bf0c      	ite	eq
 80117ac:	2301      	moveq	r3, #1
 80117ae:	2300      	movne	r3, #0
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117ba:	f003 0308 	and.w	r3, r3, #8
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d103      	bne.n	80117ca <HAL_UART_IRQHandler+0x17a>
 80117c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d04f      	beq.n	801186a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f000 fa90 	bl	8011cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	695b      	ldr	r3, [r3, #20]
 80117d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117da:	2b40      	cmp	r3, #64	@ 0x40
 80117dc:	d141      	bne.n	8011862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	3314      	adds	r3, #20
 80117e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80117ec:	e853 3f00 	ldrex	r3, [r3]
 80117f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80117f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80117f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3314      	adds	r3, #20
 8011806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801180a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801180e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801181a:	e841 2300 	strex	r3, r2, [r1]
 801181e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8011822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d1d9      	bne.n	80117de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801182e:	2b00      	cmp	r3, #0
 8011830:	d013      	beq.n	801185a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011836:	4a7d      	ldr	r2, [pc, #500]	@ (8011a2c <HAL_UART_IRQHandler+0x3dc>)
 8011838:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801183e:	4618      	mov	r0, r3
 8011840:	f7fc ff85 	bl	800e74e <HAL_DMA_Abort_IT>
 8011844:	4603      	mov	r3, r0
 8011846:	2b00      	cmp	r3, #0
 8011848:	d016      	beq.n	8011878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801184e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011854:	4610      	mov	r0, r2
 8011856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011858:	e00e      	b.n	8011878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f000 f986 	bl	8011b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011860:	e00a      	b.n	8011878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f000 f982 	bl	8011b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011868:	e006      	b.n	8011878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f000 f97e 	bl	8011b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2200      	movs	r2, #0
 8011874:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8011876:	e170      	b.n	8011b5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011878:	bf00      	nop
    return;
 801187a:	e16e      	b.n	8011b5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011880:	2b01      	cmp	r3, #1
 8011882:	f040 814a 	bne.w	8011b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801188a:	f003 0310 	and.w	r3, r3, #16
 801188e:	2b00      	cmp	r3, #0
 8011890:	f000 8143 	beq.w	8011b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011898:	f003 0310 	and.w	r3, r3, #16
 801189c:	2b00      	cmp	r3, #0
 801189e:	f000 813c 	beq.w	8011b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80118a2:	2300      	movs	r3, #0
 80118a4:	60bb      	str	r3, [r7, #8]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	60bb      	str	r3, [r7, #8]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	60bb      	str	r3, [r7, #8]
 80118b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	695b      	ldr	r3, [r3, #20]
 80118be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118c2:	2b40      	cmp	r3, #64	@ 0x40
 80118c4:	f040 80b4 	bne.w	8011a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	685b      	ldr	r3, [r3, #4]
 80118d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80118d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80118d8:	2b00      	cmp	r3, #0
 80118da:	f000 8140 	beq.w	8011b5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80118e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80118e6:	429a      	cmp	r2, r3
 80118e8:	f080 8139 	bcs.w	8011b5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80118f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118f8:	69db      	ldr	r3, [r3, #28]
 80118fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80118fe:	f000 8088 	beq.w	8011a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	330c      	adds	r3, #12
 8011908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011910:	e853 3f00 	ldrex	r3, [r3]
 8011914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801191c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	330c      	adds	r3, #12
 801192a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801192e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011936:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801193a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801193e:	e841 2300 	strex	r3, r2, [r1]
 8011942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8011946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1d9      	bne.n	8011902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	3314      	adds	r3, #20
 8011954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011958:	e853 3f00 	ldrex	r3, [r3]
 801195c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801195e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011960:	f023 0301 	bic.w	r3, r3, #1
 8011964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	3314      	adds	r3, #20
 801196e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011972:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011976:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011978:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801197a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801197e:	e841 2300 	strex	r3, r2, [r1]
 8011982:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011986:	2b00      	cmp	r3, #0
 8011988:	d1e1      	bne.n	801194e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	3314      	adds	r3, #20
 8011990:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011994:	e853 3f00 	ldrex	r3, [r3]
 8011998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801199a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801199c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	3314      	adds	r3, #20
 80119aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80119ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80119b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80119b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80119b6:	e841 2300 	strex	r3, r2, [r1]
 80119ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80119bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1e3      	bne.n	801198a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2220      	movs	r2, #32
 80119c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2200      	movs	r2, #0
 80119ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	330c      	adds	r3, #12
 80119d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119da:	e853 3f00 	ldrex	r3, [r3]
 80119de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80119e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119e2:	f023 0310 	bic.w	r3, r3, #16
 80119e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	330c      	adds	r3, #12
 80119f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80119f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80119f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80119fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119fc:	e841 2300 	strex	r3, r2, [r1]
 8011a00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d1e3      	bne.n	80119d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fc fe2e 	bl	800e66e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	4619      	mov	r1, r3
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f8ac 	bl	8011b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011a28:	e099      	b.n	8011b5e <HAL_UART_IRQHandler+0x50e>
 8011a2a:	bf00      	nop
 8011a2c:	08011db7 	.word	0x08011db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	1ad3      	subs	r3, r2, r3
 8011a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f000 808b 	beq.w	8011b62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	f000 8086 	beq.w	8011b62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	330c      	adds	r3, #12
 8011a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a60:	e853 3f00 	ldrex	r3, [r3]
 8011a64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	330c      	adds	r3, #12
 8011a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8011a7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8011a7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a82:	e841 2300 	strex	r3, r2, [r1]
 8011a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d1e3      	bne.n	8011a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	3314      	adds	r3, #20
 8011a94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a98:	e853 3f00 	ldrex	r3, [r3]
 8011a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8011a9e:	6a3b      	ldr	r3, [r7, #32]
 8011aa0:	f023 0301 	bic.w	r3, r3, #1
 8011aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	3314      	adds	r3, #20
 8011aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011ab2:	633a      	str	r2, [r7, #48]	@ 0x30
 8011ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011aba:	e841 2300 	strex	r3, r2, [r1]
 8011abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d1e3      	bne.n	8011a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2220      	movs	r2, #32
 8011aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	330c      	adds	r3, #12
 8011ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	e853 3f00 	ldrex	r3, [r3]
 8011ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f023 0310 	bic.w	r3, r3, #16
 8011aea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	330c      	adds	r3, #12
 8011af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8011af8:	61fa      	str	r2, [r7, #28]
 8011afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afc:	69b9      	ldr	r1, [r7, #24]
 8011afe:	69fa      	ldr	r2, [r7, #28]
 8011b00:	e841 2300 	strex	r3, r2, [r1]
 8011b04:	617b      	str	r3, [r7, #20]
   return(result);
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d1e3      	bne.n	8011ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011b10:	4619      	mov	r1, r3
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 f834 	bl	8011b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011b18:	e023      	b.n	8011b62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d009      	beq.n	8011b3a <HAL_UART_IRQHandler+0x4ea>
 8011b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d003      	beq.n	8011b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 f953 	bl	8011dde <UART_Transmit_IT>
    return;
 8011b38:	e014      	b.n	8011b64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d00e      	beq.n	8011b64 <HAL_UART_IRQHandler+0x514>
 8011b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d008      	beq.n	8011b64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f000 f993 	bl	8011e7e <UART_EndTransmit_IT>
    return;
 8011b58:	e004      	b.n	8011b64 <HAL_UART_IRQHandler+0x514>
    return;
 8011b5a:	bf00      	nop
 8011b5c:	e002      	b.n	8011b64 <HAL_UART_IRQHandler+0x514>
      return;
 8011b5e:	bf00      	nop
 8011b60:	e000      	b.n	8011b64 <HAL_UART_IRQHandler+0x514>
      return;
 8011b62:	bf00      	nop
  }
}
 8011b64:	37e8      	adds	r7, #232	@ 0xe8
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop

08011b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011b74:	bf00      	nop
 8011b76:	370c      	adds	r7, #12
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr

08011b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b083      	sub	sp, #12
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	460b      	mov	r3, r1
 8011b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011b8c:	bf00      	nop
 8011b8e:	370c      	adds	r7, #12
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr

08011b98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b090      	sub	sp, #64	@ 0x40
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	60f8      	str	r0, [r7, #12]
 8011ba0:	60b9      	str	r1, [r7, #8]
 8011ba2:	603b      	str	r3, [r7, #0]
 8011ba4:	4613      	mov	r3, r2
 8011ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ba8:	e050      	b.n	8011c4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb0:	d04c      	beq.n	8011c4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d007      	beq.n	8011bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011bb8:	f7fc fc18 	bl	800e3ec <HAL_GetTick>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	1ad3      	subs	r3, r2, r3
 8011bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d241      	bcs.n	8011c4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	330c      	adds	r3, #12
 8011bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd2:	e853 3f00 	ldrex	r3, [r3]
 8011bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bda:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	330c      	adds	r3, #12
 8011be6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011be8:	637a      	str	r2, [r7, #52]	@ 0x34
 8011bea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011bf0:	e841 2300 	strex	r3, r2, [r1]
 8011bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d1e5      	bne.n	8011bc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	3314      	adds	r3, #20
 8011c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	e853 3f00 	ldrex	r3, [r3]
 8011c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	f023 0301 	bic.w	r3, r3, #1
 8011c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	3314      	adds	r3, #20
 8011c1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c1c:	623a      	str	r2, [r7, #32]
 8011c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c20:	69f9      	ldr	r1, [r7, #28]
 8011c22:	6a3a      	ldr	r2, [r7, #32]
 8011c24:	e841 2300 	strex	r3, r2, [r1]
 8011c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8011c2a:	69bb      	ldr	r3, [r7, #24]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d1e5      	bne.n	8011bfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2220      	movs	r2, #32
 8011c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2220      	movs	r2, #32
 8011c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	2200      	movs	r2, #0
 8011c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8011c48:	2303      	movs	r3, #3
 8011c4a:	e00f      	b.n	8011c6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	681a      	ldr	r2, [r3, #0]
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	4013      	ands	r3, r2
 8011c56:	68ba      	ldr	r2, [r7, #8]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	bf0c      	ite	eq
 8011c5c:	2301      	moveq	r3, #1
 8011c5e:	2300      	movne	r3, #0
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	461a      	mov	r2, r3
 8011c64:	79fb      	ldrb	r3, [r7, #7]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d09f      	beq.n	8011baa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3740      	adds	r7, #64	@ 0x40
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b085      	sub	sp, #20
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	4613      	mov	r3, r2
 8011c80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	68ba      	ldr	r2, [r7, #8]
 8011c86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	88fa      	ldrh	r2, [r7, #6]
 8011c8c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	88fa      	ldrh	r2, [r7, #6]
 8011c92:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2200      	movs	r2, #0
 8011c98:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2222      	movs	r2, #34	@ 0x22
 8011c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	691b      	ldr	r3, [r3, #16]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d007      	beq.n	8011cc2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	68da      	ldr	r2, [r3, #12]
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011cc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	695a      	ldr	r2, [r3, #20]
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	f042 0201 	orr.w	r2, r2, #1
 8011cd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	68da      	ldr	r2, [r3, #12]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f042 0220 	orr.w	r2, r2, #32
 8011ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011ce2:	2300      	movs	r3, #0
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3714      	adds	r7, #20
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b095      	sub	sp, #84	@ 0x54
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	330c      	adds	r3, #12
 8011cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d02:	e853 3f00 	ldrex	r3, [r3]
 8011d06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	330c      	adds	r3, #12
 8011d16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011d18:	643a      	str	r2, [r7, #64]	@ 0x40
 8011d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011d1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011d20:	e841 2300 	strex	r3, r2, [r1]
 8011d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1e5      	bne.n	8011cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	3314      	adds	r3, #20
 8011d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d34:	6a3b      	ldr	r3, [r7, #32]
 8011d36:	e853 3f00 	ldrex	r3, [r3]
 8011d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	f023 0301 	bic.w	r3, r3, #1
 8011d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3314      	adds	r3, #20
 8011d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011d4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d54:	e841 2300 	strex	r3, r2, [r1]
 8011d58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1e5      	bne.n	8011d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d119      	bne.n	8011d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	330c      	adds	r3, #12
 8011d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	e853 3f00 	ldrex	r3, [r3]
 8011d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	f023 0310 	bic.w	r3, r3, #16
 8011d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	330c      	adds	r3, #12
 8011d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d88:	61ba      	str	r2, [r7, #24]
 8011d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d8c:	6979      	ldr	r1, [r7, #20]
 8011d8e:	69ba      	ldr	r2, [r7, #24]
 8011d90:	e841 2300 	strex	r3, r2, [r1]
 8011d94:	613b      	str	r3, [r7, #16]
   return(result);
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d1e5      	bne.n	8011d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2220      	movs	r2, #32
 8011da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2200      	movs	r2, #0
 8011da8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011daa:	bf00      	nop
 8011dac:	3754      	adds	r7, #84	@ 0x54
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr

08011db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011db6:	b580      	push	{r7, lr}
 8011db8:	b084      	sub	sp, #16
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f7ff fecb 	bl	8011b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dd6:	bf00      	nop
 8011dd8:	3710      	adds	r7, #16
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011dde:	b480      	push	{r7}
 8011de0:	b085      	sub	sp, #20
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b21      	cmp	r3, #33	@ 0x21
 8011df0:	d13e      	bne.n	8011e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	689b      	ldr	r3, [r3, #8]
 8011df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011dfa:	d114      	bne.n	8011e26 <UART_Transmit_IT+0x48>
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	691b      	ldr	r3, [r3, #16]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d110      	bne.n	8011e26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6a1b      	ldr	r3, [r3, #32]
 8011e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	881b      	ldrh	r3, [r3, #0]
 8011e0e:	461a      	mov	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6a1b      	ldr	r3, [r3, #32]
 8011e1e:	1c9a      	adds	r2, r3, #2
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	621a      	str	r2, [r3, #32]
 8011e24:	e008      	b.n	8011e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6a1b      	ldr	r3, [r3, #32]
 8011e2a:	1c59      	adds	r1, r3, #1
 8011e2c:	687a      	ldr	r2, [r7, #4]
 8011e2e:	6211      	str	r1, [r2, #32]
 8011e30:	781a      	ldrb	r2, [r3, #0]
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	3b01      	subs	r3, #1
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	4619      	mov	r1, r3
 8011e46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d10f      	bne.n	8011e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	68da      	ldr	r2, [r3, #12]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	68da      	ldr	r2, [r3, #12]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	e000      	b.n	8011e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011e70:	2302      	movs	r3, #2
  }
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3714      	adds	r7, #20
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b082      	sub	sp, #8
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	68da      	ldr	r2, [r3, #12]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2220      	movs	r2, #32
 8011e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f7fb fd6e 	bl	800d980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011ea4:	2300      	movs	r3, #0
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b08c      	sub	sp, #48	@ 0x30
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	2b22      	cmp	r3, #34	@ 0x22
 8011ec0:	f040 80ab 	bne.w	801201a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011ecc:	d117      	bne.n	8011efe <UART_Receive_IT+0x50>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	691b      	ldr	r3, [r3, #16]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d113      	bne.n	8011efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ef6:	1c9a      	adds	r2, r3, #2
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	629a      	str	r2, [r3, #40]	@ 0x28
 8011efc:	e026      	b.n	8011f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011f04:	2300      	movs	r3, #0
 8011f06:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f10:	d007      	beq.n	8011f22 <UART_Receive_IT+0x74>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	689b      	ldr	r3, [r3, #8]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d10a      	bne.n	8011f30 <UART_Receive_IT+0x82>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	691b      	ldr	r3, [r3, #16]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d106      	bne.n	8011f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f2c:	701a      	strb	r2, [r3, #0]
 8011f2e:	e008      	b.n	8011f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	685b      	ldr	r3, [r3, #4]
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f3c:	b2da      	uxtb	r2, r3
 8011f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f46:	1c5a      	adds	r2, r3, #1
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	3b01      	subs	r3, #1
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	4619      	mov	r1, r3
 8011f5a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d15a      	bne.n	8012016 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	68da      	ldr	r2, [r3, #12]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f022 0220 	bic.w	r2, r2, #32
 8011f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	68da      	ldr	r2, [r3, #12]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	695a      	ldr	r2, [r3, #20]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f022 0201 	bic.w	r2, r2, #1
 8011f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2220      	movs	r2, #32
 8011f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f9c:	2b01      	cmp	r3, #1
 8011f9e:	d135      	bne.n	801200c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	330c      	adds	r3, #12
 8011fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	e853 3f00 	ldrex	r3, [r3]
 8011fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	f023 0310 	bic.w	r3, r3, #16
 8011fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	330c      	adds	r3, #12
 8011fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fc6:	623a      	str	r2, [r7, #32]
 8011fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fca:	69f9      	ldr	r1, [r7, #28]
 8011fcc:	6a3a      	ldr	r2, [r7, #32]
 8011fce:	e841 2300 	strex	r3, r2, [r1]
 8011fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1e5      	bne.n	8011fa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	f003 0310 	and.w	r3, r3, #16
 8011fe4:	2b10      	cmp	r3, #16
 8011fe6:	d10a      	bne.n	8011ffe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011fe8:	2300      	movs	r3, #0
 8011fea:	60fb      	str	r3, [r7, #12]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	60fb      	str	r3, [r7, #12]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	60fb      	str	r3, [r7, #12]
 8011ffc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012002:	4619      	mov	r1, r3
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7ff fdbb 	bl	8011b80 <HAL_UARTEx_RxEventCallback>
 801200a:	e002      	b.n	8012012 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7fb fcc1 	bl	800d994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	e002      	b.n	801201c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8012016:	2300      	movs	r3, #0
 8012018:	e000      	b.n	801201c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801201a:	2302      	movs	r3, #2
  }
}
 801201c:	4618      	mov	r0, r3
 801201e:	3730      	adds	r7, #48	@ 0x30
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012028:	b0c0      	sub	sp, #256	@ 0x100
 801202a:	af00      	add	r7, sp, #0
 801202c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012040:	68d9      	ldr	r1, [r3, #12]
 8012042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	ea40 0301 	orr.w	r3, r0, r1
 801204c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012052:	689a      	ldr	r2, [r3, #8]
 8012054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012058:	691b      	ldr	r3, [r3, #16]
 801205a:	431a      	orrs	r2, r3
 801205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012060:	695b      	ldr	r3, [r3, #20]
 8012062:	431a      	orrs	r2, r3
 8012064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012068:	69db      	ldr	r3, [r3, #28]
 801206a:	4313      	orrs	r3, r2
 801206c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801207c:	f021 010c 	bic.w	r1, r1, #12
 8012080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801208a:	430b      	orrs	r3, r1
 801208c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	695b      	ldr	r3, [r3, #20]
 8012096:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801209e:	6999      	ldr	r1, [r3, #24]
 80120a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	ea40 0301 	orr.w	r3, r0, r1
 80120aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80120ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	4b8f      	ldr	r3, [pc, #572]	@ (80122f0 <UART_SetConfig+0x2cc>)
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d005      	beq.n	80120c4 <UART_SetConfig+0xa0>
 80120b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	4b8d      	ldr	r3, [pc, #564]	@ (80122f4 <UART_SetConfig+0x2d0>)
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d104      	bne.n	80120ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80120c4:	f7fc fe82 	bl	800edcc <HAL_RCC_GetPCLK2Freq>
 80120c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80120cc:	e003      	b.n	80120d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80120ce:	f7fc fe69 	bl	800eda4 <HAL_RCC_GetPCLK1Freq>
 80120d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120da:	69db      	ldr	r3, [r3, #28]
 80120dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80120e0:	f040 810c 	bne.w	80122fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80120e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80120e8:	2200      	movs	r2, #0
 80120ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80120ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80120f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80120f6:	4622      	mov	r2, r4
 80120f8:	462b      	mov	r3, r5
 80120fa:	1891      	adds	r1, r2, r2
 80120fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80120fe:	415b      	adcs	r3, r3
 8012100:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8012106:	4621      	mov	r1, r4
 8012108:	eb12 0801 	adds.w	r8, r2, r1
 801210c:	4629      	mov	r1, r5
 801210e:	eb43 0901 	adc.w	r9, r3, r1
 8012112:	f04f 0200 	mov.w	r2, #0
 8012116:	f04f 0300 	mov.w	r3, #0
 801211a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801211e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012126:	4690      	mov	r8, r2
 8012128:	4699      	mov	r9, r3
 801212a:	4623      	mov	r3, r4
 801212c:	eb18 0303 	adds.w	r3, r8, r3
 8012130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012134:	462b      	mov	r3, r5
 8012136:	eb49 0303 	adc.w	r3, r9, r3
 801213a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	2200      	movs	r2, #0
 8012146:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801214a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801214e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012152:	460b      	mov	r3, r1
 8012154:	18db      	adds	r3, r3, r3
 8012156:	653b      	str	r3, [r7, #80]	@ 0x50
 8012158:	4613      	mov	r3, r2
 801215a:	eb42 0303 	adc.w	r3, r2, r3
 801215e:	657b      	str	r3, [r7, #84]	@ 0x54
 8012160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8012164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8012168:	f7ee fdbe 	bl	8000ce8 <__aeabi_uldivmod>
 801216c:	4602      	mov	r2, r0
 801216e:	460b      	mov	r3, r1
 8012170:	4b61      	ldr	r3, [pc, #388]	@ (80122f8 <UART_SetConfig+0x2d4>)
 8012172:	fba3 2302 	umull	r2, r3, r3, r2
 8012176:	095b      	lsrs	r3, r3, #5
 8012178:	011c      	lsls	r4, r3, #4
 801217a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801217e:	2200      	movs	r2, #0
 8012180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012184:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8012188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801218c:	4642      	mov	r2, r8
 801218e:	464b      	mov	r3, r9
 8012190:	1891      	adds	r1, r2, r2
 8012192:	64b9      	str	r1, [r7, #72]	@ 0x48
 8012194:	415b      	adcs	r3, r3
 8012196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801219c:	4641      	mov	r1, r8
 801219e:	eb12 0a01 	adds.w	sl, r2, r1
 80121a2:	4649      	mov	r1, r9
 80121a4:	eb43 0b01 	adc.w	fp, r3, r1
 80121a8:	f04f 0200 	mov.w	r2, #0
 80121ac:	f04f 0300 	mov.w	r3, #0
 80121b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80121b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80121b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80121bc:	4692      	mov	sl, r2
 80121be:	469b      	mov	fp, r3
 80121c0:	4643      	mov	r3, r8
 80121c2:	eb1a 0303 	adds.w	r3, sl, r3
 80121c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80121ca:	464b      	mov	r3, r9
 80121cc:	eb4b 0303 	adc.w	r3, fp, r3
 80121d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80121d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	2200      	movs	r2, #0
 80121dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80121e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80121e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80121e8:	460b      	mov	r3, r1
 80121ea:	18db      	adds	r3, r3, r3
 80121ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80121ee:	4613      	mov	r3, r2
 80121f0:	eb42 0303 	adc.w	r3, r2, r3
 80121f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80121f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80121fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80121fe:	f7ee fd73 	bl	8000ce8 <__aeabi_uldivmod>
 8012202:	4602      	mov	r2, r0
 8012204:	460b      	mov	r3, r1
 8012206:	4611      	mov	r1, r2
 8012208:	4b3b      	ldr	r3, [pc, #236]	@ (80122f8 <UART_SetConfig+0x2d4>)
 801220a:	fba3 2301 	umull	r2, r3, r3, r1
 801220e:	095b      	lsrs	r3, r3, #5
 8012210:	2264      	movs	r2, #100	@ 0x64
 8012212:	fb02 f303 	mul.w	r3, r2, r3
 8012216:	1acb      	subs	r3, r1, r3
 8012218:	00db      	lsls	r3, r3, #3
 801221a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801221e:	4b36      	ldr	r3, [pc, #216]	@ (80122f8 <UART_SetConfig+0x2d4>)
 8012220:	fba3 2302 	umull	r2, r3, r3, r2
 8012224:	095b      	lsrs	r3, r3, #5
 8012226:	005b      	lsls	r3, r3, #1
 8012228:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801222c:	441c      	add	r4, r3
 801222e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012232:	2200      	movs	r2, #0
 8012234:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012238:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801223c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8012240:	4642      	mov	r2, r8
 8012242:	464b      	mov	r3, r9
 8012244:	1891      	adds	r1, r2, r2
 8012246:	63b9      	str	r1, [r7, #56]	@ 0x38
 8012248:	415b      	adcs	r3, r3
 801224a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801224c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012250:	4641      	mov	r1, r8
 8012252:	1851      	adds	r1, r2, r1
 8012254:	6339      	str	r1, [r7, #48]	@ 0x30
 8012256:	4649      	mov	r1, r9
 8012258:	414b      	adcs	r3, r1
 801225a:	637b      	str	r3, [r7, #52]	@ 0x34
 801225c:	f04f 0200 	mov.w	r2, #0
 8012260:	f04f 0300 	mov.w	r3, #0
 8012264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8012268:	4659      	mov	r1, fp
 801226a:	00cb      	lsls	r3, r1, #3
 801226c:	4651      	mov	r1, sl
 801226e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012272:	4651      	mov	r1, sl
 8012274:	00ca      	lsls	r2, r1, #3
 8012276:	4610      	mov	r0, r2
 8012278:	4619      	mov	r1, r3
 801227a:	4603      	mov	r3, r0
 801227c:	4642      	mov	r2, r8
 801227e:	189b      	adds	r3, r3, r2
 8012280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012284:	464b      	mov	r3, r9
 8012286:	460a      	mov	r2, r1
 8012288:	eb42 0303 	adc.w	r3, r2, r3
 801228c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801229c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80122a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80122a4:	460b      	mov	r3, r1
 80122a6:	18db      	adds	r3, r3, r3
 80122a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80122aa:	4613      	mov	r3, r2
 80122ac:	eb42 0303 	adc.w	r3, r2, r3
 80122b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80122b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80122ba:	f7ee fd15 	bl	8000ce8 <__aeabi_uldivmod>
 80122be:	4602      	mov	r2, r0
 80122c0:	460b      	mov	r3, r1
 80122c2:	4b0d      	ldr	r3, [pc, #52]	@ (80122f8 <UART_SetConfig+0x2d4>)
 80122c4:	fba3 1302 	umull	r1, r3, r3, r2
 80122c8:	095b      	lsrs	r3, r3, #5
 80122ca:	2164      	movs	r1, #100	@ 0x64
 80122cc:	fb01 f303 	mul.w	r3, r1, r3
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	00db      	lsls	r3, r3, #3
 80122d4:	3332      	adds	r3, #50	@ 0x32
 80122d6:	4a08      	ldr	r2, [pc, #32]	@ (80122f8 <UART_SetConfig+0x2d4>)
 80122d8:	fba2 2303 	umull	r2, r3, r2, r3
 80122dc:	095b      	lsrs	r3, r3, #5
 80122de:	f003 0207 	and.w	r2, r3, #7
 80122e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	4422      	add	r2, r4
 80122ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80122ec:	e106      	b.n	80124fc <UART_SetConfig+0x4d8>
 80122ee:	bf00      	nop
 80122f0:	40011000 	.word	0x40011000
 80122f4:	40011400 	.word	0x40011400
 80122f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80122fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012300:	2200      	movs	r2, #0
 8012302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012306:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801230a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801230e:	4642      	mov	r2, r8
 8012310:	464b      	mov	r3, r9
 8012312:	1891      	adds	r1, r2, r2
 8012314:	6239      	str	r1, [r7, #32]
 8012316:	415b      	adcs	r3, r3
 8012318:	627b      	str	r3, [r7, #36]	@ 0x24
 801231a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801231e:	4641      	mov	r1, r8
 8012320:	1854      	adds	r4, r2, r1
 8012322:	4649      	mov	r1, r9
 8012324:	eb43 0501 	adc.w	r5, r3, r1
 8012328:	f04f 0200 	mov.w	r2, #0
 801232c:	f04f 0300 	mov.w	r3, #0
 8012330:	00eb      	lsls	r3, r5, #3
 8012332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012336:	00e2      	lsls	r2, r4, #3
 8012338:	4614      	mov	r4, r2
 801233a:	461d      	mov	r5, r3
 801233c:	4643      	mov	r3, r8
 801233e:	18e3      	adds	r3, r4, r3
 8012340:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012344:	464b      	mov	r3, r9
 8012346:	eb45 0303 	adc.w	r3, r5, r3
 801234a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	2200      	movs	r2, #0
 8012356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801235a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801235e:	f04f 0200 	mov.w	r2, #0
 8012362:	f04f 0300 	mov.w	r3, #0
 8012366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801236a:	4629      	mov	r1, r5
 801236c:	008b      	lsls	r3, r1, #2
 801236e:	4621      	mov	r1, r4
 8012370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012374:	4621      	mov	r1, r4
 8012376:	008a      	lsls	r2, r1, #2
 8012378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801237c:	f7ee fcb4 	bl	8000ce8 <__aeabi_uldivmod>
 8012380:	4602      	mov	r2, r0
 8012382:	460b      	mov	r3, r1
 8012384:	4b60      	ldr	r3, [pc, #384]	@ (8012508 <UART_SetConfig+0x4e4>)
 8012386:	fba3 2302 	umull	r2, r3, r3, r2
 801238a:	095b      	lsrs	r3, r3, #5
 801238c:	011c      	lsls	r4, r3, #4
 801238e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012392:	2200      	movs	r2, #0
 8012394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012398:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801239c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80123a0:	4642      	mov	r2, r8
 80123a2:	464b      	mov	r3, r9
 80123a4:	1891      	adds	r1, r2, r2
 80123a6:	61b9      	str	r1, [r7, #24]
 80123a8:	415b      	adcs	r3, r3
 80123aa:	61fb      	str	r3, [r7, #28]
 80123ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80123b0:	4641      	mov	r1, r8
 80123b2:	1851      	adds	r1, r2, r1
 80123b4:	6139      	str	r1, [r7, #16]
 80123b6:	4649      	mov	r1, r9
 80123b8:	414b      	adcs	r3, r1
 80123ba:	617b      	str	r3, [r7, #20]
 80123bc:	f04f 0200 	mov.w	r2, #0
 80123c0:	f04f 0300 	mov.w	r3, #0
 80123c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80123c8:	4659      	mov	r1, fp
 80123ca:	00cb      	lsls	r3, r1, #3
 80123cc:	4651      	mov	r1, sl
 80123ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80123d2:	4651      	mov	r1, sl
 80123d4:	00ca      	lsls	r2, r1, #3
 80123d6:	4610      	mov	r0, r2
 80123d8:	4619      	mov	r1, r3
 80123da:	4603      	mov	r3, r0
 80123dc:	4642      	mov	r2, r8
 80123de:	189b      	adds	r3, r3, r2
 80123e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80123e4:	464b      	mov	r3, r9
 80123e6:	460a      	mov	r2, r1
 80123e8:	eb42 0303 	adc.w	r3, r2, r3
 80123ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80123f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	2200      	movs	r2, #0
 80123f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80123fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80123fc:	f04f 0200 	mov.w	r2, #0
 8012400:	f04f 0300 	mov.w	r3, #0
 8012404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8012408:	4649      	mov	r1, r9
 801240a:	008b      	lsls	r3, r1, #2
 801240c:	4641      	mov	r1, r8
 801240e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012412:	4641      	mov	r1, r8
 8012414:	008a      	lsls	r2, r1, #2
 8012416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801241a:	f7ee fc65 	bl	8000ce8 <__aeabi_uldivmod>
 801241e:	4602      	mov	r2, r0
 8012420:	460b      	mov	r3, r1
 8012422:	4611      	mov	r1, r2
 8012424:	4b38      	ldr	r3, [pc, #224]	@ (8012508 <UART_SetConfig+0x4e4>)
 8012426:	fba3 2301 	umull	r2, r3, r3, r1
 801242a:	095b      	lsrs	r3, r3, #5
 801242c:	2264      	movs	r2, #100	@ 0x64
 801242e:	fb02 f303 	mul.w	r3, r2, r3
 8012432:	1acb      	subs	r3, r1, r3
 8012434:	011b      	lsls	r3, r3, #4
 8012436:	3332      	adds	r3, #50	@ 0x32
 8012438:	4a33      	ldr	r2, [pc, #204]	@ (8012508 <UART_SetConfig+0x4e4>)
 801243a:	fba2 2303 	umull	r2, r3, r2, r3
 801243e:	095b      	lsrs	r3, r3, #5
 8012440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012444:	441c      	add	r4, r3
 8012446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801244a:	2200      	movs	r2, #0
 801244c:	673b      	str	r3, [r7, #112]	@ 0x70
 801244e:	677a      	str	r2, [r7, #116]	@ 0x74
 8012450:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8012454:	4642      	mov	r2, r8
 8012456:	464b      	mov	r3, r9
 8012458:	1891      	adds	r1, r2, r2
 801245a:	60b9      	str	r1, [r7, #8]
 801245c:	415b      	adcs	r3, r3
 801245e:	60fb      	str	r3, [r7, #12]
 8012460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012464:	4641      	mov	r1, r8
 8012466:	1851      	adds	r1, r2, r1
 8012468:	6039      	str	r1, [r7, #0]
 801246a:	4649      	mov	r1, r9
 801246c:	414b      	adcs	r3, r1
 801246e:	607b      	str	r3, [r7, #4]
 8012470:	f04f 0200 	mov.w	r2, #0
 8012474:	f04f 0300 	mov.w	r3, #0
 8012478:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801247c:	4659      	mov	r1, fp
 801247e:	00cb      	lsls	r3, r1, #3
 8012480:	4651      	mov	r1, sl
 8012482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012486:	4651      	mov	r1, sl
 8012488:	00ca      	lsls	r2, r1, #3
 801248a:	4610      	mov	r0, r2
 801248c:	4619      	mov	r1, r3
 801248e:	4603      	mov	r3, r0
 8012490:	4642      	mov	r2, r8
 8012492:	189b      	adds	r3, r3, r2
 8012494:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012496:	464b      	mov	r3, r9
 8012498:	460a      	mov	r2, r1
 801249a:	eb42 0303 	adc.w	r3, r2, r3
 801249e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80124a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80124aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80124ac:	f04f 0200 	mov.w	r2, #0
 80124b0:	f04f 0300 	mov.w	r3, #0
 80124b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80124b8:	4649      	mov	r1, r9
 80124ba:	008b      	lsls	r3, r1, #2
 80124bc:	4641      	mov	r1, r8
 80124be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80124c2:	4641      	mov	r1, r8
 80124c4:	008a      	lsls	r2, r1, #2
 80124c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80124ca:	f7ee fc0d 	bl	8000ce8 <__aeabi_uldivmod>
 80124ce:	4602      	mov	r2, r0
 80124d0:	460b      	mov	r3, r1
 80124d2:	4b0d      	ldr	r3, [pc, #52]	@ (8012508 <UART_SetConfig+0x4e4>)
 80124d4:	fba3 1302 	umull	r1, r3, r3, r2
 80124d8:	095b      	lsrs	r3, r3, #5
 80124da:	2164      	movs	r1, #100	@ 0x64
 80124dc:	fb01 f303 	mul.w	r3, r1, r3
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	011b      	lsls	r3, r3, #4
 80124e4:	3332      	adds	r3, #50	@ 0x32
 80124e6:	4a08      	ldr	r2, [pc, #32]	@ (8012508 <UART_SetConfig+0x4e4>)
 80124e8:	fba2 2303 	umull	r2, r3, r2, r3
 80124ec:	095b      	lsrs	r3, r3, #5
 80124ee:	f003 020f 	and.w	r2, r3, #15
 80124f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4422      	add	r2, r4
 80124fa:	609a      	str	r2, [r3, #8]
}
 80124fc:	bf00      	nop
 80124fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8012502:	46bd      	mov	sp, r7
 8012504:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012508:	51eb851f 	.word	0x51eb851f

0801250c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801250c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801250e:	2400      	movs	r4, #0
 8012510:	2310      	movs	r3, #16
 8012512:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012516:	6803      	ldr	r3, [r0, #0]
 8012518:	4615      	mov	r5, r2
 801251a:	699e      	ldr	r6, [r3, #24]
 801251c:	6812      	ldr	r2, [r2, #0]
 801251e:	466b      	mov	r3, sp
 8012520:	e9cd 4400 	strd	r4, r4, [sp]
 8012524:	47b0      	blx	r6
 8012526:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801252a:	f003 0306 	and.w	r3, r3, #6
 801252e:	2b06      	cmp	r3, #6
 8012530:	bf03      	ittte	eq
 8012532:	9b00      	ldreq	r3, [sp, #0]
 8012534:	602b      	streq	r3, [r5, #0]
 8012536:	2001      	moveq	r0, #1
 8012538:	4620      	movne	r0, r4
 801253a:	b004      	add	sp, #16
 801253c:	bd70      	pop	{r4, r5, r6, pc}

0801253e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801253e:	9800      	ldr	r0, [sp, #0]
 8012540:	4290      	cmp	r0, r2
 8012542:	bf0c      	ite	eq
 8012544:	2006      	moveq	r0, #6
 8012546:	2001      	movne	r0, #1
 8012548:	4770      	bx	lr
	...

0801254c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801254c:	b510      	push	{r4, lr}
 801254e:	4b03      	ldr	r3, [pc, #12]	@ (801255c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8012550:	6003      	str	r3, [r0, #0]
 8012552:	4604      	mov	r4, r0
 8012554:	f000 fc3d 	bl	8012dd2 <_ZNSt9type_infoD1Ev>
 8012558:	4620      	mov	r0, r4
 801255a:	bd10      	pop	{r4, pc}
 801255c:	080180e0 	.word	0x080180e0

08012560 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8012560:	b510      	push	{r4, lr}
 8012562:	4604      	mov	r4, r0
 8012564:	f7ff fff2 	bl	801254c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012568:	4620      	mov	r0, r4
 801256a:	2108      	movs	r1, #8
 801256c:	f000 f842 	bl	80125f4 <_ZdlPvj>
 8012570:	4620      	mov	r0, r4
 8012572:	bd10      	pop	{r4, pc}

08012574 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8012574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012578:	461f      	mov	r7, r3
 801257a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801257e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012582:	4598      	cmp	r8, r3
 8012584:	4606      	mov	r6, r0
 8012586:	4615      	mov	r5, r2
 8012588:	d107      	bne.n	801259a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801258a:	9907      	ldr	r1, [sp, #28]
 801258c:	f000 fc24 	bl	8012dd8 <_ZNKSt9type_info7__equalERKS_>
 8012590:	b118      	cbz	r0, 801259a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8012592:	7165      	strb	r5, [r4, #5]
 8012594:	2000      	movs	r0, #0
 8012596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259a:	4639      	mov	r1, r7
 801259c:	4630      	mov	r0, r6
 801259e:	f000 fc1b 	bl	8012dd8 <_ZNKSt9type_info7__equalERKS_>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d0f6      	beq.n	8012594 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80125a6:	2301      	movs	r3, #1
 80125a8:	f8c4 8000 	str.w	r8, [r4]
 80125ac:	7125      	strb	r5, [r4, #4]
 80125ae:	71a3      	strb	r3, [r4, #6]
 80125b0:	e7f0      	b.n	8012594 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080125b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80125b2:	b538      	push	{r3, r4, r5, lr}
 80125b4:	4615      	mov	r5, r2
 80125b6:	461c      	mov	r4, r3
 80125b8:	f000 fc0e 	bl	8012dd8 <_ZNKSt9type_info7__equalERKS_>
 80125bc:	b120      	cbz	r0, 80125c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80125be:	2308      	movs	r3, #8
 80125c0:	60e3      	str	r3, [r4, #12]
 80125c2:	2306      	movs	r3, #6
 80125c4:	6025      	str	r5, [r4, #0]
 80125c6:	7123      	strb	r3, [r4, #4]
 80125c8:	bd38      	pop	{r3, r4, r5, pc}

080125ca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80125ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ce:	4605      	mov	r5, r0
 80125d0:	460c      	mov	r4, r1
 80125d2:	4616      	mov	r6, r2
 80125d4:	461f      	mov	r7, r3
 80125d6:	f000 fbff 	bl	8012dd8 <_ZNKSt9type_info7__equalERKS_>
 80125da:	b948      	cbnz	r0, 80125f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80125dc:	2f03      	cmp	r7, #3
 80125de:	d807      	bhi.n	80125f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80125e0:	6823      	ldr	r3, [r4, #0]
 80125e2:	4632      	mov	r2, r6
 80125e4:	4629      	mov	r1, r5
 80125e6:	4620      	mov	r0, r4
 80125e8:	695b      	ldr	r3, [r3, #20]
 80125ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125ee:	4718      	bx	r3
 80125f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080125f4 <_ZdlPvj>:
 80125f4:	f000 bc0b 	b.w	8012e0e <_ZdlPv>

080125f8 <__cxa_end_cleanup>:
 80125f8:	b41e      	push	{r1, r2, r3, r4}
 80125fa:	f000 f89c 	bl	8012736 <__gnu_end_cleanup>
 80125fe:	bc1e      	pop	{r1, r2, r3, r4}
 8012600:	f7ef fa70 	bl	8001ae4 <_Unwind_Resume>

08012604 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012604:	7803      	ldrb	r3, [r0, #0]
 8012606:	2b47      	cmp	r3, #71	@ 0x47
 8012608:	d117      	bne.n	801263a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801260a:	7843      	ldrb	r3, [r0, #1]
 801260c:	2b4e      	cmp	r3, #78	@ 0x4e
 801260e:	d114      	bne.n	801263a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012610:	7883      	ldrb	r3, [r0, #2]
 8012612:	2b55      	cmp	r3, #85	@ 0x55
 8012614:	d111      	bne.n	801263a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012616:	78c3      	ldrb	r3, [r0, #3]
 8012618:	2b43      	cmp	r3, #67	@ 0x43
 801261a:	d10e      	bne.n	801263a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801261c:	7903      	ldrb	r3, [r0, #4]
 801261e:	2b43      	cmp	r3, #67	@ 0x43
 8012620:	d10b      	bne.n	801263a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012622:	7943      	ldrb	r3, [r0, #5]
 8012624:	2b2b      	cmp	r3, #43	@ 0x2b
 8012626:	d108      	bne.n	801263a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012628:	7983      	ldrb	r3, [r0, #6]
 801262a:	2b2b      	cmp	r3, #43	@ 0x2b
 801262c:	d105      	bne.n	801263a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801262e:	79c0      	ldrb	r0, [r0, #7]
 8012630:	2801      	cmp	r0, #1
 8012632:	bf8c      	ite	hi
 8012634:	2000      	movhi	r0, #0
 8012636:	2001      	movls	r0, #1
 8012638:	4770      	bx	lr
 801263a:	2000      	movs	r0, #0
 801263c:	4770      	bx	lr
	...

08012640 <__cxa_type_match>:
 8012640:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012644:	461d      	mov	r5, r3
 8012646:	7803      	ldrb	r3, [r0, #0]
 8012648:	2b47      	cmp	r3, #71	@ 0x47
 801264a:	460e      	mov	r6, r1
 801264c:	4602      	mov	r2, r0
 801264e:	79c1      	ldrb	r1, [r0, #7]
 8012650:	d113      	bne.n	801267a <__cxa_type_match+0x3a>
 8012652:	7843      	ldrb	r3, [r0, #1]
 8012654:	2b4e      	cmp	r3, #78	@ 0x4e
 8012656:	d110      	bne.n	801267a <__cxa_type_match+0x3a>
 8012658:	7883      	ldrb	r3, [r0, #2]
 801265a:	2b55      	cmp	r3, #85	@ 0x55
 801265c:	d10d      	bne.n	801267a <__cxa_type_match+0x3a>
 801265e:	78c3      	ldrb	r3, [r0, #3]
 8012660:	2b43      	cmp	r3, #67	@ 0x43
 8012662:	d10a      	bne.n	801267a <__cxa_type_match+0x3a>
 8012664:	7903      	ldrb	r3, [r0, #4]
 8012666:	2b46      	cmp	r3, #70	@ 0x46
 8012668:	d107      	bne.n	801267a <__cxa_type_match+0x3a>
 801266a:	7943      	ldrb	r3, [r0, #5]
 801266c:	2b4f      	cmp	r3, #79	@ 0x4f
 801266e:	d104      	bne.n	801267a <__cxa_type_match+0x3a>
 8012670:	7983      	ldrb	r3, [r0, #6]
 8012672:	2b52      	cmp	r3, #82	@ 0x52
 8012674:	d101      	bne.n	801267a <__cxa_type_match+0x3a>
 8012676:	2900      	cmp	r1, #0
 8012678:	d031      	beq.n	80126de <__cxa_type_match+0x9e>
 801267a:	4610      	mov	r0, r2
 801267c:	f7ff ffc2 	bl	8012604 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012680:	f080 0401 	eor.w	r4, r0, #1
 8012684:	b2e4      	uxtb	r4, r4
 8012686:	2300      	movs	r3, #0
 8012688:	2000      	movs	r0, #0
 801268a:	9001      	str	r0, [sp, #4]
 801268c:	bb53      	cbnz	r3, 80126e4 <__cxa_type_match+0xa4>
 801268e:	bb5c      	cbnz	r4, 80126e8 <__cxa_type_match+0xa8>
 8012690:	2901      	cmp	r1, #1
 8012692:	bf0a      	itet	eq
 8012694:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8012698:	f1a2 0320 	subne.w	r3, r2, #32
 801269c:	3b78      	subeq	r3, #120	@ 0x78
 801269e:	2901      	cmp	r1, #1
 80126a0:	bf08      	it	eq
 80126a2:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80126a6:	681c      	ldr	r4, [r3, #0]
 80126a8:	bf18      	it	ne
 80126aa:	3258      	addne	r2, #88	@ 0x58
 80126ac:	9201      	str	r2, [sp, #4]
 80126ae:	6823      	ldr	r3, [r4, #0]
 80126b0:	4620      	mov	r0, r4
 80126b2:	689b      	ldr	r3, [r3, #8]
 80126b4:	4798      	blx	r3
 80126b6:	b1c8      	cbz	r0, 80126ec <__cxa_type_match+0xac>
 80126b8:	9b01      	ldr	r3, [sp, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	9301      	str	r3, [sp, #4]
 80126be:	2702      	movs	r7, #2
 80126c0:	6833      	ldr	r3, [r6, #0]
 80126c2:	aa01      	add	r2, sp, #4
 80126c4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80126c8:	4621      	mov	r1, r4
 80126ca:	2301      	movs	r3, #1
 80126cc:	4630      	mov	r0, r6
 80126ce:	47c0      	blx	r8
 80126d0:	b170      	cbz	r0, 80126f0 <__cxa_type_match+0xb0>
 80126d2:	9b01      	ldr	r3, [sp, #4]
 80126d4:	602b      	str	r3, [r5, #0]
 80126d6:	4638      	mov	r0, r7
 80126d8:	b002      	add	sp, #8
 80126da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126de:	2301      	movs	r3, #1
 80126e0:	460c      	mov	r4, r1
 80126e2:	e7d1      	b.n	8012688 <__cxa_type_match+0x48>
 80126e4:	4c03      	ldr	r4, [pc, #12]	@ (80126f4 <__cxa_type_match+0xb4>)
 80126e6:	e7e2      	b.n	80126ae <__cxa_type_match+0x6e>
 80126e8:	4c03      	ldr	r4, [pc, #12]	@ (80126f8 <__cxa_type_match+0xb8>)
 80126ea:	e7e0      	b.n	80126ae <__cxa_type_match+0x6e>
 80126ec:	2701      	movs	r7, #1
 80126ee:	e7e7      	b.n	80126c0 <__cxa_type_match+0x80>
 80126f0:	4607      	mov	r7, r0
 80126f2:	e7f0      	b.n	80126d6 <__cxa_type_match+0x96>
 80126f4:	08018124 	.word	0x08018124
 80126f8:	08018150 	.word	0x08018150

080126fc <__cxa_begin_cleanup>:
 80126fc:	b510      	push	{r4, lr}
 80126fe:	4604      	mov	r4, r0
 8012700:	f000 f834 	bl	801276c <__cxa_get_globals>
 8012704:	4602      	mov	r2, r0
 8012706:	4620      	mov	r0, r4
 8012708:	f1a4 0120 	sub.w	r1, r4, #32
 801270c:	f7ff ff7a 	bl	8012604 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012710:	b160      	cbz	r0, 801272c <__cxa_begin_cleanup+0x30>
 8012712:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012716:	3301      	adds	r3, #1
 8012718:	2b01      	cmp	r3, #1
 801271a:	f844 3c04 	str.w	r3, [r4, #-4]
 801271e:	d103      	bne.n	8012728 <__cxa_begin_cleanup+0x2c>
 8012720:	6893      	ldr	r3, [r2, #8]
 8012722:	f844 3c08 	str.w	r3, [r4, #-8]
 8012726:	6091      	str	r1, [r2, #8]
 8012728:	2001      	movs	r0, #1
 801272a:	bd10      	pop	{r4, pc}
 801272c:	6893      	ldr	r3, [r2, #8]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d0f9      	beq.n	8012726 <__cxa_begin_cleanup+0x2a>
 8012732:	f000 faa3 	bl	8012c7c <_ZSt9terminatev>

08012736 <__gnu_end_cleanup>:
 8012736:	b510      	push	{r4, lr}
 8012738:	f000 f818 	bl	801276c <__cxa_get_globals>
 801273c:	6882      	ldr	r2, [r0, #8]
 801273e:	4601      	mov	r1, r0
 8012740:	b90a      	cbnz	r2, 8012746 <__gnu_end_cleanup+0x10>
 8012742:	f000 fa9b 	bl	8012c7c <_ZSt9terminatev>
 8012746:	f102 0420 	add.w	r4, r2, #32
 801274a:	4620      	mov	r0, r4
 801274c:	f7ff ff5a 	bl	8012604 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012750:	b140      	cbz	r0, 8012764 <__gnu_end_cleanup+0x2e>
 8012752:	69d3      	ldr	r3, [r2, #28]
 8012754:	3b01      	subs	r3, #1
 8012756:	61d3      	str	r3, [r2, #28]
 8012758:	b913      	cbnz	r3, 8012760 <__gnu_end_cleanup+0x2a>
 801275a:	6990      	ldr	r0, [r2, #24]
 801275c:	6088      	str	r0, [r1, #8]
 801275e:	6193      	str	r3, [r2, #24]
 8012760:	4620      	mov	r0, r4
 8012762:	bd10      	pop	{r4, pc}
 8012764:	6088      	str	r0, [r1, #8]
 8012766:	e7fb      	b.n	8012760 <__gnu_end_cleanup+0x2a>

08012768 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8012768:	4770      	bx	lr
	...

0801276c <__cxa_get_globals>:
 801276c:	4800      	ldr	r0, [pc, #0]	@ (8012770 <__cxa_get_globals+0x4>)
 801276e:	4770      	bx	lr
 8012770:	20000568 	.word	0x20000568

08012774 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8012774:	4a02      	ldr	r2, [pc, #8]	@ (8012780 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8012776:	4903      	ldr	r1, [pc, #12]	@ (8012784 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8012778:	4803      	ldr	r0, [pc, #12]	@ (8012788 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 801277a:	f000 bb43 	b.w	8012e04 <__aeabi_atexit>
 801277e:	bf00      	nop
 8012780:	20000000 	.word	0x20000000
 8012784:	08012769 	.word	0x08012769
 8012788:	20000568 	.word	0x20000568

0801278c <_ZL12read_uleb128PKhPm>:
 801278c:	b530      	push	{r4, r5, lr}
 801278e:	2300      	movs	r3, #0
 8012790:	461a      	mov	r2, r3
 8012792:	f810 5b01 	ldrb.w	r5, [r0], #1
 8012796:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 801279a:	4094      	lsls	r4, r2
 801279c:	4323      	orrs	r3, r4
 801279e:	062c      	lsls	r4, r5, #24
 80127a0:	f102 0207 	add.w	r2, r2, #7
 80127a4:	d4f5      	bmi.n	8012792 <_ZL12read_uleb128PKhPm+0x6>
 80127a6:	600b      	str	r3, [r1, #0]
 80127a8:	bd30      	pop	{r4, r5, pc}

080127aa <_ZL12read_sleb128PKhPl>:
 80127aa:	b530      	push	{r4, r5, lr}
 80127ac:	2300      	movs	r3, #0
 80127ae:	461a      	mov	r2, r3
 80127b0:	f810 4b01 	ldrb.w	r4, [r0], #1
 80127b4:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 80127b8:	4095      	lsls	r5, r2
 80127ba:	432b      	orrs	r3, r5
 80127bc:	0625      	lsls	r5, r4, #24
 80127be:	f102 0207 	add.w	r2, r2, #7
 80127c2:	d4f5      	bmi.n	80127b0 <_ZL12read_sleb128PKhPl+0x6>
 80127c4:	2a1f      	cmp	r2, #31
 80127c6:	d806      	bhi.n	80127d6 <_ZL12read_sleb128PKhPl+0x2c>
 80127c8:	0664      	lsls	r4, r4, #25
 80127ca:	bf42      	ittt	mi
 80127cc:	f04f 34ff 	movmi.w	r4, #4294967295
 80127d0:	fa04 f202 	lslmi.w	r2, r4, r2
 80127d4:	4313      	orrmi	r3, r2
 80127d6:	600b      	str	r3, [r1, #0]
 80127d8:	bd30      	pop	{r4, r5, pc}

080127da <_ZL28read_encoded_value_with_basehjPKhPj>:
 80127da:	2850      	cmp	r0, #80	@ 0x50
 80127dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80127e0:	4606      	mov	r6, r0
 80127e2:	4688      	mov	r8, r1
 80127e4:	4615      	mov	r5, r2
 80127e6:	461f      	mov	r7, r3
 80127e8:	d108      	bne.n	80127fc <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 80127ea:	1cd0      	adds	r0, r2, #3
 80127ec:	f020 0003 	bic.w	r0, r0, #3
 80127f0:	f850 4b04 	ldr.w	r4, [r0], #4
 80127f4:	603c      	str	r4, [r7, #0]
 80127f6:	b002      	add	sp, #8
 80127f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127fc:	f000 030f 	and.w	r3, r0, #15
 8012800:	2b0c      	cmp	r3, #12
 8012802:	d82e      	bhi.n	8012862 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8012804:	e8df f003 	tbb	[pc, r3]
 8012808:	251d0725 	.word	0x251d0725
 801280c:	2d2d2d29 	.word	0x2d2d2d29
 8012810:	2521182d 	.word	0x2521182d
 8012814:	29          	.byte	0x29
 8012815:	00          	.byte	0x00
 8012816:	a901      	add	r1, sp, #4
 8012818:	4628      	mov	r0, r5
 801281a:	f7ff ffb7 	bl	801278c <_ZL12read_uleb128PKhPm>
 801281e:	9c01      	ldr	r4, [sp, #4]
 8012820:	2c00      	cmp	r4, #0
 8012822:	d0e7      	beq.n	80127f4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8012824:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 8012828:	2b10      	cmp	r3, #16
 801282a:	bf08      	it	eq
 801282c:	46a8      	moveq	r8, r5
 801282e:	4444      	add	r4, r8
 8012830:	0633      	lsls	r3, r6, #24
 8012832:	bf48      	it	mi
 8012834:	6824      	ldrmi	r4, [r4, #0]
 8012836:	e7dd      	b.n	80127f4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8012838:	a901      	add	r1, sp, #4
 801283a:	4628      	mov	r0, r5
 801283c:	f7ff ffb5 	bl	80127aa <_ZL12read_sleb128PKhPl>
 8012840:	e7ed      	b.n	801281e <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8012842:	4628      	mov	r0, r5
 8012844:	f830 4b02 	ldrh.w	r4, [r0], #2
 8012848:	e7ea      	b.n	8012820 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801284a:	4628      	mov	r0, r5
 801284c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8012850:	e7e6      	b.n	8012820 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012852:	4628      	mov	r0, r5
 8012854:	f850 4b04 	ldr.w	r4, [r0], #4
 8012858:	e7e2      	b.n	8012820 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801285a:	4628      	mov	r0, r5
 801285c:	f850 4b08 	ldr.w	r4, [r0], #8
 8012860:	e7de      	b.n	8012820 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012862:	f001 fd51 	bl	8014308 <abort>

08012866 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8012866:	b508      	push	{r3, lr}
 8012868:	4603      	mov	r3, r0
 801286a:	2bff      	cmp	r3, #255	@ 0xff
 801286c:	4608      	mov	r0, r1
 801286e:	d00d      	beq.n	801288c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8012870:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8012874:	2b30      	cmp	r3, #48	@ 0x30
 8012876:	d00f      	beq.n	8012898 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8012878:	d804      	bhi.n	8012884 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 801287a:	2b20      	cmp	r3, #32
 801287c:	d008      	beq.n	8012890 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 801287e:	d905      	bls.n	801288c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8012880:	f001 fd42 	bl	8014308 <abort>
 8012884:	2b40      	cmp	r3, #64	@ 0x40
 8012886:	d00b      	beq.n	80128a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8012888:	2b50      	cmp	r3, #80	@ 0x50
 801288a:	d1f9      	bne.n	8012880 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 801288c:	2000      	movs	r0, #0
 801288e:	bd08      	pop	{r3, pc}
 8012890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012894:	f004 b9d1 	b.w	8016c3a <_Unwind_GetTextRelBase>
 8012898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801289c:	f004 b9ca 	b.w	8016c34 <_Unwind_GetDataRelBase>
 80128a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80128a4:	f7ef bb12 	b.w	8001ecc <_Unwind_GetRegionStart>

080128a8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 80128a8:	b570      	push	{r4, r5, r6, lr}
 80128aa:	460c      	mov	r4, r1
 80128ac:	4601      	mov	r1, r0
 80128ae:	4620      	mov	r0, r4
 80128b0:	4615      	mov	r5, r2
 80128b2:	461e      	mov	r6, r3
 80128b4:	f7ff ffd7 	bl	8012866 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80128b8:	4633      	mov	r3, r6
 80128ba:	4601      	mov	r1, r0
 80128bc:	462a      	mov	r2, r5
 80128be:	4620      	mov	r0, r4
 80128c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128c4:	f7ff bf89 	b.w	80127da <_ZL28read_encoded_value_with_basehjPKhPj>

080128c8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80128c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128ca:	460c      	mov	r4, r1
 80128cc:	4615      	mov	r5, r2
 80128ce:	4606      	mov	r6, r0
 80128d0:	b108      	cbz	r0, 80128d6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80128d2:	f7ef fafb 	bl	8001ecc <_Unwind_GetRegionStart>
 80128d6:	4622      	mov	r2, r4
 80128d8:	6028      	str	r0, [r5, #0]
 80128da:	f812 1b01 	ldrb.w	r1, [r2], #1
 80128de:	29ff      	cmp	r1, #255	@ 0xff
 80128e0:	d01c      	beq.n	801291c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 80128e2:	1d2b      	adds	r3, r5, #4
 80128e4:	4630      	mov	r0, r6
 80128e6:	f7ff ffdf 	bl	80128a8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80128ea:	4602      	mov	r2, r0
 80128ec:	4610      	mov	r0, r2
 80128ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80128f2:	2bff      	cmp	r3, #255	@ 0xff
 80128f4:	d014      	beq.n	8012920 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 80128f6:	2310      	movs	r3, #16
 80128f8:	752b      	strb	r3, [r5, #20]
 80128fa:	a901      	add	r1, sp, #4
 80128fc:	f7ff ff46 	bl	801278c <_ZL12read_uleb128PKhPm>
 8012900:	9b01      	ldr	r3, [sp, #4]
 8012902:	4403      	add	r3, r0
 8012904:	60eb      	str	r3, [r5, #12]
 8012906:	f810 3b01 	ldrb.w	r3, [r0], #1
 801290a:	756b      	strb	r3, [r5, #21]
 801290c:	a901      	add	r1, sp, #4
 801290e:	f7ff ff3d 	bl	801278c <_ZL12read_uleb128PKhPm>
 8012912:	9b01      	ldr	r3, [sp, #4]
 8012914:	4403      	add	r3, r0
 8012916:	612b      	str	r3, [r5, #16]
 8012918:	b002      	add	sp, #8
 801291a:	bd70      	pop	{r4, r5, r6, pc}
 801291c:	6068      	str	r0, [r5, #4]
 801291e:	e7e5      	b.n	80128ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8012920:	752b      	strb	r3, [r5, #20]
 8012922:	2300      	movs	r3, #0
 8012924:	e7ee      	b.n	8012904 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

08012926 <_Unwind_GetGR>:
 8012926:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012928:	ab03      	add	r3, sp, #12
 801292a:	9300      	str	r3, [sp, #0]
 801292c:	2300      	movs	r3, #0
 801292e:	460a      	mov	r2, r1
 8012930:	4619      	mov	r1, r3
 8012932:	f7ee fd17 	bl	8001364 <_Unwind_VRS_Get>
 8012936:	9803      	ldr	r0, [sp, #12]
 8012938:	b005      	add	sp, #20
 801293a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012940 <__gxx_personality_v0>:
 8012940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	b093      	sub	sp, #76	@ 0x4c
 8012946:	2300      	movs	r3, #0
 8012948:	9307      	str	r3, [sp, #28]
 801294a:	f000 0303 	and.w	r3, r0, #3
 801294e:	2b01      	cmp	r3, #1
 8012950:	4605      	mov	r5, r0
 8012952:	460c      	mov	r4, r1
 8012954:	4616      	mov	r6, r2
 8012956:	d010      	beq.n	801297a <__gxx_personality_v0+0x3a>
 8012958:	2b02      	cmp	r3, #2
 801295a:	d003      	beq.n	8012964 <__gxx_personality_v0+0x24>
 801295c:	2b00      	cmp	r3, #0
 801295e:	d13b      	bne.n	80129d8 <__gxx_personality_v0+0x98>
 8012960:	0701      	lsls	r1, r0, #28
 8012962:	d53b      	bpl.n	80129dc <__gxx_personality_v0+0x9c>
 8012964:	4631      	mov	r1, r6
 8012966:	4620      	mov	r0, r4
 8012968:	f7ef fa9a 	bl	8001ea0 <__gnu_unwind_frame>
 801296c:	b118      	cbz	r0, 8012976 <__gxx_personality_v0+0x36>
 801296e:	2009      	movs	r0, #9
 8012970:	b013      	add	sp, #76	@ 0x4c
 8012972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012976:	2008      	movs	r0, #8
 8012978:	e7fa      	b.n	8012970 <__gxx_personality_v0+0x30>
 801297a:	0702      	lsls	r2, r0, #28
 801297c:	d523      	bpl.n	80129c6 <__gxx_personality_v0+0x86>
 801297e:	2302      	movs	r3, #2
 8012980:	f005 0508 	and.w	r5, r5, #8
 8012984:	431d      	orrs	r5, r3
 8012986:	ab0c      	add	r3, sp, #48	@ 0x30
 8012988:	9300      	str	r3, [sp, #0]
 801298a:	2300      	movs	r3, #0
 801298c:	220c      	movs	r2, #12
 801298e:	4619      	mov	r1, r3
 8012990:	4630      	mov	r0, r6
 8012992:	940c      	str	r4, [sp, #48]	@ 0x30
 8012994:	f7ee fd0c 	bl	80013b0 <_Unwind_VRS_Set>
 8012998:	2d06      	cmp	r5, #6
 801299a:	d121      	bne.n	80129e0 <__gxx_personality_v0+0xa0>
 801299c:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 80129a0:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 80129a4:	f1b8 0f00 	cmp.w	r8, #0
 80129a8:	bf0c      	ite	eq
 80129aa:	f04f 0a01 	moveq.w	sl, #1
 80129ae:	f04f 0a03 	movne.w	sl, #3
 80129b2:	f015 0508 	ands.w	r5, r5, #8
 80129b6:	f000 8103 	beq.w	8012bc0 <__gxx_personality_v0+0x280>
 80129ba:	f1ba 0f01 	cmp.w	sl, #1
 80129be:	f040 80fb 	bne.w	8012bb8 <__gxx_personality_v0+0x278>
 80129c2:	f000 f95b 	bl	8012c7c <_ZSt9terminatev>
 80129c6:	6a0f      	ldr	r7, [r1, #32]
 80129c8:	4630      	mov	r0, r6
 80129ca:	210d      	movs	r1, #13
 80129cc:	f7ff ffab 	bl	8012926 <_Unwind_GetGR>
 80129d0:	4287      	cmp	r7, r0
 80129d2:	d1d4      	bne.n	801297e <__gxx_personality_v0+0x3e>
 80129d4:	2306      	movs	r3, #6
 80129d6:	e7d3      	b.n	8012980 <__gxx_personality_v0+0x40>
 80129d8:	f001 fc96 	bl	8014308 <abort>
 80129dc:	2301      	movs	r3, #1
 80129de:	e7cf      	b.n	8012980 <__gxx_personality_v0+0x40>
 80129e0:	4630      	mov	r0, r6
 80129e2:	f7ef fa79 	bl	8001ed8 <_Unwind_GetLanguageSpecificData>
 80129e6:	4681      	mov	r9, r0
 80129e8:	2800      	cmp	r0, #0
 80129ea:	d0bb      	beq.n	8012964 <__gxx_personality_v0+0x24>
 80129ec:	aa0c      	add	r2, sp, #48	@ 0x30
 80129ee:	4601      	mov	r1, r0
 80129f0:	4630      	mov	r0, r6
 80129f2:	f7ff ff69 	bl	80128c8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80129f6:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 80129fa:	9003      	str	r0, [sp, #12]
 80129fc:	4631      	mov	r1, r6
 80129fe:	4658      	mov	r0, fp
 8012a00:	f7ff ff31 	bl	8012866 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012a04:	210f      	movs	r1, #15
 8012a06:	9002      	str	r0, [sp, #8]
 8012a08:	900e      	str	r0, [sp, #56]	@ 0x38
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	f7ff ff8b 	bl	8012926 <_Unwind_GetGR>
 8012a10:	9a03      	ldr	r2, [sp, #12]
 8012a12:	f020 0801 	bic.w	r8, r0, #1
 8012a16:	f108 38ff 	add.w	r8, r8, #4294967295
 8012a1a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012a1c:	4297      	cmp	r7, r2
 8012a1e:	d815      	bhi.n	8012a4c <__gxx_personality_v0+0x10c>
 8012a20:	2700      	movs	r7, #0
 8012a22:	46b8      	mov	r8, r7
 8012a24:	f04f 0a01 	mov.w	sl, #1
 8012a28:	07eb      	lsls	r3, r5, #31
 8012a2a:	d5c2      	bpl.n	80129b2 <__gxx_personality_v0+0x72>
 8012a2c:	f1ba 0f02 	cmp.w	sl, #2
 8012a30:	d098      	beq.n	8012964 <__gxx_personality_v0+0x24>
 8012a32:	210d      	movs	r1, #13
 8012a34:	4630      	mov	r0, r6
 8012a36:	9d07      	ldr	r5, [sp, #28]
 8012a38:	f7ff ff75 	bl	8012926 <_Unwind_GetGR>
 8012a3c:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 8012a40:	e9c4 0508 	strd	r0, r5, [r4, #32]
 8012a44:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8012a48:	2006      	movs	r0, #6
 8012a4a:	e791      	b.n	8012970 <__gxx_personality_v0+0x30>
 8012a4c:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 8012a50:	ab08      	add	r3, sp, #32
 8012a52:	4651      	mov	r1, sl
 8012a54:	2000      	movs	r0, #0
 8012a56:	f7ff ff27 	bl	80128a8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012a5a:	ab09      	add	r3, sp, #36	@ 0x24
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	4651      	mov	r1, sl
 8012a60:	2000      	movs	r0, #0
 8012a62:	f7ff ff21 	bl	80128a8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012a66:	ab0a      	add	r3, sp, #40	@ 0x28
 8012a68:	4602      	mov	r2, r0
 8012a6a:	4651      	mov	r1, sl
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	f7ff ff1b 	bl	80128a8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012a72:	a90b      	add	r1, sp, #44	@ 0x2c
 8012a74:	f7ff fe8a 	bl	801278c <_ZL12read_uleb128PKhPm>
 8012a78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a7a:	9908      	ldr	r1, [sp, #32]
 8012a7c:	440b      	add	r3, r1
 8012a7e:	4543      	cmp	r3, r8
 8012a80:	4602      	mov	r2, r0
 8012a82:	d84b      	bhi.n	8012b1c <__gxx_personality_v0+0x1dc>
 8012a84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a86:	440b      	add	r3, r1
 8012a88:	4543      	cmp	r3, r8
 8012a8a:	d9c6      	bls.n	8012a1a <__gxx_personality_v0+0xda>
 8012a8c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8012a90:	f1b8 0f00 	cmp.w	r8, #0
 8012a94:	d001      	beq.n	8012a9a <__gxx_personality_v0+0x15a>
 8012a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a98:	4498      	add	r8, r3
 8012a9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012a9c:	b108      	cbz	r0, 8012aa2 <__gxx_personality_v0+0x162>
 8012a9e:	3801      	subs	r0, #1
 8012aa0:	4438      	add	r0, r7
 8012aa2:	f1b8 0f00 	cmp.w	r8, #0
 8012aa6:	f43f af5d 	beq.w	8012964 <__gxx_personality_v0+0x24>
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	f000 80d6 	beq.w	8012c5c <__gxx_personality_v0+0x31c>
 8012ab0:	f015 0308 	ands.w	r3, r5, #8
 8012ab4:	9304      	str	r3, [sp, #16]
 8012ab6:	d033      	beq.n	8012b20 <__gxx_personality_v0+0x1e0>
 8012ab8:	2347      	movs	r3, #71	@ 0x47
 8012aba:	7023      	strb	r3, [r4, #0]
 8012abc:	234e      	movs	r3, #78	@ 0x4e
 8012abe:	7063      	strb	r3, [r4, #1]
 8012ac0:	2355      	movs	r3, #85	@ 0x55
 8012ac2:	70a3      	strb	r3, [r4, #2]
 8012ac4:	2343      	movs	r3, #67	@ 0x43
 8012ac6:	70e3      	strb	r3, [r4, #3]
 8012ac8:	2346      	movs	r3, #70	@ 0x46
 8012aca:	7123      	strb	r3, [r4, #4]
 8012acc:	234f      	movs	r3, #79	@ 0x4f
 8012ace:	7163      	strb	r3, [r4, #5]
 8012ad0:	2352      	movs	r3, #82	@ 0x52
 8012ad2:	71a3      	strb	r3, [r4, #6]
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	71e3      	strb	r3, [r4, #7]
 8012ad8:	2300      	movs	r3, #0
 8012ada:	9303      	str	r3, [sp, #12]
 8012adc:	a909      	add	r1, sp, #36	@ 0x24
 8012ade:	f7ff fe64 	bl	80127aa <_ZL12read_sleb128PKhPl>
 8012ae2:	a90a      	add	r1, sp, #40	@ 0x28
 8012ae4:	9005      	str	r0, [sp, #20]
 8012ae6:	f7ff fe60 	bl	80127aa <_ZL12read_sleb128PKhPl>
 8012aea:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012aec:	2f00      	cmp	r7, #0
 8012aee:	d060      	beq.n	8012bb2 <__gxx_personality_v0+0x272>
 8012af0:	dd3a      	ble.n	8012b68 <__gxx_personality_v0+0x228>
 8012af2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8012af6:	d033      	beq.n	8012b60 <__gxx_personality_v0+0x220>
 8012af8:	f00b 0307 	and.w	r3, fp, #7
 8012afc:	2b04      	cmp	r3, #4
 8012afe:	f63f af6b 	bhi.w	80129d8 <__gxx_personality_v0+0x98>
 8012b02:	a201      	add	r2, pc, #4	@ (adr r2, 8012b08 <__gxx_personality_v0+0x1c8>)
 8012b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b08:	08012b65 	.word	0x08012b65
 8012b0c:	080129d9 	.word	0x080129d9
 8012b10:	08012b33 	.word	0x08012b33
 8012b14:	08012b65 	.word	0x08012b65
 8012b18:	08012b5d 	.word	0x08012b5d
 8012b1c:	463a      	mov	r2, r7
 8012b1e:	e77c      	b.n	8012a1a <__gxx_personality_v0+0xda>
 8012b20:	79e3      	ldrb	r3, [r4, #7]
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	bf0c      	ite	eq
 8012b26:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8012b2a:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 8012b2e:	9307      	str	r3, [sp, #28]
 8012b30:	e7d2      	b.n	8012ad8 <__gxx_personality_v0+0x198>
 8012b32:	2202      	movs	r2, #2
 8012b34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012b36:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012b38:	fb07 1212 	mls	r2, r7, r2, r1
 8012b3c:	4658      	mov	r0, fp
 8012b3e:	9902      	ldr	r1, [sp, #8]
 8012b40:	f7ff fe4b 	bl	80127da <_ZL28read_encoded_value_with_basehjPKhPj>
 8012b44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012b46:	b131      	cbz	r1, 8012b56 <__gxx_personality_v0+0x216>
 8012b48:	b33c      	cbz	r4, 8012b9a <__gxx_personality_v0+0x25a>
 8012b4a:	ab07      	add	r3, sp, #28
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f7ff fd76 	bl	8012640 <__cxa_type_match>
 8012b54:	b308      	cbz	r0, 8012b9a <__gxx_personality_v0+0x25a>
 8012b56:	f04f 0a03 	mov.w	sl, #3
 8012b5a:	e765      	b.n	8012a28 <__gxx_personality_v0+0xe8>
 8012b5c:	2208      	movs	r2, #8
 8012b5e:	e7e9      	b.n	8012b34 <__gxx_personality_v0+0x1f4>
 8012b60:	2200      	movs	r2, #0
 8012b62:	e7e7      	b.n	8012b34 <__gxx_personality_v0+0x1f4>
 8012b64:	2204      	movs	r2, #4
 8012b66:	e7e5      	b.n	8012b34 <__gxx_personality_v0+0x1f4>
 8012b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b6a:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8012b6e:	1bd2      	subs	r2, r2, r7
 8012b70:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8012b74:	b1c4      	cbz	r4, 8012ba8 <__gxx_personality_v0+0x268>
 8012b76:	9904      	ldr	r1, [sp, #16]
 8012b78:	b9b1      	cbnz	r1, 8012ba8 <__gxx_personality_v0+0x268>
 8012b7a:	9b07      	ldr	r3, [sp, #28]
 8012b7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b7e:	f1aa 0a04 	sub.w	sl, sl, #4
 8012b82:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8012b86:	2900      	cmp	r1, #0
 8012b88:	d0e5      	beq.n	8012b56 <__gxx_personality_v0+0x216>
 8012b8a:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	4451      	add	r1, sl
 8012b90:	4620      	mov	r0, r4
 8012b92:	f7ff fd55 	bl	8012640 <__cxa_type_match>
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d0f3      	beq.n	8012b82 <__gxx_personality_v0+0x242>
 8012b9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	d059      	beq.n	8012c54 <__gxx_personality_v0+0x314>
 8012ba0:	9b05      	ldr	r3, [sp, #20]
 8012ba2:	4403      	add	r3, r0
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	e799      	b.n	8012adc <__gxx_personality_v0+0x19c>
 8012ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1f4      	bne.n	8012b9a <__gxx_personality_v0+0x25a>
 8012bb0:	e7d1      	b.n	8012b56 <__gxx_personality_v0+0x216>
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	9303      	str	r3, [sp, #12]
 8012bb6:	e7f0      	b.n	8012b9a <__gxx_personality_v0+0x25a>
 8012bb8:	2f00      	cmp	r7, #0
 8012bba:	da1f      	bge.n	8012bfc <__gxx_personality_v0+0x2bc>
 8012bbc:	f000 f870 	bl	8012ca0 <_ZSt10unexpectedv>
 8012bc0:	f1ba 0f01 	cmp.w	sl, #1
 8012bc4:	d102      	bne.n	8012bcc <__gxx_personality_v0+0x28c>
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f000 f940 	bl	8012e4c <__cxa_call_terminate>
 8012bcc:	2f00      	cmp	r7, #0
 8012bce:	da15      	bge.n	8012bfc <__gxx_personality_v0+0x2bc>
 8012bd0:	aa0c      	add	r2, sp, #48	@ 0x30
 8012bd2:	4649      	mov	r1, r9
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f7ff fe77 	bl	80128c8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8012bda:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012bde:	4631      	mov	r1, r6
 8012be0:	f7ff fe41 	bl	8012866 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012be6:	43fa      	mvns	r2, r7
 8012be8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012bec:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8012bf0:	bb52      	cbnz	r2, 8012c48 <__gxx_personality_v0+0x308>
 8012bf2:	2204      	movs	r2, #4
 8012bf4:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 8012bf8:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012c00:	461a      	mov	r2, r3
 8012c02:	4619      	mov	r1, r3
 8012c04:	9500      	str	r5, [sp, #0]
 8012c06:	4630      	mov	r0, r6
 8012c08:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012c0a:	f7ee fbd1 	bl	80013b0 <_Unwind_VRS_Set>
 8012c0e:	2300      	movs	r3, #0
 8012c10:	4619      	mov	r1, r3
 8012c12:	2201      	movs	r2, #1
 8012c14:	9500      	str	r5, [sp, #0]
 8012c16:	4630      	mov	r0, r6
 8012c18:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012c1a:	f7ee fbc9 	bl	80013b0 <_Unwind_VRS_Set>
 8012c1e:	210f      	movs	r1, #15
 8012c20:	4630      	mov	r0, r6
 8012c22:	f7ff fe80 	bl	8012926 <_Unwind_GetGR>
 8012c26:	f000 0001 	and.w	r0, r0, #1
 8012c2a:	ea40 0008 	orr.w	r0, r0, r8
 8012c2e:	2300      	movs	r3, #0
 8012c30:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012c32:	9500      	str	r5, [sp, #0]
 8012c34:	220f      	movs	r2, #15
 8012c36:	4619      	mov	r1, r3
 8012c38:	4630      	mov	r0, r6
 8012c3a:	f7ee fbb9 	bl	80013b0 <_Unwind_VRS_Set>
 8012c3e:	f1ba 0f02 	cmp.w	sl, #2
 8012c42:	d003      	beq.n	8012c4c <__gxx_personality_v0+0x30c>
 8012c44:	2007      	movs	r0, #7
 8012c46:	e693      	b.n	8012970 <__gxx_personality_v0+0x30>
 8012c48:	3501      	adds	r5, #1
 8012c4a:	e7cf      	b.n	8012bec <__gxx_personality_v0+0x2ac>
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f7ff fd55 	bl	80126fc <__cxa_begin_cleanup>
 8012c52:	e7f7      	b.n	8012c44 <__gxx_personality_v0+0x304>
 8012c54:	9b03      	ldr	r3, [sp, #12]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f43f ae84 	beq.w	8012964 <__gxx_personality_v0+0x24>
 8012c5c:	2700      	movs	r7, #0
 8012c5e:	f04f 0a02 	mov.w	sl, #2
 8012c62:	e6e1      	b.n	8012a28 <__gxx_personality_v0+0xe8>

08012c64 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012c64:	b508      	push	{r3, lr}
 8012c66:	4780      	blx	r0
 8012c68:	f001 fb4e 	bl	8014308 <abort>

08012c6c <_ZSt13get_terminatev>:
 8012c6c:	4b02      	ldr	r3, [pc, #8]	@ (8012c78 <_ZSt13get_terminatev+0xc>)
 8012c6e:	6818      	ldr	r0, [r3, #0]
 8012c70:	f3bf 8f5b 	dmb	ish
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop
 8012c78:	20000018 	.word	0x20000018

08012c7c <_ZSt9terminatev>:
 8012c7c:	b508      	push	{r3, lr}
 8012c7e:	f7ff fff5 	bl	8012c6c <_ZSt13get_terminatev>
 8012c82:	f7ff ffef 	bl	8012c64 <_ZN10__cxxabiv111__terminateEPFvvE>

08012c86 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8012c86:	b508      	push	{r3, lr}
 8012c88:	4780      	blx	r0
 8012c8a:	f7ff fff7 	bl	8012c7c <_ZSt9terminatev>
	...

08012c90 <_ZSt14get_unexpectedv>:
 8012c90:	4b02      	ldr	r3, [pc, #8]	@ (8012c9c <_ZSt14get_unexpectedv+0xc>)
 8012c92:	6818      	ldr	r0, [r3, #0]
 8012c94:	f3bf 8f5b 	dmb	ish
 8012c98:	4770      	bx	lr
 8012c9a:	bf00      	nop
 8012c9c:	20000014 	.word	0x20000014

08012ca0 <_ZSt10unexpectedv>:
 8012ca0:	b508      	push	{r3, lr}
 8012ca2:	f7ff fff5 	bl	8012c90 <_ZSt14get_unexpectedv>
 8012ca6:	f7ff ffee 	bl	8012c86 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08012caa <_Znwj>:
 8012caa:	2801      	cmp	r0, #1
 8012cac:	bf38      	it	cc
 8012cae:	2001      	movcc	r0, #1
 8012cb0:	b510      	push	{r4, lr}
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	f001 fb2f 	bl	8014318 <malloc>
 8012cba:	b100      	cbz	r0, 8012cbe <_Znwj+0x14>
 8012cbc:	bd10      	pop	{r4, pc}
 8012cbe:	f000 f92f 	bl	8012f20 <_ZSt15get_new_handlerv>
 8012cc2:	b908      	cbnz	r0, 8012cc8 <_Znwj+0x1e>
 8012cc4:	f001 fb20 	bl	8014308 <abort>
 8012cc8:	4780      	blx	r0
 8012cca:	e7f3      	b.n	8012cb4 <_Znwj+0xa>

08012ccc <_Znaj>:
 8012ccc:	f7ff bfed 	b.w	8012caa <_Znwj>

08012cd0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8012cd0:	b510      	push	{r4, lr}
 8012cd2:	4b03      	ldr	r3, [pc, #12]	@ (8012ce0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8012cd4:	6003      	str	r3, [r0, #0]
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	f7ff fc38 	bl	801254c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012cdc:	4620      	mov	r0, r4
 8012cde:	bd10      	pop	{r4, pc}
 8012ce0:	08018194 	.word	0x08018194

08012ce4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8012ce4:	b510      	push	{r4, lr}
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	f7ff fff2 	bl	8012cd0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8012cec:	4620      	mov	r0, r4
 8012cee:	210c      	movs	r1, #12
 8012cf0:	f7ff fc80 	bl	80125f4 <_ZdlPvj>
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	bd10      	pop	{r4, pc}

08012cf8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8012cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cfc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012d00:	4590      	cmp	r8, r2
 8012d02:	4606      	mov	r6, r0
 8012d04:	460f      	mov	r7, r1
 8012d06:	4615      	mov	r5, r2
 8012d08:	461c      	mov	r4, r3
 8012d0a:	d00b      	beq.n	8012d24 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8012d0c:	68b0      	ldr	r0, [r6, #8]
 8012d0e:	6803      	ldr	r3, [r0, #0]
 8012d10:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d14:	6a1e      	ldr	r6, [r3, #32]
 8012d16:	462a      	mov	r2, r5
 8012d18:	4623      	mov	r3, r4
 8012d1a:	4639      	mov	r1, r7
 8012d1c:	46b4      	mov	ip, r6
 8012d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d22:	4760      	bx	ip
 8012d24:	4619      	mov	r1, r3
 8012d26:	f000 f857 	bl	8012dd8 <_ZNKSt9type_info7__equalERKS_>
 8012d2a:	2800      	cmp	r0, #0
 8012d2c:	d0ee      	beq.n	8012d0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8012d2e:	2006      	movs	r0, #6
 8012d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8012d34:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d38:	460d      	mov	r5, r1
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8012d40:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8012d44:	4681      	mov	r9, r0
 8012d46:	4617      	mov	r7, r2
 8012d48:	4698      	mov	r8, r3
 8012d4a:	f000 f845 	bl	8012dd8 <_ZNKSt9type_info7__equalERKS_>
 8012d4e:	b190      	cbz	r0, 8012d76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8012d50:	2d00      	cmp	r5, #0
 8012d52:	6034      	str	r4, [r6, #0]
 8012d54:	7137      	strb	r7, [r6, #4]
 8012d56:	db09      	blt.n	8012d6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8012d58:	442c      	add	r4, r5
 8012d5a:	45a2      	cmp	sl, r4
 8012d5c:	bf14      	ite	ne
 8012d5e:	2401      	movne	r4, #1
 8012d60:	2406      	moveq	r4, #6
 8012d62:	71b4      	strb	r4, [r6, #6]
 8012d64:	2000      	movs	r0, #0
 8012d66:	b001      	add	sp, #4
 8012d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6c:	3502      	adds	r5, #2
 8012d6e:	d1f9      	bne.n	8012d64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012d70:	2301      	movs	r3, #1
 8012d72:	71b3      	strb	r3, [r6, #6]
 8012d74:	e7f6      	b.n	8012d64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012d76:	4554      	cmp	r4, sl
 8012d78:	d106      	bne.n	8012d88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8012d7a:	4659      	mov	r1, fp
 8012d7c:	4648      	mov	r0, r9
 8012d7e:	f000 f82b 	bl	8012dd8 <_ZNKSt9type_info7__equalERKS_>
 8012d82:	b108      	cbz	r0, 8012d88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8012d84:	7177      	strb	r7, [r6, #5]
 8012d86:	e7ed      	b.n	8012d64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012d88:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8012d8c:	6803      	ldr	r3, [r0, #0]
 8012d8e:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8012d92:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8012d96:	69dc      	ldr	r4, [r3, #28]
 8012d98:	463a      	mov	r2, r7
 8012d9a:	4643      	mov	r3, r8
 8012d9c:	4629      	mov	r1, r5
 8012d9e:	46a4      	mov	ip, r4
 8012da0:	b001      	add	sp, #4
 8012da2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da6:	4760      	bx	ip

08012da8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8012da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dac:	4607      	mov	r7, r0
 8012dae:	460c      	mov	r4, r1
 8012db0:	4615      	mov	r5, r2
 8012db2:	461e      	mov	r6, r3
 8012db4:	f7ff fbfd 	bl	80125b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8012db8:	b948      	cbnz	r0, 8012dce <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8012dba:	68b8      	ldr	r0, [r7, #8]
 8012dbc:	6803      	ldr	r3, [r0, #0]
 8012dbe:	699f      	ldr	r7, [r3, #24]
 8012dc0:	462a      	mov	r2, r5
 8012dc2:	4633      	mov	r3, r6
 8012dc4:	4621      	mov	r1, r4
 8012dc6:	46bc      	mov	ip, r7
 8012dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dcc:	4760      	bx	ip
 8012dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012dd2 <_ZNSt9type_infoD1Ev>:
 8012dd2:	4770      	bx	lr

08012dd4 <_ZNKSt9type_info14__is_pointer_pEv>:
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	4770      	bx	lr

08012dd8 <_ZNKSt9type_info7__equalERKS_>:
 8012dd8:	4281      	cmp	r1, r0
 8012dda:	b508      	push	{r3, lr}
 8012ddc:	d00e      	beq.n	8012dfc <_ZNKSt9type_info7__equalERKS_+0x24>
 8012dde:	6840      	ldr	r0, [r0, #4]
 8012de0:	7803      	ldrb	r3, [r0, #0]
 8012de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012de4:	d00c      	beq.n	8012e00 <_ZNKSt9type_info7__equalERKS_+0x28>
 8012de6:	6849      	ldr	r1, [r1, #4]
 8012de8:	780b      	ldrb	r3, [r1, #0]
 8012dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dec:	bf08      	it	eq
 8012dee:	3101      	addeq	r1, #1
 8012df0:	f7ed fa0e 	bl	8000210 <strcmp>
 8012df4:	fab0 f080 	clz	r0, r0
 8012df8:	0940      	lsrs	r0, r0, #5
 8012dfa:	bd08      	pop	{r3, pc}
 8012dfc:	2001      	movs	r0, #1
 8012dfe:	e7fc      	b.n	8012dfa <_ZNKSt9type_info7__equalERKS_+0x22>
 8012e00:	2000      	movs	r0, #0
 8012e02:	e7fa      	b.n	8012dfa <_ZNKSt9type_info7__equalERKS_+0x22>

08012e04 <__aeabi_atexit>:
 8012e04:	460b      	mov	r3, r1
 8012e06:	4601      	mov	r1, r0
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f001 bb43 	b.w	8014494 <__cxa_atexit>

08012e0e <_ZdlPv>:
 8012e0e:	f001 ba8b 	b.w	8014328 <free>

08012e12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012e12:	7803      	ldrb	r3, [r0, #0]
 8012e14:	2b47      	cmp	r3, #71	@ 0x47
 8012e16:	d117      	bne.n	8012e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e18:	7843      	ldrb	r3, [r0, #1]
 8012e1a:	2b4e      	cmp	r3, #78	@ 0x4e
 8012e1c:	d114      	bne.n	8012e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e1e:	7883      	ldrb	r3, [r0, #2]
 8012e20:	2b55      	cmp	r3, #85	@ 0x55
 8012e22:	d111      	bne.n	8012e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e24:	78c3      	ldrb	r3, [r0, #3]
 8012e26:	2b43      	cmp	r3, #67	@ 0x43
 8012e28:	d10e      	bne.n	8012e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e2a:	7903      	ldrb	r3, [r0, #4]
 8012e2c:	2b43      	cmp	r3, #67	@ 0x43
 8012e2e:	d10b      	bne.n	8012e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e30:	7943      	ldrb	r3, [r0, #5]
 8012e32:	2b2b      	cmp	r3, #43	@ 0x2b
 8012e34:	d108      	bne.n	8012e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e36:	7983      	ldrb	r3, [r0, #6]
 8012e38:	2b2b      	cmp	r3, #43	@ 0x2b
 8012e3a:	d105      	bne.n	8012e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e3c:	79c0      	ldrb	r0, [r0, #7]
 8012e3e:	2801      	cmp	r0, #1
 8012e40:	bf8c      	ite	hi
 8012e42:	2000      	movhi	r0, #0
 8012e44:	2001      	movls	r0, #1
 8012e46:	4770      	bx	lr
 8012e48:	2000      	movs	r0, #0
 8012e4a:	4770      	bx	lr

08012e4c <__cxa_call_terminate>:
 8012e4c:	b510      	push	{r4, lr}
 8012e4e:	4604      	mov	r4, r0
 8012e50:	b148      	cbz	r0, 8012e66 <__cxa_call_terminate+0x1a>
 8012e52:	f000 f83b 	bl	8012ecc <__cxa_begin_catch>
 8012e56:	4620      	mov	r0, r4
 8012e58:	f7ff ffdb 	bl	8012e12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012e5c:	b118      	cbz	r0, 8012e66 <__cxa_call_terminate+0x1a>
 8012e5e:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8012e62:	f7ff feff 	bl	8012c64 <_ZN10__cxxabiv111__terminateEPFvvE>
 8012e66:	f7ff ff09 	bl	8012c7c <_ZSt9terminatev>

08012e6a <__cxa_call_unexpected>:
 8012e6a:	b538      	push	{r3, r4, r5, lr}
 8012e6c:	4602      	mov	r2, r0
 8012e6e:	f7ff ffd0 	bl	8012e12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012e72:	4604      	mov	r4, r0
 8012e74:	b140      	cbz	r0, 8012e88 <__cxa_call_unexpected+0x1e>
 8012e76:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8012e7a:	2500      	movs	r5, #0
 8012e7c:	4610      	mov	r0, r2
 8012e7e:	f000 f825 	bl	8012ecc <__cxa_begin_catch>
 8012e82:	b11d      	cbz	r5, 8012e8c <__cxa_call_unexpected+0x22>
 8012e84:	f7ff ff0c 	bl	8012ca0 <_ZSt10unexpectedv>
 8012e88:	2501      	movs	r5, #1
 8012e8a:	e7f7      	b.n	8012e7c <__cxa_call_unexpected+0x12>
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f7ff fefa 	bl	8012c86 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08012e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012e92:	7803      	ldrb	r3, [r0, #0]
 8012e94:	2b47      	cmp	r3, #71	@ 0x47
 8012e96:	d117      	bne.n	8012ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e98:	7843      	ldrb	r3, [r0, #1]
 8012e9a:	2b4e      	cmp	r3, #78	@ 0x4e
 8012e9c:	d114      	bne.n	8012ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012e9e:	7883      	ldrb	r3, [r0, #2]
 8012ea0:	2b55      	cmp	r3, #85	@ 0x55
 8012ea2:	d111      	bne.n	8012ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ea4:	78c3      	ldrb	r3, [r0, #3]
 8012ea6:	2b43      	cmp	r3, #67	@ 0x43
 8012ea8:	d10e      	bne.n	8012ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012eaa:	7903      	ldrb	r3, [r0, #4]
 8012eac:	2b43      	cmp	r3, #67	@ 0x43
 8012eae:	d10b      	bne.n	8012ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012eb0:	7943      	ldrb	r3, [r0, #5]
 8012eb2:	2b2b      	cmp	r3, #43	@ 0x2b
 8012eb4:	d108      	bne.n	8012ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012eb6:	7983      	ldrb	r3, [r0, #6]
 8012eb8:	2b2b      	cmp	r3, #43	@ 0x2b
 8012eba:	d105      	bne.n	8012ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ebc:	79c0      	ldrb	r0, [r0, #7]
 8012ebe:	2801      	cmp	r0, #1
 8012ec0:	bf8c      	ite	hi
 8012ec2:	2000      	movhi	r0, #0
 8012ec4:	2001      	movls	r0, #1
 8012ec6:	4770      	bx	lr
 8012ec8:	2000      	movs	r0, #0
 8012eca:	4770      	bx	lr

08012ecc <__cxa_begin_catch>:
 8012ecc:	b538      	push	{r3, r4, r5, lr}
 8012ece:	4604      	mov	r4, r0
 8012ed0:	f7ff fc4c 	bl	801276c <__cxa_get_globals>
 8012ed4:	6805      	ldr	r5, [r0, #0]
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f1a4 0120 	sub.w	r1, r4, #32
 8012ede:	f7ff ffd8 	bl	8012e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012ee2:	b928      	cbnz	r0, 8012ef0 <__cxa_begin_catch+0x24>
 8012ee4:	b10d      	cbz	r5, 8012eea <__cxa_begin_catch+0x1e>
 8012ee6:	f7ff fec9 	bl	8012c7c <_ZSt9terminatev>
 8012eea:	6011      	str	r1, [r2, #0]
 8012eec:	4628      	mov	r0, r5
 8012eee:	bd38      	pop	{r3, r4, r5, pc}
 8012ef0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	bfb4      	ite	lt
 8012ef8:	f1c3 0301 	rsblt	r3, r3, #1
 8012efc:	3301      	addge	r3, #1
 8012efe:	f844 3c0c 	str.w	r3, [r4, #-12]
 8012f02:	6853      	ldr	r3, [r2, #4]
 8012f04:	428d      	cmp	r5, r1
 8012f06:	f103 33ff 	add.w	r3, r3, #4294967295
 8012f0a:	6053      	str	r3, [r2, #4]
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	bf1c      	itt	ne
 8012f10:	f844 5c10 	strne.w	r5, [r4, #-16]
 8012f14:	6011      	strne	r1, [r2, #0]
 8012f16:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8012f18:	f7ee fa1c 	bl	8001354 <_Unwind_Complete>
 8012f1c:	e7e6      	b.n	8012eec <__cxa_begin_catch+0x20>
	...

08012f20 <_ZSt15get_new_handlerv>:
 8012f20:	4b02      	ldr	r3, [pc, #8]	@ (8012f2c <_ZSt15get_new_handlerv+0xc>)
 8012f22:	6818      	ldr	r0, [r3, #0]
 8012f24:	f3bf 8f5b 	dmb	ish
 8012f28:	4770      	bx	lr
 8012f2a:	bf00      	nop
 8012f2c:	20000574 	.word	0x20000574

08012f30 <atan2>:
 8012f30:	f000 b982 	b.w	8013238 <__ieee754_atan2>

08012f34 <pow>:
 8012f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f36:	ed2d 8b02 	vpush	{d8}
 8012f3a:	eeb0 8a40 	vmov.f32	s16, s0
 8012f3e:	eef0 8a60 	vmov.f32	s17, s1
 8012f42:	ec55 4b11 	vmov	r4, r5, d1
 8012f46:	f000 fa3f 	bl	80133c8 <__ieee754_pow>
 8012f4a:	4622      	mov	r2, r4
 8012f4c:	462b      	mov	r3, r5
 8012f4e:	4620      	mov	r0, r4
 8012f50:	4629      	mov	r1, r5
 8012f52:	ec57 6b10 	vmov	r6, r7, d0
 8012f56:	f7ed fe19 	bl	8000b8c <__aeabi_dcmpun>
 8012f5a:	2800      	cmp	r0, #0
 8012f5c:	d13b      	bne.n	8012fd6 <pow+0xa2>
 8012f5e:	ec51 0b18 	vmov	r0, r1, d8
 8012f62:	2200      	movs	r2, #0
 8012f64:	2300      	movs	r3, #0
 8012f66:	f7ed fddf 	bl	8000b28 <__aeabi_dcmpeq>
 8012f6a:	b1b8      	cbz	r0, 8012f9c <pow+0x68>
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	2300      	movs	r3, #0
 8012f70:	4620      	mov	r0, r4
 8012f72:	4629      	mov	r1, r5
 8012f74:	f7ed fdd8 	bl	8000b28 <__aeabi_dcmpeq>
 8012f78:	2800      	cmp	r0, #0
 8012f7a:	d146      	bne.n	801300a <pow+0xd6>
 8012f7c:	ec45 4b10 	vmov	d0, r4, r5
 8012f80:	f000 f874 	bl	801306c <finite>
 8012f84:	b338      	cbz	r0, 8012fd6 <pow+0xa2>
 8012f86:	2200      	movs	r2, #0
 8012f88:	2300      	movs	r3, #0
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	4629      	mov	r1, r5
 8012f8e:	f7ed fdd5 	bl	8000b3c <__aeabi_dcmplt>
 8012f92:	b300      	cbz	r0, 8012fd6 <pow+0xa2>
 8012f94:	f002 f890 	bl	80150b8 <__errno>
 8012f98:	2322      	movs	r3, #34	@ 0x22
 8012f9a:	e01b      	b.n	8012fd4 <pow+0xa0>
 8012f9c:	ec47 6b10 	vmov	d0, r6, r7
 8012fa0:	f000 f864 	bl	801306c <finite>
 8012fa4:	b9e0      	cbnz	r0, 8012fe0 <pow+0xac>
 8012fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8012faa:	eef0 0a68 	vmov.f32	s1, s17
 8012fae:	f000 f85d 	bl	801306c <finite>
 8012fb2:	b1a8      	cbz	r0, 8012fe0 <pow+0xac>
 8012fb4:	ec45 4b10 	vmov	d0, r4, r5
 8012fb8:	f000 f858 	bl	801306c <finite>
 8012fbc:	b180      	cbz	r0, 8012fe0 <pow+0xac>
 8012fbe:	4632      	mov	r2, r6
 8012fc0:	463b      	mov	r3, r7
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	4639      	mov	r1, r7
 8012fc6:	f7ed fde1 	bl	8000b8c <__aeabi_dcmpun>
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d0e2      	beq.n	8012f94 <pow+0x60>
 8012fce:	f002 f873 	bl	80150b8 <__errno>
 8012fd2:	2321      	movs	r3, #33	@ 0x21
 8012fd4:	6003      	str	r3, [r0, #0]
 8012fd6:	ecbd 8b02 	vpop	{d8}
 8012fda:	ec47 6b10 	vmov	d0, r6, r7
 8012fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	4639      	mov	r1, r7
 8012fe8:	f7ed fd9e 	bl	8000b28 <__aeabi_dcmpeq>
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d0f2      	beq.n	8012fd6 <pow+0xa2>
 8012ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8012ff4:	eef0 0a68 	vmov.f32	s1, s17
 8012ff8:	f000 f838 	bl	801306c <finite>
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d0ea      	beq.n	8012fd6 <pow+0xa2>
 8013000:	ec45 4b10 	vmov	d0, r4, r5
 8013004:	f000 f832 	bl	801306c <finite>
 8013008:	e7c3      	b.n	8012f92 <pow+0x5e>
 801300a:	4f01      	ldr	r7, [pc, #4]	@ (8013010 <pow+0xdc>)
 801300c:	2600      	movs	r6, #0
 801300e:	e7e2      	b.n	8012fd6 <pow+0xa2>
 8013010:	3ff00000 	.word	0x3ff00000

08013014 <sqrt>:
 8013014:	b538      	push	{r3, r4, r5, lr}
 8013016:	ed2d 8b02 	vpush	{d8}
 801301a:	ec55 4b10 	vmov	r4, r5, d0
 801301e:	f000 f831 	bl	8013084 <__ieee754_sqrt>
 8013022:	4622      	mov	r2, r4
 8013024:	462b      	mov	r3, r5
 8013026:	4620      	mov	r0, r4
 8013028:	4629      	mov	r1, r5
 801302a:	eeb0 8a40 	vmov.f32	s16, s0
 801302e:	eef0 8a60 	vmov.f32	s17, s1
 8013032:	f7ed fdab 	bl	8000b8c <__aeabi_dcmpun>
 8013036:	b990      	cbnz	r0, 801305e <sqrt+0x4a>
 8013038:	2200      	movs	r2, #0
 801303a:	2300      	movs	r3, #0
 801303c:	4620      	mov	r0, r4
 801303e:	4629      	mov	r1, r5
 8013040:	f7ed fd7c 	bl	8000b3c <__aeabi_dcmplt>
 8013044:	b158      	cbz	r0, 801305e <sqrt+0x4a>
 8013046:	f002 f837 	bl	80150b8 <__errno>
 801304a:	2321      	movs	r3, #33	@ 0x21
 801304c:	6003      	str	r3, [r0, #0]
 801304e:	2200      	movs	r2, #0
 8013050:	2300      	movs	r3, #0
 8013052:	4610      	mov	r0, r2
 8013054:	4619      	mov	r1, r3
 8013056:	f7ed fc29 	bl	80008ac <__aeabi_ddiv>
 801305a:	ec41 0b18 	vmov	d8, r0, r1
 801305e:	eeb0 0a48 	vmov.f32	s0, s16
 8013062:	eef0 0a68 	vmov.f32	s1, s17
 8013066:	ecbd 8b02 	vpop	{d8}
 801306a:	bd38      	pop	{r3, r4, r5, pc}

0801306c <finite>:
 801306c:	b082      	sub	sp, #8
 801306e:	ed8d 0b00 	vstr	d0, [sp]
 8013072:	9801      	ldr	r0, [sp, #4]
 8013074:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8013078:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801307c:	0fc0      	lsrs	r0, r0, #31
 801307e:	b002      	add	sp, #8
 8013080:	4770      	bx	lr
	...

08013084 <__ieee754_sqrt>:
 8013084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013088:	4a68      	ldr	r2, [pc, #416]	@ (801322c <__ieee754_sqrt+0x1a8>)
 801308a:	ec55 4b10 	vmov	r4, r5, d0
 801308e:	43aa      	bics	r2, r5
 8013090:	462b      	mov	r3, r5
 8013092:	4621      	mov	r1, r4
 8013094:	d110      	bne.n	80130b8 <__ieee754_sqrt+0x34>
 8013096:	4622      	mov	r2, r4
 8013098:	4620      	mov	r0, r4
 801309a:	4629      	mov	r1, r5
 801309c:	f7ed fadc 	bl	8000658 <__aeabi_dmul>
 80130a0:	4602      	mov	r2, r0
 80130a2:	460b      	mov	r3, r1
 80130a4:	4620      	mov	r0, r4
 80130a6:	4629      	mov	r1, r5
 80130a8:	f7ed f920 	bl	80002ec <__adddf3>
 80130ac:	4604      	mov	r4, r0
 80130ae:	460d      	mov	r5, r1
 80130b0:	ec45 4b10 	vmov	d0, r4, r5
 80130b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b8:	2d00      	cmp	r5, #0
 80130ba:	dc0e      	bgt.n	80130da <__ieee754_sqrt+0x56>
 80130bc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80130c0:	4322      	orrs	r2, r4
 80130c2:	d0f5      	beq.n	80130b0 <__ieee754_sqrt+0x2c>
 80130c4:	b19d      	cbz	r5, 80130ee <__ieee754_sqrt+0x6a>
 80130c6:	4622      	mov	r2, r4
 80130c8:	4620      	mov	r0, r4
 80130ca:	4629      	mov	r1, r5
 80130cc:	f7ed f90c 	bl	80002e8 <__aeabi_dsub>
 80130d0:	4602      	mov	r2, r0
 80130d2:	460b      	mov	r3, r1
 80130d4:	f7ed fbea 	bl	80008ac <__aeabi_ddiv>
 80130d8:	e7e8      	b.n	80130ac <__ieee754_sqrt+0x28>
 80130da:	152a      	asrs	r2, r5, #20
 80130dc:	d115      	bne.n	801310a <__ieee754_sqrt+0x86>
 80130de:	2000      	movs	r0, #0
 80130e0:	e009      	b.n	80130f6 <__ieee754_sqrt+0x72>
 80130e2:	0acb      	lsrs	r3, r1, #11
 80130e4:	3a15      	subs	r2, #21
 80130e6:	0549      	lsls	r1, r1, #21
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d0fa      	beq.n	80130e2 <__ieee754_sqrt+0x5e>
 80130ec:	e7f7      	b.n	80130de <__ieee754_sqrt+0x5a>
 80130ee:	462a      	mov	r2, r5
 80130f0:	e7fa      	b.n	80130e8 <__ieee754_sqrt+0x64>
 80130f2:	005b      	lsls	r3, r3, #1
 80130f4:	3001      	adds	r0, #1
 80130f6:	02dc      	lsls	r4, r3, #11
 80130f8:	d5fb      	bpl.n	80130f2 <__ieee754_sqrt+0x6e>
 80130fa:	1e44      	subs	r4, r0, #1
 80130fc:	1b12      	subs	r2, r2, r4
 80130fe:	f1c0 0420 	rsb	r4, r0, #32
 8013102:	fa21 f404 	lsr.w	r4, r1, r4
 8013106:	4323      	orrs	r3, r4
 8013108:	4081      	lsls	r1, r0
 801310a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801310e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013116:	07d2      	lsls	r2, r2, #31
 8013118:	bf5c      	itt	pl
 801311a:	005b      	lslpl	r3, r3, #1
 801311c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013120:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013124:	bf58      	it	pl
 8013126:	0049      	lslpl	r1, r1, #1
 8013128:	2600      	movs	r6, #0
 801312a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801312e:	106d      	asrs	r5, r5, #1
 8013130:	0049      	lsls	r1, r1, #1
 8013132:	2016      	movs	r0, #22
 8013134:	4632      	mov	r2, r6
 8013136:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801313a:	1917      	adds	r7, r2, r4
 801313c:	429f      	cmp	r7, r3
 801313e:	bfde      	ittt	le
 8013140:	193a      	addle	r2, r7, r4
 8013142:	1bdb      	suble	r3, r3, r7
 8013144:	1936      	addle	r6, r6, r4
 8013146:	0fcf      	lsrs	r7, r1, #31
 8013148:	3801      	subs	r0, #1
 801314a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801314e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013152:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013156:	d1f0      	bne.n	801313a <__ieee754_sqrt+0xb6>
 8013158:	4604      	mov	r4, r0
 801315a:	2720      	movs	r7, #32
 801315c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013160:	429a      	cmp	r2, r3
 8013162:	eb00 0e0c 	add.w	lr, r0, ip
 8013166:	db02      	blt.n	801316e <__ieee754_sqrt+0xea>
 8013168:	d113      	bne.n	8013192 <__ieee754_sqrt+0x10e>
 801316a:	458e      	cmp	lr, r1
 801316c:	d811      	bhi.n	8013192 <__ieee754_sqrt+0x10e>
 801316e:	f1be 0f00 	cmp.w	lr, #0
 8013172:	eb0e 000c 	add.w	r0, lr, ip
 8013176:	da42      	bge.n	80131fe <__ieee754_sqrt+0x17a>
 8013178:	2800      	cmp	r0, #0
 801317a:	db40      	blt.n	80131fe <__ieee754_sqrt+0x17a>
 801317c:	f102 0801 	add.w	r8, r2, #1
 8013180:	1a9b      	subs	r3, r3, r2
 8013182:	458e      	cmp	lr, r1
 8013184:	bf88      	it	hi
 8013186:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801318a:	eba1 010e 	sub.w	r1, r1, lr
 801318e:	4464      	add	r4, ip
 8013190:	4642      	mov	r2, r8
 8013192:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013196:	3f01      	subs	r7, #1
 8013198:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801319c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80131a0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80131a4:	d1dc      	bne.n	8013160 <__ieee754_sqrt+0xdc>
 80131a6:	4319      	orrs	r1, r3
 80131a8:	d01b      	beq.n	80131e2 <__ieee754_sqrt+0x15e>
 80131aa:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013230 <__ieee754_sqrt+0x1ac>
 80131ae:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8013234 <__ieee754_sqrt+0x1b0>
 80131b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80131b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80131ba:	f7ed f895 	bl	80002e8 <__aeabi_dsub>
 80131be:	e9da 8900 	ldrd	r8, r9, [sl]
 80131c2:	4602      	mov	r2, r0
 80131c4:	460b      	mov	r3, r1
 80131c6:	4640      	mov	r0, r8
 80131c8:	4649      	mov	r1, r9
 80131ca:	f7ed fcc1 	bl	8000b50 <__aeabi_dcmple>
 80131ce:	b140      	cbz	r0, 80131e2 <__ieee754_sqrt+0x15e>
 80131d0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80131d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80131d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80131dc:	d111      	bne.n	8013202 <__ieee754_sqrt+0x17e>
 80131de:	3601      	adds	r6, #1
 80131e0:	463c      	mov	r4, r7
 80131e2:	1072      	asrs	r2, r6, #1
 80131e4:	0863      	lsrs	r3, r4, #1
 80131e6:	07f1      	lsls	r1, r6, #31
 80131e8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80131ec:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80131f0:	bf48      	it	mi
 80131f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80131f6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80131fa:	4618      	mov	r0, r3
 80131fc:	e756      	b.n	80130ac <__ieee754_sqrt+0x28>
 80131fe:	4690      	mov	r8, r2
 8013200:	e7be      	b.n	8013180 <__ieee754_sqrt+0xfc>
 8013202:	f7ed f873 	bl	80002ec <__adddf3>
 8013206:	e9da 8900 	ldrd	r8, r9, [sl]
 801320a:	4602      	mov	r2, r0
 801320c:	460b      	mov	r3, r1
 801320e:	4640      	mov	r0, r8
 8013210:	4649      	mov	r1, r9
 8013212:	f7ed fc93 	bl	8000b3c <__aeabi_dcmplt>
 8013216:	b120      	cbz	r0, 8013222 <__ieee754_sqrt+0x19e>
 8013218:	1ca0      	adds	r0, r4, #2
 801321a:	bf08      	it	eq
 801321c:	3601      	addeq	r6, #1
 801321e:	3402      	adds	r4, #2
 8013220:	e7df      	b.n	80131e2 <__ieee754_sqrt+0x15e>
 8013222:	1c63      	adds	r3, r4, #1
 8013224:	f023 0401 	bic.w	r4, r3, #1
 8013228:	e7db      	b.n	80131e2 <__ieee754_sqrt+0x15e>
 801322a:	bf00      	nop
 801322c:	7ff00000 	.word	0x7ff00000
 8013230:	20000028 	.word	0x20000028
 8013234:	20000020 	.word	0x20000020

08013238 <__ieee754_atan2>:
 8013238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801323c:	ec57 6b11 	vmov	r6, r7, d1
 8013240:	4273      	negs	r3, r6
 8013242:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80133c0 <__ieee754_atan2+0x188>
 8013246:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801324a:	4333      	orrs	r3, r6
 801324c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013250:	4543      	cmp	r3, r8
 8013252:	ec51 0b10 	vmov	r0, r1, d0
 8013256:	4635      	mov	r5, r6
 8013258:	d809      	bhi.n	801326e <__ieee754_atan2+0x36>
 801325a:	4244      	negs	r4, r0
 801325c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013260:	4304      	orrs	r4, r0
 8013262:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013266:	4544      	cmp	r4, r8
 8013268:	468e      	mov	lr, r1
 801326a:	4681      	mov	r9, r0
 801326c:	d907      	bls.n	801327e <__ieee754_atan2+0x46>
 801326e:	4632      	mov	r2, r6
 8013270:	463b      	mov	r3, r7
 8013272:	f7ed f83b 	bl	80002ec <__adddf3>
 8013276:	ec41 0b10 	vmov	d0, r0, r1
 801327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801327e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013282:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013286:	4334      	orrs	r4, r6
 8013288:	d103      	bne.n	8013292 <__ieee754_atan2+0x5a>
 801328a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801328e:	f000 bddf 	b.w	8013e50 <atan>
 8013292:	17bc      	asrs	r4, r7, #30
 8013294:	f004 0402 	and.w	r4, r4, #2
 8013298:	ea53 0909 	orrs.w	r9, r3, r9
 801329c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80132a0:	d107      	bne.n	80132b2 <__ieee754_atan2+0x7a>
 80132a2:	2c02      	cmp	r4, #2
 80132a4:	d05f      	beq.n	8013366 <__ieee754_atan2+0x12e>
 80132a6:	2c03      	cmp	r4, #3
 80132a8:	d1e5      	bne.n	8013276 <__ieee754_atan2+0x3e>
 80132aa:	a141      	add	r1, pc, #260	@ (adr r1, 80133b0 <__ieee754_atan2+0x178>)
 80132ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132b0:	e7e1      	b.n	8013276 <__ieee754_atan2+0x3e>
 80132b2:	4315      	orrs	r5, r2
 80132b4:	d106      	bne.n	80132c4 <__ieee754_atan2+0x8c>
 80132b6:	f1be 0f00 	cmp.w	lr, #0
 80132ba:	da5f      	bge.n	801337c <__ieee754_atan2+0x144>
 80132bc:	a13e      	add	r1, pc, #248	@ (adr r1, 80133b8 <__ieee754_atan2+0x180>)
 80132be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132c2:	e7d8      	b.n	8013276 <__ieee754_atan2+0x3e>
 80132c4:	4542      	cmp	r2, r8
 80132c6:	d10f      	bne.n	80132e8 <__ieee754_atan2+0xb0>
 80132c8:	4293      	cmp	r3, r2
 80132ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80132ce:	d107      	bne.n	80132e0 <__ieee754_atan2+0xa8>
 80132d0:	2c02      	cmp	r4, #2
 80132d2:	d84c      	bhi.n	801336e <__ieee754_atan2+0x136>
 80132d4:	4b34      	ldr	r3, [pc, #208]	@ (80133a8 <__ieee754_atan2+0x170>)
 80132d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80132da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132de:	e7ca      	b.n	8013276 <__ieee754_atan2+0x3e>
 80132e0:	2c02      	cmp	r4, #2
 80132e2:	d848      	bhi.n	8013376 <__ieee754_atan2+0x13e>
 80132e4:	4b31      	ldr	r3, [pc, #196]	@ (80133ac <__ieee754_atan2+0x174>)
 80132e6:	e7f6      	b.n	80132d6 <__ieee754_atan2+0x9e>
 80132e8:	4543      	cmp	r3, r8
 80132ea:	d0e4      	beq.n	80132b6 <__ieee754_atan2+0x7e>
 80132ec:	1a9b      	subs	r3, r3, r2
 80132ee:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80132f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80132f6:	da1e      	bge.n	8013336 <__ieee754_atan2+0xfe>
 80132f8:	2f00      	cmp	r7, #0
 80132fa:	da01      	bge.n	8013300 <__ieee754_atan2+0xc8>
 80132fc:	323c      	adds	r2, #60	@ 0x3c
 80132fe:	db1e      	blt.n	801333e <__ieee754_atan2+0x106>
 8013300:	4632      	mov	r2, r6
 8013302:	463b      	mov	r3, r7
 8013304:	f7ed fad2 	bl	80008ac <__aeabi_ddiv>
 8013308:	ec41 0b10 	vmov	d0, r0, r1
 801330c:	f000 ff38 	bl	8014180 <fabs>
 8013310:	f000 fd9e 	bl	8013e50 <atan>
 8013314:	ec51 0b10 	vmov	r0, r1, d0
 8013318:	2c01      	cmp	r4, #1
 801331a:	d013      	beq.n	8013344 <__ieee754_atan2+0x10c>
 801331c:	2c02      	cmp	r4, #2
 801331e:	d015      	beq.n	801334c <__ieee754_atan2+0x114>
 8013320:	2c00      	cmp	r4, #0
 8013322:	d0a8      	beq.n	8013276 <__ieee754_atan2+0x3e>
 8013324:	a318      	add	r3, pc, #96	@ (adr r3, 8013388 <__ieee754_atan2+0x150>)
 8013326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332a:	f7ec ffdd 	bl	80002e8 <__aeabi_dsub>
 801332e:	a318      	add	r3, pc, #96	@ (adr r3, 8013390 <__ieee754_atan2+0x158>)
 8013330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013334:	e014      	b.n	8013360 <__ieee754_atan2+0x128>
 8013336:	a118      	add	r1, pc, #96	@ (adr r1, 8013398 <__ieee754_atan2+0x160>)
 8013338:	e9d1 0100 	ldrd	r0, r1, [r1]
 801333c:	e7ec      	b.n	8013318 <__ieee754_atan2+0xe0>
 801333e:	2000      	movs	r0, #0
 8013340:	2100      	movs	r1, #0
 8013342:	e7e9      	b.n	8013318 <__ieee754_atan2+0xe0>
 8013344:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013348:	4619      	mov	r1, r3
 801334a:	e794      	b.n	8013276 <__ieee754_atan2+0x3e>
 801334c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013388 <__ieee754_atan2+0x150>)
 801334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013352:	f7ec ffc9 	bl	80002e8 <__aeabi_dsub>
 8013356:	4602      	mov	r2, r0
 8013358:	460b      	mov	r3, r1
 801335a:	a10d      	add	r1, pc, #52	@ (adr r1, 8013390 <__ieee754_atan2+0x158>)
 801335c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013360:	f7ec ffc2 	bl	80002e8 <__aeabi_dsub>
 8013364:	e787      	b.n	8013276 <__ieee754_atan2+0x3e>
 8013366:	a10a      	add	r1, pc, #40	@ (adr r1, 8013390 <__ieee754_atan2+0x158>)
 8013368:	e9d1 0100 	ldrd	r0, r1, [r1]
 801336c:	e783      	b.n	8013276 <__ieee754_atan2+0x3e>
 801336e:	a10c      	add	r1, pc, #48	@ (adr r1, 80133a0 <__ieee754_atan2+0x168>)
 8013370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013374:	e77f      	b.n	8013276 <__ieee754_atan2+0x3e>
 8013376:	2000      	movs	r0, #0
 8013378:	2100      	movs	r1, #0
 801337a:	e77c      	b.n	8013276 <__ieee754_atan2+0x3e>
 801337c:	a106      	add	r1, pc, #24	@ (adr r1, 8013398 <__ieee754_atan2+0x160>)
 801337e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013382:	e778      	b.n	8013276 <__ieee754_atan2+0x3e>
 8013384:	f3af 8000 	nop.w
 8013388:	33145c07 	.word	0x33145c07
 801338c:	3ca1a626 	.word	0x3ca1a626
 8013390:	54442d18 	.word	0x54442d18
 8013394:	400921fb 	.word	0x400921fb
 8013398:	54442d18 	.word	0x54442d18
 801339c:	3ff921fb 	.word	0x3ff921fb
 80133a0:	54442d18 	.word	0x54442d18
 80133a4:	3fe921fb 	.word	0x3fe921fb
 80133a8:	080181e8 	.word	0x080181e8
 80133ac:	080181d0 	.word	0x080181d0
 80133b0:	54442d18 	.word	0x54442d18
 80133b4:	c00921fb 	.word	0xc00921fb
 80133b8:	54442d18 	.word	0x54442d18
 80133bc:	bff921fb 	.word	0xbff921fb
 80133c0:	7ff00000 	.word	0x7ff00000
 80133c4:	00000000 	.word	0x00000000

080133c8 <__ieee754_pow>:
 80133c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133cc:	b091      	sub	sp, #68	@ 0x44
 80133ce:	ed8d 1b00 	vstr	d1, [sp]
 80133d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80133d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80133da:	ea5a 0001 	orrs.w	r0, sl, r1
 80133de:	ec57 6b10 	vmov	r6, r7, d0
 80133e2:	d113      	bne.n	801340c <__ieee754_pow+0x44>
 80133e4:	19b3      	adds	r3, r6, r6
 80133e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80133ea:	4152      	adcs	r2, r2
 80133ec:	4298      	cmp	r0, r3
 80133ee:	4b98      	ldr	r3, [pc, #608]	@ (8013650 <__ieee754_pow+0x288>)
 80133f0:	4193      	sbcs	r3, r2
 80133f2:	f080 84ea 	bcs.w	8013dca <__ieee754_pow+0xa02>
 80133f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80133fa:	4630      	mov	r0, r6
 80133fc:	4639      	mov	r1, r7
 80133fe:	f7ec ff75 	bl	80002ec <__adddf3>
 8013402:	ec41 0b10 	vmov	d0, r0, r1
 8013406:	b011      	add	sp, #68	@ 0x44
 8013408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801340c:	4a91      	ldr	r2, [pc, #580]	@ (8013654 <__ieee754_pow+0x28c>)
 801340e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013412:	4590      	cmp	r8, r2
 8013414:	463d      	mov	r5, r7
 8013416:	4633      	mov	r3, r6
 8013418:	d806      	bhi.n	8013428 <__ieee754_pow+0x60>
 801341a:	d101      	bne.n	8013420 <__ieee754_pow+0x58>
 801341c:	2e00      	cmp	r6, #0
 801341e:	d1ea      	bne.n	80133f6 <__ieee754_pow+0x2e>
 8013420:	4592      	cmp	sl, r2
 8013422:	d801      	bhi.n	8013428 <__ieee754_pow+0x60>
 8013424:	d10e      	bne.n	8013444 <__ieee754_pow+0x7c>
 8013426:	b169      	cbz	r1, 8013444 <__ieee754_pow+0x7c>
 8013428:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801342c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013430:	431d      	orrs	r5, r3
 8013432:	d1e0      	bne.n	80133f6 <__ieee754_pow+0x2e>
 8013434:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013438:	18db      	adds	r3, r3, r3
 801343a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801343e:	4152      	adcs	r2, r2
 8013440:	429d      	cmp	r5, r3
 8013442:	e7d4      	b.n	80133ee <__ieee754_pow+0x26>
 8013444:	2d00      	cmp	r5, #0
 8013446:	46c3      	mov	fp, r8
 8013448:	da3a      	bge.n	80134c0 <__ieee754_pow+0xf8>
 801344a:	4a83      	ldr	r2, [pc, #524]	@ (8013658 <__ieee754_pow+0x290>)
 801344c:	4592      	cmp	sl, r2
 801344e:	d84d      	bhi.n	80134ec <__ieee754_pow+0x124>
 8013450:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013454:	4592      	cmp	sl, r2
 8013456:	f240 84c7 	bls.w	8013de8 <__ieee754_pow+0xa20>
 801345a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801345e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013462:	2a14      	cmp	r2, #20
 8013464:	dd0f      	ble.n	8013486 <__ieee754_pow+0xbe>
 8013466:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801346a:	fa21 f402 	lsr.w	r4, r1, r2
 801346e:	fa04 f202 	lsl.w	r2, r4, r2
 8013472:	428a      	cmp	r2, r1
 8013474:	f040 84b8 	bne.w	8013de8 <__ieee754_pow+0xa20>
 8013478:	f004 0401 	and.w	r4, r4, #1
 801347c:	f1c4 0402 	rsb	r4, r4, #2
 8013480:	2900      	cmp	r1, #0
 8013482:	d158      	bne.n	8013536 <__ieee754_pow+0x16e>
 8013484:	e00e      	b.n	80134a4 <__ieee754_pow+0xdc>
 8013486:	2900      	cmp	r1, #0
 8013488:	d154      	bne.n	8013534 <__ieee754_pow+0x16c>
 801348a:	f1c2 0214 	rsb	r2, r2, #20
 801348e:	fa4a f402 	asr.w	r4, sl, r2
 8013492:	fa04 f202 	lsl.w	r2, r4, r2
 8013496:	4552      	cmp	r2, sl
 8013498:	f040 84a3 	bne.w	8013de2 <__ieee754_pow+0xa1a>
 801349c:	f004 0401 	and.w	r4, r4, #1
 80134a0:	f1c4 0402 	rsb	r4, r4, #2
 80134a4:	4a6d      	ldr	r2, [pc, #436]	@ (801365c <__ieee754_pow+0x294>)
 80134a6:	4592      	cmp	sl, r2
 80134a8:	d12e      	bne.n	8013508 <__ieee754_pow+0x140>
 80134aa:	f1b9 0f00 	cmp.w	r9, #0
 80134ae:	f280 8494 	bge.w	8013dda <__ieee754_pow+0xa12>
 80134b2:	496a      	ldr	r1, [pc, #424]	@ (801365c <__ieee754_pow+0x294>)
 80134b4:	4632      	mov	r2, r6
 80134b6:	463b      	mov	r3, r7
 80134b8:	2000      	movs	r0, #0
 80134ba:	f7ed f9f7 	bl	80008ac <__aeabi_ddiv>
 80134be:	e7a0      	b.n	8013402 <__ieee754_pow+0x3a>
 80134c0:	2400      	movs	r4, #0
 80134c2:	bbc1      	cbnz	r1, 8013536 <__ieee754_pow+0x16e>
 80134c4:	4a63      	ldr	r2, [pc, #396]	@ (8013654 <__ieee754_pow+0x28c>)
 80134c6:	4592      	cmp	sl, r2
 80134c8:	d1ec      	bne.n	80134a4 <__ieee754_pow+0xdc>
 80134ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80134ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80134d2:	431a      	orrs	r2, r3
 80134d4:	f000 8479 	beq.w	8013dca <__ieee754_pow+0xa02>
 80134d8:	4b61      	ldr	r3, [pc, #388]	@ (8013660 <__ieee754_pow+0x298>)
 80134da:	4598      	cmp	r8, r3
 80134dc:	d908      	bls.n	80134f0 <__ieee754_pow+0x128>
 80134de:	f1b9 0f00 	cmp.w	r9, #0
 80134e2:	f2c0 8476 	blt.w	8013dd2 <__ieee754_pow+0xa0a>
 80134e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80134ea:	e78a      	b.n	8013402 <__ieee754_pow+0x3a>
 80134ec:	2402      	movs	r4, #2
 80134ee:	e7e8      	b.n	80134c2 <__ieee754_pow+0xfa>
 80134f0:	f1b9 0f00 	cmp.w	r9, #0
 80134f4:	f04f 0000 	mov.w	r0, #0
 80134f8:	f04f 0100 	mov.w	r1, #0
 80134fc:	da81      	bge.n	8013402 <__ieee754_pow+0x3a>
 80134fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013502:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013506:	e77c      	b.n	8013402 <__ieee754_pow+0x3a>
 8013508:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801350c:	d106      	bne.n	801351c <__ieee754_pow+0x154>
 801350e:	4632      	mov	r2, r6
 8013510:	463b      	mov	r3, r7
 8013512:	4630      	mov	r0, r6
 8013514:	4639      	mov	r1, r7
 8013516:	f7ed f89f 	bl	8000658 <__aeabi_dmul>
 801351a:	e772      	b.n	8013402 <__ieee754_pow+0x3a>
 801351c:	4a51      	ldr	r2, [pc, #324]	@ (8013664 <__ieee754_pow+0x29c>)
 801351e:	4591      	cmp	r9, r2
 8013520:	d109      	bne.n	8013536 <__ieee754_pow+0x16e>
 8013522:	2d00      	cmp	r5, #0
 8013524:	db07      	blt.n	8013536 <__ieee754_pow+0x16e>
 8013526:	ec47 6b10 	vmov	d0, r6, r7
 801352a:	b011      	add	sp, #68	@ 0x44
 801352c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013530:	f7ff bda8 	b.w	8013084 <__ieee754_sqrt>
 8013534:	2400      	movs	r4, #0
 8013536:	ec47 6b10 	vmov	d0, r6, r7
 801353a:	9302      	str	r3, [sp, #8]
 801353c:	f000 fe20 	bl	8014180 <fabs>
 8013540:	9b02      	ldr	r3, [sp, #8]
 8013542:	ec51 0b10 	vmov	r0, r1, d0
 8013546:	bb53      	cbnz	r3, 801359e <__ieee754_pow+0x1d6>
 8013548:	4b44      	ldr	r3, [pc, #272]	@ (801365c <__ieee754_pow+0x294>)
 801354a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801354e:	429a      	cmp	r2, r3
 8013550:	d002      	beq.n	8013558 <__ieee754_pow+0x190>
 8013552:	f1b8 0f00 	cmp.w	r8, #0
 8013556:	d122      	bne.n	801359e <__ieee754_pow+0x1d6>
 8013558:	f1b9 0f00 	cmp.w	r9, #0
 801355c:	da05      	bge.n	801356a <__ieee754_pow+0x1a2>
 801355e:	4602      	mov	r2, r0
 8013560:	460b      	mov	r3, r1
 8013562:	2000      	movs	r0, #0
 8013564:	493d      	ldr	r1, [pc, #244]	@ (801365c <__ieee754_pow+0x294>)
 8013566:	f7ed f9a1 	bl	80008ac <__aeabi_ddiv>
 801356a:	2d00      	cmp	r5, #0
 801356c:	f6bf af49 	bge.w	8013402 <__ieee754_pow+0x3a>
 8013570:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8013574:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013578:	ea58 0804 	orrs.w	r8, r8, r4
 801357c:	d108      	bne.n	8013590 <__ieee754_pow+0x1c8>
 801357e:	4602      	mov	r2, r0
 8013580:	460b      	mov	r3, r1
 8013582:	4610      	mov	r0, r2
 8013584:	4619      	mov	r1, r3
 8013586:	f7ec feaf 	bl	80002e8 <__aeabi_dsub>
 801358a:	4602      	mov	r2, r0
 801358c:	460b      	mov	r3, r1
 801358e:	e794      	b.n	80134ba <__ieee754_pow+0xf2>
 8013590:	2c01      	cmp	r4, #1
 8013592:	f47f af36 	bne.w	8013402 <__ieee754_pow+0x3a>
 8013596:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801359a:	4619      	mov	r1, r3
 801359c:	e731      	b.n	8013402 <__ieee754_pow+0x3a>
 801359e:	0feb      	lsrs	r3, r5, #31
 80135a0:	3b01      	subs	r3, #1
 80135a2:	ea53 0204 	orrs.w	r2, r3, r4
 80135a6:	d102      	bne.n	80135ae <__ieee754_pow+0x1e6>
 80135a8:	4632      	mov	r2, r6
 80135aa:	463b      	mov	r3, r7
 80135ac:	e7e9      	b.n	8013582 <__ieee754_pow+0x1ba>
 80135ae:	3c01      	subs	r4, #1
 80135b0:	431c      	orrs	r4, r3
 80135b2:	d016      	beq.n	80135e2 <__ieee754_pow+0x21a>
 80135b4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013640 <__ieee754_pow+0x278>
 80135b8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80135bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80135c0:	f240 8112 	bls.w	80137e8 <__ieee754_pow+0x420>
 80135c4:	4b28      	ldr	r3, [pc, #160]	@ (8013668 <__ieee754_pow+0x2a0>)
 80135c6:	459a      	cmp	sl, r3
 80135c8:	4b25      	ldr	r3, [pc, #148]	@ (8013660 <__ieee754_pow+0x298>)
 80135ca:	d916      	bls.n	80135fa <__ieee754_pow+0x232>
 80135cc:	4598      	cmp	r8, r3
 80135ce:	d80b      	bhi.n	80135e8 <__ieee754_pow+0x220>
 80135d0:	f1b9 0f00 	cmp.w	r9, #0
 80135d4:	da0b      	bge.n	80135ee <__ieee754_pow+0x226>
 80135d6:	2000      	movs	r0, #0
 80135d8:	b011      	add	sp, #68	@ 0x44
 80135da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135de:	f000 be8b 	b.w	80142f8 <__math_oflow>
 80135e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8013648 <__ieee754_pow+0x280>
 80135e6:	e7e7      	b.n	80135b8 <__ieee754_pow+0x1f0>
 80135e8:	f1b9 0f00 	cmp.w	r9, #0
 80135ec:	dcf3      	bgt.n	80135d6 <__ieee754_pow+0x20e>
 80135ee:	2000      	movs	r0, #0
 80135f0:	b011      	add	sp, #68	@ 0x44
 80135f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f6:	f000 be77 	b.w	80142e8 <__math_uflow>
 80135fa:	4598      	cmp	r8, r3
 80135fc:	d20c      	bcs.n	8013618 <__ieee754_pow+0x250>
 80135fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013602:	2200      	movs	r2, #0
 8013604:	2300      	movs	r3, #0
 8013606:	f7ed fa99 	bl	8000b3c <__aeabi_dcmplt>
 801360a:	3800      	subs	r0, #0
 801360c:	bf18      	it	ne
 801360e:	2001      	movne	r0, #1
 8013610:	f1b9 0f00 	cmp.w	r9, #0
 8013614:	daec      	bge.n	80135f0 <__ieee754_pow+0x228>
 8013616:	e7df      	b.n	80135d8 <__ieee754_pow+0x210>
 8013618:	4b10      	ldr	r3, [pc, #64]	@ (801365c <__ieee754_pow+0x294>)
 801361a:	4598      	cmp	r8, r3
 801361c:	f04f 0200 	mov.w	r2, #0
 8013620:	d924      	bls.n	801366c <__ieee754_pow+0x2a4>
 8013622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013626:	2300      	movs	r3, #0
 8013628:	f7ed fa88 	bl	8000b3c <__aeabi_dcmplt>
 801362c:	3800      	subs	r0, #0
 801362e:	bf18      	it	ne
 8013630:	2001      	movne	r0, #1
 8013632:	f1b9 0f00 	cmp.w	r9, #0
 8013636:	dccf      	bgt.n	80135d8 <__ieee754_pow+0x210>
 8013638:	e7da      	b.n	80135f0 <__ieee754_pow+0x228>
 801363a:	bf00      	nop
 801363c:	f3af 8000 	nop.w
 8013640:	00000000 	.word	0x00000000
 8013644:	3ff00000 	.word	0x3ff00000
 8013648:	00000000 	.word	0x00000000
 801364c:	bff00000 	.word	0xbff00000
 8013650:	fff00000 	.word	0xfff00000
 8013654:	7ff00000 	.word	0x7ff00000
 8013658:	433fffff 	.word	0x433fffff
 801365c:	3ff00000 	.word	0x3ff00000
 8013660:	3fefffff 	.word	0x3fefffff
 8013664:	3fe00000 	.word	0x3fe00000
 8013668:	43f00000 	.word	0x43f00000
 801366c:	4b5a      	ldr	r3, [pc, #360]	@ (80137d8 <__ieee754_pow+0x410>)
 801366e:	f7ec fe3b 	bl	80002e8 <__aeabi_dsub>
 8013672:	a351      	add	r3, pc, #324	@ (adr r3, 80137b8 <__ieee754_pow+0x3f0>)
 8013674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013678:	4604      	mov	r4, r0
 801367a:	460d      	mov	r5, r1
 801367c:	f7ec ffec 	bl	8000658 <__aeabi_dmul>
 8013680:	a34f      	add	r3, pc, #316	@ (adr r3, 80137c0 <__ieee754_pow+0x3f8>)
 8013682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013686:	4606      	mov	r6, r0
 8013688:	460f      	mov	r7, r1
 801368a:	4620      	mov	r0, r4
 801368c:	4629      	mov	r1, r5
 801368e:	f7ec ffe3 	bl	8000658 <__aeabi_dmul>
 8013692:	4b52      	ldr	r3, [pc, #328]	@ (80137dc <__ieee754_pow+0x414>)
 8013694:	4682      	mov	sl, r0
 8013696:	468b      	mov	fp, r1
 8013698:	2200      	movs	r2, #0
 801369a:	4620      	mov	r0, r4
 801369c:	4629      	mov	r1, r5
 801369e:	f7ec ffdb 	bl	8000658 <__aeabi_dmul>
 80136a2:	4602      	mov	r2, r0
 80136a4:	460b      	mov	r3, r1
 80136a6:	a148      	add	r1, pc, #288	@ (adr r1, 80137c8 <__ieee754_pow+0x400>)
 80136a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ac:	f7ec fe1c 	bl	80002e8 <__aeabi_dsub>
 80136b0:	4622      	mov	r2, r4
 80136b2:	462b      	mov	r3, r5
 80136b4:	f7ec ffd0 	bl	8000658 <__aeabi_dmul>
 80136b8:	4602      	mov	r2, r0
 80136ba:	460b      	mov	r3, r1
 80136bc:	2000      	movs	r0, #0
 80136be:	4948      	ldr	r1, [pc, #288]	@ (80137e0 <__ieee754_pow+0x418>)
 80136c0:	f7ec fe12 	bl	80002e8 <__aeabi_dsub>
 80136c4:	4622      	mov	r2, r4
 80136c6:	4680      	mov	r8, r0
 80136c8:	4689      	mov	r9, r1
 80136ca:	462b      	mov	r3, r5
 80136cc:	4620      	mov	r0, r4
 80136ce:	4629      	mov	r1, r5
 80136d0:	f7ec ffc2 	bl	8000658 <__aeabi_dmul>
 80136d4:	4602      	mov	r2, r0
 80136d6:	460b      	mov	r3, r1
 80136d8:	4640      	mov	r0, r8
 80136da:	4649      	mov	r1, r9
 80136dc:	f7ec ffbc 	bl	8000658 <__aeabi_dmul>
 80136e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80137d0 <__ieee754_pow+0x408>)
 80136e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e6:	f7ec ffb7 	bl	8000658 <__aeabi_dmul>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	4650      	mov	r0, sl
 80136f0:	4659      	mov	r1, fp
 80136f2:	f7ec fdf9 	bl	80002e8 <__aeabi_dsub>
 80136f6:	4602      	mov	r2, r0
 80136f8:	460b      	mov	r3, r1
 80136fa:	4680      	mov	r8, r0
 80136fc:	4689      	mov	r9, r1
 80136fe:	4630      	mov	r0, r6
 8013700:	4639      	mov	r1, r7
 8013702:	f7ec fdf3 	bl	80002ec <__adddf3>
 8013706:	2400      	movs	r4, #0
 8013708:	4632      	mov	r2, r6
 801370a:	463b      	mov	r3, r7
 801370c:	4620      	mov	r0, r4
 801370e:	460d      	mov	r5, r1
 8013710:	f7ec fdea 	bl	80002e8 <__aeabi_dsub>
 8013714:	4602      	mov	r2, r0
 8013716:	460b      	mov	r3, r1
 8013718:	4640      	mov	r0, r8
 801371a:	4649      	mov	r1, r9
 801371c:	f7ec fde4 	bl	80002e8 <__aeabi_dsub>
 8013720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013724:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013728:	2300      	movs	r3, #0
 801372a:	9304      	str	r3, [sp, #16]
 801372c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013730:	4606      	mov	r6, r0
 8013732:	460f      	mov	r7, r1
 8013734:	4652      	mov	r2, sl
 8013736:	465b      	mov	r3, fp
 8013738:	e9dd 0100 	ldrd	r0, r1, [sp]
 801373c:	f7ec fdd4 	bl	80002e8 <__aeabi_dsub>
 8013740:	4622      	mov	r2, r4
 8013742:	462b      	mov	r3, r5
 8013744:	f7ec ff88 	bl	8000658 <__aeabi_dmul>
 8013748:	e9dd 2300 	ldrd	r2, r3, [sp]
 801374c:	4680      	mov	r8, r0
 801374e:	4689      	mov	r9, r1
 8013750:	4630      	mov	r0, r6
 8013752:	4639      	mov	r1, r7
 8013754:	f7ec ff80 	bl	8000658 <__aeabi_dmul>
 8013758:	4602      	mov	r2, r0
 801375a:	460b      	mov	r3, r1
 801375c:	4640      	mov	r0, r8
 801375e:	4649      	mov	r1, r9
 8013760:	f7ec fdc4 	bl	80002ec <__adddf3>
 8013764:	4652      	mov	r2, sl
 8013766:	465b      	mov	r3, fp
 8013768:	4606      	mov	r6, r0
 801376a:	460f      	mov	r7, r1
 801376c:	4620      	mov	r0, r4
 801376e:	4629      	mov	r1, r5
 8013770:	f7ec ff72 	bl	8000658 <__aeabi_dmul>
 8013774:	460b      	mov	r3, r1
 8013776:	4602      	mov	r2, r0
 8013778:	4680      	mov	r8, r0
 801377a:	4689      	mov	r9, r1
 801377c:	4630      	mov	r0, r6
 801377e:	4639      	mov	r1, r7
 8013780:	f7ec fdb4 	bl	80002ec <__adddf3>
 8013784:	4b17      	ldr	r3, [pc, #92]	@ (80137e4 <__ieee754_pow+0x41c>)
 8013786:	4299      	cmp	r1, r3
 8013788:	4604      	mov	r4, r0
 801378a:	460d      	mov	r5, r1
 801378c:	468a      	mov	sl, r1
 801378e:	468b      	mov	fp, r1
 8013790:	f340 82ef 	ble.w	8013d72 <__ieee754_pow+0x9aa>
 8013794:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013798:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801379c:	4303      	orrs	r3, r0
 801379e:	f000 81e8 	beq.w	8013b72 <__ieee754_pow+0x7aa>
 80137a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137a6:	2200      	movs	r2, #0
 80137a8:	2300      	movs	r3, #0
 80137aa:	f7ed f9c7 	bl	8000b3c <__aeabi_dcmplt>
 80137ae:	3800      	subs	r0, #0
 80137b0:	bf18      	it	ne
 80137b2:	2001      	movne	r0, #1
 80137b4:	e710      	b.n	80135d8 <__ieee754_pow+0x210>
 80137b6:	bf00      	nop
 80137b8:	60000000 	.word	0x60000000
 80137bc:	3ff71547 	.word	0x3ff71547
 80137c0:	f85ddf44 	.word	0xf85ddf44
 80137c4:	3e54ae0b 	.word	0x3e54ae0b
 80137c8:	55555555 	.word	0x55555555
 80137cc:	3fd55555 	.word	0x3fd55555
 80137d0:	652b82fe 	.word	0x652b82fe
 80137d4:	3ff71547 	.word	0x3ff71547
 80137d8:	3ff00000 	.word	0x3ff00000
 80137dc:	3fd00000 	.word	0x3fd00000
 80137e0:	3fe00000 	.word	0x3fe00000
 80137e4:	408fffff 	.word	0x408fffff
 80137e8:	4bd5      	ldr	r3, [pc, #852]	@ (8013b40 <__ieee754_pow+0x778>)
 80137ea:	402b      	ands	r3, r5
 80137ec:	2200      	movs	r2, #0
 80137ee:	b92b      	cbnz	r3, 80137fc <__ieee754_pow+0x434>
 80137f0:	4bd4      	ldr	r3, [pc, #848]	@ (8013b44 <__ieee754_pow+0x77c>)
 80137f2:	f7ec ff31 	bl	8000658 <__aeabi_dmul>
 80137f6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80137fa:	468b      	mov	fp, r1
 80137fc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013800:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013804:	4413      	add	r3, r2
 8013806:	930a      	str	r3, [sp, #40]	@ 0x28
 8013808:	4bcf      	ldr	r3, [pc, #828]	@ (8013b48 <__ieee754_pow+0x780>)
 801380a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801380e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013812:	459b      	cmp	fp, r3
 8013814:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013818:	dd08      	ble.n	801382c <__ieee754_pow+0x464>
 801381a:	4bcc      	ldr	r3, [pc, #816]	@ (8013b4c <__ieee754_pow+0x784>)
 801381c:	459b      	cmp	fp, r3
 801381e:	f340 81a5 	ble.w	8013b6c <__ieee754_pow+0x7a4>
 8013822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013824:	3301      	adds	r3, #1
 8013826:	930a      	str	r3, [sp, #40]	@ 0x28
 8013828:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801382c:	f04f 0a00 	mov.w	sl, #0
 8013830:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013836:	4bc6      	ldr	r3, [pc, #792]	@ (8013b50 <__ieee754_pow+0x788>)
 8013838:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801383c:	ed93 7b00 	vldr	d7, [r3]
 8013840:	4629      	mov	r1, r5
 8013842:	ec53 2b17 	vmov	r2, r3, d7
 8013846:	ed8d 7b06 	vstr	d7, [sp, #24]
 801384a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801384e:	f7ec fd4b 	bl	80002e8 <__aeabi_dsub>
 8013852:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013856:	4606      	mov	r6, r0
 8013858:	460f      	mov	r7, r1
 801385a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801385e:	f7ec fd45 	bl	80002ec <__adddf3>
 8013862:	4602      	mov	r2, r0
 8013864:	460b      	mov	r3, r1
 8013866:	2000      	movs	r0, #0
 8013868:	49ba      	ldr	r1, [pc, #744]	@ (8013b54 <__ieee754_pow+0x78c>)
 801386a:	f7ed f81f 	bl	80008ac <__aeabi_ddiv>
 801386e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013872:	4602      	mov	r2, r0
 8013874:	460b      	mov	r3, r1
 8013876:	4630      	mov	r0, r6
 8013878:	4639      	mov	r1, r7
 801387a:	f7ec feed 	bl	8000658 <__aeabi_dmul>
 801387e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013882:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013886:	106d      	asrs	r5, r5, #1
 8013888:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801388c:	f04f 0b00 	mov.w	fp, #0
 8013890:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013894:	4661      	mov	r1, ip
 8013896:	2200      	movs	r2, #0
 8013898:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801389c:	4658      	mov	r0, fp
 801389e:	46e1      	mov	r9, ip
 80138a0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80138a4:	4614      	mov	r4, r2
 80138a6:	461d      	mov	r5, r3
 80138a8:	f7ec fed6 	bl	8000658 <__aeabi_dmul>
 80138ac:	4602      	mov	r2, r0
 80138ae:	460b      	mov	r3, r1
 80138b0:	4630      	mov	r0, r6
 80138b2:	4639      	mov	r1, r7
 80138b4:	f7ec fd18 	bl	80002e8 <__aeabi_dsub>
 80138b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80138bc:	4606      	mov	r6, r0
 80138be:	460f      	mov	r7, r1
 80138c0:	4620      	mov	r0, r4
 80138c2:	4629      	mov	r1, r5
 80138c4:	f7ec fd10 	bl	80002e8 <__aeabi_dsub>
 80138c8:	4602      	mov	r2, r0
 80138ca:	460b      	mov	r3, r1
 80138cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80138d0:	f7ec fd0a 	bl	80002e8 <__aeabi_dsub>
 80138d4:	465a      	mov	r2, fp
 80138d6:	464b      	mov	r3, r9
 80138d8:	f7ec febe 	bl	8000658 <__aeabi_dmul>
 80138dc:	4602      	mov	r2, r0
 80138de:	460b      	mov	r3, r1
 80138e0:	4630      	mov	r0, r6
 80138e2:	4639      	mov	r1, r7
 80138e4:	f7ec fd00 	bl	80002e8 <__aeabi_dsub>
 80138e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80138ec:	f7ec feb4 	bl	8000658 <__aeabi_dmul>
 80138f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80138f8:	4610      	mov	r0, r2
 80138fa:	4619      	mov	r1, r3
 80138fc:	f7ec feac 	bl	8000658 <__aeabi_dmul>
 8013900:	a37d      	add	r3, pc, #500	@ (adr r3, 8013af8 <__ieee754_pow+0x730>)
 8013902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013906:	4604      	mov	r4, r0
 8013908:	460d      	mov	r5, r1
 801390a:	f7ec fea5 	bl	8000658 <__aeabi_dmul>
 801390e:	a37c      	add	r3, pc, #496	@ (adr r3, 8013b00 <__ieee754_pow+0x738>)
 8013910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013914:	f7ec fcea 	bl	80002ec <__adddf3>
 8013918:	4622      	mov	r2, r4
 801391a:	462b      	mov	r3, r5
 801391c:	f7ec fe9c 	bl	8000658 <__aeabi_dmul>
 8013920:	a379      	add	r3, pc, #484	@ (adr r3, 8013b08 <__ieee754_pow+0x740>)
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	f7ec fce1 	bl	80002ec <__adddf3>
 801392a:	4622      	mov	r2, r4
 801392c:	462b      	mov	r3, r5
 801392e:	f7ec fe93 	bl	8000658 <__aeabi_dmul>
 8013932:	a377      	add	r3, pc, #476	@ (adr r3, 8013b10 <__ieee754_pow+0x748>)
 8013934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013938:	f7ec fcd8 	bl	80002ec <__adddf3>
 801393c:	4622      	mov	r2, r4
 801393e:	462b      	mov	r3, r5
 8013940:	f7ec fe8a 	bl	8000658 <__aeabi_dmul>
 8013944:	a374      	add	r3, pc, #464	@ (adr r3, 8013b18 <__ieee754_pow+0x750>)
 8013946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801394a:	f7ec fccf 	bl	80002ec <__adddf3>
 801394e:	4622      	mov	r2, r4
 8013950:	462b      	mov	r3, r5
 8013952:	f7ec fe81 	bl	8000658 <__aeabi_dmul>
 8013956:	a372      	add	r3, pc, #456	@ (adr r3, 8013b20 <__ieee754_pow+0x758>)
 8013958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395c:	f7ec fcc6 	bl	80002ec <__adddf3>
 8013960:	4622      	mov	r2, r4
 8013962:	4606      	mov	r6, r0
 8013964:	460f      	mov	r7, r1
 8013966:	462b      	mov	r3, r5
 8013968:	4620      	mov	r0, r4
 801396a:	4629      	mov	r1, r5
 801396c:	f7ec fe74 	bl	8000658 <__aeabi_dmul>
 8013970:	4602      	mov	r2, r0
 8013972:	460b      	mov	r3, r1
 8013974:	4630      	mov	r0, r6
 8013976:	4639      	mov	r1, r7
 8013978:	f7ec fe6e 	bl	8000658 <__aeabi_dmul>
 801397c:	465a      	mov	r2, fp
 801397e:	4604      	mov	r4, r0
 8013980:	460d      	mov	r5, r1
 8013982:	464b      	mov	r3, r9
 8013984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013988:	f7ec fcb0 	bl	80002ec <__adddf3>
 801398c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013990:	f7ec fe62 	bl	8000658 <__aeabi_dmul>
 8013994:	4622      	mov	r2, r4
 8013996:	462b      	mov	r3, r5
 8013998:	f7ec fca8 	bl	80002ec <__adddf3>
 801399c:	465a      	mov	r2, fp
 801399e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80139a2:	464b      	mov	r3, r9
 80139a4:	4658      	mov	r0, fp
 80139a6:	4649      	mov	r1, r9
 80139a8:	f7ec fe56 	bl	8000658 <__aeabi_dmul>
 80139ac:	4b6a      	ldr	r3, [pc, #424]	@ (8013b58 <__ieee754_pow+0x790>)
 80139ae:	2200      	movs	r2, #0
 80139b0:	4606      	mov	r6, r0
 80139b2:	460f      	mov	r7, r1
 80139b4:	f7ec fc9a 	bl	80002ec <__adddf3>
 80139b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80139bc:	f7ec fc96 	bl	80002ec <__adddf3>
 80139c0:	46d8      	mov	r8, fp
 80139c2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80139c6:	460d      	mov	r5, r1
 80139c8:	465a      	mov	r2, fp
 80139ca:	460b      	mov	r3, r1
 80139cc:	4640      	mov	r0, r8
 80139ce:	4649      	mov	r1, r9
 80139d0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80139d4:	f7ec fe40 	bl	8000658 <__aeabi_dmul>
 80139d8:	465c      	mov	r4, fp
 80139da:	4680      	mov	r8, r0
 80139dc:	4689      	mov	r9, r1
 80139de:	4b5e      	ldr	r3, [pc, #376]	@ (8013b58 <__ieee754_pow+0x790>)
 80139e0:	2200      	movs	r2, #0
 80139e2:	4620      	mov	r0, r4
 80139e4:	4629      	mov	r1, r5
 80139e6:	f7ec fc7f 	bl	80002e8 <__aeabi_dsub>
 80139ea:	4632      	mov	r2, r6
 80139ec:	463b      	mov	r3, r7
 80139ee:	f7ec fc7b 	bl	80002e8 <__aeabi_dsub>
 80139f2:	4602      	mov	r2, r0
 80139f4:	460b      	mov	r3, r1
 80139f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80139fa:	f7ec fc75 	bl	80002e8 <__aeabi_dsub>
 80139fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a02:	f7ec fe29 	bl	8000658 <__aeabi_dmul>
 8013a06:	4622      	mov	r2, r4
 8013a08:	4606      	mov	r6, r0
 8013a0a:	460f      	mov	r7, r1
 8013a0c:	462b      	mov	r3, r5
 8013a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a12:	f7ec fe21 	bl	8000658 <__aeabi_dmul>
 8013a16:	4602      	mov	r2, r0
 8013a18:	460b      	mov	r3, r1
 8013a1a:	4630      	mov	r0, r6
 8013a1c:	4639      	mov	r1, r7
 8013a1e:	f7ec fc65 	bl	80002ec <__adddf3>
 8013a22:	4606      	mov	r6, r0
 8013a24:	460f      	mov	r7, r1
 8013a26:	4602      	mov	r2, r0
 8013a28:	460b      	mov	r3, r1
 8013a2a:	4640      	mov	r0, r8
 8013a2c:	4649      	mov	r1, r9
 8013a2e:	f7ec fc5d 	bl	80002ec <__adddf3>
 8013a32:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013a36:	a33c      	add	r3, pc, #240	@ (adr r3, 8013b28 <__ieee754_pow+0x760>)
 8013a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3c:	4658      	mov	r0, fp
 8013a3e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013a42:	460d      	mov	r5, r1
 8013a44:	f7ec fe08 	bl	8000658 <__aeabi_dmul>
 8013a48:	465c      	mov	r4, fp
 8013a4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a4e:	4642      	mov	r2, r8
 8013a50:	464b      	mov	r3, r9
 8013a52:	4620      	mov	r0, r4
 8013a54:	4629      	mov	r1, r5
 8013a56:	f7ec fc47 	bl	80002e8 <__aeabi_dsub>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	4630      	mov	r0, r6
 8013a60:	4639      	mov	r1, r7
 8013a62:	f7ec fc41 	bl	80002e8 <__aeabi_dsub>
 8013a66:	a332      	add	r3, pc, #200	@ (adr r3, 8013b30 <__ieee754_pow+0x768>)
 8013a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6c:	f7ec fdf4 	bl	8000658 <__aeabi_dmul>
 8013a70:	a331      	add	r3, pc, #196	@ (adr r3, 8013b38 <__ieee754_pow+0x770>)
 8013a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a76:	4606      	mov	r6, r0
 8013a78:	460f      	mov	r7, r1
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	4629      	mov	r1, r5
 8013a7e:	f7ec fdeb 	bl	8000658 <__aeabi_dmul>
 8013a82:	4602      	mov	r2, r0
 8013a84:	460b      	mov	r3, r1
 8013a86:	4630      	mov	r0, r6
 8013a88:	4639      	mov	r1, r7
 8013a8a:	f7ec fc2f 	bl	80002ec <__adddf3>
 8013a8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013a90:	4b32      	ldr	r3, [pc, #200]	@ (8013b5c <__ieee754_pow+0x794>)
 8013a92:	4413      	add	r3, r2
 8013a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a98:	f7ec fc28 	bl	80002ec <__adddf3>
 8013a9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013aa0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013aa2:	f7ec fd6f 	bl	8000584 <__aeabi_i2d>
 8013aa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8013b60 <__ieee754_pow+0x798>)
 8013aaa:	4413      	add	r3, r2
 8013aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013ab0:	4606      	mov	r6, r0
 8013ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ab6:	460f      	mov	r7, r1
 8013ab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013abc:	f7ec fc16 	bl	80002ec <__adddf3>
 8013ac0:	4642      	mov	r2, r8
 8013ac2:	464b      	mov	r3, r9
 8013ac4:	f7ec fc12 	bl	80002ec <__adddf3>
 8013ac8:	4632      	mov	r2, r6
 8013aca:	463b      	mov	r3, r7
 8013acc:	f7ec fc0e 	bl	80002ec <__adddf3>
 8013ad0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013ad4:	4632      	mov	r2, r6
 8013ad6:	463b      	mov	r3, r7
 8013ad8:	4658      	mov	r0, fp
 8013ada:	460d      	mov	r5, r1
 8013adc:	f7ec fc04 	bl	80002e8 <__aeabi_dsub>
 8013ae0:	4642      	mov	r2, r8
 8013ae2:	464b      	mov	r3, r9
 8013ae4:	f7ec fc00 	bl	80002e8 <__aeabi_dsub>
 8013ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013aec:	f7ec fbfc 	bl	80002e8 <__aeabi_dsub>
 8013af0:	465c      	mov	r4, fp
 8013af2:	4602      	mov	r2, r0
 8013af4:	e036      	b.n	8013b64 <__ieee754_pow+0x79c>
 8013af6:	bf00      	nop
 8013af8:	4a454eef 	.word	0x4a454eef
 8013afc:	3fca7e28 	.word	0x3fca7e28
 8013b00:	93c9db65 	.word	0x93c9db65
 8013b04:	3fcd864a 	.word	0x3fcd864a
 8013b08:	a91d4101 	.word	0xa91d4101
 8013b0c:	3fd17460 	.word	0x3fd17460
 8013b10:	518f264d 	.word	0x518f264d
 8013b14:	3fd55555 	.word	0x3fd55555
 8013b18:	db6fabff 	.word	0xdb6fabff
 8013b1c:	3fdb6db6 	.word	0x3fdb6db6
 8013b20:	33333303 	.word	0x33333303
 8013b24:	3fe33333 	.word	0x3fe33333
 8013b28:	e0000000 	.word	0xe0000000
 8013b2c:	3feec709 	.word	0x3feec709
 8013b30:	dc3a03fd 	.word	0xdc3a03fd
 8013b34:	3feec709 	.word	0x3feec709
 8013b38:	145b01f5 	.word	0x145b01f5
 8013b3c:	be3e2fe0 	.word	0xbe3e2fe0
 8013b40:	7ff00000 	.word	0x7ff00000
 8013b44:	43400000 	.word	0x43400000
 8013b48:	0003988e 	.word	0x0003988e
 8013b4c:	000bb679 	.word	0x000bb679
 8013b50:	08018220 	.word	0x08018220
 8013b54:	3ff00000 	.word	0x3ff00000
 8013b58:	40080000 	.word	0x40080000
 8013b5c:	08018200 	.word	0x08018200
 8013b60:	08018210 	.word	0x08018210
 8013b64:	460b      	mov	r3, r1
 8013b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b6a:	e5d7      	b.n	801371c <__ieee754_pow+0x354>
 8013b6c:	f04f 0a01 	mov.w	sl, #1
 8013b70:	e65e      	b.n	8013830 <__ieee754_pow+0x468>
 8013b72:	a3b4      	add	r3, pc, #720	@ (adr r3, 8013e44 <__ieee754_pow+0xa7c>)
 8013b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b78:	4630      	mov	r0, r6
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	f7ec fbb6 	bl	80002ec <__adddf3>
 8013b80:	4642      	mov	r2, r8
 8013b82:	e9cd 0100 	strd	r0, r1, [sp]
 8013b86:	464b      	mov	r3, r9
 8013b88:	4620      	mov	r0, r4
 8013b8a:	4629      	mov	r1, r5
 8013b8c:	f7ec fbac 	bl	80002e8 <__aeabi_dsub>
 8013b90:	4602      	mov	r2, r0
 8013b92:	460b      	mov	r3, r1
 8013b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b98:	f7ec ffee 	bl	8000b78 <__aeabi_dcmpgt>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	f47f ae00 	bne.w	80137a2 <__ieee754_pow+0x3da>
 8013ba2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013ba6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013baa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013bae:	fa43 fa0a 	asr.w	sl, r3, sl
 8013bb2:	44da      	add	sl, fp
 8013bb4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013bb8:	489d      	ldr	r0, [pc, #628]	@ (8013e30 <__ieee754_pow+0xa68>)
 8013bba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013bbe:	4108      	asrs	r0, r1
 8013bc0:	ea00 030a 	and.w	r3, r0, sl
 8013bc4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013bc8:	f1c1 0114 	rsb	r1, r1, #20
 8013bcc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013bd0:	fa4a fa01 	asr.w	sl, sl, r1
 8013bd4:	f1bb 0f00 	cmp.w	fp, #0
 8013bd8:	4640      	mov	r0, r8
 8013bda:	4649      	mov	r1, r9
 8013bdc:	f04f 0200 	mov.w	r2, #0
 8013be0:	bfb8      	it	lt
 8013be2:	f1ca 0a00 	rsblt	sl, sl, #0
 8013be6:	f7ec fb7f 	bl	80002e8 <__aeabi_dsub>
 8013bea:	4680      	mov	r8, r0
 8013bec:	4689      	mov	r9, r1
 8013bee:	4632      	mov	r2, r6
 8013bf0:	463b      	mov	r3, r7
 8013bf2:	4640      	mov	r0, r8
 8013bf4:	4649      	mov	r1, r9
 8013bf6:	f7ec fb79 	bl	80002ec <__adddf3>
 8013bfa:	2400      	movs	r4, #0
 8013bfc:	a37c      	add	r3, pc, #496	@ (adr r3, 8013df0 <__ieee754_pow+0xa28>)
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	4620      	mov	r0, r4
 8013c04:	460d      	mov	r5, r1
 8013c06:	f7ec fd27 	bl	8000658 <__aeabi_dmul>
 8013c0a:	4642      	mov	r2, r8
 8013c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8013c10:	464b      	mov	r3, r9
 8013c12:	4620      	mov	r0, r4
 8013c14:	4629      	mov	r1, r5
 8013c16:	f7ec fb67 	bl	80002e8 <__aeabi_dsub>
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	4630      	mov	r0, r6
 8013c20:	4639      	mov	r1, r7
 8013c22:	f7ec fb61 	bl	80002e8 <__aeabi_dsub>
 8013c26:	a374      	add	r3, pc, #464	@ (adr r3, 8013df8 <__ieee754_pow+0xa30>)
 8013c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c2c:	f7ec fd14 	bl	8000658 <__aeabi_dmul>
 8013c30:	a373      	add	r3, pc, #460	@ (adr r3, 8013e00 <__ieee754_pow+0xa38>)
 8013c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c36:	4680      	mov	r8, r0
 8013c38:	4689      	mov	r9, r1
 8013c3a:	4620      	mov	r0, r4
 8013c3c:	4629      	mov	r1, r5
 8013c3e:	f7ec fd0b 	bl	8000658 <__aeabi_dmul>
 8013c42:	4602      	mov	r2, r0
 8013c44:	460b      	mov	r3, r1
 8013c46:	4640      	mov	r0, r8
 8013c48:	4649      	mov	r1, r9
 8013c4a:	f7ec fb4f 	bl	80002ec <__adddf3>
 8013c4e:	4604      	mov	r4, r0
 8013c50:	460d      	mov	r5, r1
 8013c52:	4602      	mov	r2, r0
 8013c54:	460b      	mov	r3, r1
 8013c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c5a:	f7ec fb47 	bl	80002ec <__adddf3>
 8013c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c62:	4680      	mov	r8, r0
 8013c64:	4689      	mov	r9, r1
 8013c66:	f7ec fb3f 	bl	80002e8 <__aeabi_dsub>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	4620      	mov	r0, r4
 8013c70:	4629      	mov	r1, r5
 8013c72:	f7ec fb39 	bl	80002e8 <__aeabi_dsub>
 8013c76:	4642      	mov	r2, r8
 8013c78:	4606      	mov	r6, r0
 8013c7a:	460f      	mov	r7, r1
 8013c7c:	464b      	mov	r3, r9
 8013c7e:	4640      	mov	r0, r8
 8013c80:	4649      	mov	r1, r9
 8013c82:	f7ec fce9 	bl	8000658 <__aeabi_dmul>
 8013c86:	a360      	add	r3, pc, #384	@ (adr r3, 8013e08 <__ieee754_pow+0xa40>)
 8013c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8c:	4604      	mov	r4, r0
 8013c8e:	460d      	mov	r5, r1
 8013c90:	f7ec fce2 	bl	8000658 <__aeabi_dmul>
 8013c94:	a35e      	add	r3, pc, #376	@ (adr r3, 8013e10 <__ieee754_pow+0xa48>)
 8013c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9a:	f7ec fb25 	bl	80002e8 <__aeabi_dsub>
 8013c9e:	4622      	mov	r2, r4
 8013ca0:	462b      	mov	r3, r5
 8013ca2:	f7ec fcd9 	bl	8000658 <__aeabi_dmul>
 8013ca6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013e18 <__ieee754_pow+0xa50>)
 8013ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cac:	f7ec fb1e 	bl	80002ec <__adddf3>
 8013cb0:	4622      	mov	r2, r4
 8013cb2:	462b      	mov	r3, r5
 8013cb4:	f7ec fcd0 	bl	8000658 <__aeabi_dmul>
 8013cb8:	a359      	add	r3, pc, #356	@ (adr r3, 8013e20 <__ieee754_pow+0xa58>)
 8013cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbe:	f7ec fb13 	bl	80002e8 <__aeabi_dsub>
 8013cc2:	4622      	mov	r2, r4
 8013cc4:	462b      	mov	r3, r5
 8013cc6:	f7ec fcc7 	bl	8000658 <__aeabi_dmul>
 8013cca:	a357      	add	r3, pc, #348	@ (adr r3, 8013e28 <__ieee754_pow+0xa60>)
 8013ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd0:	f7ec fb0c 	bl	80002ec <__adddf3>
 8013cd4:	4622      	mov	r2, r4
 8013cd6:	462b      	mov	r3, r5
 8013cd8:	f7ec fcbe 	bl	8000658 <__aeabi_dmul>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	460b      	mov	r3, r1
 8013ce0:	4640      	mov	r0, r8
 8013ce2:	4649      	mov	r1, r9
 8013ce4:	f7ec fb00 	bl	80002e8 <__aeabi_dsub>
 8013ce8:	4604      	mov	r4, r0
 8013cea:	460d      	mov	r5, r1
 8013cec:	4602      	mov	r2, r0
 8013cee:	460b      	mov	r3, r1
 8013cf0:	4640      	mov	r0, r8
 8013cf2:	4649      	mov	r1, r9
 8013cf4:	f7ec fcb0 	bl	8000658 <__aeabi_dmul>
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8013cfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013d02:	4620      	mov	r0, r4
 8013d04:	4629      	mov	r1, r5
 8013d06:	f7ec faef 	bl	80002e8 <__aeabi_dsub>
 8013d0a:	4602      	mov	r2, r0
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d12:	f7ec fdcb 	bl	80008ac <__aeabi_ddiv>
 8013d16:	4632      	mov	r2, r6
 8013d18:	4604      	mov	r4, r0
 8013d1a:	460d      	mov	r5, r1
 8013d1c:	463b      	mov	r3, r7
 8013d1e:	4640      	mov	r0, r8
 8013d20:	4649      	mov	r1, r9
 8013d22:	f7ec fc99 	bl	8000658 <__aeabi_dmul>
 8013d26:	4632      	mov	r2, r6
 8013d28:	463b      	mov	r3, r7
 8013d2a:	f7ec fadf 	bl	80002ec <__adddf3>
 8013d2e:	4602      	mov	r2, r0
 8013d30:	460b      	mov	r3, r1
 8013d32:	4620      	mov	r0, r4
 8013d34:	4629      	mov	r1, r5
 8013d36:	f7ec fad7 	bl	80002e8 <__aeabi_dsub>
 8013d3a:	4642      	mov	r2, r8
 8013d3c:	464b      	mov	r3, r9
 8013d3e:	f7ec fad3 	bl	80002e8 <__aeabi_dsub>
 8013d42:	460b      	mov	r3, r1
 8013d44:	4602      	mov	r2, r0
 8013d46:	493b      	ldr	r1, [pc, #236]	@ (8013e34 <__ieee754_pow+0xa6c>)
 8013d48:	2000      	movs	r0, #0
 8013d4a:	f7ec facd 	bl	80002e8 <__aeabi_dsub>
 8013d4e:	ec41 0b10 	vmov	d0, r0, r1
 8013d52:	ee10 3a90 	vmov	r3, s1
 8013d56:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013d5e:	da30      	bge.n	8013dc2 <__ieee754_pow+0x9fa>
 8013d60:	4650      	mov	r0, sl
 8013d62:	f000 fa15 	bl	8014190 <scalbn>
 8013d66:	ec51 0b10 	vmov	r0, r1, d0
 8013d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d6e:	f7ff bbd2 	b.w	8013516 <__ieee754_pow+0x14e>
 8013d72:	4c31      	ldr	r4, [pc, #196]	@ (8013e38 <__ieee754_pow+0xa70>)
 8013d74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013d78:	42a3      	cmp	r3, r4
 8013d7a:	d91a      	bls.n	8013db2 <__ieee754_pow+0x9ea>
 8013d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8013e3c <__ieee754_pow+0xa74>)
 8013d7e:	440b      	add	r3, r1
 8013d80:	4303      	orrs	r3, r0
 8013d82:	d009      	beq.n	8013d98 <__ieee754_pow+0x9d0>
 8013d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	f7ec fed6 	bl	8000b3c <__aeabi_dcmplt>
 8013d90:	3800      	subs	r0, #0
 8013d92:	bf18      	it	ne
 8013d94:	2001      	movne	r0, #1
 8013d96:	e42b      	b.n	80135f0 <__ieee754_pow+0x228>
 8013d98:	4642      	mov	r2, r8
 8013d9a:	464b      	mov	r3, r9
 8013d9c:	f7ec faa4 	bl	80002e8 <__aeabi_dsub>
 8013da0:	4632      	mov	r2, r6
 8013da2:	463b      	mov	r3, r7
 8013da4:	f7ec fede 	bl	8000b64 <__aeabi_dcmpge>
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d1eb      	bne.n	8013d84 <__ieee754_pow+0x9bc>
 8013dac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8013e4c <__ieee754_pow+0xa84>
 8013db0:	e6f7      	b.n	8013ba2 <__ieee754_pow+0x7da>
 8013db2:	469a      	mov	sl, r3
 8013db4:	4b22      	ldr	r3, [pc, #136]	@ (8013e40 <__ieee754_pow+0xa78>)
 8013db6:	459a      	cmp	sl, r3
 8013db8:	f63f aef3 	bhi.w	8013ba2 <__ieee754_pow+0x7da>
 8013dbc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013dc0:	e715      	b.n	8013bee <__ieee754_pow+0x826>
 8013dc2:	ec51 0b10 	vmov	r0, r1, d0
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	e7cf      	b.n	8013d6a <__ieee754_pow+0x9a2>
 8013dca:	491a      	ldr	r1, [pc, #104]	@ (8013e34 <__ieee754_pow+0xa6c>)
 8013dcc:	2000      	movs	r0, #0
 8013dce:	f7ff bb18 	b.w	8013402 <__ieee754_pow+0x3a>
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	2100      	movs	r1, #0
 8013dd6:	f7ff bb14 	b.w	8013402 <__ieee754_pow+0x3a>
 8013dda:	4630      	mov	r0, r6
 8013ddc:	4639      	mov	r1, r7
 8013dde:	f7ff bb10 	b.w	8013402 <__ieee754_pow+0x3a>
 8013de2:	460c      	mov	r4, r1
 8013de4:	f7ff bb5e 	b.w	80134a4 <__ieee754_pow+0xdc>
 8013de8:	2400      	movs	r4, #0
 8013dea:	f7ff bb49 	b.w	8013480 <__ieee754_pow+0xb8>
 8013dee:	bf00      	nop
 8013df0:	00000000 	.word	0x00000000
 8013df4:	3fe62e43 	.word	0x3fe62e43
 8013df8:	fefa39ef 	.word	0xfefa39ef
 8013dfc:	3fe62e42 	.word	0x3fe62e42
 8013e00:	0ca86c39 	.word	0x0ca86c39
 8013e04:	be205c61 	.word	0xbe205c61
 8013e08:	72bea4d0 	.word	0x72bea4d0
 8013e0c:	3e663769 	.word	0x3e663769
 8013e10:	c5d26bf1 	.word	0xc5d26bf1
 8013e14:	3ebbbd41 	.word	0x3ebbbd41
 8013e18:	af25de2c 	.word	0xaf25de2c
 8013e1c:	3f11566a 	.word	0x3f11566a
 8013e20:	16bebd93 	.word	0x16bebd93
 8013e24:	3f66c16c 	.word	0x3f66c16c
 8013e28:	5555553e 	.word	0x5555553e
 8013e2c:	3fc55555 	.word	0x3fc55555
 8013e30:	fff00000 	.word	0xfff00000
 8013e34:	3ff00000 	.word	0x3ff00000
 8013e38:	4090cbff 	.word	0x4090cbff
 8013e3c:	3f6f3400 	.word	0x3f6f3400
 8013e40:	3fe00000 	.word	0x3fe00000
 8013e44:	652b82fe 	.word	0x652b82fe
 8013e48:	3c971547 	.word	0x3c971547
 8013e4c:	4090cc00 	.word	0x4090cc00

08013e50 <atan>:
 8013e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e54:	ec55 4b10 	vmov	r4, r5, d0
 8013e58:	4bbf      	ldr	r3, [pc, #764]	@ (8014158 <atan+0x308>)
 8013e5a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013e5e:	429e      	cmp	r6, r3
 8013e60:	46ab      	mov	fp, r5
 8013e62:	d918      	bls.n	8013e96 <atan+0x46>
 8013e64:	4bbd      	ldr	r3, [pc, #756]	@ (801415c <atan+0x30c>)
 8013e66:	429e      	cmp	r6, r3
 8013e68:	d801      	bhi.n	8013e6e <atan+0x1e>
 8013e6a:	d109      	bne.n	8013e80 <atan+0x30>
 8013e6c:	b144      	cbz	r4, 8013e80 <atan+0x30>
 8013e6e:	4622      	mov	r2, r4
 8013e70:	462b      	mov	r3, r5
 8013e72:	4620      	mov	r0, r4
 8013e74:	4629      	mov	r1, r5
 8013e76:	f7ec fa39 	bl	80002ec <__adddf3>
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	460d      	mov	r5, r1
 8013e7e:	e006      	b.n	8013e8e <atan+0x3e>
 8013e80:	f1bb 0f00 	cmp.w	fp, #0
 8013e84:	f340 812b 	ble.w	80140de <atan+0x28e>
 8013e88:	a597      	add	r5, pc, #604	@ (adr r5, 80140e8 <atan+0x298>)
 8013e8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013e8e:	ec45 4b10 	vmov	d0, r4, r5
 8013e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e96:	4bb2      	ldr	r3, [pc, #712]	@ (8014160 <atan+0x310>)
 8013e98:	429e      	cmp	r6, r3
 8013e9a:	d813      	bhi.n	8013ec4 <atan+0x74>
 8013e9c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013ea0:	429e      	cmp	r6, r3
 8013ea2:	d80c      	bhi.n	8013ebe <atan+0x6e>
 8013ea4:	a392      	add	r3, pc, #584	@ (adr r3, 80140f0 <atan+0x2a0>)
 8013ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eaa:	4620      	mov	r0, r4
 8013eac:	4629      	mov	r1, r5
 8013eae:	f7ec fa1d 	bl	80002ec <__adddf3>
 8013eb2:	4bac      	ldr	r3, [pc, #688]	@ (8014164 <atan+0x314>)
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f7ec fe5f 	bl	8000b78 <__aeabi_dcmpgt>
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	d1e7      	bne.n	8013e8e <atan+0x3e>
 8013ebe:	f04f 3aff 	mov.w	sl, #4294967295
 8013ec2:	e029      	b.n	8013f18 <atan+0xc8>
 8013ec4:	f000 f95c 	bl	8014180 <fabs>
 8013ec8:	4ba7      	ldr	r3, [pc, #668]	@ (8014168 <atan+0x318>)
 8013eca:	429e      	cmp	r6, r3
 8013ecc:	ec55 4b10 	vmov	r4, r5, d0
 8013ed0:	f200 80bc 	bhi.w	801404c <atan+0x1fc>
 8013ed4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013ed8:	429e      	cmp	r6, r3
 8013eda:	f200 809e 	bhi.w	801401a <atan+0x1ca>
 8013ede:	4622      	mov	r2, r4
 8013ee0:	462b      	mov	r3, r5
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	4629      	mov	r1, r5
 8013ee6:	f7ec fa01 	bl	80002ec <__adddf3>
 8013eea:	4b9e      	ldr	r3, [pc, #632]	@ (8014164 <atan+0x314>)
 8013eec:	2200      	movs	r2, #0
 8013eee:	f7ec f9fb 	bl	80002e8 <__aeabi_dsub>
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	4606      	mov	r6, r0
 8013ef6:	460f      	mov	r7, r1
 8013ef8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013efc:	4620      	mov	r0, r4
 8013efe:	4629      	mov	r1, r5
 8013f00:	f7ec f9f4 	bl	80002ec <__adddf3>
 8013f04:	4602      	mov	r2, r0
 8013f06:	460b      	mov	r3, r1
 8013f08:	4630      	mov	r0, r6
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	f7ec fcce 	bl	80008ac <__aeabi_ddiv>
 8013f10:	f04f 0a00 	mov.w	sl, #0
 8013f14:	4604      	mov	r4, r0
 8013f16:	460d      	mov	r5, r1
 8013f18:	4622      	mov	r2, r4
 8013f1a:	462b      	mov	r3, r5
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	4629      	mov	r1, r5
 8013f20:	f7ec fb9a 	bl	8000658 <__aeabi_dmul>
 8013f24:	4602      	mov	r2, r0
 8013f26:	460b      	mov	r3, r1
 8013f28:	4680      	mov	r8, r0
 8013f2a:	4689      	mov	r9, r1
 8013f2c:	f7ec fb94 	bl	8000658 <__aeabi_dmul>
 8013f30:	a371      	add	r3, pc, #452	@ (adr r3, 80140f8 <atan+0x2a8>)
 8013f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f36:	4606      	mov	r6, r0
 8013f38:	460f      	mov	r7, r1
 8013f3a:	f7ec fb8d 	bl	8000658 <__aeabi_dmul>
 8013f3e:	a370      	add	r3, pc, #448	@ (adr r3, 8014100 <atan+0x2b0>)
 8013f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f44:	f7ec f9d2 	bl	80002ec <__adddf3>
 8013f48:	4632      	mov	r2, r6
 8013f4a:	463b      	mov	r3, r7
 8013f4c:	f7ec fb84 	bl	8000658 <__aeabi_dmul>
 8013f50:	a36d      	add	r3, pc, #436	@ (adr r3, 8014108 <atan+0x2b8>)
 8013f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f56:	f7ec f9c9 	bl	80002ec <__adddf3>
 8013f5a:	4632      	mov	r2, r6
 8013f5c:	463b      	mov	r3, r7
 8013f5e:	f7ec fb7b 	bl	8000658 <__aeabi_dmul>
 8013f62:	a36b      	add	r3, pc, #428	@ (adr r3, 8014110 <atan+0x2c0>)
 8013f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f68:	f7ec f9c0 	bl	80002ec <__adddf3>
 8013f6c:	4632      	mov	r2, r6
 8013f6e:	463b      	mov	r3, r7
 8013f70:	f7ec fb72 	bl	8000658 <__aeabi_dmul>
 8013f74:	a368      	add	r3, pc, #416	@ (adr r3, 8014118 <atan+0x2c8>)
 8013f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f7a:	f7ec f9b7 	bl	80002ec <__adddf3>
 8013f7e:	4632      	mov	r2, r6
 8013f80:	463b      	mov	r3, r7
 8013f82:	f7ec fb69 	bl	8000658 <__aeabi_dmul>
 8013f86:	a366      	add	r3, pc, #408	@ (adr r3, 8014120 <atan+0x2d0>)
 8013f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f8c:	f7ec f9ae 	bl	80002ec <__adddf3>
 8013f90:	4642      	mov	r2, r8
 8013f92:	464b      	mov	r3, r9
 8013f94:	f7ec fb60 	bl	8000658 <__aeabi_dmul>
 8013f98:	a363      	add	r3, pc, #396	@ (adr r3, 8014128 <atan+0x2d8>)
 8013f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9e:	4680      	mov	r8, r0
 8013fa0:	4689      	mov	r9, r1
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	4639      	mov	r1, r7
 8013fa6:	f7ec fb57 	bl	8000658 <__aeabi_dmul>
 8013faa:	a361      	add	r3, pc, #388	@ (adr r3, 8014130 <atan+0x2e0>)
 8013fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb0:	f7ec f99a 	bl	80002e8 <__aeabi_dsub>
 8013fb4:	4632      	mov	r2, r6
 8013fb6:	463b      	mov	r3, r7
 8013fb8:	f7ec fb4e 	bl	8000658 <__aeabi_dmul>
 8013fbc:	a35e      	add	r3, pc, #376	@ (adr r3, 8014138 <atan+0x2e8>)
 8013fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc2:	f7ec f991 	bl	80002e8 <__aeabi_dsub>
 8013fc6:	4632      	mov	r2, r6
 8013fc8:	463b      	mov	r3, r7
 8013fca:	f7ec fb45 	bl	8000658 <__aeabi_dmul>
 8013fce:	a35c      	add	r3, pc, #368	@ (adr r3, 8014140 <atan+0x2f0>)
 8013fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd4:	f7ec f988 	bl	80002e8 <__aeabi_dsub>
 8013fd8:	4632      	mov	r2, r6
 8013fda:	463b      	mov	r3, r7
 8013fdc:	f7ec fb3c 	bl	8000658 <__aeabi_dmul>
 8013fe0:	a359      	add	r3, pc, #356	@ (adr r3, 8014148 <atan+0x2f8>)
 8013fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe6:	f7ec f97f 	bl	80002e8 <__aeabi_dsub>
 8013fea:	4632      	mov	r2, r6
 8013fec:	463b      	mov	r3, r7
 8013fee:	f7ec fb33 	bl	8000658 <__aeabi_dmul>
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	4640      	mov	r0, r8
 8013ff8:	4649      	mov	r1, r9
 8013ffa:	f7ec f977 	bl	80002ec <__adddf3>
 8013ffe:	4622      	mov	r2, r4
 8014000:	462b      	mov	r3, r5
 8014002:	f7ec fb29 	bl	8000658 <__aeabi_dmul>
 8014006:	f1ba 3fff 	cmp.w	sl, #4294967295
 801400a:	4602      	mov	r2, r0
 801400c:	460b      	mov	r3, r1
 801400e:	d148      	bne.n	80140a2 <atan+0x252>
 8014010:	4620      	mov	r0, r4
 8014012:	4629      	mov	r1, r5
 8014014:	f7ec f968 	bl	80002e8 <__aeabi_dsub>
 8014018:	e72f      	b.n	8013e7a <atan+0x2a>
 801401a:	4b52      	ldr	r3, [pc, #328]	@ (8014164 <atan+0x314>)
 801401c:	2200      	movs	r2, #0
 801401e:	4620      	mov	r0, r4
 8014020:	4629      	mov	r1, r5
 8014022:	f7ec f961 	bl	80002e8 <__aeabi_dsub>
 8014026:	4b4f      	ldr	r3, [pc, #316]	@ (8014164 <atan+0x314>)
 8014028:	4606      	mov	r6, r0
 801402a:	460f      	mov	r7, r1
 801402c:	2200      	movs	r2, #0
 801402e:	4620      	mov	r0, r4
 8014030:	4629      	mov	r1, r5
 8014032:	f7ec f95b 	bl	80002ec <__adddf3>
 8014036:	4602      	mov	r2, r0
 8014038:	460b      	mov	r3, r1
 801403a:	4630      	mov	r0, r6
 801403c:	4639      	mov	r1, r7
 801403e:	f7ec fc35 	bl	80008ac <__aeabi_ddiv>
 8014042:	f04f 0a01 	mov.w	sl, #1
 8014046:	4604      	mov	r4, r0
 8014048:	460d      	mov	r5, r1
 801404a:	e765      	b.n	8013f18 <atan+0xc8>
 801404c:	4b47      	ldr	r3, [pc, #284]	@ (801416c <atan+0x31c>)
 801404e:	429e      	cmp	r6, r3
 8014050:	d21c      	bcs.n	801408c <atan+0x23c>
 8014052:	4b47      	ldr	r3, [pc, #284]	@ (8014170 <atan+0x320>)
 8014054:	2200      	movs	r2, #0
 8014056:	4620      	mov	r0, r4
 8014058:	4629      	mov	r1, r5
 801405a:	f7ec f945 	bl	80002e8 <__aeabi_dsub>
 801405e:	4b44      	ldr	r3, [pc, #272]	@ (8014170 <atan+0x320>)
 8014060:	4606      	mov	r6, r0
 8014062:	460f      	mov	r7, r1
 8014064:	2200      	movs	r2, #0
 8014066:	4620      	mov	r0, r4
 8014068:	4629      	mov	r1, r5
 801406a:	f7ec faf5 	bl	8000658 <__aeabi_dmul>
 801406e:	4b3d      	ldr	r3, [pc, #244]	@ (8014164 <atan+0x314>)
 8014070:	2200      	movs	r2, #0
 8014072:	f7ec f93b 	bl	80002ec <__adddf3>
 8014076:	4602      	mov	r2, r0
 8014078:	460b      	mov	r3, r1
 801407a:	4630      	mov	r0, r6
 801407c:	4639      	mov	r1, r7
 801407e:	f7ec fc15 	bl	80008ac <__aeabi_ddiv>
 8014082:	f04f 0a02 	mov.w	sl, #2
 8014086:	4604      	mov	r4, r0
 8014088:	460d      	mov	r5, r1
 801408a:	e745      	b.n	8013f18 <atan+0xc8>
 801408c:	4622      	mov	r2, r4
 801408e:	462b      	mov	r3, r5
 8014090:	4938      	ldr	r1, [pc, #224]	@ (8014174 <atan+0x324>)
 8014092:	2000      	movs	r0, #0
 8014094:	f7ec fc0a 	bl	80008ac <__aeabi_ddiv>
 8014098:	f04f 0a03 	mov.w	sl, #3
 801409c:	4604      	mov	r4, r0
 801409e:	460d      	mov	r5, r1
 80140a0:	e73a      	b.n	8013f18 <atan+0xc8>
 80140a2:	4b35      	ldr	r3, [pc, #212]	@ (8014178 <atan+0x328>)
 80140a4:	4e35      	ldr	r6, [pc, #212]	@ (801417c <atan+0x32c>)
 80140a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80140aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ae:	f7ec f91b 	bl	80002e8 <__aeabi_dsub>
 80140b2:	4622      	mov	r2, r4
 80140b4:	462b      	mov	r3, r5
 80140b6:	f7ec f917 	bl	80002e8 <__aeabi_dsub>
 80140ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80140be:	4602      	mov	r2, r0
 80140c0:	460b      	mov	r3, r1
 80140c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80140c6:	f7ec f90f 	bl	80002e8 <__aeabi_dsub>
 80140ca:	f1bb 0f00 	cmp.w	fp, #0
 80140ce:	4604      	mov	r4, r0
 80140d0:	460d      	mov	r5, r1
 80140d2:	f6bf aedc 	bge.w	8013e8e <atan+0x3e>
 80140d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80140da:	461d      	mov	r5, r3
 80140dc:	e6d7      	b.n	8013e8e <atan+0x3e>
 80140de:	a51c      	add	r5, pc, #112	@ (adr r5, 8014150 <atan+0x300>)
 80140e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80140e4:	e6d3      	b.n	8013e8e <atan+0x3e>
 80140e6:	bf00      	nop
 80140e8:	54442d18 	.word	0x54442d18
 80140ec:	3ff921fb 	.word	0x3ff921fb
 80140f0:	8800759c 	.word	0x8800759c
 80140f4:	7e37e43c 	.word	0x7e37e43c
 80140f8:	e322da11 	.word	0xe322da11
 80140fc:	3f90ad3a 	.word	0x3f90ad3a
 8014100:	24760deb 	.word	0x24760deb
 8014104:	3fa97b4b 	.word	0x3fa97b4b
 8014108:	a0d03d51 	.word	0xa0d03d51
 801410c:	3fb10d66 	.word	0x3fb10d66
 8014110:	c54c206e 	.word	0xc54c206e
 8014114:	3fb745cd 	.word	0x3fb745cd
 8014118:	920083ff 	.word	0x920083ff
 801411c:	3fc24924 	.word	0x3fc24924
 8014120:	5555550d 	.word	0x5555550d
 8014124:	3fd55555 	.word	0x3fd55555
 8014128:	2c6a6c2f 	.word	0x2c6a6c2f
 801412c:	bfa2b444 	.word	0xbfa2b444
 8014130:	52defd9a 	.word	0x52defd9a
 8014134:	3fadde2d 	.word	0x3fadde2d
 8014138:	af749a6d 	.word	0xaf749a6d
 801413c:	3fb3b0f2 	.word	0x3fb3b0f2
 8014140:	fe231671 	.word	0xfe231671
 8014144:	3fbc71c6 	.word	0x3fbc71c6
 8014148:	9998ebc4 	.word	0x9998ebc4
 801414c:	3fc99999 	.word	0x3fc99999
 8014150:	54442d18 	.word	0x54442d18
 8014154:	bff921fb 	.word	0xbff921fb
 8014158:	440fffff 	.word	0x440fffff
 801415c:	7ff00000 	.word	0x7ff00000
 8014160:	3fdbffff 	.word	0x3fdbffff
 8014164:	3ff00000 	.word	0x3ff00000
 8014168:	3ff2ffff 	.word	0x3ff2ffff
 801416c:	40038000 	.word	0x40038000
 8014170:	3ff80000 	.word	0x3ff80000
 8014174:	bff00000 	.word	0xbff00000
 8014178:	08018230 	.word	0x08018230
 801417c:	08018250 	.word	0x08018250

08014180 <fabs>:
 8014180:	ec51 0b10 	vmov	r0, r1, d0
 8014184:	4602      	mov	r2, r0
 8014186:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801418a:	ec43 2b10 	vmov	d0, r2, r3
 801418e:	4770      	bx	lr

08014190 <scalbn>:
 8014190:	b570      	push	{r4, r5, r6, lr}
 8014192:	ec55 4b10 	vmov	r4, r5, d0
 8014196:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801419a:	4606      	mov	r6, r0
 801419c:	462b      	mov	r3, r5
 801419e:	b991      	cbnz	r1, 80141c6 <scalbn+0x36>
 80141a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80141a4:	4323      	orrs	r3, r4
 80141a6:	d03d      	beq.n	8014224 <scalbn+0x94>
 80141a8:	4b35      	ldr	r3, [pc, #212]	@ (8014280 <scalbn+0xf0>)
 80141aa:	4620      	mov	r0, r4
 80141ac:	4629      	mov	r1, r5
 80141ae:	2200      	movs	r2, #0
 80141b0:	f7ec fa52 	bl	8000658 <__aeabi_dmul>
 80141b4:	4b33      	ldr	r3, [pc, #204]	@ (8014284 <scalbn+0xf4>)
 80141b6:	429e      	cmp	r6, r3
 80141b8:	4604      	mov	r4, r0
 80141ba:	460d      	mov	r5, r1
 80141bc:	da0f      	bge.n	80141de <scalbn+0x4e>
 80141be:	a328      	add	r3, pc, #160	@ (adr r3, 8014260 <scalbn+0xd0>)
 80141c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c4:	e01e      	b.n	8014204 <scalbn+0x74>
 80141c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80141ca:	4291      	cmp	r1, r2
 80141cc:	d10b      	bne.n	80141e6 <scalbn+0x56>
 80141ce:	4622      	mov	r2, r4
 80141d0:	4620      	mov	r0, r4
 80141d2:	4629      	mov	r1, r5
 80141d4:	f7ec f88a 	bl	80002ec <__adddf3>
 80141d8:	4604      	mov	r4, r0
 80141da:	460d      	mov	r5, r1
 80141dc:	e022      	b.n	8014224 <scalbn+0x94>
 80141de:	460b      	mov	r3, r1
 80141e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80141e4:	3936      	subs	r1, #54	@ 0x36
 80141e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80141ea:	4296      	cmp	r6, r2
 80141ec:	dd0d      	ble.n	801420a <scalbn+0x7a>
 80141ee:	2d00      	cmp	r5, #0
 80141f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8014268 <scalbn+0xd8>)
 80141f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141f6:	da02      	bge.n	80141fe <scalbn+0x6e>
 80141f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8014270 <scalbn+0xe0>)
 80141fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8014268 <scalbn+0xd8>)
 8014200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014204:	f7ec fa28 	bl	8000658 <__aeabi_dmul>
 8014208:	e7e6      	b.n	80141d8 <scalbn+0x48>
 801420a:	1872      	adds	r2, r6, r1
 801420c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014210:	428a      	cmp	r2, r1
 8014212:	dcec      	bgt.n	80141ee <scalbn+0x5e>
 8014214:	2a00      	cmp	r2, #0
 8014216:	dd08      	ble.n	801422a <scalbn+0x9a>
 8014218:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801421c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014220:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014224:	ec45 4b10 	vmov	d0, r4, r5
 8014228:	bd70      	pop	{r4, r5, r6, pc}
 801422a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801422e:	da08      	bge.n	8014242 <scalbn+0xb2>
 8014230:	2d00      	cmp	r5, #0
 8014232:	a10b      	add	r1, pc, #44	@ (adr r1, 8014260 <scalbn+0xd0>)
 8014234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014238:	dac1      	bge.n	80141be <scalbn+0x2e>
 801423a:	a10f      	add	r1, pc, #60	@ (adr r1, 8014278 <scalbn+0xe8>)
 801423c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014240:	e7bd      	b.n	80141be <scalbn+0x2e>
 8014242:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014246:	3236      	adds	r2, #54	@ 0x36
 8014248:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801424c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014250:	4620      	mov	r0, r4
 8014252:	4b0d      	ldr	r3, [pc, #52]	@ (8014288 <scalbn+0xf8>)
 8014254:	4629      	mov	r1, r5
 8014256:	2200      	movs	r2, #0
 8014258:	e7d4      	b.n	8014204 <scalbn+0x74>
 801425a:	bf00      	nop
 801425c:	f3af 8000 	nop.w
 8014260:	c2f8f359 	.word	0xc2f8f359
 8014264:	01a56e1f 	.word	0x01a56e1f
 8014268:	8800759c 	.word	0x8800759c
 801426c:	7e37e43c 	.word	0x7e37e43c
 8014270:	8800759c 	.word	0x8800759c
 8014274:	fe37e43c 	.word	0xfe37e43c
 8014278:	c2f8f359 	.word	0xc2f8f359
 801427c:	81a56e1f 	.word	0x81a56e1f
 8014280:	43500000 	.word	0x43500000
 8014284:	ffff3cb0 	.word	0xffff3cb0
 8014288:	3c900000 	.word	0x3c900000

0801428c <with_errno>:
 801428c:	b510      	push	{r4, lr}
 801428e:	ed2d 8b02 	vpush	{d8}
 8014292:	eeb0 8a40 	vmov.f32	s16, s0
 8014296:	eef0 8a60 	vmov.f32	s17, s1
 801429a:	4604      	mov	r4, r0
 801429c:	f000 ff0c 	bl	80150b8 <__errno>
 80142a0:	eeb0 0a48 	vmov.f32	s0, s16
 80142a4:	eef0 0a68 	vmov.f32	s1, s17
 80142a8:	ecbd 8b02 	vpop	{d8}
 80142ac:	6004      	str	r4, [r0, #0]
 80142ae:	bd10      	pop	{r4, pc}

080142b0 <xflow>:
 80142b0:	4603      	mov	r3, r0
 80142b2:	b507      	push	{r0, r1, r2, lr}
 80142b4:	ec51 0b10 	vmov	r0, r1, d0
 80142b8:	b183      	cbz	r3, 80142dc <xflow+0x2c>
 80142ba:	4602      	mov	r2, r0
 80142bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80142c0:	e9cd 2300 	strd	r2, r3, [sp]
 80142c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142c8:	f7ec f9c6 	bl	8000658 <__aeabi_dmul>
 80142cc:	ec41 0b10 	vmov	d0, r0, r1
 80142d0:	2022      	movs	r0, #34	@ 0x22
 80142d2:	b003      	add	sp, #12
 80142d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80142d8:	f7ff bfd8 	b.w	801428c <with_errno>
 80142dc:	4602      	mov	r2, r0
 80142de:	460b      	mov	r3, r1
 80142e0:	e7ee      	b.n	80142c0 <xflow+0x10>
 80142e2:	0000      	movs	r0, r0
 80142e4:	0000      	movs	r0, r0
	...

080142e8 <__math_uflow>:
 80142e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80142f0 <__math_uflow+0x8>
 80142ec:	f7ff bfe0 	b.w	80142b0 <xflow>
 80142f0:	00000000 	.word	0x00000000
 80142f4:	10000000 	.word	0x10000000

080142f8 <__math_oflow>:
 80142f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014300 <__math_oflow+0x8>
 80142fc:	f7ff bfd8 	b.w	80142b0 <xflow>
 8014300:	00000000 	.word	0x00000000
 8014304:	70000000 	.word	0x70000000

08014308 <abort>:
 8014308:	b508      	push	{r3, lr}
 801430a:	2006      	movs	r0, #6
 801430c:	f000 fe5e 	bl	8014fcc <raise>
 8014310:	2001      	movs	r0, #1
 8014312:	f7f9 ff1b 	bl	800e14c <_exit>
	...

08014318 <malloc>:
 8014318:	4b02      	ldr	r3, [pc, #8]	@ (8014324 <malloc+0xc>)
 801431a:	4601      	mov	r1, r0
 801431c:	6818      	ldr	r0, [r3, #0]
 801431e:	f000 b82d 	b.w	801437c <_malloc_r>
 8014322:	bf00      	nop
 8014324:	2000003c 	.word	0x2000003c

08014328 <free>:
 8014328:	4b02      	ldr	r3, [pc, #8]	@ (8014334 <free+0xc>)
 801432a:	4601      	mov	r1, r0
 801432c:	6818      	ldr	r0, [r3, #0]
 801432e:	f001 bd4b 	b.w	8015dc8 <_free_r>
 8014332:	bf00      	nop
 8014334:	2000003c 	.word	0x2000003c

08014338 <sbrk_aligned>:
 8014338:	b570      	push	{r4, r5, r6, lr}
 801433a:	4e0f      	ldr	r6, [pc, #60]	@ (8014378 <sbrk_aligned+0x40>)
 801433c:	460c      	mov	r4, r1
 801433e:	6831      	ldr	r1, [r6, #0]
 8014340:	4605      	mov	r5, r0
 8014342:	b911      	cbnz	r1, 801434a <sbrk_aligned+0x12>
 8014344:	f000 fe96 	bl	8015074 <_sbrk_r>
 8014348:	6030      	str	r0, [r6, #0]
 801434a:	4621      	mov	r1, r4
 801434c:	4628      	mov	r0, r5
 801434e:	f000 fe91 	bl	8015074 <_sbrk_r>
 8014352:	1c43      	adds	r3, r0, #1
 8014354:	d103      	bne.n	801435e <sbrk_aligned+0x26>
 8014356:	f04f 34ff 	mov.w	r4, #4294967295
 801435a:	4620      	mov	r0, r4
 801435c:	bd70      	pop	{r4, r5, r6, pc}
 801435e:	1cc4      	adds	r4, r0, #3
 8014360:	f024 0403 	bic.w	r4, r4, #3
 8014364:	42a0      	cmp	r0, r4
 8014366:	d0f8      	beq.n	801435a <sbrk_aligned+0x22>
 8014368:	1a21      	subs	r1, r4, r0
 801436a:	4628      	mov	r0, r5
 801436c:	f000 fe82 	bl	8015074 <_sbrk_r>
 8014370:	3001      	adds	r0, #1
 8014372:	d1f2      	bne.n	801435a <sbrk_aligned+0x22>
 8014374:	e7ef      	b.n	8014356 <sbrk_aligned+0x1e>
 8014376:	bf00      	nop
 8014378:	20000578 	.word	0x20000578

0801437c <_malloc_r>:
 801437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014380:	1ccd      	adds	r5, r1, #3
 8014382:	f025 0503 	bic.w	r5, r5, #3
 8014386:	3508      	adds	r5, #8
 8014388:	2d0c      	cmp	r5, #12
 801438a:	bf38      	it	cc
 801438c:	250c      	movcc	r5, #12
 801438e:	2d00      	cmp	r5, #0
 8014390:	4606      	mov	r6, r0
 8014392:	db01      	blt.n	8014398 <_malloc_r+0x1c>
 8014394:	42a9      	cmp	r1, r5
 8014396:	d904      	bls.n	80143a2 <_malloc_r+0x26>
 8014398:	230c      	movs	r3, #12
 801439a:	6033      	str	r3, [r6, #0]
 801439c:	2000      	movs	r0, #0
 801439e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014478 <_malloc_r+0xfc>
 80143a6:	f000 f869 	bl	801447c <__malloc_lock>
 80143aa:	f8d8 3000 	ldr.w	r3, [r8]
 80143ae:	461c      	mov	r4, r3
 80143b0:	bb44      	cbnz	r4, 8014404 <_malloc_r+0x88>
 80143b2:	4629      	mov	r1, r5
 80143b4:	4630      	mov	r0, r6
 80143b6:	f7ff ffbf 	bl	8014338 <sbrk_aligned>
 80143ba:	1c43      	adds	r3, r0, #1
 80143bc:	4604      	mov	r4, r0
 80143be:	d158      	bne.n	8014472 <_malloc_r+0xf6>
 80143c0:	f8d8 4000 	ldr.w	r4, [r8]
 80143c4:	4627      	mov	r7, r4
 80143c6:	2f00      	cmp	r7, #0
 80143c8:	d143      	bne.n	8014452 <_malloc_r+0xd6>
 80143ca:	2c00      	cmp	r4, #0
 80143cc:	d04b      	beq.n	8014466 <_malloc_r+0xea>
 80143ce:	6823      	ldr	r3, [r4, #0]
 80143d0:	4639      	mov	r1, r7
 80143d2:	4630      	mov	r0, r6
 80143d4:	eb04 0903 	add.w	r9, r4, r3
 80143d8:	f000 fe4c 	bl	8015074 <_sbrk_r>
 80143dc:	4581      	cmp	r9, r0
 80143de:	d142      	bne.n	8014466 <_malloc_r+0xea>
 80143e0:	6821      	ldr	r1, [r4, #0]
 80143e2:	1a6d      	subs	r5, r5, r1
 80143e4:	4629      	mov	r1, r5
 80143e6:	4630      	mov	r0, r6
 80143e8:	f7ff ffa6 	bl	8014338 <sbrk_aligned>
 80143ec:	3001      	adds	r0, #1
 80143ee:	d03a      	beq.n	8014466 <_malloc_r+0xea>
 80143f0:	6823      	ldr	r3, [r4, #0]
 80143f2:	442b      	add	r3, r5
 80143f4:	6023      	str	r3, [r4, #0]
 80143f6:	f8d8 3000 	ldr.w	r3, [r8]
 80143fa:	685a      	ldr	r2, [r3, #4]
 80143fc:	bb62      	cbnz	r2, 8014458 <_malloc_r+0xdc>
 80143fe:	f8c8 7000 	str.w	r7, [r8]
 8014402:	e00f      	b.n	8014424 <_malloc_r+0xa8>
 8014404:	6822      	ldr	r2, [r4, #0]
 8014406:	1b52      	subs	r2, r2, r5
 8014408:	d420      	bmi.n	801444c <_malloc_r+0xd0>
 801440a:	2a0b      	cmp	r2, #11
 801440c:	d917      	bls.n	801443e <_malloc_r+0xc2>
 801440e:	1961      	adds	r1, r4, r5
 8014410:	42a3      	cmp	r3, r4
 8014412:	6025      	str	r5, [r4, #0]
 8014414:	bf18      	it	ne
 8014416:	6059      	strne	r1, [r3, #4]
 8014418:	6863      	ldr	r3, [r4, #4]
 801441a:	bf08      	it	eq
 801441c:	f8c8 1000 	streq.w	r1, [r8]
 8014420:	5162      	str	r2, [r4, r5]
 8014422:	604b      	str	r3, [r1, #4]
 8014424:	4630      	mov	r0, r6
 8014426:	f000 f82f 	bl	8014488 <__malloc_unlock>
 801442a:	f104 000b 	add.w	r0, r4, #11
 801442e:	1d23      	adds	r3, r4, #4
 8014430:	f020 0007 	bic.w	r0, r0, #7
 8014434:	1ac2      	subs	r2, r0, r3
 8014436:	bf1c      	itt	ne
 8014438:	1a1b      	subne	r3, r3, r0
 801443a:	50a3      	strne	r3, [r4, r2]
 801443c:	e7af      	b.n	801439e <_malloc_r+0x22>
 801443e:	6862      	ldr	r2, [r4, #4]
 8014440:	42a3      	cmp	r3, r4
 8014442:	bf0c      	ite	eq
 8014444:	f8c8 2000 	streq.w	r2, [r8]
 8014448:	605a      	strne	r2, [r3, #4]
 801444a:	e7eb      	b.n	8014424 <_malloc_r+0xa8>
 801444c:	4623      	mov	r3, r4
 801444e:	6864      	ldr	r4, [r4, #4]
 8014450:	e7ae      	b.n	80143b0 <_malloc_r+0x34>
 8014452:	463c      	mov	r4, r7
 8014454:	687f      	ldr	r7, [r7, #4]
 8014456:	e7b6      	b.n	80143c6 <_malloc_r+0x4a>
 8014458:	461a      	mov	r2, r3
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	42a3      	cmp	r3, r4
 801445e:	d1fb      	bne.n	8014458 <_malloc_r+0xdc>
 8014460:	2300      	movs	r3, #0
 8014462:	6053      	str	r3, [r2, #4]
 8014464:	e7de      	b.n	8014424 <_malloc_r+0xa8>
 8014466:	230c      	movs	r3, #12
 8014468:	6033      	str	r3, [r6, #0]
 801446a:	4630      	mov	r0, r6
 801446c:	f000 f80c 	bl	8014488 <__malloc_unlock>
 8014470:	e794      	b.n	801439c <_malloc_r+0x20>
 8014472:	6005      	str	r5, [r0, #0]
 8014474:	e7d6      	b.n	8014424 <_malloc_r+0xa8>
 8014476:	bf00      	nop
 8014478:	2000057c 	.word	0x2000057c

0801447c <__malloc_lock>:
 801447c:	4801      	ldr	r0, [pc, #4]	@ (8014484 <__malloc_lock+0x8>)
 801447e:	f000 be46 	b.w	801510e <__retarget_lock_acquire_recursive>
 8014482:	bf00      	nop
 8014484:	200006c0 	.word	0x200006c0

08014488 <__malloc_unlock>:
 8014488:	4801      	ldr	r0, [pc, #4]	@ (8014490 <__malloc_unlock+0x8>)
 801448a:	f000 be41 	b.w	8015110 <__retarget_lock_release_recursive>
 801448e:	bf00      	nop
 8014490:	200006c0 	.word	0x200006c0

08014494 <__cxa_atexit>:
 8014494:	b510      	push	{r4, lr}
 8014496:	4604      	mov	r4, r0
 8014498:	4804      	ldr	r0, [pc, #16]	@ (80144ac <__cxa_atexit+0x18>)
 801449a:	4613      	mov	r3, r2
 801449c:	b120      	cbz	r0, 80144a8 <__cxa_atexit+0x14>
 801449e:	460a      	mov	r2, r1
 80144a0:	2002      	movs	r0, #2
 80144a2:	4621      	mov	r1, r4
 80144a4:	f3af 8000 	nop.w
 80144a8:	bd10      	pop	{r4, pc}
 80144aa:	bf00      	nop
 80144ac:	00000000 	.word	0x00000000

080144b0 <__cvt>:
 80144b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144b4:	ec57 6b10 	vmov	r6, r7, d0
 80144b8:	2f00      	cmp	r7, #0
 80144ba:	460c      	mov	r4, r1
 80144bc:	4619      	mov	r1, r3
 80144be:	463b      	mov	r3, r7
 80144c0:	bfbb      	ittet	lt
 80144c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80144c6:	461f      	movlt	r7, r3
 80144c8:	2300      	movge	r3, #0
 80144ca:	232d      	movlt	r3, #45	@ 0x2d
 80144cc:	700b      	strb	r3, [r1, #0]
 80144ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80144d4:	4691      	mov	r9, r2
 80144d6:	f023 0820 	bic.w	r8, r3, #32
 80144da:	bfbc      	itt	lt
 80144dc:	4632      	movlt	r2, r6
 80144de:	4616      	movlt	r6, r2
 80144e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80144e4:	d005      	beq.n	80144f2 <__cvt+0x42>
 80144e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80144ea:	d100      	bne.n	80144ee <__cvt+0x3e>
 80144ec:	3401      	adds	r4, #1
 80144ee:	2102      	movs	r1, #2
 80144f0:	e000      	b.n	80144f4 <__cvt+0x44>
 80144f2:	2103      	movs	r1, #3
 80144f4:	ab03      	add	r3, sp, #12
 80144f6:	9301      	str	r3, [sp, #4]
 80144f8:	ab02      	add	r3, sp, #8
 80144fa:	9300      	str	r3, [sp, #0]
 80144fc:	ec47 6b10 	vmov	d0, r6, r7
 8014500:	4653      	mov	r3, sl
 8014502:	4622      	mov	r2, r4
 8014504:	f000 fe9c 	bl	8015240 <_dtoa_r>
 8014508:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801450c:	4605      	mov	r5, r0
 801450e:	d119      	bne.n	8014544 <__cvt+0x94>
 8014510:	f019 0f01 	tst.w	r9, #1
 8014514:	d00e      	beq.n	8014534 <__cvt+0x84>
 8014516:	eb00 0904 	add.w	r9, r0, r4
 801451a:	2200      	movs	r2, #0
 801451c:	2300      	movs	r3, #0
 801451e:	4630      	mov	r0, r6
 8014520:	4639      	mov	r1, r7
 8014522:	f7ec fb01 	bl	8000b28 <__aeabi_dcmpeq>
 8014526:	b108      	cbz	r0, 801452c <__cvt+0x7c>
 8014528:	f8cd 900c 	str.w	r9, [sp, #12]
 801452c:	2230      	movs	r2, #48	@ 0x30
 801452e:	9b03      	ldr	r3, [sp, #12]
 8014530:	454b      	cmp	r3, r9
 8014532:	d31e      	bcc.n	8014572 <__cvt+0xc2>
 8014534:	9b03      	ldr	r3, [sp, #12]
 8014536:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014538:	1b5b      	subs	r3, r3, r5
 801453a:	4628      	mov	r0, r5
 801453c:	6013      	str	r3, [r2, #0]
 801453e:	b004      	add	sp, #16
 8014540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014544:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014548:	eb00 0904 	add.w	r9, r0, r4
 801454c:	d1e5      	bne.n	801451a <__cvt+0x6a>
 801454e:	7803      	ldrb	r3, [r0, #0]
 8014550:	2b30      	cmp	r3, #48	@ 0x30
 8014552:	d10a      	bne.n	801456a <__cvt+0xba>
 8014554:	2200      	movs	r2, #0
 8014556:	2300      	movs	r3, #0
 8014558:	4630      	mov	r0, r6
 801455a:	4639      	mov	r1, r7
 801455c:	f7ec fae4 	bl	8000b28 <__aeabi_dcmpeq>
 8014560:	b918      	cbnz	r0, 801456a <__cvt+0xba>
 8014562:	f1c4 0401 	rsb	r4, r4, #1
 8014566:	f8ca 4000 	str.w	r4, [sl]
 801456a:	f8da 3000 	ldr.w	r3, [sl]
 801456e:	4499      	add	r9, r3
 8014570:	e7d3      	b.n	801451a <__cvt+0x6a>
 8014572:	1c59      	adds	r1, r3, #1
 8014574:	9103      	str	r1, [sp, #12]
 8014576:	701a      	strb	r2, [r3, #0]
 8014578:	e7d9      	b.n	801452e <__cvt+0x7e>

0801457a <__exponent>:
 801457a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801457c:	2900      	cmp	r1, #0
 801457e:	bfba      	itte	lt
 8014580:	4249      	neglt	r1, r1
 8014582:	232d      	movlt	r3, #45	@ 0x2d
 8014584:	232b      	movge	r3, #43	@ 0x2b
 8014586:	2909      	cmp	r1, #9
 8014588:	7002      	strb	r2, [r0, #0]
 801458a:	7043      	strb	r3, [r0, #1]
 801458c:	dd29      	ble.n	80145e2 <__exponent+0x68>
 801458e:	f10d 0307 	add.w	r3, sp, #7
 8014592:	461d      	mov	r5, r3
 8014594:	270a      	movs	r7, #10
 8014596:	461a      	mov	r2, r3
 8014598:	fbb1 f6f7 	udiv	r6, r1, r7
 801459c:	fb07 1416 	mls	r4, r7, r6, r1
 80145a0:	3430      	adds	r4, #48	@ 0x30
 80145a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80145a6:	460c      	mov	r4, r1
 80145a8:	2c63      	cmp	r4, #99	@ 0x63
 80145aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80145ae:	4631      	mov	r1, r6
 80145b0:	dcf1      	bgt.n	8014596 <__exponent+0x1c>
 80145b2:	3130      	adds	r1, #48	@ 0x30
 80145b4:	1e94      	subs	r4, r2, #2
 80145b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80145ba:	1c41      	adds	r1, r0, #1
 80145bc:	4623      	mov	r3, r4
 80145be:	42ab      	cmp	r3, r5
 80145c0:	d30a      	bcc.n	80145d8 <__exponent+0x5e>
 80145c2:	f10d 0309 	add.w	r3, sp, #9
 80145c6:	1a9b      	subs	r3, r3, r2
 80145c8:	42ac      	cmp	r4, r5
 80145ca:	bf88      	it	hi
 80145cc:	2300      	movhi	r3, #0
 80145ce:	3302      	adds	r3, #2
 80145d0:	4403      	add	r3, r0
 80145d2:	1a18      	subs	r0, r3, r0
 80145d4:	b003      	add	sp, #12
 80145d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80145dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80145e0:	e7ed      	b.n	80145be <__exponent+0x44>
 80145e2:	2330      	movs	r3, #48	@ 0x30
 80145e4:	3130      	adds	r1, #48	@ 0x30
 80145e6:	7083      	strb	r3, [r0, #2]
 80145e8:	70c1      	strb	r1, [r0, #3]
 80145ea:	1d03      	adds	r3, r0, #4
 80145ec:	e7f1      	b.n	80145d2 <__exponent+0x58>
	...

080145f0 <_printf_float>:
 80145f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f4:	b08d      	sub	sp, #52	@ 0x34
 80145f6:	460c      	mov	r4, r1
 80145f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80145fc:	4616      	mov	r6, r2
 80145fe:	461f      	mov	r7, r3
 8014600:	4605      	mov	r5, r0
 8014602:	f000 fceb 	bl	8014fdc <_localeconv_r>
 8014606:	6803      	ldr	r3, [r0, #0]
 8014608:	9304      	str	r3, [sp, #16]
 801460a:	4618      	mov	r0, r3
 801460c:	f7eb fe60 	bl	80002d0 <strlen>
 8014610:	2300      	movs	r3, #0
 8014612:	930a      	str	r3, [sp, #40]	@ 0x28
 8014614:	f8d8 3000 	ldr.w	r3, [r8]
 8014618:	9005      	str	r0, [sp, #20]
 801461a:	3307      	adds	r3, #7
 801461c:	f023 0307 	bic.w	r3, r3, #7
 8014620:	f103 0208 	add.w	r2, r3, #8
 8014624:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014628:	f8d4 b000 	ldr.w	fp, [r4]
 801462c:	f8c8 2000 	str.w	r2, [r8]
 8014630:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014634:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014638:	9307      	str	r3, [sp, #28]
 801463a:	f8cd 8018 	str.w	r8, [sp, #24]
 801463e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014646:	4b9c      	ldr	r3, [pc, #624]	@ (80148b8 <_printf_float+0x2c8>)
 8014648:	f04f 32ff 	mov.w	r2, #4294967295
 801464c:	f7ec fa9e 	bl	8000b8c <__aeabi_dcmpun>
 8014650:	bb70      	cbnz	r0, 80146b0 <_printf_float+0xc0>
 8014652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014656:	4b98      	ldr	r3, [pc, #608]	@ (80148b8 <_printf_float+0x2c8>)
 8014658:	f04f 32ff 	mov.w	r2, #4294967295
 801465c:	f7ec fa78 	bl	8000b50 <__aeabi_dcmple>
 8014660:	bb30      	cbnz	r0, 80146b0 <_printf_float+0xc0>
 8014662:	2200      	movs	r2, #0
 8014664:	2300      	movs	r3, #0
 8014666:	4640      	mov	r0, r8
 8014668:	4649      	mov	r1, r9
 801466a:	f7ec fa67 	bl	8000b3c <__aeabi_dcmplt>
 801466e:	b110      	cbz	r0, 8014676 <_printf_float+0x86>
 8014670:	232d      	movs	r3, #45	@ 0x2d
 8014672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014676:	4a91      	ldr	r2, [pc, #580]	@ (80148bc <_printf_float+0x2cc>)
 8014678:	4b91      	ldr	r3, [pc, #580]	@ (80148c0 <_printf_float+0x2d0>)
 801467a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801467e:	bf94      	ite	ls
 8014680:	4690      	movls	r8, r2
 8014682:	4698      	movhi	r8, r3
 8014684:	2303      	movs	r3, #3
 8014686:	6123      	str	r3, [r4, #16]
 8014688:	f02b 0304 	bic.w	r3, fp, #4
 801468c:	6023      	str	r3, [r4, #0]
 801468e:	f04f 0900 	mov.w	r9, #0
 8014692:	9700      	str	r7, [sp, #0]
 8014694:	4633      	mov	r3, r6
 8014696:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014698:	4621      	mov	r1, r4
 801469a:	4628      	mov	r0, r5
 801469c:	f000 f9d2 	bl	8014a44 <_printf_common>
 80146a0:	3001      	adds	r0, #1
 80146a2:	f040 808d 	bne.w	80147c0 <_printf_float+0x1d0>
 80146a6:	f04f 30ff 	mov.w	r0, #4294967295
 80146aa:	b00d      	add	sp, #52	@ 0x34
 80146ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b0:	4642      	mov	r2, r8
 80146b2:	464b      	mov	r3, r9
 80146b4:	4640      	mov	r0, r8
 80146b6:	4649      	mov	r1, r9
 80146b8:	f7ec fa68 	bl	8000b8c <__aeabi_dcmpun>
 80146bc:	b140      	cbz	r0, 80146d0 <_printf_float+0xe0>
 80146be:	464b      	mov	r3, r9
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	bfbc      	itt	lt
 80146c4:	232d      	movlt	r3, #45	@ 0x2d
 80146c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80146ca:	4a7e      	ldr	r2, [pc, #504]	@ (80148c4 <_printf_float+0x2d4>)
 80146cc:	4b7e      	ldr	r3, [pc, #504]	@ (80148c8 <_printf_float+0x2d8>)
 80146ce:	e7d4      	b.n	801467a <_printf_float+0x8a>
 80146d0:	6863      	ldr	r3, [r4, #4]
 80146d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80146d6:	9206      	str	r2, [sp, #24]
 80146d8:	1c5a      	adds	r2, r3, #1
 80146da:	d13b      	bne.n	8014754 <_printf_float+0x164>
 80146dc:	2306      	movs	r3, #6
 80146de:	6063      	str	r3, [r4, #4]
 80146e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80146e4:	2300      	movs	r3, #0
 80146e6:	6022      	str	r2, [r4, #0]
 80146e8:	9303      	str	r3, [sp, #12]
 80146ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80146ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80146f0:	ab09      	add	r3, sp, #36	@ 0x24
 80146f2:	9300      	str	r3, [sp, #0]
 80146f4:	6861      	ldr	r1, [r4, #4]
 80146f6:	ec49 8b10 	vmov	d0, r8, r9
 80146fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80146fe:	4628      	mov	r0, r5
 8014700:	f7ff fed6 	bl	80144b0 <__cvt>
 8014704:	9b06      	ldr	r3, [sp, #24]
 8014706:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014708:	2b47      	cmp	r3, #71	@ 0x47
 801470a:	4680      	mov	r8, r0
 801470c:	d129      	bne.n	8014762 <_printf_float+0x172>
 801470e:	1cc8      	adds	r0, r1, #3
 8014710:	db02      	blt.n	8014718 <_printf_float+0x128>
 8014712:	6863      	ldr	r3, [r4, #4]
 8014714:	4299      	cmp	r1, r3
 8014716:	dd41      	ble.n	801479c <_printf_float+0x1ac>
 8014718:	f1aa 0a02 	sub.w	sl, sl, #2
 801471c:	fa5f fa8a 	uxtb.w	sl, sl
 8014720:	3901      	subs	r1, #1
 8014722:	4652      	mov	r2, sl
 8014724:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014728:	9109      	str	r1, [sp, #36]	@ 0x24
 801472a:	f7ff ff26 	bl	801457a <__exponent>
 801472e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014730:	1813      	adds	r3, r2, r0
 8014732:	2a01      	cmp	r2, #1
 8014734:	4681      	mov	r9, r0
 8014736:	6123      	str	r3, [r4, #16]
 8014738:	dc02      	bgt.n	8014740 <_printf_float+0x150>
 801473a:	6822      	ldr	r2, [r4, #0]
 801473c:	07d2      	lsls	r2, r2, #31
 801473e:	d501      	bpl.n	8014744 <_printf_float+0x154>
 8014740:	3301      	adds	r3, #1
 8014742:	6123      	str	r3, [r4, #16]
 8014744:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014748:	2b00      	cmp	r3, #0
 801474a:	d0a2      	beq.n	8014692 <_printf_float+0xa2>
 801474c:	232d      	movs	r3, #45	@ 0x2d
 801474e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014752:	e79e      	b.n	8014692 <_printf_float+0xa2>
 8014754:	9a06      	ldr	r2, [sp, #24]
 8014756:	2a47      	cmp	r2, #71	@ 0x47
 8014758:	d1c2      	bne.n	80146e0 <_printf_float+0xf0>
 801475a:	2b00      	cmp	r3, #0
 801475c:	d1c0      	bne.n	80146e0 <_printf_float+0xf0>
 801475e:	2301      	movs	r3, #1
 8014760:	e7bd      	b.n	80146de <_printf_float+0xee>
 8014762:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014766:	d9db      	bls.n	8014720 <_printf_float+0x130>
 8014768:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801476c:	d118      	bne.n	80147a0 <_printf_float+0x1b0>
 801476e:	2900      	cmp	r1, #0
 8014770:	6863      	ldr	r3, [r4, #4]
 8014772:	dd0b      	ble.n	801478c <_printf_float+0x19c>
 8014774:	6121      	str	r1, [r4, #16]
 8014776:	b913      	cbnz	r3, 801477e <_printf_float+0x18e>
 8014778:	6822      	ldr	r2, [r4, #0]
 801477a:	07d0      	lsls	r0, r2, #31
 801477c:	d502      	bpl.n	8014784 <_printf_float+0x194>
 801477e:	3301      	adds	r3, #1
 8014780:	440b      	add	r3, r1
 8014782:	6123      	str	r3, [r4, #16]
 8014784:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014786:	f04f 0900 	mov.w	r9, #0
 801478a:	e7db      	b.n	8014744 <_printf_float+0x154>
 801478c:	b913      	cbnz	r3, 8014794 <_printf_float+0x1a4>
 801478e:	6822      	ldr	r2, [r4, #0]
 8014790:	07d2      	lsls	r2, r2, #31
 8014792:	d501      	bpl.n	8014798 <_printf_float+0x1a8>
 8014794:	3302      	adds	r3, #2
 8014796:	e7f4      	b.n	8014782 <_printf_float+0x192>
 8014798:	2301      	movs	r3, #1
 801479a:	e7f2      	b.n	8014782 <_printf_float+0x192>
 801479c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80147a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80147a2:	4299      	cmp	r1, r3
 80147a4:	db05      	blt.n	80147b2 <_printf_float+0x1c2>
 80147a6:	6823      	ldr	r3, [r4, #0]
 80147a8:	6121      	str	r1, [r4, #16]
 80147aa:	07d8      	lsls	r0, r3, #31
 80147ac:	d5ea      	bpl.n	8014784 <_printf_float+0x194>
 80147ae:	1c4b      	adds	r3, r1, #1
 80147b0:	e7e7      	b.n	8014782 <_printf_float+0x192>
 80147b2:	2900      	cmp	r1, #0
 80147b4:	bfd4      	ite	le
 80147b6:	f1c1 0202 	rsble	r2, r1, #2
 80147ba:	2201      	movgt	r2, #1
 80147bc:	4413      	add	r3, r2
 80147be:	e7e0      	b.n	8014782 <_printf_float+0x192>
 80147c0:	6823      	ldr	r3, [r4, #0]
 80147c2:	055a      	lsls	r2, r3, #21
 80147c4:	d407      	bmi.n	80147d6 <_printf_float+0x1e6>
 80147c6:	6923      	ldr	r3, [r4, #16]
 80147c8:	4642      	mov	r2, r8
 80147ca:	4631      	mov	r1, r6
 80147cc:	4628      	mov	r0, r5
 80147ce:	47b8      	blx	r7
 80147d0:	3001      	adds	r0, #1
 80147d2:	d12b      	bne.n	801482c <_printf_float+0x23c>
 80147d4:	e767      	b.n	80146a6 <_printf_float+0xb6>
 80147d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80147da:	f240 80dd 	bls.w	8014998 <_printf_float+0x3a8>
 80147de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80147e2:	2200      	movs	r2, #0
 80147e4:	2300      	movs	r3, #0
 80147e6:	f7ec f99f 	bl	8000b28 <__aeabi_dcmpeq>
 80147ea:	2800      	cmp	r0, #0
 80147ec:	d033      	beq.n	8014856 <_printf_float+0x266>
 80147ee:	4a37      	ldr	r2, [pc, #220]	@ (80148cc <_printf_float+0x2dc>)
 80147f0:	2301      	movs	r3, #1
 80147f2:	4631      	mov	r1, r6
 80147f4:	4628      	mov	r0, r5
 80147f6:	47b8      	blx	r7
 80147f8:	3001      	adds	r0, #1
 80147fa:	f43f af54 	beq.w	80146a6 <_printf_float+0xb6>
 80147fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014802:	4543      	cmp	r3, r8
 8014804:	db02      	blt.n	801480c <_printf_float+0x21c>
 8014806:	6823      	ldr	r3, [r4, #0]
 8014808:	07d8      	lsls	r0, r3, #31
 801480a:	d50f      	bpl.n	801482c <_printf_float+0x23c>
 801480c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014810:	4631      	mov	r1, r6
 8014812:	4628      	mov	r0, r5
 8014814:	47b8      	blx	r7
 8014816:	3001      	adds	r0, #1
 8014818:	f43f af45 	beq.w	80146a6 <_printf_float+0xb6>
 801481c:	f04f 0900 	mov.w	r9, #0
 8014820:	f108 38ff 	add.w	r8, r8, #4294967295
 8014824:	f104 0a1a 	add.w	sl, r4, #26
 8014828:	45c8      	cmp	r8, r9
 801482a:	dc09      	bgt.n	8014840 <_printf_float+0x250>
 801482c:	6823      	ldr	r3, [r4, #0]
 801482e:	079b      	lsls	r3, r3, #30
 8014830:	f100 8103 	bmi.w	8014a3a <_printf_float+0x44a>
 8014834:	68e0      	ldr	r0, [r4, #12]
 8014836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014838:	4298      	cmp	r0, r3
 801483a:	bfb8      	it	lt
 801483c:	4618      	movlt	r0, r3
 801483e:	e734      	b.n	80146aa <_printf_float+0xba>
 8014840:	2301      	movs	r3, #1
 8014842:	4652      	mov	r2, sl
 8014844:	4631      	mov	r1, r6
 8014846:	4628      	mov	r0, r5
 8014848:	47b8      	blx	r7
 801484a:	3001      	adds	r0, #1
 801484c:	f43f af2b 	beq.w	80146a6 <_printf_float+0xb6>
 8014850:	f109 0901 	add.w	r9, r9, #1
 8014854:	e7e8      	b.n	8014828 <_printf_float+0x238>
 8014856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014858:	2b00      	cmp	r3, #0
 801485a:	dc39      	bgt.n	80148d0 <_printf_float+0x2e0>
 801485c:	4a1b      	ldr	r2, [pc, #108]	@ (80148cc <_printf_float+0x2dc>)
 801485e:	2301      	movs	r3, #1
 8014860:	4631      	mov	r1, r6
 8014862:	4628      	mov	r0, r5
 8014864:	47b8      	blx	r7
 8014866:	3001      	adds	r0, #1
 8014868:	f43f af1d 	beq.w	80146a6 <_printf_float+0xb6>
 801486c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014870:	ea59 0303 	orrs.w	r3, r9, r3
 8014874:	d102      	bne.n	801487c <_printf_float+0x28c>
 8014876:	6823      	ldr	r3, [r4, #0]
 8014878:	07d9      	lsls	r1, r3, #31
 801487a:	d5d7      	bpl.n	801482c <_printf_float+0x23c>
 801487c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014880:	4631      	mov	r1, r6
 8014882:	4628      	mov	r0, r5
 8014884:	47b8      	blx	r7
 8014886:	3001      	adds	r0, #1
 8014888:	f43f af0d 	beq.w	80146a6 <_printf_float+0xb6>
 801488c:	f04f 0a00 	mov.w	sl, #0
 8014890:	f104 0b1a 	add.w	fp, r4, #26
 8014894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014896:	425b      	negs	r3, r3
 8014898:	4553      	cmp	r3, sl
 801489a:	dc01      	bgt.n	80148a0 <_printf_float+0x2b0>
 801489c:	464b      	mov	r3, r9
 801489e:	e793      	b.n	80147c8 <_printf_float+0x1d8>
 80148a0:	2301      	movs	r3, #1
 80148a2:	465a      	mov	r2, fp
 80148a4:	4631      	mov	r1, r6
 80148a6:	4628      	mov	r0, r5
 80148a8:	47b8      	blx	r7
 80148aa:	3001      	adds	r0, #1
 80148ac:	f43f aefb 	beq.w	80146a6 <_printf_float+0xb6>
 80148b0:	f10a 0a01 	add.w	sl, sl, #1
 80148b4:	e7ee      	b.n	8014894 <_printf_float+0x2a4>
 80148b6:	bf00      	nop
 80148b8:	7fefffff 	.word	0x7fefffff
 80148bc:	08018270 	.word	0x08018270
 80148c0:	08018274 	.word	0x08018274
 80148c4:	08018278 	.word	0x08018278
 80148c8:	0801827c 	.word	0x0801827c
 80148cc:	08018280 	.word	0x08018280
 80148d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80148d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80148d6:	4553      	cmp	r3, sl
 80148d8:	bfa8      	it	ge
 80148da:	4653      	movge	r3, sl
 80148dc:	2b00      	cmp	r3, #0
 80148de:	4699      	mov	r9, r3
 80148e0:	dc36      	bgt.n	8014950 <_printf_float+0x360>
 80148e2:	f04f 0b00 	mov.w	fp, #0
 80148e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80148ea:	f104 021a 	add.w	r2, r4, #26
 80148ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80148f0:	9306      	str	r3, [sp, #24]
 80148f2:	eba3 0309 	sub.w	r3, r3, r9
 80148f6:	455b      	cmp	r3, fp
 80148f8:	dc31      	bgt.n	801495e <_printf_float+0x36e>
 80148fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148fc:	459a      	cmp	sl, r3
 80148fe:	dc3a      	bgt.n	8014976 <_printf_float+0x386>
 8014900:	6823      	ldr	r3, [r4, #0]
 8014902:	07da      	lsls	r2, r3, #31
 8014904:	d437      	bmi.n	8014976 <_printf_float+0x386>
 8014906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014908:	ebaa 0903 	sub.w	r9, sl, r3
 801490c:	9b06      	ldr	r3, [sp, #24]
 801490e:	ebaa 0303 	sub.w	r3, sl, r3
 8014912:	4599      	cmp	r9, r3
 8014914:	bfa8      	it	ge
 8014916:	4699      	movge	r9, r3
 8014918:	f1b9 0f00 	cmp.w	r9, #0
 801491c:	dc33      	bgt.n	8014986 <_printf_float+0x396>
 801491e:	f04f 0800 	mov.w	r8, #0
 8014922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014926:	f104 0b1a 	add.w	fp, r4, #26
 801492a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801492c:	ebaa 0303 	sub.w	r3, sl, r3
 8014930:	eba3 0309 	sub.w	r3, r3, r9
 8014934:	4543      	cmp	r3, r8
 8014936:	f77f af79 	ble.w	801482c <_printf_float+0x23c>
 801493a:	2301      	movs	r3, #1
 801493c:	465a      	mov	r2, fp
 801493e:	4631      	mov	r1, r6
 8014940:	4628      	mov	r0, r5
 8014942:	47b8      	blx	r7
 8014944:	3001      	adds	r0, #1
 8014946:	f43f aeae 	beq.w	80146a6 <_printf_float+0xb6>
 801494a:	f108 0801 	add.w	r8, r8, #1
 801494e:	e7ec      	b.n	801492a <_printf_float+0x33a>
 8014950:	4642      	mov	r2, r8
 8014952:	4631      	mov	r1, r6
 8014954:	4628      	mov	r0, r5
 8014956:	47b8      	blx	r7
 8014958:	3001      	adds	r0, #1
 801495a:	d1c2      	bne.n	80148e2 <_printf_float+0x2f2>
 801495c:	e6a3      	b.n	80146a6 <_printf_float+0xb6>
 801495e:	2301      	movs	r3, #1
 8014960:	4631      	mov	r1, r6
 8014962:	4628      	mov	r0, r5
 8014964:	9206      	str	r2, [sp, #24]
 8014966:	47b8      	blx	r7
 8014968:	3001      	adds	r0, #1
 801496a:	f43f ae9c 	beq.w	80146a6 <_printf_float+0xb6>
 801496e:	9a06      	ldr	r2, [sp, #24]
 8014970:	f10b 0b01 	add.w	fp, fp, #1
 8014974:	e7bb      	b.n	80148ee <_printf_float+0x2fe>
 8014976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801497a:	4631      	mov	r1, r6
 801497c:	4628      	mov	r0, r5
 801497e:	47b8      	blx	r7
 8014980:	3001      	adds	r0, #1
 8014982:	d1c0      	bne.n	8014906 <_printf_float+0x316>
 8014984:	e68f      	b.n	80146a6 <_printf_float+0xb6>
 8014986:	9a06      	ldr	r2, [sp, #24]
 8014988:	464b      	mov	r3, r9
 801498a:	4442      	add	r2, r8
 801498c:	4631      	mov	r1, r6
 801498e:	4628      	mov	r0, r5
 8014990:	47b8      	blx	r7
 8014992:	3001      	adds	r0, #1
 8014994:	d1c3      	bne.n	801491e <_printf_float+0x32e>
 8014996:	e686      	b.n	80146a6 <_printf_float+0xb6>
 8014998:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801499c:	f1ba 0f01 	cmp.w	sl, #1
 80149a0:	dc01      	bgt.n	80149a6 <_printf_float+0x3b6>
 80149a2:	07db      	lsls	r3, r3, #31
 80149a4:	d536      	bpl.n	8014a14 <_printf_float+0x424>
 80149a6:	2301      	movs	r3, #1
 80149a8:	4642      	mov	r2, r8
 80149aa:	4631      	mov	r1, r6
 80149ac:	4628      	mov	r0, r5
 80149ae:	47b8      	blx	r7
 80149b0:	3001      	adds	r0, #1
 80149b2:	f43f ae78 	beq.w	80146a6 <_printf_float+0xb6>
 80149b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149ba:	4631      	mov	r1, r6
 80149bc:	4628      	mov	r0, r5
 80149be:	47b8      	blx	r7
 80149c0:	3001      	adds	r0, #1
 80149c2:	f43f ae70 	beq.w	80146a6 <_printf_float+0xb6>
 80149c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80149ca:	2200      	movs	r2, #0
 80149cc:	2300      	movs	r3, #0
 80149ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80149d2:	f7ec f8a9 	bl	8000b28 <__aeabi_dcmpeq>
 80149d6:	b9c0      	cbnz	r0, 8014a0a <_printf_float+0x41a>
 80149d8:	4653      	mov	r3, sl
 80149da:	f108 0201 	add.w	r2, r8, #1
 80149de:	4631      	mov	r1, r6
 80149e0:	4628      	mov	r0, r5
 80149e2:	47b8      	blx	r7
 80149e4:	3001      	adds	r0, #1
 80149e6:	d10c      	bne.n	8014a02 <_printf_float+0x412>
 80149e8:	e65d      	b.n	80146a6 <_printf_float+0xb6>
 80149ea:	2301      	movs	r3, #1
 80149ec:	465a      	mov	r2, fp
 80149ee:	4631      	mov	r1, r6
 80149f0:	4628      	mov	r0, r5
 80149f2:	47b8      	blx	r7
 80149f4:	3001      	adds	r0, #1
 80149f6:	f43f ae56 	beq.w	80146a6 <_printf_float+0xb6>
 80149fa:	f108 0801 	add.w	r8, r8, #1
 80149fe:	45d0      	cmp	r8, sl
 8014a00:	dbf3      	blt.n	80149ea <_printf_float+0x3fa>
 8014a02:	464b      	mov	r3, r9
 8014a04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014a08:	e6df      	b.n	80147ca <_printf_float+0x1da>
 8014a0a:	f04f 0800 	mov.w	r8, #0
 8014a0e:	f104 0b1a 	add.w	fp, r4, #26
 8014a12:	e7f4      	b.n	80149fe <_printf_float+0x40e>
 8014a14:	2301      	movs	r3, #1
 8014a16:	4642      	mov	r2, r8
 8014a18:	e7e1      	b.n	80149de <_printf_float+0x3ee>
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	464a      	mov	r2, r9
 8014a1e:	4631      	mov	r1, r6
 8014a20:	4628      	mov	r0, r5
 8014a22:	47b8      	blx	r7
 8014a24:	3001      	adds	r0, #1
 8014a26:	f43f ae3e 	beq.w	80146a6 <_printf_float+0xb6>
 8014a2a:	f108 0801 	add.w	r8, r8, #1
 8014a2e:	68e3      	ldr	r3, [r4, #12]
 8014a30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014a32:	1a5b      	subs	r3, r3, r1
 8014a34:	4543      	cmp	r3, r8
 8014a36:	dcf0      	bgt.n	8014a1a <_printf_float+0x42a>
 8014a38:	e6fc      	b.n	8014834 <_printf_float+0x244>
 8014a3a:	f04f 0800 	mov.w	r8, #0
 8014a3e:	f104 0919 	add.w	r9, r4, #25
 8014a42:	e7f4      	b.n	8014a2e <_printf_float+0x43e>

08014a44 <_printf_common>:
 8014a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a48:	4616      	mov	r6, r2
 8014a4a:	4698      	mov	r8, r3
 8014a4c:	688a      	ldr	r2, [r1, #8]
 8014a4e:	690b      	ldr	r3, [r1, #16]
 8014a50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014a54:	4293      	cmp	r3, r2
 8014a56:	bfb8      	it	lt
 8014a58:	4613      	movlt	r3, r2
 8014a5a:	6033      	str	r3, [r6, #0]
 8014a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014a60:	4607      	mov	r7, r0
 8014a62:	460c      	mov	r4, r1
 8014a64:	b10a      	cbz	r2, 8014a6a <_printf_common+0x26>
 8014a66:	3301      	adds	r3, #1
 8014a68:	6033      	str	r3, [r6, #0]
 8014a6a:	6823      	ldr	r3, [r4, #0]
 8014a6c:	0699      	lsls	r1, r3, #26
 8014a6e:	bf42      	ittt	mi
 8014a70:	6833      	ldrmi	r3, [r6, #0]
 8014a72:	3302      	addmi	r3, #2
 8014a74:	6033      	strmi	r3, [r6, #0]
 8014a76:	6825      	ldr	r5, [r4, #0]
 8014a78:	f015 0506 	ands.w	r5, r5, #6
 8014a7c:	d106      	bne.n	8014a8c <_printf_common+0x48>
 8014a7e:	f104 0a19 	add.w	sl, r4, #25
 8014a82:	68e3      	ldr	r3, [r4, #12]
 8014a84:	6832      	ldr	r2, [r6, #0]
 8014a86:	1a9b      	subs	r3, r3, r2
 8014a88:	42ab      	cmp	r3, r5
 8014a8a:	dc26      	bgt.n	8014ada <_printf_common+0x96>
 8014a8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014a90:	6822      	ldr	r2, [r4, #0]
 8014a92:	3b00      	subs	r3, #0
 8014a94:	bf18      	it	ne
 8014a96:	2301      	movne	r3, #1
 8014a98:	0692      	lsls	r2, r2, #26
 8014a9a:	d42b      	bmi.n	8014af4 <_printf_common+0xb0>
 8014a9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014aa0:	4641      	mov	r1, r8
 8014aa2:	4638      	mov	r0, r7
 8014aa4:	47c8      	blx	r9
 8014aa6:	3001      	adds	r0, #1
 8014aa8:	d01e      	beq.n	8014ae8 <_printf_common+0xa4>
 8014aaa:	6823      	ldr	r3, [r4, #0]
 8014aac:	6922      	ldr	r2, [r4, #16]
 8014aae:	f003 0306 	and.w	r3, r3, #6
 8014ab2:	2b04      	cmp	r3, #4
 8014ab4:	bf02      	ittt	eq
 8014ab6:	68e5      	ldreq	r5, [r4, #12]
 8014ab8:	6833      	ldreq	r3, [r6, #0]
 8014aba:	1aed      	subeq	r5, r5, r3
 8014abc:	68a3      	ldr	r3, [r4, #8]
 8014abe:	bf0c      	ite	eq
 8014ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ac4:	2500      	movne	r5, #0
 8014ac6:	4293      	cmp	r3, r2
 8014ac8:	bfc4      	itt	gt
 8014aca:	1a9b      	subgt	r3, r3, r2
 8014acc:	18ed      	addgt	r5, r5, r3
 8014ace:	2600      	movs	r6, #0
 8014ad0:	341a      	adds	r4, #26
 8014ad2:	42b5      	cmp	r5, r6
 8014ad4:	d11a      	bne.n	8014b0c <_printf_common+0xc8>
 8014ad6:	2000      	movs	r0, #0
 8014ad8:	e008      	b.n	8014aec <_printf_common+0xa8>
 8014ada:	2301      	movs	r3, #1
 8014adc:	4652      	mov	r2, sl
 8014ade:	4641      	mov	r1, r8
 8014ae0:	4638      	mov	r0, r7
 8014ae2:	47c8      	blx	r9
 8014ae4:	3001      	adds	r0, #1
 8014ae6:	d103      	bne.n	8014af0 <_printf_common+0xac>
 8014ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8014aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014af0:	3501      	adds	r5, #1
 8014af2:	e7c6      	b.n	8014a82 <_printf_common+0x3e>
 8014af4:	18e1      	adds	r1, r4, r3
 8014af6:	1c5a      	adds	r2, r3, #1
 8014af8:	2030      	movs	r0, #48	@ 0x30
 8014afa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014afe:	4422      	add	r2, r4
 8014b00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014b04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014b08:	3302      	adds	r3, #2
 8014b0a:	e7c7      	b.n	8014a9c <_printf_common+0x58>
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	4622      	mov	r2, r4
 8014b10:	4641      	mov	r1, r8
 8014b12:	4638      	mov	r0, r7
 8014b14:	47c8      	blx	r9
 8014b16:	3001      	adds	r0, #1
 8014b18:	d0e6      	beq.n	8014ae8 <_printf_common+0xa4>
 8014b1a:	3601      	adds	r6, #1
 8014b1c:	e7d9      	b.n	8014ad2 <_printf_common+0x8e>
	...

08014b20 <_printf_i>:
 8014b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b24:	7e0f      	ldrb	r7, [r1, #24]
 8014b26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014b28:	2f78      	cmp	r7, #120	@ 0x78
 8014b2a:	4691      	mov	r9, r2
 8014b2c:	4680      	mov	r8, r0
 8014b2e:	460c      	mov	r4, r1
 8014b30:	469a      	mov	sl, r3
 8014b32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014b36:	d807      	bhi.n	8014b48 <_printf_i+0x28>
 8014b38:	2f62      	cmp	r7, #98	@ 0x62
 8014b3a:	d80a      	bhi.n	8014b52 <_printf_i+0x32>
 8014b3c:	2f00      	cmp	r7, #0
 8014b3e:	f000 80d2 	beq.w	8014ce6 <_printf_i+0x1c6>
 8014b42:	2f58      	cmp	r7, #88	@ 0x58
 8014b44:	f000 80b9 	beq.w	8014cba <_printf_i+0x19a>
 8014b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014b4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014b50:	e03a      	b.n	8014bc8 <_printf_i+0xa8>
 8014b52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014b56:	2b15      	cmp	r3, #21
 8014b58:	d8f6      	bhi.n	8014b48 <_printf_i+0x28>
 8014b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8014b60 <_printf_i+0x40>)
 8014b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014b60:	08014bb9 	.word	0x08014bb9
 8014b64:	08014bcd 	.word	0x08014bcd
 8014b68:	08014b49 	.word	0x08014b49
 8014b6c:	08014b49 	.word	0x08014b49
 8014b70:	08014b49 	.word	0x08014b49
 8014b74:	08014b49 	.word	0x08014b49
 8014b78:	08014bcd 	.word	0x08014bcd
 8014b7c:	08014b49 	.word	0x08014b49
 8014b80:	08014b49 	.word	0x08014b49
 8014b84:	08014b49 	.word	0x08014b49
 8014b88:	08014b49 	.word	0x08014b49
 8014b8c:	08014ccd 	.word	0x08014ccd
 8014b90:	08014bf7 	.word	0x08014bf7
 8014b94:	08014c87 	.word	0x08014c87
 8014b98:	08014b49 	.word	0x08014b49
 8014b9c:	08014b49 	.word	0x08014b49
 8014ba0:	08014cef 	.word	0x08014cef
 8014ba4:	08014b49 	.word	0x08014b49
 8014ba8:	08014bf7 	.word	0x08014bf7
 8014bac:	08014b49 	.word	0x08014b49
 8014bb0:	08014b49 	.word	0x08014b49
 8014bb4:	08014c8f 	.word	0x08014c8f
 8014bb8:	6833      	ldr	r3, [r6, #0]
 8014bba:	1d1a      	adds	r2, r3, #4
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	6032      	str	r2, [r6, #0]
 8014bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014bc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014bc8:	2301      	movs	r3, #1
 8014bca:	e09d      	b.n	8014d08 <_printf_i+0x1e8>
 8014bcc:	6833      	ldr	r3, [r6, #0]
 8014bce:	6820      	ldr	r0, [r4, #0]
 8014bd0:	1d19      	adds	r1, r3, #4
 8014bd2:	6031      	str	r1, [r6, #0]
 8014bd4:	0606      	lsls	r6, r0, #24
 8014bd6:	d501      	bpl.n	8014bdc <_printf_i+0xbc>
 8014bd8:	681d      	ldr	r5, [r3, #0]
 8014bda:	e003      	b.n	8014be4 <_printf_i+0xc4>
 8014bdc:	0645      	lsls	r5, r0, #25
 8014bde:	d5fb      	bpl.n	8014bd8 <_printf_i+0xb8>
 8014be0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014be4:	2d00      	cmp	r5, #0
 8014be6:	da03      	bge.n	8014bf0 <_printf_i+0xd0>
 8014be8:	232d      	movs	r3, #45	@ 0x2d
 8014bea:	426d      	negs	r5, r5
 8014bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014bf0:	4859      	ldr	r0, [pc, #356]	@ (8014d58 <_printf_i+0x238>)
 8014bf2:	230a      	movs	r3, #10
 8014bf4:	e011      	b.n	8014c1a <_printf_i+0xfa>
 8014bf6:	6821      	ldr	r1, [r4, #0]
 8014bf8:	6833      	ldr	r3, [r6, #0]
 8014bfa:	0608      	lsls	r0, r1, #24
 8014bfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8014c00:	d402      	bmi.n	8014c08 <_printf_i+0xe8>
 8014c02:	0649      	lsls	r1, r1, #25
 8014c04:	bf48      	it	mi
 8014c06:	b2ad      	uxthmi	r5, r5
 8014c08:	2f6f      	cmp	r7, #111	@ 0x6f
 8014c0a:	4853      	ldr	r0, [pc, #332]	@ (8014d58 <_printf_i+0x238>)
 8014c0c:	6033      	str	r3, [r6, #0]
 8014c0e:	bf14      	ite	ne
 8014c10:	230a      	movne	r3, #10
 8014c12:	2308      	moveq	r3, #8
 8014c14:	2100      	movs	r1, #0
 8014c16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014c1a:	6866      	ldr	r6, [r4, #4]
 8014c1c:	60a6      	str	r6, [r4, #8]
 8014c1e:	2e00      	cmp	r6, #0
 8014c20:	bfa2      	ittt	ge
 8014c22:	6821      	ldrge	r1, [r4, #0]
 8014c24:	f021 0104 	bicge.w	r1, r1, #4
 8014c28:	6021      	strge	r1, [r4, #0]
 8014c2a:	b90d      	cbnz	r5, 8014c30 <_printf_i+0x110>
 8014c2c:	2e00      	cmp	r6, #0
 8014c2e:	d04b      	beq.n	8014cc8 <_printf_i+0x1a8>
 8014c30:	4616      	mov	r6, r2
 8014c32:	fbb5 f1f3 	udiv	r1, r5, r3
 8014c36:	fb03 5711 	mls	r7, r3, r1, r5
 8014c3a:	5dc7      	ldrb	r7, [r0, r7]
 8014c3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014c40:	462f      	mov	r7, r5
 8014c42:	42bb      	cmp	r3, r7
 8014c44:	460d      	mov	r5, r1
 8014c46:	d9f4      	bls.n	8014c32 <_printf_i+0x112>
 8014c48:	2b08      	cmp	r3, #8
 8014c4a:	d10b      	bne.n	8014c64 <_printf_i+0x144>
 8014c4c:	6823      	ldr	r3, [r4, #0]
 8014c4e:	07df      	lsls	r7, r3, #31
 8014c50:	d508      	bpl.n	8014c64 <_printf_i+0x144>
 8014c52:	6923      	ldr	r3, [r4, #16]
 8014c54:	6861      	ldr	r1, [r4, #4]
 8014c56:	4299      	cmp	r1, r3
 8014c58:	bfde      	ittt	le
 8014c5a:	2330      	movle	r3, #48	@ 0x30
 8014c5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014c60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014c64:	1b92      	subs	r2, r2, r6
 8014c66:	6122      	str	r2, [r4, #16]
 8014c68:	f8cd a000 	str.w	sl, [sp]
 8014c6c:	464b      	mov	r3, r9
 8014c6e:	aa03      	add	r2, sp, #12
 8014c70:	4621      	mov	r1, r4
 8014c72:	4640      	mov	r0, r8
 8014c74:	f7ff fee6 	bl	8014a44 <_printf_common>
 8014c78:	3001      	adds	r0, #1
 8014c7a:	d14a      	bne.n	8014d12 <_printf_i+0x1f2>
 8014c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c80:	b004      	add	sp, #16
 8014c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c86:	6823      	ldr	r3, [r4, #0]
 8014c88:	f043 0320 	orr.w	r3, r3, #32
 8014c8c:	6023      	str	r3, [r4, #0]
 8014c8e:	4833      	ldr	r0, [pc, #204]	@ (8014d5c <_printf_i+0x23c>)
 8014c90:	2778      	movs	r7, #120	@ 0x78
 8014c92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014c96:	6823      	ldr	r3, [r4, #0]
 8014c98:	6831      	ldr	r1, [r6, #0]
 8014c9a:	061f      	lsls	r7, r3, #24
 8014c9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014ca0:	d402      	bmi.n	8014ca8 <_printf_i+0x188>
 8014ca2:	065f      	lsls	r7, r3, #25
 8014ca4:	bf48      	it	mi
 8014ca6:	b2ad      	uxthmi	r5, r5
 8014ca8:	6031      	str	r1, [r6, #0]
 8014caa:	07d9      	lsls	r1, r3, #31
 8014cac:	bf44      	itt	mi
 8014cae:	f043 0320 	orrmi.w	r3, r3, #32
 8014cb2:	6023      	strmi	r3, [r4, #0]
 8014cb4:	b11d      	cbz	r5, 8014cbe <_printf_i+0x19e>
 8014cb6:	2310      	movs	r3, #16
 8014cb8:	e7ac      	b.n	8014c14 <_printf_i+0xf4>
 8014cba:	4827      	ldr	r0, [pc, #156]	@ (8014d58 <_printf_i+0x238>)
 8014cbc:	e7e9      	b.n	8014c92 <_printf_i+0x172>
 8014cbe:	6823      	ldr	r3, [r4, #0]
 8014cc0:	f023 0320 	bic.w	r3, r3, #32
 8014cc4:	6023      	str	r3, [r4, #0]
 8014cc6:	e7f6      	b.n	8014cb6 <_printf_i+0x196>
 8014cc8:	4616      	mov	r6, r2
 8014cca:	e7bd      	b.n	8014c48 <_printf_i+0x128>
 8014ccc:	6833      	ldr	r3, [r6, #0]
 8014cce:	6825      	ldr	r5, [r4, #0]
 8014cd0:	6961      	ldr	r1, [r4, #20]
 8014cd2:	1d18      	adds	r0, r3, #4
 8014cd4:	6030      	str	r0, [r6, #0]
 8014cd6:	062e      	lsls	r6, r5, #24
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	d501      	bpl.n	8014ce0 <_printf_i+0x1c0>
 8014cdc:	6019      	str	r1, [r3, #0]
 8014cde:	e002      	b.n	8014ce6 <_printf_i+0x1c6>
 8014ce0:	0668      	lsls	r0, r5, #25
 8014ce2:	d5fb      	bpl.n	8014cdc <_printf_i+0x1bc>
 8014ce4:	8019      	strh	r1, [r3, #0]
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	6123      	str	r3, [r4, #16]
 8014cea:	4616      	mov	r6, r2
 8014cec:	e7bc      	b.n	8014c68 <_printf_i+0x148>
 8014cee:	6833      	ldr	r3, [r6, #0]
 8014cf0:	1d1a      	adds	r2, r3, #4
 8014cf2:	6032      	str	r2, [r6, #0]
 8014cf4:	681e      	ldr	r6, [r3, #0]
 8014cf6:	6862      	ldr	r2, [r4, #4]
 8014cf8:	2100      	movs	r1, #0
 8014cfa:	4630      	mov	r0, r6
 8014cfc:	f7eb fa98 	bl	8000230 <memchr>
 8014d00:	b108      	cbz	r0, 8014d06 <_printf_i+0x1e6>
 8014d02:	1b80      	subs	r0, r0, r6
 8014d04:	6060      	str	r0, [r4, #4]
 8014d06:	6863      	ldr	r3, [r4, #4]
 8014d08:	6123      	str	r3, [r4, #16]
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014d10:	e7aa      	b.n	8014c68 <_printf_i+0x148>
 8014d12:	6923      	ldr	r3, [r4, #16]
 8014d14:	4632      	mov	r2, r6
 8014d16:	4649      	mov	r1, r9
 8014d18:	4640      	mov	r0, r8
 8014d1a:	47d0      	blx	sl
 8014d1c:	3001      	adds	r0, #1
 8014d1e:	d0ad      	beq.n	8014c7c <_printf_i+0x15c>
 8014d20:	6823      	ldr	r3, [r4, #0]
 8014d22:	079b      	lsls	r3, r3, #30
 8014d24:	d413      	bmi.n	8014d4e <_printf_i+0x22e>
 8014d26:	68e0      	ldr	r0, [r4, #12]
 8014d28:	9b03      	ldr	r3, [sp, #12]
 8014d2a:	4298      	cmp	r0, r3
 8014d2c:	bfb8      	it	lt
 8014d2e:	4618      	movlt	r0, r3
 8014d30:	e7a6      	b.n	8014c80 <_printf_i+0x160>
 8014d32:	2301      	movs	r3, #1
 8014d34:	4632      	mov	r2, r6
 8014d36:	4649      	mov	r1, r9
 8014d38:	4640      	mov	r0, r8
 8014d3a:	47d0      	blx	sl
 8014d3c:	3001      	adds	r0, #1
 8014d3e:	d09d      	beq.n	8014c7c <_printf_i+0x15c>
 8014d40:	3501      	adds	r5, #1
 8014d42:	68e3      	ldr	r3, [r4, #12]
 8014d44:	9903      	ldr	r1, [sp, #12]
 8014d46:	1a5b      	subs	r3, r3, r1
 8014d48:	42ab      	cmp	r3, r5
 8014d4a:	dcf2      	bgt.n	8014d32 <_printf_i+0x212>
 8014d4c:	e7eb      	b.n	8014d26 <_printf_i+0x206>
 8014d4e:	2500      	movs	r5, #0
 8014d50:	f104 0619 	add.w	r6, r4, #25
 8014d54:	e7f5      	b.n	8014d42 <_printf_i+0x222>
 8014d56:	bf00      	nop
 8014d58:	08018282 	.word	0x08018282
 8014d5c:	08018293 	.word	0x08018293

08014d60 <std>:
 8014d60:	2300      	movs	r3, #0
 8014d62:	b510      	push	{r4, lr}
 8014d64:	4604      	mov	r4, r0
 8014d66:	e9c0 3300 	strd	r3, r3, [r0]
 8014d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014d6e:	6083      	str	r3, [r0, #8]
 8014d70:	8181      	strh	r1, [r0, #12]
 8014d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8014d74:	81c2      	strh	r2, [r0, #14]
 8014d76:	6183      	str	r3, [r0, #24]
 8014d78:	4619      	mov	r1, r3
 8014d7a:	2208      	movs	r2, #8
 8014d7c:	305c      	adds	r0, #92	@ 0x5c
 8014d7e:	f000 f8f4 	bl	8014f6a <memset>
 8014d82:	4b0d      	ldr	r3, [pc, #52]	@ (8014db8 <std+0x58>)
 8014d84:	6263      	str	r3, [r4, #36]	@ 0x24
 8014d86:	4b0d      	ldr	r3, [pc, #52]	@ (8014dbc <std+0x5c>)
 8014d88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8014dc0 <std+0x60>)
 8014d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8014dc4 <std+0x64>)
 8014d90:	6323      	str	r3, [r4, #48]	@ 0x30
 8014d92:	4b0d      	ldr	r3, [pc, #52]	@ (8014dc8 <std+0x68>)
 8014d94:	6224      	str	r4, [r4, #32]
 8014d96:	429c      	cmp	r4, r3
 8014d98:	d006      	beq.n	8014da8 <std+0x48>
 8014d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014d9e:	4294      	cmp	r4, r2
 8014da0:	d002      	beq.n	8014da8 <std+0x48>
 8014da2:	33d0      	adds	r3, #208	@ 0xd0
 8014da4:	429c      	cmp	r4, r3
 8014da6:	d105      	bne.n	8014db4 <std+0x54>
 8014da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014db0:	f000 b9ac 	b.w	801510c <__retarget_lock_init_recursive>
 8014db4:	bd10      	pop	{r4, pc}
 8014db6:	bf00      	nop
 8014db8:	08014ee5 	.word	0x08014ee5
 8014dbc:	08014f07 	.word	0x08014f07
 8014dc0:	08014f3f 	.word	0x08014f3f
 8014dc4:	08014f63 	.word	0x08014f63
 8014dc8:	20000580 	.word	0x20000580

08014dcc <stdio_exit_handler>:
 8014dcc:	4a02      	ldr	r2, [pc, #8]	@ (8014dd8 <stdio_exit_handler+0xc>)
 8014dce:	4903      	ldr	r1, [pc, #12]	@ (8014ddc <stdio_exit_handler+0x10>)
 8014dd0:	4803      	ldr	r0, [pc, #12]	@ (8014de0 <stdio_exit_handler+0x14>)
 8014dd2:	f000 b869 	b.w	8014ea8 <_fwalk_sglue>
 8014dd6:	bf00      	nop
 8014dd8:	20000030 	.word	0x20000030
 8014ddc:	08016669 	.word	0x08016669
 8014de0:	20000040 	.word	0x20000040

08014de4 <cleanup_stdio>:
 8014de4:	6841      	ldr	r1, [r0, #4]
 8014de6:	4b0c      	ldr	r3, [pc, #48]	@ (8014e18 <cleanup_stdio+0x34>)
 8014de8:	4299      	cmp	r1, r3
 8014dea:	b510      	push	{r4, lr}
 8014dec:	4604      	mov	r4, r0
 8014dee:	d001      	beq.n	8014df4 <cleanup_stdio+0x10>
 8014df0:	f001 fc3a 	bl	8016668 <_fflush_r>
 8014df4:	68a1      	ldr	r1, [r4, #8]
 8014df6:	4b09      	ldr	r3, [pc, #36]	@ (8014e1c <cleanup_stdio+0x38>)
 8014df8:	4299      	cmp	r1, r3
 8014dfa:	d002      	beq.n	8014e02 <cleanup_stdio+0x1e>
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	f001 fc33 	bl	8016668 <_fflush_r>
 8014e02:	68e1      	ldr	r1, [r4, #12]
 8014e04:	4b06      	ldr	r3, [pc, #24]	@ (8014e20 <cleanup_stdio+0x3c>)
 8014e06:	4299      	cmp	r1, r3
 8014e08:	d004      	beq.n	8014e14 <cleanup_stdio+0x30>
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e10:	f001 bc2a 	b.w	8016668 <_fflush_r>
 8014e14:	bd10      	pop	{r4, pc}
 8014e16:	bf00      	nop
 8014e18:	20000580 	.word	0x20000580
 8014e1c:	200005e8 	.word	0x200005e8
 8014e20:	20000650 	.word	0x20000650

08014e24 <global_stdio_init.part.0>:
 8014e24:	b510      	push	{r4, lr}
 8014e26:	4b0b      	ldr	r3, [pc, #44]	@ (8014e54 <global_stdio_init.part.0+0x30>)
 8014e28:	4c0b      	ldr	r4, [pc, #44]	@ (8014e58 <global_stdio_init.part.0+0x34>)
 8014e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8014e5c <global_stdio_init.part.0+0x38>)
 8014e2c:	601a      	str	r2, [r3, #0]
 8014e2e:	4620      	mov	r0, r4
 8014e30:	2200      	movs	r2, #0
 8014e32:	2104      	movs	r1, #4
 8014e34:	f7ff ff94 	bl	8014d60 <std>
 8014e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014e3c:	2201      	movs	r2, #1
 8014e3e:	2109      	movs	r1, #9
 8014e40:	f7ff ff8e 	bl	8014d60 <std>
 8014e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014e48:	2202      	movs	r2, #2
 8014e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e4e:	2112      	movs	r1, #18
 8014e50:	f7ff bf86 	b.w	8014d60 <std>
 8014e54:	200006b8 	.word	0x200006b8
 8014e58:	20000580 	.word	0x20000580
 8014e5c:	08014dcd 	.word	0x08014dcd

08014e60 <__sfp_lock_acquire>:
 8014e60:	4801      	ldr	r0, [pc, #4]	@ (8014e68 <__sfp_lock_acquire+0x8>)
 8014e62:	f000 b954 	b.w	801510e <__retarget_lock_acquire_recursive>
 8014e66:	bf00      	nop
 8014e68:	200006c1 	.word	0x200006c1

08014e6c <__sfp_lock_release>:
 8014e6c:	4801      	ldr	r0, [pc, #4]	@ (8014e74 <__sfp_lock_release+0x8>)
 8014e6e:	f000 b94f 	b.w	8015110 <__retarget_lock_release_recursive>
 8014e72:	bf00      	nop
 8014e74:	200006c1 	.word	0x200006c1

08014e78 <__sinit>:
 8014e78:	b510      	push	{r4, lr}
 8014e7a:	4604      	mov	r4, r0
 8014e7c:	f7ff fff0 	bl	8014e60 <__sfp_lock_acquire>
 8014e80:	6a23      	ldr	r3, [r4, #32]
 8014e82:	b11b      	cbz	r3, 8014e8c <__sinit+0x14>
 8014e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e88:	f7ff bff0 	b.w	8014e6c <__sfp_lock_release>
 8014e8c:	4b04      	ldr	r3, [pc, #16]	@ (8014ea0 <__sinit+0x28>)
 8014e8e:	6223      	str	r3, [r4, #32]
 8014e90:	4b04      	ldr	r3, [pc, #16]	@ (8014ea4 <__sinit+0x2c>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d1f5      	bne.n	8014e84 <__sinit+0xc>
 8014e98:	f7ff ffc4 	bl	8014e24 <global_stdio_init.part.0>
 8014e9c:	e7f2      	b.n	8014e84 <__sinit+0xc>
 8014e9e:	bf00      	nop
 8014ea0:	08014de5 	.word	0x08014de5
 8014ea4:	200006b8 	.word	0x200006b8

08014ea8 <_fwalk_sglue>:
 8014ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014eac:	4607      	mov	r7, r0
 8014eae:	4688      	mov	r8, r1
 8014eb0:	4614      	mov	r4, r2
 8014eb2:	2600      	movs	r6, #0
 8014eb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014eb8:	f1b9 0901 	subs.w	r9, r9, #1
 8014ebc:	d505      	bpl.n	8014eca <_fwalk_sglue+0x22>
 8014ebe:	6824      	ldr	r4, [r4, #0]
 8014ec0:	2c00      	cmp	r4, #0
 8014ec2:	d1f7      	bne.n	8014eb4 <_fwalk_sglue+0xc>
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eca:	89ab      	ldrh	r3, [r5, #12]
 8014ecc:	2b01      	cmp	r3, #1
 8014ece:	d907      	bls.n	8014ee0 <_fwalk_sglue+0x38>
 8014ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	d003      	beq.n	8014ee0 <_fwalk_sglue+0x38>
 8014ed8:	4629      	mov	r1, r5
 8014eda:	4638      	mov	r0, r7
 8014edc:	47c0      	blx	r8
 8014ede:	4306      	orrs	r6, r0
 8014ee0:	3568      	adds	r5, #104	@ 0x68
 8014ee2:	e7e9      	b.n	8014eb8 <_fwalk_sglue+0x10>

08014ee4 <__sread>:
 8014ee4:	b510      	push	{r4, lr}
 8014ee6:	460c      	mov	r4, r1
 8014ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014eec:	f000 f89c 	bl	8015028 <_read_r>
 8014ef0:	2800      	cmp	r0, #0
 8014ef2:	bfab      	itete	ge
 8014ef4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8014ef8:	181b      	addge	r3, r3, r0
 8014efa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014efe:	bfac      	ite	ge
 8014f00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014f02:	81a3      	strhlt	r3, [r4, #12]
 8014f04:	bd10      	pop	{r4, pc}

08014f06 <__swrite>:
 8014f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f0a:	461f      	mov	r7, r3
 8014f0c:	898b      	ldrh	r3, [r1, #12]
 8014f0e:	05db      	lsls	r3, r3, #23
 8014f10:	4605      	mov	r5, r0
 8014f12:	460c      	mov	r4, r1
 8014f14:	4616      	mov	r6, r2
 8014f16:	d505      	bpl.n	8014f24 <__swrite+0x1e>
 8014f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f1c:	2302      	movs	r3, #2
 8014f1e:	2200      	movs	r2, #0
 8014f20:	f000 f870 	bl	8015004 <_lseek_r>
 8014f24:	89a3      	ldrh	r3, [r4, #12]
 8014f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014f2e:	81a3      	strh	r3, [r4, #12]
 8014f30:	4632      	mov	r2, r6
 8014f32:	463b      	mov	r3, r7
 8014f34:	4628      	mov	r0, r5
 8014f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f3a:	f000 b8ab 	b.w	8015094 <_write_r>

08014f3e <__sseek>:
 8014f3e:	b510      	push	{r4, lr}
 8014f40:	460c      	mov	r4, r1
 8014f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f46:	f000 f85d 	bl	8015004 <_lseek_r>
 8014f4a:	1c43      	adds	r3, r0, #1
 8014f4c:	89a3      	ldrh	r3, [r4, #12]
 8014f4e:	bf15      	itete	ne
 8014f50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014f52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014f56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014f5a:	81a3      	strheq	r3, [r4, #12]
 8014f5c:	bf18      	it	ne
 8014f5e:	81a3      	strhne	r3, [r4, #12]
 8014f60:	bd10      	pop	{r4, pc}

08014f62 <__sclose>:
 8014f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f66:	f000 b83d 	b.w	8014fe4 <_close_r>

08014f6a <memset>:
 8014f6a:	4402      	add	r2, r0
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d100      	bne.n	8014f74 <memset+0xa>
 8014f72:	4770      	bx	lr
 8014f74:	f803 1b01 	strb.w	r1, [r3], #1
 8014f78:	e7f9      	b.n	8014f6e <memset+0x4>

08014f7a <_raise_r>:
 8014f7a:	291f      	cmp	r1, #31
 8014f7c:	b538      	push	{r3, r4, r5, lr}
 8014f7e:	4605      	mov	r5, r0
 8014f80:	460c      	mov	r4, r1
 8014f82:	d904      	bls.n	8014f8e <_raise_r+0x14>
 8014f84:	2316      	movs	r3, #22
 8014f86:	6003      	str	r3, [r0, #0]
 8014f88:	f04f 30ff 	mov.w	r0, #4294967295
 8014f8c:	bd38      	pop	{r3, r4, r5, pc}
 8014f8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014f90:	b112      	cbz	r2, 8014f98 <_raise_r+0x1e>
 8014f92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f96:	b94b      	cbnz	r3, 8014fac <_raise_r+0x32>
 8014f98:	4628      	mov	r0, r5
 8014f9a:	f000 f869 	bl	8015070 <_getpid_r>
 8014f9e:	4622      	mov	r2, r4
 8014fa0:	4601      	mov	r1, r0
 8014fa2:	4628      	mov	r0, r5
 8014fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fa8:	f000 b850 	b.w	801504c <_kill_r>
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d00a      	beq.n	8014fc6 <_raise_r+0x4c>
 8014fb0:	1c59      	adds	r1, r3, #1
 8014fb2:	d103      	bne.n	8014fbc <_raise_r+0x42>
 8014fb4:	2316      	movs	r3, #22
 8014fb6:	6003      	str	r3, [r0, #0]
 8014fb8:	2001      	movs	r0, #1
 8014fba:	e7e7      	b.n	8014f8c <_raise_r+0x12>
 8014fbc:	2100      	movs	r1, #0
 8014fbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	4798      	blx	r3
 8014fc6:	2000      	movs	r0, #0
 8014fc8:	e7e0      	b.n	8014f8c <_raise_r+0x12>
	...

08014fcc <raise>:
 8014fcc:	4b02      	ldr	r3, [pc, #8]	@ (8014fd8 <raise+0xc>)
 8014fce:	4601      	mov	r1, r0
 8014fd0:	6818      	ldr	r0, [r3, #0]
 8014fd2:	f7ff bfd2 	b.w	8014f7a <_raise_r>
 8014fd6:	bf00      	nop
 8014fd8:	2000003c 	.word	0x2000003c

08014fdc <_localeconv_r>:
 8014fdc:	4800      	ldr	r0, [pc, #0]	@ (8014fe0 <_localeconv_r+0x4>)
 8014fde:	4770      	bx	lr
 8014fe0:	2000017c 	.word	0x2000017c

08014fe4 <_close_r>:
 8014fe4:	b538      	push	{r3, r4, r5, lr}
 8014fe6:	4d06      	ldr	r5, [pc, #24]	@ (8015000 <_close_r+0x1c>)
 8014fe8:	2300      	movs	r3, #0
 8014fea:	4604      	mov	r4, r0
 8014fec:	4608      	mov	r0, r1
 8014fee:	602b      	str	r3, [r5, #0]
 8014ff0:	f7f9 f8f0 	bl	800e1d4 <_close>
 8014ff4:	1c43      	adds	r3, r0, #1
 8014ff6:	d102      	bne.n	8014ffe <_close_r+0x1a>
 8014ff8:	682b      	ldr	r3, [r5, #0]
 8014ffa:	b103      	cbz	r3, 8014ffe <_close_r+0x1a>
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	bd38      	pop	{r3, r4, r5, pc}
 8015000:	200006bc 	.word	0x200006bc

08015004 <_lseek_r>:
 8015004:	b538      	push	{r3, r4, r5, lr}
 8015006:	4d07      	ldr	r5, [pc, #28]	@ (8015024 <_lseek_r+0x20>)
 8015008:	4604      	mov	r4, r0
 801500a:	4608      	mov	r0, r1
 801500c:	4611      	mov	r1, r2
 801500e:	2200      	movs	r2, #0
 8015010:	602a      	str	r2, [r5, #0]
 8015012:	461a      	mov	r2, r3
 8015014:	f7f9 f905 	bl	800e222 <_lseek>
 8015018:	1c43      	adds	r3, r0, #1
 801501a:	d102      	bne.n	8015022 <_lseek_r+0x1e>
 801501c:	682b      	ldr	r3, [r5, #0]
 801501e:	b103      	cbz	r3, 8015022 <_lseek_r+0x1e>
 8015020:	6023      	str	r3, [r4, #0]
 8015022:	bd38      	pop	{r3, r4, r5, pc}
 8015024:	200006bc 	.word	0x200006bc

08015028 <_read_r>:
 8015028:	b538      	push	{r3, r4, r5, lr}
 801502a:	4d07      	ldr	r5, [pc, #28]	@ (8015048 <_read_r+0x20>)
 801502c:	4604      	mov	r4, r0
 801502e:	4608      	mov	r0, r1
 8015030:	4611      	mov	r1, r2
 8015032:	2200      	movs	r2, #0
 8015034:	602a      	str	r2, [r5, #0]
 8015036:	461a      	mov	r2, r3
 8015038:	f7f9 f893 	bl	800e162 <_read>
 801503c:	1c43      	adds	r3, r0, #1
 801503e:	d102      	bne.n	8015046 <_read_r+0x1e>
 8015040:	682b      	ldr	r3, [r5, #0]
 8015042:	b103      	cbz	r3, 8015046 <_read_r+0x1e>
 8015044:	6023      	str	r3, [r4, #0]
 8015046:	bd38      	pop	{r3, r4, r5, pc}
 8015048:	200006bc 	.word	0x200006bc

0801504c <_kill_r>:
 801504c:	b538      	push	{r3, r4, r5, lr}
 801504e:	4d07      	ldr	r5, [pc, #28]	@ (801506c <_kill_r+0x20>)
 8015050:	2300      	movs	r3, #0
 8015052:	4604      	mov	r4, r0
 8015054:	4608      	mov	r0, r1
 8015056:	4611      	mov	r1, r2
 8015058:	602b      	str	r3, [r5, #0]
 801505a:	f7f9 f867 	bl	800e12c <_kill>
 801505e:	1c43      	adds	r3, r0, #1
 8015060:	d102      	bne.n	8015068 <_kill_r+0x1c>
 8015062:	682b      	ldr	r3, [r5, #0]
 8015064:	b103      	cbz	r3, 8015068 <_kill_r+0x1c>
 8015066:	6023      	str	r3, [r4, #0]
 8015068:	bd38      	pop	{r3, r4, r5, pc}
 801506a:	bf00      	nop
 801506c:	200006bc 	.word	0x200006bc

08015070 <_getpid_r>:
 8015070:	f7f9 b854 	b.w	800e11c <_getpid>

08015074 <_sbrk_r>:
 8015074:	b538      	push	{r3, r4, r5, lr}
 8015076:	4d06      	ldr	r5, [pc, #24]	@ (8015090 <_sbrk_r+0x1c>)
 8015078:	2300      	movs	r3, #0
 801507a:	4604      	mov	r4, r0
 801507c:	4608      	mov	r0, r1
 801507e:	602b      	str	r3, [r5, #0]
 8015080:	f7f9 f8dc 	bl	800e23c <_sbrk>
 8015084:	1c43      	adds	r3, r0, #1
 8015086:	d102      	bne.n	801508e <_sbrk_r+0x1a>
 8015088:	682b      	ldr	r3, [r5, #0]
 801508a:	b103      	cbz	r3, 801508e <_sbrk_r+0x1a>
 801508c:	6023      	str	r3, [r4, #0]
 801508e:	bd38      	pop	{r3, r4, r5, pc}
 8015090:	200006bc 	.word	0x200006bc

08015094 <_write_r>:
 8015094:	b538      	push	{r3, r4, r5, lr}
 8015096:	4d07      	ldr	r5, [pc, #28]	@ (80150b4 <_write_r+0x20>)
 8015098:	4604      	mov	r4, r0
 801509a:	4608      	mov	r0, r1
 801509c:	4611      	mov	r1, r2
 801509e:	2200      	movs	r2, #0
 80150a0:	602a      	str	r2, [r5, #0]
 80150a2:	461a      	mov	r2, r3
 80150a4:	f7f9 f87a 	bl	800e19c <_write>
 80150a8:	1c43      	adds	r3, r0, #1
 80150aa:	d102      	bne.n	80150b2 <_write_r+0x1e>
 80150ac:	682b      	ldr	r3, [r5, #0]
 80150ae:	b103      	cbz	r3, 80150b2 <_write_r+0x1e>
 80150b0:	6023      	str	r3, [r4, #0]
 80150b2:	bd38      	pop	{r3, r4, r5, pc}
 80150b4:	200006bc 	.word	0x200006bc

080150b8 <__errno>:
 80150b8:	4b01      	ldr	r3, [pc, #4]	@ (80150c0 <__errno+0x8>)
 80150ba:	6818      	ldr	r0, [r3, #0]
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop
 80150c0:	2000003c 	.word	0x2000003c

080150c4 <__libc_init_array>:
 80150c4:	b570      	push	{r4, r5, r6, lr}
 80150c6:	4d0d      	ldr	r5, [pc, #52]	@ (80150fc <__libc_init_array+0x38>)
 80150c8:	4c0d      	ldr	r4, [pc, #52]	@ (8015100 <__libc_init_array+0x3c>)
 80150ca:	1b64      	subs	r4, r4, r5
 80150cc:	10a4      	asrs	r4, r4, #2
 80150ce:	2600      	movs	r6, #0
 80150d0:	42a6      	cmp	r6, r4
 80150d2:	d109      	bne.n	80150e8 <__libc_init_array+0x24>
 80150d4:	4d0b      	ldr	r5, [pc, #44]	@ (8015104 <__libc_init_array+0x40>)
 80150d6:	4c0c      	ldr	r4, [pc, #48]	@ (8015108 <__libc_init_array+0x44>)
 80150d8:	f001 fdb2 	bl	8016c40 <_init>
 80150dc:	1b64      	subs	r4, r4, r5
 80150de:	10a4      	asrs	r4, r4, #2
 80150e0:	2600      	movs	r6, #0
 80150e2:	42a6      	cmp	r6, r4
 80150e4:	d105      	bne.n	80150f2 <__libc_init_array+0x2e>
 80150e6:	bd70      	pop	{r4, r5, r6, pc}
 80150e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80150ec:	4798      	blx	r3
 80150ee:	3601      	adds	r6, #1
 80150f0:	e7ee      	b.n	80150d0 <__libc_init_array+0xc>
 80150f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80150f6:	4798      	blx	r3
 80150f8:	3601      	adds	r6, #1
 80150fa:	e7f2      	b.n	80150e2 <__libc_init_array+0x1e>
 80150fc:	0801a618 	.word	0x0801a618
 8015100:	0801a618 	.word	0x0801a618
 8015104:	0801a618 	.word	0x0801a618
 8015108:	0801a620 	.word	0x0801a620

0801510c <__retarget_lock_init_recursive>:
 801510c:	4770      	bx	lr

0801510e <__retarget_lock_acquire_recursive>:
 801510e:	4770      	bx	lr

08015110 <__retarget_lock_release_recursive>:
 8015110:	4770      	bx	lr

08015112 <memcpy>:
 8015112:	440a      	add	r2, r1
 8015114:	4291      	cmp	r1, r2
 8015116:	f100 33ff 	add.w	r3, r0, #4294967295
 801511a:	d100      	bne.n	801511e <memcpy+0xc>
 801511c:	4770      	bx	lr
 801511e:	b510      	push	{r4, lr}
 8015120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015128:	4291      	cmp	r1, r2
 801512a:	d1f9      	bne.n	8015120 <memcpy+0xe>
 801512c:	bd10      	pop	{r4, pc}

0801512e <quorem>:
 801512e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015132:	6903      	ldr	r3, [r0, #16]
 8015134:	690c      	ldr	r4, [r1, #16]
 8015136:	42a3      	cmp	r3, r4
 8015138:	4607      	mov	r7, r0
 801513a:	db7e      	blt.n	801523a <quorem+0x10c>
 801513c:	3c01      	subs	r4, #1
 801513e:	f101 0814 	add.w	r8, r1, #20
 8015142:	00a3      	lsls	r3, r4, #2
 8015144:	f100 0514 	add.w	r5, r0, #20
 8015148:	9300      	str	r3, [sp, #0]
 801514a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801514e:	9301      	str	r3, [sp, #4]
 8015150:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015158:	3301      	adds	r3, #1
 801515a:	429a      	cmp	r2, r3
 801515c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015160:	fbb2 f6f3 	udiv	r6, r2, r3
 8015164:	d32e      	bcc.n	80151c4 <quorem+0x96>
 8015166:	f04f 0a00 	mov.w	sl, #0
 801516a:	46c4      	mov	ip, r8
 801516c:	46ae      	mov	lr, r5
 801516e:	46d3      	mov	fp, sl
 8015170:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015174:	b298      	uxth	r0, r3
 8015176:	fb06 a000 	mla	r0, r6, r0, sl
 801517a:	0c02      	lsrs	r2, r0, #16
 801517c:	0c1b      	lsrs	r3, r3, #16
 801517e:	fb06 2303 	mla	r3, r6, r3, r2
 8015182:	f8de 2000 	ldr.w	r2, [lr]
 8015186:	b280      	uxth	r0, r0
 8015188:	b292      	uxth	r2, r2
 801518a:	1a12      	subs	r2, r2, r0
 801518c:	445a      	add	r2, fp
 801518e:	f8de 0000 	ldr.w	r0, [lr]
 8015192:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015196:	b29b      	uxth	r3, r3
 8015198:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801519c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80151a0:	b292      	uxth	r2, r2
 80151a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80151a6:	45e1      	cmp	r9, ip
 80151a8:	f84e 2b04 	str.w	r2, [lr], #4
 80151ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80151b0:	d2de      	bcs.n	8015170 <quorem+0x42>
 80151b2:	9b00      	ldr	r3, [sp, #0]
 80151b4:	58eb      	ldr	r3, [r5, r3]
 80151b6:	b92b      	cbnz	r3, 80151c4 <quorem+0x96>
 80151b8:	9b01      	ldr	r3, [sp, #4]
 80151ba:	3b04      	subs	r3, #4
 80151bc:	429d      	cmp	r5, r3
 80151be:	461a      	mov	r2, r3
 80151c0:	d32f      	bcc.n	8015222 <quorem+0xf4>
 80151c2:	613c      	str	r4, [r7, #16]
 80151c4:	4638      	mov	r0, r7
 80151c6:	f001 f8c3 	bl	8016350 <__mcmp>
 80151ca:	2800      	cmp	r0, #0
 80151cc:	db25      	blt.n	801521a <quorem+0xec>
 80151ce:	4629      	mov	r1, r5
 80151d0:	2000      	movs	r0, #0
 80151d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80151d6:	f8d1 c000 	ldr.w	ip, [r1]
 80151da:	fa1f fe82 	uxth.w	lr, r2
 80151de:	fa1f f38c 	uxth.w	r3, ip
 80151e2:	eba3 030e 	sub.w	r3, r3, lr
 80151e6:	4403      	add	r3, r0
 80151e8:	0c12      	lsrs	r2, r2, #16
 80151ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80151ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151f8:	45c1      	cmp	r9, r8
 80151fa:	f841 3b04 	str.w	r3, [r1], #4
 80151fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015202:	d2e6      	bcs.n	80151d2 <quorem+0xa4>
 8015204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015208:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801520c:	b922      	cbnz	r2, 8015218 <quorem+0xea>
 801520e:	3b04      	subs	r3, #4
 8015210:	429d      	cmp	r5, r3
 8015212:	461a      	mov	r2, r3
 8015214:	d30b      	bcc.n	801522e <quorem+0x100>
 8015216:	613c      	str	r4, [r7, #16]
 8015218:	3601      	adds	r6, #1
 801521a:	4630      	mov	r0, r6
 801521c:	b003      	add	sp, #12
 801521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015222:	6812      	ldr	r2, [r2, #0]
 8015224:	3b04      	subs	r3, #4
 8015226:	2a00      	cmp	r2, #0
 8015228:	d1cb      	bne.n	80151c2 <quorem+0x94>
 801522a:	3c01      	subs	r4, #1
 801522c:	e7c6      	b.n	80151bc <quorem+0x8e>
 801522e:	6812      	ldr	r2, [r2, #0]
 8015230:	3b04      	subs	r3, #4
 8015232:	2a00      	cmp	r2, #0
 8015234:	d1ef      	bne.n	8015216 <quorem+0xe8>
 8015236:	3c01      	subs	r4, #1
 8015238:	e7ea      	b.n	8015210 <quorem+0xe2>
 801523a:	2000      	movs	r0, #0
 801523c:	e7ee      	b.n	801521c <quorem+0xee>
	...

08015240 <_dtoa_r>:
 8015240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015244:	69c7      	ldr	r7, [r0, #28]
 8015246:	b099      	sub	sp, #100	@ 0x64
 8015248:	ed8d 0b02 	vstr	d0, [sp, #8]
 801524c:	ec55 4b10 	vmov	r4, r5, d0
 8015250:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8015252:	9109      	str	r1, [sp, #36]	@ 0x24
 8015254:	4683      	mov	fp, r0
 8015256:	920e      	str	r2, [sp, #56]	@ 0x38
 8015258:	9313      	str	r3, [sp, #76]	@ 0x4c
 801525a:	b97f      	cbnz	r7, 801527c <_dtoa_r+0x3c>
 801525c:	2010      	movs	r0, #16
 801525e:	f7ff f85b 	bl	8014318 <malloc>
 8015262:	4602      	mov	r2, r0
 8015264:	f8cb 001c 	str.w	r0, [fp, #28]
 8015268:	b920      	cbnz	r0, 8015274 <_dtoa_r+0x34>
 801526a:	4ba7      	ldr	r3, [pc, #668]	@ (8015508 <_dtoa_r+0x2c8>)
 801526c:	21ef      	movs	r1, #239	@ 0xef
 801526e:	48a7      	ldr	r0, [pc, #668]	@ (801550c <_dtoa_r+0x2cc>)
 8015270:	f001 fa22 	bl	80166b8 <__assert_func>
 8015274:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015278:	6007      	str	r7, [r0, #0]
 801527a:	60c7      	str	r7, [r0, #12]
 801527c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015280:	6819      	ldr	r1, [r3, #0]
 8015282:	b159      	cbz	r1, 801529c <_dtoa_r+0x5c>
 8015284:	685a      	ldr	r2, [r3, #4]
 8015286:	604a      	str	r2, [r1, #4]
 8015288:	2301      	movs	r3, #1
 801528a:	4093      	lsls	r3, r2
 801528c:	608b      	str	r3, [r1, #8]
 801528e:	4658      	mov	r0, fp
 8015290:	f000 fe24 	bl	8015edc <_Bfree>
 8015294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015298:	2200      	movs	r2, #0
 801529a:	601a      	str	r2, [r3, #0]
 801529c:	1e2b      	subs	r3, r5, #0
 801529e:	bfb9      	ittee	lt
 80152a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80152a4:	9303      	strlt	r3, [sp, #12]
 80152a6:	2300      	movge	r3, #0
 80152a8:	6033      	strge	r3, [r6, #0]
 80152aa:	9f03      	ldr	r7, [sp, #12]
 80152ac:	4b98      	ldr	r3, [pc, #608]	@ (8015510 <_dtoa_r+0x2d0>)
 80152ae:	bfbc      	itt	lt
 80152b0:	2201      	movlt	r2, #1
 80152b2:	6032      	strlt	r2, [r6, #0]
 80152b4:	43bb      	bics	r3, r7
 80152b6:	d112      	bne.n	80152de <_dtoa_r+0x9e>
 80152b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80152ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80152be:	6013      	str	r3, [r2, #0]
 80152c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80152c4:	4323      	orrs	r3, r4
 80152c6:	f000 854d 	beq.w	8015d64 <_dtoa_r+0xb24>
 80152ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80152cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015524 <_dtoa_r+0x2e4>
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	f000 854f 	beq.w	8015d74 <_dtoa_r+0xb34>
 80152d6:	f10a 0303 	add.w	r3, sl, #3
 80152da:	f000 bd49 	b.w	8015d70 <_dtoa_r+0xb30>
 80152de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152e2:	2200      	movs	r2, #0
 80152e4:	ec51 0b17 	vmov	r0, r1, d7
 80152e8:	2300      	movs	r3, #0
 80152ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80152ee:	f7eb fc1b 	bl	8000b28 <__aeabi_dcmpeq>
 80152f2:	4680      	mov	r8, r0
 80152f4:	b158      	cbz	r0, 801530e <_dtoa_r+0xce>
 80152f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80152f8:	2301      	movs	r3, #1
 80152fa:	6013      	str	r3, [r2, #0]
 80152fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80152fe:	b113      	cbz	r3, 8015306 <_dtoa_r+0xc6>
 8015300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015302:	4b84      	ldr	r3, [pc, #528]	@ (8015514 <_dtoa_r+0x2d4>)
 8015304:	6013      	str	r3, [r2, #0]
 8015306:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015528 <_dtoa_r+0x2e8>
 801530a:	f000 bd33 	b.w	8015d74 <_dtoa_r+0xb34>
 801530e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015312:	aa16      	add	r2, sp, #88	@ 0x58
 8015314:	a917      	add	r1, sp, #92	@ 0x5c
 8015316:	4658      	mov	r0, fp
 8015318:	f001 f8ca 	bl	80164b0 <__d2b>
 801531c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015320:	4681      	mov	r9, r0
 8015322:	2e00      	cmp	r6, #0
 8015324:	d077      	beq.n	8015416 <_dtoa_r+0x1d6>
 8015326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015328:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801532c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015334:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015338:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801533c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015340:	4619      	mov	r1, r3
 8015342:	2200      	movs	r2, #0
 8015344:	4b74      	ldr	r3, [pc, #464]	@ (8015518 <_dtoa_r+0x2d8>)
 8015346:	f7ea ffcf 	bl	80002e8 <__aeabi_dsub>
 801534a:	a369      	add	r3, pc, #420	@ (adr r3, 80154f0 <_dtoa_r+0x2b0>)
 801534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015350:	f7eb f982 	bl	8000658 <__aeabi_dmul>
 8015354:	a368      	add	r3, pc, #416	@ (adr r3, 80154f8 <_dtoa_r+0x2b8>)
 8015356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801535a:	f7ea ffc7 	bl	80002ec <__adddf3>
 801535e:	4604      	mov	r4, r0
 8015360:	4630      	mov	r0, r6
 8015362:	460d      	mov	r5, r1
 8015364:	f7eb f90e 	bl	8000584 <__aeabi_i2d>
 8015368:	a365      	add	r3, pc, #404	@ (adr r3, 8015500 <_dtoa_r+0x2c0>)
 801536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536e:	f7eb f973 	bl	8000658 <__aeabi_dmul>
 8015372:	4602      	mov	r2, r0
 8015374:	460b      	mov	r3, r1
 8015376:	4620      	mov	r0, r4
 8015378:	4629      	mov	r1, r5
 801537a:	f7ea ffb7 	bl	80002ec <__adddf3>
 801537e:	4604      	mov	r4, r0
 8015380:	460d      	mov	r5, r1
 8015382:	f7eb fc19 	bl	8000bb8 <__aeabi_d2iz>
 8015386:	2200      	movs	r2, #0
 8015388:	4607      	mov	r7, r0
 801538a:	2300      	movs	r3, #0
 801538c:	4620      	mov	r0, r4
 801538e:	4629      	mov	r1, r5
 8015390:	f7eb fbd4 	bl	8000b3c <__aeabi_dcmplt>
 8015394:	b140      	cbz	r0, 80153a8 <_dtoa_r+0x168>
 8015396:	4638      	mov	r0, r7
 8015398:	f7eb f8f4 	bl	8000584 <__aeabi_i2d>
 801539c:	4622      	mov	r2, r4
 801539e:	462b      	mov	r3, r5
 80153a0:	f7eb fbc2 	bl	8000b28 <__aeabi_dcmpeq>
 80153a4:	b900      	cbnz	r0, 80153a8 <_dtoa_r+0x168>
 80153a6:	3f01      	subs	r7, #1
 80153a8:	2f16      	cmp	r7, #22
 80153aa:	d851      	bhi.n	8015450 <_dtoa_r+0x210>
 80153ac:	4b5b      	ldr	r3, [pc, #364]	@ (801551c <_dtoa_r+0x2dc>)
 80153ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80153b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80153ba:	f7eb fbbf 	bl	8000b3c <__aeabi_dcmplt>
 80153be:	2800      	cmp	r0, #0
 80153c0:	d048      	beq.n	8015454 <_dtoa_r+0x214>
 80153c2:	3f01      	subs	r7, #1
 80153c4:	2300      	movs	r3, #0
 80153c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80153c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80153ca:	1b9b      	subs	r3, r3, r6
 80153cc:	1e5a      	subs	r2, r3, #1
 80153ce:	bf44      	itt	mi
 80153d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80153d4:	2300      	movmi	r3, #0
 80153d6:	9208      	str	r2, [sp, #32]
 80153d8:	bf54      	ite	pl
 80153da:	f04f 0800 	movpl.w	r8, #0
 80153de:	9308      	strmi	r3, [sp, #32]
 80153e0:	2f00      	cmp	r7, #0
 80153e2:	db39      	blt.n	8015458 <_dtoa_r+0x218>
 80153e4:	9b08      	ldr	r3, [sp, #32]
 80153e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80153e8:	443b      	add	r3, r7
 80153ea:	9308      	str	r3, [sp, #32]
 80153ec:	2300      	movs	r3, #0
 80153ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80153f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153f2:	2b09      	cmp	r3, #9
 80153f4:	d864      	bhi.n	80154c0 <_dtoa_r+0x280>
 80153f6:	2b05      	cmp	r3, #5
 80153f8:	bfc4      	itt	gt
 80153fa:	3b04      	subgt	r3, #4
 80153fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80153fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015400:	f1a3 0302 	sub.w	r3, r3, #2
 8015404:	bfcc      	ite	gt
 8015406:	2400      	movgt	r4, #0
 8015408:	2401      	movle	r4, #1
 801540a:	2b03      	cmp	r3, #3
 801540c:	d863      	bhi.n	80154d6 <_dtoa_r+0x296>
 801540e:	e8df f003 	tbb	[pc, r3]
 8015412:	372a      	.short	0x372a
 8015414:	5535      	.short	0x5535
 8015416:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801541a:	441e      	add	r6, r3
 801541c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015420:	2b20      	cmp	r3, #32
 8015422:	bfc1      	itttt	gt
 8015424:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015428:	409f      	lslgt	r7, r3
 801542a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801542e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015432:	bfd6      	itet	le
 8015434:	f1c3 0320 	rsble	r3, r3, #32
 8015438:	ea47 0003 	orrgt.w	r0, r7, r3
 801543c:	fa04 f003 	lslle.w	r0, r4, r3
 8015440:	f7eb f890 	bl	8000564 <__aeabi_ui2d>
 8015444:	2201      	movs	r2, #1
 8015446:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801544a:	3e01      	subs	r6, #1
 801544c:	9214      	str	r2, [sp, #80]	@ 0x50
 801544e:	e777      	b.n	8015340 <_dtoa_r+0x100>
 8015450:	2301      	movs	r3, #1
 8015452:	e7b8      	b.n	80153c6 <_dtoa_r+0x186>
 8015454:	9012      	str	r0, [sp, #72]	@ 0x48
 8015456:	e7b7      	b.n	80153c8 <_dtoa_r+0x188>
 8015458:	427b      	negs	r3, r7
 801545a:	930a      	str	r3, [sp, #40]	@ 0x28
 801545c:	2300      	movs	r3, #0
 801545e:	eba8 0807 	sub.w	r8, r8, r7
 8015462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015464:	e7c4      	b.n	80153f0 <_dtoa_r+0x1b0>
 8015466:	2300      	movs	r3, #0
 8015468:	930b      	str	r3, [sp, #44]	@ 0x2c
 801546a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801546c:	2b00      	cmp	r3, #0
 801546e:	dc35      	bgt.n	80154dc <_dtoa_r+0x29c>
 8015470:	2301      	movs	r3, #1
 8015472:	9300      	str	r3, [sp, #0]
 8015474:	9307      	str	r3, [sp, #28]
 8015476:	461a      	mov	r2, r3
 8015478:	920e      	str	r2, [sp, #56]	@ 0x38
 801547a:	e00b      	b.n	8015494 <_dtoa_r+0x254>
 801547c:	2301      	movs	r3, #1
 801547e:	e7f3      	b.n	8015468 <_dtoa_r+0x228>
 8015480:	2300      	movs	r3, #0
 8015482:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015486:	18fb      	adds	r3, r7, r3
 8015488:	9300      	str	r3, [sp, #0]
 801548a:	3301      	adds	r3, #1
 801548c:	2b01      	cmp	r3, #1
 801548e:	9307      	str	r3, [sp, #28]
 8015490:	bfb8      	it	lt
 8015492:	2301      	movlt	r3, #1
 8015494:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015498:	2100      	movs	r1, #0
 801549a:	2204      	movs	r2, #4
 801549c:	f102 0514 	add.w	r5, r2, #20
 80154a0:	429d      	cmp	r5, r3
 80154a2:	d91f      	bls.n	80154e4 <_dtoa_r+0x2a4>
 80154a4:	6041      	str	r1, [r0, #4]
 80154a6:	4658      	mov	r0, fp
 80154a8:	f000 fcd8 	bl	8015e5c <_Balloc>
 80154ac:	4682      	mov	sl, r0
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d13c      	bne.n	801552c <_dtoa_r+0x2ec>
 80154b2:	4b1b      	ldr	r3, [pc, #108]	@ (8015520 <_dtoa_r+0x2e0>)
 80154b4:	4602      	mov	r2, r0
 80154b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80154ba:	e6d8      	b.n	801526e <_dtoa_r+0x2e>
 80154bc:	2301      	movs	r3, #1
 80154be:	e7e0      	b.n	8015482 <_dtoa_r+0x242>
 80154c0:	2401      	movs	r4, #1
 80154c2:	2300      	movs	r3, #0
 80154c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80154c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80154c8:	f04f 33ff 	mov.w	r3, #4294967295
 80154cc:	9300      	str	r3, [sp, #0]
 80154ce:	9307      	str	r3, [sp, #28]
 80154d0:	2200      	movs	r2, #0
 80154d2:	2312      	movs	r3, #18
 80154d4:	e7d0      	b.n	8015478 <_dtoa_r+0x238>
 80154d6:	2301      	movs	r3, #1
 80154d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80154da:	e7f5      	b.n	80154c8 <_dtoa_r+0x288>
 80154dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	9307      	str	r3, [sp, #28]
 80154e2:	e7d7      	b.n	8015494 <_dtoa_r+0x254>
 80154e4:	3101      	adds	r1, #1
 80154e6:	0052      	lsls	r2, r2, #1
 80154e8:	e7d8      	b.n	801549c <_dtoa_r+0x25c>
 80154ea:	bf00      	nop
 80154ec:	f3af 8000 	nop.w
 80154f0:	636f4361 	.word	0x636f4361
 80154f4:	3fd287a7 	.word	0x3fd287a7
 80154f8:	8b60c8b3 	.word	0x8b60c8b3
 80154fc:	3fc68a28 	.word	0x3fc68a28
 8015500:	509f79fb 	.word	0x509f79fb
 8015504:	3fd34413 	.word	0x3fd34413
 8015508:	080182b1 	.word	0x080182b1
 801550c:	080182c8 	.word	0x080182c8
 8015510:	7ff00000 	.word	0x7ff00000
 8015514:	08018281 	.word	0x08018281
 8015518:	3ff80000 	.word	0x3ff80000
 801551c:	080183c0 	.word	0x080183c0
 8015520:	08018320 	.word	0x08018320
 8015524:	080182ad 	.word	0x080182ad
 8015528:	08018280 	.word	0x08018280
 801552c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015530:	6018      	str	r0, [r3, #0]
 8015532:	9b07      	ldr	r3, [sp, #28]
 8015534:	2b0e      	cmp	r3, #14
 8015536:	f200 80a4 	bhi.w	8015682 <_dtoa_r+0x442>
 801553a:	2c00      	cmp	r4, #0
 801553c:	f000 80a1 	beq.w	8015682 <_dtoa_r+0x442>
 8015540:	2f00      	cmp	r7, #0
 8015542:	dd33      	ble.n	80155ac <_dtoa_r+0x36c>
 8015544:	4bad      	ldr	r3, [pc, #692]	@ (80157fc <_dtoa_r+0x5bc>)
 8015546:	f007 020f 	and.w	r2, r7, #15
 801554a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801554e:	ed93 7b00 	vldr	d7, [r3]
 8015552:	05f8      	lsls	r0, r7, #23
 8015554:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015558:	ea4f 1427 	mov.w	r4, r7, asr #4
 801555c:	d516      	bpl.n	801558c <_dtoa_r+0x34c>
 801555e:	4ba8      	ldr	r3, [pc, #672]	@ (8015800 <_dtoa_r+0x5c0>)
 8015560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015568:	f7eb f9a0 	bl	80008ac <__aeabi_ddiv>
 801556c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015570:	f004 040f 	and.w	r4, r4, #15
 8015574:	2603      	movs	r6, #3
 8015576:	4da2      	ldr	r5, [pc, #648]	@ (8015800 <_dtoa_r+0x5c0>)
 8015578:	b954      	cbnz	r4, 8015590 <_dtoa_r+0x350>
 801557a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801557e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015582:	f7eb f993 	bl	80008ac <__aeabi_ddiv>
 8015586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801558a:	e028      	b.n	80155de <_dtoa_r+0x39e>
 801558c:	2602      	movs	r6, #2
 801558e:	e7f2      	b.n	8015576 <_dtoa_r+0x336>
 8015590:	07e1      	lsls	r1, r4, #31
 8015592:	d508      	bpl.n	80155a6 <_dtoa_r+0x366>
 8015594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015598:	e9d5 2300 	ldrd	r2, r3, [r5]
 801559c:	f7eb f85c 	bl	8000658 <__aeabi_dmul>
 80155a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80155a4:	3601      	adds	r6, #1
 80155a6:	1064      	asrs	r4, r4, #1
 80155a8:	3508      	adds	r5, #8
 80155aa:	e7e5      	b.n	8015578 <_dtoa_r+0x338>
 80155ac:	f000 80d2 	beq.w	8015754 <_dtoa_r+0x514>
 80155b0:	427c      	negs	r4, r7
 80155b2:	4b92      	ldr	r3, [pc, #584]	@ (80157fc <_dtoa_r+0x5bc>)
 80155b4:	4d92      	ldr	r5, [pc, #584]	@ (8015800 <_dtoa_r+0x5c0>)
 80155b6:	f004 020f 	and.w	r2, r4, #15
 80155ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80155c6:	f7eb f847 	bl	8000658 <__aeabi_dmul>
 80155ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155ce:	1124      	asrs	r4, r4, #4
 80155d0:	2300      	movs	r3, #0
 80155d2:	2602      	movs	r6, #2
 80155d4:	2c00      	cmp	r4, #0
 80155d6:	f040 80b2 	bne.w	801573e <_dtoa_r+0x4fe>
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d1d3      	bne.n	8015586 <_dtoa_r+0x346>
 80155de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80155e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	f000 80b7 	beq.w	8015758 <_dtoa_r+0x518>
 80155ea:	4b86      	ldr	r3, [pc, #536]	@ (8015804 <_dtoa_r+0x5c4>)
 80155ec:	2200      	movs	r2, #0
 80155ee:	4620      	mov	r0, r4
 80155f0:	4629      	mov	r1, r5
 80155f2:	f7eb faa3 	bl	8000b3c <__aeabi_dcmplt>
 80155f6:	2800      	cmp	r0, #0
 80155f8:	f000 80ae 	beq.w	8015758 <_dtoa_r+0x518>
 80155fc:	9b07      	ldr	r3, [sp, #28]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	f000 80aa 	beq.w	8015758 <_dtoa_r+0x518>
 8015604:	9b00      	ldr	r3, [sp, #0]
 8015606:	2b00      	cmp	r3, #0
 8015608:	dd37      	ble.n	801567a <_dtoa_r+0x43a>
 801560a:	1e7b      	subs	r3, r7, #1
 801560c:	9304      	str	r3, [sp, #16]
 801560e:	4620      	mov	r0, r4
 8015610:	4b7d      	ldr	r3, [pc, #500]	@ (8015808 <_dtoa_r+0x5c8>)
 8015612:	2200      	movs	r2, #0
 8015614:	4629      	mov	r1, r5
 8015616:	f7eb f81f 	bl	8000658 <__aeabi_dmul>
 801561a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801561e:	9c00      	ldr	r4, [sp, #0]
 8015620:	3601      	adds	r6, #1
 8015622:	4630      	mov	r0, r6
 8015624:	f7ea ffae 	bl	8000584 <__aeabi_i2d>
 8015628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801562c:	f7eb f814 	bl	8000658 <__aeabi_dmul>
 8015630:	4b76      	ldr	r3, [pc, #472]	@ (801580c <_dtoa_r+0x5cc>)
 8015632:	2200      	movs	r2, #0
 8015634:	f7ea fe5a 	bl	80002ec <__adddf3>
 8015638:	4605      	mov	r5, r0
 801563a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801563e:	2c00      	cmp	r4, #0
 8015640:	f040 808d 	bne.w	801575e <_dtoa_r+0x51e>
 8015644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015648:	4b71      	ldr	r3, [pc, #452]	@ (8015810 <_dtoa_r+0x5d0>)
 801564a:	2200      	movs	r2, #0
 801564c:	f7ea fe4c 	bl	80002e8 <__aeabi_dsub>
 8015650:	4602      	mov	r2, r0
 8015652:	460b      	mov	r3, r1
 8015654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015658:	462a      	mov	r2, r5
 801565a:	4633      	mov	r3, r6
 801565c:	f7eb fa8c 	bl	8000b78 <__aeabi_dcmpgt>
 8015660:	2800      	cmp	r0, #0
 8015662:	f040 828b 	bne.w	8015b7c <_dtoa_r+0x93c>
 8015666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801566a:	462a      	mov	r2, r5
 801566c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015670:	f7eb fa64 	bl	8000b3c <__aeabi_dcmplt>
 8015674:	2800      	cmp	r0, #0
 8015676:	f040 8128 	bne.w	80158ca <_dtoa_r+0x68a>
 801567a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801567e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015684:	2b00      	cmp	r3, #0
 8015686:	f2c0 815a 	blt.w	801593e <_dtoa_r+0x6fe>
 801568a:	2f0e      	cmp	r7, #14
 801568c:	f300 8157 	bgt.w	801593e <_dtoa_r+0x6fe>
 8015690:	4b5a      	ldr	r3, [pc, #360]	@ (80157fc <_dtoa_r+0x5bc>)
 8015692:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015696:	ed93 7b00 	vldr	d7, [r3]
 801569a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801569c:	2b00      	cmp	r3, #0
 801569e:	ed8d 7b00 	vstr	d7, [sp]
 80156a2:	da03      	bge.n	80156ac <_dtoa_r+0x46c>
 80156a4:	9b07      	ldr	r3, [sp, #28]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	f340 8101 	ble.w	80158ae <_dtoa_r+0x66e>
 80156ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80156b0:	4656      	mov	r6, sl
 80156b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156b6:	4620      	mov	r0, r4
 80156b8:	4629      	mov	r1, r5
 80156ba:	f7eb f8f7 	bl	80008ac <__aeabi_ddiv>
 80156be:	f7eb fa7b 	bl	8000bb8 <__aeabi_d2iz>
 80156c2:	4680      	mov	r8, r0
 80156c4:	f7ea ff5e 	bl	8000584 <__aeabi_i2d>
 80156c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156cc:	f7ea ffc4 	bl	8000658 <__aeabi_dmul>
 80156d0:	4602      	mov	r2, r0
 80156d2:	460b      	mov	r3, r1
 80156d4:	4620      	mov	r0, r4
 80156d6:	4629      	mov	r1, r5
 80156d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80156dc:	f7ea fe04 	bl	80002e8 <__aeabi_dsub>
 80156e0:	f806 4b01 	strb.w	r4, [r6], #1
 80156e4:	9d07      	ldr	r5, [sp, #28]
 80156e6:	eba6 040a 	sub.w	r4, r6, sl
 80156ea:	42a5      	cmp	r5, r4
 80156ec:	4602      	mov	r2, r0
 80156ee:	460b      	mov	r3, r1
 80156f0:	f040 8117 	bne.w	8015922 <_dtoa_r+0x6e2>
 80156f4:	f7ea fdfa 	bl	80002ec <__adddf3>
 80156f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156fc:	4604      	mov	r4, r0
 80156fe:	460d      	mov	r5, r1
 8015700:	f7eb fa3a 	bl	8000b78 <__aeabi_dcmpgt>
 8015704:	2800      	cmp	r0, #0
 8015706:	f040 80f9 	bne.w	80158fc <_dtoa_r+0x6bc>
 801570a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801570e:	4620      	mov	r0, r4
 8015710:	4629      	mov	r1, r5
 8015712:	f7eb fa09 	bl	8000b28 <__aeabi_dcmpeq>
 8015716:	b118      	cbz	r0, 8015720 <_dtoa_r+0x4e0>
 8015718:	f018 0f01 	tst.w	r8, #1
 801571c:	f040 80ee 	bne.w	80158fc <_dtoa_r+0x6bc>
 8015720:	4649      	mov	r1, r9
 8015722:	4658      	mov	r0, fp
 8015724:	f000 fbda 	bl	8015edc <_Bfree>
 8015728:	2300      	movs	r3, #0
 801572a:	7033      	strb	r3, [r6, #0]
 801572c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801572e:	3701      	adds	r7, #1
 8015730:	601f      	str	r7, [r3, #0]
 8015732:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015734:	2b00      	cmp	r3, #0
 8015736:	f000 831d 	beq.w	8015d74 <_dtoa_r+0xb34>
 801573a:	601e      	str	r6, [r3, #0]
 801573c:	e31a      	b.n	8015d74 <_dtoa_r+0xb34>
 801573e:	07e2      	lsls	r2, r4, #31
 8015740:	d505      	bpl.n	801574e <_dtoa_r+0x50e>
 8015742:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015746:	f7ea ff87 	bl	8000658 <__aeabi_dmul>
 801574a:	3601      	adds	r6, #1
 801574c:	2301      	movs	r3, #1
 801574e:	1064      	asrs	r4, r4, #1
 8015750:	3508      	adds	r5, #8
 8015752:	e73f      	b.n	80155d4 <_dtoa_r+0x394>
 8015754:	2602      	movs	r6, #2
 8015756:	e742      	b.n	80155de <_dtoa_r+0x39e>
 8015758:	9c07      	ldr	r4, [sp, #28]
 801575a:	9704      	str	r7, [sp, #16]
 801575c:	e761      	b.n	8015622 <_dtoa_r+0x3e2>
 801575e:	4b27      	ldr	r3, [pc, #156]	@ (80157fc <_dtoa_r+0x5bc>)
 8015760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015766:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801576a:	4454      	add	r4, sl
 801576c:	2900      	cmp	r1, #0
 801576e:	d053      	beq.n	8015818 <_dtoa_r+0x5d8>
 8015770:	4928      	ldr	r1, [pc, #160]	@ (8015814 <_dtoa_r+0x5d4>)
 8015772:	2000      	movs	r0, #0
 8015774:	f7eb f89a 	bl	80008ac <__aeabi_ddiv>
 8015778:	4633      	mov	r3, r6
 801577a:	462a      	mov	r2, r5
 801577c:	f7ea fdb4 	bl	80002e8 <__aeabi_dsub>
 8015780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015784:	4656      	mov	r6, sl
 8015786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801578a:	f7eb fa15 	bl	8000bb8 <__aeabi_d2iz>
 801578e:	4605      	mov	r5, r0
 8015790:	f7ea fef8 	bl	8000584 <__aeabi_i2d>
 8015794:	4602      	mov	r2, r0
 8015796:	460b      	mov	r3, r1
 8015798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801579c:	f7ea fda4 	bl	80002e8 <__aeabi_dsub>
 80157a0:	3530      	adds	r5, #48	@ 0x30
 80157a2:	4602      	mov	r2, r0
 80157a4:	460b      	mov	r3, r1
 80157a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80157aa:	f806 5b01 	strb.w	r5, [r6], #1
 80157ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80157b2:	f7eb f9c3 	bl	8000b3c <__aeabi_dcmplt>
 80157b6:	2800      	cmp	r0, #0
 80157b8:	d171      	bne.n	801589e <_dtoa_r+0x65e>
 80157ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157be:	4911      	ldr	r1, [pc, #68]	@ (8015804 <_dtoa_r+0x5c4>)
 80157c0:	2000      	movs	r0, #0
 80157c2:	f7ea fd91 	bl	80002e8 <__aeabi_dsub>
 80157c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80157ca:	f7eb f9b7 	bl	8000b3c <__aeabi_dcmplt>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	f040 8095 	bne.w	80158fe <_dtoa_r+0x6be>
 80157d4:	42a6      	cmp	r6, r4
 80157d6:	f43f af50 	beq.w	801567a <_dtoa_r+0x43a>
 80157da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80157de:	4b0a      	ldr	r3, [pc, #40]	@ (8015808 <_dtoa_r+0x5c8>)
 80157e0:	2200      	movs	r2, #0
 80157e2:	f7ea ff39 	bl	8000658 <__aeabi_dmul>
 80157e6:	4b08      	ldr	r3, [pc, #32]	@ (8015808 <_dtoa_r+0x5c8>)
 80157e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80157ec:	2200      	movs	r2, #0
 80157ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80157f2:	f7ea ff31 	bl	8000658 <__aeabi_dmul>
 80157f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157fa:	e7c4      	b.n	8015786 <_dtoa_r+0x546>
 80157fc:	080183c0 	.word	0x080183c0
 8015800:	08018398 	.word	0x08018398
 8015804:	3ff00000 	.word	0x3ff00000
 8015808:	40240000 	.word	0x40240000
 801580c:	401c0000 	.word	0x401c0000
 8015810:	40140000 	.word	0x40140000
 8015814:	3fe00000 	.word	0x3fe00000
 8015818:	4631      	mov	r1, r6
 801581a:	4628      	mov	r0, r5
 801581c:	f7ea ff1c 	bl	8000658 <__aeabi_dmul>
 8015820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015824:	9415      	str	r4, [sp, #84]	@ 0x54
 8015826:	4656      	mov	r6, sl
 8015828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801582c:	f7eb f9c4 	bl	8000bb8 <__aeabi_d2iz>
 8015830:	4605      	mov	r5, r0
 8015832:	f7ea fea7 	bl	8000584 <__aeabi_i2d>
 8015836:	4602      	mov	r2, r0
 8015838:	460b      	mov	r3, r1
 801583a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801583e:	f7ea fd53 	bl	80002e8 <__aeabi_dsub>
 8015842:	3530      	adds	r5, #48	@ 0x30
 8015844:	f806 5b01 	strb.w	r5, [r6], #1
 8015848:	4602      	mov	r2, r0
 801584a:	460b      	mov	r3, r1
 801584c:	42a6      	cmp	r6, r4
 801584e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015852:	f04f 0200 	mov.w	r2, #0
 8015856:	d124      	bne.n	80158a2 <_dtoa_r+0x662>
 8015858:	4bac      	ldr	r3, [pc, #688]	@ (8015b0c <_dtoa_r+0x8cc>)
 801585a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801585e:	f7ea fd45 	bl	80002ec <__adddf3>
 8015862:	4602      	mov	r2, r0
 8015864:	460b      	mov	r3, r1
 8015866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801586a:	f7eb f985 	bl	8000b78 <__aeabi_dcmpgt>
 801586e:	2800      	cmp	r0, #0
 8015870:	d145      	bne.n	80158fe <_dtoa_r+0x6be>
 8015872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015876:	49a5      	ldr	r1, [pc, #660]	@ (8015b0c <_dtoa_r+0x8cc>)
 8015878:	2000      	movs	r0, #0
 801587a:	f7ea fd35 	bl	80002e8 <__aeabi_dsub>
 801587e:	4602      	mov	r2, r0
 8015880:	460b      	mov	r3, r1
 8015882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015886:	f7eb f959 	bl	8000b3c <__aeabi_dcmplt>
 801588a:	2800      	cmp	r0, #0
 801588c:	f43f aef5 	beq.w	801567a <_dtoa_r+0x43a>
 8015890:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015892:	1e73      	subs	r3, r6, #1
 8015894:	9315      	str	r3, [sp, #84]	@ 0x54
 8015896:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801589a:	2b30      	cmp	r3, #48	@ 0x30
 801589c:	d0f8      	beq.n	8015890 <_dtoa_r+0x650>
 801589e:	9f04      	ldr	r7, [sp, #16]
 80158a0:	e73e      	b.n	8015720 <_dtoa_r+0x4e0>
 80158a2:	4b9b      	ldr	r3, [pc, #620]	@ (8015b10 <_dtoa_r+0x8d0>)
 80158a4:	f7ea fed8 	bl	8000658 <__aeabi_dmul>
 80158a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158ac:	e7bc      	b.n	8015828 <_dtoa_r+0x5e8>
 80158ae:	d10c      	bne.n	80158ca <_dtoa_r+0x68a>
 80158b0:	4b98      	ldr	r3, [pc, #608]	@ (8015b14 <_dtoa_r+0x8d4>)
 80158b2:	2200      	movs	r2, #0
 80158b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158b8:	f7ea fece 	bl	8000658 <__aeabi_dmul>
 80158bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80158c0:	f7eb f950 	bl	8000b64 <__aeabi_dcmpge>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	f000 8157 	beq.w	8015b78 <_dtoa_r+0x938>
 80158ca:	2400      	movs	r4, #0
 80158cc:	4625      	mov	r5, r4
 80158ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158d0:	43db      	mvns	r3, r3
 80158d2:	9304      	str	r3, [sp, #16]
 80158d4:	4656      	mov	r6, sl
 80158d6:	2700      	movs	r7, #0
 80158d8:	4621      	mov	r1, r4
 80158da:	4658      	mov	r0, fp
 80158dc:	f000 fafe 	bl	8015edc <_Bfree>
 80158e0:	2d00      	cmp	r5, #0
 80158e2:	d0dc      	beq.n	801589e <_dtoa_r+0x65e>
 80158e4:	b12f      	cbz	r7, 80158f2 <_dtoa_r+0x6b2>
 80158e6:	42af      	cmp	r7, r5
 80158e8:	d003      	beq.n	80158f2 <_dtoa_r+0x6b2>
 80158ea:	4639      	mov	r1, r7
 80158ec:	4658      	mov	r0, fp
 80158ee:	f000 faf5 	bl	8015edc <_Bfree>
 80158f2:	4629      	mov	r1, r5
 80158f4:	4658      	mov	r0, fp
 80158f6:	f000 faf1 	bl	8015edc <_Bfree>
 80158fa:	e7d0      	b.n	801589e <_dtoa_r+0x65e>
 80158fc:	9704      	str	r7, [sp, #16]
 80158fe:	4633      	mov	r3, r6
 8015900:	461e      	mov	r6, r3
 8015902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015906:	2a39      	cmp	r2, #57	@ 0x39
 8015908:	d107      	bne.n	801591a <_dtoa_r+0x6da>
 801590a:	459a      	cmp	sl, r3
 801590c:	d1f8      	bne.n	8015900 <_dtoa_r+0x6c0>
 801590e:	9a04      	ldr	r2, [sp, #16]
 8015910:	3201      	adds	r2, #1
 8015912:	9204      	str	r2, [sp, #16]
 8015914:	2230      	movs	r2, #48	@ 0x30
 8015916:	f88a 2000 	strb.w	r2, [sl]
 801591a:	781a      	ldrb	r2, [r3, #0]
 801591c:	3201      	adds	r2, #1
 801591e:	701a      	strb	r2, [r3, #0]
 8015920:	e7bd      	b.n	801589e <_dtoa_r+0x65e>
 8015922:	4b7b      	ldr	r3, [pc, #492]	@ (8015b10 <_dtoa_r+0x8d0>)
 8015924:	2200      	movs	r2, #0
 8015926:	f7ea fe97 	bl	8000658 <__aeabi_dmul>
 801592a:	2200      	movs	r2, #0
 801592c:	2300      	movs	r3, #0
 801592e:	4604      	mov	r4, r0
 8015930:	460d      	mov	r5, r1
 8015932:	f7eb f8f9 	bl	8000b28 <__aeabi_dcmpeq>
 8015936:	2800      	cmp	r0, #0
 8015938:	f43f aebb 	beq.w	80156b2 <_dtoa_r+0x472>
 801593c:	e6f0      	b.n	8015720 <_dtoa_r+0x4e0>
 801593e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015940:	2a00      	cmp	r2, #0
 8015942:	f000 80db 	beq.w	8015afc <_dtoa_r+0x8bc>
 8015946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015948:	2a01      	cmp	r2, #1
 801594a:	f300 80bf 	bgt.w	8015acc <_dtoa_r+0x88c>
 801594e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015950:	2a00      	cmp	r2, #0
 8015952:	f000 80b7 	beq.w	8015ac4 <_dtoa_r+0x884>
 8015956:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801595a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801595c:	4646      	mov	r6, r8
 801595e:	9a08      	ldr	r2, [sp, #32]
 8015960:	2101      	movs	r1, #1
 8015962:	441a      	add	r2, r3
 8015964:	4658      	mov	r0, fp
 8015966:	4498      	add	r8, r3
 8015968:	9208      	str	r2, [sp, #32]
 801596a:	f000 fb6b 	bl	8016044 <__i2b>
 801596e:	4605      	mov	r5, r0
 8015970:	b15e      	cbz	r6, 801598a <_dtoa_r+0x74a>
 8015972:	9b08      	ldr	r3, [sp, #32]
 8015974:	2b00      	cmp	r3, #0
 8015976:	dd08      	ble.n	801598a <_dtoa_r+0x74a>
 8015978:	42b3      	cmp	r3, r6
 801597a:	9a08      	ldr	r2, [sp, #32]
 801597c:	bfa8      	it	ge
 801597e:	4633      	movge	r3, r6
 8015980:	eba8 0803 	sub.w	r8, r8, r3
 8015984:	1af6      	subs	r6, r6, r3
 8015986:	1ad3      	subs	r3, r2, r3
 8015988:	9308      	str	r3, [sp, #32]
 801598a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801598c:	b1f3      	cbz	r3, 80159cc <_dtoa_r+0x78c>
 801598e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015990:	2b00      	cmp	r3, #0
 8015992:	f000 80b7 	beq.w	8015b04 <_dtoa_r+0x8c4>
 8015996:	b18c      	cbz	r4, 80159bc <_dtoa_r+0x77c>
 8015998:	4629      	mov	r1, r5
 801599a:	4622      	mov	r2, r4
 801599c:	4658      	mov	r0, fp
 801599e:	f000 fc11 	bl	80161c4 <__pow5mult>
 80159a2:	464a      	mov	r2, r9
 80159a4:	4601      	mov	r1, r0
 80159a6:	4605      	mov	r5, r0
 80159a8:	4658      	mov	r0, fp
 80159aa:	f000 fb61 	bl	8016070 <__multiply>
 80159ae:	4649      	mov	r1, r9
 80159b0:	9004      	str	r0, [sp, #16]
 80159b2:	4658      	mov	r0, fp
 80159b4:	f000 fa92 	bl	8015edc <_Bfree>
 80159b8:	9b04      	ldr	r3, [sp, #16]
 80159ba:	4699      	mov	r9, r3
 80159bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80159be:	1b1a      	subs	r2, r3, r4
 80159c0:	d004      	beq.n	80159cc <_dtoa_r+0x78c>
 80159c2:	4649      	mov	r1, r9
 80159c4:	4658      	mov	r0, fp
 80159c6:	f000 fbfd 	bl	80161c4 <__pow5mult>
 80159ca:	4681      	mov	r9, r0
 80159cc:	2101      	movs	r1, #1
 80159ce:	4658      	mov	r0, fp
 80159d0:	f000 fb38 	bl	8016044 <__i2b>
 80159d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80159d6:	4604      	mov	r4, r0
 80159d8:	2b00      	cmp	r3, #0
 80159da:	f000 81cf 	beq.w	8015d7c <_dtoa_r+0xb3c>
 80159de:	461a      	mov	r2, r3
 80159e0:	4601      	mov	r1, r0
 80159e2:	4658      	mov	r0, fp
 80159e4:	f000 fbee 	bl	80161c4 <__pow5mult>
 80159e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159ea:	2b01      	cmp	r3, #1
 80159ec:	4604      	mov	r4, r0
 80159ee:	f300 8095 	bgt.w	8015b1c <_dtoa_r+0x8dc>
 80159f2:	9b02      	ldr	r3, [sp, #8]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	f040 8087 	bne.w	8015b08 <_dtoa_r+0x8c8>
 80159fa:	9b03      	ldr	r3, [sp, #12]
 80159fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f040 8089 	bne.w	8015b18 <_dtoa_r+0x8d8>
 8015a06:	9b03      	ldr	r3, [sp, #12]
 8015a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015a0c:	0d1b      	lsrs	r3, r3, #20
 8015a0e:	051b      	lsls	r3, r3, #20
 8015a10:	b12b      	cbz	r3, 8015a1e <_dtoa_r+0x7de>
 8015a12:	9b08      	ldr	r3, [sp, #32]
 8015a14:	3301      	adds	r3, #1
 8015a16:	9308      	str	r3, [sp, #32]
 8015a18:	f108 0801 	add.w	r8, r8, #1
 8015a1c:	2301      	movs	r3, #1
 8015a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	f000 81b0 	beq.w	8015d88 <_dtoa_r+0xb48>
 8015a28:	6923      	ldr	r3, [r4, #16]
 8015a2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015a2e:	6918      	ldr	r0, [r3, #16]
 8015a30:	f000 fabc 	bl	8015fac <__hi0bits>
 8015a34:	f1c0 0020 	rsb	r0, r0, #32
 8015a38:	9b08      	ldr	r3, [sp, #32]
 8015a3a:	4418      	add	r0, r3
 8015a3c:	f010 001f 	ands.w	r0, r0, #31
 8015a40:	d077      	beq.n	8015b32 <_dtoa_r+0x8f2>
 8015a42:	f1c0 0320 	rsb	r3, r0, #32
 8015a46:	2b04      	cmp	r3, #4
 8015a48:	dd6b      	ble.n	8015b22 <_dtoa_r+0x8e2>
 8015a4a:	9b08      	ldr	r3, [sp, #32]
 8015a4c:	f1c0 001c 	rsb	r0, r0, #28
 8015a50:	4403      	add	r3, r0
 8015a52:	4480      	add	r8, r0
 8015a54:	4406      	add	r6, r0
 8015a56:	9308      	str	r3, [sp, #32]
 8015a58:	f1b8 0f00 	cmp.w	r8, #0
 8015a5c:	dd05      	ble.n	8015a6a <_dtoa_r+0x82a>
 8015a5e:	4649      	mov	r1, r9
 8015a60:	4642      	mov	r2, r8
 8015a62:	4658      	mov	r0, fp
 8015a64:	f000 fc08 	bl	8016278 <__lshift>
 8015a68:	4681      	mov	r9, r0
 8015a6a:	9b08      	ldr	r3, [sp, #32]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	dd05      	ble.n	8015a7c <_dtoa_r+0x83c>
 8015a70:	4621      	mov	r1, r4
 8015a72:	461a      	mov	r2, r3
 8015a74:	4658      	mov	r0, fp
 8015a76:	f000 fbff 	bl	8016278 <__lshift>
 8015a7a:	4604      	mov	r4, r0
 8015a7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d059      	beq.n	8015b36 <_dtoa_r+0x8f6>
 8015a82:	4621      	mov	r1, r4
 8015a84:	4648      	mov	r0, r9
 8015a86:	f000 fc63 	bl	8016350 <__mcmp>
 8015a8a:	2800      	cmp	r0, #0
 8015a8c:	da53      	bge.n	8015b36 <_dtoa_r+0x8f6>
 8015a8e:	1e7b      	subs	r3, r7, #1
 8015a90:	9304      	str	r3, [sp, #16]
 8015a92:	4649      	mov	r1, r9
 8015a94:	2300      	movs	r3, #0
 8015a96:	220a      	movs	r2, #10
 8015a98:	4658      	mov	r0, fp
 8015a9a:	f000 fa41 	bl	8015f20 <__multadd>
 8015a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015aa0:	4681      	mov	r9, r0
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	f000 8172 	beq.w	8015d8c <_dtoa_r+0xb4c>
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	4629      	mov	r1, r5
 8015aac:	220a      	movs	r2, #10
 8015aae:	4658      	mov	r0, fp
 8015ab0:	f000 fa36 	bl	8015f20 <__multadd>
 8015ab4:	9b00      	ldr	r3, [sp, #0]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	4605      	mov	r5, r0
 8015aba:	dc67      	bgt.n	8015b8c <_dtoa_r+0x94c>
 8015abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015abe:	2b02      	cmp	r3, #2
 8015ac0:	dc41      	bgt.n	8015b46 <_dtoa_r+0x906>
 8015ac2:	e063      	b.n	8015b8c <_dtoa_r+0x94c>
 8015ac4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015ac6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015aca:	e746      	b.n	801595a <_dtoa_r+0x71a>
 8015acc:	9b07      	ldr	r3, [sp, #28]
 8015ace:	1e5c      	subs	r4, r3, #1
 8015ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ad2:	42a3      	cmp	r3, r4
 8015ad4:	bfbf      	itttt	lt
 8015ad6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015ad8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015ada:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015adc:	1ae3      	sublt	r3, r4, r3
 8015ade:	bfb4      	ite	lt
 8015ae0:	18d2      	addlt	r2, r2, r3
 8015ae2:	1b1c      	subge	r4, r3, r4
 8015ae4:	9b07      	ldr	r3, [sp, #28]
 8015ae6:	bfbc      	itt	lt
 8015ae8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015aea:	2400      	movlt	r4, #0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	bfb5      	itete	lt
 8015af0:	eba8 0603 	sublt.w	r6, r8, r3
 8015af4:	9b07      	ldrge	r3, [sp, #28]
 8015af6:	2300      	movlt	r3, #0
 8015af8:	4646      	movge	r6, r8
 8015afa:	e730      	b.n	801595e <_dtoa_r+0x71e>
 8015afc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015afe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015b00:	4646      	mov	r6, r8
 8015b02:	e735      	b.n	8015970 <_dtoa_r+0x730>
 8015b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015b06:	e75c      	b.n	80159c2 <_dtoa_r+0x782>
 8015b08:	2300      	movs	r3, #0
 8015b0a:	e788      	b.n	8015a1e <_dtoa_r+0x7de>
 8015b0c:	3fe00000 	.word	0x3fe00000
 8015b10:	40240000 	.word	0x40240000
 8015b14:	40140000 	.word	0x40140000
 8015b18:	9b02      	ldr	r3, [sp, #8]
 8015b1a:	e780      	b.n	8015a1e <_dtoa_r+0x7de>
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b20:	e782      	b.n	8015a28 <_dtoa_r+0x7e8>
 8015b22:	d099      	beq.n	8015a58 <_dtoa_r+0x818>
 8015b24:	9a08      	ldr	r2, [sp, #32]
 8015b26:	331c      	adds	r3, #28
 8015b28:	441a      	add	r2, r3
 8015b2a:	4498      	add	r8, r3
 8015b2c:	441e      	add	r6, r3
 8015b2e:	9208      	str	r2, [sp, #32]
 8015b30:	e792      	b.n	8015a58 <_dtoa_r+0x818>
 8015b32:	4603      	mov	r3, r0
 8015b34:	e7f6      	b.n	8015b24 <_dtoa_r+0x8e4>
 8015b36:	9b07      	ldr	r3, [sp, #28]
 8015b38:	9704      	str	r7, [sp, #16]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	dc20      	bgt.n	8015b80 <_dtoa_r+0x940>
 8015b3e:	9300      	str	r3, [sp, #0]
 8015b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b42:	2b02      	cmp	r3, #2
 8015b44:	dd1e      	ble.n	8015b84 <_dtoa_r+0x944>
 8015b46:	9b00      	ldr	r3, [sp, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	f47f aec0 	bne.w	80158ce <_dtoa_r+0x68e>
 8015b4e:	4621      	mov	r1, r4
 8015b50:	2205      	movs	r2, #5
 8015b52:	4658      	mov	r0, fp
 8015b54:	f000 f9e4 	bl	8015f20 <__multadd>
 8015b58:	4601      	mov	r1, r0
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	4648      	mov	r0, r9
 8015b5e:	f000 fbf7 	bl	8016350 <__mcmp>
 8015b62:	2800      	cmp	r0, #0
 8015b64:	f77f aeb3 	ble.w	80158ce <_dtoa_r+0x68e>
 8015b68:	4656      	mov	r6, sl
 8015b6a:	2331      	movs	r3, #49	@ 0x31
 8015b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8015b70:	9b04      	ldr	r3, [sp, #16]
 8015b72:	3301      	adds	r3, #1
 8015b74:	9304      	str	r3, [sp, #16]
 8015b76:	e6ae      	b.n	80158d6 <_dtoa_r+0x696>
 8015b78:	9c07      	ldr	r4, [sp, #28]
 8015b7a:	9704      	str	r7, [sp, #16]
 8015b7c:	4625      	mov	r5, r4
 8015b7e:	e7f3      	b.n	8015b68 <_dtoa_r+0x928>
 8015b80:	9b07      	ldr	r3, [sp, #28]
 8015b82:	9300      	str	r3, [sp, #0]
 8015b84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f000 8104 	beq.w	8015d94 <_dtoa_r+0xb54>
 8015b8c:	2e00      	cmp	r6, #0
 8015b8e:	dd05      	ble.n	8015b9c <_dtoa_r+0x95c>
 8015b90:	4629      	mov	r1, r5
 8015b92:	4632      	mov	r2, r6
 8015b94:	4658      	mov	r0, fp
 8015b96:	f000 fb6f 	bl	8016278 <__lshift>
 8015b9a:	4605      	mov	r5, r0
 8015b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d05a      	beq.n	8015c58 <_dtoa_r+0xa18>
 8015ba2:	6869      	ldr	r1, [r5, #4]
 8015ba4:	4658      	mov	r0, fp
 8015ba6:	f000 f959 	bl	8015e5c <_Balloc>
 8015baa:	4606      	mov	r6, r0
 8015bac:	b928      	cbnz	r0, 8015bba <_dtoa_r+0x97a>
 8015bae:	4b84      	ldr	r3, [pc, #528]	@ (8015dc0 <_dtoa_r+0xb80>)
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015bb6:	f7ff bb5a 	b.w	801526e <_dtoa_r+0x2e>
 8015bba:	692a      	ldr	r2, [r5, #16]
 8015bbc:	3202      	adds	r2, #2
 8015bbe:	0092      	lsls	r2, r2, #2
 8015bc0:	f105 010c 	add.w	r1, r5, #12
 8015bc4:	300c      	adds	r0, #12
 8015bc6:	f7ff faa4 	bl	8015112 <memcpy>
 8015bca:	2201      	movs	r2, #1
 8015bcc:	4631      	mov	r1, r6
 8015bce:	4658      	mov	r0, fp
 8015bd0:	f000 fb52 	bl	8016278 <__lshift>
 8015bd4:	f10a 0301 	add.w	r3, sl, #1
 8015bd8:	9307      	str	r3, [sp, #28]
 8015bda:	9b00      	ldr	r3, [sp, #0]
 8015bdc:	4453      	add	r3, sl
 8015bde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015be0:	9b02      	ldr	r3, [sp, #8]
 8015be2:	f003 0301 	and.w	r3, r3, #1
 8015be6:	462f      	mov	r7, r5
 8015be8:	930a      	str	r3, [sp, #40]	@ 0x28
 8015bea:	4605      	mov	r5, r0
 8015bec:	9b07      	ldr	r3, [sp, #28]
 8015bee:	4621      	mov	r1, r4
 8015bf0:	3b01      	subs	r3, #1
 8015bf2:	4648      	mov	r0, r9
 8015bf4:	9300      	str	r3, [sp, #0]
 8015bf6:	f7ff fa9a 	bl	801512e <quorem>
 8015bfa:	4639      	mov	r1, r7
 8015bfc:	9002      	str	r0, [sp, #8]
 8015bfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015c02:	4648      	mov	r0, r9
 8015c04:	f000 fba4 	bl	8016350 <__mcmp>
 8015c08:	462a      	mov	r2, r5
 8015c0a:	9008      	str	r0, [sp, #32]
 8015c0c:	4621      	mov	r1, r4
 8015c0e:	4658      	mov	r0, fp
 8015c10:	f000 fbba 	bl	8016388 <__mdiff>
 8015c14:	68c2      	ldr	r2, [r0, #12]
 8015c16:	4606      	mov	r6, r0
 8015c18:	bb02      	cbnz	r2, 8015c5c <_dtoa_r+0xa1c>
 8015c1a:	4601      	mov	r1, r0
 8015c1c:	4648      	mov	r0, r9
 8015c1e:	f000 fb97 	bl	8016350 <__mcmp>
 8015c22:	4602      	mov	r2, r0
 8015c24:	4631      	mov	r1, r6
 8015c26:	4658      	mov	r0, fp
 8015c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8015c2a:	f000 f957 	bl	8015edc <_Bfree>
 8015c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c32:	9e07      	ldr	r6, [sp, #28]
 8015c34:	ea43 0102 	orr.w	r1, r3, r2
 8015c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c3a:	4319      	orrs	r1, r3
 8015c3c:	d110      	bne.n	8015c60 <_dtoa_r+0xa20>
 8015c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015c42:	d029      	beq.n	8015c98 <_dtoa_r+0xa58>
 8015c44:	9b08      	ldr	r3, [sp, #32]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	dd02      	ble.n	8015c50 <_dtoa_r+0xa10>
 8015c4a:	9b02      	ldr	r3, [sp, #8]
 8015c4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015c50:	9b00      	ldr	r3, [sp, #0]
 8015c52:	f883 8000 	strb.w	r8, [r3]
 8015c56:	e63f      	b.n	80158d8 <_dtoa_r+0x698>
 8015c58:	4628      	mov	r0, r5
 8015c5a:	e7bb      	b.n	8015bd4 <_dtoa_r+0x994>
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	e7e1      	b.n	8015c24 <_dtoa_r+0x9e4>
 8015c60:	9b08      	ldr	r3, [sp, #32]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	db04      	blt.n	8015c70 <_dtoa_r+0xa30>
 8015c66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015c68:	430b      	orrs	r3, r1
 8015c6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015c6c:	430b      	orrs	r3, r1
 8015c6e:	d120      	bne.n	8015cb2 <_dtoa_r+0xa72>
 8015c70:	2a00      	cmp	r2, #0
 8015c72:	dded      	ble.n	8015c50 <_dtoa_r+0xa10>
 8015c74:	4649      	mov	r1, r9
 8015c76:	2201      	movs	r2, #1
 8015c78:	4658      	mov	r0, fp
 8015c7a:	f000 fafd 	bl	8016278 <__lshift>
 8015c7e:	4621      	mov	r1, r4
 8015c80:	4681      	mov	r9, r0
 8015c82:	f000 fb65 	bl	8016350 <__mcmp>
 8015c86:	2800      	cmp	r0, #0
 8015c88:	dc03      	bgt.n	8015c92 <_dtoa_r+0xa52>
 8015c8a:	d1e1      	bne.n	8015c50 <_dtoa_r+0xa10>
 8015c8c:	f018 0f01 	tst.w	r8, #1
 8015c90:	d0de      	beq.n	8015c50 <_dtoa_r+0xa10>
 8015c92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015c96:	d1d8      	bne.n	8015c4a <_dtoa_r+0xa0a>
 8015c98:	9a00      	ldr	r2, [sp, #0]
 8015c9a:	2339      	movs	r3, #57	@ 0x39
 8015c9c:	7013      	strb	r3, [r2, #0]
 8015c9e:	4633      	mov	r3, r6
 8015ca0:	461e      	mov	r6, r3
 8015ca2:	3b01      	subs	r3, #1
 8015ca4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015ca8:	2a39      	cmp	r2, #57	@ 0x39
 8015caa:	d052      	beq.n	8015d52 <_dtoa_r+0xb12>
 8015cac:	3201      	adds	r2, #1
 8015cae:	701a      	strb	r2, [r3, #0]
 8015cb0:	e612      	b.n	80158d8 <_dtoa_r+0x698>
 8015cb2:	2a00      	cmp	r2, #0
 8015cb4:	dd07      	ble.n	8015cc6 <_dtoa_r+0xa86>
 8015cb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015cba:	d0ed      	beq.n	8015c98 <_dtoa_r+0xa58>
 8015cbc:	9a00      	ldr	r2, [sp, #0]
 8015cbe:	f108 0301 	add.w	r3, r8, #1
 8015cc2:	7013      	strb	r3, [r2, #0]
 8015cc4:	e608      	b.n	80158d8 <_dtoa_r+0x698>
 8015cc6:	9b07      	ldr	r3, [sp, #28]
 8015cc8:	9a07      	ldr	r2, [sp, #28]
 8015cca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015cd0:	4293      	cmp	r3, r2
 8015cd2:	d028      	beq.n	8015d26 <_dtoa_r+0xae6>
 8015cd4:	4649      	mov	r1, r9
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	220a      	movs	r2, #10
 8015cda:	4658      	mov	r0, fp
 8015cdc:	f000 f920 	bl	8015f20 <__multadd>
 8015ce0:	42af      	cmp	r7, r5
 8015ce2:	4681      	mov	r9, r0
 8015ce4:	f04f 0300 	mov.w	r3, #0
 8015ce8:	f04f 020a 	mov.w	r2, #10
 8015cec:	4639      	mov	r1, r7
 8015cee:	4658      	mov	r0, fp
 8015cf0:	d107      	bne.n	8015d02 <_dtoa_r+0xac2>
 8015cf2:	f000 f915 	bl	8015f20 <__multadd>
 8015cf6:	4607      	mov	r7, r0
 8015cf8:	4605      	mov	r5, r0
 8015cfa:	9b07      	ldr	r3, [sp, #28]
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	9307      	str	r3, [sp, #28]
 8015d00:	e774      	b.n	8015bec <_dtoa_r+0x9ac>
 8015d02:	f000 f90d 	bl	8015f20 <__multadd>
 8015d06:	4629      	mov	r1, r5
 8015d08:	4607      	mov	r7, r0
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	220a      	movs	r2, #10
 8015d0e:	4658      	mov	r0, fp
 8015d10:	f000 f906 	bl	8015f20 <__multadd>
 8015d14:	4605      	mov	r5, r0
 8015d16:	e7f0      	b.n	8015cfa <_dtoa_r+0xaba>
 8015d18:	9b00      	ldr	r3, [sp, #0]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	bfcc      	ite	gt
 8015d1e:	461e      	movgt	r6, r3
 8015d20:	2601      	movle	r6, #1
 8015d22:	4456      	add	r6, sl
 8015d24:	2700      	movs	r7, #0
 8015d26:	4649      	mov	r1, r9
 8015d28:	2201      	movs	r2, #1
 8015d2a:	4658      	mov	r0, fp
 8015d2c:	f000 faa4 	bl	8016278 <__lshift>
 8015d30:	4621      	mov	r1, r4
 8015d32:	4681      	mov	r9, r0
 8015d34:	f000 fb0c 	bl	8016350 <__mcmp>
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	dcb0      	bgt.n	8015c9e <_dtoa_r+0xa5e>
 8015d3c:	d102      	bne.n	8015d44 <_dtoa_r+0xb04>
 8015d3e:	f018 0f01 	tst.w	r8, #1
 8015d42:	d1ac      	bne.n	8015c9e <_dtoa_r+0xa5e>
 8015d44:	4633      	mov	r3, r6
 8015d46:	461e      	mov	r6, r3
 8015d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d4c:	2a30      	cmp	r2, #48	@ 0x30
 8015d4e:	d0fa      	beq.n	8015d46 <_dtoa_r+0xb06>
 8015d50:	e5c2      	b.n	80158d8 <_dtoa_r+0x698>
 8015d52:	459a      	cmp	sl, r3
 8015d54:	d1a4      	bne.n	8015ca0 <_dtoa_r+0xa60>
 8015d56:	9b04      	ldr	r3, [sp, #16]
 8015d58:	3301      	adds	r3, #1
 8015d5a:	9304      	str	r3, [sp, #16]
 8015d5c:	2331      	movs	r3, #49	@ 0x31
 8015d5e:	f88a 3000 	strb.w	r3, [sl]
 8015d62:	e5b9      	b.n	80158d8 <_dtoa_r+0x698>
 8015d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015d66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8015dc4 <_dtoa_r+0xb84>
 8015d6a:	b11b      	cbz	r3, 8015d74 <_dtoa_r+0xb34>
 8015d6c:	f10a 0308 	add.w	r3, sl, #8
 8015d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015d72:	6013      	str	r3, [r2, #0]
 8015d74:	4650      	mov	r0, sl
 8015d76:	b019      	add	sp, #100	@ 0x64
 8015d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d7e:	2b01      	cmp	r3, #1
 8015d80:	f77f ae37 	ble.w	80159f2 <_dtoa_r+0x7b2>
 8015d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8015d88:	2001      	movs	r0, #1
 8015d8a:	e655      	b.n	8015a38 <_dtoa_r+0x7f8>
 8015d8c:	9b00      	ldr	r3, [sp, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	f77f aed6 	ble.w	8015b40 <_dtoa_r+0x900>
 8015d94:	4656      	mov	r6, sl
 8015d96:	4621      	mov	r1, r4
 8015d98:	4648      	mov	r0, r9
 8015d9a:	f7ff f9c8 	bl	801512e <quorem>
 8015d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015da2:	f806 8b01 	strb.w	r8, [r6], #1
 8015da6:	9b00      	ldr	r3, [sp, #0]
 8015da8:	eba6 020a 	sub.w	r2, r6, sl
 8015dac:	4293      	cmp	r3, r2
 8015dae:	ddb3      	ble.n	8015d18 <_dtoa_r+0xad8>
 8015db0:	4649      	mov	r1, r9
 8015db2:	2300      	movs	r3, #0
 8015db4:	220a      	movs	r2, #10
 8015db6:	4658      	mov	r0, fp
 8015db8:	f000 f8b2 	bl	8015f20 <__multadd>
 8015dbc:	4681      	mov	r9, r0
 8015dbe:	e7ea      	b.n	8015d96 <_dtoa_r+0xb56>
 8015dc0:	08018320 	.word	0x08018320
 8015dc4:	080182a4 	.word	0x080182a4

08015dc8 <_free_r>:
 8015dc8:	b538      	push	{r3, r4, r5, lr}
 8015dca:	4605      	mov	r5, r0
 8015dcc:	2900      	cmp	r1, #0
 8015dce:	d041      	beq.n	8015e54 <_free_r+0x8c>
 8015dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dd4:	1f0c      	subs	r4, r1, #4
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	bfb8      	it	lt
 8015dda:	18e4      	addlt	r4, r4, r3
 8015ddc:	f7fe fb4e 	bl	801447c <__malloc_lock>
 8015de0:	4a1d      	ldr	r2, [pc, #116]	@ (8015e58 <_free_r+0x90>)
 8015de2:	6813      	ldr	r3, [r2, #0]
 8015de4:	b933      	cbnz	r3, 8015df4 <_free_r+0x2c>
 8015de6:	6063      	str	r3, [r4, #4]
 8015de8:	6014      	str	r4, [r2, #0]
 8015dea:	4628      	mov	r0, r5
 8015dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015df0:	f7fe bb4a 	b.w	8014488 <__malloc_unlock>
 8015df4:	42a3      	cmp	r3, r4
 8015df6:	d908      	bls.n	8015e0a <_free_r+0x42>
 8015df8:	6820      	ldr	r0, [r4, #0]
 8015dfa:	1821      	adds	r1, r4, r0
 8015dfc:	428b      	cmp	r3, r1
 8015dfe:	bf01      	itttt	eq
 8015e00:	6819      	ldreq	r1, [r3, #0]
 8015e02:	685b      	ldreq	r3, [r3, #4]
 8015e04:	1809      	addeq	r1, r1, r0
 8015e06:	6021      	streq	r1, [r4, #0]
 8015e08:	e7ed      	b.n	8015de6 <_free_r+0x1e>
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	b10b      	cbz	r3, 8015e14 <_free_r+0x4c>
 8015e10:	42a3      	cmp	r3, r4
 8015e12:	d9fa      	bls.n	8015e0a <_free_r+0x42>
 8015e14:	6811      	ldr	r1, [r2, #0]
 8015e16:	1850      	adds	r0, r2, r1
 8015e18:	42a0      	cmp	r0, r4
 8015e1a:	d10b      	bne.n	8015e34 <_free_r+0x6c>
 8015e1c:	6820      	ldr	r0, [r4, #0]
 8015e1e:	4401      	add	r1, r0
 8015e20:	1850      	adds	r0, r2, r1
 8015e22:	4283      	cmp	r3, r0
 8015e24:	6011      	str	r1, [r2, #0]
 8015e26:	d1e0      	bne.n	8015dea <_free_r+0x22>
 8015e28:	6818      	ldr	r0, [r3, #0]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	6053      	str	r3, [r2, #4]
 8015e2e:	4408      	add	r0, r1
 8015e30:	6010      	str	r0, [r2, #0]
 8015e32:	e7da      	b.n	8015dea <_free_r+0x22>
 8015e34:	d902      	bls.n	8015e3c <_free_r+0x74>
 8015e36:	230c      	movs	r3, #12
 8015e38:	602b      	str	r3, [r5, #0]
 8015e3a:	e7d6      	b.n	8015dea <_free_r+0x22>
 8015e3c:	6820      	ldr	r0, [r4, #0]
 8015e3e:	1821      	adds	r1, r4, r0
 8015e40:	428b      	cmp	r3, r1
 8015e42:	bf04      	itt	eq
 8015e44:	6819      	ldreq	r1, [r3, #0]
 8015e46:	685b      	ldreq	r3, [r3, #4]
 8015e48:	6063      	str	r3, [r4, #4]
 8015e4a:	bf04      	itt	eq
 8015e4c:	1809      	addeq	r1, r1, r0
 8015e4e:	6021      	streq	r1, [r4, #0]
 8015e50:	6054      	str	r4, [r2, #4]
 8015e52:	e7ca      	b.n	8015dea <_free_r+0x22>
 8015e54:	bd38      	pop	{r3, r4, r5, pc}
 8015e56:	bf00      	nop
 8015e58:	2000057c 	.word	0x2000057c

08015e5c <_Balloc>:
 8015e5c:	b570      	push	{r4, r5, r6, lr}
 8015e5e:	69c6      	ldr	r6, [r0, #28]
 8015e60:	4604      	mov	r4, r0
 8015e62:	460d      	mov	r5, r1
 8015e64:	b976      	cbnz	r6, 8015e84 <_Balloc+0x28>
 8015e66:	2010      	movs	r0, #16
 8015e68:	f7fe fa56 	bl	8014318 <malloc>
 8015e6c:	4602      	mov	r2, r0
 8015e6e:	61e0      	str	r0, [r4, #28]
 8015e70:	b920      	cbnz	r0, 8015e7c <_Balloc+0x20>
 8015e72:	4b18      	ldr	r3, [pc, #96]	@ (8015ed4 <_Balloc+0x78>)
 8015e74:	4818      	ldr	r0, [pc, #96]	@ (8015ed8 <_Balloc+0x7c>)
 8015e76:	216b      	movs	r1, #107	@ 0x6b
 8015e78:	f000 fc1e 	bl	80166b8 <__assert_func>
 8015e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015e80:	6006      	str	r6, [r0, #0]
 8015e82:	60c6      	str	r6, [r0, #12]
 8015e84:	69e6      	ldr	r6, [r4, #28]
 8015e86:	68f3      	ldr	r3, [r6, #12]
 8015e88:	b183      	cbz	r3, 8015eac <_Balloc+0x50>
 8015e8a:	69e3      	ldr	r3, [r4, #28]
 8015e8c:	68db      	ldr	r3, [r3, #12]
 8015e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015e92:	b9b8      	cbnz	r0, 8015ec4 <_Balloc+0x68>
 8015e94:	2101      	movs	r1, #1
 8015e96:	fa01 f605 	lsl.w	r6, r1, r5
 8015e9a:	1d72      	adds	r2, r6, #5
 8015e9c:	0092      	lsls	r2, r2, #2
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f000 fc28 	bl	80166f4 <_calloc_r>
 8015ea4:	b160      	cbz	r0, 8015ec0 <_Balloc+0x64>
 8015ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015eaa:	e00e      	b.n	8015eca <_Balloc+0x6e>
 8015eac:	2221      	movs	r2, #33	@ 0x21
 8015eae:	2104      	movs	r1, #4
 8015eb0:	4620      	mov	r0, r4
 8015eb2:	f000 fc1f 	bl	80166f4 <_calloc_r>
 8015eb6:	69e3      	ldr	r3, [r4, #28]
 8015eb8:	60f0      	str	r0, [r6, #12]
 8015eba:	68db      	ldr	r3, [r3, #12]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d1e4      	bne.n	8015e8a <_Balloc+0x2e>
 8015ec0:	2000      	movs	r0, #0
 8015ec2:	bd70      	pop	{r4, r5, r6, pc}
 8015ec4:	6802      	ldr	r2, [r0, #0]
 8015ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015ed0:	e7f7      	b.n	8015ec2 <_Balloc+0x66>
 8015ed2:	bf00      	nop
 8015ed4:	080182b1 	.word	0x080182b1
 8015ed8:	08018331 	.word	0x08018331

08015edc <_Bfree>:
 8015edc:	b570      	push	{r4, r5, r6, lr}
 8015ede:	69c6      	ldr	r6, [r0, #28]
 8015ee0:	4605      	mov	r5, r0
 8015ee2:	460c      	mov	r4, r1
 8015ee4:	b976      	cbnz	r6, 8015f04 <_Bfree+0x28>
 8015ee6:	2010      	movs	r0, #16
 8015ee8:	f7fe fa16 	bl	8014318 <malloc>
 8015eec:	4602      	mov	r2, r0
 8015eee:	61e8      	str	r0, [r5, #28]
 8015ef0:	b920      	cbnz	r0, 8015efc <_Bfree+0x20>
 8015ef2:	4b09      	ldr	r3, [pc, #36]	@ (8015f18 <_Bfree+0x3c>)
 8015ef4:	4809      	ldr	r0, [pc, #36]	@ (8015f1c <_Bfree+0x40>)
 8015ef6:	218f      	movs	r1, #143	@ 0x8f
 8015ef8:	f000 fbde 	bl	80166b8 <__assert_func>
 8015efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f00:	6006      	str	r6, [r0, #0]
 8015f02:	60c6      	str	r6, [r0, #12]
 8015f04:	b13c      	cbz	r4, 8015f16 <_Bfree+0x3a>
 8015f06:	69eb      	ldr	r3, [r5, #28]
 8015f08:	6862      	ldr	r2, [r4, #4]
 8015f0a:	68db      	ldr	r3, [r3, #12]
 8015f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015f10:	6021      	str	r1, [r4, #0]
 8015f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015f16:	bd70      	pop	{r4, r5, r6, pc}
 8015f18:	080182b1 	.word	0x080182b1
 8015f1c:	08018331 	.word	0x08018331

08015f20 <__multadd>:
 8015f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f24:	690d      	ldr	r5, [r1, #16]
 8015f26:	4607      	mov	r7, r0
 8015f28:	460c      	mov	r4, r1
 8015f2a:	461e      	mov	r6, r3
 8015f2c:	f101 0c14 	add.w	ip, r1, #20
 8015f30:	2000      	movs	r0, #0
 8015f32:	f8dc 3000 	ldr.w	r3, [ip]
 8015f36:	b299      	uxth	r1, r3
 8015f38:	fb02 6101 	mla	r1, r2, r1, r6
 8015f3c:	0c1e      	lsrs	r6, r3, #16
 8015f3e:	0c0b      	lsrs	r3, r1, #16
 8015f40:	fb02 3306 	mla	r3, r2, r6, r3
 8015f44:	b289      	uxth	r1, r1
 8015f46:	3001      	adds	r0, #1
 8015f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015f4c:	4285      	cmp	r5, r0
 8015f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8015f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015f56:	dcec      	bgt.n	8015f32 <__multadd+0x12>
 8015f58:	b30e      	cbz	r6, 8015f9e <__multadd+0x7e>
 8015f5a:	68a3      	ldr	r3, [r4, #8]
 8015f5c:	42ab      	cmp	r3, r5
 8015f5e:	dc19      	bgt.n	8015f94 <__multadd+0x74>
 8015f60:	6861      	ldr	r1, [r4, #4]
 8015f62:	4638      	mov	r0, r7
 8015f64:	3101      	adds	r1, #1
 8015f66:	f7ff ff79 	bl	8015e5c <_Balloc>
 8015f6a:	4680      	mov	r8, r0
 8015f6c:	b928      	cbnz	r0, 8015f7a <__multadd+0x5a>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	4b0c      	ldr	r3, [pc, #48]	@ (8015fa4 <__multadd+0x84>)
 8015f72:	480d      	ldr	r0, [pc, #52]	@ (8015fa8 <__multadd+0x88>)
 8015f74:	21ba      	movs	r1, #186	@ 0xba
 8015f76:	f000 fb9f 	bl	80166b8 <__assert_func>
 8015f7a:	6922      	ldr	r2, [r4, #16]
 8015f7c:	3202      	adds	r2, #2
 8015f7e:	f104 010c 	add.w	r1, r4, #12
 8015f82:	0092      	lsls	r2, r2, #2
 8015f84:	300c      	adds	r0, #12
 8015f86:	f7ff f8c4 	bl	8015112 <memcpy>
 8015f8a:	4621      	mov	r1, r4
 8015f8c:	4638      	mov	r0, r7
 8015f8e:	f7ff ffa5 	bl	8015edc <_Bfree>
 8015f92:	4644      	mov	r4, r8
 8015f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015f98:	3501      	adds	r5, #1
 8015f9a:	615e      	str	r6, [r3, #20]
 8015f9c:	6125      	str	r5, [r4, #16]
 8015f9e:	4620      	mov	r0, r4
 8015fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fa4:	08018320 	.word	0x08018320
 8015fa8:	08018331 	.word	0x08018331

08015fac <__hi0bits>:
 8015fac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	bf36      	itet	cc
 8015fb4:	0403      	lslcc	r3, r0, #16
 8015fb6:	2000      	movcs	r0, #0
 8015fb8:	2010      	movcc	r0, #16
 8015fba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015fbe:	bf3c      	itt	cc
 8015fc0:	021b      	lslcc	r3, r3, #8
 8015fc2:	3008      	addcc	r0, #8
 8015fc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015fc8:	bf3c      	itt	cc
 8015fca:	011b      	lslcc	r3, r3, #4
 8015fcc:	3004      	addcc	r0, #4
 8015fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015fd2:	bf3c      	itt	cc
 8015fd4:	009b      	lslcc	r3, r3, #2
 8015fd6:	3002      	addcc	r0, #2
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	db05      	blt.n	8015fe8 <__hi0bits+0x3c>
 8015fdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015fe0:	f100 0001 	add.w	r0, r0, #1
 8015fe4:	bf08      	it	eq
 8015fe6:	2020      	moveq	r0, #32
 8015fe8:	4770      	bx	lr

08015fea <__lo0bits>:
 8015fea:	6803      	ldr	r3, [r0, #0]
 8015fec:	4602      	mov	r2, r0
 8015fee:	f013 0007 	ands.w	r0, r3, #7
 8015ff2:	d00b      	beq.n	801600c <__lo0bits+0x22>
 8015ff4:	07d9      	lsls	r1, r3, #31
 8015ff6:	d421      	bmi.n	801603c <__lo0bits+0x52>
 8015ff8:	0798      	lsls	r0, r3, #30
 8015ffa:	bf49      	itett	mi
 8015ffc:	085b      	lsrmi	r3, r3, #1
 8015ffe:	089b      	lsrpl	r3, r3, #2
 8016000:	2001      	movmi	r0, #1
 8016002:	6013      	strmi	r3, [r2, #0]
 8016004:	bf5c      	itt	pl
 8016006:	6013      	strpl	r3, [r2, #0]
 8016008:	2002      	movpl	r0, #2
 801600a:	4770      	bx	lr
 801600c:	b299      	uxth	r1, r3
 801600e:	b909      	cbnz	r1, 8016014 <__lo0bits+0x2a>
 8016010:	0c1b      	lsrs	r3, r3, #16
 8016012:	2010      	movs	r0, #16
 8016014:	b2d9      	uxtb	r1, r3
 8016016:	b909      	cbnz	r1, 801601c <__lo0bits+0x32>
 8016018:	3008      	adds	r0, #8
 801601a:	0a1b      	lsrs	r3, r3, #8
 801601c:	0719      	lsls	r1, r3, #28
 801601e:	bf04      	itt	eq
 8016020:	091b      	lsreq	r3, r3, #4
 8016022:	3004      	addeq	r0, #4
 8016024:	0799      	lsls	r1, r3, #30
 8016026:	bf04      	itt	eq
 8016028:	089b      	lsreq	r3, r3, #2
 801602a:	3002      	addeq	r0, #2
 801602c:	07d9      	lsls	r1, r3, #31
 801602e:	d403      	bmi.n	8016038 <__lo0bits+0x4e>
 8016030:	085b      	lsrs	r3, r3, #1
 8016032:	f100 0001 	add.w	r0, r0, #1
 8016036:	d003      	beq.n	8016040 <__lo0bits+0x56>
 8016038:	6013      	str	r3, [r2, #0]
 801603a:	4770      	bx	lr
 801603c:	2000      	movs	r0, #0
 801603e:	4770      	bx	lr
 8016040:	2020      	movs	r0, #32
 8016042:	4770      	bx	lr

08016044 <__i2b>:
 8016044:	b510      	push	{r4, lr}
 8016046:	460c      	mov	r4, r1
 8016048:	2101      	movs	r1, #1
 801604a:	f7ff ff07 	bl	8015e5c <_Balloc>
 801604e:	4602      	mov	r2, r0
 8016050:	b928      	cbnz	r0, 801605e <__i2b+0x1a>
 8016052:	4b05      	ldr	r3, [pc, #20]	@ (8016068 <__i2b+0x24>)
 8016054:	4805      	ldr	r0, [pc, #20]	@ (801606c <__i2b+0x28>)
 8016056:	f240 1145 	movw	r1, #325	@ 0x145
 801605a:	f000 fb2d 	bl	80166b8 <__assert_func>
 801605e:	2301      	movs	r3, #1
 8016060:	6144      	str	r4, [r0, #20]
 8016062:	6103      	str	r3, [r0, #16]
 8016064:	bd10      	pop	{r4, pc}
 8016066:	bf00      	nop
 8016068:	08018320 	.word	0x08018320
 801606c:	08018331 	.word	0x08018331

08016070 <__multiply>:
 8016070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016074:	4614      	mov	r4, r2
 8016076:	690a      	ldr	r2, [r1, #16]
 8016078:	6923      	ldr	r3, [r4, #16]
 801607a:	429a      	cmp	r2, r3
 801607c:	bfa8      	it	ge
 801607e:	4623      	movge	r3, r4
 8016080:	460f      	mov	r7, r1
 8016082:	bfa4      	itt	ge
 8016084:	460c      	movge	r4, r1
 8016086:	461f      	movge	r7, r3
 8016088:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801608c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016090:	68a3      	ldr	r3, [r4, #8]
 8016092:	6861      	ldr	r1, [r4, #4]
 8016094:	eb0a 0609 	add.w	r6, sl, r9
 8016098:	42b3      	cmp	r3, r6
 801609a:	b085      	sub	sp, #20
 801609c:	bfb8      	it	lt
 801609e:	3101      	addlt	r1, #1
 80160a0:	f7ff fedc 	bl	8015e5c <_Balloc>
 80160a4:	b930      	cbnz	r0, 80160b4 <__multiply+0x44>
 80160a6:	4602      	mov	r2, r0
 80160a8:	4b44      	ldr	r3, [pc, #272]	@ (80161bc <__multiply+0x14c>)
 80160aa:	4845      	ldr	r0, [pc, #276]	@ (80161c0 <__multiply+0x150>)
 80160ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80160b0:	f000 fb02 	bl	80166b8 <__assert_func>
 80160b4:	f100 0514 	add.w	r5, r0, #20
 80160b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80160bc:	462b      	mov	r3, r5
 80160be:	2200      	movs	r2, #0
 80160c0:	4543      	cmp	r3, r8
 80160c2:	d321      	bcc.n	8016108 <__multiply+0x98>
 80160c4:	f107 0114 	add.w	r1, r7, #20
 80160c8:	f104 0214 	add.w	r2, r4, #20
 80160cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80160d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80160d4:	9302      	str	r3, [sp, #8]
 80160d6:	1b13      	subs	r3, r2, r4
 80160d8:	3b15      	subs	r3, #21
 80160da:	f023 0303 	bic.w	r3, r3, #3
 80160de:	3304      	adds	r3, #4
 80160e0:	f104 0715 	add.w	r7, r4, #21
 80160e4:	42ba      	cmp	r2, r7
 80160e6:	bf38      	it	cc
 80160e8:	2304      	movcc	r3, #4
 80160ea:	9301      	str	r3, [sp, #4]
 80160ec:	9b02      	ldr	r3, [sp, #8]
 80160ee:	9103      	str	r1, [sp, #12]
 80160f0:	428b      	cmp	r3, r1
 80160f2:	d80c      	bhi.n	801610e <__multiply+0x9e>
 80160f4:	2e00      	cmp	r6, #0
 80160f6:	dd03      	ble.n	8016100 <__multiply+0x90>
 80160f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d05b      	beq.n	80161b8 <__multiply+0x148>
 8016100:	6106      	str	r6, [r0, #16]
 8016102:	b005      	add	sp, #20
 8016104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016108:	f843 2b04 	str.w	r2, [r3], #4
 801610c:	e7d8      	b.n	80160c0 <__multiply+0x50>
 801610e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016112:	f1ba 0f00 	cmp.w	sl, #0
 8016116:	d024      	beq.n	8016162 <__multiply+0xf2>
 8016118:	f104 0e14 	add.w	lr, r4, #20
 801611c:	46a9      	mov	r9, r5
 801611e:	f04f 0c00 	mov.w	ip, #0
 8016122:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016126:	f8d9 3000 	ldr.w	r3, [r9]
 801612a:	fa1f fb87 	uxth.w	fp, r7
 801612e:	b29b      	uxth	r3, r3
 8016130:	fb0a 330b 	mla	r3, sl, fp, r3
 8016134:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016138:	f8d9 7000 	ldr.w	r7, [r9]
 801613c:	4463      	add	r3, ip
 801613e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016142:	fb0a c70b 	mla	r7, sl, fp, ip
 8016146:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801614a:	b29b      	uxth	r3, r3
 801614c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016150:	4572      	cmp	r2, lr
 8016152:	f849 3b04 	str.w	r3, [r9], #4
 8016156:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801615a:	d8e2      	bhi.n	8016122 <__multiply+0xb2>
 801615c:	9b01      	ldr	r3, [sp, #4]
 801615e:	f845 c003 	str.w	ip, [r5, r3]
 8016162:	9b03      	ldr	r3, [sp, #12]
 8016164:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016168:	3104      	adds	r1, #4
 801616a:	f1b9 0f00 	cmp.w	r9, #0
 801616e:	d021      	beq.n	80161b4 <__multiply+0x144>
 8016170:	682b      	ldr	r3, [r5, #0]
 8016172:	f104 0c14 	add.w	ip, r4, #20
 8016176:	46ae      	mov	lr, r5
 8016178:	f04f 0a00 	mov.w	sl, #0
 801617c:	f8bc b000 	ldrh.w	fp, [ip]
 8016180:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016184:	fb09 770b 	mla	r7, r9, fp, r7
 8016188:	4457      	add	r7, sl
 801618a:	b29b      	uxth	r3, r3
 801618c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016190:	f84e 3b04 	str.w	r3, [lr], #4
 8016194:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016198:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801619c:	f8be 3000 	ldrh.w	r3, [lr]
 80161a0:	fb09 330a 	mla	r3, r9, sl, r3
 80161a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80161a8:	4562      	cmp	r2, ip
 80161aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80161ae:	d8e5      	bhi.n	801617c <__multiply+0x10c>
 80161b0:	9f01      	ldr	r7, [sp, #4]
 80161b2:	51eb      	str	r3, [r5, r7]
 80161b4:	3504      	adds	r5, #4
 80161b6:	e799      	b.n	80160ec <__multiply+0x7c>
 80161b8:	3e01      	subs	r6, #1
 80161ba:	e79b      	b.n	80160f4 <__multiply+0x84>
 80161bc:	08018320 	.word	0x08018320
 80161c0:	08018331 	.word	0x08018331

080161c4 <__pow5mult>:
 80161c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161c8:	4615      	mov	r5, r2
 80161ca:	f012 0203 	ands.w	r2, r2, #3
 80161ce:	4607      	mov	r7, r0
 80161d0:	460e      	mov	r6, r1
 80161d2:	d007      	beq.n	80161e4 <__pow5mult+0x20>
 80161d4:	4c25      	ldr	r4, [pc, #148]	@ (801626c <__pow5mult+0xa8>)
 80161d6:	3a01      	subs	r2, #1
 80161d8:	2300      	movs	r3, #0
 80161da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80161de:	f7ff fe9f 	bl	8015f20 <__multadd>
 80161e2:	4606      	mov	r6, r0
 80161e4:	10ad      	asrs	r5, r5, #2
 80161e6:	d03d      	beq.n	8016264 <__pow5mult+0xa0>
 80161e8:	69fc      	ldr	r4, [r7, #28]
 80161ea:	b97c      	cbnz	r4, 801620c <__pow5mult+0x48>
 80161ec:	2010      	movs	r0, #16
 80161ee:	f7fe f893 	bl	8014318 <malloc>
 80161f2:	4602      	mov	r2, r0
 80161f4:	61f8      	str	r0, [r7, #28]
 80161f6:	b928      	cbnz	r0, 8016204 <__pow5mult+0x40>
 80161f8:	4b1d      	ldr	r3, [pc, #116]	@ (8016270 <__pow5mult+0xac>)
 80161fa:	481e      	ldr	r0, [pc, #120]	@ (8016274 <__pow5mult+0xb0>)
 80161fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016200:	f000 fa5a 	bl	80166b8 <__assert_func>
 8016204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016208:	6004      	str	r4, [r0, #0]
 801620a:	60c4      	str	r4, [r0, #12]
 801620c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016214:	b94c      	cbnz	r4, 801622a <__pow5mult+0x66>
 8016216:	f240 2171 	movw	r1, #625	@ 0x271
 801621a:	4638      	mov	r0, r7
 801621c:	f7ff ff12 	bl	8016044 <__i2b>
 8016220:	2300      	movs	r3, #0
 8016222:	f8c8 0008 	str.w	r0, [r8, #8]
 8016226:	4604      	mov	r4, r0
 8016228:	6003      	str	r3, [r0, #0]
 801622a:	f04f 0900 	mov.w	r9, #0
 801622e:	07eb      	lsls	r3, r5, #31
 8016230:	d50a      	bpl.n	8016248 <__pow5mult+0x84>
 8016232:	4631      	mov	r1, r6
 8016234:	4622      	mov	r2, r4
 8016236:	4638      	mov	r0, r7
 8016238:	f7ff ff1a 	bl	8016070 <__multiply>
 801623c:	4631      	mov	r1, r6
 801623e:	4680      	mov	r8, r0
 8016240:	4638      	mov	r0, r7
 8016242:	f7ff fe4b 	bl	8015edc <_Bfree>
 8016246:	4646      	mov	r6, r8
 8016248:	106d      	asrs	r5, r5, #1
 801624a:	d00b      	beq.n	8016264 <__pow5mult+0xa0>
 801624c:	6820      	ldr	r0, [r4, #0]
 801624e:	b938      	cbnz	r0, 8016260 <__pow5mult+0x9c>
 8016250:	4622      	mov	r2, r4
 8016252:	4621      	mov	r1, r4
 8016254:	4638      	mov	r0, r7
 8016256:	f7ff ff0b 	bl	8016070 <__multiply>
 801625a:	6020      	str	r0, [r4, #0]
 801625c:	f8c0 9000 	str.w	r9, [r0]
 8016260:	4604      	mov	r4, r0
 8016262:	e7e4      	b.n	801622e <__pow5mult+0x6a>
 8016264:	4630      	mov	r0, r6
 8016266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801626a:	bf00      	nop
 801626c:	0801838c 	.word	0x0801838c
 8016270:	080182b1 	.word	0x080182b1
 8016274:	08018331 	.word	0x08018331

08016278 <__lshift>:
 8016278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801627c:	460c      	mov	r4, r1
 801627e:	6849      	ldr	r1, [r1, #4]
 8016280:	6923      	ldr	r3, [r4, #16]
 8016282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016286:	68a3      	ldr	r3, [r4, #8]
 8016288:	4607      	mov	r7, r0
 801628a:	4691      	mov	r9, r2
 801628c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016290:	f108 0601 	add.w	r6, r8, #1
 8016294:	42b3      	cmp	r3, r6
 8016296:	db0b      	blt.n	80162b0 <__lshift+0x38>
 8016298:	4638      	mov	r0, r7
 801629a:	f7ff fddf 	bl	8015e5c <_Balloc>
 801629e:	4605      	mov	r5, r0
 80162a0:	b948      	cbnz	r0, 80162b6 <__lshift+0x3e>
 80162a2:	4602      	mov	r2, r0
 80162a4:	4b28      	ldr	r3, [pc, #160]	@ (8016348 <__lshift+0xd0>)
 80162a6:	4829      	ldr	r0, [pc, #164]	@ (801634c <__lshift+0xd4>)
 80162a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80162ac:	f000 fa04 	bl	80166b8 <__assert_func>
 80162b0:	3101      	adds	r1, #1
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	e7ee      	b.n	8016294 <__lshift+0x1c>
 80162b6:	2300      	movs	r3, #0
 80162b8:	f100 0114 	add.w	r1, r0, #20
 80162bc:	f100 0210 	add.w	r2, r0, #16
 80162c0:	4618      	mov	r0, r3
 80162c2:	4553      	cmp	r3, sl
 80162c4:	db33      	blt.n	801632e <__lshift+0xb6>
 80162c6:	6920      	ldr	r0, [r4, #16]
 80162c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80162cc:	f104 0314 	add.w	r3, r4, #20
 80162d0:	f019 091f 	ands.w	r9, r9, #31
 80162d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80162d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80162dc:	d02b      	beq.n	8016336 <__lshift+0xbe>
 80162de:	f1c9 0e20 	rsb	lr, r9, #32
 80162e2:	468a      	mov	sl, r1
 80162e4:	2200      	movs	r2, #0
 80162e6:	6818      	ldr	r0, [r3, #0]
 80162e8:	fa00 f009 	lsl.w	r0, r0, r9
 80162ec:	4310      	orrs	r0, r2
 80162ee:	f84a 0b04 	str.w	r0, [sl], #4
 80162f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80162f6:	459c      	cmp	ip, r3
 80162f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80162fc:	d8f3      	bhi.n	80162e6 <__lshift+0x6e>
 80162fe:	ebac 0304 	sub.w	r3, ip, r4
 8016302:	3b15      	subs	r3, #21
 8016304:	f023 0303 	bic.w	r3, r3, #3
 8016308:	3304      	adds	r3, #4
 801630a:	f104 0015 	add.w	r0, r4, #21
 801630e:	4584      	cmp	ip, r0
 8016310:	bf38      	it	cc
 8016312:	2304      	movcc	r3, #4
 8016314:	50ca      	str	r2, [r1, r3]
 8016316:	b10a      	cbz	r2, 801631c <__lshift+0xa4>
 8016318:	f108 0602 	add.w	r6, r8, #2
 801631c:	3e01      	subs	r6, #1
 801631e:	4638      	mov	r0, r7
 8016320:	612e      	str	r6, [r5, #16]
 8016322:	4621      	mov	r1, r4
 8016324:	f7ff fdda 	bl	8015edc <_Bfree>
 8016328:	4628      	mov	r0, r5
 801632a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801632e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016332:	3301      	adds	r3, #1
 8016334:	e7c5      	b.n	80162c2 <__lshift+0x4a>
 8016336:	3904      	subs	r1, #4
 8016338:	f853 2b04 	ldr.w	r2, [r3], #4
 801633c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016340:	459c      	cmp	ip, r3
 8016342:	d8f9      	bhi.n	8016338 <__lshift+0xc0>
 8016344:	e7ea      	b.n	801631c <__lshift+0xa4>
 8016346:	bf00      	nop
 8016348:	08018320 	.word	0x08018320
 801634c:	08018331 	.word	0x08018331

08016350 <__mcmp>:
 8016350:	690a      	ldr	r2, [r1, #16]
 8016352:	4603      	mov	r3, r0
 8016354:	6900      	ldr	r0, [r0, #16]
 8016356:	1a80      	subs	r0, r0, r2
 8016358:	b530      	push	{r4, r5, lr}
 801635a:	d10e      	bne.n	801637a <__mcmp+0x2a>
 801635c:	3314      	adds	r3, #20
 801635e:	3114      	adds	r1, #20
 8016360:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016364:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016368:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801636c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016370:	4295      	cmp	r5, r2
 8016372:	d003      	beq.n	801637c <__mcmp+0x2c>
 8016374:	d205      	bcs.n	8016382 <__mcmp+0x32>
 8016376:	f04f 30ff 	mov.w	r0, #4294967295
 801637a:	bd30      	pop	{r4, r5, pc}
 801637c:	42a3      	cmp	r3, r4
 801637e:	d3f3      	bcc.n	8016368 <__mcmp+0x18>
 8016380:	e7fb      	b.n	801637a <__mcmp+0x2a>
 8016382:	2001      	movs	r0, #1
 8016384:	e7f9      	b.n	801637a <__mcmp+0x2a>
	...

08016388 <__mdiff>:
 8016388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801638c:	4689      	mov	r9, r1
 801638e:	4606      	mov	r6, r0
 8016390:	4611      	mov	r1, r2
 8016392:	4648      	mov	r0, r9
 8016394:	4614      	mov	r4, r2
 8016396:	f7ff ffdb 	bl	8016350 <__mcmp>
 801639a:	1e05      	subs	r5, r0, #0
 801639c:	d112      	bne.n	80163c4 <__mdiff+0x3c>
 801639e:	4629      	mov	r1, r5
 80163a0:	4630      	mov	r0, r6
 80163a2:	f7ff fd5b 	bl	8015e5c <_Balloc>
 80163a6:	4602      	mov	r2, r0
 80163a8:	b928      	cbnz	r0, 80163b6 <__mdiff+0x2e>
 80163aa:	4b3f      	ldr	r3, [pc, #252]	@ (80164a8 <__mdiff+0x120>)
 80163ac:	f240 2137 	movw	r1, #567	@ 0x237
 80163b0:	483e      	ldr	r0, [pc, #248]	@ (80164ac <__mdiff+0x124>)
 80163b2:	f000 f981 	bl	80166b8 <__assert_func>
 80163b6:	2301      	movs	r3, #1
 80163b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80163bc:	4610      	mov	r0, r2
 80163be:	b003      	add	sp, #12
 80163c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163c4:	bfbc      	itt	lt
 80163c6:	464b      	movlt	r3, r9
 80163c8:	46a1      	movlt	r9, r4
 80163ca:	4630      	mov	r0, r6
 80163cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80163d0:	bfba      	itte	lt
 80163d2:	461c      	movlt	r4, r3
 80163d4:	2501      	movlt	r5, #1
 80163d6:	2500      	movge	r5, #0
 80163d8:	f7ff fd40 	bl	8015e5c <_Balloc>
 80163dc:	4602      	mov	r2, r0
 80163de:	b918      	cbnz	r0, 80163e8 <__mdiff+0x60>
 80163e0:	4b31      	ldr	r3, [pc, #196]	@ (80164a8 <__mdiff+0x120>)
 80163e2:	f240 2145 	movw	r1, #581	@ 0x245
 80163e6:	e7e3      	b.n	80163b0 <__mdiff+0x28>
 80163e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80163ec:	6926      	ldr	r6, [r4, #16]
 80163ee:	60c5      	str	r5, [r0, #12]
 80163f0:	f109 0310 	add.w	r3, r9, #16
 80163f4:	f109 0514 	add.w	r5, r9, #20
 80163f8:	f104 0e14 	add.w	lr, r4, #20
 80163fc:	f100 0b14 	add.w	fp, r0, #20
 8016400:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016404:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016408:	9301      	str	r3, [sp, #4]
 801640a:	46d9      	mov	r9, fp
 801640c:	f04f 0c00 	mov.w	ip, #0
 8016410:	9b01      	ldr	r3, [sp, #4]
 8016412:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016416:	f853 af04 	ldr.w	sl, [r3, #4]!
 801641a:	9301      	str	r3, [sp, #4]
 801641c:	fa1f f38a 	uxth.w	r3, sl
 8016420:	4619      	mov	r1, r3
 8016422:	b283      	uxth	r3, r0
 8016424:	1acb      	subs	r3, r1, r3
 8016426:	0c00      	lsrs	r0, r0, #16
 8016428:	4463      	add	r3, ip
 801642a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801642e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016432:	b29b      	uxth	r3, r3
 8016434:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016438:	4576      	cmp	r6, lr
 801643a:	f849 3b04 	str.w	r3, [r9], #4
 801643e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016442:	d8e5      	bhi.n	8016410 <__mdiff+0x88>
 8016444:	1b33      	subs	r3, r6, r4
 8016446:	3b15      	subs	r3, #21
 8016448:	f023 0303 	bic.w	r3, r3, #3
 801644c:	3415      	adds	r4, #21
 801644e:	3304      	adds	r3, #4
 8016450:	42a6      	cmp	r6, r4
 8016452:	bf38      	it	cc
 8016454:	2304      	movcc	r3, #4
 8016456:	441d      	add	r5, r3
 8016458:	445b      	add	r3, fp
 801645a:	461e      	mov	r6, r3
 801645c:	462c      	mov	r4, r5
 801645e:	4544      	cmp	r4, r8
 8016460:	d30e      	bcc.n	8016480 <__mdiff+0xf8>
 8016462:	f108 0103 	add.w	r1, r8, #3
 8016466:	1b49      	subs	r1, r1, r5
 8016468:	f021 0103 	bic.w	r1, r1, #3
 801646c:	3d03      	subs	r5, #3
 801646e:	45a8      	cmp	r8, r5
 8016470:	bf38      	it	cc
 8016472:	2100      	movcc	r1, #0
 8016474:	440b      	add	r3, r1
 8016476:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801647a:	b191      	cbz	r1, 80164a2 <__mdiff+0x11a>
 801647c:	6117      	str	r7, [r2, #16]
 801647e:	e79d      	b.n	80163bc <__mdiff+0x34>
 8016480:	f854 1b04 	ldr.w	r1, [r4], #4
 8016484:	46e6      	mov	lr, ip
 8016486:	0c08      	lsrs	r0, r1, #16
 8016488:	fa1c fc81 	uxtah	ip, ip, r1
 801648c:	4471      	add	r1, lr
 801648e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016492:	b289      	uxth	r1, r1
 8016494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016498:	f846 1b04 	str.w	r1, [r6], #4
 801649c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80164a0:	e7dd      	b.n	801645e <__mdiff+0xd6>
 80164a2:	3f01      	subs	r7, #1
 80164a4:	e7e7      	b.n	8016476 <__mdiff+0xee>
 80164a6:	bf00      	nop
 80164a8:	08018320 	.word	0x08018320
 80164ac:	08018331 	.word	0x08018331

080164b0 <__d2b>:
 80164b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80164b4:	460f      	mov	r7, r1
 80164b6:	2101      	movs	r1, #1
 80164b8:	ec59 8b10 	vmov	r8, r9, d0
 80164bc:	4616      	mov	r6, r2
 80164be:	f7ff fccd 	bl	8015e5c <_Balloc>
 80164c2:	4604      	mov	r4, r0
 80164c4:	b930      	cbnz	r0, 80164d4 <__d2b+0x24>
 80164c6:	4602      	mov	r2, r0
 80164c8:	4b23      	ldr	r3, [pc, #140]	@ (8016558 <__d2b+0xa8>)
 80164ca:	4824      	ldr	r0, [pc, #144]	@ (801655c <__d2b+0xac>)
 80164cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80164d0:	f000 f8f2 	bl	80166b8 <__assert_func>
 80164d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80164d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164dc:	b10d      	cbz	r5, 80164e2 <__d2b+0x32>
 80164de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80164e2:	9301      	str	r3, [sp, #4]
 80164e4:	f1b8 0300 	subs.w	r3, r8, #0
 80164e8:	d023      	beq.n	8016532 <__d2b+0x82>
 80164ea:	4668      	mov	r0, sp
 80164ec:	9300      	str	r3, [sp, #0]
 80164ee:	f7ff fd7c 	bl	8015fea <__lo0bits>
 80164f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80164f6:	b1d0      	cbz	r0, 801652e <__d2b+0x7e>
 80164f8:	f1c0 0320 	rsb	r3, r0, #32
 80164fc:	fa02 f303 	lsl.w	r3, r2, r3
 8016500:	430b      	orrs	r3, r1
 8016502:	40c2      	lsrs	r2, r0
 8016504:	6163      	str	r3, [r4, #20]
 8016506:	9201      	str	r2, [sp, #4]
 8016508:	9b01      	ldr	r3, [sp, #4]
 801650a:	61a3      	str	r3, [r4, #24]
 801650c:	2b00      	cmp	r3, #0
 801650e:	bf0c      	ite	eq
 8016510:	2201      	moveq	r2, #1
 8016512:	2202      	movne	r2, #2
 8016514:	6122      	str	r2, [r4, #16]
 8016516:	b1a5      	cbz	r5, 8016542 <__d2b+0x92>
 8016518:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801651c:	4405      	add	r5, r0
 801651e:	603d      	str	r5, [r7, #0]
 8016520:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016524:	6030      	str	r0, [r6, #0]
 8016526:	4620      	mov	r0, r4
 8016528:	b003      	add	sp, #12
 801652a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801652e:	6161      	str	r1, [r4, #20]
 8016530:	e7ea      	b.n	8016508 <__d2b+0x58>
 8016532:	a801      	add	r0, sp, #4
 8016534:	f7ff fd59 	bl	8015fea <__lo0bits>
 8016538:	9b01      	ldr	r3, [sp, #4]
 801653a:	6163      	str	r3, [r4, #20]
 801653c:	3020      	adds	r0, #32
 801653e:	2201      	movs	r2, #1
 8016540:	e7e8      	b.n	8016514 <__d2b+0x64>
 8016542:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016546:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801654a:	6038      	str	r0, [r7, #0]
 801654c:	6918      	ldr	r0, [r3, #16]
 801654e:	f7ff fd2d 	bl	8015fac <__hi0bits>
 8016552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016556:	e7e5      	b.n	8016524 <__d2b+0x74>
 8016558:	08018320 	.word	0x08018320
 801655c:	08018331 	.word	0x08018331

08016560 <__sflush_r>:
 8016560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016568:	0716      	lsls	r6, r2, #28
 801656a:	4605      	mov	r5, r0
 801656c:	460c      	mov	r4, r1
 801656e:	d454      	bmi.n	801661a <__sflush_r+0xba>
 8016570:	684b      	ldr	r3, [r1, #4]
 8016572:	2b00      	cmp	r3, #0
 8016574:	dc02      	bgt.n	801657c <__sflush_r+0x1c>
 8016576:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016578:	2b00      	cmp	r3, #0
 801657a:	dd48      	ble.n	801660e <__sflush_r+0xae>
 801657c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801657e:	2e00      	cmp	r6, #0
 8016580:	d045      	beq.n	801660e <__sflush_r+0xae>
 8016582:	2300      	movs	r3, #0
 8016584:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016588:	682f      	ldr	r7, [r5, #0]
 801658a:	6a21      	ldr	r1, [r4, #32]
 801658c:	602b      	str	r3, [r5, #0]
 801658e:	d030      	beq.n	80165f2 <__sflush_r+0x92>
 8016590:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016592:	89a3      	ldrh	r3, [r4, #12]
 8016594:	0759      	lsls	r1, r3, #29
 8016596:	d505      	bpl.n	80165a4 <__sflush_r+0x44>
 8016598:	6863      	ldr	r3, [r4, #4]
 801659a:	1ad2      	subs	r2, r2, r3
 801659c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801659e:	b10b      	cbz	r3, 80165a4 <__sflush_r+0x44>
 80165a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80165a2:	1ad2      	subs	r2, r2, r3
 80165a4:	2300      	movs	r3, #0
 80165a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80165a8:	6a21      	ldr	r1, [r4, #32]
 80165aa:	4628      	mov	r0, r5
 80165ac:	47b0      	blx	r6
 80165ae:	1c43      	adds	r3, r0, #1
 80165b0:	89a3      	ldrh	r3, [r4, #12]
 80165b2:	d106      	bne.n	80165c2 <__sflush_r+0x62>
 80165b4:	6829      	ldr	r1, [r5, #0]
 80165b6:	291d      	cmp	r1, #29
 80165b8:	d82b      	bhi.n	8016612 <__sflush_r+0xb2>
 80165ba:	4a2a      	ldr	r2, [pc, #168]	@ (8016664 <__sflush_r+0x104>)
 80165bc:	410a      	asrs	r2, r1
 80165be:	07d6      	lsls	r6, r2, #31
 80165c0:	d427      	bmi.n	8016612 <__sflush_r+0xb2>
 80165c2:	2200      	movs	r2, #0
 80165c4:	6062      	str	r2, [r4, #4]
 80165c6:	04d9      	lsls	r1, r3, #19
 80165c8:	6922      	ldr	r2, [r4, #16]
 80165ca:	6022      	str	r2, [r4, #0]
 80165cc:	d504      	bpl.n	80165d8 <__sflush_r+0x78>
 80165ce:	1c42      	adds	r2, r0, #1
 80165d0:	d101      	bne.n	80165d6 <__sflush_r+0x76>
 80165d2:	682b      	ldr	r3, [r5, #0]
 80165d4:	b903      	cbnz	r3, 80165d8 <__sflush_r+0x78>
 80165d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80165d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80165da:	602f      	str	r7, [r5, #0]
 80165dc:	b1b9      	cbz	r1, 801660e <__sflush_r+0xae>
 80165de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80165e2:	4299      	cmp	r1, r3
 80165e4:	d002      	beq.n	80165ec <__sflush_r+0x8c>
 80165e6:	4628      	mov	r0, r5
 80165e8:	f7ff fbee 	bl	8015dc8 <_free_r>
 80165ec:	2300      	movs	r3, #0
 80165ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80165f0:	e00d      	b.n	801660e <__sflush_r+0xae>
 80165f2:	2301      	movs	r3, #1
 80165f4:	4628      	mov	r0, r5
 80165f6:	47b0      	blx	r6
 80165f8:	4602      	mov	r2, r0
 80165fa:	1c50      	adds	r0, r2, #1
 80165fc:	d1c9      	bne.n	8016592 <__sflush_r+0x32>
 80165fe:	682b      	ldr	r3, [r5, #0]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d0c6      	beq.n	8016592 <__sflush_r+0x32>
 8016604:	2b1d      	cmp	r3, #29
 8016606:	d001      	beq.n	801660c <__sflush_r+0xac>
 8016608:	2b16      	cmp	r3, #22
 801660a:	d11e      	bne.n	801664a <__sflush_r+0xea>
 801660c:	602f      	str	r7, [r5, #0]
 801660e:	2000      	movs	r0, #0
 8016610:	e022      	b.n	8016658 <__sflush_r+0xf8>
 8016612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016616:	b21b      	sxth	r3, r3
 8016618:	e01b      	b.n	8016652 <__sflush_r+0xf2>
 801661a:	690f      	ldr	r7, [r1, #16]
 801661c:	2f00      	cmp	r7, #0
 801661e:	d0f6      	beq.n	801660e <__sflush_r+0xae>
 8016620:	0793      	lsls	r3, r2, #30
 8016622:	680e      	ldr	r6, [r1, #0]
 8016624:	bf08      	it	eq
 8016626:	694b      	ldreq	r3, [r1, #20]
 8016628:	600f      	str	r7, [r1, #0]
 801662a:	bf18      	it	ne
 801662c:	2300      	movne	r3, #0
 801662e:	eba6 0807 	sub.w	r8, r6, r7
 8016632:	608b      	str	r3, [r1, #8]
 8016634:	f1b8 0f00 	cmp.w	r8, #0
 8016638:	dde9      	ble.n	801660e <__sflush_r+0xae>
 801663a:	6a21      	ldr	r1, [r4, #32]
 801663c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801663e:	4643      	mov	r3, r8
 8016640:	463a      	mov	r2, r7
 8016642:	4628      	mov	r0, r5
 8016644:	47b0      	blx	r6
 8016646:	2800      	cmp	r0, #0
 8016648:	dc08      	bgt.n	801665c <__sflush_r+0xfc>
 801664a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801664e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016652:	81a3      	strh	r3, [r4, #12]
 8016654:	f04f 30ff 	mov.w	r0, #4294967295
 8016658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801665c:	4407      	add	r7, r0
 801665e:	eba8 0800 	sub.w	r8, r8, r0
 8016662:	e7e7      	b.n	8016634 <__sflush_r+0xd4>
 8016664:	dfbffffe 	.word	0xdfbffffe

08016668 <_fflush_r>:
 8016668:	b538      	push	{r3, r4, r5, lr}
 801666a:	690b      	ldr	r3, [r1, #16]
 801666c:	4605      	mov	r5, r0
 801666e:	460c      	mov	r4, r1
 8016670:	b913      	cbnz	r3, 8016678 <_fflush_r+0x10>
 8016672:	2500      	movs	r5, #0
 8016674:	4628      	mov	r0, r5
 8016676:	bd38      	pop	{r3, r4, r5, pc}
 8016678:	b118      	cbz	r0, 8016682 <_fflush_r+0x1a>
 801667a:	6a03      	ldr	r3, [r0, #32]
 801667c:	b90b      	cbnz	r3, 8016682 <_fflush_r+0x1a>
 801667e:	f7fe fbfb 	bl	8014e78 <__sinit>
 8016682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d0f3      	beq.n	8016672 <_fflush_r+0xa>
 801668a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801668c:	07d0      	lsls	r0, r2, #31
 801668e:	d404      	bmi.n	801669a <_fflush_r+0x32>
 8016690:	0599      	lsls	r1, r3, #22
 8016692:	d402      	bmi.n	801669a <_fflush_r+0x32>
 8016694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016696:	f7fe fd3a 	bl	801510e <__retarget_lock_acquire_recursive>
 801669a:	4628      	mov	r0, r5
 801669c:	4621      	mov	r1, r4
 801669e:	f7ff ff5f 	bl	8016560 <__sflush_r>
 80166a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80166a4:	07da      	lsls	r2, r3, #31
 80166a6:	4605      	mov	r5, r0
 80166a8:	d4e4      	bmi.n	8016674 <_fflush_r+0xc>
 80166aa:	89a3      	ldrh	r3, [r4, #12]
 80166ac:	059b      	lsls	r3, r3, #22
 80166ae:	d4e1      	bmi.n	8016674 <_fflush_r+0xc>
 80166b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80166b2:	f7fe fd2d 	bl	8015110 <__retarget_lock_release_recursive>
 80166b6:	e7dd      	b.n	8016674 <_fflush_r+0xc>

080166b8 <__assert_func>:
 80166b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80166ba:	4614      	mov	r4, r2
 80166bc:	461a      	mov	r2, r3
 80166be:	4b09      	ldr	r3, [pc, #36]	@ (80166e4 <__assert_func+0x2c>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	4605      	mov	r5, r0
 80166c4:	68d8      	ldr	r0, [r3, #12]
 80166c6:	b954      	cbnz	r4, 80166de <__assert_func+0x26>
 80166c8:	4b07      	ldr	r3, [pc, #28]	@ (80166e8 <__assert_func+0x30>)
 80166ca:	461c      	mov	r4, r3
 80166cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80166d0:	9100      	str	r1, [sp, #0]
 80166d2:	462b      	mov	r3, r5
 80166d4:	4905      	ldr	r1, [pc, #20]	@ (80166ec <__assert_func+0x34>)
 80166d6:	f000 f841 	bl	801675c <fiprintf>
 80166da:	f7fd fe15 	bl	8014308 <abort>
 80166de:	4b04      	ldr	r3, [pc, #16]	@ (80166f0 <__assert_func+0x38>)
 80166e0:	e7f4      	b.n	80166cc <__assert_func+0x14>
 80166e2:	bf00      	nop
 80166e4:	2000003c 	.word	0x2000003c
 80166e8:	080184cd 	.word	0x080184cd
 80166ec:	0801849f 	.word	0x0801849f
 80166f0:	08018492 	.word	0x08018492

080166f4 <_calloc_r>:
 80166f4:	b570      	push	{r4, r5, r6, lr}
 80166f6:	fba1 5402 	umull	r5, r4, r1, r2
 80166fa:	b93c      	cbnz	r4, 801670c <_calloc_r+0x18>
 80166fc:	4629      	mov	r1, r5
 80166fe:	f7fd fe3d 	bl	801437c <_malloc_r>
 8016702:	4606      	mov	r6, r0
 8016704:	b928      	cbnz	r0, 8016712 <_calloc_r+0x1e>
 8016706:	2600      	movs	r6, #0
 8016708:	4630      	mov	r0, r6
 801670a:	bd70      	pop	{r4, r5, r6, pc}
 801670c:	220c      	movs	r2, #12
 801670e:	6002      	str	r2, [r0, #0]
 8016710:	e7f9      	b.n	8016706 <_calloc_r+0x12>
 8016712:	462a      	mov	r2, r5
 8016714:	4621      	mov	r1, r4
 8016716:	f7fe fc28 	bl	8014f6a <memset>
 801671a:	e7f5      	b.n	8016708 <_calloc_r+0x14>

0801671c <__ascii_mbtowc>:
 801671c:	b082      	sub	sp, #8
 801671e:	b901      	cbnz	r1, 8016722 <__ascii_mbtowc+0x6>
 8016720:	a901      	add	r1, sp, #4
 8016722:	b142      	cbz	r2, 8016736 <__ascii_mbtowc+0x1a>
 8016724:	b14b      	cbz	r3, 801673a <__ascii_mbtowc+0x1e>
 8016726:	7813      	ldrb	r3, [r2, #0]
 8016728:	600b      	str	r3, [r1, #0]
 801672a:	7812      	ldrb	r2, [r2, #0]
 801672c:	1e10      	subs	r0, r2, #0
 801672e:	bf18      	it	ne
 8016730:	2001      	movne	r0, #1
 8016732:	b002      	add	sp, #8
 8016734:	4770      	bx	lr
 8016736:	4610      	mov	r0, r2
 8016738:	e7fb      	b.n	8016732 <__ascii_mbtowc+0x16>
 801673a:	f06f 0001 	mvn.w	r0, #1
 801673e:	e7f8      	b.n	8016732 <__ascii_mbtowc+0x16>

08016740 <__ascii_wctomb>:
 8016740:	4603      	mov	r3, r0
 8016742:	4608      	mov	r0, r1
 8016744:	b141      	cbz	r1, 8016758 <__ascii_wctomb+0x18>
 8016746:	2aff      	cmp	r2, #255	@ 0xff
 8016748:	d904      	bls.n	8016754 <__ascii_wctomb+0x14>
 801674a:	228a      	movs	r2, #138	@ 0x8a
 801674c:	601a      	str	r2, [r3, #0]
 801674e:	f04f 30ff 	mov.w	r0, #4294967295
 8016752:	4770      	bx	lr
 8016754:	700a      	strb	r2, [r1, #0]
 8016756:	2001      	movs	r0, #1
 8016758:	4770      	bx	lr
	...

0801675c <fiprintf>:
 801675c:	b40e      	push	{r1, r2, r3}
 801675e:	b503      	push	{r0, r1, lr}
 8016760:	4601      	mov	r1, r0
 8016762:	ab03      	add	r3, sp, #12
 8016764:	4805      	ldr	r0, [pc, #20]	@ (801677c <fiprintf+0x20>)
 8016766:	f853 2b04 	ldr.w	r2, [r3], #4
 801676a:	6800      	ldr	r0, [r0, #0]
 801676c:	9301      	str	r3, [sp, #4]
 801676e:	f000 f831 	bl	80167d4 <_vfiprintf_r>
 8016772:	b002      	add	sp, #8
 8016774:	f85d eb04 	ldr.w	lr, [sp], #4
 8016778:	b003      	add	sp, #12
 801677a:	4770      	bx	lr
 801677c:	2000003c 	.word	0x2000003c

08016780 <__sfputc_r>:
 8016780:	6893      	ldr	r3, [r2, #8]
 8016782:	3b01      	subs	r3, #1
 8016784:	2b00      	cmp	r3, #0
 8016786:	b410      	push	{r4}
 8016788:	6093      	str	r3, [r2, #8]
 801678a:	da08      	bge.n	801679e <__sfputc_r+0x1e>
 801678c:	6994      	ldr	r4, [r2, #24]
 801678e:	42a3      	cmp	r3, r4
 8016790:	db01      	blt.n	8016796 <__sfputc_r+0x16>
 8016792:	290a      	cmp	r1, #10
 8016794:	d103      	bne.n	801679e <__sfputc_r+0x1e>
 8016796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801679a:	f000 b933 	b.w	8016a04 <__swbuf_r>
 801679e:	6813      	ldr	r3, [r2, #0]
 80167a0:	1c58      	adds	r0, r3, #1
 80167a2:	6010      	str	r0, [r2, #0]
 80167a4:	7019      	strb	r1, [r3, #0]
 80167a6:	4608      	mov	r0, r1
 80167a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167ac:	4770      	bx	lr

080167ae <__sfputs_r>:
 80167ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167b0:	4606      	mov	r6, r0
 80167b2:	460f      	mov	r7, r1
 80167b4:	4614      	mov	r4, r2
 80167b6:	18d5      	adds	r5, r2, r3
 80167b8:	42ac      	cmp	r4, r5
 80167ba:	d101      	bne.n	80167c0 <__sfputs_r+0x12>
 80167bc:	2000      	movs	r0, #0
 80167be:	e007      	b.n	80167d0 <__sfputs_r+0x22>
 80167c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167c4:	463a      	mov	r2, r7
 80167c6:	4630      	mov	r0, r6
 80167c8:	f7ff ffda 	bl	8016780 <__sfputc_r>
 80167cc:	1c43      	adds	r3, r0, #1
 80167ce:	d1f3      	bne.n	80167b8 <__sfputs_r+0xa>
 80167d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167d4 <_vfiprintf_r>:
 80167d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d8:	460d      	mov	r5, r1
 80167da:	b09d      	sub	sp, #116	@ 0x74
 80167dc:	4614      	mov	r4, r2
 80167de:	4698      	mov	r8, r3
 80167e0:	4606      	mov	r6, r0
 80167e2:	b118      	cbz	r0, 80167ec <_vfiprintf_r+0x18>
 80167e4:	6a03      	ldr	r3, [r0, #32]
 80167e6:	b90b      	cbnz	r3, 80167ec <_vfiprintf_r+0x18>
 80167e8:	f7fe fb46 	bl	8014e78 <__sinit>
 80167ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167ee:	07d9      	lsls	r1, r3, #31
 80167f0:	d405      	bmi.n	80167fe <_vfiprintf_r+0x2a>
 80167f2:	89ab      	ldrh	r3, [r5, #12]
 80167f4:	059a      	lsls	r2, r3, #22
 80167f6:	d402      	bmi.n	80167fe <_vfiprintf_r+0x2a>
 80167f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167fa:	f7fe fc88 	bl	801510e <__retarget_lock_acquire_recursive>
 80167fe:	89ab      	ldrh	r3, [r5, #12]
 8016800:	071b      	lsls	r3, r3, #28
 8016802:	d501      	bpl.n	8016808 <_vfiprintf_r+0x34>
 8016804:	692b      	ldr	r3, [r5, #16]
 8016806:	b99b      	cbnz	r3, 8016830 <_vfiprintf_r+0x5c>
 8016808:	4629      	mov	r1, r5
 801680a:	4630      	mov	r0, r6
 801680c:	f000 f938 	bl	8016a80 <__swsetup_r>
 8016810:	b170      	cbz	r0, 8016830 <_vfiprintf_r+0x5c>
 8016812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016814:	07dc      	lsls	r4, r3, #31
 8016816:	d504      	bpl.n	8016822 <_vfiprintf_r+0x4e>
 8016818:	f04f 30ff 	mov.w	r0, #4294967295
 801681c:	b01d      	add	sp, #116	@ 0x74
 801681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016822:	89ab      	ldrh	r3, [r5, #12]
 8016824:	0598      	lsls	r0, r3, #22
 8016826:	d4f7      	bmi.n	8016818 <_vfiprintf_r+0x44>
 8016828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801682a:	f7fe fc71 	bl	8015110 <__retarget_lock_release_recursive>
 801682e:	e7f3      	b.n	8016818 <_vfiprintf_r+0x44>
 8016830:	2300      	movs	r3, #0
 8016832:	9309      	str	r3, [sp, #36]	@ 0x24
 8016834:	2320      	movs	r3, #32
 8016836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801683a:	f8cd 800c 	str.w	r8, [sp, #12]
 801683e:	2330      	movs	r3, #48	@ 0x30
 8016840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80169f0 <_vfiprintf_r+0x21c>
 8016844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016848:	f04f 0901 	mov.w	r9, #1
 801684c:	4623      	mov	r3, r4
 801684e:	469a      	mov	sl, r3
 8016850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016854:	b10a      	cbz	r2, 801685a <_vfiprintf_r+0x86>
 8016856:	2a25      	cmp	r2, #37	@ 0x25
 8016858:	d1f9      	bne.n	801684e <_vfiprintf_r+0x7a>
 801685a:	ebba 0b04 	subs.w	fp, sl, r4
 801685e:	d00b      	beq.n	8016878 <_vfiprintf_r+0xa4>
 8016860:	465b      	mov	r3, fp
 8016862:	4622      	mov	r2, r4
 8016864:	4629      	mov	r1, r5
 8016866:	4630      	mov	r0, r6
 8016868:	f7ff ffa1 	bl	80167ae <__sfputs_r>
 801686c:	3001      	adds	r0, #1
 801686e:	f000 80a7 	beq.w	80169c0 <_vfiprintf_r+0x1ec>
 8016872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016874:	445a      	add	r2, fp
 8016876:	9209      	str	r2, [sp, #36]	@ 0x24
 8016878:	f89a 3000 	ldrb.w	r3, [sl]
 801687c:	2b00      	cmp	r3, #0
 801687e:	f000 809f 	beq.w	80169c0 <_vfiprintf_r+0x1ec>
 8016882:	2300      	movs	r3, #0
 8016884:	f04f 32ff 	mov.w	r2, #4294967295
 8016888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801688c:	f10a 0a01 	add.w	sl, sl, #1
 8016890:	9304      	str	r3, [sp, #16]
 8016892:	9307      	str	r3, [sp, #28]
 8016894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016898:	931a      	str	r3, [sp, #104]	@ 0x68
 801689a:	4654      	mov	r4, sl
 801689c:	2205      	movs	r2, #5
 801689e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168a2:	4853      	ldr	r0, [pc, #332]	@ (80169f0 <_vfiprintf_r+0x21c>)
 80168a4:	f7e9 fcc4 	bl	8000230 <memchr>
 80168a8:	9a04      	ldr	r2, [sp, #16]
 80168aa:	b9d8      	cbnz	r0, 80168e4 <_vfiprintf_r+0x110>
 80168ac:	06d1      	lsls	r1, r2, #27
 80168ae:	bf44      	itt	mi
 80168b0:	2320      	movmi	r3, #32
 80168b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80168b6:	0713      	lsls	r3, r2, #28
 80168b8:	bf44      	itt	mi
 80168ba:	232b      	movmi	r3, #43	@ 0x2b
 80168bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80168c0:	f89a 3000 	ldrb.w	r3, [sl]
 80168c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80168c6:	d015      	beq.n	80168f4 <_vfiprintf_r+0x120>
 80168c8:	9a07      	ldr	r2, [sp, #28]
 80168ca:	4654      	mov	r4, sl
 80168cc:	2000      	movs	r0, #0
 80168ce:	f04f 0c0a 	mov.w	ip, #10
 80168d2:	4621      	mov	r1, r4
 80168d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168d8:	3b30      	subs	r3, #48	@ 0x30
 80168da:	2b09      	cmp	r3, #9
 80168dc:	d94b      	bls.n	8016976 <_vfiprintf_r+0x1a2>
 80168de:	b1b0      	cbz	r0, 801690e <_vfiprintf_r+0x13a>
 80168e0:	9207      	str	r2, [sp, #28]
 80168e2:	e014      	b.n	801690e <_vfiprintf_r+0x13a>
 80168e4:	eba0 0308 	sub.w	r3, r0, r8
 80168e8:	fa09 f303 	lsl.w	r3, r9, r3
 80168ec:	4313      	orrs	r3, r2
 80168ee:	9304      	str	r3, [sp, #16]
 80168f0:	46a2      	mov	sl, r4
 80168f2:	e7d2      	b.n	801689a <_vfiprintf_r+0xc6>
 80168f4:	9b03      	ldr	r3, [sp, #12]
 80168f6:	1d19      	adds	r1, r3, #4
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	9103      	str	r1, [sp, #12]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	bfbb      	ittet	lt
 8016900:	425b      	neglt	r3, r3
 8016902:	f042 0202 	orrlt.w	r2, r2, #2
 8016906:	9307      	strge	r3, [sp, #28]
 8016908:	9307      	strlt	r3, [sp, #28]
 801690a:	bfb8      	it	lt
 801690c:	9204      	strlt	r2, [sp, #16]
 801690e:	7823      	ldrb	r3, [r4, #0]
 8016910:	2b2e      	cmp	r3, #46	@ 0x2e
 8016912:	d10a      	bne.n	801692a <_vfiprintf_r+0x156>
 8016914:	7863      	ldrb	r3, [r4, #1]
 8016916:	2b2a      	cmp	r3, #42	@ 0x2a
 8016918:	d132      	bne.n	8016980 <_vfiprintf_r+0x1ac>
 801691a:	9b03      	ldr	r3, [sp, #12]
 801691c:	1d1a      	adds	r2, r3, #4
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	9203      	str	r2, [sp, #12]
 8016922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016926:	3402      	adds	r4, #2
 8016928:	9305      	str	r3, [sp, #20]
 801692a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016a00 <_vfiprintf_r+0x22c>
 801692e:	7821      	ldrb	r1, [r4, #0]
 8016930:	2203      	movs	r2, #3
 8016932:	4650      	mov	r0, sl
 8016934:	f7e9 fc7c 	bl	8000230 <memchr>
 8016938:	b138      	cbz	r0, 801694a <_vfiprintf_r+0x176>
 801693a:	9b04      	ldr	r3, [sp, #16]
 801693c:	eba0 000a 	sub.w	r0, r0, sl
 8016940:	2240      	movs	r2, #64	@ 0x40
 8016942:	4082      	lsls	r2, r0
 8016944:	4313      	orrs	r3, r2
 8016946:	3401      	adds	r4, #1
 8016948:	9304      	str	r3, [sp, #16]
 801694a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801694e:	4829      	ldr	r0, [pc, #164]	@ (80169f4 <_vfiprintf_r+0x220>)
 8016950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016954:	2206      	movs	r2, #6
 8016956:	f7e9 fc6b 	bl	8000230 <memchr>
 801695a:	2800      	cmp	r0, #0
 801695c:	d03f      	beq.n	80169de <_vfiprintf_r+0x20a>
 801695e:	4b26      	ldr	r3, [pc, #152]	@ (80169f8 <_vfiprintf_r+0x224>)
 8016960:	bb1b      	cbnz	r3, 80169aa <_vfiprintf_r+0x1d6>
 8016962:	9b03      	ldr	r3, [sp, #12]
 8016964:	3307      	adds	r3, #7
 8016966:	f023 0307 	bic.w	r3, r3, #7
 801696a:	3308      	adds	r3, #8
 801696c:	9303      	str	r3, [sp, #12]
 801696e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016970:	443b      	add	r3, r7
 8016972:	9309      	str	r3, [sp, #36]	@ 0x24
 8016974:	e76a      	b.n	801684c <_vfiprintf_r+0x78>
 8016976:	fb0c 3202 	mla	r2, ip, r2, r3
 801697a:	460c      	mov	r4, r1
 801697c:	2001      	movs	r0, #1
 801697e:	e7a8      	b.n	80168d2 <_vfiprintf_r+0xfe>
 8016980:	2300      	movs	r3, #0
 8016982:	3401      	adds	r4, #1
 8016984:	9305      	str	r3, [sp, #20]
 8016986:	4619      	mov	r1, r3
 8016988:	f04f 0c0a 	mov.w	ip, #10
 801698c:	4620      	mov	r0, r4
 801698e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016992:	3a30      	subs	r2, #48	@ 0x30
 8016994:	2a09      	cmp	r2, #9
 8016996:	d903      	bls.n	80169a0 <_vfiprintf_r+0x1cc>
 8016998:	2b00      	cmp	r3, #0
 801699a:	d0c6      	beq.n	801692a <_vfiprintf_r+0x156>
 801699c:	9105      	str	r1, [sp, #20]
 801699e:	e7c4      	b.n	801692a <_vfiprintf_r+0x156>
 80169a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80169a4:	4604      	mov	r4, r0
 80169a6:	2301      	movs	r3, #1
 80169a8:	e7f0      	b.n	801698c <_vfiprintf_r+0x1b8>
 80169aa:	ab03      	add	r3, sp, #12
 80169ac:	9300      	str	r3, [sp, #0]
 80169ae:	462a      	mov	r2, r5
 80169b0:	4b12      	ldr	r3, [pc, #72]	@ (80169fc <_vfiprintf_r+0x228>)
 80169b2:	a904      	add	r1, sp, #16
 80169b4:	4630      	mov	r0, r6
 80169b6:	f7fd fe1b 	bl	80145f0 <_printf_float>
 80169ba:	4607      	mov	r7, r0
 80169bc:	1c78      	adds	r0, r7, #1
 80169be:	d1d6      	bne.n	801696e <_vfiprintf_r+0x19a>
 80169c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80169c2:	07d9      	lsls	r1, r3, #31
 80169c4:	d405      	bmi.n	80169d2 <_vfiprintf_r+0x1fe>
 80169c6:	89ab      	ldrh	r3, [r5, #12]
 80169c8:	059a      	lsls	r2, r3, #22
 80169ca:	d402      	bmi.n	80169d2 <_vfiprintf_r+0x1fe>
 80169cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80169ce:	f7fe fb9f 	bl	8015110 <__retarget_lock_release_recursive>
 80169d2:	89ab      	ldrh	r3, [r5, #12]
 80169d4:	065b      	lsls	r3, r3, #25
 80169d6:	f53f af1f 	bmi.w	8016818 <_vfiprintf_r+0x44>
 80169da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80169dc:	e71e      	b.n	801681c <_vfiprintf_r+0x48>
 80169de:	ab03      	add	r3, sp, #12
 80169e0:	9300      	str	r3, [sp, #0]
 80169e2:	462a      	mov	r2, r5
 80169e4:	4b05      	ldr	r3, [pc, #20]	@ (80169fc <_vfiprintf_r+0x228>)
 80169e6:	a904      	add	r1, sp, #16
 80169e8:	4630      	mov	r0, r6
 80169ea:	f7fe f899 	bl	8014b20 <_printf_i>
 80169ee:	e7e4      	b.n	80169ba <_vfiprintf_r+0x1e6>
 80169f0:	080185cf 	.word	0x080185cf
 80169f4:	080185d9 	.word	0x080185d9
 80169f8:	080145f1 	.word	0x080145f1
 80169fc:	080167af 	.word	0x080167af
 8016a00:	080185d5 	.word	0x080185d5

08016a04 <__swbuf_r>:
 8016a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a06:	460e      	mov	r6, r1
 8016a08:	4614      	mov	r4, r2
 8016a0a:	4605      	mov	r5, r0
 8016a0c:	b118      	cbz	r0, 8016a16 <__swbuf_r+0x12>
 8016a0e:	6a03      	ldr	r3, [r0, #32]
 8016a10:	b90b      	cbnz	r3, 8016a16 <__swbuf_r+0x12>
 8016a12:	f7fe fa31 	bl	8014e78 <__sinit>
 8016a16:	69a3      	ldr	r3, [r4, #24]
 8016a18:	60a3      	str	r3, [r4, #8]
 8016a1a:	89a3      	ldrh	r3, [r4, #12]
 8016a1c:	071a      	lsls	r2, r3, #28
 8016a1e:	d501      	bpl.n	8016a24 <__swbuf_r+0x20>
 8016a20:	6923      	ldr	r3, [r4, #16]
 8016a22:	b943      	cbnz	r3, 8016a36 <__swbuf_r+0x32>
 8016a24:	4621      	mov	r1, r4
 8016a26:	4628      	mov	r0, r5
 8016a28:	f000 f82a 	bl	8016a80 <__swsetup_r>
 8016a2c:	b118      	cbz	r0, 8016a36 <__swbuf_r+0x32>
 8016a2e:	f04f 37ff 	mov.w	r7, #4294967295
 8016a32:	4638      	mov	r0, r7
 8016a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a36:	6823      	ldr	r3, [r4, #0]
 8016a38:	6922      	ldr	r2, [r4, #16]
 8016a3a:	1a98      	subs	r0, r3, r2
 8016a3c:	6963      	ldr	r3, [r4, #20]
 8016a3e:	b2f6      	uxtb	r6, r6
 8016a40:	4283      	cmp	r3, r0
 8016a42:	4637      	mov	r7, r6
 8016a44:	dc05      	bgt.n	8016a52 <__swbuf_r+0x4e>
 8016a46:	4621      	mov	r1, r4
 8016a48:	4628      	mov	r0, r5
 8016a4a:	f7ff fe0d 	bl	8016668 <_fflush_r>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d1ed      	bne.n	8016a2e <__swbuf_r+0x2a>
 8016a52:	68a3      	ldr	r3, [r4, #8]
 8016a54:	3b01      	subs	r3, #1
 8016a56:	60a3      	str	r3, [r4, #8]
 8016a58:	6823      	ldr	r3, [r4, #0]
 8016a5a:	1c5a      	adds	r2, r3, #1
 8016a5c:	6022      	str	r2, [r4, #0]
 8016a5e:	701e      	strb	r6, [r3, #0]
 8016a60:	6962      	ldr	r2, [r4, #20]
 8016a62:	1c43      	adds	r3, r0, #1
 8016a64:	429a      	cmp	r2, r3
 8016a66:	d004      	beq.n	8016a72 <__swbuf_r+0x6e>
 8016a68:	89a3      	ldrh	r3, [r4, #12]
 8016a6a:	07db      	lsls	r3, r3, #31
 8016a6c:	d5e1      	bpl.n	8016a32 <__swbuf_r+0x2e>
 8016a6e:	2e0a      	cmp	r6, #10
 8016a70:	d1df      	bne.n	8016a32 <__swbuf_r+0x2e>
 8016a72:	4621      	mov	r1, r4
 8016a74:	4628      	mov	r0, r5
 8016a76:	f7ff fdf7 	bl	8016668 <_fflush_r>
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	d0d9      	beq.n	8016a32 <__swbuf_r+0x2e>
 8016a7e:	e7d6      	b.n	8016a2e <__swbuf_r+0x2a>

08016a80 <__swsetup_r>:
 8016a80:	b538      	push	{r3, r4, r5, lr}
 8016a82:	4b29      	ldr	r3, [pc, #164]	@ (8016b28 <__swsetup_r+0xa8>)
 8016a84:	4605      	mov	r5, r0
 8016a86:	6818      	ldr	r0, [r3, #0]
 8016a88:	460c      	mov	r4, r1
 8016a8a:	b118      	cbz	r0, 8016a94 <__swsetup_r+0x14>
 8016a8c:	6a03      	ldr	r3, [r0, #32]
 8016a8e:	b90b      	cbnz	r3, 8016a94 <__swsetup_r+0x14>
 8016a90:	f7fe f9f2 	bl	8014e78 <__sinit>
 8016a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a98:	0719      	lsls	r1, r3, #28
 8016a9a:	d422      	bmi.n	8016ae2 <__swsetup_r+0x62>
 8016a9c:	06da      	lsls	r2, r3, #27
 8016a9e:	d407      	bmi.n	8016ab0 <__swsetup_r+0x30>
 8016aa0:	2209      	movs	r2, #9
 8016aa2:	602a      	str	r2, [r5, #0]
 8016aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016aa8:	81a3      	strh	r3, [r4, #12]
 8016aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8016aae:	e033      	b.n	8016b18 <__swsetup_r+0x98>
 8016ab0:	0758      	lsls	r0, r3, #29
 8016ab2:	d512      	bpl.n	8016ada <__swsetup_r+0x5a>
 8016ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016ab6:	b141      	cbz	r1, 8016aca <__swsetup_r+0x4a>
 8016ab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016abc:	4299      	cmp	r1, r3
 8016abe:	d002      	beq.n	8016ac6 <__swsetup_r+0x46>
 8016ac0:	4628      	mov	r0, r5
 8016ac2:	f7ff f981 	bl	8015dc8 <_free_r>
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8016aca:	89a3      	ldrh	r3, [r4, #12]
 8016acc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016ad0:	81a3      	strh	r3, [r4, #12]
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	6063      	str	r3, [r4, #4]
 8016ad6:	6923      	ldr	r3, [r4, #16]
 8016ad8:	6023      	str	r3, [r4, #0]
 8016ada:	89a3      	ldrh	r3, [r4, #12]
 8016adc:	f043 0308 	orr.w	r3, r3, #8
 8016ae0:	81a3      	strh	r3, [r4, #12]
 8016ae2:	6923      	ldr	r3, [r4, #16]
 8016ae4:	b94b      	cbnz	r3, 8016afa <__swsetup_r+0x7a>
 8016ae6:	89a3      	ldrh	r3, [r4, #12]
 8016ae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016af0:	d003      	beq.n	8016afa <__swsetup_r+0x7a>
 8016af2:	4621      	mov	r1, r4
 8016af4:	4628      	mov	r0, r5
 8016af6:	f000 f83f 	bl	8016b78 <__smakebuf_r>
 8016afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016afe:	f013 0201 	ands.w	r2, r3, #1
 8016b02:	d00a      	beq.n	8016b1a <__swsetup_r+0x9a>
 8016b04:	2200      	movs	r2, #0
 8016b06:	60a2      	str	r2, [r4, #8]
 8016b08:	6962      	ldr	r2, [r4, #20]
 8016b0a:	4252      	negs	r2, r2
 8016b0c:	61a2      	str	r2, [r4, #24]
 8016b0e:	6922      	ldr	r2, [r4, #16]
 8016b10:	b942      	cbnz	r2, 8016b24 <__swsetup_r+0xa4>
 8016b12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016b16:	d1c5      	bne.n	8016aa4 <__swsetup_r+0x24>
 8016b18:	bd38      	pop	{r3, r4, r5, pc}
 8016b1a:	0799      	lsls	r1, r3, #30
 8016b1c:	bf58      	it	pl
 8016b1e:	6962      	ldrpl	r2, [r4, #20]
 8016b20:	60a2      	str	r2, [r4, #8]
 8016b22:	e7f4      	b.n	8016b0e <__swsetup_r+0x8e>
 8016b24:	2000      	movs	r0, #0
 8016b26:	e7f7      	b.n	8016b18 <__swsetup_r+0x98>
 8016b28:	2000003c 	.word	0x2000003c

08016b2c <__swhatbuf_r>:
 8016b2c:	b570      	push	{r4, r5, r6, lr}
 8016b2e:	460c      	mov	r4, r1
 8016b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b34:	2900      	cmp	r1, #0
 8016b36:	b096      	sub	sp, #88	@ 0x58
 8016b38:	4615      	mov	r5, r2
 8016b3a:	461e      	mov	r6, r3
 8016b3c:	da0d      	bge.n	8016b5a <__swhatbuf_r+0x2e>
 8016b3e:	89a3      	ldrh	r3, [r4, #12]
 8016b40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016b44:	f04f 0100 	mov.w	r1, #0
 8016b48:	bf14      	ite	ne
 8016b4a:	2340      	movne	r3, #64	@ 0x40
 8016b4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016b50:	2000      	movs	r0, #0
 8016b52:	6031      	str	r1, [r6, #0]
 8016b54:	602b      	str	r3, [r5, #0]
 8016b56:	b016      	add	sp, #88	@ 0x58
 8016b58:	bd70      	pop	{r4, r5, r6, pc}
 8016b5a:	466a      	mov	r2, sp
 8016b5c:	f000 f848 	bl	8016bf0 <_fstat_r>
 8016b60:	2800      	cmp	r0, #0
 8016b62:	dbec      	blt.n	8016b3e <__swhatbuf_r+0x12>
 8016b64:	9901      	ldr	r1, [sp, #4]
 8016b66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016b6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016b6e:	4259      	negs	r1, r3
 8016b70:	4159      	adcs	r1, r3
 8016b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016b76:	e7eb      	b.n	8016b50 <__swhatbuf_r+0x24>

08016b78 <__smakebuf_r>:
 8016b78:	898b      	ldrh	r3, [r1, #12]
 8016b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b7c:	079d      	lsls	r5, r3, #30
 8016b7e:	4606      	mov	r6, r0
 8016b80:	460c      	mov	r4, r1
 8016b82:	d507      	bpl.n	8016b94 <__smakebuf_r+0x1c>
 8016b84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016b88:	6023      	str	r3, [r4, #0]
 8016b8a:	6123      	str	r3, [r4, #16]
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	6163      	str	r3, [r4, #20]
 8016b90:	b003      	add	sp, #12
 8016b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b94:	ab01      	add	r3, sp, #4
 8016b96:	466a      	mov	r2, sp
 8016b98:	f7ff ffc8 	bl	8016b2c <__swhatbuf_r>
 8016b9c:	9f00      	ldr	r7, [sp, #0]
 8016b9e:	4605      	mov	r5, r0
 8016ba0:	4639      	mov	r1, r7
 8016ba2:	4630      	mov	r0, r6
 8016ba4:	f7fd fbea 	bl	801437c <_malloc_r>
 8016ba8:	b948      	cbnz	r0, 8016bbe <__smakebuf_r+0x46>
 8016baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bae:	059a      	lsls	r2, r3, #22
 8016bb0:	d4ee      	bmi.n	8016b90 <__smakebuf_r+0x18>
 8016bb2:	f023 0303 	bic.w	r3, r3, #3
 8016bb6:	f043 0302 	orr.w	r3, r3, #2
 8016bba:	81a3      	strh	r3, [r4, #12]
 8016bbc:	e7e2      	b.n	8016b84 <__smakebuf_r+0xc>
 8016bbe:	89a3      	ldrh	r3, [r4, #12]
 8016bc0:	6020      	str	r0, [r4, #0]
 8016bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016bc6:	81a3      	strh	r3, [r4, #12]
 8016bc8:	9b01      	ldr	r3, [sp, #4]
 8016bca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016bce:	b15b      	cbz	r3, 8016be8 <__smakebuf_r+0x70>
 8016bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bd4:	4630      	mov	r0, r6
 8016bd6:	f000 f81d 	bl	8016c14 <_isatty_r>
 8016bda:	b128      	cbz	r0, 8016be8 <__smakebuf_r+0x70>
 8016bdc:	89a3      	ldrh	r3, [r4, #12]
 8016bde:	f023 0303 	bic.w	r3, r3, #3
 8016be2:	f043 0301 	orr.w	r3, r3, #1
 8016be6:	81a3      	strh	r3, [r4, #12]
 8016be8:	89a3      	ldrh	r3, [r4, #12]
 8016bea:	431d      	orrs	r5, r3
 8016bec:	81a5      	strh	r5, [r4, #12]
 8016bee:	e7cf      	b.n	8016b90 <__smakebuf_r+0x18>

08016bf0 <_fstat_r>:
 8016bf0:	b538      	push	{r3, r4, r5, lr}
 8016bf2:	4d07      	ldr	r5, [pc, #28]	@ (8016c10 <_fstat_r+0x20>)
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	4604      	mov	r4, r0
 8016bf8:	4608      	mov	r0, r1
 8016bfa:	4611      	mov	r1, r2
 8016bfc:	602b      	str	r3, [r5, #0]
 8016bfe:	f7f7 faf5 	bl	800e1ec <_fstat>
 8016c02:	1c43      	adds	r3, r0, #1
 8016c04:	d102      	bne.n	8016c0c <_fstat_r+0x1c>
 8016c06:	682b      	ldr	r3, [r5, #0]
 8016c08:	b103      	cbz	r3, 8016c0c <_fstat_r+0x1c>
 8016c0a:	6023      	str	r3, [r4, #0]
 8016c0c:	bd38      	pop	{r3, r4, r5, pc}
 8016c0e:	bf00      	nop
 8016c10:	200006bc 	.word	0x200006bc

08016c14 <_isatty_r>:
 8016c14:	b538      	push	{r3, r4, r5, lr}
 8016c16:	4d06      	ldr	r5, [pc, #24]	@ (8016c30 <_isatty_r+0x1c>)
 8016c18:	2300      	movs	r3, #0
 8016c1a:	4604      	mov	r4, r0
 8016c1c:	4608      	mov	r0, r1
 8016c1e:	602b      	str	r3, [r5, #0]
 8016c20:	f7f7 faf4 	bl	800e20c <_isatty>
 8016c24:	1c43      	adds	r3, r0, #1
 8016c26:	d102      	bne.n	8016c2e <_isatty_r+0x1a>
 8016c28:	682b      	ldr	r3, [r5, #0]
 8016c2a:	b103      	cbz	r3, 8016c2e <_isatty_r+0x1a>
 8016c2c:	6023      	str	r3, [r4, #0]
 8016c2e:	bd38      	pop	{r3, r4, r5, pc}
 8016c30:	200006bc 	.word	0x200006bc

08016c34 <_Unwind_GetDataRelBase>:
 8016c34:	b508      	push	{r3, lr}
 8016c36:	f7fd fb67 	bl	8014308 <abort>

08016c3a <_Unwind_GetTextRelBase>:
 8016c3a:	b508      	push	{r3, lr}
 8016c3c:	f7ff fffa 	bl	8016c34 <_Unwind_GetDataRelBase>

08016c40 <_init>:
 8016c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c42:	bf00      	nop
 8016c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c46:	bc08      	pop	{r3}
 8016c48:	469e      	mov	lr, r3
 8016c4a:	4770      	bx	lr

08016c4c <_fini>:
 8016c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c4e:	bf00      	nop
 8016c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c52:	bc08      	pop	{r3}
 8016c54:	469e      	mov	lr, r3
 8016c56:	4770      	bx	lr
